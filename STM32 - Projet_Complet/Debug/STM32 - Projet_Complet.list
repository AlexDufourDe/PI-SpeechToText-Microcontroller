
STM32 - Projet_Complet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f41c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0015eba8  0800f620  0800f620  0001f620  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0816e1c8  0816e1c8  0018141c  2**0
                  CONTENTS
  4 .ARM          00000008  0816e1c8  0816e1c8  0017e1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0816e1d0  0816e1d0  0018141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0816e1d0  0816e1d0  0017e1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0816e1d4  0816e1d4  0017e1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000141c  20000000  0816e1d8  00180000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b20  2000141c  0816f5f4  0018141c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001f3c  0816f5f4  00181f3c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0018141c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217a5  00000000  00000000  0018144a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000537f  00000000  00000000  001a2bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  001a7f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  001a98a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003688a  00000000  00000000  001aaf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025cf4  00000000  00000000  001e17e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00135160  00000000  00000000  002074d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0033c636  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006918  00000000  00000000  0033c688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000141c 	.word	0x2000141c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f604 	.word	0x0800f604

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001420 	.word	0x20001420
 800023c:	0800f604 	.word	0x0800f604

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_ADC1_Init+0x98>)
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <MX_ADC1_Init+0x9c>)
 80005fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_ADC1_Init+0x98>)
 80005fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_ADC1_Init+0x98>)
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_ADC1_Init+0xa0>)
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_ADC1_Init+0x98>)
 8000632:	2201      	movs	r2, #1
 8000634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_ADC1_Init+0x98>)
 8000640:	2201      	movs	r2, #1
 8000642:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_ADC1_Init+0x98>)
 8000646:	f001 fab3 	bl	8001bb0 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000650:	f000 fda0 	bl	8001194 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_ADC1_Init+0xa4>)
 8000656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000658:	2301      	movs	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_ADC1_Init+0x98>)
 8000666:	f001 fae7 	bl	8001c38 <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000670:	f000 fd90 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20001438 	.word	0x20001438
 8000680:	40012000 	.word	0x40012000
 8000684:	0f000001 	.word	0x0f000001
 8000688:	10000012 	.word	0x10000012

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_ADC_MspInit+0x38>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d10b      	bne.n	80006b6 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <MX_CRC_Init+0x40>)
 80006d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_CRC_Init+0x3c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_CRC_Init+0x3c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_CRC_Init+0x3c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f6:	f001 fe01 	bl	80022fc <HAL_CRC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000700:	f000 fd48 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20001480 	.word	0x20001480
 800070c:	40023000 	.word	0x40023000

08000710 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_CRC_MspInit+0x38>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d10b      	bne.n	800073a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a09      	ldr	r2, [pc, #36]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023000 	.word	0x40023000
 800074c:	40023800 	.word	0x40023800

08000750 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000754:	4b63      	ldr	r3, [pc, #396]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000756:	4a64      	ldr	r2, [pc, #400]	; (80008e8 <MX_DFSDM1_Init+0x198>)
 8000758:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800075a:	4b62      	ldr	r3, [pc, #392]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000760:	4b60      	ldr	r3, [pc, #384]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000762:	2201      	movs	r2, #1
 8000764:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000766:	4b5f      	ldr	r3, [pc, #380]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000768:	2201      	movs	r2, #1
 800076a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800076c:	4b5d      	ldr	r3, [pc, #372]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 8000772:	4b5c      	ldr	r3, [pc, #368]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000774:	2200      	movs	r2, #0
 8000776:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000778:	4b5a      	ldr	r3, [pc, #360]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800077a:	2200      	movs	r2, #0
 800077c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800077e:	4b59      	ldr	r3, [pc, #356]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000784:	4b57      	ldr	r3, [pc, #348]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800078a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800078c:	4b55      	ldr	r3, [pc, #340]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800078e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000792:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 8000794:	4b53      	ldr	r3, [pc, #332]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000796:	22b0      	movs	r2, #176	; 0xb0
 8000798:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800079a:	4b52      	ldr	r3, [pc, #328]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800079c:	2201      	movs	r2, #1
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80007a0:	4850      	ldr	r0, [pc, #320]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80007a2:	f001 ff55 	bl	8002650 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80007a6:	4b51      	ldr	r3, [pc, #324]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007a8:	4a51      	ldr	r2, [pc, #324]	; (80008f0 <MX_DFSDM1_Init+0x1a0>)
 80007aa:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 80007ac:	4b4f      	ldr	r3, [pc, #316]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80007b2:	4b4e      	ldr	r3, [pc, #312]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80007b8:	4b4c      	ldr	r3, [pc, #304]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007be:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 80007c4:	4b49      	ldr	r3, [pc, #292]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 80007ca:	4b48      	ldr	r3, [pc, #288]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80007d0:	4b46      	ldr	r3, [pc, #280]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80007d6:	4b45      	ldr	r3, [pc, #276]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007dc:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80007de:	4b43      	ldr	r3, [pc, #268]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007e0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80007e4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 80007e6:	4b41      	ldr	r3, [pc, #260]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007e8:	22b0      	movs	r2, #176	; 0xb0
 80007ea:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80007ec:	4b3f      	ldr	r3, [pc, #252]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80007f2:	483e      	ldr	r0, [pc, #248]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007f4:	f001 ff2c 	bl	8002650 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80007f8:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 80007fa:	4a3f      	ldr	r2, [pc, #252]	; (80008f8 <MX_DFSDM1_Init+0x1a8>)
 80007fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80007fe:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000800:	2201      	movs	r2, #1
 8000802:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000804:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 800080c:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800080e:	2204      	movs	r2, #4
 8000810:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800081e:	4b35      	ldr	r3, [pc, #212]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000824:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000826:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800082c:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800082e:	2204      	movs	r2, #4
 8000830:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000832:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800083a:	2201      	movs	r2, #1
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000840:	2200      	movs	r2, #0
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000846:	2200      	movs	r2, #0
 8000848:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800084c:	f001 fe40 	bl	80024d0 <HAL_DFSDM_ChannelInit>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 8000856:	f000 fc9d 	bl	8001194 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800085c:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_DFSDM1_Init+0x1b0>)
 800085e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000860:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000862:	2201      	movs	r2, #1
 8000864:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000870:	2204      	movs	r2, #4
 8000872:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800088e:	2204      	movs	r2, #4
 8000890:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800089a:	220a      	movs	r2, #10
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008a6:	2202      	movs	r2, #2
 80008a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008ac:	f001 fe10 	bl	80024d0 <HAL_DFSDM_ChannelInit>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 80008b6:	f000 fc6d 	bl	8001194 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 80008ba:	2201      	movs	r2, #1
 80008bc:	4911      	ldr	r1, [pc, #68]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80008c0:	f001 ffa0 	bl	8002804 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 80008c4:	490f      	ldr	r1, [pc, #60]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80008c8:	f001 ffe2 	bl	8002890 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 80008cc:	2201      	movs	r2, #1
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80008d2:	f001 ff97 	bl	8002804 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 80008d6:	2101      	movs	r1, #1
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80008da:	f001 ffd9 	bl	8002890 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200014a4 	.word	0x200014a4
 80008e8:	40017500 	.word	0x40017500
 80008ec:	200014f8 	.word	0x200014f8
 80008f0:	40017580 	.word	0x40017580
 80008f4:	2000154c 	.word	0x2000154c
 80008f8:	40017400 	.word	0x40017400
 80008fc:	20001584 	.word	0x20001584
 8000900:	40017420 	.word	0x40017420
 8000904:	00010002 	.word	0x00010002

08000908 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000920:	4b63      	ldr	r3, [pc, #396]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d145      	bne.n	80009b4 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000928:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	4a61      	ldr	r2, [pc, #388]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000930:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000932:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d10b      	bne.n	8000952 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800093a:	4b5f      	ldr	r3, [pc, #380]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a5e      	ldr	r2, [pc, #376]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b5c      	ldr	r3, [pc, #368]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a58      	ldr	r2, [pc, #352]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000972:	2302      	movs	r3, #2
 8000974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800097a:	230a      	movs	r3, #10
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	484d      	ldr	r0, [pc, #308]	; (8000abc <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000986:	f002 fbc3 	bl	8003110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800098a:	2308      	movs	r3, #8
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800099a:	2303      	movs	r3, #3
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4845      	ldr	r0, [pc, #276]	; (8000abc <HAL_DFSDM_FilterMspInit+0x1b4>)
 80009a6:	f002 fbb3 	bl	8003110 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009b2:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a41      	ldr	r2, [pc, #260]	; (8000ac0 <HAL_DFSDM_FilterMspInit+0x1b8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d137      	bne.n	8000a2e <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80009be:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009c0:	4a41      	ldr	r2, [pc, #260]	; (8000ac8 <HAL_DFSDM_FilterMspInit+0x1c0>)
 80009c2:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80009c4:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009cc:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009de:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009e0:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ee:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009fe:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000a06:	482f      	ldr	r0, [pc, #188]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a08:	f001 ffdc 	bl	80029c4 <HAL_DMA_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 8000a12:	f000 fbbf 	bl	8001194 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a2a      	ldr	r2, [pc, #168]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1c:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
 8000a28:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d137      	bne.n	8000aa8 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a3a:	4a26      	ldr	r2, [pc, #152]	; (8000ad4 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000a3c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a44:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a58:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a68:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a70:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a78:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000a80:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a82:	f001 ff9f 	bl	80029c4 <HAL_DMA_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 8000a8c:	f000 fb82 	bl	8001194 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20001680 	.word	0x20001680
 8000ab4:	2000167c 	.word	0x2000167c
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40017500 	.word	0x40017500
 8000ac4:	200015bc 	.word	0x200015bc
 8000ac8:	40026410 	.word	0x40026410
 8000acc:	40017580 	.word	0x40017580
 8000ad0:	2000161c 	.word	0x2000161c
 8000ad4:	40026488 	.word	0x40026488

08000ad8 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d145      	bne.n	8000b84 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000b00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d10b      	bne.n	8000b22 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4810      	ldr	r0, [pc, #64]	; (8000b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000b56:	f002 fadb 	bl	8003110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000b76:	f002 facb 	bl	8003110 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	4a02      	ldr	r2, [pc, #8]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000b82:	6013      	str	r3, [r2, #0]
  }
}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20001680 	.word	0x20001680
 8000b90:	2000167c 	.word	0x2000167c
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_DMA_Init+0x78>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <MX_DMA_Init+0x78>)
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_DMA_Init+0x78>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2038      	movs	r0, #56	; 0x38
 8000bc0:	f001 fb65 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bc4:	2038      	movs	r0, #56	; 0x38
 8000bc6:	f001 fb7e 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2039      	movs	r0, #57	; 0x39
 8000bd0:	f001 fb5d 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bd4:	2039      	movs	r0, #57	; 0x39
 8000bd6:	f001 fb76 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	203b      	movs	r0, #59	; 0x3b
 8000be0:	f001 fb55 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000be4:	203b      	movs	r0, #59	; 0x3b
 8000be6:	f001 fb6e 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2044      	movs	r0, #68	; 0x44
 8000bf0:	f001 fb4d 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000bf4:	2044      	movs	r0, #68	; 0x44
 8000bf6:	f001 fb66 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2045      	movs	r0, #69	; 0x45
 8000c00:	f001 fb45 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c04:	2045      	movs	r0, #69	; 0x45
 8000c06:	f001 fb5e 	bl	80022c6 <HAL_NVIC_EnableIRQ>

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b5d      	ldr	r3, [pc, #372]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a5c      	ldr	r2, [pc, #368]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b5a      	ldr	r3, [pc, #360]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	623b      	str	r3, [r7, #32]
 8000c44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	4b57      	ldr	r3, [pc, #348]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a56      	ldr	r2, [pc, #344]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a50      	ldr	r2, [pc, #320]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b4e      	ldr	r3, [pc, #312]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b4b      	ldr	r3, [pc, #300]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a4a      	ldr	r2, [pc, #296]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a3e      	ldr	r2, [pc, #248]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a38      	ldr	r2, [pc, #224]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cd6:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a32      	ldr	r2, [pc, #200]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0c:	4826      	ldr	r0, [pc, #152]	; (8000da8 <MX_GPIO_Init+0x190>)
 8000d0e:	f002 fbc3 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210b      	movs	r1, #11
 8000d16:	4825      	ldr	r0, [pc, #148]	; (8000dac <MX_GPIO_Init+0x194>)
 8000d18:	f002 fbbe 	bl	8003498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	481f      	ldr	r0, [pc, #124]	; (8000db0 <MX_GPIO_Init+0x198>)
 8000d34:	f002 f9ec 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4815      	ldr	r0, [pc, #84]	; (8000da8 <MX_GPIO_Init+0x190>)
 8000d52:	f002 f9dd 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000d56:	230b      	movs	r3, #11
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <MX_GPIO_Init+0x194>)
 8000d6e:	f002 f9cf 	bl	8003110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <MX_GPIO_Init+0x19c>)
 8000d88:	f002 f9c2 	bl	8003110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2028      	movs	r0, #40	; 0x28
 8000d92:	f001 fa7c 	bl	800228e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d96:	2028      	movs	r0, #40	; 0x28
 8000d98:	f001 fa95 	bl	80022c6 <HAL_NVIC_EnableIRQ>

}
 8000d9c:	bf00      	nop
 8000d9e:	3738      	adds	r7, #56	; 0x38
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40022000 	.word	0x40022000
 8000dac:	40022400 	.word	0x40022400
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020400 	.word	0x40020400

08000db8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dbc:	f3bf 8f4f 	dsb	sy
}
 8000dc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dc2:	f3bf 8f6f 	isb	sy
}
 8000dc6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <SCB_EnableICache+0x48>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
}
 8000dd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd6:	f3bf 8f6f 	isb	sy
}
 8000dda:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <SCB_EnableICache+0x48>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <SCB_EnableICache+0x48>)
 8000de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	f3bf 8f4f 	dsb	sy
}
 8000dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dee:	f3bf 8f6f 	isb	sy
}
 8000df2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e12:	f3bf 8f4f 	dsb	sy
}
 8000e16:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e1e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	0b5b      	lsrs	r3, r3, #13
 8000e24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e28:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e32:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e3c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e42:	4911      	ldr	r1, [pc, #68]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1e5a      	subs	r2, r3, #1
 8000e4e:	60ba      	str	r2, [r7, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1ef      	bne.n	8000e34 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	60fa      	str	r2, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1e5      	bne.n	8000e2a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e5e:	f3bf 8f4f 	dsb	sy
}
 8000e62:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e70:	f3bf 8f4f 	dsb	sy
}
 8000e74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
}
 8000e7a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	f5ad 4d00 	sub.w	sp, sp, #32768	; 0x8000
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//list of files containing Mel spectrograms
	char file_path[FILE_LIST_SIZE] [35]={"down_c.txt","down_e.txt","go_e.txt","left_c.txt",
 8000e96:	f248 0328 	movw	r3, #32808	; 0x8028
 8000e9a:	443b      	add	r3, r7
 8000e9c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000ea0:	4a65      	ldr	r2, [pc, #404]	; (8001038 <main+0x1ac>)
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	f240 230d 	movw	r3, #525	; 0x20d
 8000eaa:	461a      	mov	r2, r3
 8000eac:	f00d fe9a 	bl	800ebe4 <memcpy>
	float32_t input_buffer [BUFFER_FLOAT_SIZE];

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000eb0:	f7ff ff82 	bl	8000db8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000eb4:	f7ff ffa6 	bl	8000e04 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb8:	f000 fdf9 	bl	8001aae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebc:	f000 f8c8 	bl	8001050 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ec0:	f000 f938 	bl	8001134 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec4:	f7ff fea8 	bl	8000c18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec8:	f7ff fe68 	bl	8000b9c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000ecc:	f7ff fc40 	bl	8000750 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000ed0:	f000 fa00 	bl	80012d4 <MX_SAI2_Init>
  MX_ADC1_Init();
 8000ed4:	f7ff fb86 	bl	80005e4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000ed8:	f000 fd0e 	bl	80018f8 <MX_UART4_Init>
  MX_CRC_Init();
 8000edc:	f7ff fbf6 	bl	80006cc <MX_CRC_Init>
  MX_RTC_Init();
 8000ee0:	f000 f95e 	bl	80011a0 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000ee4:	f000 fb00 	bl	80014e8 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000ee8:	f006 febc 	bl	8007c64 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */


	SDInit();
 8000eec:	f00a f820 	bl	800af30 <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef6:	4851      	ldr	r0, [pc, #324]	; (800103c <main+0x1b0>)
 8000ef8:	f002 face 	bl	8003498 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	2101      	movs	r1, #1
 8000f00:	484f      	ldr	r0, [pc, #316]	; (8001040 <main+0x1b4>)
 8000f02:	f002 fac9 	bl	8003498 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2102      	movs	r1, #2
 8000f0a:	484d      	ldr	r0, [pc, #308]	; (8001040 <main+0x1b4>)
 8000f0c:	f002 fac4 	bl	8003498 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	2108      	movs	r1, #8
 8000f14:	484a      	ldr	r0, [pc, #296]	; (8001040 <main+0x1b4>)
 8000f16:	f002 fabf 	bl	8003498 <HAL_GPIO_WritePin>

	int file_count = 0;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f248 0224 	movw	r2, #32804	; 0x8024
 8000f20:	443a      	add	r2, r7
 8000f22:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //reads one file at a time
	  	openFile(file_path[file_count]);
 8000f24:	f647 6114 	movw	r1, #32276	; 0x7e14
 8000f28:	4439      	add	r1, r7
 8000f2a:	f248 0324 	movw	r3, #32804	; 0x8024
 8000f2e:	443b      	add	r3, r7
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4613      	mov	r3, r2
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	4413      	add	r3, r2
 8000f38:	00da      	lsls	r2, r3, #3
 8000f3a:	1ad2      	subs	r2, r2, r3
 8000f3c:	188b      	adds	r3, r1, r2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00a f80a 	bl	800af58 <openFile>
		readFile((char*)input_buffer, 4);
 8000f44:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <main+0x1b8>)
 8000f46:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000f4a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000f4e:	443b      	add	r3, r7
 8000f50:	2104      	movs	r1, #4
 8000f52:	4618      	mov	r0, r3
 8000f54:	f00a f818 	bl	800af88 <readFile>
		readFile(((char*)input_buffer)+4, BUFFER_BYTE_SIZE-4);
 8000f58:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <main+0x1b8>)
 8000f5a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000f5e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000f62:	443b      	add	r3, r7
 8000f64:	3304      	adds	r3, #4
 8000f66:	f647 51fc 	movw	r1, #32252	; 0x7dfc
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00a f80c 	bl	800af88 <readFile>
		SDclose();
 8000f70:	f00a f81e 	bl	800afb0 <SDclose>
		//verifies if AI is setup correctly
		if (modelSetup()!= AI_OK)
 8000f74:	f009 fe56 	bl	800ac24 <modelSetup>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <main+0xf6>
		{
			Error_Handler();
 8000f7e:	f000 f909 	bl	8001194 <Error_Handler>
		}
		//runs the NN model on the spectrogram and reads the result
		outputs[file_count] = modelRun(input_buffer);
 8000f82:	4b30      	ldr	r3, [pc, #192]	; (8001044 <main+0x1b8>)
 8000f84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000f88:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000f8c:	443b      	add	r3, r7
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f009 fe9e 	bl	800acd0 <modelRun>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4619      	mov	r1, r3
 8000f98:	f248 0328 	movw	r3, #32808	; 0x8028
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000fa2:	f248 0324 	movw	r3, #32804	; 0x8024
 8000fa6:	443b      	add	r3, r7
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	460a      	mov	r2, r1
 8000fae:	701a      	strb	r2, [r3, #0]
		//shows the result in binary
		ledsShowValue(outputs[file_count]);
 8000fb0:	f248 0328 	movw	r3, #32808	; 0x8028
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000fba:	f248 0324 	movw	r3, #32804	; 0x8024
 8000fbe:	443b      	add	r3, r7
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f00a f812 	bl	800aff0 <ledsShowValue>
		//waits for the temper button to be clicked on to read the next file
		file_count = (file_count+1)%FILE_LIST_SIZE;
 8000fcc:	f248 0324 	movw	r3, #32804	; 0x8024
 8000fd0:	443b      	add	r3, r7
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <main+0x1bc>)
 8000fd8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fdc:	4413      	add	r3, r2
 8000fde:	10d9      	asrs	r1, r3, #3
 8000fe0:	17d3      	asrs	r3, r2, #31
 8000fe2:	1ac9      	subs	r1, r1, r3
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	1a5b      	subs	r3, r3, r1
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	f248 0224 	movw	r2, #32804	; 0x8024
 8000ff0:	443a      	add	r2, r7
 8000ff2:	6013      	str	r3, [r2, #0]
		while(!click);
 8000ff4:	bf00      	nop
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <main+0x1c0>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0fb      	beq.n	8000ff6 <main+0x16a>
		HAL_Delay(250);
 8000ffe:	20fa      	movs	r0, #250	; 0xfa
 8001000:	f000 fdb2 	bl	8001b68 <HAL_Delay>
		//lights up all leds while waiting for the result
		 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <main+0x1b0>)
 800100c:	f002 fa44 	bl	8003498 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2101      	movs	r1, #1
 8001014:	480a      	ldr	r0, [pc, #40]	; (8001040 <main+0x1b4>)
 8001016:	f002 fa3f 	bl	8003498 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	4808      	ldr	r0, [pc, #32]	; (8001040 <main+0x1b4>)
 8001020:	f002 fa3a 	bl	8003498 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2108      	movs	r1, #8
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <main+0x1b4>)
 800102a:	f002 fa35 	bl	8003498 <HAL_GPIO_WritePin>
		click = 0;
 800102e:	4b07      	ldr	r3, [pc, #28]	; (800104c <main+0x1c0>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
  {
 8001034:	e776      	b.n	8000f24 <main+0x98>
 8001036:	bf00      	nop
 8001038:	0800f620 	.word	0x0800f620
 800103c:	40022000 	.word	0x40022000
 8001040:	40022400 	.word	0x40022400
 8001044:	ffff7fdc 	.word	0xffff7fdc
 8001048:	88888889 	.word	0x88888889
 800104c:	20001684 	.word	0x20001684

08001050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b094      	sub	sp, #80	; 0x50
 8001054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	2234      	movs	r2, #52	; 0x34
 800105c:	2100      	movs	r1, #0
 800105e:	4618      	mov	r0, r3
 8001060:	f00d fdce 	bl	800ec00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001074:	4b2d      	ldr	r3, [pc, #180]	; (800112c <SystemClock_Config+0xdc>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	4a2c      	ldr	r2, [pc, #176]	; (800112c <SystemClock_Config+0xdc>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	; 0x40
 8001080:	4b2a      	ldr	r3, [pc, #168]	; (800112c <SystemClock_Config+0xdc>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800108c:	4b28      	ldr	r3, [pc, #160]	; (8001130 <SystemClock_Config+0xe0>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a27      	ldr	r2, [pc, #156]	; (8001130 <SystemClock_Config+0xe0>)
 8001092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b25      	ldr	r3, [pc, #148]	; (8001130 <SystemClock_Config+0xe0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010a4:	2309      	movs	r3, #9
 80010a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010ae:	2301      	movs	r3, #1
 80010b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010bc:	2319      	movs	r3, #25
 80010be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80010c0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80010c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010ca:	2309      	movs	r3, #9
 80010cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 fa60 	bl	800359c <HAL_RCC_OscConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80010e2:	f000 f857 	bl	8001194 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010e6:	f002 fa09 	bl	80034fc <HAL_PWREx_EnableOverDrive>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010f0:	f000 f850 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f4:	230f      	movs	r3, #15
 80010f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f8:	2302      	movs	r3, #2
 80010fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001100:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001104:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800110c:	f107 0308 	add.w	r3, r7, #8
 8001110:	2107      	movs	r1, #7
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fcf0 	bl	8003af8 <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800111e:	f000 f839 	bl	8001194 <Error_Handler>
  }
}
 8001122:	bf00      	nop
 8001124:	3750      	adds	r7, #80	; 0x50
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40023800 	.word	0x40023800
 8001130:	40007000 	.word	0x40007000

08001134 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b0a4      	sub	sp, #144	; 0x90
 8001138:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800113a:	463b      	mov	r3, r7
 800113c:	2290      	movs	r2, #144	; 0x90
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f00d fd5d 	bl	800ec00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <PeriphCommonClock_Config+0x5c>)
 8001148:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 800114a:	f240 13ad 	movw	r3, #429	; 0x1ad
 800114e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001150:	2302      	movs	r3, #2
 8001152:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 8001154:	2306      	movs	r3, #6
 8001156:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 800115c:	2306      	movs	r3, #6
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001160:	2300      	movs	r3, #0
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8001164:	2300      	movs	r3, #0
 8001166:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8001168:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800116c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001176:	463b      	mov	r3, r7
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fea3 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001184:	f000 f806 	bl	8001194 <Error_Handler>
  }
}
 8001188:	bf00      	nop
 800118a:	3790      	adds	r7, #144	; 0x90
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	18300000 	.word	0x18300000

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	e7fe      	b.n	800119c <Error_Handler+0x8>
	...

080011a0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011b4:	2300      	movs	r3, #0
 80011b6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011b8:	4b2d      	ldr	r3, [pc, #180]	; (8001270 <MX_RTC_Init+0xd0>)
 80011ba:	4a2e      	ldr	r2, [pc, #184]	; (8001274 <MX_RTC_Init+0xd4>)
 80011bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <MX_RTC_Init+0xd0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_RTC_Init+0xd0>)
 80011c6:	227f      	movs	r2, #127	; 0x7f
 80011c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <MX_RTC_Init+0xd0>)
 80011cc:	22ff      	movs	r2, #255	; 0xff
 80011ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <MX_RTC_Init+0xd0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011d6:	4b26      	ldr	r3, [pc, #152]	; (8001270 <MX_RTC_Init+0xd0>)
 80011d8:	2200      	movs	r2, #0
 80011da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <MX_RTC_Init+0xd0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011e2:	4823      	ldr	r0, [pc, #140]	; (8001270 <MX_RTC_Init+0xd0>)
 80011e4:	f003 fc08 	bl	80049f8 <HAL_RTC_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80011ee:	f7ff ffd1 	bl	8001194 <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */
  //if flag... return
  if (!SET_TIME_RTC)
  {
	  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0x32F2)
 80011f2:	2100      	movs	r1, #0
 80011f4:	481e      	ldr	r0, [pc, #120]	; (8001270 <MX_RTC_Init+0xd0>)
 80011f6:	f003 fe5d 	bl	8004eb4 <HAL_RTCEx_BKUPRead>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001200:	4293      	cmp	r3, r2
 8001202:	d02e      	beq.n	8001262 <MX_RTC_Init+0xc2>

			return;

	  else
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 8001204:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001208:	2100      	movs	r1, #0
 800120a:	4819      	ldr	r0, [pc, #100]	; (8001270 <MX_RTC_Init+0xd0>)
 800120c:	f003 fe38 	bl	8004e80 <HAL_RTCEx_BKUPWrite>
  }
  sTime.Hours = HOUR;
 8001210:	2314      	movs	r3, #20
 8001212:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MIN;
 8001214:	2329      	movs	r3, #41	; 0x29
 8001216:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SEC;
 8001218:	2300      	movs	r3, #0
 800121a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2201      	movs	r2, #1
 8001228:	4619      	mov	r1, r3
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_RTC_Init+0xd0>)
 800122c:	f003 fc68 	bl	8004b00 <HAL_RTC_SetTime>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8001236:	f7ff ffad 	bl	8001194 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800123a:	2301      	movs	r3, #1
 800123c:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 800123e:	2301      	movs	r3, #1
 8001240:	707b      	strb	r3, [r7, #1]
  sDate.Date = DAY;
 8001242:	2323      	movs	r3, #35	; 0x23
 8001244:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 8001246:	2323      	movs	r3, #35	; 0x23
 8001248:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800124a:	463b      	mov	r3, r7
 800124c:	2201      	movs	r2, #1
 800124e:	4619      	mov	r1, r3
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <MX_RTC_Init+0xd0>)
 8001252:	f003 fcef 	bl	8004c34 <HAL_RTC_SetDate>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d004      	beq.n	8001266 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 800125c:	f7ff ff9a 	bl	8001194 <Error_Handler>
  }
  return;
 8001260:	e001      	b.n	8001266 <MX_RTC_Init+0xc6>
			return;
 8001262:	bf00      	nop
 8001264:	e000      	b.n	8001268 <MX_RTC_Init+0xc8>
  return;
 8001266:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20001688 	.word	0x20001688
 8001274:	40002800 	.word	0x40002800

08001278 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b0a6      	sub	sp, #152	; 0x98
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	2290      	movs	r2, #144	; 0x90
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f00d fcb9 	bl	800ec00 <memset>
  if(rtcHandle->Instance==RTC)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_RTC_MspInit+0x54>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d114      	bne.n	80012c2 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001298:	2320      	movs	r3, #32
 800129a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800129c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a0:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 fe0c 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80012b2:	f7ff ff6f 	bl	8001194 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_RTC_MspInit+0x58>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ba:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <HAL_RTC_MspInit+0x58>)
 80012bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012c0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012c2:	bf00      	nop
 80012c4:	3798      	adds	r7, #152	; 0x98
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40002800 	.word	0x40002800
 80012d0:	40023800 	.word	0x40023800

080012d4 <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 80012d8:	4b2a      	ldr	r3, [pc, #168]	; (8001384 <MX_SAI2_Init+0xb0>)
 80012da:	4a2b      	ldr	r2, [pc, #172]	; (8001388 <MX_SAI2_Init+0xb4>)
 80012dc:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <MX_SAI2_Init+0xb0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <MX_SAI2_Init+0xb0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 80012ea:	4b26      	ldr	r3, [pc, #152]	; (8001384 <MX_SAI2_Init+0xb0>)
 80012ec:	2280      	movs	r2, #128	; 0x80
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80012f0:	4b24      	ldr	r3, [pc, #144]	; (8001384 <MX_SAI2_Init+0xb0>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80012f6:	4b23      	ldr	r3, [pc, #140]	; (8001384 <MX_SAI2_Init+0xb0>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <MX_SAI2_Init+0xb0>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_SAI2_Init+0xb0>)
 8001304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001308:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800130a:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_SAI2_Init+0xb0>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <MX_SAI2_Init+0xb0>)
 8001312:	2201      	movs	r2, #1
 8001314:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_SAI2_Init+0xb0>)
 8001318:	4a1c      	ldr	r2, [pc, #112]	; (800138c <MX_SAI2_Init+0xb8>)
 800131a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_SAI2_Init+0xb0>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_SAI2_Init+0xb0>)
 8001324:	2200      	movs	r2, #0
 8001326:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_SAI2_Init+0xb0>)
 800132a:	2200      	movs	r2, #0
 800132c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_SAI2_Init+0xb0>)
 8001330:	2200      	movs	r2, #0
 8001332:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_SAI2_Init+0xb0>)
 8001336:	2220      	movs	r2, #32
 8001338:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_SAI2_Init+0xb0>)
 800133c:	2210      	movs	r2, #16
 800133e:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <MX_SAI2_Init+0xb0>)
 8001342:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001346:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_SAI2_Init+0xb0>)
 800134a:	2200      	movs	r2, #0
 800134c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <MX_SAI2_Init+0xb0>)
 8001350:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001354:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_SAI2_Init+0xb0>)
 8001358:	2200      	movs	r2, #0
 800135a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_SAI2_Init+0xb0>)
 800135e:	2200      	movs	r2, #0
 8001360:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_SAI2_Init+0xb0>)
 8001364:	2202      	movs	r2, #2
 8001366:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_SAI2_Init+0xb0>)
 800136a:	2203      	movs	r2, #3
 800136c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_SAI2_Init+0xb0>)
 8001370:	f003 fdb8 	bl	8004ee4 <HAL_SAI_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 800137a:	f7ff ff0b 	bl	8001194 <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200016a8 	.word	0x200016a8
 8001388:	40015c24 	.word	0x40015c24
 800138c:	0002ee00 	.word	0x0002ee00

08001390 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a4a      	ldr	r2, [pc, #296]	; (80014c8 <HAL_SAI_MspInit+0x138>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	f040 808e 	bne.w	80014c0 <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80013a4:	4b49      	ldr	r3, [pc, #292]	; (80014cc <HAL_SAI_MspInit+0x13c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d10b      	bne.n	80013c4 <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80013ac:	4b48      	ldr	r3, [pc, #288]	; (80014d0 <HAL_SAI_MspInit+0x140>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	4a47      	ldr	r2, [pc, #284]	; (80014d0 <HAL_SAI_MspInit+0x140>)
 80013b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013b6:	6453      	str	r3, [r2, #68]	; 0x44
 80013b8:	4b45      	ldr	r3, [pc, #276]	; (80014d0 <HAL_SAI_MspInit+0x140>)
 80013ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80013c4:	4b41      	ldr	r3, [pc, #260]	; (80014cc <HAL_SAI_MspInit+0x13c>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a40      	ldr	r2, [pc, #256]	; (80014cc <HAL_SAI_MspInit+0x13c>)
 80013cc:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ce:	2340      	movs	r3, #64	; 0x40
 80013d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013de:	230a      	movs	r3, #10
 80013e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	4619      	mov	r1, r3
 80013e8:	483a      	ldr	r0, [pc, #232]	; (80014d4 <HAL_SAI_MspInit+0x144>)
 80013ea:	f001 fe91 	bl	8003110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fc:	2303      	movs	r3, #3
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001400:	230a      	movs	r3, #10
 8001402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	4619      	mov	r1, r3
 800140a:	4833      	ldr	r0, [pc, #204]	; (80014d8 <HAL_SAI_MspInit+0x148>)
 800140c:	f001 fe80 	bl	8003110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001410:	2301      	movs	r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001420:	230a      	movs	r3, #10
 8001422:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	4619      	mov	r1, r3
 800142a:	482c      	ldr	r0, [pc, #176]	; (80014dc <HAL_SAI_MspInit+0x14c>)
 800142c:	f001 fe70 	bl	8003110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001430:	2304      	movs	r3, #4
 8001432:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001440:	2308      	movs	r3, #8
 8001442:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	f107 030c 	add.w	r3, r7, #12
 8001448:	4619      	mov	r1, r3
 800144a:	4824      	ldr	r0, [pc, #144]	; (80014dc <HAL_SAI_MspInit+0x14c>)
 800144c:	f001 fe60 	bl	8003110 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 8001452:	4a24      	ldr	r2, [pc, #144]	; (80014e4 <HAL_SAI_MspInit+0x154>)
 8001454:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8001456:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 8001458:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 800145c:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800145e:	4b20      	ldr	r3, [pc, #128]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 8001460:	2240      	movs	r2, #64	; 0x40
 8001462:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8001464:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 800146c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001470:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 8001474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001478:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 800147c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001480:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 8001484:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001488:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 800148c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001490:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 8001494:	2200      	movs	r2, #0
 8001496:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001498:	4811      	ldr	r0, [pc, #68]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 800149a:	f001 fa93 	bl	80029c4 <HAL_DMA_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 80014a4:	f7ff fe76 	bl	8001194 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a0d      	ldr	r2, [pc, #52]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 80014ac:	671a      	str	r2, [r3, #112]	; 0x70
 80014ae:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 80014b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_SAI_MspInit+0x150>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80014c0:	bf00      	nop
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40015c24 	.word	0x40015c24
 80014cc:	2000178c 	.word	0x2000178c
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40021800 	.word	0x40021800
 80014dc:	40020000 	.word	0x40020000
 80014e0:	2000172c 	.word	0x2000172c
 80014e4:	40026428 	.word	0x40026428

080014e8 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_SDMMC1_SD_Init+0x38>)
 80014ee:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <MX_SDMMC1_SD_Init+0x3c>)
 80014f0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <MX_SDMMC1_SD_Init+0x38>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_SDMMC1_SD_Init+0x38>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <MX_SDMMC1_SD_Init+0x38>)
 8001500:	2200      	movs	r2, #0
 8001502:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_SDMMC1_SD_Init+0x38>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <MX_SDMMC1_SD_Init+0x38>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <MX_SDMMC1_SD_Init+0x38>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	20001790 	.word	0x20001790
 8001524:	40012c00 	.word	0x40012c00

08001528 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b0ae      	sub	sp, #184	; 0xb8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2290      	movs	r2, #144	; 0x90
 8001546:	2100      	movs	r1, #0
 8001548:	4618      	mov	r0, r3
 800154a:	f00d fb59 	bl	800ec00 <memset>
  if(sdHandle->Instance==SDMMC1)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a74      	ldr	r2, [pc, #464]	; (8001724 <HAL_SD_MspInit+0x1fc>)
 8001554:	4293      	cmp	r3, r2
 8001556:	f040 80e0 	bne.w	800171a <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800155a:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 800155e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	4618      	mov	r0, r3
 8001572:	f002 fca7 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 800157c:	f7ff fe0a 	bl	8001194 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001580:	4b69      	ldr	r3, [pc, #420]	; (8001728 <HAL_SD_MspInit+0x200>)
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	4a68      	ldr	r2, [pc, #416]	; (8001728 <HAL_SD_MspInit+0x200>)
 8001586:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800158a:	6453      	str	r3, [r2, #68]	; 0x44
 800158c:	4b66      	ldr	r3, [pc, #408]	; (8001728 <HAL_SD_MspInit+0x200>)
 800158e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001598:	4b63      	ldr	r3, [pc, #396]	; (8001728 <HAL_SD_MspInit+0x200>)
 800159a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159c:	4a62      	ldr	r2, [pc, #392]	; (8001728 <HAL_SD_MspInit+0x200>)
 800159e:	f043 0304 	orr.w	r3, r3, #4
 80015a2:	6313      	str	r3, [r2, #48]	; 0x30
 80015a4:	4b60      	ldr	r3, [pc, #384]	; (8001728 <HAL_SD_MspInit+0x200>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b0:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <HAL_SD_MspInit+0x200>)
 80015b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b4:	4a5c      	ldr	r2, [pc, #368]	; (8001728 <HAL_SD_MspInit+0x200>)
 80015b6:	f043 0308 	orr.w	r3, r3, #8
 80015ba:	6313      	str	r3, [r2, #48]	; 0x30
 80015bc:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <HAL_SD_MspInit+0x200>)
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80015c8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015dc:	2303      	movs	r3, #3
 80015de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80015e2:	230c      	movs	r3, #12
 80015e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ec:	4619      	mov	r1, r3
 80015ee:	484f      	ldr	r0, [pc, #316]	; (800172c <HAL_SD_MspInit+0x204>)
 80015f0:	f001 fd8e 	bl	8003110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015f4:	2304      	movs	r3, #4
 80015f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800160c:	230c      	movs	r3, #12
 800160e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001612:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001616:	4619      	mov	r1, r3
 8001618:	4845      	ldr	r0, [pc, #276]	; (8001730 <HAL_SD_MspInit+0x208>)
 800161a:	f001 fd79 	bl	8003110 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 800161e:	4b45      	ldr	r3, [pc, #276]	; (8001734 <HAL_SD_MspInit+0x20c>)
 8001620:	4a45      	ldr	r2, [pc, #276]	; (8001738 <HAL_SD_MspInit+0x210>)
 8001622:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001624:	4b43      	ldr	r3, [pc, #268]	; (8001734 <HAL_SD_MspInit+0x20c>)
 8001626:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800162a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162c:	4b41      	ldr	r3, [pc, #260]	; (8001734 <HAL_SD_MspInit+0x20c>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <HAL_SD_MspInit+0x20c>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001638:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <HAL_SD_MspInit+0x20c>)
 800163a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800163e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001640:	4b3c      	ldr	r3, [pc, #240]	; (8001734 <HAL_SD_MspInit+0x20c>)
 8001642:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001646:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001648:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <HAL_SD_MspInit+0x20c>)
 800164a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800164e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001650:	4b38      	ldr	r3, [pc, #224]	; (8001734 <HAL_SD_MspInit+0x20c>)
 8001652:	2220      	movs	r2, #32
 8001654:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_SD_MspInit+0x20c>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <HAL_SD_MspInit+0x20c>)
 800165e:	2204      	movs	r2, #4
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001662:	4b34      	ldr	r3, [pc, #208]	; (8001734 <HAL_SD_MspInit+0x20c>)
 8001664:	2203      	movs	r2, #3
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001668:	4b32      	ldr	r3, [pc, #200]	; (8001734 <HAL_SD_MspInit+0x20c>)
 800166a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_SD_MspInit+0x20c>)
 8001672:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001676:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001678:	482e      	ldr	r0, [pc, #184]	; (8001734 <HAL_SD_MspInit+0x20c>)
 800167a:	f001 f9a3 	bl	80029c4 <HAL_DMA_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001684:	f7ff fd86 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a2a      	ldr	r2, [pc, #168]	; (8001734 <HAL_SD_MspInit+0x20c>)
 800168c:	641a      	str	r2, [r3, #64]	; 0x40
 800168e:	4a29      	ldr	r2, [pc, #164]	; (8001734 <HAL_SD_MspInit+0x20c>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8001694:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_SD_MspInit+0x214>)
 8001696:	4a2a      	ldr	r2, [pc, #168]	; (8001740 <HAL_SD_MspInit+0x218>)
 8001698:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800169a:	4b28      	ldr	r3, [pc, #160]	; (800173c <HAL_SD_MspInit+0x214>)
 800169c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016a0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <HAL_SD_MspInit+0x214>)
 80016a4:	2240      	movs	r2, #64	; 0x40
 80016a6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <HAL_SD_MspInit+0x214>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <HAL_SD_MspInit+0x214>)
 80016b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016b6:	4b21      	ldr	r3, [pc, #132]	; (800173c <HAL_SD_MspInit+0x214>)
 80016b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016bc:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016be:	4b1f      	ldr	r3, [pc, #124]	; (800173c <HAL_SD_MspInit+0x214>)
 80016c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016c4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	; (800173c <HAL_SD_MspInit+0x214>)
 80016c8:	2220      	movs	r2, #32
 80016ca:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <HAL_SD_MspInit+0x214>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_SD_MspInit+0x214>)
 80016d4:	2204      	movs	r2, #4
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_SD_MspInit+0x214>)
 80016da:	2203      	movs	r2, #3
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_SD_MspInit+0x214>)
 80016e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80016e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_SD_MspInit+0x214>)
 80016e8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80016ee:	4813      	ldr	r0, [pc, #76]	; (800173c <HAL_SD_MspInit+0x214>)
 80016f0:	f001 f968 	bl	80029c4 <HAL_DMA_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 80016fa:	f7ff fd4b 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_SD_MspInit+0x214>)
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <HAL_SD_MspInit+0x214>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2031      	movs	r0, #49	; 0x31
 8001710:	f000 fdbd 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001714:	2031      	movs	r0, #49	; 0x31
 8001716:	f000 fdd6 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800171a:	bf00      	nop
 800171c:	37b8      	adds	r7, #184	; 0xb8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40012c00 	.word	0x40012c00
 8001728:	40023800 	.word	0x40023800
 800172c:	40020800 	.word	0x40020800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	20001814 	.word	0x20001814
 8001738:	400264a0 	.word	0x400264a0
 800173c:	20001874 	.word	0x20001874
 8001740:	40026458 	.word	0x40026458

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_MspInit+0x44>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <HAL_MspInit+0x44>)
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <HAL_MspInit+0x44>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_MspInit+0x44>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	4a08      	ldr	r2, [pc, #32]	; (8001788 <HAL_MspInit+0x44>)
 8001768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176c:	6453      	str	r3, [r2, #68]	; 0x44
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_MspInit+0x44>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40023800 	.word	0x40023800

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d8:	f000 f9a6 	bl	8001b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 80017e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017e8:	f001 fe70 	bl	80034cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <SDMMC1_IRQHandler+0x10>)
 80017f6:	f003 ffab 	bl	8005750 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20001790 	.word	0x20001790

08001804 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001808:	4802      	ldr	r0, [pc, #8]	; (8001814 <DMA2_Stream0_IRQHandler+0x10>)
 800180a:	f001 fa0b 	bl	8002c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200015bc 	.word	0x200015bc

08001818 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <DMA2_Stream1_IRQHandler+0x10>)
 800181e:	f001 fa01 	bl	8002c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000172c 	.word	0x2000172c

0800182c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <DMA2_Stream3_IRQHandler+0x10>)
 8001832:	f001 f9f7 	bl	8002c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20001874 	.word	0x20001874

08001840 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <DMA2_Stream5_IRQHandler+0x10>)
 8001846:	f001 f9ed 	bl	8002c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000161c 	.word	0x2000161c

08001854 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <DMA2_Stream6_IRQHandler+0x10>)
 800185a:	f001 f9e3 	bl	8002c24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20001814 	.word	0x20001814

08001868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <_sbrk+0x5c>)
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <_sbrk+0x60>)
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800187c:	4b13      	ldr	r3, [pc, #76]	; (80018cc <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <_sbrk+0x64>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <_sbrk+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	429a      	cmp	r2, r3
 8001896:	d207      	bcs.n	80018a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001898:	f00d f97a 	bl	800eb90 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	220c      	movs	r2, #12
 80018a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018a6:	e009      	b.n	80018bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a05      	ldr	r2, [pc, #20]	; (80018cc <_sbrk+0x64>)
 80018b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20080000 	.word	0x20080000
 80018c8:	00000800 	.word	0x00000800
 80018cc:	200018d4 	.word	0x200018d4
 80018d0:	20001f40 	.word	0x20001f40

080018d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <SystemInit+0x20>)
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <SystemInit+0x20>)
 80018e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_UART4_Init+0x58>)
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <MX_UART4_Init+0x5c>)
 8001900:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_UART4_Init+0x58>)
 8001904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001908:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_UART4_Init+0x58>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_UART4_Init+0x58>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_UART4_Init+0x58>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_UART4_Init+0x58>)
 800191e:	220c      	movs	r2, #12
 8001920:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <MX_UART4_Init+0x58>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_UART4_Init+0x58>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192e:	4b08      	ldr	r3, [pc, #32]	; (8001950 <MX_UART4_Init+0x58>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_UART4_Init+0x58>)
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	; (8001950 <MX_UART4_Init+0x58>)
 800193c:	f004 ffb3 	bl	80068a6 <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001946:	f7ff fc25 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200018d8 	.word	0x200018d8
 8001954:	40004c00 	.word	0x40004c00

08001958 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b0ae      	sub	sp, #184	; 0xb8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001970:	f107 0314 	add.w	r3, r7, #20
 8001974:	2290      	movs	r2, #144	; 0x90
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f00d f941 	bl	800ec00 <memset>
  if(uartHandle->Instance==UART4)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a32      	ldr	r2, [pc, #200]	; (8001a4c <HAL_UART_MspInit+0xf4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d15d      	bne.n	8001a44 <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001988:	f44f 7300 	mov.w	r3, #512	; 0x200
 800198c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800198e:	2300      	movs	r3, #0
 8001990:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fa94 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019a2:	f7ff fbf7 	bl	8001194 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019a6:	4b2a      	ldr	r3, [pc, #168]	; (8001a50 <HAL_UART_MspInit+0xf8>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	4a29      	ldr	r2, [pc, #164]	; (8001a50 <HAL_UART_MspInit+0xf8>)
 80019ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019b0:	6413      	str	r3, [r2, #64]	; 0x40
 80019b2:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_UART_MspInit+0xf8>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_UART_MspInit+0xf8>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a23      	ldr	r2, [pc, #140]	; (8001a50 <HAL_UART_MspInit+0xf8>)
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <HAL_UART_MspInit+0xf8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b1e      	ldr	r3, [pc, #120]	; (8001a50 <HAL_UART_MspInit+0xf8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <HAL_UART_MspInit+0xf8>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <HAL_UART_MspInit+0xf8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a06:	2308      	movs	r3, #8
 8001a08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a10:	4619      	mov	r1, r3
 8001a12:	4810      	ldr	r0, [pc, #64]	; (8001a54 <HAL_UART_MspInit+0xfc>)
 8001a14:	f001 fb7c 	bl	8003110 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001a32:	2306      	movs	r3, #6
 8001a34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <HAL_UART_MspInit+0x100>)
 8001a40:	f001 fb66 	bl	8003110 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001a44:	bf00      	nop
 8001a46:	37b8      	adds	r7, #184	; 0xb8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40004c00 	.word	0x40004c00
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020c00 	.word	0x40020c00
 8001a58:	40020000 	.word	0x40020000

08001a5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a60:	480d      	ldr	r0, [pc, #52]	; (8001a98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a62:	490e      	ldr	r1, [pc, #56]	; (8001a9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a64:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a68:	e002      	b.n	8001a70 <LoopCopyDataInit>

08001a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a6e:	3304      	adds	r3, #4

08001a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a74:	d3f9      	bcc.n	8001a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a76:	4a0b      	ldr	r2, [pc, #44]	; (8001aa4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a78:	4c0b      	ldr	r4, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a7c:	e001      	b.n	8001a82 <LoopFillZerobss>

08001a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a80:	3204      	adds	r2, #4

08001a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a84:	d3fb      	bcc.n	8001a7e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a86:	f7ff ff25 	bl	80018d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a8a:	f00d f887 	bl	800eb9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a8e:	f7ff f9fd 	bl	8000e8c <main>
  bx  lr    
 8001a92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a94:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a9c:	2000141c 	.word	0x2000141c
  ldr r2, =_sidata
 8001aa0:	0816e1d8 	.word	0x0816e1d8
  ldr r2, =_sbss
 8001aa4:	2000141c 	.word	0x2000141c
  ldr r4, =_ebss
 8001aa8:	20001f3c 	.word	0x20001f3c

08001aac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aac:	e7fe      	b.n	8001aac <ADC_IRQHandler>

08001aae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab2:	2003      	movs	r0, #3
 8001ab4:	f000 fbe0 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab8:	200f      	movs	r0, #15
 8001aba:	f000 f805 	bl	8001ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001abe:	f7ff fe41 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad0:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_InitTick+0x54>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_InitTick+0x58>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fbfb 	bl	80022e2 <HAL_SYSTICK_Config>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00e      	b.n	8001b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d80a      	bhi.n	8001b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001afc:	2200      	movs	r2, #0
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b04:	f000 fbc3 	bl	800228e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b08:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_InitTick+0x5c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20001960 	.word	0x20001960

08001b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;
 8001b54:	4b03      	ldr	r3, [pc, #12]	; (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20001960 	.word	0x20001960

08001b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff ffee 	bl	8001b50 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffde 	bl	8001b50 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008

08001bb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e031      	b.n	8001c2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fd5c 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f003 0310 	and.w	r3, r3, #16
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d116      	bne.n	8001c1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_ADC_Init+0x84>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	f043 0202 	orr.w	r2, r3, #2
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f970 	bl	8001ee4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f023 0303 	bic.w	r3, r3, #3
 8001c12:	f043 0201 	orr.w	r2, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40
 8001c1a:	e001      	b.n	8001c20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	ffffeefd 	.word	0xffffeefd

08001c38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d101      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1c>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e136      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x28a>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b09      	cmp	r3, #9
 8001c62:	d93a      	bls.n	8001cda <HAL_ADC_ConfigChannel+0xa2>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c6c:	d035      	beq.n	8001cda <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68d9      	ldr	r1, [r3, #12]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	4413      	add	r3, r2
 8001c82:	3b1e      	subs	r3, #30
 8001c84:	2207      	movs	r2, #7
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	400a      	ands	r2, r1
 8001c92:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a8d      	ldr	r2, [pc, #564]	; (8001ed0 <HAL_ADC_ConfigChannel+0x298>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10a      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	68d9      	ldr	r1, [r3, #12]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	061a      	lsls	r2, r3, #24
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb2:	e035      	b.n	8001d20 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68d9      	ldr	r1, [r3, #12]
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4403      	add	r3, r0
 8001ccc:	3b1e      	subs	r3, #30
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd8:	e022      	b.n	8001d20 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6919      	ldr	r1, [r3, #16]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4613      	mov	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4413      	add	r3, r2
 8001cee:	2207      	movs	r2, #7
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6919      	ldr	r1, [r3, #16]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4603      	mov	r3, r0
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4403      	add	r3, r0
 8001d16:	409a      	lsls	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b06      	cmp	r3, #6
 8001d26:	d824      	bhi.n	8001d72 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	3b05      	subs	r3, #5
 8001d3a:	221f      	movs	r2, #31
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43da      	mvns	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	400a      	ands	r2, r1
 8001d48:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	3b05      	subs	r3, #5
 8001d64:	fa00 f203 	lsl.w	r2, r0, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d70:	e04c      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d824      	bhi.n	8001dc4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b23      	subs	r3, #35	; 0x23
 8001d8c:	221f      	movs	r2, #31
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	3b23      	subs	r3, #35	; 0x23
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc2:	e023      	b.n	8001e0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b41      	subs	r3, #65	; 0x41
 8001dd6:	221f      	movs	r2, #31
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	400a      	ands	r2, r1
 8001de4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3b41      	subs	r3, #65	; 0x41
 8001e00:	fa00 f203 	lsl.w	r2, r0, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a30      	ldr	r2, [pc, #192]	; (8001ed4 <HAL_ADC_ConfigChannel+0x29c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d10a      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1f4>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e1e:	d105      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4a2c      	ldr	r2, [pc, #176]	; (8001ed8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e26:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e2a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a28      	ldr	r2, [pc, #160]	; (8001ed4 <HAL_ADC_ConfigChannel+0x29c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d10f      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x21e>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b12      	cmp	r3, #18
 8001e3c:	d10b      	bne.n	8001e56 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001e3e:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	4a25      	ldr	r2, [pc, #148]	; (8001ed8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e48:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4a22      	ldr	r2, [pc, #136]	; (8001ed8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e54:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1e      	ldr	r2, [pc, #120]	; (8001ed4 <HAL_ADC_ConfigChannel+0x29c>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d12b      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x280>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1a      	ldr	r2, [pc, #104]	; (8001ed0 <HAL_ADC_ConfigChannel+0x298>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d003      	beq.n	8001e72 <HAL_ADC_ConfigChannel+0x23a>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2b11      	cmp	r3, #17
 8001e70:	d122      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e72:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a18      	ldr	r2, [pc, #96]	; (8001ed8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e7c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e88:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a10      	ldr	r2, [pc, #64]	; (8001ed0 <HAL_ADC_ConfigChannel+0x298>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d111      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e94:	4b11      	ldr	r3, [pc, #68]	; (8001edc <HAL_ADC_ConfigChannel+0x2a4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a11      	ldr	r2, [pc, #68]	; (8001ee0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	0c9a      	lsrs	r2, r3, #18
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001eaa:	e002      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d1f9      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	10000012 	.word	0x10000012
 8001ed4:	40012000 	.word	0x40012000
 8001ed8:	40012300 	.word	0x40012300
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	431bde83 	.word	0x431bde83

08001ee4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001eec:	4b78      	ldr	r3, [pc, #480]	; (80020d0 <ADC_Init+0x1ec>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a77      	ldr	r2, [pc, #476]	; (80020d0 <ADC_Init+0x1ec>)
 8001ef2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ef6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ef8:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <ADC_Init+0x1ec>)
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4973      	ldr	r1, [pc, #460]	; (80020d0 <ADC_Init+0x1ec>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	6859      	ldr	r1, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	021a      	lsls	r2, r3, #8
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6899      	ldr	r1, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f72:	4a58      	ldr	r2, [pc, #352]	; (80020d4 <ADC_Init+0x1f0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6899      	ldr	r1, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6899      	ldr	r1, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	e00f      	b.n	8001fde <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 0202 	bic.w	r2, r2, #2
 8001fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6899      	ldr	r1, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	005a      	lsls	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01b      	beq.n	8002044 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800201a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800202a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6859      	ldr	r1, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	3b01      	subs	r3, #1
 8002038:	035a      	lsls	r2, r3, #13
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	e007      	b.n	8002054 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002052:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	3b01      	subs	r3, #1
 8002070:	051a      	lsls	r2, r3, #20
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002096:	025a      	lsls	r2, r3, #9
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	6899      	ldr	r1, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	029a      	lsls	r2, r3, #10
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	609a      	str	r2, [r3, #8]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	40012300 	.word	0x40012300
 80020d4:	0f000001 	.word	0x0f000001

080020d8 <__NVIC_SetPriorityGrouping>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <__NVIC_SetPriorityGrouping+0x40>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002100:	4b06      	ldr	r3, [pc, #24]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 8002102:	4313      	orrs	r3, r2
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x40>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00
 800211c:	05fa0000 	.word	0x05fa0000

08002120 <__NVIC_GetPriorityGrouping>:
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4907      	ldr	r1, [pc, #28]	; (8002174 <__NVIC_EnableIRQ+0x38>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002258:	f7ff ff8e 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff29 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff3e 	bl	8002120 <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff8e 	bl	80021cc <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5d 	bl	8002178 <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff31 	bl	800213c <__NVIC_EnableIRQ>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ffa2 	bl	8002234 <SysTick_Config>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e054      	b.n	80023b8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7f5b      	ldrb	r3, [r3, #29]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	d105      	bne.n	8002324 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe f9f6 	bl	8000710 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	791b      	ldrb	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10c      	bne.n	800234c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a22      	ldr	r2, [pc, #136]	; (80023c0 <HAL_CRC_Init+0xc4>)
 8002338:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0218 	bic.w	r2, r2, #24
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	e00c      	b.n	8002366 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6899      	ldr	r1, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	461a      	mov	r2, r3
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 f834 	bl	80023c4 <HAL_CRCEx_Polynomial_Set>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e028      	b.n	80023b8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	795b      	ldrb	r3, [r3, #5]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d105      	bne.n	800237a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002376:	611a      	str	r2, [r3, #16]
 8002378:	e004      	b.n	8002384 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6912      	ldr	r2, [r2, #16]
 8002382:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695a      	ldr	r2, [r3, #20]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	699a      	ldr	r2, [r3, #24]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	04c11db7 	.word	0x04c11db7

080023c4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80023d4:	231f      	movs	r3, #31
 80023d6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80023d8:	bf00      	nop
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1e5a      	subs	r2, r3, #1
 80023de:	613a      	str	r2, [r7, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d009      	beq.n	80023f8 <HAL_CRCEx_Polynomial_Set+0x34>
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	f003 031f 	and.w	r3, r3, #31
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b18      	cmp	r3, #24
 80023fc:	d846      	bhi.n	800248c <HAL_CRCEx_Polynomial_Set+0xc8>
 80023fe:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	08002493 	.word	0x08002493
 8002408:	0800248d 	.word	0x0800248d
 800240c:	0800248d 	.word	0x0800248d
 8002410:	0800248d 	.word	0x0800248d
 8002414:	0800248d 	.word	0x0800248d
 8002418:	0800248d 	.word	0x0800248d
 800241c:	0800248d 	.word	0x0800248d
 8002420:	0800248d 	.word	0x0800248d
 8002424:	08002481 	.word	0x08002481
 8002428:	0800248d 	.word	0x0800248d
 800242c:	0800248d 	.word	0x0800248d
 8002430:	0800248d 	.word	0x0800248d
 8002434:	0800248d 	.word	0x0800248d
 8002438:	0800248d 	.word	0x0800248d
 800243c:	0800248d 	.word	0x0800248d
 8002440:	0800248d 	.word	0x0800248d
 8002444:	08002475 	.word	0x08002475
 8002448:	0800248d 	.word	0x0800248d
 800244c:	0800248d 	.word	0x0800248d
 8002450:	0800248d 	.word	0x0800248d
 8002454:	0800248d 	.word	0x0800248d
 8002458:	0800248d 	.word	0x0800248d
 800245c:	0800248d 	.word	0x0800248d
 8002460:	0800248d 	.word	0x0800248d
 8002464:	08002469 	.word	0x08002469
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b06      	cmp	r3, #6
 800246c:	d913      	bls.n	8002496 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002472:	e010      	b.n	8002496 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2b07      	cmp	r3, #7
 8002478:	d90f      	bls.n	800249a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800247e:	e00c      	b.n	800249a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b0f      	cmp	r3, #15
 8002484:	d90b      	bls.n	800249e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800248a:	e008      	b.n	800249e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	75fb      	strb	r3, [r7, #23]
      break;
 8002490:	e006      	b.n	80024a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002492:	bf00      	nop
 8002494:	e004      	b.n	80024a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002496:	bf00      	nop
 8002498:	e002      	b.n	80024a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800249a:	bf00      	nop
 800249c:	e000      	b.n	80024a0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800249e:	bf00      	nop
  }
  if (status == HAL_OK)
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f023 0118 	bic.w	r1, r3, #24
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	430a      	orrs	r2, r1
 80024c0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0ac      	b.n	800263c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fa20 	bl	800292c <DFSDM_GetChannelFromInstance>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4a55      	ldr	r2, [pc, #340]	; (8002644 <HAL_DFSDM_ChannelInit+0x174>)
 80024f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e09f      	b.n	800263c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7fe faeb 	bl	8000ad8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002502:	4b51      	ldr	r3, [pc, #324]	; (8002648 <HAL_DFSDM_ChannelInit+0x178>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	3301      	adds	r3, #1
 8002508:	4a4f      	ldr	r2, [pc, #316]	; (8002648 <HAL_DFSDM_ChannelInit+0x178>)
 800250a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 800250c:	4b4e      	ldr	r3, [pc, #312]	; (8002648 <HAL_DFSDM_ChannelInit+0x178>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d125      	bne.n	8002560 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002514:	4b4d      	ldr	r3, [pc, #308]	; (800264c <HAL_DFSDM_ChannelInit+0x17c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a4c      	ldr	r2, [pc, #304]	; (800264c <HAL_DFSDM_ChannelInit+0x17c>)
 800251a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800251e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002520:	4b4a      	ldr	r3, [pc, #296]	; (800264c <HAL_DFSDM_ChannelInit+0x17c>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4948      	ldr	r1, [pc, #288]	; (800264c <HAL_DFSDM_ChannelInit+0x17c>)
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_DFSDM_ChannelInit+0x17c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a46      	ldr	r2, [pc, #280]	; (800264c <HAL_DFSDM_ChannelInit+0x17c>)
 8002534:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002538:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	791b      	ldrb	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d108      	bne.n	8002554 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8002542:	4b42      	ldr	r3, [pc, #264]	; (800264c <HAL_DFSDM_ChannelInit+0x17c>)
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	3b01      	subs	r3, #1
 800254c:	041b      	lsls	r3, r3, #16
 800254e:	493f      	ldr	r1, [pc, #252]	; (800264c <HAL_DFSDM_ChannelInit+0x17c>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002554:	4b3d      	ldr	r3, [pc, #244]	; (800264c <HAL_DFSDM_ChannelInit+0x17c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3c      	ldr	r2, [pc, #240]	; (800264c <HAL_DFSDM_ChannelInit+0x17c>)
 800255a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800255e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800256e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6819      	ldr	r1, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800257e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002584:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 020f 	bic.w	r2, r2, #15
 800259c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6819      	ldr	r1, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80025c4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685a      	ldr	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f002 0207 	and.w	r2, r2, #7
 80025f0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002602:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800261c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f97e 	bl	800292c <DFSDM_GetChannelFromInstance>
 8002630:	4602      	mov	r2, r0
 8002632:	4904      	ldr	r1, [pc, #16]	; (8002644 <HAL_DFSDM_ChannelInit+0x174>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20001968 	.word	0x20001968
 8002648:	20001964 	.word	0x20001964
 800264c:	40017400 	.word	0x40017400

08002650 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e0c6      	b.n	80027f0 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a64      	ldr	r2, [pc, #400]	; (80027f8 <HAL_DFSDM_FilterInit+0x1a8>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d109      	bne.n	8002680 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002670:	2b01      	cmp	r3, #1
 8002672:	d003      	beq.n	800267c <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002678:	2b01      	cmp	r3, #1
 800267a:	d101      	bne.n	8002680 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e0b7      	b.n	80027f0 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7fe f935 	bl	8000908 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80026ac:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7a1b      	ldrb	r3, [r3, #8]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d108      	bne.n	80026c8 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	e007      	b.n	80026d8 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80026d6:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7a5b      	ldrb	r3, [r3, #9]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d108      	bne.n	80026f2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e007      	b.n	8002702 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002700:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b3b      	ldr	r3, [pc, #236]	; (80027fc <HAL_DFSDM_FilterInit+0x1ac>)
 800270e:	400b      	ands	r3, r1
 8002710:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d108      	bne.n	800272c <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7c1b      	ldrb	r3, [r3, #16]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d108      	bne.n	8002746 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0210 	orr.w	r2, r2, #16
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e007      	b.n	8002756 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0210 	bic.w	r2, r2, #16
 8002754:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	7c5b      	ldrb	r3, [r3, #17]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d108      	bne.n	8002770 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 0220 	orr.w	r2, r2, #32
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e007      	b.n	8002780 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 0220 	bic.w	r2, r2, #32
 800277e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6959      	ldr	r1, [r3, #20]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <HAL_DFSDM_FilterInit+0x1b0>)
 800278c:	400b      	ands	r3, r1
 800278e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	6959      	ldr	r1, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	3b01      	subs	r3, #1
 80027a0:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80027a2:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80027aa:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68da      	ldr	r2, [r3, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699a      	ldr	r2, [r3, #24]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7c1a      	ldrb	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40017500 	.word	0x40017500
 80027fc:	ffff80f7 	.word	0xffff80f7
 8002800:	1c00ff00 	.word	0x1c00ff00

08002804 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800281a:	2b00      	cmp	r3, #0
 800281c:	d02c      	beq.n	8002878 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8002824:	2bff      	cmp	r3, #255	; 0xff
 8002826:	d027      	beq.n	8002878 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6819      	ldr	r1, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8002834:	400b      	ands	r3, r1
 8002836:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d10d      	bne.n	800285a <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	021b      	lsls	r3, r3, #8
 8002848:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800284c:	431a      	orrs	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e00a      	b.n	8002870 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
 8002876:	e001      	b.n	800287c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800287c:	7dfb      	ldrb	r3, [r7, #23]
}
 800287e:	4618      	mov	r0, r3
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	f8fbffff 	.word	0xf8fbffff

08002890 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01b      	beq.n	80028e0 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80028ae:	2bff      	cmp	r3, #255	; 0xff
 80028b0:	d016      	beq.n	80028e0 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	b292      	uxth	r2, r2
 80028ba:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 80028bc:	6838      	ldr	r0, [r7, #0]
 80028be:	f000 f816 	bl	80028ee <DFSDM_GetInjChannelsNbr>
 80028c2:	4602      	mov	r2, r0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d102      	bne.n	80028d8 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	e000      	b.n	80028da <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 80028d8:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6493      	str	r3, [r2, #72]	; 0x48
 80028de:	e001      	b.n	80028e4 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8002900:	e00a      	b.n	8002918 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3301      	adds	r3, #1
 8002910:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	085b      	lsrs	r3, r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f1      	bne.n	8002902 <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 800291e:	68fb      	ldr	r3, [r7, #12]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a1c      	ldr	r2, [pc, #112]	; (80029a8 <DFSDM_GetChannelFromInstance+0x7c>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d102      	bne.n	8002942 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
 8002940:	e02b      	b.n	800299a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a19      	ldr	r2, [pc, #100]	; (80029ac <DFSDM_GetChannelFromInstance+0x80>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d102      	bne.n	8002950 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800294a:	2301      	movs	r3, #1
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e024      	b.n	800299a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <DFSDM_GetChannelFromInstance+0x84>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d102      	bne.n	800295e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002958:	2302      	movs	r3, #2
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e01d      	b.n	800299a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <DFSDM_GetChannelFromInstance+0x88>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d102      	bne.n	800296c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8002966:	2303      	movs	r3, #3
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e016      	b.n	800299a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <DFSDM_GetChannelFromInstance+0x8c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d102      	bne.n	800297a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8002974:	2304      	movs	r3, #4
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	e00f      	b.n	800299a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a0f      	ldr	r2, [pc, #60]	; (80029bc <DFSDM_GetChannelFromInstance+0x90>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d102      	bne.n	8002988 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8002982:	2305      	movs	r3, #5
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	e008      	b.n	800299a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <DFSDM_GetChannelFromInstance+0x94>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d102      	bne.n	8002996 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8002990:	2306      	movs	r3, #6
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e001      	b.n	800299a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8002996:	2307      	movs	r3, #7
 8002998:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40017400 	.word	0x40017400
 80029ac:	40017420 	.word	0x40017420
 80029b0:	40017440 	.word	0x40017440
 80029b4:	40017460 	.word	0x40017460
 80029b8:	40017480 	.word	0x40017480
 80029bc:	400174a0 	.word	0x400174a0
 80029c0:	400174c0 	.word	0x400174c0

080029c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7ff f8be 	bl	8001b50 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e099      	b.n	8002b14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a00:	e00f      	b.n	8002a22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a02:	f7ff f8a5 	bl	8001b50 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d908      	bls.n	8002a22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e078      	b.n	8002b14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e8      	bne.n	8002a02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_DMA_Init+0x158>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d107      	bne.n	8002a8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	4313      	orrs	r3, r2
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f023 0307 	bic.w	r3, r3, #7
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d117      	bne.n	8002ae6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 faa5 	bl	8003018 <DMA_CheckFifoParam>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2240      	movs	r2, #64	; 0x40
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e016      	b.n	8002b14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa5c 	bl	8002fac <DMA_CalcBaseAndBitshift>
 8002af4:	4603      	mov	r3, r0
 8002af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	223f      	movs	r2, #63	; 0x3f
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	e010803f 	.word	0xe010803f

08002b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_Start_IT+0x26>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e048      	b.n	8002bd8 <HAL_DMA_Start_IT+0xb8>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d137      	bne.n	8002bca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f9ee 	bl	8002f50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	223f      	movs	r2, #63	; 0x3f
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0216 	orr.w	r2, r2, #22
 8002b8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b9e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d007      	beq.n	8002bb8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0208 	orr.w	r2, r2, #8
 8002bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0201 	orr.w	r2, r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e005      	b.n	8002bd6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3718      	adds	r7, #24
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d004      	beq.n	8002bfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2280      	movs	r2, #128	; 0x80
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00c      	b.n	8002c18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2205      	movs	r2, #5
 8002c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c30:	4b8e      	ldr	r3, [pc, #568]	; (8002e6c <HAL_DMA_IRQHandler+0x248>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a8e      	ldr	r2, [pc, #568]	; (8002e70 <HAL_DMA_IRQHandler+0x24c>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0a9b      	lsrs	r3, r3, #10
 8002c3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	2208      	movs	r2, #8
 8002c50:	409a      	lsls	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4013      	ands	r3, r2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d01a      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d013      	beq.n	8002c90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0204 	bic.w	r2, r2, #4
 8002c76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	f043 0201 	orr.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c94:	2201      	movs	r2, #1
 8002c96:	409a      	lsls	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d012      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00b      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	f043 0202 	orr.w	r2, r3, #2
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	2204      	movs	r2, #4
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d012      	beq.n	8002cfc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00b      	beq.n	8002cfc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce8:	2204      	movs	r2, #4
 8002cea:	409a      	lsls	r2, r3
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf4:	f043 0204 	orr.w	r2, r3, #4
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d00:	2210      	movs	r2, #16
 8002d02:	409a      	lsls	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d043      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d03c      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1e:	2210      	movs	r2, #16
 8002d20:	409a      	lsls	r2, r3
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d018      	beq.n	8002d66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d024      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
 8002d52:	e01f      	b.n	8002d94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01b      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	4798      	blx	r3
 8002d64:	e016      	b.n	8002d94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d107      	bne.n	8002d84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0208 	bic.w	r2, r2, #8
 8002d82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2220      	movs	r2, #32
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 808f 	beq.w	8002ec4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0310 	and.w	r3, r3, #16
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8087 	beq.w	8002ec4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	2220      	movs	r2, #32
 8002dbc:	409a      	lsls	r2, r3
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d136      	bne.n	8002e3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0216 	bic.w	r2, r2, #22
 8002ddc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <HAL_DMA_IRQHandler+0x1da>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0208 	bic.w	r2, r2, #8
 8002e0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e12:	223f      	movs	r2, #63	; 0x3f
 8002e14:	409a      	lsls	r2, r3
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d07e      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
        }
        return;
 8002e3a:	e079      	b.n	8002f30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d01d      	beq.n	8002e86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10d      	bne.n	8002e74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d031      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	4798      	blx	r3
 8002e68:	e02c      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x2a0>
 8002e6a:	bf00      	nop
 8002e6c:	20000000 	.word	0x20000000
 8002e70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d023      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
 8002e84:	e01e      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10f      	bne.n	8002eb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0210 	bic.w	r2, r2, #16
 8002ea2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d032      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d022      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2205      	movs	r2, #5
 8002edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d307      	bcc.n	8002f0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f2      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x2cc>
 8002f0a:	e000      	b.n	8002f0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d005      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
 8002f2e:	e000      	b.n	8002f32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f30:	bf00      	nop
    }
  }
}
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b40      	cmp	r3, #64	; 0x40
 8002f7c:	d108      	bne.n	8002f90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f8e:	e007      	b.n	8002fa0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68ba      	ldr	r2, [r7, #8]
 8002f96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	60da      	str	r2, [r3, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3b10      	subs	r3, #16
 8002fbc:	4a13      	ldr	r2, [pc, #76]	; (800300c <DMA_CalcBaseAndBitshift+0x60>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <DMA_CalcBaseAndBitshift+0x64>)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d908      	bls.n	8002fec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <DMA_CalcBaseAndBitshift+0x68>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	1d1a      	adds	r2, r3, #4
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	659a      	str	r2, [r3, #88]	; 0x58
 8002fea:	e006      	b.n	8002ffa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <DMA_CalcBaseAndBitshift+0x68>)
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	aaaaaaab 	.word	0xaaaaaaab
 8003010:	0800f8f4 	.word	0x0800f8f4
 8003014:	fffffc00 	.word	0xfffffc00

08003018 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11f      	bne.n	8003072 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d856      	bhi.n	80030e6 <DMA_CheckFifoParam+0xce>
 8003038:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <DMA_CheckFifoParam+0x28>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	08003051 	.word	0x08003051
 8003044:	08003063 	.word	0x08003063
 8003048:	08003051 	.word	0x08003051
 800304c:	080030e7 	.word	0x080030e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d046      	beq.n	80030ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003060:	e043      	b.n	80030ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800306a:	d140      	bne.n	80030ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003070:	e03d      	b.n	80030ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800307a:	d121      	bne.n	80030c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b03      	cmp	r3, #3
 8003080:	d837      	bhi.n	80030f2 <DMA_CheckFifoParam+0xda>
 8003082:	a201      	add	r2, pc, #4	; (adr r2, 8003088 <DMA_CheckFifoParam+0x70>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	08003099 	.word	0x08003099
 800308c:	0800309f 	.word	0x0800309f
 8003090:	08003099 	.word	0x08003099
 8003094:	080030b1 	.word	0x080030b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
      break;
 800309c:	e030      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d025      	beq.n	80030f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ae:	e022      	b.n	80030f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030b8:	d11f      	bne.n	80030fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030be:	e01c      	b.n	80030fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d903      	bls.n	80030ce <DMA_CheckFifoParam+0xb6>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d003      	beq.n	80030d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030cc:	e018      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      break;
 80030d2:	e015      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00e      	beq.n	80030fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
      break;
 80030e4:	e00b      	b.n	80030fe <DMA_CheckFifoParam+0xe6>
      break;
 80030e6:	bf00      	nop
 80030e8:	e00a      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030ea:	bf00      	nop
 80030ec:	e008      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030ee:	bf00      	nop
 80030f0:	e006      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030f2:	bf00      	nop
 80030f4:	e004      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
 80030f8:	e002      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;   
 80030fa:	bf00      	nop
 80030fc:	e000      	b.n	8003100 <DMA_CheckFifoParam+0xe8>
      break;
 80030fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop

08003110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	e175      	b.n	800341c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003130:	2201      	movs	r2, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	429a      	cmp	r2, r3
 800314a:	f040 8164 	bne.w	8003416 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b01      	cmp	r3, #1
 8003158:	d005      	beq.n	8003166 <HAL_GPIO_Init+0x56>
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d130      	bne.n	80031c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	2203      	movs	r2, #3
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800319c:	2201      	movs	r2, #1
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 0201 	and.w	r2, r3, #1
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4313      	orrs	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0303 	and.w	r3, r3, #3
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d017      	beq.n	8003204 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	2203      	movs	r2, #3
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	4013      	ands	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d123      	bne.n	8003258 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	08da      	lsrs	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3208      	adds	r2, #8
 8003218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	220f      	movs	r2, #15
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f003 0307 	and.w	r3, r3, #7
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	08da      	lsrs	r2, r3, #3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	3208      	adds	r2, #8
 8003252:	69b9      	ldr	r1, [r7, #24]
 8003254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 0203 	and.w	r2, r3, #3
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80be 	beq.w	8003416 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329a:	4b66      	ldr	r3, [pc, #408]	; (8003434 <HAL_GPIO_Init+0x324>)
 800329c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329e:	4a65      	ldr	r2, [pc, #404]	; (8003434 <HAL_GPIO_Init+0x324>)
 80032a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032a4:	6453      	str	r3, [r2, #68]	; 0x44
 80032a6:	4b63      	ldr	r3, [pc, #396]	; (8003434 <HAL_GPIO_Init+0x324>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032b2:	4a61      	ldr	r2, [pc, #388]	; (8003438 <HAL_GPIO_Init+0x328>)
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	3302      	adds	r3, #2
 80032ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	220f      	movs	r2, #15
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a58      	ldr	r2, [pc, #352]	; (800343c <HAL_GPIO_Init+0x32c>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d037      	beq.n	800334e <HAL_GPIO_Init+0x23e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a57      	ldr	r2, [pc, #348]	; (8003440 <HAL_GPIO_Init+0x330>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d031      	beq.n	800334a <HAL_GPIO_Init+0x23a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a56      	ldr	r2, [pc, #344]	; (8003444 <HAL_GPIO_Init+0x334>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d02b      	beq.n	8003346 <HAL_GPIO_Init+0x236>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a55      	ldr	r2, [pc, #340]	; (8003448 <HAL_GPIO_Init+0x338>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d025      	beq.n	8003342 <HAL_GPIO_Init+0x232>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a54      	ldr	r2, [pc, #336]	; (800344c <HAL_GPIO_Init+0x33c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d01f      	beq.n	800333e <HAL_GPIO_Init+0x22e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a53      	ldr	r2, [pc, #332]	; (8003450 <HAL_GPIO_Init+0x340>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d019      	beq.n	800333a <HAL_GPIO_Init+0x22a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a52      	ldr	r2, [pc, #328]	; (8003454 <HAL_GPIO_Init+0x344>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d013      	beq.n	8003336 <HAL_GPIO_Init+0x226>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a51      	ldr	r2, [pc, #324]	; (8003458 <HAL_GPIO_Init+0x348>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d00d      	beq.n	8003332 <HAL_GPIO_Init+0x222>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a50      	ldr	r2, [pc, #320]	; (800345c <HAL_GPIO_Init+0x34c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d007      	beq.n	800332e <HAL_GPIO_Init+0x21e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a4f      	ldr	r2, [pc, #316]	; (8003460 <HAL_GPIO_Init+0x350>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d101      	bne.n	800332a <HAL_GPIO_Init+0x21a>
 8003326:	2309      	movs	r3, #9
 8003328:	e012      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800332a:	230a      	movs	r3, #10
 800332c:	e010      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800332e:	2308      	movs	r3, #8
 8003330:	e00e      	b.n	8003350 <HAL_GPIO_Init+0x240>
 8003332:	2307      	movs	r3, #7
 8003334:	e00c      	b.n	8003350 <HAL_GPIO_Init+0x240>
 8003336:	2306      	movs	r3, #6
 8003338:	e00a      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800333a:	2305      	movs	r3, #5
 800333c:	e008      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800333e:	2304      	movs	r3, #4
 8003340:	e006      	b.n	8003350 <HAL_GPIO_Init+0x240>
 8003342:	2303      	movs	r3, #3
 8003344:	e004      	b.n	8003350 <HAL_GPIO_Init+0x240>
 8003346:	2302      	movs	r3, #2
 8003348:	e002      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <HAL_GPIO_Init+0x240>
 800334e:	2300      	movs	r3, #0
 8003350:	69fa      	ldr	r2, [r7, #28]
 8003352:	f002 0203 	and.w	r2, r2, #3
 8003356:	0092      	lsls	r2, r2, #2
 8003358:	4093      	lsls	r3, r2
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003360:	4935      	ldr	r1, [pc, #212]	; (8003438 <HAL_GPIO_Init+0x328>)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	089b      	lsrs	r3, r3, #2
 8003366:	3302      	adds	r3, #2
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336e:	4b3d      	ldr	r3, [pc, #244]	; (8003464 <HAL_GPIO_Init+0x354>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003392:	4a34      	ldr	r2, [pc, #208]	; (8003464 <HAL_GPIO_Init+0x354>)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003398:	4b32      	ldr	r3, [pc, #200]	; (8003464 <HAL_GPIO_Init+0x354>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033bc:	4a29      	ldr	r2, [pc, #164]	; (8003464 <HAL_GPIO_Init+0x354>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033c2:	4b28      	ldr	r3, [pc, #160]	; (8003464 <HAL_GPIO_Init+0x354>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033e6:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_GPIO_Init+0x354>)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_GPIO_Init+0x354>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003410:	4a14      	ldr	r2, [pc, #80]	; (8003464 <HAL_GPIO_Init+0x354>)
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	3301      	adds	r3, #1
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b0f      	cmp	r3, #15
 8003420:	f67f ae86 	bls.w	8003130 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	3724      	adds	r7, #36	; 0x24
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	40013800 	.word	0x40013800
 800343c:	40020000 	.word	0x40020000
 8003440:	40020400 	.word	0x40020400
 8003444:	40020800 	.word	0x40020800
 8003448:	40020c00 	.word	0x40020c00
 800344c:	40021000 	.word	0x40021000
 8003450:	40021400 	.word	0x40021400
 8003454:	40021800 	.word	0x40021800
 8003458:	40021c00 	.word	0x40021c00
 800345c:	40022000 	.word	0x40022000
 8003460:	40022400 	.word	0x40022400
 8003464:	40013c00 	.word	0x40013c00

08003468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	887b      	ldrh	r3, [r7, #2]
 800347a:	4013      	ands	r3, r2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
 8003484:	e001      	b.n	800348a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003486:	2300      	movs	r3, #0
 8003488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
 80034a4:	4613      	mov	r3, r2
 80034a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a8:	787b      	ldrb	r3, [r7, #1]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ae:	887a      	ldrh	r2, [r7, #2]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034b4:	e003      	b.n	80034be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	041a      	lsls	r2, r3, #16
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	619a      	str	r2, [r3, #24]
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	4603      	mov	r3, r0
 80034d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d006      	beq.n	80034f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034e2:	4a05      	ldr	r2, [pc, #20]	; (80034f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034e4:	88fb      	ldrh	r3, [r7, #6]
 80034e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034e8:	88fb      	ldrh	r3, [r7, #6]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f007 fd6a 	bl	800afc4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40013c00 	.word	0x40013c00

080034fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	4b23      	ldr	r3, [pc, #140]	; (8003594 <HAL_PWREx_EnableOverDrive+0x98>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a22      	ldr	r2, [pc, #136]	; (8003594 <HAL_PWREx_EnableOverDrive+0x98>)
 800350c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_PWREx_EnableOverDrive+0x98>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003528:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800352a:	f7fe fb11 	bl	8001b50 <HAL_GetTick>
 800352e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003530:	e009      	b.n	8003546 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003532:	f7fe fb0d 	bl	8001b50 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003540:	d901      	bls.n	8003546 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e022      	b.n	800358c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003546:	4b14      	ldr	r3, [pc, #80]	; (8003598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003552:	d1ee      	bne.n	8003532 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003554:	4b10      	ldr	r3, [pc, #64]	; (8003598 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a0f      	ldr	r2, [pc, #60]	; (8003598 <HAL_PWREx_EnableOverDrive+0x9c>)
 800355a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800355e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003560:	f7fe faf6 	bl	8001b50 <HAL_GetTick>
 8003564:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003566:	e009      	b.n	800357c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003568:	f7fe faf2 	bl	8001b50 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003576:	d901      	bls.n	800357c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e007      	b.n	800358c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <HAL_PWREx_EnableOverDrive+0x9c>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003588:	d1ee      	bne.n	8003568 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40023800 	.word	0x40023800
 8003598:	40007000 	.word	0x40007000

0800359c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035a4:	2300      	movs	r3, #0
 80035a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e29b      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8087 	beq.w	80036ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035c0:	4b96      	ldr	r3, [pc, #600]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 030c 	and.w	r3, r3, #12
 80035c8:	2b04      	cmp	r3, #4
 80035ca:	d00c      	beq.n	80035e6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035cc:	4b93      	ldr	r3, [pc, #588]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d112      	bne.n	80035fe <HAL_RCC_OscConfig+0x62>
 80035d8:	4b90      	ldr	r3, [pc, #576]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e4:	d10b      	bne.n	80035fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e6:	4b8d      	ldr	r3, [pc, #564]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d06c      	beq.n	80036cc <HAL_RCC_OscConfig+0x130>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d168      	bne.n	80036cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e275      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003606:	d106      	bne.n	8003616 <HAL_RCC_OscConfig+0x7a>
 8003608:	4b84      	ldr	r3, [pc, #528]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a83      	ldr	r2, [pc, #524]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800360e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	e02e      	b.n	8003674 <HAL_RCC_OscConfig+0xd8>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x9c>
 800361e:	4b7f      	ldr	r3, [pc, #508]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a7e      	ldr	r2, [pc, #504]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b7c      	ldr	r3, [pc, #496]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7b      	ldr	r2, [pc, #492]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e01d      	b.n	8003674 <HAL_RCC_OscConfig+0xd8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0xc0>
 8003642:	4b76      	ldr	r3, [pc, #472]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a75      	ldr	r2, [pc, #468]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b73      	ldr	r3, [pc, #460]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a72      	ldr	r2, [pc, #456]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0xd8>
 800365c:	4b6f      	ldr	r3, [pc, #444]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a6e      	ldr	r2, [pc, #440]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4b6c      	ldr	r3, [pc, #432]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a6b      	ldr	r2, [pc, #428]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800366e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d013      	beq.n	80036a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800367c:	f7fe fa68 	bl	8001b50 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003684:	f7fe fa64 	bl	8001b50 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e229      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b61      	ldr	r3, [pc, #388]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0xe8>
 80036a2:	e014      	b.n	80036ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fa54 	bl	8001b50 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fe fa50 	bl	8001b50 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e215      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	4b57      	ldr	r3, [pc, #348]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x110>
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d069      	beq.n	80037ae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036da:	4b50      	ldr	r3, [pc, #320]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e6:	4b4d      	ldr	r3, [pc, #308]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d11c      	bne.n	800372c <HAL_RCC_OscConfig+0x190>
 80036f2:	4b4a      	ldr	r3, [pc, #296]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d116      	bne.n	800372c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_RCC_OscConfig+0x17a>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e1e9      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b41      	ldr	r3, [pc, #260]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	493d      	ldr	r1, [pc, #244]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372a:	e040      	b.n	80037ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d023      	beq.n	800377c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003734:	4b39      	ldr	r3, [pc, #228]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a38      	ldr	r2, [pc, #224]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe fa06 	bl	8001b50 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003748:	f7fe fa02 	bl	8001b50 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e1c7      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375a:	4b30      	ldr	r3, [pc, #192]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0f0      	beq.n	8003748 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	4b2d      	ldr	r3, [pc, #180]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4929      	ldr	r1, [pc, #164]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
 800377a:	e018      	b.n	80037ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377c:	4b27      	ldr	r3, [pc, #156]	; (800381c <HAL_RCC_OscConfig+0x280>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a26      	ldr	r2, [pc, #152]	; (800381c <HAL_RCC_OscConfig+0x280>)
 8003782:	f023 0301 	bic.w	r3, r3, #1
 8003786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fe f9e2 	bl	8001b50 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003790:	f7fe f9de 	bl	8001b50 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e1a3      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d038      	beq.n	800382c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d019      	beq.n	80037f6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c2:	4b16      	ldr	r3, [pc, #88]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ce:	f7fe f9bf 	bl	8001b50 <HAL_GetTick>
 80037d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d6:	f7fe f9bb 	bl	8001b50 <HAL_GetTick>
 80037da:	4602      	mov	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e180      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e8:	4b0c      	ldr	r3, [pc, #48]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0f0      	beq.n	80037d6 <HAL_RCC_OscConfig+0x23a>
 80037f4:	e01a      	b.n	800382c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f6:	4b09      	ldr	r3, [pc, #36]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fa:	4a08      	ldr	r2, [pc, #32]	; (800381c <HAL_RCC_OscConfig+0x280>)
 80037fc:	f023 0301 	bic.w	r3, r3, #1
 8003800:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003802:	f7fe f9a5 	bl	8001b50 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003808:	e00a      	b.n	8003820 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380a:	f7fe f9a1 	bl	8001b50 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d903      	bls.n	8003820 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e166      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
 800381c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003820:	4b92      	ldr	r3, [pc, #584]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1ee      	bne.n	800380a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80a4 	beq.w	8003982 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4b8c      	ldr	r3, [pc, #560]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10d      	bne.n	8003862 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	4b89      	ldr	r3, [pc, #548]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a88      	ldr	r2, [pc, #544]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
 8003852:	4b86      	ldr	r3, [pc, #536]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385e:	2301      	movs	r3, #1
 8003860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003862:	4b83      	ldr	r3, [pc, #524]	; (8003a70 <HAL_RCC_OscConfig+0x4d4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800386e:	4b80      	ldr	r3, [pc, #512]	; (8003a70 <HAL_RCC_OscConfig+0x4d4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a7f      	ldr	r2, [pc, #508]	; (8003a70 <HAL_RCC_OscConfig+0x4d4>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387a:	f7fe f969 	bl	8001b50 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fe f965 	bl	8001b50 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b64      	cmp	r3, #100	; 0x64
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e12a      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003894:	4b76      	ldr	r3, [pc, #472]	; (8003a70 <HAL_RCC_OscConfig+0x4d4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x31a>
 80038a8:	4b70      	ldr	r3, [pc, #448]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ac:	4a6f      	ldr	r2, [pc, #444]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6713      	str	r3, [r2, #112]	; 0x70
 80038b4:	e02d      	b.n	8003912 <HAL_RCC_OscConfig+0x376>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x33c>
 80038be:	4b6b      	ldr	r3, [pc, #428]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	4a6a      	ldr	r2, [pc, #424]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80038c4:	f023 0301 	bic.w	r3, r3, #1
 80038c8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ca:	4b68      	ldr	r3, [pc, #416]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ce:	4a67      	ldr	r2, [pc, #412]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80038d0:	f023 0304 	bic.w	r3, r3, #4
 80038d4:	6713      	str	r3, [r2, #112]	; 0x70
 80038d6:	e01c      	b.n	8003912 <HAL_RCC_OscConfig+0x376>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	2b05      	cmp	r3, #5
 80038de:	d10c      	bne.n	80038fa <HAL_RCC_OscConfig+0x35e>
 80038e0:	4b62      	ldr	r3, [pc, #392]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80038e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e4:	4a61      	ldr	r2, [pc, #388]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80038e6:	f043 0304 	orr.w	r3, r3, #4
 80038ea:	6713      	str	r3, [r2, #112]	; 0x70
 80038ec:	4b5f      	ldr	r3, [pc, #380]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a5e      	ldr	r2, [pc, #376]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
 80038f8:	e00b      	b.n	8003912 <HAL_RCC_OscConfig+0x376>
 80038fa:	4b5c      	ldr	r3, [pc, #368]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	4a5b      	ldr	r2, [pc, #364]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	6713      	str	r3, [r2, #112]	; 0x70
 8003906:	4b59      	ldr	r3, [pc, #356]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390a:	4a58      	ldr	r2, [pc, #352]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 800390c:	f023 0304 	bic.w	r3, r3, #4
 8003910:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d015      	beq.n	8003946 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391a:	f7fe f919 	bl	8001b50 <HAL_GetTick>
 800391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003920:	e00a      	b.n	8003938 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7fe f915 	bl	8001b50 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003930:	4293      	cmp	r3, r2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e0d8      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003938:	4b4c      	ldr	r3, [pc, #304]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0ee      	beq.n	8003922 <HAL_RCC_OscConfig+0x386>
 8003944:	e014      	b.n	8003970 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003946:	f7fe f903 	bl	8001b50 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394e:	f7fe f8ff 	bl	8001b50 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	f241 3288 	movw	r2, #5000	; 0x1388
 800395c:	4293      	cmp	r3, r2
 800395e:	d901      	bls.n	8003964 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e0c2      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003964:	4b41      	ldr	r3, [pc, #260]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1ee      	bne.n	800394e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d105      	bne.n	8003982 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003976:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a3c      	ldr	r2, [pc, #240]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80ae 	beq.w	8003ae8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800398c:	4b37      	ldr	r3, [pc, #220]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 030c 	and.w	r3, r3, #12
 8003994:	2b08      	cmp	r3, #8
 8003996:	d06d      	beq.n	8003a74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b02      	cmp	r3, #2
 800399e:	d14b      	bne.n	8003a38 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a0:	4b32      	ldr	r3, [pc, #200]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a31      	ldr	r2, [pc, #196]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80039a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ac:	f7fe f8d0 	bl	8001b50 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fe f8cc 	bl	8001b50 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e091      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f0      	bne.n	80039b4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69da      	ldr	r2, [r3, #28]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	019b      	lsls	r3, r3, #6
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	3b01      	subs	r3, #1
 80039ec:	041b      	lsls	r3, r3, #16
 80039ee:	431a      	orrs	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	061b      	lsls	r3, r3, #24
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	071b      	lsls	r3, r3, #28
 80039fe:	491b      	ldr	r1, [pc, #108]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe f89e 	bl	8001b50 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fe f89a 	bl	8001b50 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e05f      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2a:	4b10      	ldr	r3, [pc, #64]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x47c>
 8003a36:	e057      	b.n	8003ae8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0b      	ldr	r2, [pc, #44]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fe f884 	bl	8001b50 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7fe f880 	bl	8001b50 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e045      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <HAL_RCC_OscConfig+0x4d0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4b0>
 8003a6a:	e03d      	b.n	8003ae8 <HAL_RCC_OscConfig+0x54c>
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a74:	4b1f      	ldr	r3, [pc, #124]	; (8003af4 <HAL_RCC_OscConfig+0x558>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d030      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d129      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d122      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aaa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d119      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	3b01      	subs	r3, #1
 8003abe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d10f      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ace:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d107      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40023800 	.word	0x40023800

08003af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0d0      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b10:	4b6a      	ldr	r3, [pc, #424]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d910      	bls.n	8003b40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1e:	4b67      	ldr	r3, [pc, #412]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f023 020f 	bic.w	r2, r3, #15
 8003b26:	4965      	ldr	r1, [pc, #404]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2e:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	683a      	ldr	r2, [r7, #0]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d001      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0b8      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d020      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b58:	4b59      	ldr	r3, [pc, #356]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	4a58      	ldr	r2, [pc, #352]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0308 	and.w	r3, r3, #8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b70:	4b53      	ldr	r3, [pc, #332]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	4a52      	ldr	r2, [pc, #328]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b7c:	4b50      	ldr	r3, [pc, #320]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	494d      	ldr	r1, [pc, #308]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d040      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d107      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d115      	bne.n	8003bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e07f      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d107      	bne.n	8003bca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bba:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e073      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bca:	4b3d      	ldr	r3, [pc, #244]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e06b      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bda:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f023 0203 	bic.w	r2, r3, #3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	4936      	ldr	r1, [pc, #216]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bec:	f7fd ffb0 	bl	8001b50 <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	e00a      	b.n	8003c0a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf4:	f7fd ffac 	bl	8001b50 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e053      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c0a:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 020c 	and.w	r2, r3, #12
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d1eb      	bne.n	8003bf4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c1c:	4b27      	ldr	r3, [pc, #156]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d210      	bcs.n	8003c4c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2a:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 020f 	bic.w	r2, r3, #15
 8003c32:	4922      	ldr	r1, [pc, #136]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d001      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e032      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d008      	beq.n	8003c6a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c58:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	4916      	ldr	r1, [pc, #88]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d009      	beq.n	8003c8a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c76:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	490e      	ldr	r1, [pc, #56]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c86:	4313      	orrs	r3, r2
 8003c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c8a:	f000 f821 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	490a      	ldr	r1, [pc, #40]	; (8003cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8003c9c:	5ccb      	ldrb	r3, [r1, r3]
 8003c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ca6:	4b09      	ldr	r3, [pc, #36]	; (8003ccc <HAL_RCC_ClockConfig+0x1d4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fd ff0c 	bl	8001ac8 <HAL_InitTick>

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023c00 	.word	0x40023c00
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	0800f8dc 	.word	0x0800f8dc
 8003cc8:	20000000 	.word	0x20000000
 8003ccc:	20000004 	.word	0x20000004

08003cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cd4:	b090      	sub	sp, #64	; 0x40
 8003cd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	637b      	str	r3, [r7, #52]	; 0x34
 8003cdc:	2300      	movs	r3, #0
 8003cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ce8:	4b59      	ldr	r3, [pc, #356]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d00d      	beq.n	8003d10 <HAL_RCC_GetSysClockFreq+0x40>
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	f200 80a1 	bhi.w	8003e3c <HAL_RCC_GetSysClockFreq+0x16c>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0x34>
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d003      	beq.n	8003d0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d02:	e09b      	b.n	8003e3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d08:	e09b      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d0a:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d0e:	e098      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d10:	4b4f      	ldr	r3, [pc, #316]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d18:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d1a:	4b4d      	ldr	r3, [pc, #308]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d028      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d26:	4b4a      	ldr	r3, [pc, #296]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	099b      	lsrs	r3, r3, #6
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	623b      	str	r3, [r7, #32]
 8003d30:	627a      	str	r2, [r7, #36]	; 0x24
 8003d32:	6a3b      	ldr	r3, [r7, #32]
 8003d34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d3c:	fb03 f201 	mul.w	r2, r3, r1
 8003d40:	2300      	movs	r3, #0
 8003d42:	fb00 f303 	mul.w	r3, r0, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	4a43      	ldr	r2, [pc, #268]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d4a:	fba0 1202 	umull	r1, r2, r0, r2
 8003d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d50:	460a      	mov	r2, r1
 8003d52:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d56:	4413      	add	r3, r2
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	61fa      	str	r2, [r7, #28]
 8003d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d6a:	f7fc fab9 	bl	80002e0 <__aeabi_uldivmod>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	4613      	mov	r3, r2
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d76:	e053      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d78:	4b35      	ldr	r3, [pc, #212]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	099b      	lsrs	r3, r3, #6
 8003d7e:	2200      	movs	r2, #0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	617a      	str	r2, [r7, #20]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d8a:	f04f 0b00 	mov.w	fp, #0
 8003d8e:	4652      	mov	r2, sl
 8003d90:	465b      	mov	r3, fp
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	0159      	lsls	r1, r3, #5
 8003d9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da0:	0150      	lsls	r0, r2, #5
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	ebb2 080a 	subs.w	r8, r2, sl
 8003daa:	eb63 090b 	sbc.w	r9, r3, fp
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003dba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003dbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dc2:	ebb2 0408 	subs.w	r4, r2, r8
 8003dc6:	eb63 0509 	sbc.w	r5, r3, r9
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	00eb      	lsls	r3, r5, #3
 8003dd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dd8:	00e2      	lsls	r2, r4, #3
 8003dda:	4614      	mov	r4, r2
 8003ddc:	461d      	mov	r5, r3
 8003dde:	eb14 030a 	adds.w	r3, r4, sl
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	eb45 030b 	adc.w	r3, r5, fp
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003df6:	4629      	mov	r1, r5
 8003df8:	028b      	lsls	r3, r1, #10
 8003dfa:	4621      	mov	r1, r4
 8003dfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e00:	4621      	mov	r1, r4
 8003e02:	028a      	lsls	r2, r1, #10
 8003e04:	4610      	mov	r0, r2
 8003e06:	4619      	mov	r1, r3
 8003e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	60fa      	str	r2, [r7, #12]
 8003e10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e14:	f7fc fa64 	bl	80002e0 <__aeabi_uldivmod>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e20:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	3301      	adds	r3, #1
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003e30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e3a:	e002      	b.n	8003e42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003e3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3740      	adds	r7, #64	; 0x40
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	00f42400 	.word	0x00f42400
 8003e58:	017d7840 	.word	0x017d7840

08003e5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20000000 	.word	0x20000000

08003e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e78:	f7ff fff0 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0a9b      	lsrs	r3, r3, #10
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4903      	ldr	r1, [pc, #12]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40023800 	.word	0x40023800
 8003e98:	0800f8ec 	.word	0x0800f8ec

08003e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ea0:	f7ff ffdc 	bl	8003e5c <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0b5b      	lsrs	r3, r3, #13
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4903      	ldr	r1, [pc, #12]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	0800f8ec 	.word	0x0800f8ec

08003ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d012      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003eec:	4b69      	ldr	r3, [pc, #420]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	4a68      	ldr	r2, [pc, #416]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ef6:	6093      	str	r3, [r2, #8]
 8003ef8:	4b66      	ldr	r3, [pc, #408]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efa:	689a      	ldr	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	4964      	ldr	r1, [pc, #400]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d017      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f1e:	4b5d      	ldr	r3, [pc, #372]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	4959      	ldr	r1, [pc, #356]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d101      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d017      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f5a:	4b4e      	ldr	r3, [pc, #312]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	494a      	ldr	r1, [pc, #296]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f78:	d101      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f86:	2301      	movs	r3, #1
 8003f88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d001      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f96:	2301      	movs	r3, #1
 8003f98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 808b 	beq.w	80040be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fa8:	4b3a      	ldr	r3, [pc, #232]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	4a39      	ldr	r2, [pc, #228]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb2:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb4:	4b37      	ldr	r3, [pc, #220]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fc0:	4b35      	ldr	r3, [pc, #212]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a34      	ldr	r2, [pc, #208]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fcc:	f7fd fdc0 	bl	8001b50 <HAL_GetTick>
 8003fd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd4:	f7fd fdbc 	bl	8001b50 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e38f      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003fe6:	4b2c      	ldr	r3, [pc, #176]	; (8004098 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ff2:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d035      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	429a      	cmp	r2, r3
 800400e:	d02e      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004010:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004018:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800401a:	4b1e      	ldr	r3, [pc, #120]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004026:	4b1b      	ldr	r3, [pc, #108]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a1a      	ldr	r2, [pc, #104]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800402c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004030:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004032:	4a18      	ldr	r2, [pc, #96]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004038:	4b16      	ldr	r3, [pc, #88]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d114      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004044:	f7fd fd84 	bl	8001b50 <HAL_GetTick>
 8004048:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404a:	e00a      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800404c:	f7fd fd80 	bl	8001b50 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e351      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004062:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0ee      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407a:	d111      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800408a:	400b      	ands	r3, r1
 800408c:	4901      	ldr	r1, [pc, #4]	; (8004094 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408e:	4313      	orrs	r3, r2
 8004090:	608b      	str	r3, [r1, #8]
 8004092:	e00b      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004094:	40023800 	.word	0x40023800
 8004098:	40007000 	.word	0x40007000
 800409c:	0ffffcff 	.word	0x0ffffcff
 80040a0:	4bac      	ldr	r3, [pc, #688]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	4aab      	ldr	r2, [pc, #684]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040aa:	6093      	str	r3, [r2, #8]
 80040ac:	4ba9      	ldr	r3, [pc, #676]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040b8:	49a6      	ldr	r1, [pc, #664]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d010      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040ca:	4ba2      	ldr	r3, [pc, #648]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040d0:	4aa0      	ldr	r2, [pc, #640]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80040da:	4b9e      	ldr	r3, [pc, #632]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	499b      	ldr	r1, [pc, #620]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040f8:	4b96      	ldr	r3, [pc, #600]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004106:	4993      	ldr	r1, [pc, #588]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800411a:	4b8e      	ldr	r3, [pc, #568]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004120:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004128:	498a      	ldr	r1, [pc, #552]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800413c:	4b85      	ldr	r3, [pc, #532]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004142:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800414a:	4982      	ldr	r1, [pc, #520]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800415e:	4b7d      	ldr	r3, [pc, #500]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004164:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416c:	4979      	ldr	r1, [pc, #484]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004180:	4b74      	ldr	r3, [pc, #464]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004186:	f023 0203 	bic.w	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	4971      	ldr	r1, [pc, #452]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041a2:	4b6c      	ldr	r3, [pc, #432]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a8:	f023 020c 	bic.w	r2, r3, #12
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041b0:	4968      	ldr	r1, [pc, #416]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041c4:	4b63      	ldr	r3, [pc, #396]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	4960      	ldr	r1, [pc, #384]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041e6:	4b5b      	ldr	r3, [pc, #364]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f4:	4957      	ldr	r1, [pc, #348]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004208:	4b52      	ldr	r3, [pc, #328]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	494f      	ldr	r1, [pc, #316]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800422a:	4b4a      	ldr	r3, [pc, #296]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004230:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004238:	4946      	ldr	r1, [pc, #280]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800424c:	4b41      	ldr	r3, [pc, #260]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425a:	493e      	ldr	r1, [pc, #248]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800426e:	4b39      	ldr	r3, [pc, #228]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004274:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427c:	4935      	ldr	r1, [pc, #212]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004290:	4b30      	ldr	r3, [pc, #192]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800429e:	492d      	ldr	r1, [pc, #180]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d011      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042b2:	4b28      	ldr	r3, [pc, #160]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c0:	4924      	ldr	r1, [pc, #144]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d0:	d101      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042d2:	2301      	movs	r3, #1
 80042d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0308 	and.w	r3, r3, #8
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80042e2:	2301      	movs	r3, #1
 80042e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042f2:	4b18      	ldr	r3, [pc, #96]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004300:	4914      	ldr	r1, [pc, #80]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00b      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004324:	490b      	ldr	r1, [pc, #44]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004326:	4313      	orrs	r3, r2
 8004328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00f      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004348:	4902      	ldr	r1, [pc, #8]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004350:	e002      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004364:	4b8a      	ldr	r3, [pc, #552]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004366:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800436a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	4986      	ldr	r1, [pc, #536]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004388:	4b81      	ldr	r3, [pc, #516]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800438e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004398:	497d      	ldr	r1, [pc, #500]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d006      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80d6 	beq.w	8004560 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043b4:	4b76      	ldr	r3, [pc, #472]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a75      	ldr	r2, [pc, #468]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c0:	f7fd fbc6 	bl	8001b50 <HAL_GetTick>
 80043c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043c8:	f7fd fbc2 	bl	8001b50 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e195      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043da:	4b6d      	ldr	r3, [pc, #436]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d021      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d11d      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043fa:	4b65      	ldr	r3, [pc, #404]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004408:	4b61      	ldr	r3, [pc, #388]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440e:	0e1b      	lsrs	r3, r3, #24
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	019a      	lsls	r2, r3, #6
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	061b      	lsls	r3, r3, #24
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	071b      	lsls	r3, r3, #28
 800442e:	4958      	ldr	r1, [pc, #352]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d004      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004454:	2b00      	cmp	r3, #0
 8004456:	d02e      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004460:	d129      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004462:	4b4b      	ldr	r3, [pc, #300]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004470:	4b47      	ldr	r3, [pc, #284]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004476:	0f1b      	lsrs	r3, r3, #28
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	019a      	lsls	r2, r3, #6
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	061b      	lsls	r3, r3, #24
 8004490:	431a      	orrs	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	071b      	lsls	r3, r3, #28
 8004496:	493e      	ldr	r1, [pc, #248]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800449e:	4b3c      	ldr	r3, [pc, #240]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044a4:	f023 021f 	bic.w	r2, r3, #31
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	3b01      	subs	r3, #1
 80044ae:	4938      	ldr	r1, [pc, #224]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01d      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044c2:	4b33      	ldr	r3, [pc, #204]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044c8:	0e1b      	lsrs	r3, r3, #24
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044d0:	4b2f      	ldr	r3, [pc, #188]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044d6:	0f1b      	lsrs	r3, r3, #28
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	019a      	lsls	r2, r3, #6
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	431a      	orrs	r2, r3
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	061b      	lsls	r3, r3, #24
 80044f0:	431a      	orrs	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	071b      	lsls	r3, r3, #28
 80044f6:	4926      	ldr	r1, [pc, #152]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d011      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	019a      	lsls	r2, r3, #6
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	041b      	lsls	r3, r3, #16
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	061b      	lsls	r3, r3, #24
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	491a      	ldr	r1, [pc, #104]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800452e:	4b18      	ldr	r3, [pc, #96]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a17      	ldr	r2, [pc, #92]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004534:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800453a:	f7fd fb09 	bl	8001b50 <HAL_GetTick>
 800453e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004540:	e008      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004542:	f7fd fb05 	bl	8001b50 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b64      	cmp	r3, #100	; 0x64
 800454e:	d901      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0d8      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d0f0      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b01      	cmp	r3, #1
 8004564:	f040 80ce 	bne.w	8004704 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004568:	4b09      	ldr	r3, [pc, #36]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a08      	ldr	r2, [pc, #32]	; (8004590 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800456e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004574:	f7fd faec 	bl	8001b50 <HAL_GetTick>
 8004578:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800457a:	e00b      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800457c:	f7fd fae8 	bl	8001b50 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d904      	bls.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0bb      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004594:	4b5e      	ldr	r3, [pc, #376]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800459c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a0:	d0ec      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d02e      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d12a      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045ca:	4b51      	ldr	r3, [pc, #324]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045d8:	4b4d      	ldr	r3, [pc, #308]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	0f1b      	lsrs	r3, r3, #28
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	019a      	lsls	r2, r3, #6
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	041b      	lsls	r3, r3, #16
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	431a      	orrs	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	071b      	lsls	r3, r3, #28
 80045fe:	4944      	ldr	r1, [pc, #272]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004600:	4313      	orrs	r3, r2
 8004602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004606:	4b42      	ldr	r3, [pc, #264]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800460c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	021b      	lsls	r3, r3, #8
 8004618:	493d      	ldr	r1, [pc, #244]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d022      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004634:	d11d      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004636:	4b36      	ldr	r3, [pc, #216]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	0e1b      	lsrs	r3, r3, #24
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004644:	4b32      	ldr	r3, [pc, #200]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	0f1b      	lsrs	r3, r3, #28
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	019a      	lsls	r2, r3, #6
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	041b      	lsls	r3, r3, #16
 800465e:	431a      	orrs	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	061b      	lsls	r3, r3, #24
 8004664:	431a      	orrs	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	071b      	lsls	r3, r3, #28
 800466a:	4929      	ldr	r1, [pc, #164]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800466c:	4313      	orrs	r3, r2
 800466e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d028      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800467e:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004684:	0e1b      	lsrs	r3, r3, #24
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800468c:	4b20      	ldr	r3, [pc, #128]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	0c1b      	lsrs	r3, r3, #16
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	019a      	lsls	r2, r3, #6
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	041b      	lsls	r3, r3, #16
 80046a4:	431a      	orrs	r2, r3
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	061b      	lsls	r3, r3, #24
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	071b      	lsls	r3, r3, #28
 80046b2:	4917      	ldr	r1, [pc, #92]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c8:	4911      	ldr	r1, [pc, #68]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046d0:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0e      	ldr	r2, [pc, #56]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046dc:	f7fd fa38 	bl	8001b50 <HAL_GetTick>
 80046e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80046e4:	f7fd fa34 	bl	8001b50 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b64      	cmp	r3, #100	; 0x64
 80046f0:	d901      	bls.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e007      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004702:	d1ef      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40023800 	.word	0x40023800

08004714 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004732:	f040 80a3 	bne.w	800487c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8004736:	4ba8      	ldr	r3, [pc, #672]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800473c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004744:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800474c:	f000 808a 	beq.w	8004864 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004756:	f200 8093 	bhi.w	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004760:	d07d      	beq.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004768:	f200 808a 	bhi.w	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d004      	beq.n	800477c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004778:	d039      	beq.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800477a:	e081      	b.n	8004880 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800477c:	4b96      	ldr	r3, [pc, #600]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d108      	bne.n	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004788:	4b93      	ldr	r3, [pc, #588]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004790:	4a92      	ldr	r2, [pc, #584]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004792:	fbb2 f3f3 	udiv	r3, r2, r3
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	e007      	b.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800479a:	4b8f      	ldr	r3, [pc, #572]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a2:	4a8f      	ldr	r2, [pc, #572]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80047aa:	4b8b      	ldr	r3, [pc, #556]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	0e1b      	lsrs	r3, r3, #24
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80047b8:	4b87      	ldr	r3, [pc, #540]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	099b      	lsrs	r3, r3, #6
 80047c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	fb03 f202 	mul.w	r2, r3, r2
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80047d2:	4b81      	ldr	r3, [pc, #516]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047d8:	0a1b      	lsrs	r3, r3, #8
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	3301      	adds	r3, #1
 80047e0:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ea:	617b      	str	r3, [r7, #20]
        break;
 80047ec:	e049      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047ee:	4b7a      	ldr	r3, [pc, #488]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d108      	bne.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047fa:	4b77      	ldr	r3, [pc, #476]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004802:	4a76      	ldr	r2, [pc, #472]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	613b      	str	r3, [r7, #16]
 800480a:	e007      	b.n	800481c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800480c:	4b72      	ldr	r3, [pc, #456]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004814:	4a72      	ldr	r2, [pc, #456]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004816:	fbb2 f3f3 	udiv	r3, r2, r3
 800481a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800481c:	4b6e      	ldr	r3, [pc, #440]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	0e1b      	lsrs	r3, r3, #24
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800482a:	4b6b      	ldr	r3, [pc, #428]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	fb03 f202 	mul.w	r2, r3, r2
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004844:	4b64      	ldr	r3, [pc, #400]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	3301      	adds	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	fbb2 f3f3 	udiv	r3, r2, r3
 800485a:	617b      	str	r3, [r7, #20]
        break;
 800485c:	e011      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800485e:	4b61      	ldr	r3, [pc, #388]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004860:	617b      	str	r3, [r7, #20]
        break;
 8004862:	e00e      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004864:	4b5c      	ldr	r3, [pc, #368]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d102      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8004870:	4b5a      	ldr	r3, [pc, #360]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004872:	617b      	str	r3, [r7, #20]
        break;
 8004874:	e005      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8004876:	4b5a      	ldr	r3, [pc, #360]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004878:	617b      	str	r3, [r7, #20]
        break;
 800487a:	e002      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 800487c:	bf00      	nop
 800487e:	e000      	b.n	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8004880:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004888:	f040 80a3 	bne.w	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 800488c:	4b52      	ldr	r3, [pc, #328]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800488e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004892:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800489a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048a2:	f000 808a 	beq.w	80049ba <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048ac:	f200 809c 	bhi.w	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048b6:	d07d      	beq.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048be:	f200 8093 	bhi.w	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d004      	beq.n	80048d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ce:	d039      	beq.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80048d0:	e08a      	b.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80048d2:	4b41      	ldr	r3, [pc, #260]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d108      	bne.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048de:	4b3e      	ldr	r3, [pc, #248]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e6:	4a3d      	ldr	r2, [pc, #244]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	e007      	b.n	8004900 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80048f0:	4b39      	ldr	r3, [pc, #228]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f8:	4a39      	ldr	r2, [pc, #228]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fe:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004900:	4b35      	ldr	r3, [pc, #212]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004906:	0e1b      	lsrs	r3, r3, #24
 8004908:	f003 030f 	and.w	r3, r3, #15
 800490c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800490e:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	099b      	lsrs	r3, r3, #6
 8004916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	fb03 f202 	mul.w	r2, r3, r2
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004928:	4b2b      	ldr	r3, [pc, #172]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800492a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492e:	0a1b      	lsrs	r3, r3, #8
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	3301      	adds	r3, #1
 8004936:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	617b      	str	r3, [r7, #20]
        break;
 8004942:	e052      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004944:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d108      	bne.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004950:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004958:	4a20      	ldr	r2, [pc, #128]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800495a:	fbb2 f3f3 	udiv	r3, r2, r3
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	e007      	b.n	8004972 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004962:	4b1d      	ldr	r3, [pc, #116]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800496a:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004972:	4b19      	ldr	r3, [pc, #100]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004978:	0e1b      	lsrs	r3, r3, #24
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004980:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	fb03 f202 	mul.w	r2, r3, r2
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800499a:	4b0f      	ldr	r3, [pc, #60]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800499c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	3301      	adds	r3, #1
 80049a6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b0:	617b      	str	r3, [r7, #20]
        break;
 80049b2:	e01a      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 80049b4:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80049b6:	617b      	str	r3, [r7, #20]
        break;
 80049b8:	e017      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80049ba:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80049c8:	617b      	str	r3, [r7, #20]
        break;
 80049ca:	e00e      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 80049cc:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049ce:	617b      	str	r3, [r7, #20]
        break;
 80049d0:	e00b      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 80049d2:	bf00      	nop
 80049d4:	e009      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800
 80049dc:	00f42400 	.word	0x00f42400
 80049e0:	017d7840 	.word	0x017d7840
 80049e4:	00bb8000 	.word	0x00bb8000
        break;
 80049e8:	bf00      	nop

  return frequency;
 80049ea:	697b      	ldr	r3, [r7, #20]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e071      	b.n	8004af2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7f5b      	ldrb	r3, [r3, #29]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d105      	bne.n	8004a24 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fc fc2a 	bl	8001278 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d053      	beq.n	8004ae0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	22ca      	movs	r2, #202	; 0xca
 8004a3e:	625a      	str	r2, [r3, #36]	; 0x24
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2253      	movs	r2, #83	; 0x53
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f99f 	bl	8004d8c <RTC_EnterInitMode>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d12a      	bne.n	8004aae <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6899      	ldr	r1, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b26      	ldr	r3, [pc, #152]	; (8004afc <HAL_RTC_Init+0x104>)
 8004a64:	400b      	ands	r3, r1
 8004a66:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6899      	ldr	r1, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68d2      	ldr	r2, [r2, #12]
 8004a8e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6919      	ldr	r1, [r3, #16]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	041a      	lsls	r2, r3, #16
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f9a8 	bl	8004dfa <RTC_ExitInitMode>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d110      	bne.n	8004ad6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0208 	bic.w	r2, r2, #8
 8004ac2:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	22ff      	movs	r2, #255	; 0xff
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24
 8004ade:	e001      	b.n	8004ae4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004ae4:	7bfb      	ldrb	r3, [r7, #15]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d102      	bne.n	8004af0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	ff8fffbf 	.word	0xff8fffbf

08004b00 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b00:	b590      	push	{r4, r7, lr}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	7f1b      	ldrb	r3, [r3, #28]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_RTC_SetTime+0x1c>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e085      	b.n	8004c28 <HAL_RTC_SetTime+0x128>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2202      	movs	r2, #2
 8004b26:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d126      	bne.n	8004b7c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d102      	bne.n	8004b42 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f97c 	bl	8004e44 <RTC_ByteToBcd2>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	785b      	ldrb	r3, [r3, #1]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 f975 	bl	8004e44 <RTC_ByteToBcd2>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b5e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	789b      	ldrb	r3, [r3, #2]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 f96d 	bl	8004e44 <RTC_ByteToBcd2>
 8004b6a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b6c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	78db      	ldrb	r3, [r3, #3]
 8004b74:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]
 8004b7a:	e018      	b.n	8004bae <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d102      	bne.n	8004b90 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	785b      	ldrb	r3, [r3, #1]
 8004b9a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004b9c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004ba2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	78db      	ldrb	r3, [r3, #3]
 8004ba8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	22ca      	movs	r2, #202	; 0xca
 8004bb4:	625a      	str	r2, [r3, #36]	; 0x24
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2253      	movs	r2, #83	; 0x53
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f8e4 	bl	8004d8c <RTC_EnterInitMode>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004bc8:	7cfb      	ldrb	r3, [r7, #19]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d11e      	bne.n	8004c0c <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	6979      	ldr	r1, [r7, #20]
 8004bd4:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <HAL_RTC_SetTime+0x130>)
 8004bd6:	400b      	ands	r3, r1
 8004bd8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004be8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6899      	ldr	r1, [r3, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	68da      	ldr	r2, [r3, #12]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f8f9 	bl	8004dfa <RTC_ExitInitMode>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d102      	bne.n	8004c18 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	22ff      	movs	r2, #255	; 0xff
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	771a      	strb	r2, [r3, #28]

  return status;
 8004c26:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	371c      	adds	r7, #28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd90      	pop	{r4, r7, pc}
 8004c30:	007f7f7f 	.word	0x007f7f7f

08004c34 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c34:	b590      	push	{r4, r7, lr}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	7f1b      	ldrb	r3, [r3, #28]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_RTC_SetDate+0x1c>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e06f      	b.n	8004d30 <HAL_RTC_SetDate+0xfc>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2202      	movs	r2, #2
 8004c5a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10e      	bne.n	8004c80 <HAL_RTC_SetDate+0x4c>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	f003 0310 	and.w	r3, r3, #16
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d008      	beq.n	8004c80 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	785b      	ldrb	r3, [r3, #1]
 8004c72:	f023 0310 	bic.w	r3, r3, #16
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	330a      	adds	r3, #10
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d11c      	bne.n	8004cc0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	78db      	ldrb	r3, [r3, #3]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 f8da 	bl	8004e44 <RTC_ByteToBcd2>
 8004c90:	4603      	mov	r3, r0
 8004c92:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 f8d3 	bl	8004e44 <RTC_ByteToBcd2>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ca2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	789b      	ldrb	r3, [r3, #2]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f8cb 	bl	8004e44 <RTC_ByteToBcd2>
 8004cae:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cb0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	e00e      	b.n	8004cde <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	78db      	ldrb	r3, [r3, #3]
 8004cc4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	785b      	ldrb	r3, [r3, #1]
 8004cca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ccc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004cd2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	22ca      	movs	r2, #202	; 0xca
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2253      	movs	r2, #83	; 0x53
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f84c 	bl	8004d8c <RTC_EnterInitMode>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004cf8:	7cfb      	ldrb	r3, [r7, #19]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10a      	bne.n	8004d14 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	6979      	ldr	r1, [r7, #20]
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <HAL_RTC_SetDate+0x104>)
 8004d06:	400b      	ands	r3, r1
 8004d08:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f875 	bl	8004dfa <RTC_ExitInitMode>
 8004d10:	4603      	mov	r3, r0
 8004d12:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004d14:	7cfb      	ldrb	r3, [r7, #19]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d102      	bne.n	8004d20 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	22ff      	movs	r2, #255	; 0xff
 8004d26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	771a      	strb	r2, [r3, #28]

  return status;
 8004d2e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd90      	pop	{r4, r7, pc}
 8004d38:	00ffff3f 	.word	0x00ffff3f

08004d3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d56:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d58:	f7fc fefa 	bl	8001b50 <HAL_GetTick>
 8004d5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d5e:	e009      	b.n	8004d74 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d60:	f7fc fef6 	bl	8001b50 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d6e:	d901      	bls.n	8004d74 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e007      	b.n	8004d84 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0320 	and.w	r3, r3, #32
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0ee      	beq.n	8004d60 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d122      	bne.n	8004df0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004db8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dba:	f7fc fec9 	bl	8001b50 <HAL_GetTick>
 8004dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004dc0:	e00c      	b.n	8004ddc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004dc2:	f7fc fec5 	bl	8001b50 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dd0:	d904      	bls.n	8004ddc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <RTC_EnterInitMode+0x64>
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d1e8      	bne.n	8004dc2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3710      	adds	r7, #16
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}

08004dfa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b084      	sub	sp, #16
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e14:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 0320 	and.w	r3, r3, #32
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ff89 	bl	8004d3c <HAL_RTC_WaitForSynchro>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d004      	beq.n	8004e3a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2204      	movs	r2, #4
 8004e34:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004e52:	e005      	b.n	8004e60 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	3b0a      	subs	r3, #10
 8004e5e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	2b09      	cmp	r3, #9
 8004e64:	d8f6      	bhi.n	8004e54 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	b2db      	uxtb	r3, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3350      	adds	r3, #80	; 0x50
 8004e96:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	601a      	str	r2, [r3, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3350      	adds	r3, #80	; 0x50
 8004ec8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e156      	b.n	80051b0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc fa3a 	bl	8001390 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f95b 	bl	80051e0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2b02      	cmp	r3, #2
 8004f30:	d00c      	beq.n	8004f4c <HAL_SAI_Init+0x68>
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d80d      	bhi.n	8004f52 <HAL_SAI_Init+0x6e>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_SAI_Init+0x5c>
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d003      	beq.n	8004f46 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004f3e:	e008      	b.n	8004f52 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	61fb      	str	r3, [r7, #28]
      break;
 8004f44:	e006      	b.n	8004f54 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004f46:	2310      	movs	r3, #16
 8004f48:	61fb      	str	r3, [r7, #28]
      break;
 8004f4a:	e003      	b.n	8004f54 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	61fb      	str	r3, [r7, #28]
      break;
 8004f50:	e000      	b.n	8004f54 <HAL_SAI_Init+0x70>
      break;
 8004f52:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d81e      	bhi.n	8004f9a <HAL_SAI_Init+0xb6>
 8004f5c:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <HAL_SAI_Init+0x80>)
 8004f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f62:	bf00      	nop
 8004f64:	08004f75 	.word	0x08004f75
 8004f68:	08004f7b 	.word	0x08004f7b
 8004f6c:	08004f83 	.word	0x08004f83
 8004f70:	08004f8b 	.word	0x08004f8b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
    }
    break;
 8004f78:	e010      	b.n	8004f9c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f7e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004f80:	e00c      	b.n	8004f9c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f86:	617b      	str	r3, [r7, #20]
    }
    break;
 8004f88:	e008      	b.n	8004f9c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004f8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f8e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	f043 0301 	orr.w	r3, r3, #1
 8004f96:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004f98:	e000      	b.n	8004f9c <HAL_SAI_Init+0xb8>
    default:
      break;
 8004f9a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a85      	ldr	r2, [pc, #532]	; (80051b8 <HAL_SAI_Init+0x2d4>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_SAI_Init+0xcc>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a84      	ldr	r2, [pc, #528]	; (80051bc <HAL_SAI_Init+0x2d8>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d103      	bne.n	8004fb8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004fb0:	4a83      	ldr	r2, [pc, #524]	; (80051c0 <HAL_SAI_Init+0x2dc>)
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e002      	b.n	8004fbe <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004fb8:	4a82      	ldr	r2, [pc, #520]	; (80051c4 <HAL_SAI_Init+0x2e0>)
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d04c      	beq.n	8005060 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a7a      	ldr	r2, [pc, #488]	; (80051b8 <HAL_SAI_Init+0x2d4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d004      	beq.n	8004fde <HAL_SAI_Init+0xfa>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a78      	ldr	r2, [pc, #480]	; (80051bc <HAL_SAI_Init+0x2d8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d104      	bne.n	8004fe8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004fde:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004fe2:	f7ff fb97 	bl	8004714 <HAL_RCCEx_GetPeriphCLKFreq>
 8004fe6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a76      	ldr	r2, [pc, #472]	; (80051c8 <HAL_SAI_Init+0x2e4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <HAL_SAI_Init+0x118>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a75      	ldr	r2, [pc, #468]	; (80051cc <HAL_SAI_Init+0x2e8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d104      	bne.n	8005006 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004ffc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005000:	f7ff fb88 	bl	8004714 <HAL_RCCEx_GetPeriphCLKFreq>
 8005004:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	005b      	lsls	r3, r3, #1
 8005010:	461a      	mov	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	025b      	lsls	r3, r3, #9
 8005018:	fbb2 f3f3 	udiv	r3, r2, r3
 800501c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	4a6b      	ldr	r2, [pc, #428]	; (80051d0 <HAL_SAI_Init+0x2ec>)
 8005022:	fba2 2303 	umull	r2, r3, r2, r3
 8005026:	08da      	lsrs	r2, r3, #3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 800502c:	68f9      	ldr	r1, [r7, #12]
 800502e:	4b68      	ldr	r3, [pc, #416]	; (80051d0 <HAL_SAI_Init+0x2ec>)
 8005030:	fba3 2301 	umull	r2, r3, r3, r1
 8005034:	08da      	lsrs	r2, r3, #3
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	1aca      	subs	r2, r1, r3
 8005040:	2a08      	cmp	r2, #8
 8005042:	d904      	bls.n	800504e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a1b      	ldr	r3, [r3, #32]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	2b04      	cmp	r3, #4
 8005054:	d104      	bne.n	8005060 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	085a      	lsrs	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_SAI_Init+0x18c>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d109      	bne.n	8005084 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_SAI_Init+0x198>
 8005078:	2300      	movs	r3, #0
 800507a:	e001      	b.n	8005080 <HAL_SAI_Init+0x19c>
 800507c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	e008      	b.n	8005096 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005088:	2b01      	cmp	r3, #1
 800508a:	d102      	bne.n	8005092 <HAL_SAI_Init+0x1ae>
 800508c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005090:	e000      	b.n	8005094 <HAL_SAI_Init+0x1b0>
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6819      	ldr	r1, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b4c      	ldr	r3, [pc, #304]	; (80051d4 <HAL_SAI_Init+0x2f0>)
 80050a2:	400b      	ands	r3, r1
 80050a4:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6819      	ldr	r1, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050ba:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	431a      	orrs	r2, r3
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80050ce:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80050da:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	051b      	lsls	r3, r3, #20
 80050e2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	6859      	ldr	r1, [r3, #4]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b38      	ldr	r3, [pc, #224]	; (80051d8 <HAL_SAI_Init+0x2f4>)
 80050f8:	400b      	ands	r3, r1
 80050fa:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	6859      	ldr	r1, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6899      	ldr	r1, [r3, #8]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	4b2d      	ldr	r3, [pc, #180]	; (80051dc <HAL_SAI_Init+0x2f8>)
 8005126:	400b      	ands	r3, r1
 8005128:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6899      	ldr	r1, [r3, #8]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005134:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800513a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005140:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005146:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514c:	3b01      	subs	r3, #1
 800514e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005150:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68d9      	ldr	r1, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005168:	400b      	ands	r3, r1
 800516a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68d9      	ldr	r1, [r3, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005180:	041b      	lsls	r3, r3, #16
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005188:	3b01      	subs	r3, #1
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80051ae:	2300      	movs	r3, #0
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40015804 	.word	0x40015804
 80051bc:	40015824 	.word	0x40015824
 80051c0:	40015800 	.word	0x40015800
 80051c4:	40015c00 	.word	0x40015c00
 80051c8:	40015c04 	.word	0x40015c04
 80051cc:	40015c24 	.word	0x40015c24
 80051d0:	cccccccd 	.word	0xcccccccd
 80051d4:	ff05c010 	.word	0xff05c010
 80051d8:	ffff1ff0 	.word	0xffff1ff0
 80051dc:	fff88000 	.word	0xfff88000

080051e0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <SAI_Disable+0x68>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a17      	ldr	r2, [pc, #92]	; (800524c <SAI_Disable+0x6c>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	0b1b      	lsrs	r3, r3, #12
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800520a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1e5a      	subs	r2, r3, #1
 8005210:	60fa      	str	r2, [r7, #12]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	72fb      	strb	r3, [r7, #11]
      break;
 800522a:	e006      	b.n	800523a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e8      	bne.n	800520c <SAI_Disable+0x2c>

  return status;
 800523a:	7afb      	ldrb	r3, [r7, #11]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	20000000 	.word	0x20000000
 800524c:	95cbec1b 	.word	0x95cbec1b

08005250 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e022      	b.n	80052a8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d105      	bne.n	800527a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7fc f957 	bl	8001528 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2203      	movs	r2, #3
 800527e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f814 	bl	80052b0 <HAL_SD_InitCard>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e00a      	b.n	80052a8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80052b0:	b5b0      	push	{r4, r5, r7, lr}
 80052b2:	b08e      	sub	sp, #56	; 0x38
 80052b4:	af04      	add	r7, sp, #16
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80052b8:	2300      	movs	r3, #0
 80052ba:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80052bc:	2300      	movs	r3, #0
 80052be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80052c0:	2300      	movs	r3, #0
 80052c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80052cc:	2376      	movs	r3, #118	; 0x76
 80052ce:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681d      	ldr	r5, [r3, #0]
 80052d4:	466c      	mov	r4, sp
 80052d6:	f107 0314 	add.w	r3, r7, #20
 80052da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80052e2:	f107 0308 	add.w	r3, r7, #8
 80052e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052e8:	4628      	mov	r0, r5
 80052ea:	f001 ff45 	bl	8007178 <SDMMC_Init>
 80052ee:	4603      	mov	r3, r0
 80052f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80052f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e059      	b.n	80053b4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800530e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4618      	mov	r0, r3
 8005316:	f001 ff79 	bl	800720c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	685a      	ldr	r2, [r3, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005328:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800532a:	2002      	movs	r0, #2
 800532c:	f7fc fc1c 	bl	8001b68 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 fff3 	bl	800631c <SD_PowerON>
 8005336:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00b      	beq.n	8005356 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	431a      	orrs	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e02e      	b.n	80053b4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 ff12 	bl	8006180 <SD_InitCard>
 800535c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e01b      	b.n	80053b4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005384:	4618      	mov	r0, r3
 8005386:	f001 ffd3 	bl	8007330 <SDMMC_CmdBlockLength>
 800538a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00f      	beq.n	80053b2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a09      	ldr	r2, [pc, #36]	; (80053bc <HAL_SD_InitCard+0x10c>)
 8005398:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3728      	adds	r7, #40	; 0x28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bdb0      	pop	{r4, r5, r7, pc}
 80053bc:	004005ff 	.word	0x004005ff

080053c0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	; 0x30
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d107      	bne.n	80053e8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0c3      	b.n	8005570 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	f040 80bc 	bne.w	800556e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2200      	movs	r2, #0
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80053fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	441a      	add	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005406:	429a      	cmp	r2, r3
 8005408:	d907      	bls.n	800541a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e0aa      	b.n	8005570 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2203      	movs	r2, #3
 800541e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2200      	movs	r2, #0
 8005428:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005438:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	4a4e      	ldr	r2, [pc, #312]	; (8005578 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	4a4d      	ldr	r2, [pc, #308]	; (800557c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005448:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	2200      	movs	r2, #0
 8005450:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	2200      	movs	r2, #0
 8005458:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3380      	adds	r3, #128	; 0x80
 8005480:	4619      	mov	r1, r3
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	025b      	lsls	r3, r3, #9
 8005488:	089b      	lsrs	r3, r3, #2
 800548a:	f7fd fb49 	bl	8002b20 <HAL_DMA_Start_IT>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d017      	beq.n	80054c4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80054a2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a35      	ldr	r2, [pc, #212]	; (8005580 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80054aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e055      	b.n	8005570 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0208 	orr.w	r2, r2, #8
 80054d2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d002      	beq.n	80054e2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	025b      	lsls	r3, r3, #9
 80054e0:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80054e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054e6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	025b      	lsls	r3, r3, #9
 80054ec:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80054ee:	2390      	movs	r3, #144	; 0x90
 80054f0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80054f2:	2302      	movs	r3, #2
 80054f4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80054fa:	2301      	movs	r3, #1
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f107 0210 	add.w	r2, r7, #16
 8005506:	4611      	mov	r1, r2
 8005508:	4618      	mov	r0, r3
 800550a:	f001 fee5 	bl	80072d8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d90a      	bls.n	800552a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2282      	movs	r2, #130	; 0x82
 8005518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005520:	4618      	mov	r0, r3
 8005522:	f001 ff49 	bl	80073b8 <SDMMC_CmdReadMultiBlock>
 8005526:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005528:	e009      	b.n	800553e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2281      	movs	r2, #129	; 0x81
 800552e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005536:	4618      	mov	r0, r3
 8005538:	f001 ff1c 	bl	8007374 <SDMMC_CmdReadSingleBlock>
 800553c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d012      	beq.n	800556a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a0d      	ldr	r2, [pc, #52]	; (8005580 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800554a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	431a      	orrs	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e002      	b.n	8005570 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e000      	b.n	8005570 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800556e:	2302      	movs	r3, #2
  }
}
 8005570:	4618      	mov	r0, r3
 8005572:	3730      	adds	r7, #48	; 0x30
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	08005f8f 	.word	0x08005f8f
 800557c:	08006001 	.word	0x08006001
 8005580:	004005ff 	.word	0x004005ff

08005584 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08c      	sub	sp, #48	; 0x30
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d107      	bne.n	80055ac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0c6      	b.n	800573a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	f040 80bf 	bne.w	8005738 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80055c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	441a      	add	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d907      	bls.n	80055de <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e0ad      	b.n	800573a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2203      	movs	r2, #3
 80055e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2200      	movs	r2, #0
 80055ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 021a 	orr.w	r2, r2, #26
 80055fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005602:	4a50      	ldr	r2, [pc, #320]	; (8005744 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005604:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	4a4f      	ldr	r2, [pc, #316]	; (8005748 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800560c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	2200      	movs	r2, #0
 8005614:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	2b01      	cmp	r3, #1
 800561c:	d002      	beq.n	8005624 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	025b      	lsls	r3, r3, #9
 8005622:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d90a      	bls.n	8005640 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	22a0      	movs	r2, #160	; 0xa0
 800562e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005636:	4618      	mov	r0, r3
 8005638:	f001 ff02 	bl	8007440 <SDMMC_CmdWriteMultiBlock>
 800563c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800563e:	e009      	b.n	8005654 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2290      	movs	r2, #144	; 0x90
 8005644:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800564c:	4618      	mov	r0, r3
 800564e:	f001 fed5 	bl	80073fc <SDMMC_CmdWriteSingleBlock>
 8005652:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d012      	beq.n	8005680 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a3b      	ldr	r2, [pc, #236]	; (800574c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005660:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	431a      	orrs	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e05c      	b.n	800573a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0208 	orr.w	r2, r2, #8
 800568e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005694:	2240      	movs	r2, #64	; 0x40
 8005696:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	430a      	orrs	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3380      	adds	r3, #128	; 0x80
 80056c0:	461a      	mov	r2, r3
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	025b      	lsls	r3, r3, #9
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	f7fd fa2a 	bl	8002b20 <HAL_DMA_Start_IT>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01a      	beq.n	8005708 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f022 021a 	bic.w	r2, r2, #26
 80056e0:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a19      	ldr	r2, [pc, #100]	; (800574c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80056e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e018      	b.n	800573a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800570c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	025b      	lsls	r3, r3, #9
 8005712:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005714:	2390      	movs	r3, #144	; 0x90
 8005716:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005718:	2300      	movs	r3, #0
 800571a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800571c:	2300      	movs	r3, #0
 800571e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005720:	2301      	movs	r3, #1
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f107 0210 	add.w	r2, r7, #16
 800572c:	4611      	mov	r1, r2
 800572e:	4618      	mov	r0, r3
 8005730:	f001 fdd2 	bl	80072d8 <SDMMC_ConfigData>

      return HAL_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	e000      	b.n	800573a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005738:	2302      	movs	r3, #2
  }
}
 800573a:	4618      	mov	r0, r3
 800573c:	3730      	adds	r7, #48	; 0x30
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	08005f65 	.word	0x08005f65
 8005748:	08006001 	.word	0x08006001
 800574c:	004005ff 	.word	0x004005ff

08005750 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_SD_IRQHandler+0x2e>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d003      	beq.n	800577e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 ffef 	bl	800675a <SD_Read_IT>
 800577c:	e15a      	b.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 808d 	beq.w	80058a8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005796:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	4b9a      	ldr	r3, [pc, #616]	; (8005a0c <HAL_SD_IRQHandler+0x2bc>)
 80057a4:	400b      	ands	r3, r1
 80057a6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0308 	and.w	r3, r3, #8
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d039      	beq.n	8005836 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <HAL_SD_IRQHandler+0x86>
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d011      	beq.n	80057fa <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 fe52 	bl	8007484 <SDMMC_CmdStopTransfer>
 80057e0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f921 	bl	8005a3c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f240 523a 	movw	r2, #1338	; 0x53a
 8005802:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d104      	bne.n	8005826 <HAL_SD_IRQHandler+0xd6>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d003      	beq.n	800582e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f002 fac2 	bl	8007db0 <HAL_SD_RxCpltCallback>
 800582c:	e102      	b.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f002 fab4 	bl	8007d9c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005834:	e0fe      	b.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583c:	2b00      	cmp	r3, #0
 800583e:	f000 80f9 	beq.w	8005a34 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f003 0320 	and.w	r3, r3, #32
 8005848:	2b00      	cmp	r3, #0
 800584a:	d011      	beq.n	8005870 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f001 fe17 	bl	8007484 <SDMMC_CmdStopTransfer>
 8005856:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d008      	beq.n	8005870 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f8e6 	bl	8005a3c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	2b00      	cmp	r3, #0
 8005878:	f040 80dc 	bne.w	8005a34 <HAL_SD_IRQHandler+0x2e4>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	f040 80d6 	bne.w	8005a34 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0208 	bic.w	r2, r2, #8
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f002 fa7b 	bl	8007d9c <HAL_SD_TxCpltCallback>
}
 80058a6:	e0c5      	b.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <HAL_SD_IRQHandler+0x178>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f003 0308 	and.w	r3, r3, #8
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 ff9b 	bl	80067fc <SD_Write_IT>
 80058c6:	e0b5      	b.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ce:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 80ae 	beq.w	8005a34 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	f043 0202 	orr.w	r2, r3, #2
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	f043 0208 	orr.w	r2, r3, #8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	f043 0210 	orr.w	r2, r3, #16
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f240 523a 	movw	r2, #1338	; 0x53a
 8005948:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005958:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f001 fd90 	bl	8007484 <SDMMC_CmdStopTransfer>
 8005964:	4602      	mov	r2, r0
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f003 0308 	and.w	r3, r3, #8
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00a      	beq.n	8005990 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f857 	bl	8005a3c <HAL_SD_ErrorCallback>
}
 800598e:	e051      	b.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d04c      	beq.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0310 	and.w	r3, r3, #16
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d104      	bne.n	80059ae <HAL_SD_IRQHandler+0x25e>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f003 0320 	and.w	r3, r3, #32
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d011      	beq.n	80059d2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059b2:	4a17      	ldr	r2, [pc, #92]	; (8005a10 <HAL_SD_IRQHandler+0x2c0>)
 80059b4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fd f910 	bl	8002be0 <HAL_DMA_Abort_IT>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d036      	beq.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fb6a 	bl	80060a4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80059d0:	e030      	b.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <HAL_SD_IRQHandler+0x296>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d018      	beq.n	8005a18 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	4a0a      	ldr	r2, [pc, #40]	; (8005a14 <HAL_SD_IRQHandler+0x2c4>)
 80059ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fd f8f4 	bl	8002be0 <HAL_DMA_Abort_IT>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01a      	beq.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 fb85 	bl	8006112 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005a08:	e014      	b.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
 8005a0a:	bf00      	nop
 8005a0c:	ffff3ec5 	.word	0xffff3ec5
 8005a10:	080060a5 	.word	0x080060a5
 8005a14:	08006113 	.word	0x08006113
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f002 f9ab 	bl	8007d88 <HAL_SD_AbortCallback>
}
 8005a32:	e7ff      	b.n	8005a34 <HAL_SD_IRQHandler+0x2e4>
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5e:	0f9b      	lsrs	r3, r3, #30
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a6a:	0e9b      	lsrs	r3, r3, #26
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	f003 030f 	and.w	r3, r3, #15
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7c:	0e1b      	lsrs	r3, r3, #24
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a8e:	0c1b      	lsrs	r3, r3, #16
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9a:	0a1b      	lsrs	r3, r3, #8
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ab0:	0d1b      	lsrs	r3, r3, #20
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005abc:	0c1b      	lsrs	r3, r3, #16
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ace:	0bdb      	lsrs	r3, r3, #15
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae0:	0b9b      	lsrs	r3, r3, #14
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af2:	0b5b      	lsrs	r3, r3, #13
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b04:	0b1b      	lsrs	r3, r3, #12
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2200      	movs	r2, #0
 8005b16:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d163      	bne.n	8005be8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b24:	009a      	lsls	r2, r3, #2
 8005b26:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b30:	0f92      	lsrs	r2, r2, #30
 8005b32:	431a      	orrs	r2, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b3c:	0edb      	lsrs	r3, r3, #27
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b4e:	0e1b      	lsrs	r3, r3, #24
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b60:	0d5b      	lsrs	r3, r3, #21
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	b2da      	uxtb	r2, r3
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b72:	0c9b      	lsrs	r3, r3, #18
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b84:	0bdb      	lsrs	r3, r3, #15
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	f003 0307 	and.w	r3, r3, #7
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	7e1b      	ldrb	r3, [r3, #24]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	f003 0307 	and.w	r3, r3, #7
 8005ba6:	3302      	adds	r3, #2
 8005ba8:	2201      	movs	r2, #1
 8005baa:	fa02 f303 	lsl.w	r3, r2, r3
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005bb2:	fb03 f202 	mul.w	r2, r3, r2
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	7a1b      	ldrb	r3, [r3, #8]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	409a      	lsls	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005bd4:	0a52      	lsrs	r2, r2, #9
 8005bd6:	fb03 f202 	mul.w	r2, r3, r2
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be4:	661a      	str	r2, [r3, #96]	; 0x60
 8005be6:	e031      	b.n	8005c4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d11d      	bne.n	8005c2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bf4:	041b      	lsls	r3, r3, #16
 8005bf6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bfe:	0c1b      	lsrs	r3, r3, #16
 8005c00:	431a      	orrs	r2, r3
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	029a      	lsls	r2, r3, #10
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c20:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	661a      	str	r2, [r3, #96]	; 0x60
 8005c2a:	e00f      	b.n	8005c4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a58      	ldr	r2, [pc, #352]	; (8005d94 <HAL_SD_GetCardCSD+0x344>)
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e09d      	b.n	8005d88 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c50:	0b9b      	lsrs	r3, r3, #14
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c62:	09db      	lsrs	r3, r3, #7
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c6a:	b2da      	uxtb	r2, r3
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c84:	0fdb      	lsrs	r3, r3, #31
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c90:	0f5b      	lsrs	r3, r3, #29
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca2:	0e9b      	lsrs	r3, r3, #26
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb4:	0d9b      	lsrs	r3, r3, #22
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc6:	0d5b      	lsrs	r3, r3, #21
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce2:	0c1b      	lsrs	r3, r3, #16
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf6:	0bdb      	lsrs	r3, r3, #15
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	0b9b      	lsrs	r3, r3, #14
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	0b5b      	lsrs	r3, r3, #13
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	0b1b      	lsrs	r3, r3, #12
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	0a9b      	lsrs	r3, r3, #10
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	0a1b      	lsrs	r3, r3, #8
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6e:	085b      	lsrs	r3, r3, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	004005ff 	.word	0x004005ff

08005d98 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005df0:	b5b0      	push	{r4, r5, r7, lr}
 8005df2:	b08e      	sub	sp, #56	; 0x38
 8005df4:	af04      	add	r7, sp, #16
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2203      	movs	r2, #3
 8005e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d02e      	beq.n	8005e6e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e16:	d106      	bne.n	8005e26 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	639a      	str	r2, [r3, #56]	; 0x38
 8005e24:	e029      	b.n	8005e7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e2c:	d10a      	bne.n	8005e44 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fb2a 	bl	8006488 <SD_WideBus_Enable>
 8005e34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	639a      	str	r2, [r3, #56]	; 0x38
 8005e42:	e01a      	b.n	8005e7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fb67 	bl	800651e <SD_WideBus_Disable>
 8005e50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e5e:	e00c      	b.n	8005e7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e6c:	e005      	b.n	8005e7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a26      	ldr	r2, [pc, #152]	; (8005f20 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e98:	e01f      	b.n	8005eda <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681d      	ldr	r5, [r3, #0]
 8005ec0:	466c      	mov	r4, sp
 8005ec2:	f107 0314 	add.w	r3, r7, #20
 8005ec6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005eca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ece:	f107 0308 	add.w	r3, r7, #8
 8005ed2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	f001 f94f 	bl	8007178 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fa24 	bl	8007330 <SDMMC_CmdBlockLength>
 8005ee8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d00c      	beq.n	8005f0a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a0a      	ldr	r2, [pc, #40]	; (8005f20 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3728      	adds	r7, #40	; 0x28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	004005ff 	.word	0x004005ff

08005f24 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005f30:	f107 030c 	add.w	r3, r7, #12
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa7e 	bl	8006438 <SD_SendStatus>
 8005f3c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d005      	beq.n	8005f50 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	0a5b      	lsrs	r3, r3, #9
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005f5a:	693b      	ldr	r3, [r7, #16]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f70:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f80:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005f82:	bf00      	nop
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b084      	sub	sp, #16
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa0:	2b82      	cmp	r3, #130	; 0x82
 8005fa2:	d111      	bne.n	8005fc8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f001 fa6b 	bl	8007484 <SDMMC_CmdStopTransfer>
 8005fae:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d008      	beq.n	8005fc8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f7ff fd3a 	bl	8005a3c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0208 	bic.w	r2, r2, #8
 8005fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fe0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f001 fedd 	bl	8007db0 <HAL_SD_RxCpltCallback>
#endif
}
 8005ff6:	bf00      	nop
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
	...

08006000 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fc ff92 	bl	8002f38 <HAL_DMA_GetError>
 8006014:	4603      	mov	r3, r0
 8006016:	2b02      	cmp	r3, #2
 8006018:	d03e      	beq.n	8006098 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006020:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d002      	beq.n	8006036 <SD_DMAError+0x36>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d12d      	bne.n	8006092 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a19      	ldr	r2, [pc, #100]	; (80060a0 <SD_DMAError+0xa0>)
 800603c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800604c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800605a:	6978      	ldr	r0, [r7, #20]
 800605c:	f7ff ff62 	bl	8005f24 <HAL_SD_GetCardState>
 8006060:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	2b06      	cmp	r3, #6
 8006066:	d002      	beq.n	800606e <SD_DMAError+0x6e>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b05      	cmp	r3, #5
 800606c:	d10a      	bne.n	8006084 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f001 fa06 	bl	8007484 <SDMMC_CmdStopTransfer>
 8006078:	4602      	mov	r2, r0
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	431a      	orrs	r2, r3
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	2200      	movs	r2, #0
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006092:	6978      	ldr	r0, [r7, #20]
 8006094:	f7ff fcd2 	bl	8005a3c <HAL_SD_ErrorCallback>
#endif
  }
}
 8006098:	bf00      	nop
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	004005ff 	.word	0x004005ff

080060a4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f240 523a 	movw	r2, #1338	; 0x53a
 80060ba:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff ff31 	bl	8005f24 <HAL_SD_GetCardState>
 80060c2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	2b06      	cmp	r3, #6
 80060d6:	d002      	beq.n	80060de <SD_DMATxAbort+0x3a>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b05      	cmp	r3, #5
 80060dc:	d10a      	bne.n	80060f4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f001 f9ce 	bl	8007484 <SDMMC_CmdStopTransfer>
 80060e8:	4602      	mov	r2, r0
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ee:	431a      	orrs	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d103      	bne.n	8006104 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80060fc:	68f8      	ldr	r0, [r7, #12]
 80060fe:	f001 fe43 	bl	8007d88 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006102:	e002      	b.n	800610a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff fc99 	bl	8005a3c <HAL_SD_ErrorCallback>
}
 800610a:	bf00      	nop
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f240 523a 	movw	r2, #1338	; 0x53a
 8006128:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff fefa 	bl	8005f24 <HAL_SD_GetCardState>
 8006130:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b06      	cmp	r3, #6
 8006144:	d002      	beq.n	800614c <SD_DMARxAbort+0x3a>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	2b05      	cmp	r3, #5
 800614a:	d10a      	bne.n	8006162 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4618      	mov	r0, r3
 8006152:	f001 f997 	bl	8007484 <SDMMC_CmdStopTransfer>
 8006156:	4602      	mov	r2, r0
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800615c:	431a      	orrs	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	2b00      	cmp	r3, #0
 8006168:	d103      	bne.n	8006172 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f001 fe0c 	bl	8007d88 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006170:	e002      	b.n	8006178 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff fc62 	bl	8005a3c <HAL_SD_ErrorCallback>
}
 8006178:	bf00      	nop
 800617a:	3710      	adds	r7, #16
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006180:	b5b0      	push	{r4, r5, r7, lr}
 8006182:	b094      	sub	sp, #80	; 0x50
 8006184:	af04      	add	r7, sp, #16
 8006186:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006188:	2301      	movs	r3, #1
 800618a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f001 f849 	bl	8007228 <SDMMC_GetPowerState>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d102      	bne.n	80061a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800619c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061a0:	e0b8      	b.n	8006314 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061a6:	2b03      	cmp	r3, #3
 80061a8:	d02f      	beq.n	800620a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f001 fa73 	bl	800769a <SDMMC_CmdSendCID>
 80061b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <SD_InitCard+0x40>
    {
      return errorstate;
 80061bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061be:	e0a9      	b.n	8006314 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 f873 	bl	80072b2 <SDMMC_GetResponse>
 80061cc:	4602      	mov	r2, r0
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2104      	movs	r1, #4
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 f86a 	bl	80072b2 <SDMMC_GetResponse>
 80061de:	4602      	mov	r2, r0
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	2108      	movs	r1, #8
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 f861 	bl	80072b2 <SDMMC_GetResponse>
 80061f0:	4602      	mov	r2, r0
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	210c      	movs	r1, #12
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 f858 	bl	80072b2 <SDMMC_GetResponse>
 8006202:	4602      	mov	r2, r0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800620e:	2b03      	cmp	r3, #3
 8006210:	d00d      	beq.n	800622e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f107 020e 	add.w	r2, r7, #14
 800621a:	4611      	mov	r1, r2
 800621c:	4618      	mov	r0, r3
 800621e:	f001 fa79 	bl	8007714 <SDMMC_CmdSetRelAdd>
 8006222:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <SD_InitCard+0xae>
    {
      return errorstate;
 800622a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800622c:	e072      	b.n	8006314 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006232:	2b03      	cmp	r3, #3
 8006234:	d036      	beq.n	80062a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006236:	89fb      	ldrh	r3, [r7, #14]
 8006238:	461a      	mov	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006246:	041b      	lsls	r3, r3, #16
 8006248:	4619      	mov	r1, r3
 800624a:	4610      	mov	r0, r2
 800624c:	f001 fa43 	bl	80076d6 <SDMMC_CmdSendCSD>
 8006250:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800625a:	e05b      	b.n	8006314 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f001 f825 	bl	80072b2 <SDMMC_GetResponse>
 8006268:	4602      	mov	r2, r0
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2104      	movs	r1, #4
 8006274:	4618      	mov	r0, r3
 8006276:	f001 f81c 	bl	80072b2 <SDMMC_GetResponse>
 800627a:	4602      	mov	r2, r0
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2108      	movs	r1, #8
 8006286:	4618      	mov	r0, r3
 8006288:	f001 f813 	bl	80072b2 <SDMMC_GetResponse>
 800628c:	4602      	mov	r2, r0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	210c      	movs	r1, #12
 8006298:	4618      	mov	r0, r3
 800629a:	f001 f80a 	bl	80072b2 <SDMMC_GetResponse>
 800629e:	4602      	mov	r2, r0
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2104      	movs	r1, #4
 80062aa:	4618      	mov	r0, r3
 80062ac:	f001 f801 	bl	80072b2 <SDMMC_GetResponse>
 80062b0:	4603      	mov	r3, r0
 80062b2:	0d1a      	lsrs	r2, r3, #20
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80062b8:	f107 0310 	add.w	r3, r7, #16
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fbc6 	bl	8005a50 <HAL_SD_GetCardCSD>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062ce:	e021      	b.n	8006314 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6819      	ldr	r1, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d8:	041b      	lsls	r3, r3, #16
 80062da:	2200      	movs	r2, #0
 80062dc:	461c      	mov	r4, r3
 80062de:	4615      	mov	r5, r2
 80062e0:	4622      	mov	r2, r4
 80062e2:	462b      	mov	r3, r5
 80062e4:	4608      	mov	r0, r1
 80062e6:	f001 f8ef 	bl	80074c8 <SDMMC_CmdSelDesel>
 80062ea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <SD_InitCard+0x176>
  {
    return errorstate;
 80062f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f4:	e00e      	b.n	8006314 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681d      	ldr	r5, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	466c      	mov	r4, sp
 80062fe:	f103 0210 	add.w	r2, r3, #16
 8006302:	ca07      	ldmia	r2, {r0, r1, r2}
 8006304:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006308:	3304      	adds	r3, #4
 800630a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800630c:	4628      	mov	r0, r5
 800630e:	f000 ff33 	bl	8007178 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3740      	adds	r7, #64	; 0x40
 8006318:	46bd      	mov	sp, r7
 800631a:	bdb0      	pop	{r4, r5, r7, pc}

0800631c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006324:	2300      	movs	r3, #0
 8006326:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	617b      	str	r3, [r7, #20]
 800632c:	2300      	movs	r3, #0
 800632e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f001 f8ea 	bl	800750e <SDMMC_CmdGoIdleState>
 800633a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	e072      	b.n	800642c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4618      	mov	r0, r3
 800634c:	f001 f8fd 	bl	800754a <SDMMC_CmdOperCond>
 8006350:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00d      	beq.n	8006374 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4618      	mov	r0, r3
 8006364:	f001 f8d3 	bl	800750e <SDMMC_CmdGoIdleState>
 8006368:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <SD_PowerON+0x5e>
    {
      return errorstate;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	e05b      	b.n	800642c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637e:	2b01      	cmp	r3, #1
 8006380:	d137      	bne.n	80063f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2100      	movs	r1, #0
 8006388:	4618      	mov	r0, r3
 800638a:	f001 f8fd 	bl	8007588 <SDMMC_CmdAppCommand>
 800638e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d02d      	beq.n	80063f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006396:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800639a:	e047      	b.n	800642c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 f8f0 	bl	8007588 <SDMMC_CmdAppCommand>
 80063a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <SD_PowerON+0x98>
    {
      return errorstate;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	e03b      	b.n	800642c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	491e      	ldr	r1, [pc, #120]	; (8006434 <SD_PowerON+0x118>)
 80063ba:	4618      	mov	r0, r3
 80063bc:	f001 f906 	bl	80075cc <SDMMC_CmdAppOperCommand>
 80063c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063cc:	e02e      	b.n	800642c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2100      	movs	r1, #0
 80063d4:	4618      	mov	r0, r3
 80063d6:	f000 ff6c 	bl	80072b2 <SDMMC_GetResponse>
 80063da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	0fdb      	lsrs	r3, r3, #31
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <SD_PowerON+0xcc>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <SD_PowerON+0xce>
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]

    count++;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	3301      	adds	r3, #1
 80063f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d802      	bhi.n	8006402 <SD_PowerON+0xe6>
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0cc      	beq.n	800639c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006408:	4293      	cmp	r3, r2
 800640a:	d902      	bls.n	8006412 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800640c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006410:	e00c      	b.n	800642c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	645a      	str	r2, [r3, #68]	; 0x44
 8006422:	e002      	b.n	800642a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	c1100000 	.word	0xc1100000

08006438 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d102      	bne.n	800644e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006448:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800644c:	e018      	b.n	8006480 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006456:	041b      	lsls	r3, r3, #16
 8006458:	4619      	mov	r1, r3
 800645a:	4610      	mov	r0, r2
 800645c:	f001 f97b 	bl	8007756 <SDMMC_CmdSendStatus>
 8006460:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	e009      	b.n	8006480 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2100      	movs	r1, #0
 8006472:	4618      	mov	r0, r3
 8006474:	f000 ff1d 	bl	80072b2 <SDMMC_GetResponse>
 8006478:	4602      	mov	r2, r0
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	2300      	movs	r3, #0
 8006496:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 ff07 	bl	80072b2 <SDMMC_GetResponse>
 80064a4:	4603      	mov	r3, r0
 80064a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ae:	d102      	bne.n	80064b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064b4:	e02f      	b.n	8006516 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064b6:	f107 030c 	add.w	r3, r7, #12
 80064ba:	4619      	mov	r1, r3
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f879 	bl	80065b4 <SD_FindSCR>
 80064c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	e023      	b.n	8006516 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d01c      	beq.n	8006512 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e0:	041b      	lsls	r3, r3, #16
 80064e2:	4619      	mov	r1, r3
 80064e4:	4610      	mov	r0, r2
 80064e6:	f001 f84f 	bl	8007588 <SDMMC_CmdAppCommand>
 80064ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	e00f      	b.n	8006516 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2102      	movs	r1, #2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f001 f889 	bl	8007614 <SDMMC_CmdBusWidth>
 8006502:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	e003      	b.n	8006516 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800650e:	2300      	movs	r3, #0
 8006510:	e001      	b.n	8006516 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006512:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3718      	adds	r7, #24
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b086      	sub	sp, #24
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	2300      	movs	r3, #0
 800652c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2100      	movs	r1, #0
 8006534:	4618      	mov	r0, r3
 8006536:	f000 febc 	bl	80072b2 <SDMMC_GetResponse>
 800653a:	4603      	mov	r3, r0
 800653c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006540:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006544:	d102      	bne.n	800654c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006546:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800654a:	e02f      	b.n	80065ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800654c:	f107 030c 	add.w	r3, r7, #12
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f82e 	bl	80065b4 <SD_FindSCR>
 8006558:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	e023      	b.n	80065ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d01c      	beq.n	80065a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006576:	041b      	lsls	r3, r3, #16
 8006578:	4619      	mov	r1, r3
 800657a:	4610      	mov	r0, r2
 800657c:	f001 f804 	bl	8007588 <SDMMC_CmdAppCommand>
 8006580:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	e00f      	b.n	80065ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2100      	movs	r1, #0
 8006592:	4618      	mov	r0, r3
 8006594:	f001 f83e 	bl	8007614 <SDMMC_CmdBusWidth>
 8006598:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	e003      	b.n	80065ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80065a4:	2300      	movs	r3, #0
 80065a6:	e001      	b.n	80065ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80065a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3718      	adds	r7, #24
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80065b4:	b590      	push	{r4, r7, lr}
 80065b6:	b08f      	sub	sp, #60	; 0x3c
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80065be:	f7fb fac7 	bl	8001b50 <HAL_GetTick>
 80065c2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80065c4:	2300      	movs	r3, #0
 80065c6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80065c8:	2300      	movs	r3, #0
 80065ca:	60bb      	str	r3, [r7, #8]
 80065cc:	2300      	movs	r3, #0
 80065ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2108      	movs	r1, #8
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fea8 	bl	8007330 <SDMMC_CmdBlockLength>
 80065e0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d001      	beq.n	80065ec <SD_FindSCR+0x38>
  {
    return errorstate;
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	e0b2      	b.n	8006752 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	4619      	mov	r1, r3
 80065f8:	4610      	mov	r0, r2
 80065fa:	f000 ffc5 	bl	8007588 <SDMMC_CmdAppCommand>
 80065fe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <SD_FindSCR+0x56>
  {
    return errorstate;
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	e0a3      	b.n	8006752 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800660a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800660e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006610:	2308      	movs	r3, #8
 8006612:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006614:	2330      	movs	r3, #48	; 0x30
 8006616:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006618:	2302      	movs	r3, #2
 800661a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800661c:	2300      	movs	r3, #0
 800661e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006620:	2301      	movs	r3, #1
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f107 0210 	add.w	r2, r7, #16
 800662c:	4611      	mov	r1, r2
 800662e:	4618      	mov	r0, r3
 8006630:	f000 fe52 	bl	80072d8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4618      	mov	r0, r3
 800663a:	f001 f80d 	bl	8007658 <SDMMC_CmdSendSCR>
 800663e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	2b00      	cmp	r3, #0
 8006644:	d02a      	beq.n	800669c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006648:	e083      	b.n	8006752 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00f      	beq.n	8006678 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6819      	ldr	r1, [r3, #0]
 800665c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	f107 0208 	add.w	r2, r7, #8
 8006664:	18d4      	adds	r4, r2, r3
 8006666:	4608      	mov	r0, r1
 8006668:	f000 fdb2 	bl	80071d0 <SDMMC_ReadFIFO>
 800666c:	4603      	mov	r3, r0
 800666e:	6023      	str	r3, [r4, #0]
      index++;
 8006670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006672:	3301      	adds	r3, #1
 8006674:	637b      	str	r3, [r7, #52]	; 0x34
 8006676:	e006      	b.n	8006686 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d012      	beq.n	80066ac <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006686:	f7fb fa63 	bl	8001b50 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006694:	d102      	bne.n	800669c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006696:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800669a:	e05a      	b.n	8006752 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0cf      	beq.n	800664a <SD_FindSCR+0x96>
 80066aa:	e000      	b.n	80066ae <SD_FindSCR+0xfa>
      break;
 80066ac:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2208      	movs	r2, #8
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80066c4:	2308      	movs	r3, #8
 80066c6:	e044      	b.n	8006752 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d005      	beq.n	80066e2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2202      	movs	r2, #2
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80066de:	2302      	movs	r3, #2
 80066e0:	e037      	b.n	8006752 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e8:	f003 0320 	and.w	r3, r3, #32
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2220      	movs	r2, #32
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80066f8:	2320      	movs	r3, #32
 80066fa:	e02a      	b.n	8006752 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f240 523a 	movw	r2, #1338	; 0x53a
 8006704:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	061a      	lsls	r2, r3, #24
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006712:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	0a1b      	lsrs	r3, r3, #8
 8006718:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800671c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	0e1b      	lsrs	r3, r3, #24
 8006722:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	601a      	str	r2, [r3, #0]
    scr++;
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	3304      	adds	r3, #4
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	061a      	lsls	r2, r3, #24
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800673a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006744:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	0e1b      	lsrs	r3, r3, #24
 800674a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	373c      	adds	r7, #60	; 0x3c
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}

0800675a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b086      	sub	sp, #24
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006766:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d03f      	beq.n	80067f4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	e033      	b.n	80067e2 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fd26 	bl	80071d0 <SDMMC_ReadFIFO>
 8006784:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	b2da      	uxtb	r2, r3
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3301      	adds	r3, #1
 8006792:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	3b01      	subs	r3, #1
 8006798:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	0a1b      	lsrs	r3, r3, #8
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3301      	adds	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	0c1b      	lsrs	r3, r3, #16
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3301      	adds	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	0e1b      	lsrs	r3, r3, #24
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	3b01      	subs	r3, #1
 80067da:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	3301      	adds	r3, #1
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b07      	cmp	r3, #7
 80067e6:	d9c8      	bls.n	800677a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80067f4:	bf00      	nop
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b086      	sub	sp, #24
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d043      	beq.n	800689e <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	e037      	b.n	800688c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	3301      	adds	r3, #1
 8006826:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	3b01      	subs	r3, #1
 800682c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	021a      	lsls	r2, r3, #8
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	4313      	orrs	r3, r2
 8006838:	60bb      	str	r3, [r7, #8]
      tmp++;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	3b01      	subs	r3, #1
 8006844:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	041a      	lsls	r2, r3, #16
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4313      	orrs	r3, r2
 8006850:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3301      	adds	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	3b01      	subs	r3, #1
 800685c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	061a      	lsls	r2, r3, #24
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4313      	orrs	r3, r2
 8006868:	60bb      	str	r3, [r7, #8]
      tmp++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	3b01      	subs	r3, #1
 8006874:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f107 0208 	add.w	r2, r7, #8
 800687e:	4611      	mov	r1, r2
 8006880:	4618      	mov	r0, r3
 8006882:	f000 fcb2 	bl	80071ea <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	3301      	adds	r3, #1
 800688a:	617b      	str	r3, [r7, #20]
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	2b07      	cmp	r3, #7
 8006890:	d9c4      	bls.n	800681c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800689e:	bf00      	nop
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e040      	b.n	800693a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d106      	bne.n	80068ce <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f7fb f845 	bl	8001958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2224      	movs	r2, #36	; 0x24
 80068d2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0201 	bic.w	r2, r2, #1
 80068e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f82d 	bl	8006944 <UART_SetConfig>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e022      	b.n	800693a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa85 	bl	8006e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006910:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006920:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0201 	orr.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fb0c 	bl	8006f50 <UART_CheckIdleState>
 8006938:	4603      	mov	r3, r0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3708      	adds	r7, #8
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
	...

08006944 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b088      	sub	sp, #32
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689a      	ldr	r2, [r3, #8]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	431a      	orrs	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	4ba6      	ldr	r3, [pc, #664]	; (8006c08 <UART_SetConfig+0x2c4>)
 8006970:	4013      	ands	r3, r2
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	6979      	ldr	r1, [r7, #20]
 8006978:	430b      	orrs	r3, r1
 800697a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a94      	ldr	r2, [pc, #592]	; (8006c0c <UART_SetConfig+0x2c8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d120      	bne.n	8006a02 <UART_SetConfig+0xbe>
 80069c0:	4b93      	ldr	r3, [pc, #588]	; (8006c10 <UART_SetConfig+0x2cc>)
 80069c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c6:	f003 0303 	and.w	r3, r3, #3
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d816      	bhi.n	80069fc <UART_SetConfig+0xb8>
 80069ce:	a201      	add	r2, pc, #4	; (adr r2, 80069d4 <UART_SetConfig+0x90>)
 80069d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d4:	080069e5 	.word	0x080069e5
 80069d8:	080069f1 	.word	0x080069f1
 80069dc:	080069eb 	.word	0x080069eb
 80069e0:	080069f7 	.word	0x080069f7
 80069e4:	2301      	movs	r3, #1
 80069e6:	77fb      	strb	r3, [r7, #31]
 80069e8:	e150      	b.n	8006c8c <UART_SetConfig+0x348>
 80069ea:	2302      	movs	r3, #2
 80069ec:	77fb      	strb	r3, [r7, #31]
 80069ee:	e14d      	b.n	8006c8c <UART_SetConfig+0x348>
 80069f0:	2304      	movs	r3, #4
 80069f2:	77fb      	strb	r3, [r7, #31]
 80069f4:	e14a      	b.n	8006c8c <UART_SetConfig+0x348>
 80069f6:	2308      	movs	r3, #8
 80069f8:	77fb      	strb	r3, [r7, #31]
 80069fa:	e147      	b.n	8006c8c <UART_SetConfig+0x348>
 80069fc:	2310      	movs	r3, #16
 80069fe:	77fb      	strb	r3, [r7, #31]
 8006a00:	e144      	b.n	8006c8c <UART_SetConfig+0x348>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a83      	ldr	r2, [pc, #524]	; (8006c14 <UART_SetConfig+0x2d0>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d132      	bne.n	8006a72 <UART_SetConfig+0x12e>
 8006a0c:	4b80      	ldr	r3, [pc, #512]	; (8006c10 <UART_SetConfig+0x2cc>)
 8006a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a12:	f003 030c 	and.w	r3, r3, #12
 8006a16:	2b0c      	cmp	r3, #12
 8006a18:	d828      	bhi.n	8006a6c <UART_SetConfig+0x128>
 8006a1a:	a201      	add	r2, pc, #4	; (adr r2, 8006a20 <UART_SetConfig+0xdc>)
 8006a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a20:	08006a55 	.word	0x08006a55
 8006a24:	08006a6d 	.word	0x08006a6d
 8006a28:	08006a6d 	.word	0x08006a6d
 8006a2c:	08006a6d 	.word	0x08006a6d
 8006a30:	08006a61 	.word	0x08006a61
 8006a34:	08006a6d 	.word	0x08006a6d
 8006a38:	08006a6d 	.word	0x08006a6d
 8006a3c:	08006a6d 	.word	0x08006a6d
 8006a40:	08006a5b 	.word	0x08006a5b
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	08006a6d 	.word	0x08006a6d
 8006a4c:	08006a6d 	.word	0x08006a6d
 8006a50:	08006a67 	.word	0x08006a67
 8006a54:	2300      	movs	r3, #0
 8006a56:	77fb      	strb	r3, [r7, #31]
 8006a58:	e118      	b.n	8006c8c <UART_SetConfig+0x348>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	77fb      	strb	r3, [r7, #31]
 8006a5e:	e115      	b.n	8006c8c <UART_SetConfig+0x348>
 8006a60:	2304      	movs	r3, #4
 8006a62:	77fb      	strb	r3, [r7, #31]
 8006a64:	e112      	b.n	8006c8c <UART_SetConfig+0x348>
 8006a66:	2308      	movs	r3, #8
 8006a68:	77fb      	strb	r3, [r7, #31]
 8006a6a:	e10f      	b.n	8006c8c <UART_SetConfig+0x348>
 8006a6c:	2310      	movs	r3, #16
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e10c      	b.n	8006c8c <UART_SetConfig+0x348>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a68      	ldr	r2, [pc, #416]	; (8006c18 <UART_SetConfig+0x2d4>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d120      	bne.n	8006abe <UART_SetConfig+0x17a>
 8006a7c:	4b64      	ldr	r3, [pc, #400]	; (8006c10 <UART_SetConfig+0x2cc>)
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a86:	2b30      	cmp	r3, #48	; 0x30
 8006a88:	d013      	beq.n	8006ab2 <UART_SetConfig+0x16e>
 8006a8a:	2b30      	cmp	r3, #48	; 0x30
 8006a8c:	d814      	bhi.n	8006ab8 <UART_SetConfig+0x174>
 8006a8e:	2b20      	cmp	r3, #32
 8006a90:	d009      	beq.n	8006aa6 <UART_SetConfig+0x162>
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d810      	bhi.n	8006ab8 <UART_SetConfig+0x174>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <UART_SetConfig+0x15c>
 8006a9a:	2b10      	cmp	r3, #16
 8006a9c:	d006      	beq.n	8006aac <UART_SetConfig+0x168>
 8006a9e:	e00b      	b.n	8006ab8 <UART_SetConfig+0x174>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	77fb      	strb	r3, [r7, #31]
 8006aa4:	e0f2      	b.n	8006c8c <UART_SetConfig+0x348>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	77fb      	strb	r3, [r7, #31]
 8006aaa:	e0ef      	b.n	8006c8c <UART_SetConfig+0x348>
 8006aac:	2304      	movs	r3, #4
 8006aae:	77fb      	strb	r3, [r7, #31]
 8006ab0:	e0ec      	b.n	8006c8c <UART_SetConfig+0x348>
 8006ab2:	2308      	movs	r3, #8
 8006ab4:	77fb      	strb	r3, [r7, #31]
 8006ab6:	e0e9      	b.n	8006c8c <UART_SetConfig+0x348>
 8006ab8:	2310      	movs	r3, #16
 8006aba:	77fb      	strb	r3, [r7, #31]
 8006abc:	e0e6      	b.n	8006c8c <UART_SetConfig+0x348>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a56      	ldr	r2, [pc, #344]	; (8006c1c <UART_SetConfig+0x2d8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d120      	bne.n	8006b0a <UART_SetConfig+0x1c6>
 8006ac8:	4b51      	ldr	r3, [pc, #324]	; (8006c10 <UART_SetConfig+0x2cc>)
 8006aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ace:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ad4:	d013      	beq.n	8006afe <UART_SetConfig+0x1ba>
 8006ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8006ad8:	d814      	bhi.n	8006b04 <UART_SetConfig+0x1c0>
 8006ada:	2b80      	cmp	r3, #128	; 0x80
 8006adc:	d009      	beq.n	8006af2 <UART_SetConfig+0x1ae>
 8006ade:	2b80      	cmp	r3, #128	; 0x80
 8006ae0:	d810      	bhi.n	8006b04 <UART_SetConfig+0x1c0>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <UART_SetConfig+0x1a8>
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d006      	beq.n	8006af8 <UART_SetConfig+0x1b4>
 8006aea:	e00b      	b.n	8006b04 <UART_SetConfig+0x1c0>
 8006aec:	2300      	movs	r3, #0
 8006aee:	77fb      	strb	r3, [r7, #31]
 8006af0:	e0cc      	b.n	8006c8c <UART_SetConfig+0x348>
 8006af2:	2302      	movs	r3, #2
 8006af4:	77fb      	strb	r3, [r7, #31]
 8006af6:	e0c9      	b.n	8006c8c <UART_SetConfig+0x348>
 8006af8:	2304      	movs	r3, #4
 8006afa:	77fb      	strb	r3, [r7, #31]
 8006afc:	e0c6      	b.n	8006c8c <UART_SetConfig+0x348>
 8006afe:	2308      	movs	r3, #8
 8006b00:	77fb      	strb	r3, [r7, #31]
 8006b02:	e0c3      	b.n	8006c8c <UART_SetConfig+0x348>
 8006b04:	2310      	movs	r3, #16
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e0c0      	b.n	8006c8c <UART_SetConfig+0x348>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a44      	ldr	r2, [pc, #272]	; (8006c20 <UART_SetConfig+0x2dc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d125      	bne.n	8006b60 <UART_SetConfig+0x21c>
 8006b14:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <UART_SetConfig+0x2cc>)
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b22:	d017      	beq.n	8006b54 <UART_SetConfig+0x210>
 8006b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b28:	d817      	bhi.n	8006b5a <UART_SetConfig+0x216>
 8006b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b2e:	d00b      	beq.n	8006b48 <UART_SetConfig+0x204>
 8006b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b34:	d811      	bhi.n	8006b5a <UART_SetConfig+0x216>
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <UART_SetConfig+0x1fe>
 8006b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3e:	d006      	beq.n	8006b4e <UART_SetConfig+0x20a>
 8006b40:	e00b      	b.n	8006b5a <UART_SetConfig+0x216>
 8006b42:	2300      	movs	r3, #0
 8006b44:	77fb      	strb	r3, [r7, #31]
 8006b46:	e0a1      	b.n	8006c8c <UART_SetConfig+0x348>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	77fb      	strb	r3, [r7, #31]
 8006b4c:	e09e      	b.n	8006c8c <UART_SetConfig+0x348>
 8006b4e:	2304      	movs	r3, #4
 8006b50:	77fb      	strb	r3, [r7, #31]
 8006b52:	e09b      	b.n	8006c8c <UART_SetConfig+0x348>
 8006b54:	2308      	movs	r3, #8
 8006b56:	77fb      	strb	r3, [r7, #31]
 8006b58:	e098      	b.n	8006c8c <UART_SetConfig+0x348>
 8006b5a:	2310      	movs	r3, #16
 8006b5c:	77fb      	strb	r3, [r7, #31]
 8006b5e:	e095      	b.n	8006c8c <UART_SetConfig+0x348>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a2f      	ldr	r2, [pc, #188]	; (8006c24 <UART_SetConfig+0x2e0>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d125      	bne.n	8006bb6 <UART_SetConfig+0x272>
 8006b6a:	4b29      	ldr	r3, [pc, #164]	; (8006c10 <UART_SetConfig+0x2cc>)
 8006b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b78:	d017      	beq.n	8006baa <UART_SetConfig+0x266>
 8006b7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b7e:	d817      	bhi.n	8006bb0 <UART_SetConfig+0x26c>
 8006b80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b84:	d00b      	beq.n	8006b9e <UART_SetConfig+0x25a>
 8006b86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b8a:	d811      	bhi.n	8006bb0 <UART_SetConfig+0x26c>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <UART_SetConfig+0x254>
 8006b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b94:	d006      	beq.n	8006ba4 <UART_SetConfig+0x260>
 8006b96:	e00b      	b.n	8006bb0 <UART_SetConfig+0x26c>
 8006b98:	2301      	movs	r3, #1
 8006b9a:	77fb      	strb	r3, [r7, #31]
 8006b9c:	e076      	b.n	8006c8c <UART_SetConfig+0x348>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	77fb      	strb	r3, [r7, #31]
 8006ba2:	e073      	b.n	8006c8c <UART_SetConfig+0x348>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	77fb      	strb	r3, [r7, #31]
 8006ba8:	e070      	b.n	8006c8c <UART_SetConfig+0x348>
 8006baa:	2308      	movs	r3, #8
 8006bac:	77fb      	strb	r3, [r7, #31]
 8006bae:	e06d      	b.n	8006c8c <UART_SetConfig+0x348>
 8006bb0:	2310      	movs	r3, #16
 8006bb2:	77fb      	strb	r3, [r7, #31]
 8006bb4:	e06a      	b.n	8006c8c <UART_SetConfig+0x348>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a1b      	ldr	r2, [pc, #108]	; (8006c28 <UART_SetConfig+0x2e4>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d138      	bne.n	8006c32 <UART_SetConfig+0x2ee>
 8006bc0:	4b13      	ldr	r3, [pc, #76]	; (8006c10 <UART_SetConfig+0x2cc>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006bca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bce:	d017      	beq.n	8006c00 <UART_SetConfig+0x2bc>
 8006bd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bd4:	d82a      	bhi.n	8006c2c <UART_SetConfig+0x2e8>
 8006bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bda:	d00b      	beq.n	8006bf4 <UART_SetConfig+0x2b0>
 8006bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006be0:	d824      	bhi.n	8006c2c <UART_SetConfig+0x2e8>
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <UART_SetConfig+0x2aa>
 8006be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bea:	d006      	beq.n	8006bfa <UART_SetConfig+0x2b6>
 8006bec:	e01e      	b.n	8006c2c <UART_SetConfig+0x2e8>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	77fb      	strb	r3, [r7, #31]
 8006bf2:	e04b      	b.n	8006c8c <UART_SetConfig+0x348>
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e048      	b.n	8006c8c <UART_SetConfig+0x348>
 8006bfa:	2304      	movs	r3, #4
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e045      	b.n	8006c8c <UART_SetConfig+0x348>
 8006c00:	2308      	movs	r3, #8
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e042      	b.n	8006c8c <UART_SetConfig+0x348>
 8006c06:	bf00      	nop
 8006c08:	efff69f3 	.word	0xefff69f3
 8006c0c:	40011000 	.word	0x40011000
 8006c10:	40023800 	.word	0x40023800
 8006c14:	40004400 	.word	0x40004400
 8006c18:	40004800 	.word	0x40004800
 8006c1c:	40004c00 	.word	0x40004c00
 8006c20:	40005000 	.word	0x40005000
 8006c24:	40011400 	.word	0x40011400
 8006c28:	40007800 	.word	0x40007800
 8006c2c:	2310      	movs	r3, #16
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e02c      	b.n	8006c8c <UART_SetConfig+0x348>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a72      	ldr	r2, [pc, #456]	; (8006e00 <UART_SetConfig+0x4bc>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d125      	bne.n	8006c88 <UART_SetConfig+0x344>
 8006c3c:	4b71      	ldr	r3, [pc, #452]	; (8006e04 <UART_SetConfig+0x4c0>)
 8006c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c4a:	d017      	beq.n	8006c7c <UART_SetConfig+0x338>
 8006c4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c50:	d817      	bhi.n	8006c82 <UART_SetConfig+0x33e>
 8006c52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c56:	d00b      	beq.n	8006c70 <UART_SetConfig+0x32c>
 8006c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c5c:	d811      	bhi.n	8006c82 <UART_SetConfig+0x33e>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <UART_SetConfig+0x326>
 8006c62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c66:	d006      	beq.n	8006c76 <UART_SetConfig+0x332>
 8006c68:	e00b      	b.n	8006c82 <UART_SetConfig+0x33e>
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	77fb      	strb	r3, [r7, #31]
 8006c6e:	e00d      	b.n	8006c8c <UART_SetConfig+0x348>
 8006c70:	2302      	movs	r3, #2
 8006c72:	77fb      	strb	r3, [r7, #31]
 8006c74:	e00a      	b.n	8006c8c <UART_SetConfig+0x348>
 8006c76:	2304      	movs	r3, #4
 8006c78:	77fb      	strb	r3, [r7, #31]
 8006c7a:	e007      	b.n	8006c8c <UART_SetConfig+0x348>
 8006c7c:	2308      	movs	r3, #8
 8006c7e:	77fb      	strb	r3, [r7, #31]
 8006c80:	e004      	b.n	8006c8c <UART_SetConfig+0x348>
 8006c82:	2310      	movs	r3, #16
 8006c84:	77fb      	strb	r3, [r7, #31]
 8006c86:	e001      	b.n	8006c8c <UART_SetConfig+0x348>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c94:	d15b      	bne.n	8006d4e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006c96:	7ffb      	ldrb	r3, [r7, #31]
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d828      	bhi.n	8006cee <UART_SetConfig+0x3aa>
 8006c9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ca4 <UART_SetConfig+0x360>)
 8006c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ca2:	bf00      	nop
 8006ca4:	08006cc9 	.word	0x08006cc9
 8006ca8:	08006cd1 	.word	0x08006cd1
 8006cac:	08006cd9 	.word	0x08006cd9
 8006cb0:	08006cef 	.word	0x08006cef
 8006cb4:	08006cdf 	.word	0x08006cdf
 8006cb8:	08006cef 	.word	0x08006cef
 8006cbc:	08006cef 	.word	0x08006cef
 8006cc0:	08006cef 	.word	0x08006cef
 8006cc4:	08006ce7 	.word	0x08006ce7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cc8:	f7fd f8d4 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8006ccc:	61b8      	str	r0, [r7, #24]
        break;
 8006cce:	e013      	b.n	8006cf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cd0:	f7fd f8e4 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 8006cd4:	61b8      	str	r0, [r7, #24]
        break;
 8006cd6:	e00f      	b.n	8006cf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cd8:	4b4b      	ldr	r3, [pc, #300]	; (8006e08 <UART_SetConfig+0x4c4>)
 8006cda:	61bb      	str	r3, [r7, #24]
        break;
 8006cdc:	e00c      	b.n	8006cf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cde:	f7fc fff7 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8006ce2:	61b8      	str	r0, [r7, #24]
        break;
 8006ce4:	e008      	b.n	8006cf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cea:	61bb      	str	r3, [r7, #24]
        break;
 8006cec:	e004      	b.n	8006cf8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	77bb      	strb	r3, [r7, #30]
        break;
 8006cf6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d074      	beq.n	8006de8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	005a      	lsls	r2, r3, #1
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	085b      	lsrs	r3, r3, #1
 8006d08:	441a      	add	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2b0f      	cmp	r3, #15
 8006d18:	d916      	bls.n	8006d48 <UART_SetConfig+0x404>
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d20:	d212      	bcs.n	8006d48 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	f023 030f 	bic.w	r3, r3, #15
 8006d2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	89fb      	ldrh	r3, [r7, #14]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	89fa      	ldrh	r2, [r7, #14]
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	e04f      	b.n	8006de8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	77bb      	strb	r3, [r7, #30]
 8006d4c:	e04c      	b.n	8006de8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d4e:	7ffb      	ldrb	r3, [r7, #31]
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d828      	bhi.n	8006da6 <UART_SetConfig+0x462>
 8006d54:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <UART_SetConfig+0x418>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d81 	.word	0x08006d81
 8006d60:	08006d89 	.word	0x08006d89
 8006d64:	08006d91 	.word	0x08006d91
 8006d68:	08006da7 	.word	0x08006da7
 8006d6c:	08006d97 	.word	0x08006d97
 8006d70:	08006da7 	.word	0x08006da7
 8006d74:	08006da7 	.word	0x08006da7
 8006d78:	08006da7 	.word	0x08006da7
 8006d7c:	08006d9f 	.word	0x08006d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d80:	f7fd f878 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 8006d84:	61b8      	str	r0, [r7, #24]
        break;
 8006d86:	e013      	b.n	8006db0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d88:	f7fd f888 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 8006d8c:	61b8      	str	r0, [r7, #24]
        break;
 8006d8e:	e00f      	b.n	8006db0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d90:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <UART_SetConfig+0x4c4>)
 8006d92:	61bb      	str	r3, [r7, #24]
        break;
 8006d94:	e00c      	b.n	8006db0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d96:	f7fc ff9b 	bl	8003cd0 <HAL_RCC_GetSysClockFreq>
 8006d9a:	61b8      	str	r0, [r7, #24]
        break;
 8006d9c:	e008      	b.n	8006db0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006da2:	61bb      	str	r3, [r7, #24]
        break;
 8006da4:	e004      	b.n	8006db0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	77bb      	strb	r3, [r7, #30]
        break;
 8006dae:	bf00      	nop
    }

    if (pclk != 0U)
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d018      	beq.n	8006de8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	085a      	lsrs	r2, r3, #1
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	441a      	add	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	2b0f      	cmp	r3, #15
 8006dce:	d909      	bls.n	8006de4 <UART_SetConfig+0x4a0>
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dd6:	d205      	bcs.n	8006de4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	60da      	str	r2, [r3, #12]
 8006de2:	e001      	b.n	8006de8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006df4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3720      	adds	r7, #32
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	40007c00 	.word	0x40007c00
 8006e04:	40023800 	.word	0x40023800
 8006e08:	00f42400 	.word	0x00f42400

08006e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	f003 0301 	and.w	r3, r3, #1
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00a      	beq.n	8006e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	430a      	orrs	r2, r1
 8006e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	430a      	orrs	r2, r1
 8006e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00a      	beq.n	8006e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e7e:	f003 0308 	and.w	r3, r3, #8
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d00a      	beq.n	8006e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d00a      	beq.n	8006ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00a      	beq.n	8006ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01a      	beq.n	8006f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f0a:	d10a      	bne.n	8006f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d00a      	beq.n	8006f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	605a      	str	r2, [r3, #4]
  }
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f60:	f7fa fdf6 	bl	8001b50 <HAL_GetTick>
 8006f64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d10e      	bne.n	8006f92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f831 	bl	8006fea <UART_WaitOnFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e027      	b.n	8006fe2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d10e      	bne.n	8006fbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fa0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f81b 	bl	8006fea <UART_WaitOnFlagUntilTimeout>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e011      	b.n	8006fe2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b09c      	sub	sp, #112	; 0x70
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	60b9      	str	r1, [r7, #8]
 8006ff4:	603b      	str	r3, [r7, #0]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffa:	e0a7      	b.n	800714c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ffc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ffe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007002:	f000 80a3 	beq.w	800714c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007006:	f7fa fda3 	bl	8001b50 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007012:	429a      	cmp	r2, r3
 8007014:	d302      	bcc.n	800701c <UART_WaitOnFlagUntilTimeout+0x32>
 8007016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007018:	2b00      	cmp	r3, #0
 800701a:	d13f      	bne.n	800709c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007024:	e853 3f00 	ldrex	r3, [r3]
 8007028:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800702a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007030:	667b      	str	r3, [r7, #100]	; 0x64
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	461a      	mov	r2, r3
 8007038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800703a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800703c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007040:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007042:	e841 2300 	strex	r3, r2, [r1]
 8007046:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800704a:	2b00      	cmp	r3, #0
 800704c:	d1e6      	bne.n	800701c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	3308      	adds	r3, #8
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007060:	f023 0301 	bic.w	r3, r3, #1
 8007064:	663b      	str	r3, [r7, #96]	; 0x60
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3308      	adds	r3, #8
 800706c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800706e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007070:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007074:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800707c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e5      	bne.n	800704e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2220      	movs	r2, #32
 8007086:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2220      	movs	r2, #32
 800708c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e068      	b.n	800716e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d050      	beq.n	800714c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b8:	d148      	bne.n	800714c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070c2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	e853 3f00 	ldrex	r3, [r3]
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e2:	637b      	str	r3, [r7, #52]	; 0x34
 80070e4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070ea:	e841 2300 	strex	r3, r2, [r1]
 80070ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1e6      	bne.n	80070c4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3308      	adds	r3, #8
 80070fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	e853 3f00 	ldrex	r3, [r3]
 8007104:	613b      	str	r3, [r7, #16]
   return(result);
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	f023 0301 	bic.w	r3, r3, #1
 800710c:	66bb      	str	r3, [r7, #104]	; 0x68
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	3308      	adds	r3, #8
 8007114:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007116:	623a      	str	r2, [r7, #32]
 8007118:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	69f9      	ldr	r1, [r7, #28]
 800711c:	6a3a      	ldr	r2, [r7, #32]
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	61bb      	str	r3, [r7, #24]
   return(result);
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e5      	bne.n	80070f6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2220      	movs	r2, #32
 8007134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007148:	2303      	movs	r3, #3
 800714a:	e010      	b.n	800716e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69da      	ldr	r2, [r3, #28]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	4013      	ands	r3, r2
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	429a      	cmp	r2, r3
 800715a:	bf0c      	ite	eq
 800715c:	2301      	moveq	r3, #1
 800715e:	2300      	movne	r3, #0
 8007160:	b2db      	uxtb	r3, r3
 8007162:	461a      	mov	r2, r3
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	429a      	cmp	r2, r3
 8007168:	f43f af48 	beq.w	8006ffc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3770      	adds	r7, #112	; 0x70
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007178:	b084      	sub	sp, #16
 800717a:	b480      	push	{r7}
 800717c:	b085      	sub	sp, #20
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	f107 001c 	add.w	r0, r7, #28
 8007186:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800718e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007190:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007192:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007196:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007198:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800719a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800719c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800719e:	431a      	orrs	r2, r3
             Init.ClockDiv
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80071a2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	4b07      	ldr	r3, [pc, #28]	; (80071cc <SDMMC_Init+0x54>)
 80071b0:	4013      	ands	r3, r2
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	431a      	orrs	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	b004      	add	sp, #16
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	ffff8100 	.word	0xffff8100

080071d0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80071de:	4618      	mov	r0, r3
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2203      	movs	r2, #3
 8007218:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0303 	and.w	r3, r3, #3
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007262:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007268:	431a      	orrs	r2, r3
                       Command->CPSM);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800726e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007270:	68fa      	ldr	r2, [r7, #12]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	4b06      	ldr	r3, [pc, #24]	; (8007294 <SDMMC_SendCommand+0x50>)
 800727c:	4013      	ands	r3, r2
 800727e:	68fa      	ldr	r2, [r7, #12]
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3714      	adds	r7, #20
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr
 8007294:	fffff000 	.word	0xfffff000

08007298 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	691b      	ldr	r3, [r3, #16]
 80072a4:	b2db      	uxtb	r3, r3
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3314      	adds	r3, #20
 80072c0:	461a      	mov	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	4413      	add	r3, r2
 80072c6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
}  
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80072e2:	2300      	movs	r3, #0
 80072e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80072fe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007304:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800730a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007322:	2300      	movs	r3, #0

}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800733e:	2310      	movs	r3, #16
 8007340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007342:	2340      	movs	r3, #64	; 0x40
 8007344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800734a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007350:	f107 0308 	add.w	r3, r7, #8
 8007354:	4619      	mov	r1, r3
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f7ff ff74 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800735c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007360:	2110      	movs	r1, #16
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa1a 	bl	800779c <SDMMC_GetCmdResp1>
 8007368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800736a:	69fb      	ldr	r3, [r7, #28]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3720      	adds	r7, #32
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b088      	sub	sp, #32
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007382:	2311      	movs	r3, #17
 8007384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007386:	2340      	movs	r3, #64	; 0x40
 8007388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800738e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007394:	f107 0308 	add.w	r3, r7, #8
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff ff52 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80073a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a4:	2111      	movs	r1, #17
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f9f8 	bl	800779c <SDMMC_GetCmdResp1>
 80073ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073ae:	69fb      	ldr	r3, [r7, #28]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3720      	adds	r7, #32
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80073c6:	2312      	movs	r3, #18
 80073c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073ca:	2340      	movs	r3, #64	; 0x40
 80073cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073d8:	f107 0308 	add.w	r3, r7, #8
 80073dc:	4619      	mov	r1, r3
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff ff30 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80073e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e8:	2112      	movs	r1, #18
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f9d6 	bl	800779c <SDMMC_GetCmdResp1>
 80073f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073f2:	69fb      	ldr	r3, [r7, #28]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3720      	adds	r7, #32
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b088      	sub	sp, #32
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800740a:	2318      	movs	r3, #24
 800740c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800740e:	2340      	movs	r3, #64	; 0x40
 8007410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800741a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800741c:	f107 0308 	add.w	r3, r7, #8
 8007420:	4619      	mov	r1, r3
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff ff0e 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007428:	f241 3288 	movw	r2, #5000	; 0x1388
 800742c:	2118      	movs	r1, #24
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9b4 	bl	800779c <SDMMC_GetCmdResp1>
 8007434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007436:	69fb      	ldr	r3, [r7, #28]
}
 8007438:	4618      	mov	r0, r3
 800743a:	3720      	adds	r7, #32
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800744e:	2319      	movs	r3, #25
 8007450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007452:	2340      	movs	r3, #64	; 0x40
 8007454:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800745a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800745e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007460:	f107 0308 	add.w	r3, r7, #8
 8007464:	4619      	mov	r1, r3
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7ff feec 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800746c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007470:	2119      	movs	r1, #25
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f992 	bl	800779c <SDMMC_GetCmdResp1>
 8007478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800747a:	69fb      	ldr	r3, [r7, #28]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3720      	adds	r7, #32
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007490:	230c      	movs	r3, #12
 8007492:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007494:	2340      	movs	r3, #64	; 0x40
 8007496:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007498:	2300      	movs	r3, #0
 800749a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800749c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074a2:	f107 0308 	add.w	r3, r7, #8
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff fecb 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80074ae:	4a05      	ldr	r2, [pc, #20]	; (80074c4 <SDMMC_CmdStopTransfer+0x40>)
 80074b0:	210c      	movs	r1, #12
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f972 	bl	800779c <SDMMC_GetCmdResp1>
 80074b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074ba:	69fb      	ldr	r3, [r7, #28]
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3720      	adds	r7, #32
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	05f5e100 	.word	0x05f5e100

080074c8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	; 0x28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80074d8:	2307      	movs	r3, #7
 80074da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074dc:	2340      	movs	r3, #64	; 0x40
 80074de:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074e0:	2300      	movs	r3, #0
 80074e2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074e8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074ea:	f107 0310 	add.w	r3, r7, #16
 80074ee:	4619      	mov	r1, r3
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7ff fea7 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80074f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074fa:	2107      	movs	r1, #7
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f94d 	bl	800779c <SDMMC_GetCmdResp1>
 8007502:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007506:	4618      	mov	r0, r3
 8007508:	3728      	adds	r7, #40	; 0x28
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b088      	sub	sp, #32
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007522:	2300      	movs	r3, #0
 8007524:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800752a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800752c:	f107 0308 	add.w	r3, r7, #8
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7ff fe86 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fb67 	bl	8007c0c <SDMMC_GetCmdError>
 800753e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007540:	69fb      	ldr	r3, [r7, #28]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3720      	adds	r7, #32
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b088      	sub	sp, #32
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007552:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007556:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007558:	2308      	movs	r3, #8
 800755a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800755c:	2340      	movs	r3, #64	; 0x40
 800755e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007568:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800756a:	f107 0308 	add.w	r3, r7, #8
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff fe67 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fafa 	bl	8007b70 <SDMMC_GetCmdResp7>
 800757c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800757e:	69fb      	ldr	r3, [r7, #28]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3720      	adds	r7, #32
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b088      	sub	sp, #32
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007596:	2337      	movs	r3, #55	; 0x37
 8007598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800759a:	2340      	movs	r3, #64	; 0x40
 800759c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075a8:	f107 0308 	add.w	r3, r7, #8
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7ff fe48 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80075b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075b8:	2137      	movs	r1, #55	; 0x37
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f8ee 	bl	800779c <SDMMC_GetCmdResp1>
 80075c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075c2:	69fb      	ldr	r3, [r7, #28]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <SDMMC_CmdAppOperCommand+0x44>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80075de:	2329      	movs	r3, #41	; 0x29
 80075e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075e2:	2340      	movs	r3, #64	; 0x40
 80075e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075e6:	2300      	movs	r3, #0
 80075e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075f0:	f107 0308 	add.w	r3, r7, #8
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff fe24 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fa03 	bl	8007a08 <SDMMC_GetCmdResp3>
 8007602:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007604:	69fb      	ldr	r3, [r7, #28]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3720      	adds	r7, #32
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	80100000 	.word	0x80100000

08007614 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007622:	2306      	movs	r3, #6
 8007624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007626:	2340      	movs	r3, #64	; 0x40
 8007628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800762e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007632:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007634:	f107 0308 	add.w	r3, r7, #8
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff fe02 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007640:	f241 3288 	movw	r2, #5000	; 0x1388
 8007644:	2106      	movs	r1, #6
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f8a8 	bl	800779c <SDMMC_GetCmdResp1>
 800764c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800764e:	69fb      	ldr	r3, [r7, #28]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b088      	sub	sp, #32
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007660:	2300      	movs	r3, #0
 8007662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007664:	2333      	movs	r3, #51	; 0x33
 8007666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007668:	2340      	movs	r3, #64	; 0x40
 800766a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800766c:	2300      	movs	r3, #0
 800766e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007674:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007676:	f107 0308 	add.w	r3, r7, #8
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fde1 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007682:	f241 3288 	movw	r2, #5000	; 0x1388
 8007686:	2133      	movs	r1, #51	; 0x33
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f887 	bl	800779c <SDMMC_GetCmdResp1>
 800768e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007690:	69fb      	ldr	r3, [r7, #28]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3720      	adds	r7, #32
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b088      	sub	sp, #32
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80076a6:	2302      	movs	r3, #2
 80076a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80076aa:	23c0      	movs	r3, #192	; 0xc0
 80076ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076ae:	2300      	movs	r3, #0
 80076b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076b8:	f107 0308 	add.w	r3, r7, #8
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff fdc0 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f957 	bl	8007978 <SDMMC_GetCmdResp2>
 80076ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076cc:	69fb      	ldr	r3, [r7, #28]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3720      	adds	r7, #32
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}

080076d6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b088      	sub	sp, #32
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80076e4:	2309      	movs	r3, #9
 80076e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80076e8:	23c0      	movs	r3, #192	; 0xc0
 80076ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076f6:	f107 0308 	add.w	r3, r7, #8
 80076fa:	4619      	mov	r1, r3
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff fda1 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 f938 	bl	8007978 <SDMMC_GetCmdResp2>
 8007708:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800770a:	69fb      	ldr	r3, [r7, #28]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3720      	adds	r7, #32
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800771e:	2300      	movs	r3, #0
 8007720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007722:	2303      	movs	r3, #3
 8007724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007726:	2340      	movs	r3, #64	; 0x40
 8007728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800772a:	2300      	movs	r3, #0
 800772c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800772e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007732:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007734:	f107 0308 	add.w	r3, r7, #8
 8007738:	4619      	mov	r1, r3
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fd82 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	2103      	movs	r1, #3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f99d 	bl	8007a84 <SDMMC_GetCmdResp6>
 800774a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800774c:	69fb      	ldr	r3, [r7, #28]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3720      	adds	r7, #32
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b088      	sub	sp, #32
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007764:	230d      	movs	r3, #13
 8007766:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007768:	2340      	movs	r3, #64	; 0x40
 800776a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800776c:	2300      	movs	r3, #0
 800776e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007774:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007776:	f107 0308 	add.w	r3, r7, #8
 800777a:	4619      	mov	r1, r3
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7ff fd61 	bl	8007244 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007782:	f241 3288 	movw	r2, #5000	; 0x1388
 8007786:	210d      	movs	r1, #13
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f807 	bl	800779c <SDMMC_GetCmdResp1>
 800778e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007790:	69fb      	ldr	r3, [r7, #28]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
	...

0800779c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b088      	sub	sp, #32
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	460b      	mov	r3, r1
 80077a6:	607a      	str	r2, [r7, #4]
 80077a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80077aa:	4b70      	ldr	r3, [pc, #448]	; (800796c <SDMMC_GetCmdResp1+0x1d0>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a70      	ldr	r2, [pc, #448]	; (8007970 <SDMMC_GetCmdResp1+0x1d4>)
 80077b0:	fba2 2303 	umull	r2, r3, r2, r3
 80077b4:	0a5a      	lsrs	r2, r3, #9
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	fb02 f303 	mul.w	r3, r2, r3
 80077bc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	1e5a      	subs	r2, r3, #1
 80077c2:	61fa      	str	r2, [r7, #28]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d102      	bne.n	80077ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077cc:	e0c9      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077d2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0ef      	beq.n	80077be <SDMMC_GetCmdResp1+0x22>
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1ea      	bne.n	80077be <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d004      	beq.n	80077fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2204      	movs	r2, #4
 80077f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80077fa:	2304      	movs	r3, #4
 80077fc:	e0b1      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d004      	beq.n	8007814 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2201      	movs	r2, #1
 800780e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007810:	2301      	movs	r3, #1
 8007812:	e0a6      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	22c5      	movs	r2, #197	; 0xc5
 8007818:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f7ff fd3c 	bl	8007298 <SDMMC_GetCommandResponse>
 8007820:	4603      	mov	r3, r0
 8007822:	461a      	mov	r2, r3
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	4293      	cmp	r3, r2
 8007828:	d001      	beq.n	800782e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800782a:	2301      	movs	r3, #1
 800782c:	e099      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800782e:	2100      	movs	r1, #0
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7ff fd3e 	bl	80072b2 <SDMMC_GetResponse>
 8007836:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	4b4e      	ldr	r3, [pc, #312]	; (8007974 <SDMMC_GetCmdResp1+0x1d8>)
 800783c:	4013      	ands	r3, r2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007842:	2300      	movs	r3, #0
 8007844:	e08d      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	da02      	bge.n	8007852 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800784c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007850:	e087      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d001      	beq.n	8007860 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800785c:	2340      	movs	r3, #64	; 0x40
 800785e:	e080      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800786a:	2380      	movs	r3, #128	; 0x80
 800786c:	e079      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800787c:	e071      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800788c:	e069      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007894:	2b00      	cmp	r3, #0
 8007896:	d002      	beq.n	800789e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800789c:	e061      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80078a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078ac:	e059      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80078b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078bc:	e051      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80078c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078cc:	e049      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80078d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80078dc:	e041      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80078e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078ec:	e039      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80078f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80078fc:	e031      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007908:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800790c:	e029      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d002      	beq.n	800791e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007918:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800791c:	e021      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007928:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800792c:	e019      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007938:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800793c:	e011      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007948:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800794c:	e009      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f003 0308 	and.w	r3, r3, #8
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007958:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800795c:	e001      	b.n	8007962 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800795e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007962:	4618      	mov	r0, r3
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20000000 	.word	0x20000000
 8007970:	10624dd3 	.word	0x10624dd3
 8007974:	fdffe008 	.word	0xfdffe008

08007978 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007980:	4b1f      	ldr	r3, [pc, #124]	; (8007a00 <SDMMC_GetCmdResp2+0x88>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a1f      	ldr	r2, [pc, #124]	; (8007a04 <SDMMC_GetCmdResp2+0x8c>)
 8007986:	fba2 2303 	umull	r2, r3, r2, r3
 800798a:	0a5b      	lsrs	r3, r3, #9
 800798c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007990:	fb02 f303 	mul.w	r3, r2, r3
 8007994:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	1e5a      	subs	r2, r3, #1
 800799a:	60fa      	str	r2, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079a4:	e026      	b.n	80079f4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d0ef      	beq.n	8007996 <SDMMC_GetCmdResp2+0x1e>
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d1ea      	bne.n	8007996 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d004      	beq.n	80079d6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2204      	movs	r2, #4
 80079d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079d2:	2304      	movs	r3, #4
 80079d4:	e00e      	b.n	80079f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079da:	f003 0301 	and.w	r3, r3, #1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d004      	beq.n	80079ec <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e003      	b.n	80079f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	22c5      	movs	r2, #197	; 0xc5
 80079f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3714      	adds	r7, #20
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	20000000 	.word	0x20000000
 8007a04:	10624dd3 	.word	0x10624dd3

08007a08 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a10:	4b1a      	ldr	r3, [pc, #104]	; (8007a7c <SDMMC_GetCmdResp3+0x74>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a1a      	ldr	r2, [pc, #104]	; (8007a80 <SDMMC_GetCmdResp3+0x78>)
 8007a16:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1a:	0a5b      	lsrs	r3, r3, #9
 8007a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a20:	fb02 f303 	mul.w	r3, r2, r3
 8007a24:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	1e5a      	subs	r2, r3, #1
 8007a2a:	60fa      	str	r2, [r7, #12]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a30:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a34:	e01b      	b.n	8007a6e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d0ef      	beq.n	8007a26 <SDMMC_GetCmdResp3+0x1e>
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1ea      	bne.n	8007a26 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a54:	f003 0304 	and.w	r3, r3, #4
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d004      	beq.n	8007a66 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2204      	movs	r2, #4
 8007a60:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a62:	2304      	movs	r3, #4
 8007a64:	e003      	b.n	8007a6e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	22c5      	movs	r2, #197	; 0xc5
 8007a6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	20000000 	.word	0x20000000
 8007a80:	10624dd3 	.word	0x10624dd3

08007a84 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a92:	4b35      	ldr	r3, [pc, #212]	; (8007b68 <SDMMC_GetCmdResp6+0xe4>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a35      	ldr	r2, [pc, #212]	; (8007b6c <SDMMC_GetCmdResp6+0xe8>)
 8007a98:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9c:	0a5b      	lsrs	r3, r3, #9
 8007a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	1e5a      	subs	r2, r3, #1
 8007aac:	61fa      	str	r2, [r7, #28]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d102      	bne.n	8007ab8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ab2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ab6:	e052      	b.n	8007b5e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007abc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d0ef      	beq.n	8007aa8 <SDMMC_GetCmdResp6+0x24>
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1ea      	bne.n	8007aa8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d004      	beq.n	8007ae8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2204      	movs	r2, #4
 8007ae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	e03a      	b.n	8007b5e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aec:	f003 0301 	and.w	r3, r3, #1
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d004      	beq.n	8007afe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2201      	movs	r2, #1
 8007af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e02f      	b.n	8007b5e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7ff fbca 	bl	8007298 <SDMMC_GetCommandResponse>
 8007b04:	4603      	mov	r3, r0
 8007b06:	461a      	mov	r2, r3
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d001      	beq.n	8007b12 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e025      	b.n	8007b5e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	22c5      	movs	r2, #197	; 0xc5
 8007b16:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007b18:	2100      	movs	r1, #0
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f7ff fbc9 	bl	80072b2 <SDMMC_GetResponse>
 8007b20:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d106      	bne.n	8007b3a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	0c1b      	lsrs	r3, r3, #16
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	e011      	b.n	8007b5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d002      	beq.n	8007b4a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b48:	e009      	b.n	8007b5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b58:	e001      	b.n	8007b5e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	20000000 	.word	0x20000000
 8007b6c:	10624dd3 	.word	0x10624dd3

08007b70 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b78:	4b22      	ldr	r3, [pc, #136]	; (8007c04 <SDMMC_GetCmdResp7+0x94>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a22      	ldr	r2, [pc, #136]	; (8007c08 <SDMMC_GetCmdResp7+0x98>)
 8007b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b82:	0a5b      	lsrs	r3, r3, #9
 8007b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
 8007b8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1e5a      	subs	r2, r3, #1
 8007b92:	60fa      	str	r2, [r7, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d102      	bne.n	8007b9e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b9c:	e02c      	b.n	8007bf8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d0ef      	beq.n	8007b8e <SDMMC_GetCmdResp7+0x1e>
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1ea      	bne.n	8007b8e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bbc:	f003 0304 	and.w	r3, r3, #4
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2204      	movs	r2, #4
 8007bc8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bca:	2304      	movs	r3, #4
 8007bcc:	e014      	b.n	8007bf8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d004      	beq.n	8007be4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e009      	b.n	8007bf8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2240      	movs	r2, #64	; 0x40
 8007bf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007bf6:	2300      	movs	r3, #0
  
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3714      	adds	r7, #20
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	20000000 	.word	0x20000000
 8007c08:	10624dd3 	.word	0x10624dd3

08007c0c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c14:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <SDMMC_GetCmdError+0x50>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <SDMMC_GetCmdError+0x54>)
 8007c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c1e:	0a5b      	lsrs	r3, r3, #9
 8007c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c24:	fb02 f303 	mul.w	r3, r2, r3
 8007c28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	1e5a      	subs	r2, r3, #1
 8007c2e:	60fa      	str	r2, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d102      	bne.n	8007c3a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c38:	e009      	b.n	8007c4e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0f1      	beq.n	8007c2a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	22c5      	movs	r2, #197	; 0xc5
 8007c4a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	20000000 	.word	0x20000000
 8007c60:	10624dd3 	.word	0x10624dd3

08007c64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007c68:	4904      	ldr	r1, [pc, #16]	; (8007c7c <MX_FATFS_Init+0x18>)
 8007c6a:	4805      	ldr	r0, [pc, #20]	; (8007c80 <MX_FATFS_Init+0x1c>)
 8007c6c:	f002 fbd2 	bl	800a414 <FATFS_LinkDriver>
 8007c70:	4603      	mov	r3, r0
 8007c72:	461a      	mov	r2, r3
 8007c74:	4b03      	ldr	r3, [pc, #12]	; (8007c84 <MX_FATFS_Init+0x20>)
 8007c76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007c78:	bf00      	nop
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	2000198c 	.word	0x2000198c
 8007c80:	0800f8fc 	.word	0x0800f8fc
 8007c84:	20001988 	.word	0x20001988

08007c88 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007c8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007ca2:	f000 f896 	bl	8007dd2 <BSP_SD_IsDetected>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d001      	beq.n	8007cb0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007cac:	2302      	movs	r3, #2
 8007cae:	e012      	b.n	8007cd6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007cb0:	480b      	ldr	r0, [pc, #44]	; (8007ce0 <BSP_SD_Init+0x48>)
 8007cb2:	f7fd facd 	bl	8005250 <HAL_SD_Init>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d109      	bne.n	8007cd4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007cc4:	4806      	ldr	r0, [pc, #24]	; (8007ce0 <BSP_SD_Init+0x48>)
 8007cc6:	f7fe f893 	bl	8005df0 <HAL_SD_ConfigWideBusOperation>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20001790 	.word	0x20001790

08007ce4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	68f9      	ldr	r1, [r7, #12]
 8007cfa:	4806      	ldr	r0, [pc, #24]	; (8007d14 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007cfc:	f7fd fb60 	bl	80053c0 <HAL_SD_ReadBlocks_DMA>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20001790 	.word	0x20001790

08007d18 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d24:	2300      	movs	r3, #0
 8007d26:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	68f9      	ldr	r1, [r7, #12]
 8007d2e:	4806      	ldr	r0, [pc, #24]	; (8007d48 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007d30:	f7fd fc28 	bl	8005584 <HAL_SD_WriteBlocks_DMA>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20001790 	.word	0x20001790

08007d4c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007d50:	4805      	ldr	r0, [pc, #20]	; (8007d68 <BSP_SD_GetCardState+0x1c>)
 8007d52:	f7fe f8e7 	bl	8005f24 <HAL_SD_GetCardState>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	bf14      	ite	ne
 8007d5c:	2301      	movne	r3, #1
 8007d5e:	2300      	moveq	r3, #0
 8007d60:	b2db      	uxtb	r3, r3
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20001790 	.word	0x20001790

08007d6c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007d74:	6879      	ldr	r1, [r7, #4]
 8007d76:	4803      	ldr	r0, [pc, #12]	; (8007d84 <BSP_SD_GetCardInfo+0x18>)
 8007d78:	f7fe f80e 	bl	8005d98 <HAL_SD_GetCardInfo>
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	20001790 	.word	0x20001790

08007d88 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007d90:	f000 f818 	bl	8007dc4 <BSP_SD_AbortCallback>
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007da4:	f000 f9a8 	bl	80080f8 <BSP_SD_WriteCpltCallback>
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007db8:	f000 f9aa 	bl	8008110 <BSP_SD_ReadCpltCallback>
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0

}
 8007dc8:	bf00      	nop
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007ddc:	f000 f80c 	bl	8007df8 <BSP_PlatformIsDetected>
 8007de0:	4603      	mov	r3, r0
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007de6:	2300      	movs	r3, #0
 8007de8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007dea:	79fb      	ldrb	r3, [r7, #7]
 8007dec:	b2db      	uxtb	r3, r3
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3708      	adds	r7, #8
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
	...

08007df8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e06:	4806      	ldr	r0, [pc, #24]	; (8007e20 <BSP_PlatformIsDetected+0x28>)
 8007e08:	f7fb fb2e 	bl	8003468 <HAL_GPIO_ReadPin>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007e12:	2300      	movs	r3, #0
 8007e14:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007e16:	79fb      	ldrb	r3, [r7, #7]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	40020400 	.word	0x40020400

08007e24 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007e2c:	f7f9 fe90 	bl	8001b50 <HAL_GetTick>
 8007e30:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007e32:	e006      	b.n	8007e42 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e34:	f7ff ff8a 	bl	8007d4c <BSP_SD_GetCardState>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	e009      	b.n	8007e56 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007e42:	f7f9 fe85 	bl	8001b50 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	429a      	cmp	r2, r3
 8007e50:	d8f0      	bhi.n	8007e34 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4603      	mov	r3, r0
 8007e68:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007e6a:	4b0b      	ldr	r3, [pc, #44]	; (8007e98 <SD_CheckStatus+0x38>)
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007e70:	f7ff ff6c 	bl	8007d4c <BSP_SD_GetCardState>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d107      	bne.n	8007e8a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007e7a:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <SD_CheckStatus+0x38>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	f023 0301 	bic.w	r3, r3, #1
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	4b04      	ldr	r3, [pc, #16]	; (8007e98 <SD_CheckStatus+0x38>)
 8007e88:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007e8a:	4b03      	ldr	r3, [pc, #12]	; (8007e98 <SD_CheckStatus+0x38>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b2db      	uxtb	r3, r3
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	20000009 	.word	0x20000009

08007e9c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007ea6:	f7ff fef7 	bl	8007c98 <BSP_SD_Init>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d107      	bne.n	8007ec0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7ff ffd4 	bl	8007e60 <SD_CheckStatus>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	461a      	mov	r2, r3
 8007ebc:	4b04      	ldr	r3, [pc, #16]	; (8007ed0 <SD_initialize+0x34>)
 8007ebe:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007ec0:	4b03      	ldr	r3, [pc, #12]	; (8007ed0 <SD_initialize+0x34>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	b2db      	uxtb	r3, r3
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000009 	.word	0x20000009

08007ed4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	4603      	mov	r3, r0
 8007edc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007ede:	79fb      	ldrb	r3, [r7, #7]
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7ff ffbd 	bl	8007e60 <SD_CheckStatus>
 8007ee6:	4603      	mov	r3, r0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3708      	adds	r7, #8
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	607a      	str	r2, [r7, #4]
 8007efa:	603b      	str	r3, [r7, #0]
 8007efc:	4603      	mov	r3, r0
 8007efe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007f04:	f247 5030 	movw	r0, #30000	; 0x7530
 8007f08:	f7ff ff8c 	bl	8007e24 <SD_CheckStatusWithTimeout>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	da01      	bge.n	8007f16 <SD_read+0x26>
  {
    return res;
 8007f12:	7dfb      	ldrb	r3, [r7, #23]
 8007f14:	e03b      	b.n	8007f8e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	6879      	ldr	r1, [r7, #4]
 8007f1a:	68b8      	ldr	r0, [r7, #8]
 8007f1c:	f7ff fee2 	bl	8007ce4 <BSP_SD_ReadBlocks_DMA>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d132      	bne.n	8007f8c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007f26:	4b1c      	ldr	r3, [pc, #112]	; (8007f98 <SD_read+0xa8>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007f2c:	f7f9 fe10 	bl	8001b50 <HAL_GetTick>
 8007f30:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007f32:	bf00      	nop
 8007f34:	4b18      	ldr	r3, [pc, #96]	; (8007f98 <SD_read+0xa8>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d108      	bne.n	8007f4e <SD_read+0x5e>
 8007f3c:	f7f9 fe08 	bl	8001b50 <HAL_GetTick>
 8007f40:	4602      	mov	r2, r0
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	1ad3      	subs	r3, r2, r3
 8007f46:	f247 522f 	movw	r2, #29999	; 0x752f
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d9f2      	bls.n	8007f34 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007f4e:	4b12      	ldr	r3, [pc, #72]	; (8007f98 <SD_read+0xa8>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d102      	bne.n	8007f5c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	75fb      	strb	r3, [r7, #23]
 8007f5a:	e017      	b.n	8007f8c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007f5c:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <SD_read+0xa8>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007f62:	f7f9 fdf5 	bl	8001b50 <HAL_GetTick>
 8007f66:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007f68:	e007      	b.n	8007f7a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007f6a:	f7ff feef 	bl	8007d4c <BSP_SD_GetCardState>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d102      	bne.n	8007f7a <SD_read+0x8a>
          {
            res = RES_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007f78:	e008      	b.n	8007f8c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007f7a:	f7f9 fde9 	bl	8001b50 <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	f247 522f 	movw	r2, #29999	; 0x752f
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d9ee      	bls.n	8007f6a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20001df4 	.word	0x20001df4

08007f9c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60b9      	str	r1, [r7, #8]
 8007fa4:	607a      	str	r2, [r7, #4]
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007fb0:	4b24      	ldr	r3, [pc, #144]	; (8008044 <SD_write+0xa8>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007fb6:	f247 5030 	movw	r0, #30000	; 0x7530
 8007fba:	f7ff ff33 	bl	8007e24 <SD_CheckStatusWithTimeout>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	da01      	bge.n	8007fc8 <SD_write+0x2c>
  {
    return res;
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	e038      	b.n	800803a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	68b8      	ldr	r0, [r7, #8]
 8007fce:	f7ff fea3 	bl	8007d18 <BSP_SD_WriteBlocks_DMA>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d12f      	bne.n	8008038 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007fd8:	f7f9 fdba 	bl	8001b50 <HAL_GetTick>
 8007fdc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007fde:	bf00      	nop
 8007fe0:	4b18      	ldr	r3, [pc, #96]	; (8008044 <SD_write+0xa8>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d108      	bne.n	8007ffa <SD_write+0x5e>
 8007fe8:	f7f9 fdb2 	bl	8001b50 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	f247 522f 	movw	r2, #29999	; 0x752f
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d9f2      	bls.n	8007fe0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007ffa:	4b12      	ldr	r3, [pc, #72]	; (8008044 <SD_write+0xa8>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d102      	bne.n	8008008 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	75fb      	strb	r3, [r7, #23]
 8008006:	e017      	b.n	8008038 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008008:	4b0e      	ldr	r3, [pc, #56]	; (8008044 <SD_write+0xa8>)
 800800a:	2200      	movs	r2, #0
 800800c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800800e:	f7f9 fd9f 	bl	8001b50 <HAL_GetTick>
 8008012:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008014:	e007      	b.n	8008026 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008016:	f7ff fe99 	bl	8007d4c <BSP_SD_GetCardState>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d102      	bne.n	8008026 <SD_write+0x8a>
          {
            res = RES_OK;
 8008020:	2300      	movs	r3, #0
 8008022:	75fb      	strb	r3, [r7, #23]
            break;
 8008024:	e008      	b.n	8008038 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008026:	f7f9 fd93 	bl	8001b50 <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	f247 522f 	movw	r2, #29999	; 0x752f
 8008034:	4293      	cmp	r3, r2
 8008036:	d9ee      	bls.n	8008016 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008038:	7dfb      	ldrb	r3, [r7, #23]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20001df0 	.word	0x20001df0

08008048 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b08c      	sub	sp, #48	; 0x30
 800804c:	af00      	add	r7, sp, #0
 800804e:	4603      	mov	r3, r0
 8008050:	603a      	str	r2, [r7, #0]
 8008052:	71fb      	strb	r3, [r7, #7]
 8008054:	460b      	mov	r3, r1
 8008056:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800805e:	4b25      	ldr	r3, [pc, #148]	; (80080f4 <SD_ioctl+0xac>)
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <SD_ioctl+0x28>
 800806c:	2303      	movs	r3, #3
 800806e:	e03c      	b.n	80080ea <SD_ioctl+0xa2>

  switch (cmd)
 8008070:	79bb      	ldrb	r3, [r7, #6]
 8008072:	2b03      	cmp	r3, #3
 8008074:	d834      	bhi.n	80080e0 <SD_ioctl+0x98>
 8008076:	a201      	add	r2, pc, #4	; (adr r2, 800807c <SD_ioctl+0x34>)
 8008078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807c:	0800808d 	.word	0x0800808d
 8008080:	08008095 	.word	0x08008095
 8008084:	080080ad 	.word	0x080080ad
 8008088:	080080c7 	.word	0x080080c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008092:	e028      	b.n	80080e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008094:	f107 030c 	add.w	r3, r7, #12
 8008098:	4618      	mov	r0, r3
 800809a:	f7ff fe67 	bl	8007d6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800809e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080aa:	e01c      	b.n	80080e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80080ac:	f107 030c 	add.w	r3, r7, #12
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff fe5b 	bl	8007d6c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80080b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080c4:	e00f      	b.n	80080e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80080c6:	f107 030c 	add.w	r3, r7, #12
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff fe4e 	bl	8007d6c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	0a5a      	lsrs	r2, r3, #9
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080de:	e002      	b.n	80080e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80080e0:	2304      	movs	r3, #4
 80080e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80080e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3730      	adds	r7, #48	; 0x30
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20000009 	.word	0x20000009

080080f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80080f8:	b480      	push	{r7}
 80080fa:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80080fc:	4b03      	ldr	r3, [pc, #12]	; (800810c <BSP_SD_WriteCpltCallback+0x14>)
 80080fe:	2201      	movs	r2, #1
 8008100:	601a      	str	r2, [r3, #0]
}
 8008102:	bf00      	nop
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr
 800810c:	20001df0 	.word	0x20001df0

08008110 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008110:	b480      	push	{r7}
 8008112:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008114:	4b03      	ldr	r3, [pc, #12]	; (8008124 <BSP_SD_ReadCpltCallback+0x14>)
 8008116:	2201      	movs	r2, #1
 8008118:	601a      	str	r2, [r3, #0]
}
 800811a:	bf00      	nop
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	20001df4 	.word	0x20001df4

08008128 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008132:	79fb      	ldrb	r3, [r7, #7]
 8008134:	4a08      	ldr	r2, [pc, #32]	; (8008158 <disk_status+0x30>)
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4413      	add	r3, r2
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	79fa      	ldrb	r2, [r7, #7]
 8008140:	4905      	ldr	r1, [pc, #20]	; (8008158 <disk_status+0x30>)
 8008142:	440a      	add	r2, r1
 8008144:	7a12      	ldrb	r2, [r2, #8]
 8008146:	4610      	mov	r0, r2
 8008148:	4798      	blx	r3
 800814a:	4603      	mov	r3, r0
 800814c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800814e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	20001e20 	.word	0x20001e20

0800815c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008166:	2300      	movs	r3, #0
 8008168:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800816a:	79fb      	ldrb	r3, [r7, #7]
 800816c:	4a0d      	ldr	r2, [pc, #52]	; (80081a4 <disk_initialize+0x48>)
 800816e:	5cd3      	ldrb	r3, [r2, r3]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d111      	bne.n	8008198 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008174:	79fb      	ldrb	r3, [r7, #7]
 8008176:	4a0b      	ldr	r2, [pc, #44]	; (80081a4 <disk_initialize+0x48>)
 8008178:	2101      	movs	r1, #1
 800817a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800817c:	79fb      	ldrb	r3, [r7, #7]
 800817e:	4a09      	ldr	r2, [pc, #36]	; (80081a4 <disk_initialize+0x48>)
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	4413      	add	r3, r2
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	79fa      	ldrb	r2, [r7, #7]
 800818a:	4906      	ldr	r1, [pc, #24]	; (80081a4 <disk_initialize+0x48>)
 800818c:	440a      	add	r2, r1
 800818e:	7a12      	ldrb	r2, [r2, #8]
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008198:	7bfb      	ldrb	r3, [r7, #15]
}
 800819a:	4618      	mov	r0, r3
 800819c:	3710      	adds	r7, #16
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	20001e20 	.word	0x20001e20

080081a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80081a8:	b590      	push	{r4, r7, lr}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	607a      	str	r2, [r7, #4]
 80081b2:	603b      	str	r3, [r7, #0]
 80081b4:	4603      	mov	r3, r0
 80081b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	4a0a      	ldr	r2, [pc, #40]	; (80081e4 <disk_read+0x3c>)
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	689c      	ldr	r4, [r3, #8]
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	4a07      	ldr	r2, [pc, #28]	; (80081e4 <disk_read+0x3c>)
 80081c8:	4413      	add	r3, r2
 80081ca:	7a18      	ldrb	r0, [r3, #8]
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	47a0      	blx	r4
 80081d4:	4603      	mov	r3, r0
 80081d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	371c      	adds	r7, #28
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd90      	pop	{r4, r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20001e20 	.word	0x20001e20

080081e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80081e8:	b590      	push	{r4, r7, lr}
 80081ea:	b087      	sub	sp, #28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	60b9      	str	r1, [r7, #8]
 80081f0:	607a      	str	r2, [r7, #4]
 80081f2:	603b      	str	r3, [r7, #0]
 80081f4:	4603      	mov	r3, r0
 80081f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	4a0a      	ldr	r2, [pc, #40]	; (8008224 <disk_write+0x3c>)
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	68dc      	ldr	r4, [r3, #12]
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	4a07      	ldr	r2, [pc, #28]	; (8008224 <disk_write+0x3c>)
 8008208:	4413      	add	r3, r2
 800820a:	7a18      	ldrb	r0, [r3, #8]
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	68b9      	ldr	r1, [r7, #8]
 8008212:	47a0      	blx	r4
 8008214:	4603      	mov	r3, r0
 8008216:	75fb      	strb	r3, [r7, #23]
  return res;
 8008218:	7dfb      	ldrb	r3, [r7, #23]
}
 800821a:	4618      	mov	r0, r3
 800821c:	371c      	adds	r7, #28
 800821e:	46bd      	mov	sp, r7
 8008220:	bd90      	pop	{r4, r7, pc}
 8008222:	bf00      	nop
 8008224:	20001e20 	.word	0x20001e20

08008228 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	603a      	str	r2, [r7, #0]
 8008232:	71fb      	strb	r3, [r7, #7]
 8008234:	460b      	mov	r3, r1
 8008236:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008238:	79fb      	ldrb	r3, [r7, #7]
 800823a:	4a09      	ldr	r2, [pc, #36]	; (8008260 <disk_ioctl+0x38>)
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	79fa      	ldrb	r2, [r7, #7]
 8008246:	4906      	ldr	r1, [pc, #24]	; (8008260 <disk_ioctl+0x38>)
 8008248:	440a      	add	r2, r1
 800824a:	7a10      	ldrb	r0, [r2, #8]
 800824c:	79b9      	ldrb	r1, [r7, #6]
 800824e:	683a      	ldr	r2, [r7, #0]
 8008250:	4798      	blx	r3
 8008252:	4603      	mov	r3, r0
 8008254:	73fb      	strb	r3, [r7, #15]
  return res;
 8008256:	7bfb      	ldrb	r3, [r7, #15]
}
 8008258:	4618      	mov	r0, r3
 800825a:	3710      	adds	r7, #16
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	20001e20 	.word	0x20001e20

08008264 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3301      	adds	r3, #1
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008274:	89fb      	ldrh	r3, [r7, #14]
 8008276:	021b      	lsls	r3, r3, #8
 8008278:	b21a      	sxth	r2, r3
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	b21b      	sxth	r3, r3
 8008280:	4313      	orrs	r3, r2
 8008282:	b21b      	sxth	r3, r3
 8008284:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008286:	89fb      	ldrh	r3, [r7, #14]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3714      	adds	r7, #20
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr

08008294 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3303      	adds	r3, #3
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	021b      	lsls	r3, r3, #8
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	3202      	adds	r2, #2
 80082ac:	7812      	ldrb	r2, [r2, #0]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	021b      	lsls	r3, r3, #8
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	3201      	adds	r2, #1
 80082ba:	7812      	ldrb	r2, [r2, #0]
 80082bc:	4313      	orrs	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	7812      	ldrb	r2, [r2, #0]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	60fb      	str	r3, [r7, #12]
	return rv;
 80082cc:	68fb      	ldr	r3, [r7, #12]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80082da:	b480      	push	{r7}
 80082dc:	b083      	sub	sp, #12
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	887a      	ldrh	r2, [r7, #2]
 80082ee:	b2d2      	uxtb	r2, r2
 80082f0:	701a      	strb	r2, [r3, #0]
 80082f2:	887b      	ldrh	r3, [r7, #2]
 80082f4:	0a1b      	lsrs	r3, r3, #8
 80082f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	607a      	str	r2, [r7, #4]
 80082fe:	887a      	ldrh	r2, [r7, #2]
 8008300:	b2d2      	uxtb	r2, r2
 8008302:	701a      	strb	r2, [r3, #0]
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	b2d2      	uxtb	r2, r2
 8008324:	701a      	strb	r2, [r3, #0]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	0a1b      	lsrs	r3, r3, #8
 800832a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	1c5a      	adds	r2, r3, #1
 8008330:	607a      	str	r2, [r7, #4]
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	b2d2      	uxtb	r2, r2
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	0a1b      	lsrs	r3, r3, #8
 800833c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	1c5a      	adds	r2, r3, #1
 8008342:	607a      	str	r2, [r7, #4]
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	0a1b      	lsrs	r3, r3, #8
 800834e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	b2d2      	uxtb	r2, r2
 800835a:	701a      	strb	r2, [r3, #0]
}
 800835c:	bf00      	nop
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00d      	beq.n	800839e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008382:	693a      	ldr	r2, [r7, #16]
 8008384:	1c53      	adds	r3, r2, #1
 8008386:	613b      	str	r3, [r7, #16]
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	1c59      	adds	r1, r3, #1
 800838c:	6179      	str	r1, [r7, #20]
 800838e:	7812      	ldrb	r2, [r2, #0]
 8008390:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	3b01      	subs	r3, #1
 8008396:	607b      	str	r3, [r7, #4]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1f1      	bne.n	8008382 <mem_cpy+0x1a>
	}
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80083aa:	b480      	push	{r7}
 80083ac:	b087      	sub	sp, #28
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	1c5a      	adds	r2, r3, #1
 80083be:	617a      	str	r2, [r7, #20]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	b2d2      	uxtb	r2, r2
 80083c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	3b01      	subs	r3, #1
 80083ca:	607b      	str	r3, [r7, #4]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1f3      	bne.n	80083ba <mem_set+0x10>
}
 80083d2:	bf00      	nop
 80083d4:	bf00      	nop
 80083d6:	371c      	adds	r7, #28
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80083e0:	b480      	push	{r7}
 80083e2:	b089      	sub	sp, #36	; 0x24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	61fb      	str	r3, [r7, #28]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	1c5a      	adds	r2, r3, #1
 80083fc:	61fa      	str	r2, [r7, #28]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	4619      	mov	r1, r3
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	1c5a      	adds	r2, r3, #1
 8008406:	61ba      	str	r2, [r7, #24]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	1acb      	subs	r3, r1, r3
 800840c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3b01      	subs	r3, #1
 8008412:	607b      	str	r3, [r7, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <mem_cmp+0x40>
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0eb      	beq.n	80083f8 <mem_cmp+0x18>

	return r;
 8008420:	697b      	ldr	r3, [r7, #20]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3724      	adds	r7, #36	; 0x24
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800842e:	b480      	push	{r7}
 8008430:	b083      	sub	sp, #12
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008438:	e002      	b.n	8008440 <chk_chr+0x12>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3301      	adds	r3, #1
 800843e:	607b      	str	r3, [r7, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <chk_chr+0x26>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	4293      	cmp	r3, r2
 8008452:	d1f2      	bne.n	800843a <chk_chr+0xc>
	return *str;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	781b      	ldrb	r3, [r3, #0]
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800846e:	2300      	movs	r3, #0
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	e029      	b.n	80084cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008478:	4a27      	ldr	r2, [pc, #156]	; (8008518 <chk_lock+0xb4>)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	4413      	add	r3, r2
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d01d      	beq.n	80084c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008486:	4a24      	ldr	r2, [pc, #144]	; (8008518 <chk_lock+0xb4>)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	011b      	lsls	r3, r3, #4
 800848c:	4413      	add	r3, r2
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d116      	bne.n	80084c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008498:	4a1f      	ldr	r2, [pc, #124]	; (8008518 <chk_lock+0xb4>)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	4413      	add	r3, r2
 80084a0:	3304      	adds	r3, #4
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d10c      	bne.n	80084c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80084ac:	4a1a      	ldr	r2, [pc, #104]	; (8008518 <chk_lock+0xb4>)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	011b      	lsls	r3, r3, #4
 80084b2:	4413      	add	r3, r2
 80084b4:	3308      	adds	r3, #8
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80084bc:	429a      	cmp	r2, r3
 80084be:	d102      	bne.n	80084c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80084c0:	e007      	b.n	80084d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80084c2:	2301      	movs	r3, #1
 80084c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3301      	adds	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d9d2      	bls.n	8008478 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d109      	bne.n	80084ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d102      	bne.n	80084e4 <chk_lock+0x80>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d101      	bne.n	80084e8 <chk_lock+0x84>
 80084e4:	2300      	movs	r3, #0
 80084e6:	e010      	b.n	800850a <chk_lock+0xa6>
 80084e8:	2312      	movs	r3, #18
 80084ea:	e00e      	b.n	800850a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d108      	bne.n	8008504 <chk_lock+0xa0>
 80084f2:	4a09      	ldr	r2, [pc, #36]	; (8008518 <chk_lock+0xb4>)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	011b      	lsls	r3, r3, #4
 80084f8:	4413      	add	r3, r2
 80084fa:	330c      	adds	r3, #12
 80084fc:	881b      	ldrh	r3, [r3, #0]
 80084fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008502:	d101      	bne.n	8008508 <chk_lock+0xa4>
 8008504:	2310      	movs	r3, #16
 8008506:	e000      	b.n	800850a <chk_lock+0xa6>
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	20001e00 	.word	0x20001e00

0800851c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008522:	2300      	movs	r3, #0
 8008524:	607b      	str	r3, [r7, #4]
 8008526:	e002      	b.n	800852e <enq_lock+0x12>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3301      	adds	r3, #1
 800852c:	607b      	str	r3, [r7, #4]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d806      	bhi.n	8008542 <enq_lock+0x26>
 8008534:	4a09      	ldr	r2, [pc, #36]	; (800855c <enq_lock+0x40>)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	011b      	lsls	r3, r3, #4
 800853a:	4413      	add	r3, r2
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1f2      	bne.n	8008528 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b02      	cmp	r3, #2
 8008546:	bf14      	ite	ne
 8008548:	2301      	movne	r3, #1
 800854a:	2300      	moveq	r3, #0
 800854c:	b2db      	uxtb	r3, r3
}
 800854e:	4618      	mov	r0, r3
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	20001e00 	.word	0x20001e00

08008560 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
 800856e:	e01f      	b.n	80085b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008570:	4a41      	ldr	r2, [pc, #260]	; (8008678 <inc_lock+0x118>)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	011b      	lsls	r3, r3, #4
 8008576:	4413      	add	r3, r2
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	429a      	cmp	r2, r3
 8008580:	d113      	bne.n	80085aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008582:	4a3d      	ldr	r2, [pc, #244]	; (8008678 <inc_lock+0x118>)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	4413      	add	r3, r2
 800858a:	3304      	adds	r3, #4
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008592:	429a      	cmp	r2, r3
 8008594:	d109      	bne.n	80085aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008596:	4a38      	ldr	r2, [pc, #224]	; (8008678 <inc_lock+0x118>)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	4413      	add	r3, r2
 800859e:	3308      	adds	r3, #8
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d006      	beq.n	80085b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	3301      	adds	r3, #1
 80085ae:	60fb      	str	r3, [r7, #12]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d9dc      	bls.n	8008570 <inc_lock+0x10>
 80085b6:	e000      	b.n	80085ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80085b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d132      	bne.n	8008626 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80085c0:	2300      	movs	r3, #0
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e002      	b.n	80085cc <inc_lock+0x6c>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3301      	adds	r3, #1
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d806      	bhi.n	80085e0 <inc_lock+0x80>
 80085d2:	4a29      	ldr	r2, [pc, #164]	; (8008678 <inc_lock+0x118>)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	011b      	lsls	r3, r3, #4
 80085d8:	4413      	add	r3, r2
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1f2      	bne.n	80085c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d101      	bne.n	80085ea <inc_lock+0x8a>
 80085e6:	2300      	movs	r3, #0
 80085e8:	e040      	b.n	800866c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	4922      	ldr	r1, [pc, #136]	; (8008678 <inc_lock+0x118>)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	011b      	lsls	r3, r3, #4
 80085f4:	440b      	add	r3, r1
 80085f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	491e      	ldr	r1, [pc, #120]	; (8008678 <inc_lock+0x118>)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	011b      	lsls	r3, r3, #4
 8008602:	440b      	add	r3, r1
 8008604:	3304      	adds	r3, #4
 8008606:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	695a      	ldr	r2, [r3, #20]
 800860c:	491a      	ldr	r1, [pc, #104]	; (8008678 <inc_lock+0x118>)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	011b      	lsls	r3, r3, #4
 8008612:	440b      	add	r3, r1
 8008614:	3308      	adds	r3, #8
 8008616:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008618:	4a17      	ldr	r2, [pc, #92]	; (8008678 <inc_lock+0x118>)
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	011b      	lsls	r3, r3, #4
 800861e:	4413      	add	r3, r2
 8008620:	330c      	adds	r3, #12
 8008622:	2200      	movs	r2, #0
 8008624:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d009      	beq.n	8008640 <inc_lock+0xe0>
 800862c:	4a12      	ldr	r2, [pc, #72]	; (8008678 <inc_lock+0x118>)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	011b      	lsls	r3, r3, #4
 8008632:	4413      	add	r3, r2
 8008634:	330c      	adds	r3, #12
 8008636:	881b      	ldrh	r3, [r3, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <inc_lock+0xe0>
 800863c:	2300      	movs	r3, #0
 800863e:	e015      	b.n	800866c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d108      	bne.n	8008658 <inc_lock+0xf8>
 8008646:	4a0c      	ldr	r2, [pc, #48]	; (8008678 <inc_lock+0x118>)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	011b      	lsls	r3, r3, #4
 800864c:	4413      	add	r3, r2
 800864e:	330c      	adds	r3, #12
 8008650:	881b      	ldrh	r3, [r3, #0]
 8008652:	3301      	adds	r3, #1
 8008654:	b29a      	uxth	r2, r3
 8008656:	e001      	b.n	800865c <inc_lock+0xfc>
 8008658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800865c:	4906      	ldr	r1, [pc, #24]	; (8008678 <inc_lock+0x118>)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	011b      	lsls	r3, r3, #4
 8008662:	440b      	add	r3, r1
 8008664:	330c      	adds	r3, #12
 8008666:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3301      	adds	r3, #1
}
 800866c:	4618      	mov	r0, r3
 800866e:	3714      	adds	r7, #20
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr
 8008678:	20001e00 	.word	0x20001e00

0800867c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3b01      	subs	r3, #1
 8008688:	607b      	str	r3, [r7, #4]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d825      	bhi.n	80086dc <dec_lock+0x60>
		n = Files[i].ctr;
 8008690:	4a17      	ldr	r2, [pc, #92]	; (80086f0 <dec_lock+0x74>)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	011b      	lsls	r3, r3, #4
 8008696:	4413      	add	r3, r2
 8008698:	330c      	adds	r3, #12
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800869e:	89fb      	ldrh	r3, [r7, #14]
 80086a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086a4:	d101      	bne.n	80086aa <dec_lock+0x2e>
 80086a6:	2300      	movs	r3, #0
 80086a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80086aa:	89fb      	ldrh	r3, [r7, #14]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <dec_lock+0x3a>
 80086b0:	89fb      	ldrh	r3, [r7, #14]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80086b6:	4a0e      	ldr	r2, [pc, #56]	; (80086f0 <dec_lock+0x74>)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	011b      	lsls	r3, r3, #4
 80086bc:	4413      	add	r3, r2
 80086be:	330c      	adds	r3, #12
 80086c0:	89fa      	ldrh	r2, [r7, #14]
 80086c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80086c4:	89fb      	ldrh	r3, [r7, #14]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d105      	bne.n	80086d6 <dec_lock+0x5a>
 80086ca:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <dec_lock+0x74>)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	4413      	add	r3, r2
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	737b      	strb	r3, [r7, #13]
 80086da:	e001      	b.n	80086e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80086dc:	2302      	movs	r3, #2
 80086de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80086e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	20001e00 	.word	0x20001e00

080086f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80086fc:	2300      	movs	r3, #0
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	e010      	b.n	8008724 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008702:	4a0d      	ldr	r2, [pc, #52]	; (8008738 <clear_lock+0x44>)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	4413      	add	r3, r2
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	429a      	cmp	r2, r3
 8008710:	d105      	bne.n	800871e <clear_lock+0x2a>
 8008712:	4a09      	ldr	r2, [pc, #36]	; (8008738 <clear_lock+0x44>)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	011b      	lsls	r3, r3, #4
 8008718:	4413      	add	r3, r2
 800871a:	2200      	movs	r2, #0
 800871c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	3301      	adds	r3, #1
 8008722:	60fb      	str	r3, [r7, #12]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b01      	cmp	r3, #1
 8008728:	d9eb      	bls.n	8008702 <clear_lock+0xe>
	}
}
 800872a:	bf00      	nop
 800872c:	bf00      	nop
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	20001e00 	.word	0x20001e00

0800873c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	78db      	ldrb	r3, [r3, #3]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d034      	beq.n	80087ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	7858      	ldrb	r0, [r3, #1]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008760:	2301      	movs	r3, #1
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	f7ff fd40 	bl	80081e8 <disk_write>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <sync_window+0x38>
			res = FR_DISK_ERR;
 800876e:	2301      	movs	r3, #1
 8008770:	73fb      	strb	r3, [r7, #15]
 8008772:	e022      	b.n	80087ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	1ad2      	subs	r2, r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	429a      	cmp	r2, r3
 8008788:	d217      	bcs.n	80087ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	789b      	ldrb	r3, [r3, #2]
 800878e:	613b      	str	r3, [r7, #16]
 8008790:	e010      	b.n	80087b4 <sync_window+0x78>
					wsect += fs->fsize;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4413      	add	r3, r2
 800879a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	7858      	ldrb	r0, [r3, #1]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087a6:	2301      	movs	r3, #1
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	f7ff fd1d 	bl	80081e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d8eb      	bhi.n	8008792 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80087ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d01b      	beq.n	8008814 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff ffad 	bl	800873c <sync_window>
 80087e2:	4603      	mov	r3, r0
 80087e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d113      	bne.n	8008814 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	7858      	ldrb	r0, [r3, #1]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087f6:	2301      	movs	r3, #1
 80087f8:	683a      	ldr	r2, [r7, #0]
 80087fa:	f7ff fcd5 	bl	80081a8 <disk_read>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008808:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800880a:	2301      	movs	r3, #1
 800880c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	683a      	ldr	r2, [r7, #0]
 8008812:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8008814:	7bfb      	ldrb	r3, [r7, #15]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
	...

08008820 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f7ff ff87 	bl	800873c <sync_window>
 800882e:	4603      	mov	r3, r0
 8008830:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008832:	7bfb      	ldrb	r3, [r7, #15]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d158      	bne.n	80088ea <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b03      	cmp	r3, #3
 800883e:	d148      	bne.n	80088d2 <sync_fs+0xb2>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	791b      	ldrb	r3, [r3, #4]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d144      	bne.n	80088d2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	3330      	adds	r3, #48	; 0x30
 800884c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008850:	2100      	movs	r1, #0
 8008852:	4618      	mov	r0, r3
 8008854:	f7ff fda9 	bl	80083aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3330      	adds	r3, #48	; 0x30
 800885c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008860:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fd38 	bl	80082da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	3330      	adds	r3, #48	; 0x30
 800886e:	4921      	ldr	r1, [pc, #132]	; (80088f4 <sync_fs+0xd4>)
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fd4d 	bl	8008310 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3330      	adds	r3, #48	; 0x30
 800887a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800887e:	491e      	ldr	r1, [pc, #120]	; (80088f8 <sync_fs+0xd8>)
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fd45 	bl	8008310 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	3330      	adds	r3, #48	; 0x30
 800888a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	4619      	mov	r1, r3
 8008894:	4610      	mov	r0, r2
 8008896:	f7ff fd3b 	bl	8008310 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	3330      	adds	r3, #48	; 0x30
 800889e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	4619      	mov	r1, r3
 80088a8:	4610      	mov	r0, r2
 80088aa:	f7ff fd31 	bl	8008310 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	7858      	ldrb	r0, [r3, #1]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c6:	2301      	movs	r3, #1
 80088c8:	f7ff fc8e 	bl	80081e8 <disk_write>
			fs->fsi_flag = 0;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	785b      	ldrb	r3, [r3, #1]
 80088d6:	2200      	movs	r2, #0
 80088d8:	2100      	movs	r1, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	f7ff fca4 	bl	8008228 <disk_ioctl>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <sync_fs+0xca>
 80088e6:	2301      	movs	r3, #1
 80088e8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	41615252 	.word	0x41615252
 80088f8:	61417272 	.word	0x61417272

080088fc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	3b02      	subs	r3, #2
 800890a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	695b      	ldr	r3, [r3, #20]
 8008910:	3b02      	subs	r3, #2
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	429a      	cmp	r2, r3
 8008916:	d301      	bcc.n	800891c <clust2sect+0x20>
 8008918:	2300      	movs	r3, #0
 800891a:	e008      	b.n	800892e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	895b      	ldrh	r3, [r3, #10]
 8008920:	461a      	mov	r2, r3
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	fb03 f202 	mul.w	r2, r3, r2
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892c:	4413      	add	r3, r2
}
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b086      	sub	sp, #24
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d904      	bls.n	800895a <get_fat+0x20>
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	695b      	ldr	r3, [r3, #20]
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d302      	bcc.n	8008960 <get_fat+0x26>
		val = 1;	/* Internal error */
 800895a:	2301      	movs	r3, #1
 800895c:	617b      	str	r3, [r7, #20]
 800895e:	e08f      	b.n	8008a80 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008964:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2b03      	cmp	r3, #3
 800896c:	d062      	beq.n	8008a34 <get_fat+0xfa>
 800896e:	2b03      	cmp	r3, #3
 8008970:	dc7c      	bgt.n	8008a6c <get_fat+0x132>
 8008972:	2b01      	cmp	r3, #1
 8008974:	d002      	beq.n	800897c <get_fat+0x42>
 8008976:	2b02      	cmp	r3, #2
 8008978:	d042      	beq.n	8008a00 <get_fat+0xc6>
 800897a:	e077      	b.n	8008a6c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	085b      	lsrs	r3, r3, #1
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	4413      	add	r3, r2
 8008988:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	6a1a      	ldr	r2, [r3, #32]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	0a5b      	lsrs	r3, r3, #9
 8008992:	4413      	add	r3, r2
 8008994:	4619      	mov	r1, r3
 8008996:	6938      	ldr	r0, [r7, #16]
 8008998:	f7ff ff14 	bl	80087c4 <move_window>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d167      	bne.n	8008a72 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	1c5a      	adds	r2, r3, #1
 80089a6:	60fa      	str	r2, [r7, #12]
 80089a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4413      	add	r3, r2
 80089b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	6a1a      	ldr	r2, [r3, #32]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	0a5b      	lsrs	r3, r3, #9
 80089be:	4413      	add	r3, r2
 80089c0:	4619      	mov	r1, r3
 80089c2:	6938      	ldr	r0, [r7, #16]
 80089c4:	f7ff fefe 	bl	80087c4 <move_window>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d153      	bne.n	8008a76 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4413      	add	r3, r2
 80089d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089dc:	021b      	lsls	r3, r3, #8
 80089de:	461a      	mov	r2, r3
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <get_fat+0xbc>
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	091b      	lsrs	r3, r3, #4
 80089f4:	e002      	b.n	80089fc <get_fat+0xc2>
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089fc:	617b      	str	r3, [r7, #20]
			break;
 80089fe:	e03f      	b.n	8008a80 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	6a1a      	ldr	r2, [r3, #32]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	0a1b      	lsrs	r3, r3, #8
 8008a08:	4413      	add	r3, r2
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6938      	ldr	r0, [r7, #16]
 8008a0e:	f7ff fed9 	bl	80087c4 <move_window>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d130      	bne.n	8008a7a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	005b      	lsls	r3, r3, #1
 8008a22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008a26:	4413      	add	r3, r2
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff fc1b 	bl	8008264 <ld_word>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	617b      	str	r3, [r7, #20]
			break;
 8008a32:	e025      	b.n	8008a80 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	6a1a      	ldr	r2, [r3, #32]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	09db      	lsrs	r3, r3, #7
 8008a3c:	4413      	add	r3, r2
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6938      	ldr	r0, [r7, #16]
 8008a42:	f7ff febf 	bl	80087c4 <move_window>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d118      	bne.n	8008a7e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008a5a:	4413      	add	r3, r2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff fc19 	bl	8008294 <ld_dword>
 8008a62:	4603      	mov	r3, r0
 8008a64:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a68:	617b      	str	r3, [r7, #20]
			break;
 8008a6a:	e009      	b.n	8008a80 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	e006      	b.n	8008a80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a72:	bf00      	nop
 8008a74:	e004      	b.n	8008a80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a76:	bf00      	nop
 8008a78:	e002      	b.n	8008a80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a7a:	bf00      	nop
 8008a7c:	e000      	b.n	8008a80 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a7e:	bf00      	nop
		}
	}

	return val;
 8008a80:	697b      	ldr	r3, [r7, #20]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008a8a:	b590      	push	{r4, r7, lr}
 8008a8c:	b089      	sub	sp, #36	; 0x24
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	60f8      	str	r0, [r7, #12]
 8008a92:	60b9      	str	r1, [r7, #8]
 8008a94:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008a96:	2302      	movs	r3, #2
 8008a98:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	f240 80d2 	bls.w	8008c46 <put_fat+0x1bc>
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	f080 80cc 	bcs.w	8008c46 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	2b03      	cmp	r3, #3
 8008ab4:	f000 8096 	beq.w	8008be4 <put_fat+0x15a>
 8008ab8:	2b03      	cmp	r3, #3
 8008aba:	f300 80cd 	bgt.w	8008c58 <put_fat+0x1ce>
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d002      	beq.n	8008ac8 <put_fat+0x3e>
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d06e      	beq.n	8008ba4 <put_fat+0x11a>
 8008ac6:	e0c7      	b.n	8008c58 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	61bb      	str	r3, [r7, #24]
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	085b      	lsrs	r3, r3, #1
 8008ad0:	69ba      	ldr	r2, [r7, #24]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6a1a      	ldr	r2, [r3, #32]
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	0a5b      	lsrs	r3, r3, #9
 8008ade:	4413      	add	r3, r2
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	68f8      	ldr	r0, [r7, #12]
 8008ae4:	f7ff fe6e 	bl	80087c4 <move_window>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008aec:	7ffb      	ldrb	r3, [r7, #31]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f040 80ab 	bne.w	8008c4a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	1c59      	adds	r1, r3, #1
 8008afe:	61b9      	str	r1, [r7, #24]
 8008b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b04:	4413      	add	r3, r2
 8008b06:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	f003 0301 	and.w	r3, r3, #1
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00d      	beq.n	8008b2e <put_fat+0xa4>
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	b25b      	sxtb	r3, r3
 8008b18:	f003 030f 	and.w	r3, r3, #15
 8008b1c:	b25a      	sxtb	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	011b      	lsls	r3, r3, #4
 8008b24:	b25b      	sxtb	r3, r3
 8008b26:	4313      	orrs	r3, r2
 8008b28:	b25b      	sxtb	r3, r3
 8008b2a:	b2db      	uxtb	r3, r3
 8008b2c:	e001      	b.n	8008b32 <put_fat+0xa8>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2201      	movs	r2, #1
 8008b3a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6a1a      	ldr	r2, [r3, #32]
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	0a5b      	lsrs	r3, r3, #9
 8008b44:	4413      	add	r3, r2
 8008b46:	4619      	mov	r1, r3
 8008b48:	68f8      	ldr	r0, [r7, #12]
 8008b4a:	f7ff fe3b 	bl	80087c4 <move_window>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b52:	7ffb      	ldrb	r3, [r7, #31]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d17a      	bne.n	8008c4e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b64:	4413      	add	r3, r2
 8008b66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <put_fat+0xf0>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	091b      	lsrs	r3, r3, #4
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	e00e      	b.n	8008b98 <put_fat+0x10e>
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	b25b      	sxtb	r3, r3
 8008b80:	f023 030f 	bic.w	r3, r3, #15
 8008b84:	b25a      	sxtb	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	0a1b      	lsrs	r3, r3, #8
 8008b8a:	b25b      	sxtb	r3, r3
 8008b8c:	f003 030f 	and.w	r3, r3, #15
 8008b90:	b25b      	sxtb	r3, r3
 8008b92:	4313      	orrs	r3, r2
 8008b94:	b25b      	sxtb	r3, r3
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	70da      	strb	r2, [r3, #3]
			break;
 8008ba2:	e059      	b.n	8008c58 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6a1a      	ldr	r2, [r3, #32]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	0a1b      	lsrs	r3, r3, #8
 8008bac:	4413      	add	r3, r2
 8008bae:	4619      	mov	r1, r3
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f7ff fe07 	bl	80087c4 <move_window>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bba:	7ffb      	ldrb	r3, [r7, #31]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d148      	bne.n	8008c52 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008bce:	4413      	add	r3, r2
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	b292      	uxth	r2, r2
 8008bd4:	4611      	mov	r1, r2
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7ff fb7f 	bl	80082da <st_word>
			fs->wflag = 1;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	70da      	strb	r2, [r3, #3]
			break;
 8008be2:	e039      	b.n	8008c58 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6a1a      	ldr	r2, [r3, #32]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	09db      	lsrs	r3, r3, #7
 8008bec:	4413      	add	r3, r2
 8008bee:	4619      	mov	r1, r3
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7ff fde7 	bl	80087c4 <move_window>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008bfa:	7ffb      	ldrb	r3, [r7, #31]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d12a      	bne.n	8008c56 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c14:	4413      	add	r3, r2
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7ff fb3c 	bl	8008294 <ld_dword>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c22:	4323      	orrs	r3, r4
 8008c24:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c34:	4413      	add	r3, r2
 8008c36:	6879      	ldr	r1, [r7, #4]
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7ff fb69 	bl	8008310 <st_dword>
			fs->wflag = 1;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	70da      	strb	r2, [r3, #3]
			break;
 8008c44:	e008      	b.n	8008c58 <put_fat+0x1ce>
		}
	}
 8008c46:	bf00      	nop
 8008c48:	e006      	b.n	8008c58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c4a:	bf00      	nop
 8008c4c:	e004      	b.n	8008c58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c4e:	bf00      	nop
 8008c50:	e002      	b.n	8008c58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c52:	bf00      	nop
 8008c54:	e000      	b.n	8008c58 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c56:	bf00      	nop
	return res;
 8008c58:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3724      	adds	r7, #36	; 0x24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd90      	pop	{r4, r7, pc}

08008c62 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b088      	sub	sp, #32
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d904      	bls.n	8008c88 <remove_chain+0x26>
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d301      	bcc.n	8008c8c <remove_chain+0x2a>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	e04b      	b.n	8008d24 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00c      	beq.n	8008cac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	69b8      	ldr	r0, [r7, #24]
 8008c9a:	f7ff fef6 	bl	8008a8a <put_fat>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008ca2:	7ffb      	ldrb	r3, [r7, #31]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <remove_chain+0x4a>
 8008ca8:	7ffb      	ldrb	r3, [r7, #31]
 8008caa:	e03b      	b.n	8008d24 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008cac:	68b9      	ldr	r1, [r7, #8]
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f7ff fe43 	bl	800893a <get_fat>
 8008cb4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d031      	beq.n	8008d20 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d101      	bne.n	8008cc6 <remove_chain+0x64>
 8008cc2:	2302      	movs	r3, #2
 8008cc4:	e02e      	b.n	8008d24 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ccc:	d101      	bne.n	8008cd2 <remove_chain+0x70>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e028      	b.n	8008d24 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	68b9      	ldr	r1, [r7, #8]
 8008cd6:	69b8      	ldr	r0, [r7, #24]
 8008cd8:	f7ff fed7 	bl	8008a8a <put_fat>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008ce0:	7ffb      	ldrb	r3, [r7, #31]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <remove_chain+0x88>
 8008ce6:	7ffb      	ldrb	r3, [r7, #31]
 8008ce8:	e01c      	b.n	8008d24 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	691a      	ldr	r2, [r3, #16]
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	3b02      	subs	r3, #2
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d20b      	bcs.n	8008d10 <remove_chain+0xae>
			fs->free_clst++;
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	791b      	ldrb	r3, [r3, #4]
 8008d06:	f043 0301 	orr.w	r3, r3, #1
 8008d0a:	b2da      	uxtb	r2, r3
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	68ba      	ldr	r2, [r7, #8]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d3c6      	bcc.n	8008cac <remove_chain+0x4a>
 8008d1e:	e000      	b.n	8008d22 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008d20:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3720      	adds	r7, #32
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b088      	sub	sp, #32
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10d      	bne.n	8008d5e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d004      	beq.n	8008d58 <create_chain+0x2c>
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d31b      	bcc.n	8008d90 <create_chain+0x64>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	61bb      	str	r3, [r7, #24]
 8008d5c:	e018      	b.n	8008d90 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7ff fdea 	bl	800893a <get_fat>
 8008d66:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d801      	bhi.n	8008d72 <create_chain+0x46>
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e070      	b.n	8008e54 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d78:	d101      	bne.n	8008d7e <create_chain+0x52>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	e06a      	b.n	8008e54 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d201      	bcs.n	8008d8c <create_chain+0x60>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	e063      	b.n	8008e54 <create_chain+0x128>
		scl = clst;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	3301      	adds	r3, #1
 8008d98:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	69fa      	ldr	r2, [r7, #28]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d307      	bcc.n	8008db4 <create_chain+0x88>
				ncl = 2;
 8008da4:	2302      	movs	r3, #2
 8008da6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008da8:	69fa      	ldr	r2, [r7, #28]
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d901      	bls.n	8008db4 <create_chain+0x88>
 8008db0:	2300      	movs	r3, #0
 8008db2:	e04f      	b.n	8008e54 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008db4:	69f9      	ldr	r1, [r7, #28]
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff fdbf 	bl	800893a <get_fat>
 8008dbc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d00e      	beq.n	8008de2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d003      	beq.n	8008dd2 <create_chain+0xa6>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dd0:	d101      	bne.n	8008dd6 <create_chain+0xaa>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	e03e      	b.n	8008e54 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008dd6:	69fa      	ldr	r2, [r7, #28]
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d1da      	bne.n	8008d94 <create_chain+0x68>
 8008dde:	2300      	movs	r3, #0
 8008de0:	e038      	b.n	8008e54 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008de2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008de8:	69f9      	ldr	r1, [r7, #28]
 8008dea:	6938      	ldr	r0, [r7, #16]
 8008dec:	f7ff fe4d 	bl	8008a8a <put_fat>
 8008df0:	4603      	mov	r3, r0
 8008df2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008df4:	7dfb      	ldrb	r3, [r7, #23]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d109      	bne.n	8008e0e <create_chain+0xe2>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d006      	beq.n	8008e0e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008e00:	69fa      	ldr	r2, [r7, #28]
 8008e02:	6839      	ldr	r1, [r7, #0]
 8008e04:	6938      	ldr	r0, [r7, #16]
 8008e06:	f7ff fe40 	bl	8008a8a <put_fat>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008e0e:	7dfb      	ldrb	r3, [r7, #23]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d116      	bne.n	8008e42 <create_chain+0x116>
		fs->last_clst = ncl;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	3b02      	subs	r3, #2
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d804      	bhi.n	8008e32 <create_chain+0x106>
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	691b      	ldr	r3, [r3, #16]
 8008e2c:	1e5a      	subs	r2, r3, #1
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	791b      	ldrb	r3, [r3, #4]
 8008e36:	f043 0301 	orr.w	r3, r3, #1
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	711a      	strb	r2, [r3, #4]
 8008e40:	e007      	b.n	8008e52 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e42:	7dfb      	ldrb	r3, [r7, #23]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d102      	bne.n	8008e4e <create_chain+0x122>
 8008e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e4c:	e000      	b.n	8008e50 <create_chain+0x124>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008e52:	69fb      	ldr	r3, [r7, #28]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3720      	adds	r7, #32
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b087      	sub	sp, #28
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e70:	3304      	adds	r3, #4
 8008e72:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	0a5b      	lsrs	r3, r3, #9
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	8952      	ldrh	r2, [r2, #10]
 8008e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e80:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	1d1a      	adds	r2, r3, #4
 8008e86:	613a      	str	r2, [r7, #16]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <clmt_clust+0x3a>
 8008e92:	2300      	movs	r3, #0
 8008e94:	e010      	b.n	8008eb8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d307      	bcc.n	8008eae <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008e9e:	697a      	ldr	r2, [r7, #20]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	1ad3      	subs	r3, r2, r3
 8008ea4:	617b      	str	r3, [r7, #20]
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008eac:	e7e9      	b.n	8008e82 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008eae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	4413      	add	r3, r2
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	371c      	adds	r7, #28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eda:	d204      	bcs.n	8008ee6 <dir_sdi+0x22>
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	f003 031f 	and.w	r3, r3, #31
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d001      	beq.n	8008eea <dir_sdi+0x26>
		return FR_INT_ERR;
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	e063      	b.n	8008fb2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	683a      	ldr	r2, [r7, #0]
 8008eee:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d106      	bne.n	8008f0a <dir_sdi+0x46>
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d902      	bls.n	8008f0a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f08:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10c      	bne.n	8008f2a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	8912      	ldrh	r2, [r2, #8]
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d301      	bcc.n	8008f20 <dir_sdi+0x5c>
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	e048      	b.n	8008fb2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	61da      	str	r2, [r3, #28]
 8008f28:	e029      	b.n	8008f7e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	895b      	ldrh	r3, [r3, #10]
 8008f2e:	025b      	lsls	r3, r3, #9
 8008f30:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f32:	e019      	b.n	8008f68 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6979      	ldr	r1, [r7, #20]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff fcfe 	bl	800893a <get_fat>
 8008f3e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f46:	d101      	bne.n	8008f4c <dir_sdi+0x88>
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e032      	b.n	8008fb2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d904      	bls.n	8008f5c <dir_sdi+0x98>
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d301      	bcc.n	8008f60 <dir_sdi+0x9c>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e028      	b.n	8008fb2 <dir_sdi+0xee>
			ofs -= csz;
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d2e1      	bcs.n	8008f34 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008f70:	6979      	ldr	r1, [r7, #20]
 8008f72:	6938      	ldr	r0, [r7, #16]
 8008f74:	f7ff fcc2 	bl	80088fc <clust2sect>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d101      	bne.n	8008f90 <dir_sdi+0xcc>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e010      	b.n	8008fb2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	69da      	ldr	r2, [r3, #28]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	0a5b      	lsrs	r3, r3, #9
 8008f98:	441a      	add	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008faa:	441a      	add	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b086      	sub	sp, #24
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	695b      	ldr	r3, [r3, #20]
 8008fce:	3320      	adds	r3, #32
 8008fd0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	69db      	ldr	r3, [r3, #28]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <dir_next+0x28>
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fe0:	d301      	bcc.n	8008fe6 <dir_next+0x2c>
 8008fe2:	2304      	movs	r3, #4
 8008fe4:	e0aa      	b.n	800913c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f040 8098 	bne.w	8009122 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	69db      	ldr	r3, [r3, #28]
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d10b      	bne.n	800901c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	095b      	lsrs	r3, r3, #5
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	8912      	ldrh	r2, [r2, #8]
 800900c:	4293      	cmp	r3, r2
 800900e:	f0c0 8088 	bcc.w	8009122 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	61da      	str	r2, [r3, #28]
 8009018:	2304      	movs	r3, #4
 800901a:	e08f      	b.n	800913c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	0a5b      	lsrs	r3, r3, #9
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	8952      	ldrh	r2, [r2, #10]
 8009024:	3a01      	subs	r2, #1
 8009026:	4013      	ands	r3, r2
 8009028:	2b00      	cmp	r3, #0
 800902a:	d17a      	bne.n	8009122 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	699b      	ldr	r3, [r3, #24]
 8009032:	4619      	mov	r1, r3
 8009034:	4610      	mov	r0, r2
 8009036:	f7ff fc80 	bl	800893a <get_fat>
 800903a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d801      	bhi.n	8009046 <dir_next+0x8c>
 8009042:	2302      	movs	r3, #2
 8009044:	e07a      	b.n	800913c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800904c:	d101      	bne.n	8009052 <dir_next+0x98>
 800904e:	2301      	movs	r3, #1
 8009050:	e074      	b.n	800913c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	429a      	cmp	r2, r3
 800905a:	d358      	bcc.n	800910e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d104      	bne.n	800906c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	61da      	str	r2, [r3, #28]
 8009068:	2304      	movs	r3, #4
 800906a:	e067      	b.n	800913c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	699b      	ldr	r3, [r3, #24]
 8009072:	4619      	mov	r1, r3
 8009074:	4610      	mov	r0, r2
 8009076:	f7ff fe59 	bl	8008d2c <create_chain>
 800907a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d101      	bne.n	8009086 <dir_next+0xcc>
 8009082:	2307      	movs	r3, #7
 8009084:	e05a      	b.n	800913c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <dir_next+0xd6>
 800908c:	2302      	movs	r3, #2
 800908e:	e055      	b.n	800913c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009096:	d101      	bne.n	800909c <dir_next+0xe2>
 8009098:	2301      	movs	r3, #1
 800909a:	e04f      	b.n	800913c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f7ff fb4d 	bl	800873c <sync_window>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <dir_next+0xf2>
 80090a8:	2301      	movs	r3, #1
 80090aa:	e047      	b.n	800913c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	3330      	adds	r3, #48	; 0x30
 80090b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090b4:	2100      	movs	r1, #0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7ff f977 	bl	80083aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090bc:	2300      	movs	r3, #0
 80090be:	613b      	str	r3, [r7, #16]
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7ff fc1a 	bl	80088fc <clust2sect>
 80090c8:	4602      	mov	r2, r0
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80090ce:	e012      	b.n	80090f6 <dir_next+0x13c>
						fs->wflag = 1;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2201      	movs	r2, #1
 80090d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f7ff fb30 	bl	800873c <sync_window>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <dir_next+0x12c>
 80090e2:	2301      	movs	r3, #1
 80090e4:	e02a      	b.n	800913c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	3301      	adds	r3, #1
 80090ea:	613b      	str	r3, [r7, #16]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	1c5a      	adds	r2, r3, #1
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	895b      	ldrh	r3, [r3, #10]
 80090fa:	461a      	mov	r2, r3
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	4293      	cmp	r3, r2
 8009100:	d3e6      	bcc.n	80090d0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	1ad2      	subs	r2, r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009114:	6979      	ldr	r1, [r7, #20]
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7ff fbf0 	bl	80088fc <clust2sect>
 800911c:	4602      	mov	r2, r0
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	68ba      	ldr	r2, [r7, #8]
 8009126:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009134:	441a      	add	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}

08009144 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009154:	2100      	movs	r1, #0
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f7ff feb4 	bl	8008ec4 <dir_sdi>
 800915c:	4603      	mov	r3, r0
 800915e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009160:	7dfb      	ldrb	r3, [r7, #23]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d12b      	bne.n	80091be <dir_alloc+0x7a>
		n = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	4619      	mov	r1, r3
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7ff fb27 	bl	80087c4 <move_window>
 8009176:	4603      	mov	r3, r0
 8009178:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800917a:	7dfb      	ldrb	r3, [r7, #23]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d11d      	bne.n	80091bc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a1b      	ldr	r3, [r3, #32]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2be5      	cmp	r3, #229	; 0xe5
 8009188:	d004      	beq.n	8009194 <dir_alloc+0x50>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	781b      	ldrb	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d107      	bne.n	80091a4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	3301      	adds	r3, #1
 8009198:	613b      	str	r3, [r7, #16]
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d102      	bne.n	80091a8 <dir_alloc+0x64>
 80091a2:	e00c      	b.n	80091be <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80091a4:	2300      	movs	r3, #0
 80091a6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80091a8:	2101      	movs	r1, #1
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff ff05 	bl	8008fba <dir_next>
 80091b0:	4603      	mov	r3, r0
 80091b2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80091b4:	7dfb      	ldrb	r3, [r7, #23]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d0d7      	beq.n	800916a <dir_alloc+0x26>
 80091ba:	e000      	b.n	80091be <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80091bc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80091be:	7dfb      	ldrb	r3, [r7, #23]
 80091c0:	2b04      	cmp	r3, #4
 80091c2:	d101      	bne.n	80091c8 <dir_alloc+0x84>
 80091c4:	2307      	movs	r3, #7
 80091c6:	75fb      	strb	r3, [r7, #23]
	return res;
 80091c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3718      	adds	r7, #24
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	331a      	adds	r3, #26
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff f83f 	bl	8008264 <ld_word>
 80091e6:	4603      	mov	r3, r0
 80091e8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d109      	bne.n	8009206 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	3314      	adds	r3, #20
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff f834 	bl	8008264 <ld_word>
 80091fc:	4603      	mov	r3, r0
 80091fe:	041b      	lsls	r3, r3, #16
 8009200:	68fa      	ldr	r2, [r7, #12]
 8009202:	4313      	orrs	r3, r2
 8009204:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009206:	68fb      	ldr	r3, [r7, #12]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	331a      	adds	r3, #26
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	b292      	uxth	r2, r2
 8009224:	4611      	mov	r1, r2
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff f857 	bl	80082da <st_word>
	if (fs->fs_type == FS_FAT32) {
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b03      	cmp	r3, #3
 8009232:	d109      	bne.n	8009248 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	f103 0214 	add.w	r2, r3, #20
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	0c1b      	lsrs	r3, r3, #16
 800923e:	b29b      	uxth	r3, r3
 8009240:	4619      	mov	r1, r3
 8009242:	4610      	mov	r0, r2
 8009244:	f7ff f849 	bl	80082da <st_word>
	}
}
 8009248:	bf00      	nop
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800925e:	2100      	movs	r1, #0
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7ff fe2f 	bl	8008ec4 <dir_sdi>
 8009266:	4603      	mov	r3, r0
 8009268:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800926a:	7dfb      	ldrb	r3, [r7, #23]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d001      	beq.n	8009274 <dir_find+0x24>
 8009270:	7dfb      	ldrb	r3, [r7, #23]
 8009272:	e03e      	b.n	80092f2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	69db      	ldr	r3, [r3, #28]
 8009278:	4619      	mov	r1, r3
 800927a:	6938      	ldr	r0, [r7, #16]
 800927c:	f7ff faa2 	bl	80087c4 <move_window>
 8009280:	4603      	mov	r3, r0
 8009282:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009284:	7dfb      	ldrb	r3, [r7, #23]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d12f      	bne.n	80092ea <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6a1b      	ldr	r3, [r3, #32]
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009292:	7bfb      	ldrb	r3, [r7, #15]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d102      	bne.n	800929e <dir_find+0x4e>
 8009298:	2304      	movs	r3, #4
 800929a:	75fb      	strb	r3, [r7, #23]
 800929c:	e028      	b.n	80092f0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	330b      	adds	r3, #11
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a1b      	ldr	r3, [r3, #32]
 80092b4:	330b      	adds	r3, #11
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	f003 0308 	and.w	r3, r3, #8
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <dir_find+0x86>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6a18      	ldr	r0, [r3, #32]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	3324      	adds	r3, #36	; 0x24
 80092c8:	220b      	movs	r2, #11
 80092ca:	4619      	mov	r1, r3
 80092cc:	f7ff f888 	bl	80083e0 <mem_cmp>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00b      	beq.n	80092ee <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80092d6:	2100      	movs	r1, #0
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7ff fe6e 	bl	8008fba <dir_next>
 80092de:	4603      	mov	r3, r0
 80092e0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80092e2:	7dfb      	ldrb	r3, [r7, #23]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0c5      	beq.n	8009274 <dir_find+0x24>
 80092e8:	e002      	b.n	80092f0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80092ea:	bf00      	nop
 80092ec:	e000      	b.n	80092f0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80092ee:	bf00      	nop

	return res;
 80092f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009308:	2101      	movs	r1, #1
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f7ff ff1a 	bl	8009144 <dir_alloc>
 8009310:	4603      	mov	r3, r0
 8009312:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d11c      	bne.n	8009354 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	4619      	mov	r1, r3
 8009320:	68b8      	ldr	r0, [r7, #8]
 8009322:	f7ff fa4f 	bl	80087c4 <move_window>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d111      	bne.n	8009354 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	2220      	movs	r2, #32
 8009336:	2100      	movs	r1, #0
 8009338:	4618      	mov	r0, r3
 800933a:	f7ff f836 	bl	80083aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a18      	ldr	r0, [r3, #32]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	3324      	adds	r3, #36	; 0x24
 8009346:	220b      	movs	r2, #11
 8009348:	4619      	mov	r1, r3
 800934a:	f7ff f80d 	bl	8008368 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2201      	movs	r2, #1
 8009352:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009354:	7bfb      	ldrb	r3, [r7, #15]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	60fb      	str	r3, [r7, #12]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3324      	adds	r3, #36	; 0x24
 8009374:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009376:	220b      	movs	r2, #11
 8009378:	2120      	movs	r1, #32
 800937a:	68b8      	ldr	r0, [r7, #8]
 800937c:	f7ff f815 	bl	80083aa <mem_set>
	si = i = 0; ni = 8;
 8009380:	2300      	movs	r3, #0
 8009382:	613b      	str	r3, [r7, #16]
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	61fb      	str	r3, [r7, #28]
 8009388:	2308      	movs	r3, #8
 800938a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	61fa      	str	r2, [r7, #28]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	4413      	add	r3, r2
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800939a:	7efb      	ldrb	r3, [r7, #27]
 800939c:	2b20      	cmp	r3, #32
 800939e:	d94e      	bls.n	800943e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80093a0:	7efb      	ldrb	r3, [r7, #27]
 80093a2:	2b2f      	cmp	r3, #47	; 0x2f
 80093a4:	d006      	beq.n	80093b4 <create_name+0x54>
 80093a6:	7efb      	ldrb	r3, [r7, #27]
 80093a8:	2b5c      	cmp	r3, #92	; 0x5c
 80093aa:	d110      	bne.n	80093ce <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80093ac:	e002      	b.n	80093b4 <create_name+0x54>
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	3301      	adds	r3, #1
 80093b2:	61fb      	str	r3, [r7, #28]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	4413      	add	r3, r2
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	2b2f      	cmp	r3, #47	; 0x2f
 80093be:	d0f6      	beq.n	80093ae <create_name+0x4e>
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	4413      	add	r3, r2
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b5c      	cmp	r3, #92	; 0x5c
 80093ca:	d0f0      	beq.n	80093ae <create_name+0x4e>
			break;
 80093cc:	e038      	b.n	8009440 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80093ce:	7efb      	ldrb	r3, [r7, #27]
 80093d0:	2b2e      	cmp	r3, #46	; 0x2e
 80093d2:	d003      	beq.n	80093dc <create_name+0x7c>
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d30c      	bcc.n	80093f6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	2b0b      	cmp	r3, #11
 80093e0:	d002      	beq.n	80093e8 <create_name+0x88>
 80093e2:	7efb      	ldrb	r3, [r7, #27]
 80093e4:	2b2e      	cmp	r3, #46	; 0x2e
 80093e6:	d001      	beq.n	80093ec <create_name+0x8c>
 80093e8:	2306      	movs	r3, #6
 80093ea:	e044      	b.n	8009476 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80093ec:	2308      	movs	r3, #8
 80093ee:	613b      	str	r3, [r7, #16]
 80093f0:	230b      	movs	r3, #11
 80093f2:	617b      	str	r3, [r7, #20]
			continue;
 80093f4:	e022      	b.n	800943c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80093f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	da04      	bge.n	8009408 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80093fe:	7efb      	ldrb	r3, [r7, #27]
 8009400:	3b80      	subs	r3, #128	; 0x80
 8009402:	4a1f      	ldr	r2, [pc, #124]	; (8009480 <create_name+0x120>)
 8009404:	5cd3      	ldrb	r3, [r2, r3]
 8009406:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009408:	7efb      	ldrb	r3, [r7, #27]
 800940a:	4619      	mov	r1, r3
 800940c:	481d      	ldr	r0, [pc, #116]	; (8009484 <create_name+0x124>)
 800940e:	f7ff f80e 	bl	800842e <chk_chr>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <create_name+0xbc>
 8009418:	2306      	movs	r3, #6
 800941a:	e02c      	b.n	8009476 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800941c:	7efb      	ldrb	r3, [r7, #27]
 800941e:	2b60      	cmp	r3, #96	; 0x60
 8009420:	d905      	bls.n	800942e <create_name+0xce>
 8009422:	7efb      	ldrb	r3, [r7, #27]
 8009424:	2b7a      	cmp	r3, #122	; 0x7a
 8009426:	d802      	bhi.n	800942e <create_name+0xce>
 8009428:	7efb      	ldrb	r3, [r7, #27]
 800942a:	3b20      	subs	r3, #32
 800942c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	1c5a      	adds	r2, r3, #1
 8009432:	613a      	str	r2, [r7, #16]
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	4413      	add	r3, r2
 8009438:	7efa      	ldrb	r2, [r7, #27]
 800943a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800943c:	e7a6      	b.n	800938c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800943e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	441a      	add	r2, r3
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <create_name+0xf4>
 8009450:	2306      	movs	r3, #6
 8009452:	e010      	b.n	8009476 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2be5      	cmp	r3, #229	; 0xe5
 800945a:	d102      	bne.n	8009462 <create_name+0x102>
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	2205      	movs	r2, #5
 8009460:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009462:	7efb      	ldrb	r3, [r7, #27]
 8009464:	2b20      	cmp	r3, #32
 8009466:	d801      	bhi.n	800946c <create_name+0x10c>
 8009468:	2204      	movs	r2, #4
 800946a:	e000      	b.n	800946e <create_name+0x10e>
 800946c:	2200      	movs	r2, #0
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	330b      	adds	r3, #11
 8009472:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009474:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009476:	4618      	mov	r0, r3
 8009478:	3720      	adds	r7, #32
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	0800f910 	.word	0x0800f910
 8009484:	0800f830 	.word	0x0800f830

08009488 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b086      	sub	sp, #24
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800949c:	e002      	b.n	80094a4 <follow_path+0x1c>
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	3301      	adds	r3, #1
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	2b2f      	cmp	r3, #47	; 0x2f
 80094aa:	d0f8      	beq.n	800949e <follow_path+0x16>
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b5c      	cmp	r3, #92	; 0x5c
 80094b2:	d0f4      	beq.n	800949e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	2200      	movs	r2, #0
 80094b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2b1f      	cmp	r3, #31
 80094c0:	d80a      	bhi.n	80094d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2280      	movs	r2, #128	; 0x80
 80094c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80094ca:	2100      	movs	r1, #0
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff fcf9 	bl	8008ec4 <dir_sdi>
 80094d2:	4603      	mov	r3, r0
 80094d4:	75fb      	strb	r3, [r7, #23]
 80094d6:	e043      	b.n	8009560 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80094d8:	463b      	mov	r3, r7
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f7ff ff3f 	bl	8009360 <create_name>
 80094e2:	4603      	mov	r3, r0
 80094e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80094e6:	7dfb      	ldrb	r3, [r7, #23]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d134      	bne.n	8009556 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7ff feaf 	bl	8009250 <dir_find>
 80094f2:	4603      	mov	r3, r0
 80094f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80094fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00a      	beq.n	800951a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009504:	7dfb      	ldrb	r3, [r7, #23]
 8009506:	2b04      	cmp	r3, #4
 8009508:	d127      	bne.n	800955a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800950a:	7afb      	ldrb	r3, [r7, #11]
 800950c:	f003 0304 	and.w	r3, r3, #4
 8009510:	2b00      	cmp	r3, #0
 8009512:	d122      	bne.n	800955a <follow_path+0xd2>
 8009514:	2305      	movs	r3, #5
 8009516:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009518:	e01f      	b.n	800955a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800951a:	7afb      	ldrb	r3, [r7, #11]
 800951c:	f003 0304 	and.w	r3, r3, #4
 8009520:	2b00      	cmp	r3, #0
 8009522:	d11c      	bne.n	800955e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	799b      	ldrb	r3, [r3, #6]
 8009528:	f003 0310 	and.w	r3, r3, #16
 800952c:	2b00      	cmp	r3, #0
 800952e:	d102      	bne.n	8009536 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009530:	2305      	movs	r3, #5
 8009532:	75fb      	strb	r3, [r7, #23]
 8009534:	e014      	b.n	8009560 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	695b      	ldr	r3, [r3, #20]
 8009540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009544:	4413      	add	r3, r2
 8009546:	4619      	mov	r1, r3
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f7ff fe42 	bl	80091d2 <ld_clust>
 800954e:	4602      	mov	r2, r0
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009554:	e7c0      	b.n	80094d8 <follow_path+0x50>
			if (res != FR_OK) break;
 8009556:	bf00      	nop
 8009558:	e002      	b.n	8009560 <follow_path+0xd8>
				break;
 800955a:	bf00      	nop
 800955c:	e000      	b.n	8009560 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800955e:	bf00      	nop
			}
		}
	}

	return res;
 8009560:	7dfb      	ldrb	r3, [r7, #23]
}
 8009562:	4618      	mov	r0, r3
 8009564:	3718      	adds	r7, #24
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800956a:	b480      	push	{r7}
 800956c:	b087      	sub	sp, #28
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009576:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d031      	beq.n	80095e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	617b      	str	r3, [r7, #20]
 8009586:	e002      	b.n	800958e <get_ldnumber+0x24>
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	3301      	adds	r3, #1
 800958c:	617b      	str	r3, [r7, #20]
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	2b20      	cmp	r3, #32
 8009594:	d903      	bls.n	800959e <get_ldnumber+0x34>
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b3a      	cmp	r3, #58	; 0x3a
 800959c:	d1f4      	bne.n	8009588 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	2b3a      	cmp	r3, #58	; 0x3a
 80095a4:	d11c      	bne.n	80095e0 <get_ldnumber+0x76>
			tp = *path;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	1c5a      	adds	r2, r3, #1
 80095b0:	60fa      	str	r2, [r7, #12]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	3b30      	subs	r3, #48	; 0x30
 80095b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2b09      	cmp	r3, #9
 80095bc:	d80e      	bhi.n	80095dc <get_ldnumber+0x72>
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d10a      	bne.n	80095dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d107      	bne.n	80095dc <get_ldnumber+0x72>
					vol = (int)i;
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	3301      	adds	r3, #1
 80095d4:	617b      	str	r3, [r7, #20]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	e002      	b.n	80095e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80095e0:	2300      	movs	r3, #0
 80095e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80095e4:	693b      	ldr	r3, [r7, #16]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	371c      	adds	r7, #28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
	...

080095f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	70da      	strb	r2, [r3, #3]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800960a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800960c:	6839      	ldr	r1, [r7, #0]
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7ff f8d8 	bl	80087c4 <move_window>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <check_fs+0x2a>
 800961a:	2304      	movs	r3, #4
 800961c:	e038      	b.n	8009690 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3330      	adds	r3, #48	; 0x30
 8009622:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fe1c 	bl	8008264 <ld_word>
 800962c:	4603      	mov	r3, r0
 800962e:	461a      	mov	r2, r3
 8009630:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009634:	429a      	cmp	r2, r3
 8009636:	d001      	beq.n	800963c <check_fs+0x48>
 8009638:	2303      	movs	r3, #3
 800963a:	e029      	b.n	8009690 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009642:	2be9      	cmp	r3, #233	; 0xe9
 8009644:	d009      	beq.n	800965a <check_fs+0x66>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800964c:	2beb      	cmp	r3, #235	; 0xeb
 800964e:	d11e      	bne.n	800968e <check_fs+0x9a>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8009656:	2b90      	cmp	r3, #144	; 0x90
 8009658:	d119      	bne.n	800968e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3330      	adds	r3, #48	; 0x30
 800965e:	3336      	adds	r3, #54	; 0x36
 8009660:	4618      	mov	r0, r3
 8009662:	f7fe fe17 	bl	8008294 <ld_dword>
 8009666:	4603      	mov	r3, r0
 8009668:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800966c:	4a0a      	ldr	r2, [pc, #40]	; (8009698 <check_fs+0xa4>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d101      	bne.n	8009676 <check_fs+0x82>
 8009672:	2300      	movs	r3, #0
 8009674:	e00c      	b.n	8009690 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	3330      	adds	r3, #48	; 0x30
 800967a:	3352      	adds	r3, #82	; 0x52
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe fe09 	bl	8008294 <ld_dword>
 8009682:	4603      	mov	r3, r0
 8009684:	4a05      	ldr	r2, [pc, #20]	; (800969c <check_fs+0xa8>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d101      	bne.n	800968e <check_fs+0x9a>
 800968a:	2300      	movs	r3, #0
 800968c:	e000      	b.n	8009690 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800968e:	2302      	movs	r3, #2
}
 8009690:	4618      	mov	r0, r3
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	00544146 	.word	0x00544146
 800969c:	33544146 	.word	0x33544146

080096a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b096      	sub	sp, #88	; 0x58
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	4613      	mov	r3, r2
 80096ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2200      	movs	r2, #0
 80096b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80096b4:	68f8      	ldr	r0, [r7, #12]
 80096b6:	f7ff ff58 	bl	800956a <get_ldnumber>
 80096ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80096bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096be:	2b00      	cmp	r3, #0
 80096c0:	da01      	bge.n	80096c6 <find_volume+0x26>
 80096c2:	230b      	movs	r3, #11
 80096c4:	e22d      	b.n	8009b22 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80096c6:	4aa1      	ldr	r2, [pc, #644]	; (800994c <find_volume+0x2ac>)
 80096c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80096d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d101      	bne.n	80096da <find_volume+0x3a>
 80096d6:	230c      	movs	r3, #12
 80096d8:	e223      	b.n	8009b22 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	f023 0301 	bic.w	r3, r3, #1
 80096e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d01a      	beq.n	8009726 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80096f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f2:	785b      	ldrb	r3, [r3, #1]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe fd17 	bl	8008128 <disk_status>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009700:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10c      	bne.n	8009726 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d007      	beq.n	8009722 <find_volume+0x82>
 8009712:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009716:	f003 0304 	and.w	r3, r3, #4
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800971e:	230a      	movs	r3, #10
 8009720:	e1ff      	b.n	8009b22 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009722:	2300      	movs	r3, #0
 8009724:	e1fd      	b.n	8009b22 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009728:	2200      	movs	r2, #0
 800972a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800972c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972e:	b2da      	uxtb	r2, r3
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009736:	785b      	ldrb	r3, [r3, #1]
 8009738:	4618      	mov	r0, r3
 800973a:	f7fe fd0f 	bl	800815c <disk_initialize>
 800973e:	4603      	mov	r3, r0
 8009740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009748:	f003 0301 	and.w	r3, r3, #1
 800974c:	2b00      	cmp	r3, #0
 800974e:	d001      	beq.n	8009754 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009750:	2303      	movs	r3, #3
 8009752:	e1e6      	b.n	8009b22 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009754:	79fb      	ldrb	r3, [r7, #7]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d007      	beq.n	800976a <find_volume+0xca>
 800975a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800975e:	f003 0304 	and.w	r3, r3, #4
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009766:	230a      	movs	r3, #10
 8009768:	e1db      	b.n	8009b22 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800976a:	2300      	movs	r3, #0
 800976c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800976e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009770:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009772:	f7ff ff3f 	bl	80095f4 <check_fs>
 8009776:	4603      	mov	r3, r0
 8009778:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800977c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009780:	2b02      	cmp	r3, #2
 8009782:	d149      	bne.n	8009818 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009784:	2300      	movs	r3, #0
 8009786:	643b      	str	r3, [r7, #64]	; 0x40
 8009788:	e01e      	b.n	80097c8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800978a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009792:	011b      	lsls	r3, r3, #4
 8009794:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009798:	4413      	add	r3, r2
 800979a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979e:	3304      	adds	r3, #4
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d006      	beq.n	80097b4 <find_volume+0x114>
 80097a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a8:	3308      	adds	r3, #8
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fe fd72 	bl	8008294 <ld_dword>
 80097b0:	4602      	mov	r2, r0
 80097b2:	e000      	b.n	80097b6 <find_volume+0x116>
 80097b4:	2200      	movs	r2, #0
 80097b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	3358      	adds	r3, #88	; 0x58
 80097bc:	443b      	add	r3, r7
 80097be:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80097c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097c4:	3301      	adds	r3, #1
 80097c6:	643b      	str	r3, [r7, #64]	; 0x40
 80097c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ca:	2b03      	cmp	r3, #3
 80097cc:	d9dd      	bls.n	800978a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80097ce:	2300      	movs	r3, #0
 80097d0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80097d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d002      	beq.n	80097de <find_volume+0x13e>
 80097d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097da:	3b01      	subs	r3, #1
 80097dc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80097de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	3358      	adds	r3, #88	; 0x58
 80097e4:	443b      	add	r3, r7
 80097e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80097ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80097ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d005      	beq.n	80097fe <find_volume+0x15e>
 80097f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80097f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097f6:	f7ff fefd 	bl	80095f4 <check_fs>
 80097fa:	4603      	mov	r3, r0
 80097fc:	e000      	b.n	8009800 <find_volume+0x160>
 80097fe:	2303      	movs	r3, #3
 8009800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009808:	2b01      	cmp	r3, #1
 800980a:	d905      	bls.n	8009818 <find_volume+0x178>
 800980c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800980e:	3301      	adds	r3, #1
 8009810:	643b      	str	r3, [r7, #64]	; 0x40
 8009812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009814:	2b03      	cmp	r3, #3
 8009816:	d9e2      	bls.n	80097de <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800981c:	2b04      	cmp	r3, #4
 800981e:	d101      	bne.n	8009824 <find_volume+0x184>
 8009820:	2301      	movs	r3, #1
 8009822:	e17e      	b.n	8009b22 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009824:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009828:	2b01      	cmp	r3, #1
 800982a:	d901      	bls.n	8009830 <find_volume+0x190>
 800982c:	230d      	movs	r3, #13
 800982e:	e178      	b.n	8009b22 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	3330      	adds	r3, #48	; 0x30
 8009834:	330b      	adds	r3, #11
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe fd14 	bl	8008264 <ld_word>
 800983c:	4603      	mov	r3, r0
 800983e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009842:	d001      	beq.n	8009848 <find_volume+0x1a8>
 8009844:	230d      	movs	r3, #13
 8009846:	e16c      	b.n	8009b22 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984a:	3330      	adds	r3, #48	; 0x30
 800984c:	3316      	adds	r3, #22
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe fd08 	bl	8008264 <ld_word>
 8009854:	4603      	mov	r3, r0
 8009856:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800985a:	2b00      	cmp	r3, #0
 800985c:	d106      	bne.n	800986c <find_volume+0x1cc>
 800985e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009860:	3330      	adds	r3, #48	; 0x30
 8009862:	3324      	adds	r3, #36	; 0x24
 8009864:	4618      	mov	r0, r3
 8009866:	f7fe fd15 	bl	8008294 <ld_dword>
 800986a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009870:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009874:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	789b      	ldrb	r3, [r3, #2]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d005      	beq.n	8009890 <find_volume+0x1f0>
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	789b      	ldrb	r3, [r3, #2]
 8009888:	2b02      	cmp	r3, #2
 800988a:	d001      	beq.n	8009890 <find_volume+0x1f0>
 800988c:	230d      	movs	r3, #13
 800988e:	e148      	b.n	8009b22 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009892:	789b      	ldrb	r3, [r3, #2]
 8009894:	461a      	mov	r2, r3
 8009896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009898:	fb02 f303 	mul.w	r3, r2, r3
 800989c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80098aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ac:	895b      	ldrh	r3, [r3, #10]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d008      	beq.n	80098c4 <find_volume+0x224>
 80098b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b4:	895b      	ldrh	r3, [r3, #10]
 80098b6:	461a      	mov	r2, r3
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	895b      	ldrh	r3, [r3, #10]
 80098bc:	3b01      	subs	r3, #1
 80098be:	4013      	ands	r3, r2
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <find_volume+0x228>
 80098c4:	230d      	movs	r3, #13
 80098c6:	e12c      	b.n	8009b22 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80098c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ca:	3330      	adds	r3, #48	; 0x30
 80098cc:	3311      	adds	r3, #17
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fe fcc8 	bl	8008264 <ld_word>
 80098d4:	4603      	mov	r3, r0
 80098d6:	461a      	mov	r2, r3
 80098d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80098dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098de:	891b      	ldrh	r3, [r3, #8]
 80098e0:	f003 030f 	and.w	r3, r3, #15
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <find_volume+0x24e>
 80098ea:	230d      	movs	r3, #13
 80098ec:	e119      	b.n	8009b22 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80098ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f0:	3330      	adds	r3, #48	; 0x30
 80098f2:	3313      	adds	r3, #19
 80098f4:	4618      	mov	r0, r3
 80098f6:	f7fe fcb5 	bl	8008264 <ld_word>
 80098fa:	4603      	mov	r3, r0
 80098fc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80098fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009900:	2b00      	cmp	r3, #0
 8009902:	d106      	bne.n	8009912 <find_volume+0x272>
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	3330      	adds	r3, #48	; 0x30
 8009908:	3320      	adds	r3, #32
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fcc2 	bl	8008294 <ld_dword>
 8009910:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009914:	3330      	adds	r3, #48	; 0x30
 8009916:	330e      	adds	r3, #14
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fca3 	bl	8008264 <ld_word>
 800991e:	4603      	mov	r3, r0
 8009920:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009922:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <find_volume+0x28c>
 8009928:	230d      	movs	r3, #13
 800992a:	e0fa      	b.n	8009b22 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800992c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800992e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009930:	4413      	add	r3, r2
 8009932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009934:	8912      	ldrh	r2, [r2, #8]
 8009936:	0912      	lsrs	r2, r2, #4
 8009938:	b292      	uxth	r2, r2
 800993a:	4413      	add	r3, r2
 800993c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800993e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	429a      	cmp	r2, r3
 8009944:	d204      	bcs.n	8009950 <find_volume+0x2b0>
 8009946:	230d      	movs	r3, #13
 8009948:	e0eb      	b.n	8009b22 <find_volume+0x482>
 800994a:	bf00      	nop
 800994c:	20001df8 	.word	0x20001df8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009950:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009958:	8952      	ldrh	r2, [r2, #10]
 800995a:	fbb3 f3f2 	udiv	r3, r3, r2
 800995e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	2b00      	cmp	r3, #0
 8009964:	d101      	bne.n	800996a <find_volume+0x2ca>
 8009966:	230d      	movs	r3, #13
 8009968:	e0db      	b.n	8009b22 <find_volume+0x482>
		fmt = FS_FAT32;
 800996a:	2303      	movs	r3, #3
 800996c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009976:	4293      	cmp	r3, r2
 8009978:	d802      	bhi.n	8009980 <find_volume+0x2e0>
 800997a:	2302      	movs	r3, #2
 800997c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009986:	4293      	cmp	r3, r2
 8009988:	d802      	bhi.n	8009990 <find_volume+0x2f0>
 800998a:	2301      	movs	r3, #1
 800998c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	1c9a      	adds	r2, r3, #2
 8009994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009996:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8009998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800999c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800999e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80099a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099a2:	441a      	add	r2, r3
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80099a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	441a      	add	r2, r3
 80099ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80099b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099b6:	2b03      	cmp	r3, #3
 80099b8:	d11e      	bne.n	80099f8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80099ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099bc:	3330      	adds	r3, #48	; 0x30
 80099be:	332a      	adds	r3, #42	; 0x2a
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fe fc4f 	bl	8008264 <ld_word>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d001      	beq.n	80099d0 <find_volume+0x330>
 80099cc:	230d      	movs	r3, #13
 80099ce:	e0a8      	b.n	8009b22 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80099d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d2:	891b      	ldrh	r3, [r3, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <find_volume+0x33c>
 80099d8:	230d      	movs	r3, #13
 80099da:	e0a2      	b.n	8009b22 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80099dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099de:	3330      	adds	r3, #48	; 0x30
 80099e0:	332c      	adds	r3, #44	; 0x2c
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fe fc56 	bl	8008294 <ld_dword>
 80099e8:	4602      	mov	r2, r0
 80099ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ec:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80099ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	647b      	str	r3, [r7, #68]	; 0x44
 80099f6:	e01f      	b.n	8009a38 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80099f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fa:	891b      	ldrh	r3, [r3, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <find_volume+0x364>
 8009a00:	230d      	movs	r3, #13
 8009a02:	e08e      	b.n	8009b22 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a06:	6a1a      	ldr	r2, [r3, #32]
 8009a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a0a:	441a      	add	r2, r3
 8009a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a0e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	d103      	bne.n	8009a20 <find_volume+0x380>
 8009a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a1a:	695b      	ldr	r3, [r3, #20]
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	e00a      	b.n	8009a36 <find_volume+0x396>
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	695a      	ldr	r2, [r3, #20]
 8009a24:	4613      	mov	r3, r2
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	4413      	add	r3, r2
 8009a2a:	085a      	lsrs	r2, r3, #1
 8009a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	f003 0301 	and.w	r3, r3, #1
 8009a34:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009a36:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a3a:	699a      	ldr	r2, [r3, #24]
 8009a3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a3e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009a42:	0a5b      	lsrs	r3, r3, #9
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d201      	bcs.n	8009a4c <find_volume+0x3ac>
 8009a48:	230d      	movs	r3, #13
 8009a4a:	e06a      	b.n	8009b22 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a52:	611a      	str	r2, [r3, #16]
 8009a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a56:	691a      	ldr	r2, [r3, #16]
 8009a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5e:	2280      	movs	r2, #128	; 0x80
 8009a60:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009a62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a66:	2b03      	cmp	r3, #3
 8009a68:	d149      	bne.n	8009afe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6c:	3330      	adds	r3, #48	; 0x30
 8009a6e:	3330      	adds	r3, #48	; 0x30
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe fbf7 	bl	8008264 <ld_word>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d140      	bne.n	8009afe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009a7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a7e:	3301      	adds	r3, #1
 8009a80:	4619      	mov	r1, r3
 8009a82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a84:	f7fe fe9e 	bl	80087c4 <move_window>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d137      	bne.n	8009afe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a90:	2200      	movs	r2, #0
 8009a92:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	3330      	adds	r3, #48	; 0x30
 8009a98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fe fbe1 	bl	8008264 <ld_word>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d127      	bne.n	8009afe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	3330      	adds	r3, #48	; 0x30
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7fe fbee 	bl	8008294 <ld_dword>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	4a1c      	ldr	r2, [pc, #112]	; (8009b2c <find_volume+0x48c>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d11e      	bne.n	8009afe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	3330      	adds	r3, #48	; 0x30
 8009ac4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7fe fbe3 	bl	8008294 <ld_dword>
 8009ace:	4603      	mov	r3, r0
 8009ad0:	4a17      	ldr	r2, [pc, #92]	; (8009b30 <find_volume+0x490>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d113      	bne.n	8009afe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	3330      	adds	r3, #48	; 0x30
 8009ada:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7fe fbd8 	bl	8008294 <ld_dword>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	3330      	adds	r3, #48	; 0x30
 8009aee:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7fe fbce 	bl	8008294 <ld_dword>
 8009af8:	4602      	mov	r2, r0
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b00:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009b04:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009b06:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <find_volume+0x494>)
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	4b09      	ldr	r3, [pc, #36]	; (8009b34 <find_volume+0x494>)
 8009b10:	801a      	strh	r2, [r3, #0]
 8009b12:	4b08      	ldr	r3, [pc, #32]	; (8009b34 <find_volume+0x494>)
 8009b14:	881a      	ldrh	r2, [r3, #0]
 8009b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b18:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009b1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b1c:	f7fe fdea 	bl	80086f4 <clear_lock>
#endif
	return FR_OK;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3758      	adds	r7, #88	; 0x58
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	41615252 	.word	0x41615252
 8009b30:	61417272 	.word	0x61417272
 8009b34:	20001dfc 	.word	0x20001dfc

08009b38 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009b42:	2309      	movs	r3, #9
 8009b44:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d01c      	beq.n	8009b86 <validate+0x4e>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d018      	beq.n	8009b86 <validate+0x4e>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d013      	beq.n	8009b86 <validate+0x4e>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	889a      	ldrh	r2, [r3, #4]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	88db      	ldrh	r3, [r3, #6]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d10c      	bne.n	8009b86 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	785b      	ldrb	r3, [r3, #1]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f7fe fad8 	bl	8008128 <disk_status>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <validate+0x4e>
			res = FR_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009b86:	7bfb      	ldrb	r3, [r7, #15]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d102      	bne.n	8009b92 <validate+0x5a>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	e000      	b.n	8009b94 <validate+0x5c>
 8009b92:	2300      	movs	r3, #0
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	6013      	str	r3, [r2, #0]
	return res;
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b088      	sub	sp, #32
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009bb6:	f107 0310 	add.w	r3, r7, #16
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff fcd5 	bl	800956a <get_ldnumber>
 8009bc0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	da01      	bge.n	8009bcc <f_mount+0x28>
 8009bc8:	230b      	movs	r3, #11
 8009bca:	e02b      	b.n	8009c24 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009bcc:	4a17      	ldr	r2, [pc, #92]	; (8009c2c <f_mount+0x88>)
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bd4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d005      	beq.n	8009be8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009bdc:	69b8      	ldr	r0, [r7, #24]
 8009bde:	f7fe fd89 	bl	80086f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	2200      	movs	r2, #0
 8009be6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d002      	beq.n	8009bf4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	490d      	ldr	r1, [pc, #52]	; (8009c2c <f_mount+0x88>)
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <f_mount+0x66>
 8009c04:	79fb      	ldrb	r3, [r7, #7]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d001      	beq.n	8009c0e <f_mount+0x6a>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e00a      	b.n	8009c24 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009c0e:	f107 010c 	add.w	r1, r7, #12
 8009c12:	f107 0308 	add.w	r3, r7, #8
 8009c16:	2200      	movs	r2, #0
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff fd41 	bl	80096a0 <find_volume>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3720      	adds	r7, #32
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	20001df8 	.word	0x20001df8

08009c30 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b098      	sub	sp, #96	; 0x60
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	4613      	mov	r3, r2
 8009c3c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <f_open+0x18>
 8009c44:	2309      	movs	r3, #9
 8009c46:	e1ad      	b.n	8009fa4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009c48:	79fb      	ldrb	r3, [r7, #7]
 8009c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c4e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009c50:	79fa      	ldrb	r2, [r7, #7]
 8009c52:	f107 0110 	add.w	r1, r7, #16
 8009c56:	f107 0308 	add.w	r3, r7, #8
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7ff fd20 	bl	80096a0 <find_volume>
 8009c60:	4603      	mov	r3, r0
 8009c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f040 8191 	bne.w	8009f92 <f_open+0x362>
		dj.obj.fs = fs;
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009c74:	68ba      	ldr	r2, [r7, #8]
 8009c76:	f107 0314 	add.w	r3, r7, #20
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7ff fc03 	bl	8009488 <follow_path>
 8009c82:	4603      	mov	r3, r0
 8009c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009c88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d11a      	bne.n	8009cc6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009c90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c94:	b25b      	sxtb	r3, r3
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	da03      	bge.n	8009ca2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8009c9a:	2306      	movs	r3, #6
 8009c9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ca0:	e011      	b.n	8009cc6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ca2:	79fb      	ldrb	r3, [r7, #7]
 8009ca4:	f023 0301 	bic.w	r3, r3, #1
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	bf14      	ite	ne
 8009cac:	2301      	movne	r3, #1
 8009cae:	2300      	moveq	r3, #0
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f107 0314 	add.w	r3, r7, #20
 8009cb8:	4611      	mov	r1, r2
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7fe fbd2 	bl	8008464 <chk_lock>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009cc6:	79fb      	ldrb	r3, [r7, #7]
 8009cc8:	f003 031c 	and.w	r3, r3, #28
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d07f      	beq.n	8009dd0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009cd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d017      	beq.n	8009d08 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009cd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cdc:	2b04      	cmp	r3, #4
 8009cde:	d10e      	bne.n	8009cfe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009ce0:	f7fe fc1c 	bl	800851c <enq_lock>
 8009ce4:	4603      	mov	r3, r0
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d006      	beq.n	8009cf8 <f_open+0xc8>
 8009cea:	f107 0314 	add.w	r3, r7, #20
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7ff fb03 	bl	80092fa <dir_register>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	e000      	b.n	8009cfa <f_open+0xca>
 8009cf8:	2312      	movs	r3, #18
 8009cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	f043 0308 	orr.w	r3, r3, #8
 8009d04:	71fb      	strb	r3, [r7, #7]
 8009d06:	e010      	b.n	8009d2a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009d08:	7ebb      	ldrb	r3, [r7, #26]
 8009d0a:	f003 0311 	and.w	r3, r3, #17
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <f_open+0xea>
					res = FR_DENIED;
 8009d12:	2307      	movs	r3, #7
 8009d14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009d18:	e007      	b.n	8009d2a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d002      	beq.n	8009d2a <f_open+0xfa>
 8009d24:	2308      	movs	r3, #8
 8009d26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d168      	bne.n	8009e04 <f_open+0x1d4>
 8009d32:	79fb      	ldrb	r3, [r7, #7]
 8009d34:	f003 0308 	and.w	r3, r3, #8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d063      	beq.n	8009e04 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009d3c:	f7fd ffa4 	bl	8007c88 <get_fattime>
 8009d40:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d44:	330e      	adds	r3, #14
 8009d46:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7fe fae1 	bl	8008310 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d50:	3316      	adds	r3, #22
 8009d52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fe fadb 	bl	8008310 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5c:	330b      	adds	r3, #11
 8009d5e:	2220      	movs	r2, #32
 8009d60:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d66:	4611      	mov	r1, r2
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7ff fa32 	bl	80091d2 <ld_clust>
 8009d6e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d74:	2200      	movs	r2, #0
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff fa4a 	bl	8009210 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d7e:	331c      	adds	r3, #28
 8009d80:	2100      	movs	r1, #0
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fac4 	bl	8008310 <st_dword>
					fs->wflag = 1;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d037      	beq.n	8009e04 <f_open+0x1d4>
						dw = fs->winsect;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009d9a:	f107 0314 	add.w	r3, r7, #20
 8009d9e:	2200      	movs	r2, #0
 8009da0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe ff5d 	bl	8008c62 <remove_chain>
 8009da8:	4603      	mov	r3, r0
 8009daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d126      	bne.n	8009e04 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fd02 	bl	80087c4 <move_window>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009dca:	3a01      	subs	r2, #1
 8009dcc:	60da      	str	r2, [r3, #12]
 8009dce:	e019      	b.n	8009e04 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d115      	bne.n	8009e04 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009dd8:	7ebb      	ldrb	r3, [r7, #26]
 8009dda:	f003 0310 	and.w	r3, r3, #16
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d003      	beq.n	8009dea <f_open+0x1ba>
					res = FR_NO_FILE;
 8009de2:	2304      	movs	r3, #4
 8009de4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009de8:	e00c      	b.n	8009e04 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009dea:	79fb      	ldrb	r3, [r7, #7]
 8009dec:	f003 0302 	and.w	r3, r3, #2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d007      	beq.n	8009e04 <f_open+0x1d4>
 8009df4:	7ebb      	ldrb	r3, [r7, #26]
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d002      	beq.n	8009e04 <f_open+0x1d4>
						res = FR_DENIED;
 8009dfe:	2307      	movs	r3, #7
 8009e00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009e04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d128      	bne.n	8009e5e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009e0c:	79fb      	ldrb	r3, [r7, #7]
 8009e0e:	f003 0308 	and.w	r3, r3, #8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009e16:	79fb      	ldrb	r3, [r7, #7]
 8009e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e1c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	f023 0301 	bic.w	r3, r3, #1
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	bf14      	ite	ne
 8009e36:	2301      	movne	r3, #1
 8009e38:	2300      	moveq	r3, #0
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	461a      	mov	r2, r3
 8009e3e:	f107 0314 	add.w	r3, r7, #20
 8009e42:	4611      	mov	r1, r2
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fe fb8b 	bl	8008560 <inc_lock>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d102      	bne.n	8009e5e <f_open+0x22e>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f040 8095 	bne.w	8009f92 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	4618      	mov	r0, r3
 8009e70:	f7ff f9af 	bl	80091d2 <ld_clust>
 8009e74:	4602      	mov	r2, r0
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7c:	331c      	adds	r3, #28
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fe fa08 	bl	8008294 <ld_dword>
 8009e84:	4602      	mov	r2, r0
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	88da      	ldrh	r2, [r3, #6]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	79fa      	ldrb	r2, [r7, #7]
 8009ea2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	3330      	adds	r3, #48	; 0x30
 8009eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fe fa72 	bl	80083aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009ec6:	79fb      	ldrb	r3, [r7, #7]
 8009ec8:	f003 0320 	and.w	r3, r3, #32
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d060      	beq.n	8009f92 <f_open+0x362>
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d05c      	beq.n	8009f92 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	68da      	ldr	r2, [r3, #12]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	895b      	ldrh	r3, [r3, #10]
 8009ee4:	025b      	lsls	r3, r3, #9
 8009ee6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	657b      	str	r3, [r7, #84]	; 0x54
 8009ef4:	e016      	b.n	8009f24 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fe fd1d 	bl	800893a <get_fat>
 8009f00:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009f02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d802      	bhi.n	8009f0e <f_open+0x2de>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f14:	d102      	bne.n	8009f1c <f_open+0x2ec>
 8009f16:	2301      	movs	r3, #1
 8009f18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	657b      	str	r3, [r7, #84]	; 0x54
 8009f24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d103      	bne.n	8009f34 <f_open+0x304>
 8009f2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d8e0      	bhi.n	8009ef6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f38:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009f3a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d127      	bne.n	8009f92 <f_open+0x362>
 8009f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d022      	beq.n	8009f92 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fe fcd3 	bl	80088fc <clust2sect>
 8009f56:	6478      	str	r0, [r7, #68]	; 0x44
 8009f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d103      	bne.n	8009f66 <f_open+0x336>
						res = FR_INT_ERR;
 8009f5e:	2302      	movs	r3, #2
 8009f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009f64:	e015      	b.n	8009f92 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009f66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f68:	0a5a      	lsrs	r2, r3, #9
 8009f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f6c:	441a      	add	r2, r3
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	7858      	ldrb	r0, [r3, #1]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6a1a      	ldr	r2, [r3, #32]
 8009f80:	2301      	movs	r3, #1
 8009f82:	f7fe f911 	bl	80081a8 <disk_read>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <f_open+0x362>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009f92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d002      	beq.n	8009fa0 <f_open+0x370>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009fa0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3760      	adds	r7, #96	; 0x60
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08e      	sub	sp, #56	; 0x38
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f107 0214 	add.w	r2, r7, #20
 8009fca:	4611      	mov	r1, r2
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff fdb3 	bl	8009b38 <validate>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009fd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d107      	bne.n	8009ff0 <f_read+0x44>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	7d5b      	ldrb	r3, [r3, #21]
 8009fe4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009fe8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d002      	beq.n	8009ff6 <f_read+0x4a>
 8009ff0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009ff4:	e115      	b.n	800a222 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	7d1b      	ldrb	r3, [r3, #20]
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <f_read+0x5a>
 800a002:	2307      	movs	r3, #7
 800a004:	e10d      	b.n	800a222 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	68da      	ldr	r2, [r3, #12]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	699b      	ldr	r3, [r3, #24]
 800a00e:	1ad3      	subs	r3, r2, r3
 800a010:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	429a      	cmp	r2, r3
 800a018:	f240 80fe 	bls.w	800a218 <f_read+0x26c>
 800a01c:	6a3b      	ldr	r3, [r7, #32]
 800a01e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a020:	e0fa      	b.n	800a218 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f040 80c6 	bne.w	800a1bc <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	699b      	ldr	r3, [r3, #24]
 800a034:	0a5b      	lsrs	r3, r3, #9
 800a036:	697a      	ldr	r2, [r7, #20]
 800a038:	8952      	ldrh	r2, [r2, #10]
 800a03a:	3a01      	subs	r2, #1
 800a03c:	4013      	ands	r3, r2
 800a03e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d12f      	bne.n	800a0a6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	699b      	ldr	r3, [r3, #24]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d103      	bne.n	800a056 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	633b      	str	r3, [r7, #48]	; 0x30
 800a054:	e013      	b.n	800a07e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d007      	beq.n	800a06e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	699b      	ldr	r3, [r3, #24]
 800a062:	4619      	mov	r1, r3
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f7fe fef9 	bl	8008e5c <clmt_clust>
 800a06a:	6338      	str	r0, [r7, #48]	; 0x30
 800a06c:	e007      	b.n	800a07e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	69db      	ldr	r3, [r3, #28]
 800a074:	4619      	mov	r1, r3
 800a076:	4610      	mov	r0, r2
 800a078:	f7fe fc5f 	bl	800893a <get_fat>
 800a07c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	2b01      	cmp	r3, #1
 800a082:	d804      	bhi.n	800a08e <f_read+0xe2>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2202      	movs	r2, #2
 800a088:	755a      	strb	r2, [r3, #21]
 800a08a:	2302      	movs	r3, #2
 800a08c:	e0c9      	b.n	800a222 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a094:	d104      	bne.n	800a0a0 <f_read+0xf4>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	755a      	strb	r2, [r3, #21]
 800a09c:	2301      	movs	r3, #1
 800a09e:	e0c0      	b.n	800a222 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0a4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	4610      	mov	r0, r2
 800a0b0:	f7fe fc24 	bl	80088fc <clust2sect>
 800a0b4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d104      	bne.n	800a0c6 <f_read+0x11a>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2202      	movs	r2, #2
 800a0c0:	755a      	strb	r2, [r3, #21]
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	e0ad      	b.n	800a222 <f_read+0x276>
			sect += csect;
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	0a5b      	lsrs	r3, r3, #9
 800a0d2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d039      	beq.n	800a14e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a0da:	69fa      	ldr	r2, [r7, #28]
 800a0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0de:	4413      	add	r3, r2
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	8952      	ldrh	r2, [r2, #10]
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d905      	bls.n	800a0f4 <f_read+0x148>
					cc = fs->csize - csect;
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	895b      	ldrh	r3, [r3, #10]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	7858      	ldrb	r0, [r3, #1]
 800a0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fa:	69ba      	ldr	r2, [r7, #24]
 800a0fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0fe:	f7fe f853 	bl	80081a8 <disk_read>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d004      	beq.n	800a112 <f_read+0x166>
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2201      	movs	r2, #1
 800a10c:	755a      	strb	r2, [r3, #21]
 800a10e:	2301      	movs	r3, #1
 800a110:	e087      	b.n	800a222 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	7d1b      	ldrb	r3, [r3, #20]
 800a116:	b25b      	sxtb	r3, r3
 800a118:	2b00      	cmp	r3, #0
 800a11a:	da14      	bge.n	800a146 <f_read+0x19a>
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6a1a      	ldr	r2, [r3, #32]
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a126:	429a      	cmp	r2, r3
 800a128:	d90d      	bls.n	800a146 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6a1a      	ldr	r2, [r3, #32]
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	025b      	lsls	r3, r3, #9
 800a134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a136:	18d0      	adds	r0, r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3330      	adds	r3, #48	; 0x30
 800a13c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a140:	4619      	mov	r1, r3
 800a142:	f7fe f911 	bl	8008368 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a148:	025b      	lsls	r3, r3, #9
 800a14a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a14c:	e050      	b.n	800a1f0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	6a1b      	ldr	r3, [r3, #32]
 800a152:	69ba      	ldr	r2, [r7, #24]
 800a154:	429a      	cmp	r2, r3
 800a156:	d02e      	beq.n	800a1b6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	7d1b      	ldrb	r3, [r3, #20]
 800a15c:	b25b      	sxtb	r3, r3
 800a15e:	2b00      	cmp	r3, #0
 800a160:	da18      	bge.n	800a194 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	7858      	ldrb	r0, [r3, #1]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6a1a      	ldr	r2, [r3, #32]
 800a170:	2301      	movs	r3, #1
 800a172:	f7fe f839 	bl	80081e8 <disk_write>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d004      	beq.n	800a186 <f_read+0x1da>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2201      	movs	r2, #1
 800a180:	755a      	strb	r2, [r3, #21]
 800a182:	2301      	movs	r3, #1
 800a184:	e04d      	b.n	800a222 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	7d1b      	ldrb	r3, [r3, #20]
 800a18a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	7858      	ldrb	r0, [r3, #1]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a19e:	2301      	movs	r3, #1
 800a1a0:	69ba      	ldr	r2, [r7, #24]
 800a1a2:	f7fe f801 	bl	80081a8 <disk_read>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d004      	beq.n	800a1b6 <f_read+0x20a>
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	755a      	strb	r2, [r3, #21]
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e035      	b.n	800a222 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	69ba      	ldr	r2, [r7, #24]
 800a1ba:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	699b      	ldr	r3, [r3, #24]
 800a1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1c4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a1ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d901      	bls.n	800a1d6 <f_read+0x22a>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1e4:	4413      	add	r3, r2
 800a1e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1ec:	f7fe f8bc 	bl	8008368 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a1f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	4413      	add	r3, r2
 800a1f6:	627b      	str	r3, [r7, #36]	; 0x24
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	699a      	ldr	r2, [r3, #24]
 800a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fe:	441a      	add	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	619a      	str	r2, [r3, #24]
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20a:	441a      	add	r2, r3
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	601a      	str	r2, [r3, #0]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f47f af01 	bne.w	800a022 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3738      	adds	r7, #56	; 0x38
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b086      	sub	sp, #24
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f107 0208 	add.w	r2, r7, #8
 800a238:	4611      	mov	r1, r2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7ff fc7c 	bl	8009b38 <validate>
 800a240:	4603      	mov	r3, r0
 800a242:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d168      	bne.n	800a31c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	7d1b      	ldrb	r3, [r3, #20]
 800a24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a252:	2b00      	cmp	r3, #0
 800a254:	d062      	beq.n	800a31c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	7d1b      	ldrb	r3, [r3, #20]
 800a25a:	b25b      	sxtb	r3, r3
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	da15      	bge.n	800a28c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	7858      	ldrb	r0, [r3, #1]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a1a      	ldr	r2, [r3, #32]
 800a26e:	2301      	movs	r3, #1
 800a270:	f7fd ffba 	bl	80081e8 <disk_write>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <f_sync+0x54>
 800a27a:	2301      	movs	r3, #1
 800a27c:	e04f      	b.n	800a31e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	7d1b      	ldrb	r3, [r3, #20]
 800a282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a286:	b2da      	uxtb	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a28c:	f7fd fcfc 	bl	8007c88 <get_fattime>
 800a290:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	4619      	mov	r1, r3
 800a29a:	4610      	mov	r0, r2
 800a29c:	f7fe fa92 	bl	80087c4 <move_window>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a2a4:	7dfb      	ldrb	r3, [r7, #23]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d138      	bne.n	800a31c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	330b      	adds	r3, #11
 800a2b4:	781a      	ldrb	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	330b      	adds	r3, #11
 800a2ba:	f042 0220 	orr.w	r2, r2, #32
 800a2be:	b2d2      	uxtb	r2, r2
 800a2c0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6818      	ldr	r0, [r3, #0]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	689b      	ldr	r3, [r3, #8]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	68f9      	ldr	r1, [r7, #12]
 800a2ce:	f7fe ff9f 	bl	8009210 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	f103 021c 	add.w	r2, r3, #28
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	4619      	mov	r1, r3
 800a2de:	4610      	mov	r0, r2
 800a2e0:	f7fe f816 	bl	8008310 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	3316      	adds	r3, #22
 800a2e8:	6939      	ldr	r1, [r7, #16]
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f7fe f810 	bl	8008310 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3312      	adds	r3, #18
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7fd ffef 	bl	80082da <st_word>
					fs->wflag = 1;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	2201      	movs	r2, #1
 800a300:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	4618      	mov	r0, r3
 800a306:	f7fe fa8b 	bl	8008820 <sync_fs>
 800a30a:	4603      	mov	r3, r0
 800a30c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	7d1b      	ldrb	r3, [r3, #20]
 800a312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a316:	b2da      	uxtb	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3718      	adds	r7, #24
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b084      	sub	sp, #16
 800a32a:	af00      	add	r7, sp, #0
 800a32c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7ff ff7b 	bl	800a22a <f_sync>
 800a334:	4603      	mov	r3, r0
 800a336:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a338:	7bfb      	ldrb	r3, [r7, #15]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d118      	bne.n	800a370 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f107 0208 	add.w	r2, r7, #8
 800a344:	4611      	mov	r1, r2
 800a346:	4618      	mov	r0, r3
 800a348:	f7ff fbf6 	bl	8009b38 <validate>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a350:	7bfb      	ldrb	r3, [r7, #15]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d10c      	bne.n	800a370 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe f98e 	bl	800867c <dec_lock>
 800a360:	4603      	mov	r3, r0
 800a362:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a364:	7bfb      	ldrb	r3, [r7, #15]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d102      	bne.n	800a370 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	4613      	mov	r3, r2
 800a388:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a38a:	2301      	movs	r3, #1
 800a38c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a38e:	2300      	movs	r3, #0
 800a390:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a392:	4b1f      	ldr	r3, [pc, #124]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a394:	7a5b      	ldrb	r3, [r3, #9]
 800a396:	b2db      	uxtb	r3, r3
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d131      	bne.n	800a400 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a39c:	4b1c      	ldr	r3, [pc, #112]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a39e:	7a5b      	ldrb	r3, [r3, #9]
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	4b1a      	ldr	r3, [pc, #104]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3a6:	2100      	movs	r1, #0
 800a3a8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a3aa:	4b19      	ldr	r3, [pc, #100]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3ac:	7a5b      	ldrb	r3, [r3, #9]
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	4a17      	ldr	r2, [pc, #92]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	68fa      	ldr	r2, [r7, #12]
 800a3b8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a3ba:	4b15      	ldr	r3, [pc, #84]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3bc:	7a5b      	ldrb	r3, [r3, #9]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	4b13      	ldr	r3, [pc, #76]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3c4:	4413      	add	r3, r2
 800a3c6:	79fa      	ldrb	r2, [r7, #7]
 800a3c8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3ca:	4b11      	ldr	r3, [pc, #68]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3cc:	7a5b      	ldrb	r3, [r3, #9]
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	b2d1      	uxtb	r1, r2
 800a3d4:	4a0e      	ldr	r2, [pc, #56]	; (800a410 <FATFS_LinkDriverEx+0x94>)
 800a3d6:	7251      	strb	r1, [r2, #9]
 800a3d8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a3da:	7dbb      	ldrb	r3, [r7, #22]
 800a3dc:	3330      	adds	r3, #48	; 0x30
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	223a      	movs	r2, #58	; 0x3a
 800a3ea:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	3302      	adds	r3, #2
 800a3f0:	222f      	movs	r2, #47	; 0x2f
 800a3f2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	3303      	adds	r3, #3
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a400:	7dfb      	ldrb	r3, [r7, #23]
}
 800a402:	4618      	mov	r0, r3
 800a404:	371c      	adds	r7, #28
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	20001e20 	.word	0x20001e20

0800a414 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b082      	sub	sp, #8
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a41e:	2200      	movs	r2, #0
 800a420:	6839      	ldr	r1, [r7, #0]
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff ffaa 	bl	800a37c <FATFS_LinkDriverEx>
 800a428:	4603      	mov	r3, r0
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	3708      	adds	r7, #8
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
	...

0800a434 <phase_1_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_phase_1_activations_map, 1, params)) {
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	2101      	movs	r1, #1
 800a442:	485e      	ldr	r0, [pc, #376]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a444:	f000 feb0 	bl	800b1a8 <ai_platform_get_activations_map>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f000 80ac 	beq.w	800a5a8 <phase_1_configure_activations+0x174>
    /* Updating activations (byte) offsets */
    
    serving_default_conv2d_3_input0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800a450:	4b5a      	ldr	r3, [pc, #360]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	4b5a      	ldr	r3, [pc, #360]	; (800a5c0 <phase_1_configure_activations+0x18c>)
 800a456:	4413      	add	r3, r2
 800a458:	4a5a      	ldr	r2, [pc, #360]	; (800a5c4 <phase_1_configure_activations+0x190>)
 800a45a:	6093      	str	r3, [r2, #8]
    serving_default_conv2d_3_input0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800a45c:	4b57      	ldr	r3, [pc, #348]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	4b57      	ldr	r3, [pc, #348]	; (800a5c0 <phase_1_configure_activations+0x18c>)
 800a462:	4413      	add	r3, r2
 800a464:	4a57      	ldr	r2, [pc, #348]	; (800a5c4 <phase_1_configure_activations+0x190>)
 800a466:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a468:	4b54      	ldr	r3, [pc, #336]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a56      	ldr	r2, [pc, #344]	; (800a5c8 <phase_1_configure_activations+0x194>)
 800a46e:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a470:	4b52      	ldr	r3, [pc, #328]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a54      	ldr	r2, [pc, #336]	; (800a5c8 <phase_1_configure_activations+0x194>)
 800a476:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a478:	4b50      	ldr	r3, [pc, #320]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a53      	ldr	r2, [pc, #332]	; (800a5cc <phase_1_configure_activations+0x198>)
 800a47e:	6093      	str	r3, [r2, #8]
    eltwise_2_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a480:	4b4e      	ldr	r3, [pc, #312]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a51      	ldr	r2, [pc, #324]	; (800a5cc <phase_1_configure_activations+0x198>)
 800a486:	60d3      	str	r3, [r2, #12]
    
    pool_3_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a488:	4b4c      	ldr	r3, [pc, #304]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a50      	ldr	r2, [pc, #320]	; (800a5d0 <phase_1_configure_activations+0x19c>)
 800a48e:	6093      	str	r3, [r2, #8]
    pool_3_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a490:	4b4a      	ldr	r3, [pc, #296]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a4e      	ldr	r2, [pc, #312]	; (800a5d0 <phase_1_configure_activations+0x19c>)
 800a496:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800a498:	4b48      	ldr	r3, [pc, #288]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a4a0:	4a4c      	ldr	r2, [pc, #304]	; (800a5d4 <phase_1_configure_activations+0x1a0>)
 800a4a2:	6093      	str	r3, [r2, #8]
    eltwise_5_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800a4a4:	4b45      	ldr	r3, [pc, #276]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a4ac:	4a49      	ldr	r2, [pc, #292]	; (800a5d4 <phase_1_configure_activations+0x1a0>)
 800a4ae:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a4b0:	4b42      	ldr	r3, [pc, #264]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a4b8:	4a47      	ldr	r2, [pc, #284]	; (800a5d8 <phase_1_configure_activations+0x1a4>)
 800a4ba:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a4bc:	4b3f      	ldr	r3, [pc, #252]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a4c4:	4a44      	ldr	r2, [pc, #272]	; (800a5d8 <phase_1_configure_activations+0x1a4>)
 800a4c6:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a4c8:	4b3c      	ldr	r3, [pc, #240]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a43      	ldr	r2, [pc, #268]	; (800a5dc <phase_1_configure_activations+0x1a8>)
 800a4ce:	6093      	str	r3, [r2, #8]
    eltwise_8_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a4d0:	4b3a      	ldr	r3, [pc, #232]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a41      	ldr	r2, [pc, #260]	; (800a5dc <phase_1_configure_activations+0x1a8>)
 800a4d6:	60d3      	str	r3, [r2, #12]
    
    pool_9_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a4d8:	4b38      	ldr	r3, [pc, #224]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a4e0:	4a3f      	ldr	r2, [pc, #252]	; (800a5e0 <phase_1_configure_activations+0x1ac>)
 800a4e2:	6093      	str	r3, [r2, #8]
    pool_9_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a4e4:	4b35      	ldr	r3, [pc, #212]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a4ec:	4a3c      	ldr	r2, [pc, #240]	; (800a5e0 <phase_1_configure_activations+0x1ac>)
 800a4ee:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a4f0:	4b32      	ldr	r3, [pc, #200]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a3b      	ldr	r2, [pc, #236]	; (800a5e4 <phase_1_configure_activations+0x1b0>)
 800a4f6:	6093      	str	r3, [r2, #8]
    eltwise_11_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a4f8:	4b30      	ldr	r3, [pc, #192]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a39      	ldr	r2, [pc, #228]	; (800a5e4 <phase_1_configure_activations+0x1b0>)
 800a4fe:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800a500:	4b2e      	ldr	r3, [pc, #184]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a508:	4a37      	ldr	r2, [pc, #220]	; (800a5e8 <phase_1_configure_activations+0x1b4>)
 800a50a:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800a50c:	4b2b      	ldr	r3, [pc, #172]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a514:	4a34      	ldr	r2, [pc, #208]	; (800a5e8 <phase_1_configure_activations+0x1b4>)
 800a516:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800a518:	4b28      	ldr	r3, [pc, #160]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800a520:	4a32      	ldr	r2, [pc, #200]	; (800a5ec <phase_1_configure_activations+0x1b8>)
 800a522:	6093      	str	r3, [r2, #8]
    eltwise_14_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800a524:	4b25      	ldr	r3, [pc, #148]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800a52c:	4a2f      	ldr	r2, [pc, #188]	; (800a5ec <phase_1_configure_activations+0x1b8>)
 800a52e:	60d3      	str	r3, [r2, #12]
    
    pool_15_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a530:	4b22      	ldr	r3, [pc, #136]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a2e      	ldr	r2, [pc, #184]	; (800a5f0 <phase_1_configure_activations+0x1bc>)
 800a536:	6093      	str	r3, [r2, #8]
    pool_15_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a538:	4b20      	ldr	r3, [pc, #128]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a2c      	ldr	r2, [pc, #176]	; (800a5f0 <phase_1_configure_activations+0x1bc>)
 800a53e:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800a540:	4b1e      	ldr	r3, [pc, #120]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a548:	4a2a      	ldr	r2, [pc, #168]	; (800a5f4 <phase_1_configure_activations+0x1c0>)
 800a54a:	6093      	str	r3, [r2, #8]
    eltwise_17_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800a54c:	4b1b      	ldr	r3, [pc, #108]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a554:	4a27      	ldr	r2, [pc, #156]	; (800a5f4 <phase_1_configure_activations+0x1c0>)
 800a556:	60d3      	str	r3, [r2, #12]
    
    dense_19_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a558:	4b18      	ldr	r3, [pc, #96]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a26      	ldr	r2, [pc, #152]	; (800a5f8 <phase_1_configure_activations+0x1c4>)
 800a55e:	6093      	str	r3, [r2, #8]
    dense_19_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a560:	4b16      	ldr	r3, [pc, #88]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a24      	ldr	r2, [pc, #144]	; (800a5f8 <phase_1_configure_activations+0x1c4>)
 800a566:	60d3      	str	r3, [r2, #12]
    
    nl_19_nl_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800a568:	4b14      	ldr	r3, [pc, #80]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a570:	4a22      	ldr	r2, [pc, #136]	; (800a5fc <phase_1_configure_activations+0x1c8>)
 800a572:	6093      	str	r3, [r2, #8]
    nl_19_nl_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800a574:	4b11      	ldr	r3, [pc, #68]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a57c:	4a1f      	ldr	r2, [pc, #124]	; (800a5fc <phase_1_configure_activations+0x1c8>)
 800a57e:	60d3      	str	r3, [r2, #12]
    
    dense_20_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a580:	4b0e      	ldr	r3, [pc, #56]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a1e      	ldr	r2, [pc, #120]	; (800a600 <phase_1_configure_activations+0x1cc>)
 800a586:	6093      	str	r3, [r2, #8]
    dense_20_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a588:	4b0c      	ldr	r3, [pc, #48]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a1c      	ldr	r2, [pc, #112]	; (800a600 <phase_1_configure_activations+0x1cc>)
 800a58e:	60d3      	str	r3, [r2, #12]
    
    nl_21_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 40);
 800a590:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3328      	adds	r3, #40	; 0x28
 800a596:	4a1b      	ldr	r2, [pc, #108]	; (800a604 <phase_1_configure_activations+0x1d0>)
 800a598:	6093      	str	r3, [r2, #8]
    nl_21_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 40);
 800a59a:	4b08      	ldr	r3, [pc, #32]	; (800a5bc <phase_1_configure_activations+0x188>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3328      	adds	r3, #40	; 0x28
 800a5a0:	4a18      	ldr	r2, [pc, #96]	; (800a604 <phase_1_configure_activations+0x1d0>)
 800a5a2:	60d3      	str	r3, [r2, #12]
    
    return true;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	e005      	b.n	800a5b4 <phase_1_configure_activations+0x180>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800a5a8:	2213      	movs	r2, #19
 800a5aa:	2130      	movs	r1, #48	; 0x30
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 ff5f 	bl	800b470 <ai_platform_network_set_error>
  return false;
 800a5b2:	2300      	movs	r3, #0
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}
 800a5bc:	20001e2c 	.word	0x20001e2c
 800a5c0:	0003c080 	.word	0x0003c080
 800a5c4:	200000dc 	.word	0x200000dc
 800a5c8:	200000ec 	.word	0x200000ec
 800a5cc:	2000010c 	.word	0x2000010c
 800a5d0:	2000011c 	.word	0x2000011c
 800a5d4:	2000012c 	.word	0x2000012c
 800a5d8:	2000013c 	.word	0x2000013c
 800a5dc:	2000014c 	.word	0x2000014c
 800a5e0:	2000015c 	.word	0x2000015c
 800a5e4:	2000016c 	.word	0x2000016c
 800a5e8:	2000017c 	.word	0x2000017c
 800a5ec:	2000018c 	.word	0x2000018c
 800a5f0:	2000019c 	.word	0x2000019c
 800a5f4:	200001ac 	.word	0x200001ac
 800a5f8:	200001bc 	.word	0x200001bc
 800a5fc:	200001cc 	.word	0x200001cc
 800a600:	200001dc 	.word	0x200001dc
 800a604:	200001ec 	.word	0x200001ec

0800a608 <phase_1_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_phase_1_weights_map, 1, params)) {
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	2101      	movs	r1, #1
 800a616:	4892      	ldr	r0, [pc, #584]	; (800a860 <phase_1_configure_weights+0x258>)
 800a618:	f000 fd6e 	bl	800b0f8 <ai_platform_get_weights_map>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f000 81c4 	beq.w	800a9ac <phase_1_configure_weights+0x3a4>
    /* Updating weights (byte) offsets */
    
    eltwise_8_scale_array.format |= AI_FMT_FLAG_CONST;
 800a624:	4b8f      	ldr	r3, [pc, #572]	; (800a864 <phase_1_configure_weights+0x25c>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a62c:	4a8d      	ldr	r2, [pc, #564]	; (800a864 <phase_1_configure_weights+0x25c>)
 800a62e:	6013      	str	r3, [r2, #0]
    eltwise_8_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 0);
 800a630:	4b8b      	ldr	r3, [pc, #556]	; (800a860 <phase_1_configure_weights+0x258>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a8b      	ldr	r2, [pc, #556]	; (800a864 <phase_1_configure_weights+0x25c>)
 800a636:	6093      	str	r3, [r2, #8]
    eltwise_8_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 0);
 800a638:	4b89      	ldr	r3, [pc, #548]	; (800a860 <phase_1_configure_weights+0x258>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a89      	ldr	r2, [pc, #548]	; (800a864 <phase_1_configure_weights+0x25c>)
 800a63e:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800a640:	4b89      	ldr	r3, [pc, #548]	; (800a868 <phase_1_configure_weights+0x260>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a648:	4a87      	ldr	r2, [pc, #540]	; (800a868 <phase_1_configure_weights+0x260>)
 800a64a:	6013      	str	r3, [r2, #0]
    eltwise_8_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 256);
 800a64c:	4b84      	ldr	r3, [pc, #528]	; (800a860 <phase_1_configure_weights+0x258>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a654:	4a84      	ldr	r2, [pc, #528]	; (800a868 <phase_1_configure_weights+0x260>)
 800a656:	6093      	str	r3, [r2, #8]
    eltwise_8_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 256);
 800a658:	4b81      	ldr	r3, [pc, #516]	; (800a860 <phase_1_configure_weights+0x258>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a660:	4a81      	ldr	r2, [pc, #516]	; (800a868 <phase_1_configure_weights+0x260>)
 800a662:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_scale_array.format |= AI_FMT_FLAG_CONST;
 800a664:	4b81      	ldr	r3, [pc, #516]	; (800a86c <phase_1_configure_weights+0x264>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a66c:	4a7f      	ldr	r2, [pc, #508]	; (800a86c <phase_1_configure_weights+0x264>)
 800a66e:	6013      	str	r3, [r2, #0]
    eltwise_11_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 512);
 800a670:	4b7b      	ldr	r3, [pc, #492]	; (800a860 <phase_1_configure_weights+0x258>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a678:	4a7c      	ldr	r2, [pc, #496]	; (800a86c <phase_1_configure_weights+0x264>)
 800a67a:	6093      	str	r3, [r2, #8]
    eltwise_11_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 512);
 800a67c:	4b78      	ldr	r3, [pc, #480]	; (800a860 <phase_1_configure_weights+0x258>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a684:	4a79      	ldr	r2, [pc, #484]	; (800a86c <phase_1_configure_weights+0x264>)
 800a686:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800a688:	4b79      	ldr	r3, [pc, #484]	; (800a870 <phase_1_configure_weights+0x268>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a690:	4a77      	ldr	r2, [pc, #476]	; (800a870 <phase_1_configure_weights+0x268>)
 800a692:	6013      	str	r3, [r2, #0]
    eltwise_11_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 768);
 800a694:	4b72      	ldr	r3, [pc, #456]	; (800a860 <phase_1_configure_weights+0x258>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a69c:	4a74      	ldr	r2, [pc, #464]	; (800a870 <phase_1_configure_weights+0x268>)
 800a69e:	6093      	str	r3, [r2, #8]
    eltwise_11_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 768);
 800a6a0:	4b6f      	ldr	r3, [pc, #444]	; (800a860 <phase_1_configure_weights+0x258>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a6a8:	4a71      	ldr	r2, [pc, #452]	; (800a870 <phase_1_configure_weights+0x268>)
 800a6aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 800a6ac:	4b71      	ldr	r3, [pc, #452]	; (800a874 <phase_1_configure_weights+0x26c>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6b4:	4a6f      	ldr	r2, [pc, #444]	; (800a874 <phase_1_configure_weights+0x26c>)
 800a6b6:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800a6b8:	4b69      	ldr	r3, [pc, #420]	; (800a860 <phase_1_configure_weights+0x258>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6c0:	4a6c      	ldr	r2, [pc, #432]	; (800a874 <phase_1_configure_weights+0x26c>)
 800a6c2:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800a6c4:	4b66      	ldr	r3, [pc, #408]	; (800a860 <phase_1_configure_weights+0x258>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6cc:	4a69      	ldr	r2, [pc, #420]	; (800a874 <phase_1_configure_weights+0x26c>)
 800a6ce:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 800a6d0:	4b69      	ldr	r3, [pc, #420]	; (800a878 <phase_1_configure_weights+0x270>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6d8:	4a67      	ldr	r2, [pc, #412]	; (800a878 <phase_1_configure_weights+0x270>)
 800a6da:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800a6dc:	4b60      	ldr	r3, [pc, #384]	; (800a860 <phase_1_configure_weights+0x258>)
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	4b66      	ldr	r3, [pc, #408]	; (800a87c <phase_1_configure_weights+0x274>)
 800a6e2:	4413      	add	r3, r2
 800a6e4:	4a64      	ldr	r2, [pc, #400]	; (800a878 <phase_1_configure_weights+0x270>)
 800a6e6:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800a6e8:	4b5d      	ldr	r3, [pc, #372]	; (800a860 <phase_1_configure_weights+0x258>)
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	4b63      	ldr	r3, [pc, #396]	; (800a87c <phase_1_configure_weights+0x274>)
 800a6ee:	4413      	add	r3, r2
 800a6f0:	4a61      	ldr	r2, [pc, #388]	; (800a878 <phase_1_configure_weights+0x270>)
 800a6f2:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_scale_array.format |= AI_FMT_FLAG_CONST;
 800a6f4:	4b62      	ldr	r3, [pc, #392]	; (800a880 <phase_1_configure_weights+0x278>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6fc:	4a60      	ldr	r2, [pc, #384]	; (800a880 <phase_1_configure_weights+0x278>)
 800a6fe:	6013      	str	r3, [r2, #0]
    eltwise_14_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800a700:	4b57      	ldr	r3, [pc, #348]	; (800a860 <phase_1_configure_weights+0x258>)
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	4b5f      	ldr	r3, [pc, #380]	; (800a884 <phase_1_configure_weights+0x27c>)
 800a706:	4413      	add	r3, r2
 800a708:	4a5d      	ldr	r2, [pc, #372]	; (800a880 <phase_1_configure_weights+0x278>)
 800a70a:	6093      	str	r3, [r2, #8]
    eltwise_14_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800a70c:	4b54      	ldr	r3, [pc, #336]	; (800a860 <phase_1_configure_weights+0x258>)
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	4b5c      	ldr	r3, [pc, #368]	; (800a884 <phase_1_configure_weights+0x27c>)
 800a712:	4413      	add	r3, r2
 800a714:	4a5a      	ldr	r2, [pc, #360]	; (800a880 <phase_1_configure_weights+0x278>)
 800a716:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_bias_array.format |= AI_FMT_FLAG_CONST;
 800a718:	4b5b      	ldr	r3, [pc, #364]	; (800a888 <phase_1_configure_weights+0x280>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a720:	4a59      	ldr	r2, [pc, #356]	; (800a888 <phase_1_configure_weights+0x280>)
 800a722:	6013      	str	r3, [r2, #0]
    eltwise_14_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800a724:	4b4e      	ldr	r3, [pc, #312]	; (800a860 <phase_1_configure_weights+0x258>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800a72c:	4a56      	ldr	r2, [pc, #344]	; (800a888 <phase_1_configure_weights+0x280>)
 800a72e:	6093      	str	r3, [r2, #8]
    eltwise_14_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800a730:	4b4b      	ldr	r3, [pc, #300]	; (800a860 <phase_1_configure_weights+0x258>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800a738:	4a53      	ldr	r2, [pc, #332]	; (800a888 <phase_1_configure_weights+0x280>)
 800a73a:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_scale_array.format |= AI_FMT_FLAG_CONST;
 800a73c:	4b53      	ldr	r3, [pc, #332]	; (800a88c <phase_1_configure_weights+0x284>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a744:	4a51      	ldr	r2, [pc, #324]	; (800a88c <phase_1_configure_weights+0x284>)
 800a746:	6013      	str	r3, [r2, #0]
    eltwise_17_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800a748:	4b45      	ldr	r3, [pc, #276]	; (800a860 <phase_1_configure_weights+0x258>)
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	4b50      	ldr	r3, [pc, #320]	; (800a890 <phase_1_configure_weights+0x288>)
 800a74e:	4413      	add	r3, r2
 800a750:	4a4e      	ldr	r2, [pc, #312]	; (800a88c <phase_1_configure_weights+0x284>)
 800a752:	6093      	str	r3, [r2, #8]
    eltwise_17_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800a754:	4b42      	ldr	r3, [pc, #264]	; (800a860 <phase_1_configure_weights+0x258>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	4b4d      	ldr	r3, [pc, #308]	; (800a890 <phase_1_configure_weights+0x288>)
 800a75a:	4413      	add	r3, r2
 800a75c:	4a4b      	ldr	r2, [pc, #300]	; (800a88c <phase_1_configure_weights+0x284>)
 800a75e:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800a760:	4b4c      	ldr	r3, [pc, #304]	; (800a894 <phase_1_configure_weights+0x28c>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a768:	4a4a      	ldr	r2, [pc, #296]	; (800a894 <phase_1_configure_weights+0x28c>)
 800a76a:	6013      	str	r3, [r2, #0]
    eltwise_17_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800a76c:	4b3c      	ldr	r3, [pc, #240]	; (800a860 <phase_1_configure_weights+0x258>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	4b49      	ldr	r3, [pc, #292]	; (800a898 <phase_1_configure_weights+0x290>)
 800a772:	4413      	add	r3, r2
 800a774:	4a47      	ldr	r2, [pc, #284]	; (800a894 <phase_1_configure_weights+0x28c>)
 800a776:	6093      	str	r3, [r2, #8]
    eltwise_17_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800a778:	4b39      	ldr	r3, [pc, #228]	; (800a860 <phase_1_configure_weights+0x258>)
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	4b46      	ldr	r3, [pc, #280]	; (800a898 <phase_1_configure_weights+0x290>)
 800a77e:	4413      	add	r3, r2
 800a780:	4a44      	ldr	r2, [pc, #272]	; (800a894 <phase_1_configure_weights+0x28c>)
 800a782:	60d3      	str	r3, [r2, #12]
    
    dense_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800a784:	4b45      	ldr	r3, [pc, #276]	; (800a89c <phase_1_configure_weights+0x294>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a78c:	4a43      	ldr	r2, [pc, #268]	; (800a89c <phase_1_configure_weights+0x294>)
 800a78e:	6013      	str	r3, [r2, #0]
    dense_19_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 299520);
 800a790:	4b33      	ldr	r3, [pc, #204]	; (800a860 <phase_1_configure_weights+0x258>)
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	4b42      	ldr	r3, [pc, #264]	; (800a8a0 <phase_1_configure_weights+0x298>)
 800a796:	4413      	add	r3, r2
 800a798:	4a40      	ldr	r2, [pc, #256]	; (800a89c <phase_1_configure_weights+0x294>)
 800a79a:	6093      	str	r3, [r2, #8]
    dense_19_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 298496);
 800a79c:	4b30      	ldr	r3, [pc, #192]	; (800a860 <phase_1_configure_weights+0x258>)
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	4b40      	ldr	r3, [pc, #256]	; (800a8a4 <phase_1_configure_weights+0x29c>)
 800a7a2:	4413      	add	r3, r2
 800a7a4:	4a3d      	ldr	r2, [pc, #244]	; (800a89c <phase_1_configure_weights+0x294>)
 800a7a6:	60d3      	str	r3, [r2, #12]
    
    dense_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800a7a8:	4b3f      	ldr	r3, [pc, #252]	; (800a8a8 <phase_1_configure_weights+0x2a0>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7b0:	4a3d      	ldr	r2, [pc, #244]	; (800a8a8 <phase_1_configure_weights+0x2a0>)
 800a7b2:	6013      	str	r3, [r2, #0]
    dense_19_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800a7b4:	4b2a      	ldr	r3, [pc, #168]	; (800a860 <phase_1_configure_weights+0x258>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	4b3c      	ldr	r3, [pc, #240]	; (800a8ac <phase_1_configure_weights+0x2a4>)
 800a7ba:	4413      	add	r3, r2
 800a7bc:	4a3a      	ldr	r2, [pc, #232]	; (800a8a8 <phase_1_configure_weights+0x2a0>)
 800a7be:	6093      	str	r3, [r2, #8]
    dense_19_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800a7c0:	4b27      	ldr	r3, [pc, #156]	; (800a860 <phase_1_configure_weights+0x258>)
 800a7c2:	681a      	ldr	r2, [r3, #0]
 800a7c4:	4b39      	ldr	r3, [pc, #228]	; (800a8ac <phase_1_configure_weights+0x2a4>)
 800a7c6:	4413      	add	r3, r2
 800a7c8:	4a37      	ldr	r2, [pc, #220]	; (800a8a8 <phase_1_configure_weights+0x2a0>)
 800a7ca:	60d3      	str	r3, [r2, #12]
    
    dense_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800a7cc:	4b38      	ldr	r3, [pc, #224]	; (800a8b0 <phase_1_configure_weights+0x2a8>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7d4:	4a36      	ldr	r2, [pc, #216]	; (800a8b0 <phase_1_configure_weights+0x2a8>)
 800a7d6:	6013      	str	r3, [r2, #0]
    dense_20_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800a7d8:	4b21      	ldr	r3, [pc, #132]	; (800a860 <phase_1_configure_weights+0x258>)
 800a7da:	681a      	ldr	r2, [r3, #0]
 800a7dc:	4b35      	ldr	r3, [pc, #212]	; (800a8b4 <phase_1_configure_weights+0x2ac>)
 800a7de:	4413      	add	r3, r2
 800a7e0:	4a33      	ldr	r2, [pc, #204]	; (800a8b0 <phase_1_configure_weights+0x2a8>)
 800a7e2:	6093      	str	r3, [r2, #8]
    dense_20_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800a7e4:	4b1e      	ldr	r3, [pc, #120]	; (800a860 <phase_1_configure_weights+0x258>)
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	4b32      	ldr	r3, [pc, #200]	; (800a8b4 <phase_1_configure_weights+0x2ac>)
 800a7ea:	4413      	add	r3, r2
 800a7ec:	4a30      	ldr	r2, [pc, #192]	; (800a8b0 <phase_1_configure_weights+0x2a8>)
 800a7ee:	60d3      	str	r3, [r2, #12]
    
    dense_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800a7f0:	4b31      	ldr	r3, [pc, #196]	; (800a8b8 <phase_1_configure_weights+0x2b0>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7f8:	4a2f      	ldr	r2, [pc, #188]	; (800a8b8 <phase_1_configure_weights+0x2b0>)
 800a7fa:	6013      	str	r3, [r2, #0]
    dense_20_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800a7fc:	4b18      	ldr	r3, [pc, #96]	; (800a860 <phase_1_configure_weights+0x258>)
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	4b2e      	ldr	r3, [pc, #184]	; (800a8bc <phase_1_configure_weights+0x2b4>)
 800a802:	4413      	add	r3, r2
 800a804:	4a2c      	ldr	r2, [pc, #176]	; (800a8b8 <phase_1_configure_weights+0x2b0>)
 800a806:	6093      	str	r3, [r2, #8]
    dense_20_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800a808:	4b15      	ldr	r3, [pc, #84]	; (800a860 <phase_1_configure_weights+0x258>)
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	4b2b      	ldr	r3, [pc, #172]	; (800a8bc <phase_1_configure_weights+0x2b4>)
 800a80e:	4413      	add	r3, r2
 800a810:	4a29      	ldr	r2, [pc, #164]	; (800a8b8 <phase_1_configure_weights+0x2b0>)
 800a812:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800a814:	4b2a      	ldr	r3, [pc, #168]	; (800a8c0 <phase_1_configure_weights+0x2b8>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a81c:	4a28      	ldr	r2, [pc, #160]	; (800a8c0 <phase_1_configure_weights+0x2b8>)
 800a81e:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <phase_1_configure_weights+0x258>)
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	4b27      	ldr	r3, [pc, #156]	; (800a8c4 <phase_1_configure_weights+0x2bc>)
 800a826:	4413      	add	r3, r2
 800a828:	4a25      	ldr	r2, [pc, #148]	; (800a8c0 <phase_1_configure_weights+0x2b8>)
 800a82a:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800a82c:	4b0c      	ldr	r3, [pc, #48]	; (800a860 <phase_1_configure_weights+0x258>)
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	4b24      	ldr	r3, [pc, #144]	; (800a8c4 <phase_1_configure_weights+0x2bc>)
 800a832:	4413      	add	r3, r2
 800a834:	4a22      	ldr	r2, [pc, #136]	; (800a8c0 <phase_1_configure_weights+0x2b8>)
 800a836:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800a838:	4b23      	ldr	r3, [pc, #140]	; (800a8c8 <phase_1_configure_weights+0x2c0>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a840:	4a21      	ldr	r2, [pc, #132]	; (800a8c8 <phase_1_configure_weights+0x2c0>)
 800a842:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800a844:	4b06      	ldr	r3, [pc, #24]	; (800a860 <phase_1_configure_weights+0x258>)
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	4b20      	ldr	r3, [pc, #128]	; (800a8cc <phase_1_configure_weights+0x2c4>)
 800a84a:	4413      	add	r3, r2
 800a84c:	4a1e      	ldr	r2, [pc, #120]	; (800a8c8 <phase_1_configure_weights+0x2c0>)
 800a84e:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800a850:	4b03      	ldr	r3, [pc, #12]	; (800a860 <phase_1_configure_weights+0x258>)
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	4b1d      	ldr	r3, [pc, #116]	; (800a8cc <phase_1_configure_weights+0x2c4>)
 800a856:	4413      	add	r3, r2
 800a858:	4a1b      	ldr	r2, [pc, #108]	; (800a8c8 <phase_1_configure_weights+0x2c0>)
 800a85a:	60d3      	str	r3, [r2, #12]
 800a85c:	e038      	b.n	800a8d0 <phase_1_configure_weights+0x2c8>
 800a85e:	bf00      	nop
 800a860:	20001e30 	.word	0x20001e30
 800a864:	2000000c 	.word	0x2000000c
 800a868:	2000001c 	.word	0x2000001c
 800a86c:	2000002c 	.word	0x2000002c
 800a870:	2000003c 	.word	0x2000003c
 800a874:	2000004c 	.word	0x2000004c
 800a878:	2000005c 	.word	0x2000005c
 800a87c:	00048400 	.word	0x00048400
 800a880:	2000006c 	.word	0x2000006c
 800a884:	00048600 	.word	0x00048600
 800a888:	2000007c 	.word	0x2000007c
 800a88c:	2000008c 	.word	0x2000008c
 800a890:	00048a00 	.word	0x00048a00
 800a894:	2000009c 	.word	0x2000009c
 800a898:	00048c00 	.word	0x00048c00
 800a89c:	200000ac 	.word	0x200000ac
 800a8a0:	00049200 	.word	0x00049200
 800a8a4:	00048e00 	.word	0x00048e00
 800a8a8:	200000bc 	.word	0x200000bc
 800a8ac:	00149200 	.word	0x00149200
 800a8b0:	200000cc 	.word	0x200000cc
 800a8b4:	00149600 	.word	0x00149600
 800a8b8:	200000fc 	.word	0x200000fc
 800a8bc:	0014be00 	.word	0x0014be00
 800a8c0:	200001fc 	.word	0x200001fc
 800a8c4:	0014be28 	.word	0x0014be28
 800a8c8:	2000020c 	.word	0x2000020c
 800a8cc:	0014c2a8 	.word	0x0014c2a8
    
    eltwise_2_scale_array.format |= AI_FMT_FLAG_CONST;
 800a8d0:	4b3b      	ldr	r3, [pc, #236]	; (800a9c0 <phase_1_configure_weights+0x3b8>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8d8:	4a39      	ldr	r2, [pc, #228]	; (800a9c0 <phase_1_configure_weights+0x3b8>)
 800a8da:	6013      	str	r3, [r2, #0]
    eltwise_2_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800a8dc:	4b39      	ldr	r3, [pc, #228]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	4b39      	ldr	r3, [pc, #228]	; (800a9c8 <phase_1_configure_weights+0x3c0>)
 800a8e2:	4413      	add	r3, r2
 800a8e4:	4a36      	ldr	r2, [pc, #216]	; (800a9c0 <phase_1_configure_weights+0x3b8>)
 800a8e6:	6093      	str	r3, [r2, #8]
    eltwise_2_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800a8e8:	4b36      	ldr	r3, [pc, #216]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	4b36      	ldr	r3, [pc, #216]	; (800a9c8 <phase_1_configure_weights+0x3c0>)
 800a8ee:	4413      	add	r3, r2
 800a8f0:	4a33      	ldr	r2, [pc, #204]	; (800a9c0 <phase_1_configure_weights+0x3b8>)
 800a8f2:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800a8f4:	4b35      	ldr	r3, [pc, #212]	; (800a9cc <phase_1_configure_weights+0x3c4>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8fc:	4a33      	ldr	r2, [pc, #204]	; (800a9cc <phase_1_configure_weights+0x3c4>)
 800a8fe:	6013      	str	r3, [r2, #0]
    eltwise_2_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800a900:	4b30      	ldr	r3, [pc, #192]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	4b32      	ldr	r3, [pc, #200]	; (800a9d0 <phase_1_configure_weights+0x3c8>)
 800a906:	4413      	add	r3, r2
 800a908:	4a30      	ldr	r2, [pc, #192]	; (800a9cc <phase_1_configure_weights+0x3c4>)
 800a90a:	6093      	str	r3, [r2, #8]
    eltwise_2_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800a90c:	4b2d      	ldr	r3, [pc, #180]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a90e:	681a      	ldr	r2, [r3, #0]
 800a910:	4b2f      	ldr	r3, [pc, #188]	; (800a9d0 <phase_1_configure_weights+0x3c8>)
 800a912:	4413      	add	r3, r2
 800a914:	4a2d      	ldr	r2, [pc, #180]	; (800a9cc <phase_1_configure_weights+0x3c4>)
 800a916:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_scale_array.format |= AI_FMT_FLAG_CONST;
 800a918:	4b2e      	ldr	r3, [pc, #184]	; (800a9d4 <phase_1_configure_weights+0x3cc>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a920:	4a2c      	ldr	r2, [pc, #176]	; (800a9d4 <phase_1_configure_weights+0x3cc>)
 800a922:	6013      	str	r3, [r2, #0]
    eltwise_5_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800a924:	4b27      	ldr	r3, [pc, #156]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	4b2b      	ldr	r3, [pc, #172]	; (800a9d8 <phase_1_configure_weights+0x3d0>)
 800a92a:	4413      	add	r3, r2
 800a92c:	4a29      	ldr	r2, [pc, #164]	; (800a9d4 <phase_1_configure_weights+0x3cc>)
 800a92e:	6093      	str	r3, [r2, #8]
    eltwise_5_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800a930:	4b24      	ldr	r3, [pc, #144]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	4b28      	ldr	r3, [pc, #160]	; (800a9d8 <phase_1_configure_weights+0x3d0>)
 800a936:	4413      	add	r3, r2
 800a938:	4a26      	ldr	r2, [pc, #152]	; (800a9d4 <phase_1_configure_weights+0x3cc>)
 800a93a:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800a93c:	4b27      	ldr	r3, [pc, #156]	; (800a9dc <phase_1_configure_weights+0x3d4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a944:	4a25      	ldr	r2, [pc, #148]	; (800a9dc <phase_1_configure_weights+0x3d4>)
 800a946:	6013      	str	r3, [r2, #0]
    eltwise_5_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800a948:	4b1e      	ldr	r3, [pc, #120]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	4b24      	ldr	r3, [pc, #144]	; (800a9e0 <phase_1_configure_weights+0x3d8>)
 800a94e:	4413      	add	r3, r2
 800a950:	4a22      	ldr	r2, [pc, #136]	; (800a9dc <phase_1_configure_weights+0x3d4>)
 800a952:	6093      	str	r3, [r2, #8]
    eltwise_5_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800a954:	4b1b      	ldr	r3, [pc, #108]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	4b21      	ldr	r3, [pc, #132]	; (800a9e0 <phase_1_configure_weights+0x3d8>)
 800a95a:	4413      	add	r3, r2
 800a95c:	4a1f      	ldr	r2, [pc, #124]	; (800a9dc <phase_1_configure_weights+0x3d4>)
 800a95e:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800a960:	4b20      	ldr	r3, [pc, #128]	; (800a9e4 <phase_1_configure_weights+0x3dc>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a968:	4a1e      	ldr	r2, [pc, #120]	; (800a9e4 <phase_1_configure_weights+0x3dc>)
 800a96a:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800a96c:	4b15      	ldr	r3, [pc, #84]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	4b1d      	ldr	r3, [pc, #116]	; (800a9e8 <phase_1_configure_weights+0x3e0>)
 800a972:	4413      	add	r3, r2
 800a974:	4a1b      	ldr	r2, [pc, #108]	; (800a9e4 <phase_1_configure_weights+0x3dc>)
 800a976:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800a978:	4b12      	ldr	r3, [pc, #72]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	4b1a      	ldr	r3, [pc, #104]	; (800a9e8 <phase_1_configure_weights+0x3e0>)
 800a97e:	4413      	add	r3, r2
 800a980:	4a18      	ldr	r2, [pc, #96]	; (800a9e4 <phase_1_configure_weights+0x3dc>)
 800a982:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800a984:	4b19      	ldr	r3, [pc, #100]	; (800a9ec <phase_1_configure_weights+0x3e4>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a98c:	4a17      	ldr	r2, [pc, #92]	; (800a9ec <phase_1_configure_weights+0x3e4>)
 800a98e:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800a990:	4b0c      	ldr	r3, [pc, #48]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	4b16      	ldr	r3, [pc, #88]	; (800a9f0 <phase_1_configure_weights+0x3e8>)
 800a996:	4413      	add	r3, r2
 800a998:	4a14      	ldr	r2, [pc, #80]	; (800a9ec <phase_1_configure_weights+0x3e4>)
 800a99a:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800a99c:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <phase_1_configure_weights+0x3bc>)
 800a99e:	681a      	ldr	r2, [r3, #0]
 800a9a0:	4b13      	ldr	r3, [pc, #76]	; (800a9f0 <phase_1_configure_weights+0x3e8>)
 800a9a2:	4413      	add	r3, r2
 800a9a4:	4a11      	ldr	r2, [pc, #68]	; (800a9ec <phase_1_configure_weights+0x3e4>)
 800a9a6:	60d3      	str	r3, [r2, #12]
    
    return true;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	e005      	b.n	800a9b8 <phase_1_configure_weights+0x3b0>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800a9ac:	2212      	movs	r2, #18
 800a9ae:	2130      	movs	r1, #48	; 0x30
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fd5d 	bl	800b470 <ai_platform_network_set_error>
  return false;
 800a9b6:	2300      	movs	r3, #0
}
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	3708      	adds	r7, #8
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	bd80      	pop	{r7, pc}
 800a9c0:	2000021c 	.word	0x2000021c
 800a9c4:	20001e30 	.word	0x20001e30
 800a9c8:	0014c328 	.word	0x0014c328
 800a9cc:	2000022c 	.word	0x2000022c
 800a9d0:	0014c3a8 	.word	0x0014c3a8
 800a9d4:	2000023c 	.word	0x2000023c
 800a9d8:	0014c428 	.word	0x0014c428
 800a9dc:	2000024c 	.word	0x2000024c
 800a9e0:	0014c4a8 	.word	0x0014c4a8
 800a9e4:	2000025c 	.word	0x2000025c
 800a9e8:	0014c528 	.word	0x0014c528
 800a9ec:	2000026c 	.word	0x2000026c
 800a9f0:	0015e528 	.word	0x0015e528

0800a9f4 <ai_phase_1_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_phase_1_get_error(ai_handle network)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 fc2b 	bl	800b258 <ai_platform_network_get_error>
 800aa02:	4603      	mov	r3, r0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <ai_phase_1_create>:

AI_API_ENTRY
ai_error ai_phase_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af02      	add	r7, sp, #8
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800aa16:	2300      	movs	r3, #0
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	2305      	movs	r3, #5
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	2301      	movs	r3, #1
 800aa20:	4a04      	ldr	r2, [pc, #16]	; (800aa34 <ai_phase_1_create+0x28>)
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f001 f83d 	bl	800baa4 <ai_platform_network_create>
 800aa2a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}
 800aa34:	20001308 	.word	0x20001308

0800aa38 <ai_phase_1_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_phase_1_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d104      	bne.n	800aa52 <ai_phase_1_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800aa48:	4b06      	ldr	r3, [pc, #24]	; (800aa64 <ai_phase_1_inputs_get+0x2c>)
 800aa4a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	4a06      	ldr	r2, [pc, #24]	; (800aa68 <ai_phase_1_inputs_get+0x30>)
 800aa50:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800aa52:	6839      	ldr	r1, [r7, #0]
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 fd11 	bl	800b47c <ai_platform_inputs_get>
 800aa5a:	4603      	mov	r3, r0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3708      	adds	r7, #8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	20001308 	.word	0x20001308
 800aa68:	a1c00100 	.word	0xa1c00100

0800aa6c <ai_phase_1_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_phase_1_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d104      	bne.n	800aa86 <ai_phase_1_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800aa7c:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <ai_phase_1_outputs_get+0x2c>)
 800aa7e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	4a06      	ldr	r2, [pc, #24]	; (800aa9c <ai_phase_1_outputs_get+0x30>)
 800aa84:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f000 fe83 	bl	800b794 <ai_platform_outputs_get>
 800aa8e:	4603      	mov	r3, r0
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	20001308 	.word	0x20001308
 800aa9c:	a1c00100 	.word	0xa1c00100

0800aaa0 <ai_phase_1_init>:
}

AI_API_ENTRY
ai_bool ai_phase_1_init(
  ai_handle network, const ai_network_params* params)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800aaaa:	6839      	ldr	r1, [r7, #0]
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f001 f9d3 	bl	800be58 <ai_platform_network_init>
 800aab2:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d101      	bne.n	800aabe <ai_phase_1_init+0x1e>
 800aaba:	2300      	movs	r3, #0
 800aabc:	e028      	b.n	800ab10 <ai_phase_1_init+0x70>

  ai_bool ok = true;
 800aabe:	2301      	movs	r3, #1
 800aac0:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_weights(net_ctx, params);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f7ff fd9f 	bl	800a608 <phase_1_configure_weights>
 800aaca:	4603      	mov	r3, r0
 800aacc:	461a      	mov	r2, r3
 800aace:	7afb      	ldrb	r3, [r7, #11]
 800aad0:	4013      	ands	r3, r2
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	bf14      	ite	ne
 800aad6:	2301      	movne	r3, #1
 800aad8:	2300      	moveq	r3, #0
 800aada:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_activations(net_ctx, params);
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f7ff fca8 	bl	800a434 <phase_1_configure_activations>
 800aae4:	4603      	mov	r3, r0
 800aae6:	461a      	mov	r2, r3
 800aae8:	7afb      	ldrb	r3, [r7, #11]
 800aaea:	4013      	ands	r3, r2
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	bf14      	ite	ne
 800aaf0:	2301      	movne	r3, #1
 800aaf2:	2300      	moveq	r3, #0
 800aaf4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f001 fb4a 	bl	800c190 <ai_platform_network_post_init>
 800aafc:	4603      	mov	r3, r0
 800aafe:	461a      	mov	r2, r3
 800ab00:	7afb      	ldrb	r3, [r7, #11]
 800ab02:	4013      	ands	r3, r2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bf14      	ite	ne
 800ab08:	2301      	movne	r3, #1
 800ab0a:	2300      	moveq	r3, #0
 800ab0c:	72fb      	strb	r3, [r7, #11]

  return ok;
 800ab0e:	7afb      	ldrb	r3, [r7, #11]
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <ai_phase_1_run>:


AI_API_ENTRY
ai_i32 ai_phase_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	68b9      	ldr	r1, [r7, #8]
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f001 fc5b 	bl	800c3e4 <ai_platform_network_process>
 800ab2e:	4603      	mov	r3, r0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <ai_phase_1_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_activations_buffer_get(const ai_handle ptr)
{
 800ab38:	b4b0      	push	{r4, r5, r7}
 800ab3a:	b08f      	sub	sp, #60	; 0x3c
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800ab42:	4b15      	ldr	r3, [pc, #84]	; (800ab98 <ai_phase_1_data_activations_buffer_get+0x60>)
 800ab44:	61fb      	str	r3, [r7, #28]
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	623b      	str	r3, [r7, #32]
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24
 800ab4e:	2300      	movs	r3, #0
 800ab50:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab52:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <ai_phase_1_data_activations_buffer_get+0x64>)
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab56:	2301      	movs	r3, #1
 800ab58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5e:	2204      	movs	r2, #4
 800ab60:	f362 231f 	bfi	r3, r2, #8, #24
 800ab64:	633b      	str	r3, [r7, #48]	; 0x30
 800ab66:	4b0e      	ldr	r3, [pc, #56]	; (800aba0 <ai_phase_1_data_activations_buffer_get+0x68>)
 800ab68:	f107 040c 	add.w	r4, r7, #12
 800ab6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ab6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ab72:	f107 030c 	add.w	r3, r7, #12
 800ab76:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_ACTIVATIONS_SIZE, 1, AI_PHASE_1_DATA_ACTIVATIONS_COUNT),
    AI_PHASE_1_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	461d      	mov	r5, r3
 800ab7c:	f107 041c 	add.w	r4, r7, #28
 800ab80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab84:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ab88:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	373c      	adds	r7, #60	; 0x3c
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bcb0      	pop	{r4, r5, r7}
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	00040440 	.word	0x00040440
 800ab9c:	00043e80 	.word	0x00043e80
 800aba0:	0800f874 	.word	0x0800f874

0800aba4 <ai_phase_1_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_weights_buffer_get(const ai_handle ptr)
{
 800aba4:	b4b0      	push	{r4, r5, r7}
 800aba6:	b08f      	sub	sp, #60	; 0x3c
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800abae:	4b15      	ldr	r3, [pc, #84]	; (800ac04 <ai_phase_1_data_weights_buffer_get+0x60>)
 800abb0:	61fb      	str	r3, [r7, #28]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	623b      	str	r3, [r7, #32]
 800abb6:	2300      	movs	r3, #0
 800abb8:	627b      	str	r3, [r7, #36]	; 0x24
 800abba:	2300      	movs	r3, #0
 800abbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800abbe:	4b12      	ldr	r3, [pc, #72]	; (800ac08 <ai_phase_1_data_weights_buffer_get+0x64>)
 800abc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abc2:	2301      	movs	r3, #1
 800abc4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abca:	2204      	movs	r2, #4
 800abcc:	f362 231f 	bfi	r3, r2, #8, #24
 800abd0:	633b      	str	r3, [r7, #48]	; 0x30
 800abd2:	4b0e      	ldr	r3, [pc, #56]	; (800ac0c <ai_phase_1_data_weights_buffer_get+0x68>)
 800abd4:	f107 040c 	add.w	r4, r7, #12
 800abd8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800abda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800abde:	f107 030c 	add.w	r3, r7, #12
 800abe2:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_WEIGHTS_SIZE, 1, AI_PHASE_1_DATA_WEIGHTS_COUNT),
    AI_PHASE_1_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	461d      	mov	r5, r3
 800abe8:	f107 041c 	add.w	r4, r7, #28
 800abec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800abf0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800abf4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	373c      	adds	r7, #60	; 0x3c
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bcb0      	pop	{r4, r5, r7}
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	40040440 	.word	0x40040440
 800ac08:	0015e628 	.word	0x0015e628
 800ac0c:	0800f884 	.word	0x0800f884

0800ac10 <ai_phase_1_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_phase_1_data_weights_get(void)
{
 800ac10:	b480      	push	{r7}
 800ac12:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_phase_1_weights_table);
 800ac14:	4b02      	ldr	r3, [pc, #8]	; (800ac20 <ai_phase_1_data_weights_get+0x10>)

}
 800ac16:	4618      	mov	r0, r3
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	200013ac 	.word	0x200013ac

0800ac24 <modelSetup>:

char word_list[WORD_LIST_SIZE][10];


int modelSetup()
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	af00      	add	r7, sp, #0
	sprintf((char*)&word_list[YES]   ,"yes");
 800ac28:	4915      	ldr	r1, [pc, #84]	; (800ac80 <modelSetup+0x5c>)
 800ac2a:	4816      	ldr	r0, [pc, #88]	; (800ac84 <modelSetup+0x60>)
 800ac2c:	f004 f8e0 	bl	800edf0 <siprintf>
	sprintf((char*)&word_list[NO]    ,"no");
 800ac30:	4915      	ldr	r1, [pc, #84]	; (800ac88 <modelSetup+0x64>)
 800ac32:	4816      	ldr	r0, [pc, #88]	; (800ac8c <modelSetup+0x68>)
 800ac34:	f004 f8dc 	bl	800edf0 <siprintf>
	sprintf((char*)&word_list[UP]    ,"up");
 800ac38:	4915      	ldr	r1, [pc, #84]	; (800ac90 <modelSetup+0x6c>)
 800ac3a:	4816      	ldr	r0, [pc, #88]	; (800ac94 <modelSetup+0x70>)
 800ac3c:	f004 f8d8 	bl	800edf0 <siprintf>
	sprintf((char*)&word_list[DOWN]  ,"down");
 800ac40:	4915      	ldr	r1, [pc, #84]	; (800ac98 <modelSetup+0x74>)
 800ac42:	4816      	ldr	r0, [pc, #88]	; (800ac9c <modelSetup+0x78>)
 800ac44:	f004 f8d4 	bl	800edf0 <siprintf>
	sprintf((char*)&word_list[RIGHT] ,"right");
 800ac48:	4915      	ldr	r1, [pc, #84]	; (800aca0 <modelSetup+0x7c>)
 800ac4a:	4816      	ldr	r0, [pc, #88]	; (800aca4 <modelSetup+0x80>)
 800ac4c:	f004 f8d0 	bl	800edf0 <siprintf>
	sprintf((char*)&word_list[LEFT]  ,"left");
 800ac50:	4915      	ldr	r1, [pc, #84]	; (800aca8 <modelSetup+0x84>)
 800ac52:	4816      	ldr	r0, [pc, #88]	; (800acac <modelSetup+0x88>)
 800ac54:	f004 f8cc 	bl	800edf0 <siprintf>
	sprintf((char*)&word_list[STOP]  ,"stop");
 800ac58:	4915      	ldr	r1, [pc, #84]	; (800acb0 <modelSetup+0x8c>)
 800ac5a:	4816      	ldr	r0, [pc, #88]	; (800acb4 <modelSetup+0x90>)
 800ac5c:	f004 f8c8 	bl	800edf0 <siprintf>
	sprintf((char*)&word_list[GO]    ,"go");
 800ac60:	4915      	ldr	r1, [pc, #84]	; (800acb8 <modelSetup+0x94>)
 800ac62:	4816      	ldr	r0, [pc, #88]	; (800acbc <modelSetup+0x98>)
 800ac64:	f004 f8c4 	bl	800edf0 <siprintf>
	sprintf((char*)&word_list[ON]    ,"on");
 800ac68:	4915      	ldr	r1, [pc, #84]	; (800acc0 <modelSetup+0x9c>)
 800ac6a:	4816      	ldr	r0, [pc, #88]	; (800acc4 <modelSetup+0xa0>)
 800ac6c:	f004 f8c0 	bl	800edf0 <siprintf>
	sprintf((char*)&word_list[OFF]   ,"off");
 800ac70:	4915      	ldr	r1, [pc, #84]	; (800acc8 <modelSetup+0xa4>)
 800ac72:	4816      	ldr	r0, [pc, #88]	; (800accc <modelSetup+0xa8>)
 800ac74:	f004 f8bc 	bl	800edf0 <siprintf>


	  return AI_OK;
 800ac78:	2300      	movs	r3, #0


}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	0800f8a4 	.word	0x0800f8a4
 800ac84:	20001f20 	.word	0x20001f20
 800ac88:	0800f8a8 	.word	0x0800f8a8
 800ac8c:	20001f2a 	.word	0x20001f2a
 800ac90:	0800f8ac 	.word	0x0800f8ac
 800ac94:	20001f34 	.word	0x20001f34
 800ac98:	0800f8b0 	.word	0x0800f8b0
 800ac9c:	20001f3e 	.word	0x20001f3e
 800aca0:	0800f8b8 	.word	0x0800f8b8
 800aca4:	20001f48 	.word	0x20001f48
 800aca8:	0800f8c0 	.word	0x0800f8c0
 800acac:	20001f52 	.word	0x20001f52
 800acb0:	0800f8c8 	.word	0x0800f8c8
 800acb4:	20001f5c 	.word	0x20001f5c
 800acb8:	0800f8d0 	.word	0x0800f8d0
 800acbc:	20001f66 	.word	0x20001f66
 800acc0:	0800f8d4 	.word	0x0800f8d4
 800acc4:	20001f70 	.word	0x20001f70
 800acc8:	0800f8d8 	.word	0x0800f8d8
 800accc:	20001f7a 	.word	0x20001f7a

0800acd0 <modelRun>:

ModelOutput modelRun(float* input)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	f5ad 2d97 	sub.w	sp, sp, #309248	; 0x4b800
 800acd6:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
 800acda:	af00      	add	r7, sp, #0
 800acdc:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800ace0:	f6a3 5334 	subw	r3, r3, #3380	; 0xd34
 800ace4:	6018      	str	r0, [r3, #0]

	ai_error ai_err;
	  AI_ALIGNED(4) ai_u8 activations[AI_PHASE_1_DATA_ACTIVATIONS_SIZE];
	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
		AI_PHASE_1_DATA_WEIGHTS(ai_phase_1_data_weights_get()),
 800ace6:	f7ff ff93 	bl	800ac10 <ai_phase_1_data_weights_get>
 800acea:	4602      	mov	r2, r0
 800acec:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800acf0:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 800acf4:	4611      	mov	r1, r2
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff ff54 	bl	800aba4 <ai_phase_1_data_weights_buffer_get>
		AI_PHASE_1_DATA_ACTIVATIONS(activations)
 800acfc:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800ad00:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 800ad04:	f103 021c 	add.w	r2, r3, #28
 800ad08:	4b7c      	ldr	r3, [pc, #496]	; (800aefc <modelRun+0x22c>)
 800ad0a:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800ad0e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800ad12:	443b      	add	r3, r7
 800ad14:	4619      	mov	r1, r3
 800ad16:	4610      	mov	r0, r2
 800ad18:	f7ff ff0e 	bl	800ab38 <ai_phase_1_data_activations_buffer_get>
	  };

	  // Create instance of neural network
	  ai_err = ai_phase_1_create(&phase_1, AI_PHASE_1_DATA_CONFIG);
 800ad1c:	4b78      	ldr	r3, [pc, #480]	; (800af00 <modelRun+0x230>)
 800ad1e:	443b      	add	r3, r7
 800ad20:	2100      	movs	r1, #0
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7ff fe72 	bl	800aa0c <ai_phase_1_create>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	4b76      	ldr	r3, [pc, #472]	; (800af04 <modelRun+0x234>)
 800ad2c:	443b      	add	r3, r7
 800ad2e:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800ad32:	601a      	str	r2, [r3, #0]
	  if (ai_err.type != AI_ERROR_NONE)
 800ad34:	4b73      	ldr	r3, [pc, #460]	; (800af04 <modelRun+0x234>)
 800ad36:	443b      	add	r3, r7
 800ad38:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <modelRun+0x76>
	  {
		return 2;
 800ad42:	2302      	movs	r3, #2
 800ad44:	e0d3      	b.n	800aeee <modelRun+0x21e>
	  }

		// Initialize neural network
		if (!ai_phase_1_init(phase_1, &ai_params))
 800ad46:	4b6e      	ldr	r3, [pc, #440]	; (800af00 <modelRun+0x230>)
 800ad48:	443b      	add	r3, r7
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	4b6e      	ldr	r3, [pc, #440]	; (800af08 <modelRun+0x238>)
 800ad4e:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800ad52:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800ad56:	443b      	add	r3, r7
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	f7ff fea0 	bl	800aaa0 <ai_phase_1_init>
 800ad60:	4603      	mov	r3, r0
 800ad62:	f083 0301 	eor.w	r3, r3, #1
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <modelRun+0xa0>
		{
		  return 1;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e0be      	b.n	800aeee <modelRun+0x21e>
		}
		// Initialize wrapper structs that hold pointers to data and info about the
		  // data (tensor height, width, channels)
		  ai_input  = ai_phase_1_inputs_get(phase_1, 0);
 800ad70:	4b63      	ldr	r3, [pc, #396]	; (800af00 <modelRun+0x230>)
 800ad72:	443b      	add	r3, r7
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2100      	movs	r1, #0
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7ff fe5d 	bl	800aa38 <ai_phase_1_inputs_get>
 800ad7e:	4b63      	ldr	r3, [pc, #396]	; (800af0c <modelRun+0x23c>)
 800ad80:	443b      	add	r3, r7
 800ad82:	6018      	str	r0, [r3, #0]

		  ai_output = AI_PHASE_1_OUT;
 800ad84:	2100      	movs	r1, #0
 800ad86:	2000      	movs	r0, #0
 800ad88:	f7ff fe70 	bl	800aa6c <ai_phase_1_outputs_get>
 800ad8c:	4b60      	ldr	r3, [pc, #384]	; (800af10 <modelRun+0x240>)
 800ad8e:	443b      	add	r3, r7
 800ad90:	6018      	str	r0, [r3, #0]


		  // Set pointers wrapper structs to our data buffers
		  //ai_input[0].n_batches = 1;
		  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800ad92:	4b5e      	ldr	r3, [pc, #376]	; (800af0c <modelRun+0x23c>)
 800ad94:	443b      	add	r3, r7
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	4b5e      	ldr	r3, [pc, #376]	; (800af14 <modelRun+0x244>)
 800ad9a:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800ad9e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800ada2:	443b      	add	r3, r7
 800ada4:	6053      	str	r3, [r2, #4]
		  //ai_output[0].n_batches = 1;
	float y_val[10];
	// Fill input buffer (use test value)
	for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800ada6:	2300      	movs	r3, #0
 800ada8:	4a5b      	ldr	r2, [pc, #364]	; (800af18 <modelRun+0x248>)
 800adaa:	443a      	add	r2, r7
 800adac:	6013      	str	r3, [r2, #0]
 800adae:	e01d      	b.n	800adec <modelRun+0x11c>
	{
		((ai_float *)in_data)[i] = (ai_float)input[i];
 800adb0:	4b59      	ldr	r3, [pc, #356]	; (800af18 <modelRun+0x248>)
 800adb2:	443b      	add	r3, r7
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	f607 5238 	addw	r2, r7, #3384	; 0xd38
 800adbc:	f6a2 5234 	subw	r2, r2, #3380	; 0xd34
 800adc0:	6812      	ldr	r2, [r2, #0]
 800adc2:	441a      	add	r2, r3
 800adc4:	4b54      	ldr	r3, [pc, #336]	; (800af18 <modelRun+0x248>)
 800adc6:	443b      	add	r3, r7
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	0099      	lsls	r1, r3, #2
 800adcc:	4b51      	ldr	r3, [pc, #324]	; (800af14 <modelRun+0x244>)
 800adce:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800add2:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800add6:	443b      	add	r3, r7
 800add8:	440b      	add	r3, r1
 800adda:	6812      	ldr	r2, [r2, #0]
 800addc:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800adde:	4b4e      	ldr	r3, [pc, #312]	; (800af18 <modelRun+0x248>)
 800ade0:	443b      	add	r3, r7
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	3301      	adds	r3, #1
 800ade6:	4a4c      	ldr	r2, [pc, #304]	; (800af18 <modelRun+0x248>)
 800ade8:	443a      	add	r2, r7
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	4b4a      	ldr	r3, [pc, #296]	; (800af18 <modelRun+0x248>)
 800adee:	443b      	add	r3, r7
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f5b3 5ffc 	cmp.w	r3, #8064	; 0x1f80
 800adf6:	d3db      	bcc.n	800adb0 <modelRun+0xe0>
	}


	// Perform inference
	nbatch = ai_phase_1_run(phase_1, &ai_input[0], &ai_output[0]);
 800adf8:	4b41      	ldr	r3, [pc, #260]	; (800af00 <modelRun+0x230>)
 800adfa:	443b      	add	r3, r7
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a44      	ldr	r2, [pc, #272]	; (800af10 <modelRun+0x240>)
 800ae00:	443a      	add	r2, r7
 800ae02:	6812      	ldr	r2, [r2, #0]
 800ae04:	4941      	ldr	r1, [pc, #260]	; (800af0c <modelRun+0x23c>)
 800ae06:	4439      	add	r1, r7
 800ae08:	6809      	ldr	r1, [r1, #0]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7ff fe84 	bl	800ab18 <ai_phase_1_run>
 800ae10:	4b42      	ldr	r3, [pc, #264]	; (800af1c <modelRun+0x24c>)
 800ae12:	443b      	add	r3, r7
 800ae14:	6018      	str	r0, [r3, #0]
	if (nbatch != 1) {
 800ae16:	4b41      	ldr	r3, [pc, #260]	; (800af1c <modelRun+0x24c>)
 800ae18:	443b      	add	r3, r7
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d00b      	beq.n	800ae38 <modelRun+0x168>
		ai_err =  ai_phase_1_get_error(phase_1);
 800ae20:	4b37      	ldr	r3, [pc, #220]	; (800af00 <modelRun+0x230>)
 800ae22:	443b      	add	r3, r7
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7ff fde4 	bl	800a9f4 <ai_phase_1_get_error>
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	4b35      	ldr	r3, [pc, #212]	; (800af04 <modelRun+0x234>)
 800ae30:	443b      	add	r3, r7
 800ae32:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800ae36:	601a      	str	r2, [r3, #0]
	}
	float max = 0;
 800ae38:	f04f 0300 	mov.w	r3, #0
 800ae3c:	4a38      	ldr	r2, [pc, #224]	; (800af20 <modelRun+0x250>)
 800ae3e:	443a      	add	r2, r7
 800ae40:	6013      	str	r3, [r2, #0]
	int max_ind = 0;
 800ae42:	2300      	movs	r3, #0
 800ae44:	4a37      	ldr	r2, [pc, #220]	; (800af24 <modelRun+0x254>)
 800ae46:	443a      	add	r2, r7
 800ae48:	6013      	str	r3, [r2, #0]
	for (int i =0; i<10; i++)
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	4a36      	ldr	r2, [pc, #216]	; (800af28 <modelRun+0x258>)
 800ae4e:	443a      	add	r2, r7
 800ae50:	6013      	str	r3, [r2, #0]
 800ae52:	e043      	b.n	800aedc <modelRun+0x20c>
	{
		// Read output (predicted y) of neural network
		y_val[i] = ((float *)out_data)[i];
 800ae54:	4b34      	ldr	r3, [pc, #208]	; (800af28 <modelRun+0x258>)
 800ae56:	443b      	add	r3, r7
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	009a      	lsls	r2, r3, #2
 800ae5c:	4b33      	ldr	r3, [pc, #204]	; (800af2c <modelRun+0x25c>)
 800ae5e:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800ae62:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800ae66:	443b      	add	r3, r7
 800ae68:	4413      	add	r3, r2
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800ae70:	f6a3 512c 	subw	r1, r3, #3372	; 0xd2c
 800ae74:	4b2c      	ldr	r3, [pc, #176]	; (800af28 <modelRun+0x258>)
 800ae76:	443b      	add	r3, r7
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	440b      	add	r3, r1
 800ae7e:	601a      	str	r2, [r3, #0]
		if (y_val[i]>max)
 800ae80:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800ae84:	f6a3 522c 	subw	r2, r3, #3372	; 0xd2c
 800ae88:	4b27      	ldr	r3, [pc, #156]	; (800af28 <modelRun+0x258>)
 800ae8a:	443b      	add	r3, r7
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	4413      	add	r3, r2
 800ae92:	edd3 7a00 	vldr	s15, [r3]
 800ae96:	4b22      	ldr	r3, [pc, #136]	; (800af20 <modelRun+0x250>)
 800ae98:	443b      	add	r3, r7
 800ae9a:	ed93 7a00 	vldr	s14, [r3]
 800ae9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea6:	d512      	bpl.n	800aece <modelRun+0x1fe>
		{
			max_ind = i;
 800aea8:	4b1f      	ldr	r3, [pc, #124]	; (800af28 <modelRun+0x258>)
 800aeaa:	443b      	add	r3, r7
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a1d      	ldr	r2, [pc, #116]	; (800af24 <modelRun+0x254>)
 800aeb0:	443a      	add	r2, r7
 800aeb2:	6013      	str	r3, [r2, #0]
			max  = y_val[i];
 800aeb4:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800aeb8:	f6a3 522c 	subw	r2, r3, #3372	; 0xd2c
 800aebc:	4b1a      	ldr	r3, [pc, #104]	; (800af28 <modelRun+0x258>)
 800aebe:	443b      	add	r3, r7
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	4413      	add	r3, r2
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a15      	ldr	r2, [pc, #84]	; (800af20 <modelRun+0x250>)
 800aeca:	443a      	add	r2, r7
 800aecc:	6013      	str	r3, [r2, #0]
	for (int i =0; i<10; i++)
 800aece:	4b16      	ldr	r3, [pc, #88]	; (800af28 <modelRun+0x258>)
 800aed0:	443b      	add	r3, r7
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3301      	adds	r3, #1
 800aed6:	4a14      	ldr	r2, [pc, #80]	; (800af28 <modelRun+0x258>)
 800aed8:	443a      	add	r2, r7
 800aeda:	6013      	str	r3, [r2, #0]
 800aedc:	4b12      	ldr	r3, [pc, #72]	; (800af28 <modelRun+0x258>)
 800aede:	443b      	add	r3, r7
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2b09      	cmp	r3, #9
 800aee4:	ddb6      	ble.n	800ae54 <modelRun+0x184>
		}
	}

	return max_ind;
 800aee6:	4b0f      	ldr	r3, [pc, #60]	; (800af24 <modelRun+0x254>)
 800aee8:	443b      	add	r3, r7
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	b2db      	uxtb	r3, r3

}
 800aeee:	4618      	mov	r0, r3
 800aef0:	f507 2797 	add.w	r7, r7, #309248	; 0x4b800
 800aef4:	f507 67a7 	add.w	r7, r7, #1336	; 0x538
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	fffb4334 	.word	0xfffb4334
 800af00:	0004bd18 	.word	0x0004bd18
 800af04:	00044d38 	.word	0x00044d38
 800af08:	fffb42fc 	.word	0xfffb42fc
 800af0c:	0004bd24 	.word	0x0004bd24
 800af10:	0004bd20 	.word	0x0004bd20
 800af14:	ffff81e0 	.word	0xffff81e0
 800af18:	0004bd34 	.word	0x0004bd34
 800af1c:	0004bd1c 	.word	0x0004bd1c
 800af20:	0004bd30 	.word	0x0004bd30
 800af24:	0004bd2c 	.word	0x0004bd2c
 800af28:	0004bd28 	.word	0x0004bd28
 800af2c:	ffff81b8 	.word	0xffff81b8

0800af30 <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800af30:	b580      	push	{r7, lr}
 800af32:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800af34:	2200      	movs	r2, #0
 800af36:	4906      	ldr	r1, [pc, #24]	; (800af50 <SDInit+0x20>)
 800af38:	4806      	ldr	r0, [pc, #24]	; (800af54 <SDInit+0x24>)
 800af3a:	f7fe fe33 	bl	8009ba4 <f_mount>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d001      	beq.n	800af48 <SDInit+0x18>
	      {
	          Error_Handler();
 800af44:	f7f6 f926 	bl	8001194 <Error_Handler>
	          if(val != FR_OK)
	          {
	        	  return -1;
	          }
	      }
	return 0;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	2000198c 	.word	0x2000198c
 800af54:	20001990 	.word	0x20001990

0800af58 <openFile>:
		  return -1;
	  }
	  return 0;
}
int openFile(char* file_name)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_OPEN_EXISTING | FA_READ);
 800af60:	2201      	movs	r2, #1
 800af62:	6879      	ldr	r1, [r7, #4]
 800af64:	4807      	ldr	r0, [pc, #28]	; (800af84 <openFile+0x2c>)
 800af66:	f7fe fe63 	bl	8009c30 <f_open>
 800af6a:	4603      	mov	r3, r0
 800af6c:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <openFile+0x22>
	  {
		  return -1;
 800af74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af78:	e000      	b.n	800af7c <openFile+0x24>
	  }
	  return 0;
 800af7a:	2300      	movs	r3, #0
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	20001bc0 	.word	0x20001bc0

0800af88 <readFile>:
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
	return byteswritten;
}
int readFile(char*buffer , int size)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
	uint32_t bytesread;
	int err;
	f_read(&SDFile, buffer, size, (void *)&bytesread);
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	f107 030c 	add.w	r3, r7, #12
 800af98:	6879      	ldr	r1, [r7, #4]
 800af9a:	4804      	ldr	r0, [pc, #16]	; (800afac <readFile+0x24>)
 800af9c:	f7ff f806 	bl	8009fac <f_read>
	return bytesread;
 800afa0:	68fb      	ldr	r3, [r7, #12]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	20001bc0 	.word	0x20001bc0

0800afb0 <SDclose>:
int SDclose()
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800afb4:	4802      	ldr	r0, [pc, #8]	; (800afc0 <SDclose+0x10>)
 800afb6:	f7ff f9b6 	bl	800a326 <f_close>
	return 0;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	20001bc0 	.word	0x20001bc0

0800afc4 <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern click;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800afce:	88fb      	ldrh	r3, [r7, #6]
 800afd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afd4:	d103      	bne.n	800afde <HAL_GPIO_EXTI_Callback+0x1a>
	  click = 1;
 800afd6:	4b05      	ldr	r3, [pc, #20]	; (800afec <HAL_GPIO_EXTI_Callback+0x28>)
 800afd8:	2201      	movs	r2, #1
 800afda:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800afdc:	e000      	b.n	800afe0 <HAL_GPIO_EXTI_Callback+0x1c>
      __NOP();
 800afde:	bf00      	nop
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr
 800afec:	20001684 	.word	0x20001684

0800aff0 <ledsShowValue>:

void ledsShowValue(int value)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, !((value)&0x1));
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	bf0c      	ite	eq
 800b002:	2301      	moveq	r3, #1
 800b004:	2300      	movne	r3, #0
 800b006:	b2db      	uxtb	r3, r3
 800b008:	461a      	mov	r2, r3
 800b00a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b00e:	4817      	ldr	r0, [pc, #92]	; (800b06c <ledsShowValue+0x7c>)
 800b010:	f7f8 fa42 	bl	8003498 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, !((value>>1)&0x1));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f003 0302 	and.w	r3, r3, #2
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	bf0c      	ite	eq
 800b01e:	2301      	moveq	r3, #1
 800b020:	2300      	movne	r3, #0
 800b022:	b2db      	uxtb	r3, r3
 800b024:	461a      	mov	r2, r3
 800b026:	2101      	movs	r1, #1
 800b028:	4811      	ldr	r0, [pc, #68]	; (800b070 <ledsShowValue+0x80>)
 800b02a:	f7f8 fa35 	bl	8003498 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !((value>>2)&0x1));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b00      	cmp	r3, #0
 800b036:	bf0c      	ite	eq
 800b038:	2301      	moveq	r3, #1
 800b03a:	2300      	movne	r3, #0
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	461a      	mov	r2, r3
 800b040:	2102      	movs	r1, #2
 800b042:	480b      	ldr	r0, [pc, #44]	; (800b070 <ledsShowValue+0x80>)
 800b044:	f7f8 fa28 	bl	8003498 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, !((value>>3)&0x1));
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f003 0308 	and.w	r3, r3, #8
 800b04e:	2b00      	cmp	r3, #0
 800b050:	bf0c      	ite	eq
 800b052:	2301      	moveq	r3, #1
 800b054:	2300      	movne	r3, #0
 800b056:	b2db      	uxtb	r3, r3
 800b058:	461a      	mov	r2, r3
 800b05a:	2108      	movs	r1, #8
 800b05c:	4804      	ldr	r0, [pc, #16]	; (800b070 <ledsShowValue+0x80>)
 800b05e:	f7f8 fa1b 	bl	8003498 <HAL_GPIO_WritePin>
}
 800b062:	bf00      	nop
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	40022000 	.word	0x40022000
 800b070:	40022400 	.word	0x40022400

0800b074 <ai_buffer_get_size>:
 800b074:	b368      	cbz	r0, 800b0d2 <ai_buffer_get_size+0x5e>
 800b076:	4b17      	ldr	r3, [pc, #92]	; (800b0d4 <ai_buffer_get_size+0x60>)
 800b078:	4a17      	ldr	r2, [pc, #92]	; (800b0d8 <ai_buffer_get_size+0x64>)
 800b07a:	b410      	push	{r4}
 800b07c:	6804      	ldr	r4, [r0, #0]
 800b07e:	4023      	ands	r3, r4
 800b080:	4293      	cmp	r3, r2
 800b082:	d123      	bne.n	800b0cc <ai_buffer_get_size+0x58>
 800b084:	b311      	cbz	r1, 800b0cc <ai_buffer_get_size+0x58>
 800b086:	6984      	ldr	r4, [r0, #24]
 800b088:	6862      	ldr	r2, [r4, #4]
 800b08a:	321f      	adds	r2, #31
 800b08c:	f022 021f 	bic.w	r2, r2, #31
 800b090:	7d03      	ldrb	r3, [r0, #20]
 800b092:	6941      	ldr	r1, [r0, #20]
 800b094:	f1a3 0301 	sub.w	r3, r3, #1
 800b098:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800b09c:	fab3 f383 	clz	r3, r3
 800b0a0:	095b      	lsrs	r3, r3, #5
 800b0a2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800b0a6:	da0c      	bge.n	800b0c2 <ai_buffer_get_size+0x4e>
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d103      	bne.n	800b0b4 <ai_buffer_get_size+0x40>
 800b0ac:	2802      	cmp	r0, #2
 800b0ae:	f04f 0302 	mov.w	r3, #2
 800b0b2:	d006      	beq.n	800b0c2 <ai_buffer_get_size+0x4e>
 800b0b4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800b0b8:	3301      	adds	r3, #1
 800b0ba:	4298      	cmp	r0, r3
 800b0bc:	fb01 f202 	mul.w	r2, r1, r2
 800b0c0:	d1f2      	bne.n	800b0a8 <ai_buffer_get_size+0x34>
 800b0c2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800b0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ca:	4770      	bx	lr
 800b0cc:	6984      	ldr	r4, [r0, #24]
 800b0ce:	6862      	ldr	r2, [r4, #4]
 800b0d0:	e7de      	b.n	800b090 <ai_buffer_get_size+0x1c>
 800b0d2:	4770      	bx	lr
 800b0d4:	017fffff 	.word	0x017fffff
 800b0d8:	000400c0 	.word	0x000400c0

0800b0dc <ai_buffer_array_sane>:
 800b0dc:	b138      	cbz	r0, 800b0ee <ai_buffer_array_sane+0x12>
 800b0de:	6843      	ldr	r3, [r0, #4]
 800b0e0:	b123      	cbz	r3, 800b0ec <ai_buffer_array_sane+0x10>
 800b0e2:	8840      	ldrh	r0, [r0, #2]
 800b0e4:	3800      	subs	r0, #0
 800b0e6:	bf18      	it	ne
 800b0e8:	2001      	movne	r0, #1
 800b0ea:	4770      	bx	lr
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	4770      	bx	lr

0800b0f0 <_ai_platform_acquire_crc>:
 800b0f0:	2001      	movs	r0, #1
 800b0f2:	4770      	bx	lr

0800b0f4 <_ai_platform_release_crc>:
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop

0800b0f8 <ai_platform_get_weights_map>:
 800b0f8:	2900      	cmp	r1, #0
 800b0fa:	bf18      	it	ne
 800b0fc:	2800      	cmpne	r0, #0
 800b0fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b100:	bf0c      	ite	eq
 800b102:	2401      	moveq	r4, #1
 800b104:	2400      	movne	r4, #0
 800b106:	2a00      	cmp	r2, #0
 800b108:	bf08      	it	eq
 800b10a:	f044 0401 	orreq.w	r4, r4, #1
 800b10e:	b114      	cbz	r4, 800b116 <ai_platform_get_weights_map+0x1e>
 800b110:	2400      	movs	r4, #0
 800b112:	4620      	mov	r0, r4
 800b114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b116:	4616      	mov	r6, r2
 800b118:	4b22      	ldr	r3, [pc, #136]	; (800b1a4 <ai_platform_get_weights_map+0xac>)
 800b11a:	6812      	ldr	r2, [r2, #0]
 800b11c:	4605      	mov	r5, r0
 800b11e:	460f      	mov	r7, r1
 800b120:	429a      	cmp	r2, r3
 800b122:	d022      	beq.n	800b16a <ai_platform_get_weights_map+0x72>
 800b124:	6870      	ldr	r0, [r6, #4]
 800b126:	2800      	cmp	r0, #0
 800b128:	d0f2      	beq.n	800b110 <ai_platform_get_weights_map+0x18>
 800b12a:	6806      	ldr	r6, [r0, #0]
 800b12c:	429e      	cmp	r6, r3
 800b12e:	d006      	beq.n	800b13e <ai_platform_get_weights_map+0x46>
 800b130:	f1a1 0401 	sub.w	r4, r1, #1
 800b134:	6028      	str	r0, [r5, #0]
 800b136:	fab4 f484 	clz	r4, r4
 800b13a:	0964      	lsrs	r4, r4, #5
 800b13c:	e7e9      	b.n	800b112 <ai_platform_get_weights_map+0x1a>
 800b13e:	3d04      	subs	r5, #4
 800b140:	4602      	mov	r2, r0
 800b142:	4621      	mov	r1, r4
 800b144:	e000      	b.n	800b148 <ai_platform_get_weights_map+0x50>
 800b146:	4619      	mov	r1, r3
 800b148:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800b14c:	42b3      	cmp	r3, r6
 800b14e:	d025      	beq.n	800b19c <ai_platform_get_weights_map+0xa4>
 800b150:	f845 3f04 	str.w	r3, [r5, #4]!
 800b154:	1c4b      	adds	r3, r1, #1
 800b156:	429f      	cmp	r7, r3
 800b158:	d8f5      	bhi.n	800b146 <ai_platform_get_weights_map+0x4e>
 800b15a:	d1da      	bne.n	800b112 <ai_platform_get_weights_map+0x1a>
 800b15c:	3102      	adds	r1, #2
 800b15e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800b162:	42b3      	cmp	r3, r6
 800b164:	d1d5      	bne.n	800b112 <ai_platform_get_weights_map+0x1a>
 800b166:	2401      	movs	r4, #1
 800b168:	e7d3      	b.n	800b112 <ai_platform_get_weights_map+0x1a>
 800b16a:	1d30      	adds	r0, r6, #4
 800b16c:	f7ff ffb6 	bl	800b0dc <ai_buffer_array_sane>
 800b170:	2800      	cmp	r0, #0
 800b172:	d0cd      	beq.n	800b110 <ai_platform_get_weights_map+0x18>
 800b174:	88f3      	ldrh	r3, [r6, #6]
 800b176:	429f      	cmp	r7, r3
 800b178:	d1ca      	bne.n	800b110 <ai_platform_get_weights_map+0x18>
 800b17a:	3d04      	subs	r5, #4
 800b17c:	4622      	mov	r2, r4
 800b17e:	68b3      	ldr	r3, [r6, #8]
 800b180:	4423      	add	r3, r4
 800b182:	341c      	adds	r4, #28
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	b123      	cbz	r3, 800b192 <ai_platform_get_weights_map+0x9a>
 800b188:	3201      	adds	r2, #1
 800b18a:	f845 3f04 	str.w	r3, [r5, #4]!
 800b18e:	4297      	cmp	r7, r2
 800b190:	d8f5      	bhi.n	800b17e <ai_platform_get_weights_map+0x86>
 800b192:	1abc      	subs	r4, r7, r2
 800b194:	fab4 f484 	clz	r4, r4
 800b198:	0964      	lsrs	r4, r4, #5
 800b19a:	e7ba      	b.n	800b112 <ai_platform_get_weights_map+0x1a>
 800b19c:	428f      	cmp	r7, r1
 800b19e:	d1b8      	bne.n	800b112 <ai_platform_get_weights_map+0x1a>
 800b1a0:	e7e1      	b.n	800b166 <ai_platform_get_weights_map+0x6e>
 800b1a2:	bf00      	nop
 800b1a4:	a1facade 	.word	0xa1facade

0800b1a8 <ai_platform_get_activations_map>:
 800b1a8:	2900      	cmp	r1, #0
 800b1aa:	bf18      	it	ne
 800b1ac:	2800      	cmpne	r0, #0
 800b1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b0:	bf0c      	ite	eq
 800b1b2:	2401      	moveq	r4, #1
 800b1b4:	2400      	movne	r4, #0
 800b1b6:	2a00      	cmp	r2, #0
 800b1b8:	bf08      	it	eq
 800b1ba:	f044 0401 	orreq.w	r4, r4, #1
 800b1be:	b114      	cbz	r4, 800b1c6 <ai_platform_get_activations_map+0x1e>
 800b1c0:	2400      	movs	r4, #0
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c6:	4616      	mov	r6, r2
 800b1c8:	4b22      	ldr	r3, [pc, #136]	; (800b254 <ai_platform_get_activations_map+0xac>)
 800b1ca:	6812      	ldr	r2, [r2, #0]
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	460f      	mov	r7, r1
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d022      	beq.n	800b21a <ai_platform_get_activations_map+0x72>
 800b1d4:	6a30      	ldr	r0, [r6, #32]
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d0f2      	beq.n	800b1c0 <ai_platform_get_activations_map+0x18>
 800b1da:	6806      	ldr	r6, [r0, #0]
 800b1dc:	429e      	cmp	r6, r3
 800b1de:	d006      	beq.n	800b1ee <ai_platform_get_activations_map+0x46>
 800b1e0:	f1a1 0401 	sub.w	r4, r1, #1
 800b1e4:	6028      	str	r0, [r5, #0]
 800b1e6:	fab4 f484 	clz	r4, r4
 800b1ea:	0964      	lsrs	r4, r4, #5
 800b1ec:	e7e9      	b.n	800b1c2 <ai_platform_get_activations_map+0x1a>
 800b1ee:	3d04      	subs	r5, #4
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	4621      	mov	r1, r4
 800b1f4:	e000      	b.n	800b1f8 <ai_platform_get_activations_map+0x50>
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800b1fc:	42b3      	cmp	r3, r6
 800b1fe:	d026      	beq.n	800b24e <ai_platform_get_activations_map+0xa6>
 800b200:	f845 3f04 	str.w	r3, [r5, #4]!
 800b204:	1c4b      	adds	r3, r1, #1
 800b206:	429f      	cmp	r7, r3
 800b208:	d8f5      	bhi.n	800b1f6 <ai_platform_get_activations_map+0x4e>
 800b20a:	d1da      	bne.n	800b1c2 <ai_platform_get_activations_map+0x1a>
 800b20c:	3102      	adds	r1, #2
 800b20e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800b212:	42b3      	cmp	r3, r6
 800b214:	d1d5      	bne.n	800b1c2 <ai_platform_get_activations_map+0x1a>
 800b216:	2401      	movs	r4, #1
 800b218:	e7d3      	b.n	800b1c2 <ai_platform_get_activations_map+0x1a>
 800b21a:	f106 000c 	add.w	r0, r6, #12
 800b21e:	f7ff ff5d 	bl	800b0dc <ai_buffer_array_sane>
 800b222:	2800      	cmp	r0, #0
 800b224:	d0cc      	beq.n	800b1c0 <ai_platform_get_activations_map+0x18>
 800b226:	89f3      	ldrh	r3, [r6, #14]
 800b228:	429f      	cmp	r7, r3
 800b22a:	d1c9      	bne.n	800b1c0 <ai_platform_get_activations_map+0x18>
 800b22c:	3d04      	subs	r5, #4
 800b22e:	4622      	mov	r2, r4
 800b230:	6933      	ldr	r3, [r6, #16]
 800b232:	4423      	add	r3, r4
 800b234:	341c      	adds	r4, #28
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	b123      	cbz	r3, 800b244 <ai_platform_get_activations_map+0x9c>
 800b23a:	3201      	adds	r2, #1
 800b23c:	f845 3f04 	str.w	r3, [r5, #4]!
 800b240:	4297      	cmp	r7, r2
 800b242:	d8f5      	bhi.n	800b230 <ai_platform_get_activations_map+0x88>
 800b244:	1abc      	subs	r4, r7, r2
 800b246:	fab4 f484 	clz	r4, r4
 800b24a:	0964      	lsrs	r4, r4, #5
 800b24c:	e7b9      	b.n	800b1c2 <ai_platform_get_activations_map+0x1a>
 800b24e:	428f      	cmp	r7, r1
 800b250:	d1b7      	bne.n	800b1c2 <ai_platform_get_activations_map+0x1a>
 800b252:	e7e0      	b.n	800b216 <ai_platform_get_activations_map+0x6e>
 800b254:	a1facade 	.word	0xa1facade

0800b258 <ai_platform_network_get_error>:
 800b258:	b510      	push	{r4, lr}
 800b25a:	2800      	cmp	r0, #0
 800b25c:	d03f      	beq.n	800b2de <ai_platform_network_get_error+0x86>
 800b25e:	4b7d      	ldr	r3, [pc, #500]	; (800b454 <ai_platform_network_get_error+0x1fc>)
 800b260:	4604      	mov	r4, r0
 800b262:	6802      	ldr	r2, [r0, #0]
 800b264:	429a      	cmp	r2, r3
 800b266:	d13a      	bne.n	800b2de <ai_platform_network_get_error+0x86>
 800b268:	f7ff ff42 	bl	800b0f0 <_ai_platform_acquire_crc>
 800b26c:	4b7a      	ldr	r3, [pc, #488]	; (800b458 <ai_platform_network_get_error+0x200>)
 800b26e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b278:	189a      	adds	r2, r3, r2
 800b27a:	2a01      	cmp	r2, #1
 800b27c:	f240 8086 	bls.w	800b38c <ai_platform_network_get_error+0x134>
 800b280:	f240 4249 	movw	r2, #1097	; 0x449
 800b284:	4293      	cmp	r3, r2
 800b286:	f000 8081 	beq.w	800b38c <ai_platform_network_get_error+0x134>
 800b28a:	4a74      	ldr	r2, [pc, #464]	; (800b45c <ai_platform_network_get_error+0x204>)
 800b28c:	6813      	ldr	r3, [r2, #0]
 800b28e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b292:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b296:	f000 8087 	beq.w	800b3a8 <ai_platform_network_get_error+0x150>
 800b29a:	6813      	ldr	r3, [r2, #0]
 800b29c:	f240 4183 	movw	r1, #1155	; 0x483
 800b2a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2a4:	428b      	cmp	r3, r1
 800b2a6:	f000 80a9 	beq.w	800b3fc <ai_platform_network_get_error+0x1a4>
 800b2aa:	6813      	ldr	r3, [r2, #0]
 800b2ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2b0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b2b4:	f000 80c0 	beq.w	800b438 <ai_platform_network_get_error+0x1e0>
 800b2b8:	6813      	ldr	r3, [r2, #0]
 800b2ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f040 8082 	bne.w	800b3c8 <ai_platform_network_get_error+0x170>
 800b2c4:	4a66      	ldr	r2, [pc, #408]	; (800b460 <ai_platform_network_get_error+0x208>)
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	6093      	str	r3, [r2, #8]
 800b2ca:	6893      	ldr	r3, [r2, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1fc      	bne.n	800b2ca <ai_platform_network_get_error+0x72>
 800b2d0:	4964      	ldr	r1, [pc, #400]	; (800b464 <ai_platform_network_get_error+0x20c>)
 800b2d2:	4b65      	ldr	r3, [pc, #404]	; (800b468 <ai_platform_network_get_error+0x210>)
 800b2d4:	6011      	str	r1, [r2, #0]
 800b2d6:	6812      	ldr	r2, [r2, #0]
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d075      	beq.n	800b3c8 <ai_platform_network_get_error+0x170>
 800b2dc:	e7fe      	b.n	800b2dc <ai_platform_network_get_error+0x84>
 800b2de:	f7ff ff07 	bl	800b0f0 <_ai_platform_acquire_crc>
 800b2e2:	4b5d      	ldr	r3, [pc, #372]	; (800b458 <ai_platform_network_get_error+0x200>)
 800b2e4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2ee:	185a      	adds	r2, r3, r1
 800b2f0:	2a01      	cmp	r2, #1
 800b2f2:	d929      	bls.n	800b348 <ai_platform_network_get_error+0xf0>
 800b2f4:	f240 4249 	movw	r2, #1097	; 0x449
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d025      	beq.n	800b348 <ai_platform_network_get_error+0xf0>
 800b2fc:	4a57      	ldr	r2, [pc, #348]	; (800b45c <ai_platform_network_get_error+0x204>)
 800b2fe:	6813      	ldr	r3, [r2, #0]
 800b300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b304:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b308:	d02b      	beq.n	800b362 <ai_platform_network_get_error+0x10a>
 800b30a:	6813      	ldr	r3, [r2, #0]
 800b30c:	f240 4183 	movw	r1, #1155	; 0x483
 800b310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b314:	428b      	cmp	r3, r1
 800b316:	d060      	beq.n	800b3da <ai_platform_network_get_error+0x182>
 800b318:	6813      	ldr	r3, [r2, #0]
 800b31a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b31e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b322:	d07c      	beq.n	800b41e <ai_platform_network_get_error+0x1c6>
 800b324:	6813      	ldr	r3, [r2, #0]
 800b326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d129      	bne.n	800b382 <ai_platform_network_get_error+0x12a>
 800b32e:	4a4c      	ldr	r2, [pc, #304]	; (800b460 <ai_platform_network_get_error+0x208>)
 800b330:	2301      	movs	r3, #1
 800b332:	6093      	str	r3, [r2, #8]
 800b334:	6893      	ldr	r3, [r2, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1fc      	bne.n	800b334 <ai_platform_network_get_error+0xdc>
 800b33a:	494a      	ldr	r1, [pc, #296]	; (800b464 <ai_platform_network_get_error+0x20c>)
 800b33c:	4b4a      	ldr	r3, [pc, #296]	; (800b468 <ai_platform_network_get_error+0x210>)
 800b33e:	6011      	str	r1, [r2, #0]
 800b340:	6812      	ldr	r2, [r2, #0]
 800b342:	429a      	cmp	r2, r3
 800b344:	d01d      	beq.n	800b382 <ai_platform_network_get_error+0x12a>
 800b346:	e7fe      	b.n	800b346 <ai_platform_network_get_error+0xee>
 800b348:	4a45      	ldr	r2, [pc, #276]	; (800b460 <ai_platform_network_get_error+0x208>)
 800b34a:	2301      	movs	r3, #1
 800b34c:	6093      	str	r3, [r2, #8]
 800b34e:	6893      	ldr	r3, [r2, #8]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1fc      	bne.n	800b34e <ai_platform_network_get_error+0xf6>
 800b354:	4943      	ldr	r1, [pc, #268]	; (800b464 <ai_platform_network_get_error+0x20c>)
 800b356:	4b44      	ldr	r3, [pc, #272]	; (800b468 <ai_platform_network_get_error+0x210>)
 800b358:	6011      	str	r1, [r2, #0]
 800b35a:	6812      	ldr	r2, [r2, #0]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d010      	beq.n	800b382 <ai_platform_network_get_error+0x12a>
 800b360:	e7fe      	b.n	800b360 <ai_platform_network_get_error+0x108>
 800b362:	4a42      	ldr	r2, [pc, #264]	; (800b46c <ai_platform_network_get_error+0x214>)
 800b364:	2301      	movs	r3, #1
 800b366:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b36a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1fb      	bne.n	800b36a <ai_platform_network_get_error+0x112>
 800b372:	493c      	ldr	r1, [pc, #240]	; (800b464 <ai_platform_network_get_error+0x20c>)
 800b374:	4b3c      	ldr	r3, [pc, #240]	; (800b468 <ai_platform_network_get_error+0x210>)
 800b376:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b37a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b37e:	429a      	cmp	r2, r3
 800b380:	d111      	bne.n	800b3a6 <ai_platform_network_get_error+0x14e>
 800b382:	f7ff feb7 	bl	800b0f4 <_ai_platform_release_crc>
 800b386:	f241 0010 	movw	r0, #4112	; 0x1010
 800b38a:	bd10      	pop	{r4, pc}
 800b38c:	4a34      	ldr	r2, [pc, #208]	; (800b460 <ai_platform_network_get_error+0x208>)
 800b38e:	2301      	movs	r3, #1
 800b390:	6093      	str	r3, [r2, #8]
 800b392:	6893      	ldr	r3, [r2, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1fc      	bne.n	800b392 <ai_platform_network_get_error+0x13a>
 800b398:	4932      	ldr	r1, [pc, #200]	; (800b464 <ai_platform_network_get_error+0x20c>)
 800b39a:	4b33      	ldr	r3, [pc, #204]	; (800b468 <ai_platform_network_get_error+0x210>)
 800b39c:	6011      	str	r1, [r2, #0]
 800b39e:	6812      	ldr	r2, [r2, #0]
 800b3a0:	429a      	cmp	r2, r3
 800b3a2:	d011      	beq.n	800b3c8 <ai_platform_network_get_error+0x170>
 800b3a4:	e7fe      	b.n	800b3a4 <ai_platform_network_get_error+0x14c>
 800b3a6:	e7fe      	b.n	800b3a6 <ai_platform_network_get_error+0x14e>
 800b3a8:	4a30      	ldr	r2, [pc, #192]	; (800b46c <ai_platform_network_get_error+0x214>)
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b3b0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1fb      	bne.n	800b3b0 <ai_platform_network_get_error+0x158>
 800b3b8:	492a      	ldr	r1, [pc, #168]	; (800b464 <ai_platform_network_get_error+0x20c>)
 800b3ba:	4b2b      	ldr	r3, [pc, #172]	; (800b468 <ai_platform_network_get_error+0x210>)
 800b3bc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b3c0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d107      	bne.n	800b3d8 <ai_platform_network_get_error+0x180>
 800b3c8:	f7ff fe94 	bl	800b0f4 <_ai_platform_release_crc>
 800b3cc:	f104 0010 	add.w	r0, r4, #16
 800b3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b3d4:	f001 bae6 	b.w	800c9a4 <core_get_error>
 800b3d8:	e7fe      	b.n	800b3d8 <ai_platform_network_get_error+0x180>
 800b3da:	4a24      	ldr	r2, [pc, #144]	; (800b46c <ai_platform_network_get_error+0x214>)
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b3e2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d1fb      	bne.n	800b3e2 <ai_platform_network_get_error+0x18a>
 800b3ea:	491e      	ldr	r1, [pc, #120]	; (800b464 <ai_platform_network_get_error+0x20c>)
 800b3ec:	4b1e      	ldr	r3, [pc, #120]	; (800b468 <ai_platform_network_get_error+0x210>)
 800b3ee:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b3f2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d0c3      	beq.n	800b382 <ai_platform_network_get_error+0x12a>
 800b3fa:	e7fe      	b.n	800b3fa <ai_platform_network_get_error+0x1a2>
 800b3fc:	4a1b      	ldr	r2, [pc, #108]	; (800b46c <ai_platform_network_get_error+0x214>)
 800b3fe:	2301      	movs	r3, #1
 800b400:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b404:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1fb      	bne.n	800b404 <ai_platform_network_get_error+0x1ac>
 800b40c:	4915      	ldr	r1, [pc, #84]	; (800b464 <ai_platform_network_get_error+0x20c>)
 800b40e:	4b16      	ldr	r3, [pc, #88]	; (800b468 <ai_platform_network_get_error+0x210>)
 800b410:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b414:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b418:	429a      	cmp	r2, r3
 800b41a:	d0d5      	beq.n	800b3c8 <ai_platform_network_get_error+0x170>
 800b41c:	e7fe      	b.n	800b41c <ai_platform_network_get_error+0x1c4>
 800b41e:	4a10      	ldr	r2, [pc, #64]	; (800b460 <ai_platform_network_get_error+0x208>)
 800b420:	2301      	movs	r3, #1
 800b422:	6093      	str	r3, [r2, #8]
 800b424:	6893      	ldr	r3, [r2, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1fc      	bne.n	800b424 <ai_platform_network_get_error+0x1cc>
 800b42a:	490e      	ldr	r1, [pc, #56]	; (800b464 <ai_platform_network_get_error+0x20c>)
 800b42c:	4b0e      	ldr	r3, [pc, #56]	; (800b468 <ai_platform_network_get_error+0x210>)
 800b42e:	6011      	str	r1, [r2, #0]
 800b430:	6812      	ldr	r2, [r2, #0]
 800b432:	429a      	cmp	r2, r3
 800b434:	d0a5      	beq.n	800b382 <ai_platform_network_get_error+0x12a>
 800b436:	e7fe      	b.n	800b436 <ai_platform_network_get_error+0x1de>
 800b438:	4a09      	ldr	r2, [pc, #36]	; (800b460 <ai_platform_network_get_error+0x208>)
 800b43a:	2301      	movs	r3, #1
 800b43c:	6093      	str	r3, [r2, #8]
 800b43e:	6893      	ldr	r3, [r2, #8]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1fc      	bne.n	800b43e <ai_platform_network_get_error+0x1e6>
 800b444:	4907      	ldr	r1, [pc, #28]	; (800b464 <ai_platform_network_get_error+0x20c>)
 800b446:	4b08      	ldr	r3, [pc, #32]	; (800b468 <ai_platform_network_get_error+0x210>)
 800b448:	6011      	str	r1, [r2, #0]
 800b44a:	6812      	ldr	r2, [r2, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d0bb      	beq.n	800b3c8 <ai_platform_network_get_error+0x170>
 800b450:	e7fe      	b.n	800b450 <ai_platform_network_get_error+0x1f8>
 800b452:	bf00      	nop
 800b454:	a1c00100 	.word	0xa1c00100
 800b458:	e0042000 	.word	0xe0042000
 800b45c:	5c001000 	.word	0x5c001000
 800b460:	40023000 	.word	0x40023000
 800b464:	f407a5c2 	.word	0xf407a5c2
 800b468:	b5e8b5cd 	.word	0xb5e8b5cd
 800b46c:	58024000 	.word	0x58024000

0800b470 <ai_platform_network_set_error>:
 800b470:	b110      	cbz	r0, 800b478 <ai_platform_network_set_error+0x8>
 800b472:	3010      	adds	r0, #16
 800b474:	f001 ba9c 	b.w	800c9b0 <core_set_error>
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop

0800b47c <ai_platform_inputs_get>:
 800b47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b480:	b085      	sub	sp, #20
 800b482:	9102      	str	r1, [sp, #8]
 800b484:	2800      	cmp	r0, #0
 800b486:	f000 8093 	beq.w	800b5b0 <ai_platform_inputs_get+0x134>
 800b48a:	4baa      	ldr	r3, [pc, #680]	; (800b734 <ai_platform_inputs_get+0x2b8>)
 800b48c:	4681      	mov	r9, r0
 800b48e:	6802      	ldr	r2, [r0, #0]
 800b490:	429a      	cmp	r2, r3
 800b492:	f040 808d 	bne.w	800b5b0 <ai_platform_inputs_get+0x134>
 800b496:	f7ff fe2b 	bl	800b0f0 <_ai_platform_acquire_crc>
 800b49a:	4ba7      	ldr	r3, [pc, #668]	; (800b738 <ai_platform_inputs_get+0x2bc>)
 800b49c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4a6:	189a      	adds	r2, r3, r2
 800b4a8:	2a01      	cmp	r2, #1
 800b4aa:	f240 80da 	bls.w	800b662 <ai_platform_inputs_get+0x1e6>
 800b4ae:	f240 4249 	movw	r2, #1097	; 0x449
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	f000 80d5 	beq.w	800b662 <ai_platform_inputs_get+0x1e6>
 800b4b8:	4aa0      	ldr	r2, [pc, #640]	; (800b73c <ai_platform_inputs_get+0x2c0>)
 800b4ba:	6813      	ldr	r3, [r2, #0]
 800b4bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4c0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b4c4:	f000 80dc 	beq.w	800b680 <ai_platform_inputs_get+0x204>
 800b4c8:	6813      	ldr	r3, [r2, #0]
 800b4ca:	f240 4183 	movw	r1, #1155	; 0x483
 800b4ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4d2:	428b      	cmp	r3, r1
 800b4d4:	f000 810e 	beq.w	800b6f4 <ai_platform_inputs_get+0x278>
 800b4d8:	6813      	ldr	r3, [r2, #0]
 800b4da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4de:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b4e2:	f000 8143 	beq.w	800b76c <ai_platform_inputs_get+0x2f0>
 800b4e6:	6813      	ldr	r3, [r2, #0]
 800b4e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f000 8113 	beq.w	800b718 <ai_platform_inputs_get+0x29c>
 800b4f2:	f7ff fdff 	bl	800b0f4 <_ai_platform_release_crc>
 800b4f6:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	f000 80d2 	beq.w	800b6a4 <ai_platform_inputs_get+0x228>
 800b500:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800b504:	f1ba 0f00 	cmp.w	sl, #0
 800b508:	f000 80cc 	beq.w	800b6a4 <ai_platform_inputs_get+0x228>
 800b50c:	2100      	movs	r1, #0
 800b50e:	f8cd 900c 	str.w	r9, [sp, #12]
 800b512:	460d      	mov	r5, r1
 800b514:	4689      	mov	r9, r1
 800b516:	e016      	b.n	800b546 <ai_platform_inputs_get+0xca>
 800b518:	9a01      	ldr	r2, [sp, #4]
 800b51a:	2301      	movs	r3, #1
 800b51c:	f848 3002 	str.w	r3, [r8, r2]
 800b520:	69b2      	ldr	r2, [r6, #24]
 800b522:	f04f 0301 	mov.w	r3, #1
 800b526:	6856      	ldr	r6, [r2, #4]
 800b528:	3501      	adds	r5, #1
 800b52a:	f109 091c 	add.w	r9, r9, #28
 800b52e:	7523      	strb	r3, [r4, #20]
 800b530:	2300      	movs	r3, #0
 800b532:	6962      	ldr	r2, [r4, #20]
 800b534:	60a7      	str	r7, [r4, #8]
 800b536:	f36b 221f 	bfi	r2, fp, #8, #24
 800b53a:	6126      	str	r6, [r4, #16]
 800b53c:	61a1      	str	r1, [r4, #24]
 800b53e:	60e3      	str	r3, [r4, #12]
 800b540:	6162      	str	r2, [r4, #20]
 800b542:	e9c4 0c00 	strd	r0, ip, [r4]
 800b546:	f8ba 3000 	ldrh.w	r3, [sl]
 800b54a:	b2ac      	uxth	r4, r5
 800b54c:	42ab      	cmp	r3, r5
 800b54e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800b552:	9301      	str	r3, [sp, #4]
 800b554:	f240 80b5 	bls.w	800b6c2 <ai_platform_inputs_get+0x246>
 800b558:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f000 80b0 	beq.w	800b6c2 <ai_platform_inputs_get+0x246>
 800b562:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b566:	2e00      	cmp	r6, #0
 800b568:	f000 80ab 	beq.w	800b6c2 <ai_platform_inputs_get+0x246>
 800b56c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b570:	69b2      	ldr	r2, [r6, #24]
 800b572:	68f1      	ldr	r1, [r6, #12]
 800b574:	6810      	ldr	r0, [r2, #0]
 800b576:	9100      	str	r1, [sp, #0]
 800b578:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800b57c:	68b3      	ldr	r3, [r6, #8]
 800b57e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800b582:	444c      	add	r4, r9
 800b584:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800b588:	f003 fa5e 	bl	800ea48 <ai_array_to_buffer_fmt>
 800b58c:	69b2      	ldr	r2, [r6, #24]
 800b58e:	9900      	ldr	r1, [sp, #0]
 800b590:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b594:	2f00      	cmp	r7, #0
 800b596:	d0c4      	beq.n	800b522 <ai_platform_inputs_get+0xa6>
 800b598:	2200      	movs	r2, #0
 800b59a:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800b59e:	6832      	ldr	r2, [r6, #0]
 800b5a0:	607a      	str	r2, [r7, #4]
 800b5a2:	b112      	cbz	r2, 800b5aa <ai_platform_inputs_get+0x12e>
 800b5a4:	8852      	ldrh	r2, [r2, #2]
 800b5a6:	2a00      	cmp	r2, #0
 800b5a8:	d1b6      	bne.n	800b518 <ai_platform_inputs_get+0x9c>
 800b5aa:	69b2      	ldr	r2, [r6, #24]
 800b5ac:	2700      	movs	r7, #0
 800b5ae:	e7b8      	b.n	800b522 <ai_platform_inputs_get+0xa6>
 800b5b0:	f7ff fd9e 	bl	800b0f0 <_ai_platform_acquire_crc>
 800b5b4:	4b60      	ldr	r3, [pc, #384]	; (800b738 <ai_platform_inputs_get+0x2bc>)
 800b5b6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5c0:	185a      	adds	r2, r3, r1
 800b5c2:	2a01      	cmp	r2, #1
 800b5c4:	d92a      	bls.n	800b61c <ai_platform_inputs_get+0x1a0>
 800b5c6:	f240 4249 	movw	r2, #1097	; 0x449
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d026      	beq.n	800b61c <ai_platform_inputs_get+0x1a0>
 800b5ce:	4a5b      	ldr	r2, [pc, #364]	; (800b73c <ai_platform_inputs_get+0x2c0>)
 800b5d0:	6813      	ldr	r3, [r2, #0]
 800b5d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5d6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b5da:	d02c      	beq.n	800b636 <ai_platform_inputs_get+0x1ba>
 800b5dc:	6813      	ldr	r3, [r2, #0]
 800b5de:	f240 4183 	movw	r1, #1155	; 0x483
 800b5e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5e6:	428b      	cmp	r3, r1
 800b5e8:	d073      	beq.n	800b6d2 <ai_platform_inputs_get+0x256>
 800b5ea:	6813      	ldr	r3, [r2, #0]
 800b5ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5f0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b5f4:	f000 80ac 	beq.w	800b750 <ai_platform_inputs_get+0x2d4>
 800b5f8:	6813      	ldr	r3, [r2, #0]
 800b5fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d129      	bne.n	800b656 <ai_platform_inputs_get+0x1da>
 800b602:	4a4f      	ldr	r2, [pc, #316]	; (800b740 <ai_platform_inputs_get+0x2c4>)
 800b604:	2301      	movs	r3, #1
 800b606:	6093      	str	r3, [r2, #8]
 800b608:	6893      	ldr	r3, [r2, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d1fc      	bne.n	800b608 <ai_platform_inputs_get+0x18c>
 800b60e:	494d      	ldr	r1, [pc, #308]	; (800b744 <ai_platform_inputs_get+0x2c8>)
 800b610:	4b4d      	ldr	r3, [pc, #308]	; (800b748 <ai_platform_inputs_get+0x2cc>)
 800b612:	6011      	str	r1, [r2, #0]
 800b614:	6812      	ldr	r2, [r2, #0]
 800b616:	429a      	cmp	r2, r3
 800b618:	d01d      	beq.n	800b656 <ai_platform_inputs_get+0x1da>
 800b61a:	e7fe      	b.n	800b61a <ai_platform_inputs_get+0x19e>
 800b61c:	4a48      	ldr	r2, [pc, #288]	; (800b740 <ai_platform_inputs_get+0x2c4>)
 800b61e:	2301      	movs	r3, #1
 800b620:	6093      	str	r3, [r2, #8]
 800b622:	6893      	ldr	r3, [r2, #8]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d1fc      	bne.n	800b622 <ai_platform_inputs_get+0x1a6>
 800b628:	4946      	ldr	r1, [pc, #280]	; (800b744 <ai_platform_inputs_get+0x2c8>)
 800b62a:	4b47      	ldr	r3, [pc, #284]	; (800b748 <ai_platform_inputs_get+0x2cc>)
 800b62c:	6011      	str	r1, [r2, #0]
 800b62e:	6812      	ldr	r2, [r2, #0]
 800b630:	429a      	cmp	r2, r3
 800b632:	d010      	beq.n	800b656 <ai_platform_inputs_get+0x1da>
 800b634:	e7fe      	b.n	800b634 <ai_platform_inputs_get+0x1b8>
 800b636:	4a45      	ldr	r2, [pc, #276]	; (800b74c <ai_platform_inputs_get+0x2d0>)
 800b638:	2301      	movs	r3, #1
 800b63a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b63e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1fb      	bne.n	800b63e <ai_platform_inputs_get+0x1c2>
 800b646:	493f      	ldr	r1, [pc, #252]	; (800b744 <ai_platform_inputs_get+0x2c8>)
 800b648:	4b3f      	ldr	r3, [pc, #252]	; (800b748 <ai_platform_inputs_get+0x2cc>)
 800b64a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b64e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b652:	429a      	cmp	r2, r3
 800b654:	d113      	bne.n	800b67e <ai_platform_inputs_get+0x202>
 800b656:	f7ff fd4d 	bl	800b0f4 <_ai_platform_release_crc>
 800b65a:	2000      	movs	r0, #0
 800b65c:	b005      	add	sp, #20
 800b65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b662:	4a37      	ldr	r2, [pc, #220]	; (800b740 <ai_platform_inputs_get+0x2c4>)
 800b664:	2301      	movs	r3, #1
 800b666:	6093      	str	r3, [r2, #8]
 800b668:	6893      	ldr	r3, [r2, #8]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1fc      	bne.n	800b668 <ai_platform_inputs_get+0x1ec>
 800b66e:	4b35      	ldr	r3, [pc, #212]	; (800b744 <ai_platform_inputs_get+0x2c8>)
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	4b35      	ldr	r3, [pc, #212]	; (800b748 <ai_platform_inputs_get+0x2cc>)
 800b674:	6812      	ldr	r2, [r2, #0]
 800b676:	429a      	cmp	r2, r3
 800b678:	f43f af3b 	beq.w	800b4f2 <ai_platform_inputs_get+0x76>
 800b67c:	e7fe      	b.n	800b67c <ai_platform_inputs_get+0x200>
 800b67e:	e7fe      	b.n	800b67e <ai_platform_inputs_get+0x202>
 800b680:	4a32      	ldr	r2, [pc, #200]	; (800b74c <ai_platform_inputs_get+0x2d0>)
 800b682:	2301      	movs	r3, #1
 800b684:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b688:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d1fb      	bne.n	800b688 <ai_platform_inputs_get+0x20c>
 800b690:	4b2c      	ldr	r3, [pc, #176]	; (800b744 <ai_platform_inputs_get+0x2c8>)
 800b692:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b696:	4b2c      	ldr	r3, [pc, #176]	; (800b748 <ai_platform_inputs_get+0x2cc>)
 800b698:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b69c:	429a      	cmp	r2, r3
 800b69e:	f43f af28 	beq.w	800b4f2 <ai_platform_inputs_get+0x76>
 800b6a2:	e7fe      	b.n	800b6a2 <ai_platform_inputs_get+0x226>
 800b6a4:	2400      	movs	r4, #0
 800b6a6:	2218      	movs	r2, #24
 800b6a8:	2111      	movs	r1, #17
 800b6aa:	f109 0010 	add.w	r0, r9, #16
 800b6ae:	f001 f97f 	bl	800c9b0 <core_set_error>
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	9b02      	ldr	r3, [sp, #8]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d0d0      	beq.n	800b65c <ai_platform_inputs_get+0x1e0>
 800b6ba:	801c      	strh	r4, [r3, #0]
 800b6bc:	b005      	add	sp, #20
 800b6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c2:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b6c6:	2c00      	cmp	r4, #0
 800b6c8:	d0ec      	beq.n	800b6a4 <ai_platform_inputs_get+0x228>
 800b6ca:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b6ce:	6858      	ldr	r0, [r3, #4]
 800b6d0:	e7f0      	b.n	800b6b4 <ai_platform_inputs_get+0x238>
 800b6d2:	4a1e      	ldr	r2, [pc, #120]	; (800b74c <ai_platform_inputs_get+0x2d0>)
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b6da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d1fb      	bne.n	800b6da <ai_platform_inputs_get+0x25e>
 800b6e2:	4918      	ldr	r1, [pc, #96]	; (800b744 <ai_platform_inputs_get+0x2c8>)
 800b6e4:	4b18      	ldr	r3, [pc, #96]	; (800b748 <ai_platform_inputs_get+0x2cc>)
 800b6e6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b6ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d0b1      	beq.n	800b656 <ai_platform_inputs_get+0x1da>
 800b6f2:	e7fe      	b.n	800b6f2 <ai_platform_inputs_get+0x276>
 800b6f4:	4a15      	ldr	r2, [pc, #84]	; (800b74c <ai_platform_inputs_get+0x2d0>)
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b6fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1fb      	bne.n	800b6fc <ai_platform_inputs_get+0x280>
 800b704:	4b0f      	ldr	r3, [pc, #60]	; (800b744 <ai_platform_inputs_get+0x2c8>)
 800b706:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b70a:	4b0f      	ldr	r3, [pc, #60]	; (800b748 <ai_platform_inputs_get+0x2cc>)
 800b70c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b710:	429a      	cmp	r2, r3
 800b712:	f43f aeee 	beq.w	800b4f2 <ai_platform_inputs_get+0x76>
 800b716:	e7fe      	b.n	800b716 <ai_platform_inputs_get+0x29a>
 800b718:	4a09      	ldr	r2, [pc, #36]	; (800b740 <ai_platform_inputs_get+0x2c4>)
 800b71a:	2301      	movs	r3, #1
 800b71c:	6093      	str	r3, [r2, #8]
 800b71e:	6893      	ldr	r3, [r2, #8]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1fc      	bne.n	800b71e <ai_platform_inputs_get+0x2a2>
 800b724:	4b07      	ldr	r3, [pc, #28]	; (800b744 <ai_platform_inputs_get+0x2c8>)
 800b726:	6013      	str	r3, [r2, #0]
 800b728:	4b07      	ldr	r3, [pc, #28]	; (800b748 <ai_platform_inputs_get+0x2cc>)
 800b72a:	6812      	ldr	r2, [r2, #0]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	f43f aee0 	beq.w	800b4f2 <ai_platform_inputs_get+0x76>
 800b732:	e7fe      	b.n	800b732 <ai_platform_inputs_get+0x2b6>
 800b734:	a1c00100 	.word	0xa1c00100
 800b738:	e0042000 	.word	0xe0042000
 800b73c:	5c001000 	.word	0x5c001000
 800b740:	40023000 	.word	0x40023000
 800b744:	f407a5c2 	.word	0xf407a5c2
 800b748:	b5e8b5cd 	.word	0xb5e8b5cd
 800b74c:	58024000 	.word	0x58024000
 800b750:	4a0d      	ldr	r2, [pc, #52]	; (800b788 <ai_platform_inputs_get+0x30c>)
 800b752:	2301      	movs	r3, #1
 800b754:	6093      	str	r3, [r2, #8]
 800b756:	6893      	ldr	r3, [r2, #8]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1fc      	bne.n	800b756 <ai_platform_inputs_get+0x2da>
 800b75c:	490b      	ldr	r1, [pc, #44]	; (800b78c <ai_platform_inputs_get+0x310>)
 800b75e:	4b0c      	ldr	r3, [pc, #48]	; (800b790 <ai_platform_inputs_get+0x314>)
 800b760:	6011      	str	r1, [r2, #0]
 800b762:	6812      	ldr	r2, [r2, #0]
 800b764:	429a      	cmp	r2, r3
 800b766:	f43f af76 	beq.w	800b656 <ai_platform_inputs_get+0x1da>
 800b76a:	e7fe      	b.n	800b76a <ai_platform_inputs_get+0x2ee>
 800b76c:	4a06      	ldr	r2, [pc, #24]	; (800b788 <ai_platform_inputs_get+0x30c>)
 800b76e:	2301      	movs	r3, #1
 800b770:	6093      	str	r3, [r2, #8]
 800b772:	6893      	ldr	r3, [r2, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1fc      	bne.n	800b772 <ai_platform_inputs_get+0x2f6>
 800b778:	4b04      	ldr	r3, [pc, #16]	; (800b78c <ai_platform_inputs_get+0x310>)
 800b77a:	6013      	str	r3, [r2, #0]
 800b77c:	4b04      	ldr	r3, [pc, #16]	; (800b790 <ai_platform_inputs_get+0x314>)
 800b77e:	6812      	ldr	r2, [r2, #0]
 800b780:	429a      	cmp	r2, r3
 800b782:	f43f aeb6 	beq.w	800b4f2 <ai_platform_inputs_get+0x76>
 800b786:	e7fe      	b.n	800b786 <ai_platform_inputs_get+0x30a>
 800b788:	40023000 	.word	0x40023000
 800b78c:	f407a5c2 	.word	0xf407a5c2
 800b790:	b5e8b5cd 	.word	0xb5e8b5cd

0800b794 <ai_platform_outputs_get>:
 800b794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b798:	b085      	sub	sp, #20
 800b79a:	9102      	str	r1, [sp, #8]
 800b79c:	2800      	cmp	r0, #0
 800b79e:	f000 808f 	beq.w	800b8c0 <ai_platform_outputs_get+0x12c>
 800b7a2:	4ba8      	ldr	r3, [pc, #672]	; (800ba44 <ai_platform_outputs_get+0x2b0>)
 800b7a4:	4681      	mov	r9, r0
 800b7a6:	6802      	ldr	r2, [r0, #0]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	f040 8089 	bne.w	800b8c0 <ai_platform_outputs_get+0x12c>
 800b7ae:	f7ff fc9f 	bl	800b0f0 <_ai_platform_acquire_crc>
 800b7b2:	4ba5      	ldr	r3, [pc, #660]	; (800ba48 <ai_platform_outputs_get+0x2b4>)
 800b7b4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7be:	189a      	adds	r2, r3, r2
 800b7c0:	2a01      	cmp	r2, #1
 800b7c2:	f240 80d6 	bls.w	800b972 <ai_platform_outputs_get+0x1de>
 800b7c6:	f240 4249 	movw	r2, #1097	; 0x449
 800b7ca:	4293      	cmp	r3, r2
 800b7cc:	f000 80d1 	beq.w	800b972 <ai_platform_outputs_get+0x1de>
 800b7d0:	4a9e      	ldr	r2, [pc, #632]	; (800ba4c <ai_platform_outputs_get+0x2b8>)
 800b7d2:	6813      	ldr	r3, [r2, #0]
 800b7d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7d8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b7dc:	f000 80d8 	beq.w	800b990 <ai_platform_outputs_get+0x1fc>
 800b7e0:	6813      	ldr	r3, [r2, #0]
 800b7e2:	f240 4183 	movw	r1, #1155	; 0x483
 800b7e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7ea:	428b      	cmp	r3, r1
 800b7ec:	f000 8109 	beq.w	800ba02 <ai_platform_outputs_get+0x26e>
 800b7f0:	6813      	ldr	r3, [r2, #0]
 800b7f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7f6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b7fa:	f000 813f 	beq.w	800ba7c <ai_platform_outputs_get+0x2e8>
 800b7fe:	6813      	ldr	r3, [r2, #0]
 800b800:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 810e 	beq.w	800ba26 <ai_platform_outputs_get+0x292>
 800b80a:	f7ff fc73 	bl	800b0f4 <_ai_platform_release_crc>
 800b80e:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800b812:	2b01      	cmp	r3, #1
 800b814:	f240 80db 	bls.w	800b9ce <ai_platform_outputs_get+0x23a>
 800b818:	2100      	movs	r1, #0
 800b81a:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800b81e:	f8cd 900c 	str.w	r9, [sp, #12]
 800b822:	460d      	mov	r5, r1
 800b824:	4689      	mov	r9, r1
 800b826:	e016      	b.n	800b856 <ai_platform_outputs_get+0xc2>
 800b828:	9a01      	ldr	r2, [sp, #4]
 800b82a:	2301      	movs	r3, #1
 800b82c:	f848 3002 	str.w	r3, [r8, r2]
 800b830:	69b2      	ldr	r2, [r6, #24]
 800b832:	f04f 0301 	mov.w	r3, #1
 800b836:	6856      	ldr	r6, [r2, #4]
 800b838:	3501      	adds	r5, #1
 800b83a:	f109 091c 	add.w	r9, r9, #28
 800b83e:	7523      	strb	r3, [r4, #20]
 800b840:	2300      	movs	r3, #0
 800b842:	6962      	ldr	r2, [r4, #20]
 800b844:	60a7      	str	r7, [r4, #8]
 800b846:	f36b 221f 	bfi	r2, fp, #8, #24
 800b84a:	6126      	str	r6, [r4, #16]
 800b84c:	61a1      	str	r1, [r4, #24]
 800b84e:	60e3      	str	r3, [r4, #12]
 800b850:	6162      	str	r2, [r4, #20]
 800b852:	e9c4 0c00 	strd	r0, ip, [r4]
 800b856:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800b85a:	b2ac      	uxth	r4, r5
 800b85c:	42ab      	cmp	r3, r5
 800b85e:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800b862:	9301      	str	r3, [sp, #4]
 800b864:	f240 80a6 	bls.w	800b9b4 <ai_platform_outputs_get+0x220>
 800b868:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	f000 80a1 	beq.w	800b9b4 <ai_platform_outputs_get+0x220>
 800b872:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b876:	2e00      	cmp	r6, #0
 800b878:	f000 809c 	beq.w	800b9b4 <ai_platform_outputs_get+0x220>
 800b87c:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b880:	69b2      	ldr	r2, [r6, #24]
 800b882:	68f1      	ldr	r1, [r6, #12]
 800b884:	6810      	ldr	r0, [r2, #0]
 800b886:	9100      	str	r1, [sp, #0]
 800b888:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800b88c:	68b3      	ldr	r3, [r6, #8]
 800b88e:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800b892:	444c      	add	r4, r9
 800b894:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800b898:	f003 f8d6 	bl	800ea48 <ai_array_to_buffer_fmt>
 800b89c:	69b2      	ldr	r2, [r6, #24]
 800b89e:	9900      	ldr	r1, [sp, #0]
 800b8a0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b8a4:	2f00      	cmp	r7, #0
 800b8a6:	d0c4      	beq.n	800b832 <ai_platform_outputs_get+0x9e>
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800b8ae:	6832      	ldr	r2, [r6, #0]
 800b8b0:	607a      	str	r2, [r7, #4]
 800b8b2:	b112      	cbz	r2, 800b8ba <ai_platform_outputs_get+0x126>
 800b8b4:	8852      	ldrh	r2, [r2, #2]
 800b8b6:	2a00      	cmp	r2, #0
 800b8b8:	d1b6      	bne.n	800b828 <ai_platform_outputs_get+0x94>
 800b8ba:	69b2      	ldr	r2, [r6, #24]
 800b8bc:	2700      	movs	r7, #0
 800b8be:	e7b8      	b.n	800b832 <ai_platform_outputs_get+0x9e>
 800b8c0:	f7ff fc16 	bl	800b0f0 <_ai_platform_acquire_crc>
 800b8c4:	4b60      	ldr	r3, [pc, #384]	; (800ba48 <ai_platform_outputs_get+0x2b4>)
 800b8c6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8d0:	185a      	adds	r2, r3, r1
 800b8d2:	2a01      	cmp	r2, #1
 800b8d4:	d92a      	bls.n	800b92c <ai_platform_outputs_get+0x198>
 800b8d6:	f240 4249 	movw	r2, #1097	; 0x449
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d026      	beq.n	800b92c <ai_platform_outputs_get+0x198>
 800b8de:	4a5b      	ldr	r2, [pc, #364]	; (800ba4c <ai_platform_outputs_get+0x2b8>)
 800b8e0:	6813      	ldr	r3, [r2, #0]
 800b8e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8e6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b8ea:	d02c      	beq.n	800b946 <ai_platform_outputs_get+0x1b2>
 800b8ec:	6813      	ldr	r3, [r2, #0]
 800b8ee:	f240 4183 	movw	r1, #1155	; 0x483
 800b8f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8f6:	428b      	cmp	r3, r1
 800b8f8:	d072      	beq.n	800b9e0 <ai_platform_outputs_get+0x24c>
 800b8fa:	6813      	ldr	r3, [r2, #0]
 800b8fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b900:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b904:	f000 80ac 	beq.w	800ba60 <ai_platform_outputs_get+0x2cc>
 800b908:	6813      	ldr	r3, [r2, #0]
 800b90a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d129      	bne.n	800b966 <ai_platform_outputs_get+0x1d2>
 800b912:	4a4f      	ldr	r2, [pc, #316]	; (800ba50 <ai_platform_outputs_get+0x2bc>)
 800b914:	2301      	movs	r3, #1
 800b916:	6093      	str	r3, [r2, #8]
 800b918:	6893      	ldr	r3, [r2, #8]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1fc      	bne.n	800b918 <ai_platform_outputs_get+0x184>
 800b91e:	494d      	ldr	r1, [pc, #308]	; (800ba54 <ai_platform_outputs_get+0x2c0>)
 800b920:	4b4d      	ldr	r3, [pc, #308]	; (800ba58 <ai_platform_outputs_get+0x2c4>)
 800b922:	6011      	str	r1, [r2, #0]
 800b924:	6812      	ldr	r2, [r2, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d01d      	beq.n	800b966 <ai_platform_outputs_get+0x1d2>
 800b92a:	e7fe      	b.n	800b92a <ai_platform_outputs_get+0x196>
 800b92c:	4a48      	ldr	r2, [pc, #288]	; (800ba50 <ai_platform_outputs_get+0x2bc>)
 800b92e:	2301      	movs	r3, #1
 800b930:	6093      	str	r3, [r2, #8]
 800b932:	6893      	ldr	r3, [r2, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d1fc      	bne.n	800b932 <ai_platform_outputs_get+0x19e>
 800b938:	4946      	ldr	r1, [pc, #280]	; (800ba54 <ai_platform_outputs_get+0x2c0>)
 800b93a:	4b47      	ldr	r3, [pc, #284]	; (800ba58 <ai_platform_outputs_get+0x2c4>)
 800b93c:	6011      	str	r1, [r2, #0]
 800b93e:	6812      	ldr	r2, [r2, #0]
 800b940:	429a      	cmp	r2, r3
 800b942:	d010      	beq.n	800b966 <ai_platform_outputs_get+0x1d2>
 800b944:	e7fe      	b.n	800b944 <ai_platform_outputs_get+0x1b0>
 800b946:	4a45      	ldr	r2, [pc, #276]	; (800ba5c <ai_platform_outputs_get+0x2c8>)
 800b948:	2301      	movs	r3, #1
 800b94a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b94e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1fb      	bne.n	800b94e <ai_platform_outputs_get+0x1ba>
 800b956:	493f      	ldr	r1, [pc, #252]	; (800ba54 <ai_platform_outputs_get+0x2c0>)
 800b958:	4b3f      	ldr	r3, [pc, #252]	; (800ba58 <ai_platform_outputs_get+0x2c4>)
 800b95a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b95e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b962:	429a      	cmp	r2, r3
 800b964:	d113      	bne.n	800b98e <ai_platform_outputs_get+0x1fa>
 800b966:	f7ff fbc5 	bl	800b0f4 <_ai_platform_release_crc>
 800b96a:	2000      	movs	r0, #0
 800b96c:	b005      	add	sp, #20
 800b96e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b972:	4a37      	ldr	r2, [pc, #220]	; (800ba50 <ai_platform_outputs_get+0x2bc>)
 800b974:	2301      	movs	r3, #1
 800b976:	6093      	str	r3, [r2, #8]
 800b978:	6893      	ldr	r3, [r2, #8]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d1fc      	bne.n	800b978 <ai_platform_outputs_get+0x1e4>
 800b97e:	4b35      	ldr	r3, [pc, #212]	; (800ba54 <ai_platform_outputs_get+0x2c0>)
 800b980:	6013      	str	r3, [r2, #0]
 800b982:	4b35      	ldr	r3, [pc, #212]	; (800ba58 <ai_platform_outputs_get+0x2c4>)
 800b984:	6812      	ldr	r2, [r2, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	f43f af3f 	beq.w	800b80a <ai_platform_outputs_get+0x76>
 800b98c:	e7fe      	b.n	800b98c <ai_platform_outputs_get+0x1f8>
 800b98e:	e7fe      	b.n	800b98e <ai_platform_outputs_get+0x1fa>
 800b990:	4a32      	ldr	r2, [pc, #200]	; (800ba5c <ai_platform_outputs_get+0x2c8>)
 800b992:	2301      	movs	r3, #1
 800b994:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b998:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1fb      	bne.n	800b998 <ai_platform_outputs_get+0x204>
 800b9a0:	4b2c      	ldr	r3, [pc, #176]	; (800ba54 <ai_platform_outputs_get+0x2c0>)
 800b9a2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b9a6:	4b2c      	ldr	r3, [pc, #176]	; (800ba58 <ai_platform_outputs_get+0x2c4>)
 800b9a8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b9ac:	429a      	cmp	r2, r3
 800b9ae:	f43f af2c 	beq.w	800b80a <ai_platform_outputs_get+0x76>
 800b9b2:	e7fe      	b.n	800b9b2 <ai_platform_outputs_get+0x21e>
 800b9b4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b9b8:	b14c      	cbz	r4, 800b9ce <ai_platform_outputs_get+0x23a>
 800b9ba:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b9be:	6858      	ldr	r0, [r3, #4]
 800b9c0:	9b02      	ldr	r3, [sp, #8]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0d2      	beq.n	800b96c <ai_platform_outputs_get+0x1d8>
 800b9c6:	801c      	strh	r4, [r3, #0]
 800b9c8:	b005      	add	sp, #20
 800b9ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ce:	2400      	movs	r4, #0
 800b9d0:	2218      	movs	r2, #24
 800b9d2:	2111      	movs	r1, #17
 800b9d4:	f109 0010 	add.w	r0, r9, #16
 800b9d8:	f000 ffea 	bl	800c9b0 <core_set_error>
 800b9dc:	4620      	mov	r0, r4
 800b9de:	e7ef      	b.n	800b9c0 <ai_platform_outputs_get+0x22c>
 800b9e0:	4a1e      	ldr	r2, [pc, #120]	; (800ba5c <ai_platform_outputs_get+0x2c8>)
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b9e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1fb      	bne.n	800b9e8 <ai_platform_outputs_get+0x254>
 800b9f0:	4918      	ldr	r1, [pc, #96]	; (800ba54 <ai_platform_outputs_get+0x2c0>)
 800b9f2:	4b19      	ldr	r3, [pc, #100]	; (800ba58 <ai_platform_outputs_get+0x2c4>)
 800b9f4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b9f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d0b2      	beq.n	800b966 <ai_platform_outputs_get+0x1d2>
 800ba00:	e7fe      	b.n	800ba00 <ai_platform_outputs_get+0x26c>
 800ba02:	4a16      	ldr	r2, [pc, #88]	; (800ba5c <ai_platform_outputs_get+0x2c8>)
 800ba04:	2301      	movs	r3, #1
 800ba06:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ba0a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d1fb      	bne.n	800ba0a <ai_platform_outputs_get+0x276>
 800ba12:	4b10      	ldr	r3, [pc, #64]	; (800ba54 <ai_platform_outputs_get+0x2c0>)
 800ba14:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ba18:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <ai_platform_outputs_get+0x2c4>)
 800ba1a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	f43f aef3 	beq.w	800b80a <ai_platform_outputs_get+0x76>
 800ba24:	e7fe      	b.n	800ba24 <ai_platform_outputs_get+0x290>
 800ba26:	4a0a      	ldr	r2, [pc, #40]	; (800ba50 <ai_platform_outputs_get+0x2bc>)
 800ba28:	2301      	movs	r3, #1
 800ba2a:	6093      	str	r3, [r2, #8]
 800ba2c:	6893      	ldr	r3, [r2, #8]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1fc      	bne.n	800ba2c <ai_platform_outputs_get+0x298>
 800ba32:	4b08      	ldr	r3, [pc, #32]	; (800ba54 <ai_platform_outputs_get+0x2c0>)
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	4b08      	ldr	r3, [pc, #32]	; (800ba58 <ai_platform_outputs_get+0x2c4>)
 800ba38:	6812      	ldr	r2, [r2, #0]
 800ba3a:	429a      	cmp	r2, r3
 800ba3c:	f43f aee5 	beq.w	800b80a <ai_platform_outputs_get+0x76>
 800ba40:	e7fe      	b.n	800ba40 <ai_platform_outputs_get+0x2ac>
 800ba42:	bf00      	nop
 800ba44:	a1c00100 	.word	0xa1c00100
 800ba48:	e0042000 	.word	0xe0042000
 800ba4c:	5c001000 	.word	0x5c001000
 800ba50:	40023000 	.word	0x40023000
 800ba54:	f407a5c2 	.word	0xf407a5c2
 800ba58:	b5e8b5cd 	.word	0xb5e8b5cd
 800ba5c:	58024000 	.word	0x58024000
 800ba60:	4a0d      	ldr	r2, [pc, #52]	; (800ba98 <ai_platform_outputs_get+0x304>)
 800ba62:	2301      	movs	r3, #1
 800ba64:	6093      	str	r3, [r2, #8]
 800ba66:	6893      	ldr	r3, [r2, #8]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d1fc      	bne.n	800ba66 <ai_platform_outputs_get+0x2d2>
 800ba6c:	490b      	ldr	r1, [pc, #44]	; (800ba9c <ai_platform_outputs_get+0x308>)
 800ba6e:	4b0c      	ldr	r3, [pc, #48]	; (800baa0 <ai_platform_outputs_get+0x30c>)
 800ba70:	6011      	str	r1, [r2, #0]
 800ba72:	6812      	ldr	r2, [r2, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	f43f af76 	beq.w	800b966 <ai_platform_outputs_get+0x1d2>
 800ba7a:	e7fe      	b.n	800ba7a <ai_platform_outputs_get+0x2e6>
 800ba7c:	4a06      	ldr	r2, [pc, #24]	; (800ba98 <ai_platform_outputs_get+0x304>)
 800ba7e:	2301      	movs	r3, #1
 800ba80:	6093      	str	r3, [r2, #8]
 800ba82:	6893      	ldr	r3, [r2, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1fc      	bne.n	800ba82 <ai_platform_outputs_get+0x2ee>
 800ba88:	4b04      	ldr	r3, [pc, #16]	; (800ba9c <ai_platform_outputs_get+0x308>)
 800ba8a:	6013      	str	r3, [r2, #0]
 800ba8c:	4b04      	ldr	r3, [pc, #16]	; (800baa0 <ai_platform_outputs_get+0x30c>)
 800ba8e:	6812      	ldr	r2, [r2, #0]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	f43f aeba 	beq.w	800b80a <ai_platform_outputs_get+0x76>
 800ba96:	e7fe      	b.n	800ba96 <ai_platform_outputs_get+0x302>
 800ba98:	40023000 	.word	0x40023000
 800ba9c:	f407a5c2 	.word	0xf407a5c2
 800baa0:	b5e8b5cd 	.word	0xb5e8b5cd

0800baa4 <ai_platform_network_create>:
 800baa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800baa8:	b083      	sub	sp, #12
 800baaa:	4604      	mov	r4, r0
 800baac:	4615      	mov	r5, r2
 800baae:	461e      	mov	r6, r3
 800bab0:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800bab4:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800bab8:	f7ff fb1a 	bl	800b0f0 <_ai_platform_acquire_crc>
 800babc:	2800      	cmp	r0, #0
 800babe:	f000 80bd 	beq.w	800bc3c <ai_platform_network_create+0x198>
 800bac2:	4ba5      	ldr	r3, [pc, #660]	; (800bd58 <ai_platform_network_create+0x2b4>)
 800bac4:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800bac8:	4601      	mov	r1, r0
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bad0:	eb03 020c 	add.w	r2, r3, ip
 800bad4:	2a01      	cmp	r2, #1
 800bad6:	f240 80a8 	bls.w	800bc2a <ai_platform_network_create+0x186>
 800bada:	f240 4249 	movw	r2, #1097	; 0x449
 800bade:	4293      	cmp	r3, r2
 800bae0:	f000 80a3 	beq.w	800bc2a <ai_platform_network_create+0x186>
 800bae4:	4a9d      	ldr	r2, [pc, #628]	; (800bd5c <ai_platform_network_create+0x2b8>)
 800bae6:	6813      	ldr	r3, [r2, #0]
 800bae8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800baec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800baf0:	f000 80b9 	beq.w	800bc66 <ai_platform_network_create+0x1c2>
 800baf4:	6813      	ldr	r3, [r2, #0]
 800baf6:	f240 4c83 	movw	ip, #1155	; 0x483
 800bafa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bafe:	4563      	cmp	r3, ip
 800bb00:	f000 80a1 	beq.w	800bc46 <ai_platform_network_create+0x1a2>
 800bb04:	6813      	ldr	r3, [r2, #0]
 800bb06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb0a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bb0e:	f000 8153 	beq.w	800bdb8 <ai_platform_network_create+0x314>
 800bb12:	6813      	ldr	r3, [r2, #0]
 800bb14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	f040 808d 	bne.w	800bc38 <ai_platform_network_create+0x194>
 800bb1e:	4a90      	ldr	r2, [pc, #576]	; (800bd60 <ai_platform_network_create+0x2bc>)
 800bb20:	2318      	movs	r3, #24
 800bb22:	6093      	str	r3, [r2, #8]
 800bb24:	6893      	ldr	r3, [r2, #8]
 800bb26:	2b18      	cmp	r3, #24
 800bb28:	f040 8086 	bne.w	800bc38 <ai_platform_network_create+0x194>
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	6093      	str	r3, [r2, #8]
 800bb30:	6893      	ldr	r3, [r2, #8]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1fc      	bne.n	800bb30 <ai_platform_network_create+0x8c>
 800bb36:	4608      	mov	r0, r1
 800bb38:	f7ff fadc 	bl	800b0f4 <_ai_platform_release_crc>
 800bb3c:	f7ff fad8 	bl	800b0f0 <_ai_platform_acquire_crc>
 800bb40:	4b85      	ldr	r3, [pc, #532]	; (800bd58 <ai_platform_network_create+0x2b4>)
 800bb42:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb4c:	189a      	adds	r2, r3, r2
 800bb4e:	2a01      	cmp	r2, #1
 800bb50:	f240 809f 	bls.w	800bc92 <ai_platform_network_create+0x1ee>
 800bb54:	f240 4249 	movw	r2, #1097	; 0x449
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	f000 809a 	beq.w	800bc92 <ai_platform_network_create+0x1ee>
 800bb5e:	4a7f      	ldr	r2, [pc, #508]	; (800bd5c <ai_platform_network_create+0x2b8>)
 800bb60:	6813      	ldr	r3, [r2, #0]
 800bb62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb66:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bb6a:	f000 80a0 	beq.w	800bcae <ai_platform_network_create+0x20a>
 800bb6e:	6813      	ldr	r3, [r2, #0]
 800bb70:	f240 4183 	movw	r1, #1155	; 0x483
 800bb74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb78:	428b      	cmp	r3, r1
 800bb7a:	f000 80bf 	beq.w	800bcfc <ai_platform_network_create+0x258>
 800bb7e:	6813      	ldr	r3, [r2, #0]
 800bb80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb84:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bb88:	f000 8123 	beq.w	800bdd2 <ai_platform_network_create+0x32e>
 800bb8c:	6813      	ldr	r3, [r2, #0]
 800bb8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	f000 80c4 	beq.w	800bd20 <ai_platform_network_create+0x27c>
 800bb98:	f7ff faac 	bl	800b0f4 <_ai_platform_release_crc>
 800bb9c:	2c00      	cmp	r4, #0
 800bb9e:	f000 80aa 	beq.w	800bcf6 <ai_platform_network_create+0x252>
 800bba2:	4b70      	ldr	r3, [pc, #448]	; (800bd64 <ai_platform_network_create+0x2c0>)
 800bba4:	602b      	str	r3, [r5, #0]
 800bba6:	6025      	str	r5, [r4, #0]
 800bba8:	f000 fefa 	bl	800c9a0 <core_init>
 800bbac:	2800      	cmp	r0, #0
 800bbae:	f000 8090 	beq.w	800bcd2 <ai_platform_network_create+0x22e>
 800bbb2:	f7ff fa9d 	bl	800b0f0 <_ai_platform_acquire_crc>
 800bbb6:	4b68      	ldr	r3, [pc, #416]	; (800bd58 <ai_platform_network_create+0x2b4>)
 800bbb8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbc2:	185a      	adds	r2, r3, r1
 800bbc4:	2a01      	cmp	r2, #1
 800bbc6:	f240 80b9 	bls.w	800bd3c <ai_platform_network_create+0x298>
 800bbca:	f240 4249 	movw	r2, #1097	; 0x449
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	f000 80b4 	beq.w	800bd3c <ai_platform_network_create+0x298>
 800bbd4:	4a61      	ldr	r2, [pc, #388]	; (800bd5c <ai_platform_network_create+0x2b8>)
 800bbd6:	6813      	ldr	r3, [r2, #0]
 800bbd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbdc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bbe0:	f000 80c8 	beq.w	800bd74 <ai_platform_network_create+0x2d0>
 800bbe4:	6813      	ldr	r3, [r2, #0]
 800bbe6:	f240 4183 	movw	r1, #1155	; 0x483
 800bbea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbee:	428b      	cmp	r3, r1
 800bbf0:	f000 8107 	beq.w	800be02 <ai_platform_network_create+0x35e>
 800bbf4:	6813      	ldr	r3, [r2, #0]
 800bbf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbfa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bbfe:	f000 8111 	beq.w	800be24 <ai_platform_network_create+0x380>
 800bc02:	6813      	ldr	r3, [r2, #0]
 800bc04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f040 80c3 	bne.w	800bd94 <ai_platform_network_create+0x2f0>
 800bc0e:	4b54      	ldr	r3, [pc, #336]	; (800bd60 <ai_platform_network_create+0x2bc>)
 800bc10:	2201      	movs	r2, #1
 800bc12:	609a      	str	r2, [r3, #8]
 800bc14:	689a      	ldr	r2, [r3, #8]
 800bc16:	2a00      	cmp	r2, #0
 800bc18:	d1fc      	bne.n	800bc14 <ai_platform_network_create+0x170>
 800bc1a:	4a53      	ldr	r2, [pc, #332]	; (800bd68 <ai_platform_network_create+0x2c4>)
 800bc1c:	601a      	str	r2, [r3, #0]
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	4b52      	ldr	r3, [pc, #328]	; (800bd6c <ai_platform_network_create+0x2c8>)
 800bc22:	429a      	cmp	r2, r3
 800bc24:	f000 80b6 	beq.w	800bd94 <ai_platform_network_create+0x2f0>
 800bc28:	e7fe      	b.n	800bc28 <ai_platform_network_create+0x184>
 800bc2a:	4b4d      	ldr	r3, [pc, #308]	; (800bd60 <ai_platform_network_create+0x2bc>)
 800bc2c:	2218      	movs	r2, #24
 800bc2e:	609a      	str	r2, [r3, #8]
 800bc30:	689a      	ldr	r2, [r3, #8]
 800bc32:	2a18      	cmp	r2, #24
 800bc34:	d027      	beq.n	800bc86 <ai_platform_network_create+0x1e2>
 800bc36:	4608      	mov	r0, r1
 800bc38:	f7ff fa5c 	bl	800b0f4 <_ai_platform_release_crc>
 800bc3c:	f244 1033 	movw	r0, #16691	; 0x4133
 800bc40:	b003      	add	sp, #12
 800bc42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc46:	4a4a      	ldr	r2, [pc, #296]	; (800bd70 <ai_platform_network_create+0x2cc>)
 800bc48:	2318      	movs	r3, #24
 800bc4a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bc4e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bc52:	2b18      	cmp	r3, #24
 800bc54:	d1f0      	bne.n	800bc38 <ai_platform_network_create+0x194>
 800bc56:	2301      	movs	r3, #1
 800bc58:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bc5c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1fb      	bne.n	800bc5c <ai_platform_network_create+0x1b8>
 800bc64:	e767      	b.n	800bb36 <ai_platform_network_create+0x92>
 800bc66:	4a42      	ldr	r2, [pc, #264]	; (800bd70 <ai_platform_network_create+0x2cc>)
 800bc68:	2318      	movs	r3, #24
 800bc6a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bc6e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bc72:	2b18      	cmp	r3, #24
 800bc74:	d1e0      	bne.n	800bc38 <ai_platform_network_create+0x194>
 800bc76:	2301      	movs	r3, #1
 800bc78:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bc7c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1fb      	bne.n	800bc7c <ai_platform_network_create+0x1d8>
 800bc84:	e757      	b.n	800bb36 <ai_platform_network_create+0x92>
 800bc86:	2201      	movs	r2, #1
 800bc88:	609a      	str	r2, [r3, #8]
 800bc8a:	689a      	ldr	r2, [r3, #8]
 800bc8c:	2a00      	cmp	r2, #0
 800bc8e:	d1fc      	bne.n	800bc8a <ai_platform_network_create+0x1e6>
 800bc90:	e751      	b.n	800bb36 <ai_platform_network_create+0x92>
 800bc92:	4a33      	ldr	r2, [pc, #204]	; (800bd60 <ai_platform_network_create+0x2bc>)
 800bc94:	2301      	movs	r3, #1
 800bc96:	6093      	str	r3, [r2, #8]
 800bc98:	6891      	ldr	r1, [r2, #8]
 800bc9a:	2900      	cmp	r1, #0
 800bc9c:	d1fc      	bne.n	800bc98 <ai_platform_network_create+0x1f4>
 800bc9e:	4b32      	ldr	r3, [pc, #200]	; (800bd68 <ai_platform_network_create+0x2c4>)
 800bca0:	6013      	str	r3, [r2, #0]
 800bca2:	4b32      	ldr	r3, [pc, #200]	; (800bd6c <ai_platform_network_create+0x2c8>)
 800bca4:	6812      	ldr	r2, [r2, #0]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	f43f af76 	beq.w	800bb98 <ai_platform_network_create+0xf4>
 800bcac:	e7fe      	b.n	800bcac <ai_platform_network_create+0x208>
 800bcae:	4a30      	ldr	r2, [pc, #192]	; (800bd70 <ai_platform_network_create+0x2cc>)
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bcb6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d1fb      	bne.n	800bcb6 <ai_platform_network_create+0x212>
 800bcbe:	4b2a      	ldr	r3, [pc, #168]	; (800bd68 <ai_platform_network_create+0x2c4>)
 800bcc0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bcc4:	4b29      	ldr	r3, [pc, #164]	; (800bd6c <ai_platform_network_create+0x2c8>)
 800bcc6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bcca:	429a      	cmp	r2, r3
 800bccc:	f43f af64 	beq.w	800bb98 <ai_platform_network_create+0xf4>
 800bcd0:	e7fe      	b.n	800bcd0 <ai_platform_network_create+0x22c>
 800bcd2:	f04f 0930 	mov.w	r9, #48	; 0x30
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	2410      	movs	r4, #16
 800bcdc:	4642      	mov	r2, r8
 800bcde:	4639      	mov	r1, r7
 800bce0:	4630      	mov	r0, r6
 800bce2:	f002 fe95 	bl	800ea10 <ai_version_get>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2000      	movs	r0, #0
 800bcea:	64ab      	str	r3, [r5, #72]	; 0x48
 800bcec:	f369 0007 	bfi	r0, r9, #0, #8
 800bcf0:	f364 201f 	bfi	r0, r4, #8, #24
 800bcf4:	e7a4      	b.n	800bc40 <ai_platform_network_create+0x19c>
 800bcf6:	f241 0010 	movw	r0, #4112	; 0x1010
 800bcfa:	e7a1      	b.n	800bc40 <ai_platform_network_create+0x19c>
 800bcfc:	4a1c      	ldr	r2, [pc, #112]	; (800bd70 <ai_platform_network_create+0x2cc>)
 800bcfe:	2301      	movs	r3, #1
 800bd00:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bd04:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d1fb      	bne.n	800bd04 <ai_platform_network_create+0x260>
 800bd0c:	4b16      	ldr	r3, [pc, #88]	; (800bd68 <ai_platform_network_create+0x2c4>)
 800bd0e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bd12:	4b16      	ldr	r3, [pc, #88]	; (800bd6c <ai_platform_network_create+0x2c8>)
 800bd14:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bd18:	429a      	cmp	r2, r3
 800bd1a:	f43f af3d 	beq.w	800bb98 <ai_platform_network_create+0xf4>
 800bd1e:	e7fe      	b.n	800bd1e <ai_platform_network_create+0x27a>
 800bd20:	4a0f      	ldr	r2, [pc, #60]	; (800bd60 <ai_platform_network_create+0x2bc>)
 800bd22:	2301      	movs	r3, #1
 800bd24:	6093      	str	r3, [r2, #8]
 800bd26:	6893      	ldr	r3, [r2, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1fc      	bne.n	800bd26 <ai_platform_network_create+0x282>
 800bd2c:	4b0e      	ldr	r3, [pc, #56]	; (800bd68 <ai_platform_network_create+0x2c4>)
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	4b0e      	ldr	r3, [pc, #56]	; (800bd6c <ai_platform_network_create+0x2c8>)
 800bd32:	6812      	ldr	r2, [r2, #0]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	f43f af2f 	beq.w	800bb98 <ai_platform_network_create+0xf4>
 800bd3a:	e7fe      	b.n	800bd3a <ai_platform_network_create+0x296>
 800bd3c:	4a08      	ldr	r2, [pc, #32]	; (800bd60 <ai_platform_network_create+0x2bc>)
 800bd3e:	2301      	movs	r3, #1
 800bd40:	6093      	str	r3, [r2, #8]
 800bd42:	6893      	ldr	r3, [r2, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1fc      	bne.n	800bd42 <ai_platform_network_create+0x29e>
 800bd48:	4b07      	ldr	r3, [pc, #28]	; (800bd68 <ai_platform_network_create+0x2c4>)
 800bd4a:	6013      	str	r3, [r2, #0]
 800bd4c:	4b07      	ldr	r3, [pc, #28]	; (800bd6c <ai_platform_network_create+0x2c8>)
 800bd4e:	6812      	ldr	r2, [r2, #0]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d01f      	beq.n	800bd94 <ai_platform_network_create+0x2f0>
 800bd54:	e7fe      	b.n	800bd54 <ai_platform_network_create+0x2b0>
 800bd56:	bf00      	nop
 800bd58:	e0042000 	.word	0xe0042000
 800bd5c:	5c001000 	.word	0x5c001000
 800bd60:	40023000 	.word	0x40023000
 800bd64:	a1c00100 	.word	0xa1c00100
 800bd68:	f407a5c2 	.word	0xf407a5c2
 800bd6c:	b5e8b5cd 	.word	0xb5e8b5cd
 800bd70:	58024000 	.word	0x58024000
 800bd74:	4a33      	ldr	r2, [pc, #204]	; (800be44 <ai_platform_network_create+0x3a0>)
 800bd76:	2301      	movs	r3, #1
 800bd78:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bd7c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1fb      	bne.n	800bd7c <ai_platform_network_create+0x2d8>
 800bd84:	4b30      	ldr	r3, [pc, #192]	; (800be48 <ai_platform_network_create+0x3a4>)
 800bd86:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bd8a:	4b30      	ldr	r3, [pc, #192]	; (800be4c <ai_platform_network_create+0x3a8>)
 800bd8c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d12c      	bne.n	800bdee <ai_platform_network_create+0x34a>
 800bd94:	f7ff f9ae 	bl	800b0f4 <_ai_platform_release_crc>
 800bd98:	2200      	movs	r2, #0
 800bd9a:	4639      	mov	r1, r7
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	f002 fe37 	bl	800ea10 <ai_version_get>
 800bda2:	4681      	mov	r9, r0
 800bda4:	2200      	movs	r2, #0
 800bda6:	2105      	movs	r1, #5
 800bda8:	2001      	movs	r0, #1
 800bdaa:	f002 fe31 	bl	800ea10 <ai_version_get>
 800bdae:	4581      	cmp	r9, r0
 800bdb0:	d01e      	beq.n	800bdf0 <ai_platform_network_create+0x34c>
 800bdb2:	f04f 0901 	mov.w	r9, #1
 800bdb6:	e78e      	b.n	800bcd6 <ai_platform_network_create+0x232>
 800bdb8:	4b25      	ldr	r3, [pc, #148]	; (800be50 <ai_platform_network_create+0x3ac>)
 800bdba:	2218      	movs	r2, #24
 800bdbc:	609a      	str	r2, [r3, #8]
 800bdbe:	689a      	ldr	r2, [r3, #8]
 800bdc0:	2a18      	cmp	r2, #24
 800bdc2:	f47f af39 	bne.w	800bc38 <ai_platform_network_create+0x194>
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	609a      	str	r2, [r3, #8]
 800bdca:	689a      	ldr	r2, [r3, #8]
 800bdcc:	2a00      	cmp	r2, #0
 800bdce:	d1fc      	bne.n	800bdca <ai_platform_network_create+0x326>
 800bdd0:	e6b1      	b.n	800bb36 <ai_platform_network_create+0x92>
 800bdd2:	4a1f      	ldr	r2, [pc, #124]	; (800be50 <ai_platform_network_create+0x3ac>)
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	6093      	str	r3, [r2, #8]
 800bdd8:	6893      	ldr	r3, [r2, #8]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1fc      	bne.n	800bdd8 <ai_platform_network_create+0x334>
 800bdde:	4b1a      	ldr	r3, [pc, #104]	; (800be48 <ai_platform_network_create+0x3a4>)
 800bde0:	6013      	str	r3, [r2, #0]
 800bde2:	4b1a      	ldr	r3, [pc, #104]	; (800be4c <ai_platform_network_create+0x3a8>)
 800bde4:	6812      	ldr	r2, [r2, #0]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	f43f aed6 	beq.w	800bb98 <ai_platform_network_create+0xf4>
 800bdec:	e7fe      	b.n	800bdec <ai_platform_network_create+0x348>
 800bdee:	e7fe      	b.n	800bdee <ai_platform_network_create+0x34a>
 800bdf0:	4b18      	ldr	r3, [pc, #96]	; (800be54 <ai_platform_network_create+0x3b0>)
 800bdf2:	a801      	add	r0, sp, #4
 800bdf4:	9301      	str	r3, [sp, #4]
 800bdf6:	f002 fc51 	bl	800e69c <ai_check_custom_types>
 800bdfa:	b300      	cbz	r0, 800be3e <ai_platform_network_create+0x39a>
 800bdfc:	2400      	movs	r4, #0
 800bdfe:	46a1      	mov	r9, r4
 800be00:	e76c      	b.n	800bcdc <ai_platform_network_create+0x238>
 800be02:	4b10      	ldr	r3, [pc, #64]	; (800be44 <ai_platform_network_create+0x3a0>)
 800be04:	2201      	movs	r2, #1
 800be06:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800be0a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800be0e:	2a00      	cmp	r2, #0
 800be10:	d1fb      	bne.n	800be0a <ai_platform_network_create+0x366>
 800be12:	4a0d      	ldr	r2, [pc, #52]	; (800be48 <ai_platform_network_create+0x3a4>)
 800be14:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800be18:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800be1c:	4b0b      	ldr	r3, [pc, #44]	; (800be4c <ai_platform_network_create+0x3a8>)
 800be1e:	429a      	cmp	r2, r3
 800be20:	d0b8      	beq.n	800bd94 <ai_platform_network_create+0x2f0>
 800be22:	e7fe      	b.n	800be22 <ai_platform_network_create+0x37e>
 800be24:	4b0a      	ldr	r3, [pc, #40]	; (800be50 <ai_platform_network_create+0x3ac>)
 800be26:	2201      	movs	r2, #1
 800be28:	609a      	str	r2, [r3, #8]
 800be2a:	689a      	ldr	r2, [r3, #8]
 800be2c:	2a00      	cmp	r2, #0
 800be2e:	d1fc      	bne.n	800be2a <ai_platform_network_create+0x386>
 800be30:	4a05      	ldr	r2, [pc, #20]	; (800be48 <ai_platform_network_create+0x3a4>)
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	681a      	ldr	r2, [r3, #0]
 800be36:	4b05      	ldr	r3, [pc, #20]	; (800be4c <ai_platform_network_create+0x3a8>)
 800be38:	429a      	cmp	r2, r3
 800be3a:	d0ab      	beq.n	800bd94 <ai_platform_network_create+0x2f0>
 800be3c:	e7fe      	b.n	800be3c <ai_platform_network_create+0x398>
 800be3e:	f04f 0902 	mov.w	r9, #2
 800be42:	e748      	b.n	800bcd6 <ai_platform_network_create+0x232>
 800be44:	58024000 	.word	0x58024000
 800be48:	f407a5c2 	.word	0xf407a5c2
 800be4c:	b5e8b5cd 	.word	0xb5e8b5cd
 800be50:	40023000 	.word	0x40023000
 800be54:	84048403 	.word	0x84048403

0800be58 <ai_platform_network_init>:
 800be58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be5c:	2800      	cmp	r0, #0
 800be5e:	d052      	beq.n	800bf06 <ai_platform_network_init+0xae>
 800be60:	4bab      	ldr	r3, [pc, #684]	; (800c110 <ai_platform_network_init+0x2b8>)
 800be62:	4604      	mov	r4, r0
 800be64:	6802      	ldr	r2, [r0, #0]
 800be66:	429a      	cmp	r2, r3
 800be68:	d14d      	bne.n	800bf06 <ai_platform_network_init+0xae>
 800be6a:	460d      	mov	r5, r1
 800be6c:	f7ff f940 	bl	800b0f0 <_ai_platform_acquire_crc>
 800be70:	4ba8      	ldr	r3, [pc, #672]	; (800c114 <ai_platform_network_init+0x2bc>)
 800be72:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be7c:	189a      	adds	r2, r3, r2
 800be7e:	2a01      	cmp	r2, #1
 800be80:	f240 809b 	bls.w	800bfba <ai_platform_network_init+0x162>
 800be84:	f240 4249 	movw	r2, #1097	; 0x449
 800be88:	4293      	cmp	r3, r2
 800be8a:	f000 8096 	beq.w	800bfba <ai_platform_network_init+0x162>
 800be8e:	4aa2      	ldr	r2, [pc, #648]	; (800c118 <ai_platform_network_init+0x2c0>)
 800be90:	6813      	ldr	r3, [r2, #0]
 800be92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be96:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800be9a:	f000 809d 	beq.w	800bfd8 <ai_platform_network_init+0x180>
 800be9e:	6813      	ldr	r3, [r2, #0]
 800bea0:	f240 4183 	movw	r1, #1155	; 0x483
 800bea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bea8:	428b      	cmp	r3, r1
 800beaa:	f000 80e4 	beq.w	800c076 <ai_platform_network_init+0x21e>
 800beae:	6813      	ldr	r3, [r2, #0]
 800beb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800beb4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800beb8:	f000 811b 	beq.w	800c0f2 <ai_platform_network_init+0x29a>
 800bebc:	6813      	ldr	r3, [r2, #0]
 800bebe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f000 80f9 	beq.w	800c0ba <ai_platform_network_init+0x262>
 800bec8:	f7ff f914 	bl	800b0f4 <_ai_platform_release_crc>
 800becc:	2d00      	cmp	r5, #0
 800bece:	f000 8147 	beq.w	800c160 <ai_platform_network_init+0x308>
 800bed2:	4b92      	ldr	r3, [pc, #584]	; (800c11c <ai_platform_network_init+0x2c4>)
 800bed4:	682a      	ldr	r2, [r5, #0]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	f040 8090 	bne.w	800bffc <ai_platform_network_init+0x1a4>
 800bedc:	692b      	ldr	r3, [r5, #16]
 800bede:	89ae      	ldrh	r6, [r5, #12]
 800bee0:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800bee4:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800bee8:	62a3      	str	r3, [r4, #40]	; 0x28
 800beea:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800beee:	2303      	movs	r3, #3
 800bef0:	84a6      	strh	r6, [r4, #36]	; 0x24
 800bef2:	4626      	mov	r6, r4
 800bef4:	4620      	mov	r0, r4
 800bef6:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800befa:	60e3      	str	r3, [r4, #12]
 800befc:	f002 fbf6 	bl	800e6ec <ai_layers_init_all>
 800bf00:	4630      	mov	r0, r6
 800bf02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf06:	f7ff f8f3 	bl	800b0f0 <_ai_platform_acquire_crc>
 800bf0a:	4b82      	ldr	r3, [pc, #520]	; (800c114 <ai_platform_network_init+0x2bc>)
 800bf0c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf16:	185a      	adds	r2, r3, r1
 800bf18:	2a01      	cmp	r2, #1
 800bf1a:	d92b      	bls.n	800bf74 <ai_platform_network_init+0x11c>
 800bf1c:	f240 4249 	movw	r2, #1097	; 0x449
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d027      	beq.n	800bf74 <ai_platform_network_init+0x11c>
 800bf24:	4a7c      	ldr	r2, [pc, #496]	; (800c118 <ai_platform_network_init+0x2c0>)
 800bf26:	6813      	ldr	r3, [r2, #0]
 800bf28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf2c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bf30:	d02d      	beq.n	800bf8e <ai_platform_network_init+0x136>
 800bf32:	6813      	ldr	r3, [r2, #0]
 800bf34:	f240 4183 	movw	r1, #1155	; 0x483
 800bf38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf3c:	428b      	cmp	r3, r1
 800bf3e:	f000 8089 	beq.w	800c054 <ai_platform_network_init+0x1fc>
 800bf42:	6813      	ldr	r3, [r2, #0]
 800bf44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf48:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bf4c:	f000 80c3 	beq.w	800c0d6 <ai_platform_network_init+0x27e>
 800bf50:	6813      	ldr	r3, [r2, #0]
 800bf52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d129      	bne.n	800bfae <ai_platform_network_init+0x156>
 800bf5a:	4a71      	ldr	r2, [pc, #452]	; (800c120 <ai_platform_network_init+0x2c8>)
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	6093      	str	r3, [r2, #8]
 800bf60:	6893      	ldr	r3, [r2, #8]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1fc      	bne.n	800bf60 <ai_platform_network_init+0x108>
 800bf66:	496f      	ldr	r1, [pc, #444]	; (800c124 <ai_platform_network_init+0x2cc>)
 800bf68:	4b6f      	ldr	r3, [pc, #444]	; (800c128 <ai_platform_network_init+0x2d0>)
 800bf6a:	6011      	str	r1, [r2, #0]
 800bf6c:	6812      	ldr	r2, [r2, #0]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d01d      	beq.n	800bfae <ai_platform_network_init+0x156>
 800bf72:	e7fe      	b.n	800bf72 <ai_platform_network_init+0x11a>
 800bf74:	4a6a      	ldr	r2, [pc, #424]	; (800c120 <ai_platform_network_init+0x2c8>)
 800bf76:	2301      	movs	r3, #1
 800bf78:	6093      	str	r3, [r2, #8]
 800bf7a:	6893      	ldr	r3, [r2, #8]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d1fc      	bne.n	800bf7a <ai_platform_network_init+0x122>
 800bf80:	4968      	ldr	r1, [pc, #416]	; (800c124 <ai_platform_network_init+0x2cc>)
 800bf82:	4b69      	ldr	r3, [pc, #420]	; (800c128 <ai_platform_network_init+0x2d0>)
 800bf84:	6011      	str	r1, [r2, #0]
 800bf86:	6812      	ldr	r2, [r2, #0]
 800bf88:	429a      	cmp	r2, r3
 800bf8a:	d010      	beq.n	800bfae <ai_platform_network_init+0x156>
 800bf8c:	e7fe      	b.n	800bf8c <ai_platform_network_init+0x134>
 800bf8e:	4a67      	ldr	r2, [pc, #412]	; (800c12c <ai_platform_network_init+0x2d4>)
 800bf90:	2301      	movs	r3, #1
 800bf92:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bf96:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1fb      	bne.n	800bf96 <ai_platform_network_init+0x13e>
 800bf9e:	4961      	ldr	r1, [pc, #388]	; (800c124 <ai_platform_network_init+0x2cc>)
 800bfa0:	4b61      	ldr	r3, [pc, #388]	; (800c128 <ai_platform_network_init+0x2d0>)
 800bfa2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800bfa6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d113      	bne.n	800bfd6 <ai_platform_network_init+0x17e>
 800bfae:	2600      	movs	r6, #0
 800bfb0:	f7ff f8a0 	bl	800b0f4 <_ai_platform_release_crc>
 800bfb4:	4630      	mov	r0, r6
 800bfb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfba:	4a59      	ldr	r2, [pc, #356]	; (800c120 <ai_platform_network_init+0x2c8>)
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	6093      	str	r3, [r2, #8]
 800bfc0:	6893      	ldr	r3, [r2, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1fc      	bne.n	800bfc0 <ai_platform_network_init+0x168>
 800bfc6:	4b57      	ldr	r3, [pc, #348]	; (800c124 <ai_platform_network_init+0x2cc>)
 800bfc8:	6013      	str	r3, [r2, #0]
 800bfca:	4b57      	ldr	r3, [pc, #348]	; (800c128 <ai_platform_network_init+0x2d0>)
 800bfcc:	6812      	ldr	r2, [r2, #0]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	f43f af7a 	beq.w	800bec8 <ai_platform_network_init+0x70>
 800bfd4:	e7fe      	b.n	800bfd4 <ai_platform_network_init+0x17c>
 800bfd6:	e7fe      	b.n	800bfd6 <ai_platform_network_init+0x17e>
 800bfd8:	4a54      	ldr	r2, [pc, #336]	; (800c12c <ai_platform_network_init+0x2d4>)
 800bfda:	2301      	movs	r3, #1
 800bfdc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bfe0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1fb      	bne.n	800bfe0 <ai_platform_network_init+0x188>
 800bfe8:	4b4e      	ldr	r3, [pc, #312]	; (800c124 <ai_platform_network_init+0x2cc>)
 800bfea:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bfee:	4b4e      	ldr	r3, [pc, #312]	; (800c128 <ai_platform_network_init+0x2d0>)
 800bff0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bff4:	429a      	cmp	r2, r3
 800bff6:	f43f af67 	beq.w	800bec8 <ai_platform_network_init+0x70>
 800bffa:	e7fe      	b.n	800bffa <ai_platform_network_init+0x1a2>
 800bffc:	2101      	movs	r1, #1
 800bffe:	4628      	mov	r0, r5
 800c000:	f105 081c 	add.w	r8, r5, #28
 800c004:	686e      	ldr	r6, [r5, #4]
 800c006:	f7ff f835 	bl	800b074 <ai_buffer_get_size>
 800c00a:	4607      	mov	r7, r0
 800c00c:	2101      	movs	r1, #1
 800c00e:	4640      	mov	r0, r8
 800c010:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800c014:	f7ff f82e 	bl	800b074 <ai_buffer_get_size>
 800c018:	2f00      	cmp	r7, #0
 800c01a:	d13e      	bne.n	800c09a <ai_platform_network_init+0x242>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	f000 808e 	beq.w	800c13e <ai_platform_network_init+0x2e6>
 800c022:	f1b9 0f00 	cmp.w	r9, #0
 800c026:	f000 8094 	beq.w	800c152 <ai_platform_network_init+0x2fa>
 800c02a:	f04f 0c01 	mov.w	ip, #1
 800c02e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800c030:	2600      	movs	r6, #0
 800c032:	83e7      	strh	r7, [r4, #30]
 800c034:	4563      	cmp	r3, ip
 800c036:	83a6      	strh	r6, [r4, #28]
 800c038:	d37a      	bcc.n	800c130 <ai_platform_network_init+0x2d8>
 800c03a:	f1bc 0f00 	cmp.w	ip, #0
 800c03e:	f000 809c 	beq.w	800c17a <ai_platform_network_init+0x322>
 800c042:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800c044:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800c048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c04a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800c04e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c052:	e74c      	b.n	800beee <ai_platform_network_init+0x96>
 800c054:	4a35      	ldr	r2, [pc, #212]	; (800c12c <ai_platform_network_init+0x2d4>)
 800c056:	2301      	movs	r3, #1
 800c058:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c05c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c060:	2b00      	cmp	r3, #0
 800c062:	d1fb      	bne.n	800c05c <ai_platform_network_init+0x204>
 800c064:	492f      	ldr	r1, [pc, #188]	; (800c124 <ai_platform_network_init+0x2cc>)
 800c066:	4b30      	ldr	r3, [pc, #192]	; (800c128 <ai_platform_network_init+0x2d0>)
 800c068:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c06c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c070:	429a      	cmp	r2, r3
 800c072:	d09c      	beq.n	800bfae <ai_platform_network_init+0x156>
 800c074:	e7fe      	b.n	800c074 <ai_platform_network_init+0x21c>
 800c076:	4a2d      	ldr	r2, [pc, #180]	; (800c12c <ai_platform_network_init+0x2d4>)
 800c078:	2301      	movs	r3, #1
 800c07a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c07e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1fb      	bne.n	800c07e <ai_platform_network_init+0x226>
 800c086:	4b27      	ldr	r3, [pc, #156]	; (800c124 <ai_platform_network_init+0x2cc>)
 800c088:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c08c:	4b26      	ldr	r3, [pc, #152]	; (800c128 <ai_platform_network_init+0x2d0>)
 800c08e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c092:	429a      	cmp	r2, r3
 800c094:	f43f af18 	beq.w	800bec8 <ai_platform_network_init+0x70>
 800c098:	e7fe      	b.n	800c098 <ai_platform_network_init+0x240>
 800c09a:	2800      	cmp	r0, #0
 800c09c:	d153      	bne.n	800c146 <ai_platform_network_init+0x2ee>
 800c09e:	4680      	mov	r8, r0
 800c0a0:	4684      	mov	ip, r0
 800c0a2:	2e00      	cmp	r6, #0
 800c0a4:	d063      	beq.n	800c16e <ai_platform_network_init+0x316>
 800c0a6:	8be6      	ldrh	r6, [r4, #30]
 800c0a8:	2e00      	cmp	r6, #0
 800c0aa:	d168      	bne.n	800c17e <ai_platform_network_init+0x326>
 800c0ac:	2212      	movs	r2, #18
 800c0ae:	2116      	movs	r1, #22
 800c0b0:	f104 0010 	add.w	r0, r4, #16
 800c0b4:	f000 fc7c 	bl	800c9b0 <core_set_error>
 800c0b8:	e77c      	b.n	800bfb4 <ai_platform_network_init+0x15c>
 800c0ba:	4a19      	ldr	r2, [pc, #100]	; (800c120 <ai_platform_network_init+0x2c8>)
 800c0bc:	2301      	movs	r3, #1
 800c0be:	6093      	str	r3, [r2, #8]
 800c0c0:	6893      	ldr	r3, [r2, #8]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1fc      	bne.n	800c0c0 <ai_platform_network_init+0x268>
 800c0c6:	4b17      	ldr	r3, [pc, #92]	; (800c124 <ai_platform_network_init+0x2cc>)
 800c0c8:	6013      	str	r3, [r2, #0]
 800c0ca:	4b17      	ldr	r3, [pc, #92]	; (800c128 <ai_platform_network_init+0x2d0>)
 800c0cc:	6812      	ldr	r2, [r2, #0]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	f43f aefa 	beq.w	800bec8 <ai_platform_network_init+0x70>
 800c0d4:	e7fe      	b.n	800c0d4 <ai_platform_network_init+0x27c>
 800c0d6:	4a12      	ldr	r2, [pc, #72]	; (800c120 <ai_platform_network_init+0x2c8>)
 800c0d8:	2301      	movs	r3, #1
 800c0da:	6093      	str	r3, [r2, #8]
 800c0dc:	6893      	ldr	r3, [r2, #8]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d1fc      	bne.n	800c0dc <ai_platform_network_init+0x284>
 800c0e2:	4910      	ldr	r1, [pc, #64]	; (800c124 <ai_platform_network_init+0x2cc>)
 800c0e4:	4b10      	ldr	r3, [pc, #64]	; (800c128 <ai_platform_network_init+0x2d0>)
 800c0e6:	6011      	str	r1, [r2, #0]
 800c0e8:	6812      	ldr	r2, [r2, #0]
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	f43f af5f 	beq.w	800bfae <ai_platform_network_init+0x156>
 800c0f0:	e7fe      	b.n	800c0f0 <ai_platform_network_init+0x298>
 800c0f2:	4a0b      	ldr	r2, [pc, #44]	; (800c120 <ai_platform_network_init+0x2c8>)
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	6093      	str	r3, [r2, #8]
 800c0f8:	6893      	ldr	r3, [r2, #8]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1fc      	bne.n	800c0f8 <ai_platform_network_init+0x2a0>
 800c0fe:	4b09      	ldr	r3, [pc, #36]	; (800c124 <ai_platform_network_init+0x2cc>)
 800c100:	6013      	str	r3, [r2, #0]
 800c102:	4b09      	ldr	r3, [pc, #36]	; (800c128 <ai_platform_network_init+0x2d0>)
 800c104:	6812      	ldr	r2, [r2, #0]
 800c106:	429a      	cmp	r2, r3
 800c108:	f43f aede 	beq.w	800bec8 <ai_platform_network_init+0x70>
 800c10c:	e7fe      	b.n	800c10c <ai_platform_network_init+0x2b4>
 800c10e:	bf00      	nop
 800c110:	a1c00100 	.word	0xa1c00100
 800c114:	e0042000 	.word	0xe0042000
 800c118:	5c001000 	.word	0x5c001000
 800c11c:	a1facade 	.word	0xa1facade
 800c120:	40023000 	.word	0x40023000
 800c124:	f407a5c2 	.word	0xf407a5c2
 800c128:	b5e8b5cd 	.word	0xb5e8b5cd
 800c12c:	58024000 	.word	0x58024000
 800c130:	2213      	movs	r2, #19
 800c132:	2116      	movs	r1, #22
 800c134:	f104 0010 	add.w	r0, r4, #16
 800c138:	f000 fc3a 	bl	800c9b0 <core_set_error>
 800c13c:	e73a      	b.n	800bfb4 <ai_platform_network_init+0x15c>
 800c13e:	4607      	mov	r7, r0
 800c140:	4680      	mov	r8, r0
 800c142:	4684      	mov	ip, r0
 800c144:	e773      	b.n	800c02e <ai_platform_network_init+0x1d6>
 800c146:	f1b9 0f00 	cmp.w	r9, #0
 800c14a:	d002      	beq.n	800c152 <ai_platform_network_init+0x2fa>
 800c14c:	f04f 0c01 	mov.w	ip, #1
 800c150:	e7a7      	b.n	800c0a2 <ai_platform_network_init+0x24a>
 800c152:	2110      	movs	r1, #16
 800c154:	2213      	movs	r2, #19
 800c156:	2600      	movs	r6, #0
 800c158:	1860      	adds	r0, r4, r1
 800c15a:	f000 fc29 	bl	800c9b0 <core_set_error>
 800c15e:	e729      	b.n	800bfb4 <ai_platform_network_init+0x15c>
 800c160:	2110      	movs	r1, #16
 800c162:	2211      	movs	r2, #17
 800c164:	462e      	mov	r6, r5
 800c166:	1860      	adds	r0, r4, r1
 800c168:	f000 fc22 	bl	800c9b0 <core_set_error>
 800c16c:	e722      	b.n	800bfb4 <ai_platform_network_init+0x15c>
 800c16e:	2110      	movs	r1, #16
 800c170:	2212      	movs	r2, #18
 800c172:	1860      	adds	r0, r4, r1
 800c174:	f000 fc1c 	bl	800c9b0 <core_set_error>
 800c178:	e71c      	b.n	800bfb4 <ai_platform_network_init+0x15c>
 800c17a:	4666      	mov	r6, ip
 800c17c:	e6b7      	b.n	800beee <ai_platform_network_init+0x96>
 800c17e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c180:	6a26      	ldr	r6, [r4, #32]
 800c182:	2701      	movs	r7, #1
 800c184:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c186:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c18a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800c18e:	e74e      	b.n	800c02e <ai_platform_network_init+0x1d6>

0800c190 <ai_platform_network_post_init>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	2800      	cmp	r0, #0
 800c194:	d04e      	beq.n	800c234 <ai_platform_network_post_init+0xa4>
 800c196:	4b8c      	ldr	r3, [pc, #560]	; (800c3c8 <ai_platform_network_post_init+0x238>)
 800c198:	4604      	mov	r4, r0
 800c19a:	6802      	ldr	r2, [r0, #0]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d149      	bne.n	800c234 <ai_platform_network_post_init+0xa4>
 800c1a0:	f7fe ffa6 	bl	800b0f0 <_ai_platform_acquire_crc>
 800c1a4:	4b89      	ldr	r3, [pc, #548]	; (800c3cc <ai_platform_network_post_init+0x23c>)
 800c1a6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1b0:	189a      	adds	r2, r3, r2
 800c1b2:	2a01      	cmp	r2, #1
 800c1b4:	f240 8095 	bls.w	800c2e2 <ai_platform_network_post_init+0x152>
 800c1b8:	f240 4249 	movw	r2, #1097	; 0x449
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	f000 8090 	beq.w	800c2e2 <ai_platform_network_post_init+0x152>
 800c1c2:	4a83      	ldr	r2, [pc, #524]	; (800c3d0 <ai_platform_network_post_init+0x240>)
 800c1c4:	6813      	ldr	r3, [r2, #0]
 800c1c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1ca:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c1ce:	f000 8096 	beq.w	800c2fe <ai_platform_network_post_init+0x16e>
 800c1d2:	6813      	ldr	r3, [r2, #0]
 800c1d4:	f240 4183 	movw	r1, #1155	; 0x483
 800c1d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1dc:	428b      	cmp	r3, r1
 800c1de:	f000 80b8 	beq.w	800c352 <ai_platform_network_post_init+0x1c2>
 800c1e2:	6813      	ldr	r3, [r2, #0]
 800c1e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1e8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c1ec:	f000 80de 	beq.w	800c3ac <ai_platform_network_post_init+0x21c>
 800c1f0:	6813      	ldr	r3, [r2, #0]
 800c1f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	f000 80bd 	beq.w	800c376 <ai_platform_network_post_init+0x1e6>
 800c1fc:	f7fe ff7a 	bl	800b0f4 <_ai_platform_release_crc>
 800c200:	68e3      	ldr	r3, [r4, #12]
 800c202:	f013 0502 	ands.w	r5, r3, #2
 800c206:	f000 808c 	beq.w	800c322 <ai_platform_network_post_init+0x192>
 800c20a:	4620      	mov	r0, r4
 800c20c:	f002 fa7c 	bl	800e708 <ai_layers_post_init_all>
 800c210:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c212:	b16b      	cbz	r3, 800c230 <ai_platform_network_post_init+0xa0>
 800c214:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800c216:	e007      	b.n	800c228 <ai_platform_network_post_init+0x98>
 800c218:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800c21c:	4798      	blx	r3
 800c21e:	692b      	ldr	r3, [r5, #16]
 800c220:	b133      	cbz	r3, 800c230 <ai_platform_network_post_init+0xa0>
 800c222:	42ab      	cmp	r3, r5
 800c224:	461d      	mov	r5, r3
 800c226:	d003      	beq.n	800c230 <ai_platform_network_post_init+0xa0>
 800c228:	4629      	mov	r1, r5
 800c22a:	2000      	movs	r0, #0
 800c22c:	2d00      	cmp	r5, #0
 800c22e:	d1f3      	bne.n	800c218 <ai_platform_network_post_init+0x88>
 800c230:	2001      	movs	r0, #1
 800c232:	bd38      	pop	{r3, r4, r5, pc}
 800c234:	f7fe ff5c 	bl	800b0f0 <_ai_platform_acquire_crc>
 800c238:	4b64      	ldr	r3, [pc, #400]	; (800c3cc <ai_platform_network_post_init+0x23c>)
 800c23a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c244:	185a      	adds	r2, r3, r1
 800c246:	2a01      	cmp	r2, #1
 800c248:	d92a      	bls.n	800c2a0 <ai_platform_network_post_init+0x110>
 800c24a:	f240 4249 	movw	r2, #1097	; 0x449
 800c24e:	4293      	cmp	r3, r2
 800c250:	d026      	beq.n	800c2a0 <ai_platform_network_post_init+0x110>
 800c252:	4a5f      	ldr	r2, [pc, #380]	; (800c3d0 <ai_platform_network_post_init+0x240>)
 800c254:	6813      	ldr	r3, [r2, #0]
 800c256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c25a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c25e:	d02c      	beq.n	800c2ba <ai_platform_network_post_init+0x12a>
 800c260:	6813      	ldr	r3, [r2, #0]
 800c262:	f240 4183 	movw	r1, #1155	; 0x483
 800c266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c26a:	428b      	cmp	r3, r1
 800c26c:	d060      	beq.n	800c330 <ai_platform_network_post_init+0x1a0>
 800c26e:	6813      	ldr	r3, [r2, #0]
 800c270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c274:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c278:	f000 808b 	beq.w	800c392 <ai_platform_network_post_init+0x202>
 800c27c:	6813      	ldr	r3, [r2, #0]
 800c27e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c282:	2b00      	cmp	r3, #0
 800c284:	d129      	bne.n	800c2da <ai_platform_network_post_init+0x14a>
 800c286:	4a53      	ldr	r2, [pc, #332]	; (800c3d4 <ai_platform_network_post_init+0x244>)
 800c288:	2301      	movs	r3, #1
 800c28a:	6093      	str	r3, [r2, #8]
 800c28c:	6893      	ldr	r3, [r2, #8]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1fc      	bne.n	800c28c <ai_platform_network_post_init+0xfc>
 800c292:	4951      	ldr	r1, [pc, #324]	; (800c3d8 <ai_platform_network_post_init+0x248>)
 800c294:	4b51      	ldr	r3, [pc, #324]	; (800c3dc <ai_platform_network_post_init+0x24c>)
 800c296:	6011      	str	r1, [r2, #0]
 800c298:	6812      	ldr	r2, [r2, #0]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d01d      	beq.n	800c2da <ai_platform_network_post_init+0x14a>
 800c29e:	e7fe      	b.n	800c29e <ai_platform_network_post_init+0x10e>
 800c2a0:	4a4c      	ldr	r2, [pc, #304]	; (800c3d4 <ai_platform_network_post_init+0x244>)
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	6093      	str	r3, [r2, #8]
 800c2a6:	6893      	ldr	r3, [r2, #8]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d1fc      	bne.n	800c2a6 <ai_platform_network_post_init+0x116>
 800c2ac:	494a      	ldr	r1, [pc, #296]	; (800c3d8 <ai_platform_network_post_init+0x248>)
 800c2ae:	4b4b      	ldr	r3, [pc, #300]	; (800c3dc <ai_platform_network_post_init+0x24c>)
 800c2b0:	6011      	str	r1, [r2, #0]
 800c2b2:	6812      	ldr	r2, [r2, #0]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d010      	beq.n	800c2da <ai_platform_network_post_init+0x14a>
 800c2b8:	e7fe      	b.n	800c2b8 <ai_platform_network_post_init+0x128>
 800c2ba:	4a49      	ldr	r2, [pc, #292]	; (800c3e0 <ai_platform_network_post_init+0x250>)
 800c2bc:	2301      	movs	r3, #1
 800c2be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c2c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d1fb      	bne.n	800c2c2 <ai_platform_network_post_init+0x132>
 800c2ca:	4943      	ldr	r1, [pc, #268]	; (800c3d8 <ai_platform_network_post_init+0x248>)
 800c2cc:	4b43      	ldr	r3, [pc, #268]	; (800c3dc <ai_platform_network_post_init+0x24c>)
 800c2ce:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c2d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d110      	bne.n	800c2fc <ai_platform_network_post_init+0x16c>
 800c2da:	f7fe ff0b 	bl	800b0f4 <_ai_platform_release_crc>
 800c2de:	2000      	movs	r0, #0
 800c2e0:	bd38      	pop	{r3, r4, r5, pc}
 800c2e2:	4a3c      	ldr	r2, [pc, #240]	; (800c3d4 <ai_platform_network_post_init+0x244>)
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	6093      	str	r3, [r2, #8]
 800c2e8:	6893      	ldr	r3, [r2, #8]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1fc      	bne.n	800c2e8 <ai_platform_network_post_init+0x158>
 800c2ee:	493a      	ldr	r1, [pc, #232]	; (800c3d8 <ai_platform_network_post_init+0x248>)
 800c2f0:	4b3a      	ldr	r3, [pc, #232]	; (800c3dc <ai_platform_network_post_init+0x24c>)
 800c2f2:	6011      	str	r1, [r2, #0]
 800c2f4:	6812      	ldr	r2, [r2, #0]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d080      	beq.n	800c1fc <ai_platform_network_post_init+0x6c>
 800c2fa:	e7fe      	b.n	800c2fa <ai_platform_network_post_init+0x16a>
 800c2fc:	e7fe      	b.n	800c2fc <ai_platform_network_post_init+0x16c>
 800c2fe:	4a38      	ldr	r2, [pc, #224]	; (800c3e0 <ai_platform_network_post_init+0x250>)
 800c300:	2301      	movs	r3, #1
 800c302:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c306:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1fb      	bne.n	800c306 <ai_platform_network_post_init+0x176>
 800c30e:	4932      	ldr	r1, [pc, #200]	; (800c3d8 <ai_platform_network_post_init+0x248>)
 800c310:	4b32      	ldr	r3, [pc, #200]	; (800c3dc <ai_platform_network_post_init+0x24c>)
 800c312:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c316:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c31a:	429a      	cmp	r2, r3
 800c31c:	f43f af6e 	beq.w	800c1fc <ai_platform_network_post_init+0x6c>
 800c320:	e7fe      	b.n	800c320 <ai_platform_network_post_init+0x190>
 800c322:	2210      	movs	r2, #16
 800c324:	2111      	movs	r1, #17
 800c326:	18a0      	adds	r0, r4, r2
 800c328:	f000 fb42 	bl	800c9b0 <core_set_error>
 800c32c:	4628      	mov	r0, r5
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	4a2b      	ldr	r2, [pc, #172]	; (800c3e0 <ai_platform_network_post_init+0x250>)
 800c332:	2301      	movs	r3, #1
 800c334:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c338:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1fb      	bne.n	800c338 <ai_platform_network_post_init+0x1a8>
 800c340:	4925      	ldr	r1, [pc, #148]	; (800c3d8 <ai_platform_network_post_init+0x248>)
 800c342:	4b26      	ldr	r3, [pc, #152]	; (800c3dc <ai_platform_network_post_init+0x24c>)
 800c344:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c348:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d0c4      	beq.n	800c2da <ai_platform_network_post_init+0x14a>
 800c350:	e7fe      	b.n	800c350 <ai_platform_network_post_init+0x1c0>
 800c352:	4a23      	ldr	r2, [pc, #140]	; (800c3e0 <ai_platform_network_post_init+0x250>)
 800c354:	2301      	movs	r3, #1
 800c356:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c35a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1fb      	bne.n	800c35a <ai_platform_network_post_init+0x1ca>
 800c362:	491d      	ldr	r1, [pc, #116]	; (800c3d8 <ai_platform_network_post_init+0x248>)
 800c364:	4b1d      	ldr	r3, [pc, #116]	; (800c3dc <ai_platform_network_post_init+0x24c>)
 800c366:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c36a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c36e:	429a      	cmp	r2, r3
 800c370:	f43f af44 	beq.w	800c1fc <ai_platform_network_post_init+0x6c>
 800c374:	e7fe      	b.n	800c374 <ai_platform_network_post_init+0x1e4>
 800c376:	4a17      	ldr	r2, [pc, #92]	; (800c3d4 <ai_platform_network_post_init+0x244>)
 800c378:	2301      	movs	r3, #1
 800c37a:	6093      	str	r3, [r2, #8]
 800c37c:	6893      	ldr	r3, [r2, #8]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1fc      	bne.n	800c37c <ai_platform_network_post_init+0x1ec>
 800c382:	4915      	ldr	r1, [pc, #84]	; (800c3d8 <ai_platform_network_post_init+0x248>)
 800c384:	4b15      	ldr	r3, [pc, #84]	; (800c3dc <ai_platform_network_post_init+0x24c>)
 800c386:	6011      	str	r1, [r2, #0]
 800c388:	6812      	ldr	r2, [r2, #0]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	f43f af36 	beq.w	800c1fc <ai_platform_network_post_init+0x6c>
 800c390:	e7fe      	b.n	800c390 <ai_platform_network_post_init+0x200>
 800c392:	4a10      	ldr	r2, [pc, #64]	; (800c3d4 <ai_platform_network_post_init+0x244>)
 800c394:	2301      	movs	r3, #1
 800c396:	6093      	str	r3, [r2, #8]
 800c398:	6893      	ldr	r3, [r2, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1fc      	bne.n	800c398 <ai_platform_network_post_init+0x208>
 800c39e:	490e      	ldr	r1, [pc, #56]	; (800c3d8 <ai_platform_network_post_init+0x248>)
 800c3a0:	4b0e      	ldr	r3, [pc, #56]	; (800c3dc <ai_platform_network_post_init+0x24c>)
 800c3a2:	6011      	str	r1, [r2, #0]
 800c3a4:	6812      	ldr	r2, [r2, #0]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d097      	beq.n	800c2da <ai_platform_network_post_init+0x14a>
 800c3aa:	e7fe      	b.n	800c3aa <ai_platform_network_post_init+0x21a>
 800c3ac:	4a09      	ldr	r2, [pc, #36]	; (800c3d4 <ai_platform_network_post_init+0x244>)
 800c3ae:	2301      	movs	r3, #1
 800c3b0:	6093      	str	r3, [r2, #8]
 800c3b2:	6893      	ldr	r3, [r2, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1fc      	bne.n	800c3b2 <ai_platform_network_post_init+0x222>
 800c3b8:	4907      	ldr	r1, [pc, #28]	; (800c3d8 <ai_platform_network_post_init+0x248>)
 800c3ba:	4b08      	ldr	r3, [pc, #32]	; (800c3dc <ai_platform_network_post_init+0x24c>)
 800c3bc:	6011      	str	r1, [r2, #0]
 800c3be:	6812      	ldr	r2, [r2, #0]
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	f43f af1b 	beq.w	800c1fc <ai_platform_network_post_init+0x6c>
 800c3c6:	e7fe      	b.n	800c3c6 <ai_platform_network_post_init+0x236>
 800c3c8:	a1c00100 	.word	0xa1c00100
 800c3cc:	e0042000 	.word	0xe0042000
 800c3d0:	5c001000 	.word	0x5c001000
 800c3d4:	40023000 	.word	0x40023000
 800c3d8:	f407a5c2 	.word	0xf407a5c2
 800c3dc:	b5e8b5cd 	.word	0xb5e8b5cd
 800c3e0:	58024000 	.word	0x58024000

0800c3e4 <ai_platform_network_process>:
 800c3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e8:	b085      	sub	sp, #20
 800c3ea:	460e      	mov	r6, r1
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	9201      	str	r2, [sp, #4]
 800c3f0:	b120      	cbz	r0, 800c3fc <ai_platform_network_process+0x18>
 800c3f2:	4b24      	ldr	r3, [pc, #144]	; (800c484 <ai_platform_network_process+0xa0>)
 800c3f4:	6802      	ldr	r2, [r0, #0]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	bf18      	it	ne
 800c3fa:	2500      	movne	r5, #0
 800c3fc:	f7fe fe78 	bl	800b0f0 <_ai_platform_acquire_crc>
 800c400:	4b21      	ldr	r3, [pc, #132]	; (800c488 <ai_platform_network_process+0xa4>)
 800c402:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c40c:	185a      	adds	r2, r3, r1
 800c40e:	2a01      	cmp	r2, #1
 800c410:	d92b      	bls.n	800c46a <ai_platform_network_process+0x86>
 800c412:	f240 4249 	movw	r2, #1097	; 0x449
 800c416:	4293      	cmp	r3, r2
 800c418:	d027      	beq.n	800c46a <ai_platform_network_process+0x86>
 800c41a:	4a1c      	ldr	r2, [pc, #112]	; (800c48c <ai_platform_network_process+0xa8>)
 800c41c:	6813      	ldr	r3, [r2, #0]
 800c41e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c422:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c426:	d039      	beq.n	800c49c <ai_platform_network_process+0xb8>
 800c428:	6813      	ldr	r3, [r2, #0]
 800c42a:	f240 4183 	movw	r1, #1155	; 0x483
 800c42e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c432:	428b      	cmp	r3, r1
 800c434:	f000 819c 	beq.w	800c770 <ai_platform_network_process+0x38c>
 800c438:	6813      	ldr	r3, [r2, #0]
 800c43a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c43e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c442:	f000 8179 	beq.w	800c738 <ai_platform_network_process+0x354>
 800c446:	6813      	ldr	r3, [r2, #0]
 800c448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d136      	bne.n	800c4be <ai_platform_network_process+0xda>
 800c450:	4a0f      	ldr	r2, [pc, #60]	; (800c490 <ai_platform_network_process+0xac>)
 800c452:	2301      	movs	r3, #1
 800c454:	6093      	str	r3, [r2, #8]
 800c456:	6893      	ldr	r3, [r2, #8]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1fc      	bne.n	800c456 <ai_platform_network_process+0x72>
 800c45c:	4b0d      	ldr	r3, [pc, #52]	; (800c494 <ai_platform_network_process+0xb0>)
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	4b0d      	ldr	r3, [pc, #52]	; (800c498 <ai_platform_network_process+0xb4>)
 800c462:	6812      	ldr	r2, [r2, #0]
 800c464:	429a      	cmp	r2, r3
 800c466:	d02a      	beq.n	800c4be <ai_platform_network_process+0xda>
 800c468:	e7fe      	b.n	800c468 <ai_platform_network_process+0x84>
 800c46a:	4a09      	ldr	r2, [pc, #36]	; (800c490 <ai_platform_network_process+0xac>)
 800c46c:	2301      	movs	r3, #1
 800c46e:	6093      	str	r3, [r2, #8]
 800c470:	6893      	ldr	r3, [r2, #8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1fc      	bne.n	800c470 <ai_platform_network_process+0x8c>
 800c476:	4b07      	ldr	r3, [pc, #28]	; (800c494 <ai_platform_network_process+0xb0>)
 800c478:	6013      	str	r3, [r2, #0]
 800c47a:	4b07      	ldr	r3, [pc, #28]	; (800c498 <ai_platform_network_process+0xb4>)
 800c47c:	6812      	ldr	r2, [r2, #0]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d01d      	beq.n	800c4be <ai_platform_network_process+0xda>
 800c482:	e7fe      	b.n	800c482 <ai_platform_network_process+0x9e>
 800c484:	a1c00100 	.word	0xa1c00100
 800c488:	e0042000 	.word	0xe0042000
 800c48c:	5c001000 	.word	0x5c001000
 800c490:	40023000 	.word	0x40023000
 800c494:	f407a5c2 	.word	0xf407a5c2
 800c498:	b5e8b5cd 	.word	0xb5e8b5cd
 800c49c:	4ab0      	ldr	r2, [pc, #704]	; (800c760 <ai_platform_network_process+0x37c>)
 800c49e:	2301      	movs	r3, #1
 800c4a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c4a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d1fb      	bne.n	800c4a4 <ai_platform_network_process+0xc0>
 800c4ac:	4bad      	ldr	r3, [pc, #692]	; (800c764 <ai_platform_network_process+0x380>)
 800c4ae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c4b2:	4bad      	ldr	r3, [pc, #692]	; (800c768 <ai_platform_network_process+0x384>)
 800c4b4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	f040 812b 	bne.w	800c714 <ai_platform_network_process+0x330>
 800c4be:	f7fe fe19 	bl	800b0f4 <_ai_platform_release_crc>
 800c4c2:	2d00      	cmp	r5, #0
 800c4c4:	f000 8172 	beq.w	800c7ac <ai_platform_network_process+0x3c8>
 800c4c8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	f000 8123 	beq.w	800c716 <ai_platform_network_process+0x332>
 800c4d0:	68eb      	ldr	r3, [r5, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800c4d8:	f003 0303 	and.w	r3, r3, #3
 800c4dc:	616a      	str	r2, [r5, #20]
 800c4de:	2b03      	cmp	r3, #3
 800c4e0:	f040 811f 	bne.w	800c722 <ai_platform_network_process+0x33e>
 800c4e4:	2e00      	cmp	r6, #0
 800c4e6:	f000 8156 	beq.w	800c796 <ai_platform_network_process+0x3b2>
 800c4ea:	fab8 f788 	clz	r7, r8
 800c4ee:	097f      	lsrs	r7, r7, #5
 800c4f0:	f1b8 0f00 	cmp.w	r8, #0
 800c4f4:	f000 814f 	beq.w	800c796 <ai_platform_network_process+0x3b2>
 800c4f8:	f8b8 3000 	ldrh.w	r3, [r8]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	f000 814a 	beq.w	800c796 <ai_platform_network_process+0x3b2>
 800c502:	69b3      	ldr	r3, [r6, #24]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800c50a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d072      	beq.n	800c5f8 <ai_platform_network_process+0x214>
 800c512:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800c516:	2c00      	cmp	r4, #0
 800c518:	d06e      	beq.n	800c5f8 <ai_platform_network_process+0x214>
 800c51a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c51e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800c522:	f8d3 a000 	ldr.w	sl, [r3]
 800c526:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800c52a:	f000 8133 	beq.w	800c794 <ai_platform_network_process+0x3b0>
 800c52e:	69a3      	ldr	r3, [r4, #24]
 800c530:	2101      	movs	r1, #1
 800c532:	4630      	mov	r0, r6
 800c534:	685d      	ldr	r5, [r3, #4]
 800c536:	f7fe fd9d 	bl	800b074 <ai_buffer_get_size>
 800c53a:	4285      	cmp	r5, r0
 800c53c:	f0c0 8138 	bcc.w	800c7b0 <ai_platform_network_process+0x3cc>
 800c540:	68e0      	ldr	r0, [r4, #12]
 800c542:	69b1      	ldr	r1, [r6, #24]
 800c544:	68c2      	ldr	r2, [r0, #12]
 800c546:	68cb      	ldr	r3, [r1, #12]
 800c548:	429a      	cmp	r2, r3
 800c54a:	f040 8131 	bne.w	800c7b0 <ai_platform_network_process+0x3cc>
 800c54e:	6882      	ldr	r2, [r0, #8]
 800c550:	688b      	ldr	r3, [r1, #8]
 800c552:	429a      	cmp	r2, r3
 800c554:	f040 812c 	bne.w	800c7b0 <ai_platform_network_process+0x3cc>
 800c558:	6842      	ldr	r2, [r0, #4]
 800c55a:	684b      	ldr	r3, [r1, #4]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	f040 8127 	bne.w	800c7b0 <ai_platform_network_process+0x3cc>
 800c562:	69a3      	ldr	r3, [r4, #24]
 800c564:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c568:	f002 fb02 	bl	800eb70 <ai_array_get_data_byte_size>
 800c56c:	4605      	mov	r5, r0
 800c56e:	4620      	mov	r0, r4
 800c570:	f002 fa54 	bl	800ea1c <get_tensor_byte_size>
 800c574:	4285      	cmp	r5, r0
 800c576:	f0c0 811b 	bcc.w	800c7b0 <ai_platform_network_process+0x3cc>
 800c57a:	69a3      	ldr	r3, [r4, #24]
 800c57c:	6818      	ldr	r0, [r3, #0]
 800c57e:	f002 fa63 	bl	800ea48 <ai_array_to_buffer_fmt>
 800c582:	6833      	ldr	r3, [r6, #0]
 800c584:	4058      	eors	r0, r3
 800c586:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800c58a:	f040 81ca 	bne.w	800c922 <ai_platform_network_process+0x53e>
 800c58e:	6873      	ldr	r3, [r6, #4]
 800c590:	2b00      	cmp	r3, #0
 800c592:	f000 81bd 	beq.w	800c910 <ai_platform_network_process+0x52c>
 800c596:	69b3      	ldr	r3, [r6, #24]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f000 81ca 	beq.w	800c934 <ai_platform_network_process+0x550>
 800c5a0:	9a02      	ldr	r2, [sp, #8]
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	3701      	adds	r7, #1
 800c5a6:	361c      	adds	r6, #28
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	bf38      	it	cc
 800c5ac:	461a      	movcc	r2, r3
 800c5ae:	9202      	str	r2, [sp, #8]
 800c5b0:	f002 fa34 	bl	800ea1c <get_tensor_byte_size>
 800c5b4:	f8c9 0008 	str.w	r0, [r9, #8]
 800c5b8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	fb00 f303 	mul.w	r3, r0, r3
 800c5c2:	f8c9 300c 	str.w	r3, [r9, #12]
 800c5c6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800c5ca:	440b      	add	r3, r1
 800c5cc:	f8c9 1004 	str.w	r1, [r9, #4]
 800c5d0:	f84a 300b 	str.w	r3, [sl, fp]
 800c5d4:	69a0      	ldr	r0, [r4, #24]
 800c5d6:	6803      	ldr	r3, [r0, #0]
 800c5d8:	009a      	lsls	r2, r3, #2
 800c5da:	f100 80bb 	bmi.w	800c754 <ai_platform_network_process+0x370>
 800c5de:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c5e2:	1a9b      	subs	r3, r3, r2
 800c5e4:	4419      	add	r1, r3
 800c5e6:	6081      	str	r1, [r0, #8]
 800c5e8:	69a3      	ldr	r3, [r4, #24]
 800c5ea:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c5ee:	60da      	str	r2, [r3, #12]
 800c5f0:	f8b8 3000 	ldrh.w	r3, [r8]
 800c5f4:	42bb      	cmp	r3, r7
 800c5f6:	d888      	bhi.n	800c50a <ai_platform_network_process+0x126>
 800c5f8:	9d03      	ldr	r5, [sp, #12]
 800c5fa:	9b01      	ldr	r3, [sp, #4]
 800c5fc:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f000 81a1 	beq.w	800c946 <ai_platform_network_process+0x562>
 800c604:	2a01      	cmp	r2, #1
 800c606:	f240 817b 	bls.w	800c900 <ai_platform_network_process+0x51c>
 800c60a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800c60e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c612:	2b00      	cmp	r3, #0
 800c614:	f000 8174 	beq.w	800c900 <ai_platform_network_process+0x51c>
 800c618:	9e01      	ldr	r6, [sp, #4]
 800c61a:	2700      	movs	r7, #0
 800c61c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	f000 80d3 	beq.w	800c7cc <ai_platform_network_process+0x3e8>
 800c626:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800c62a:	2c00      	cmp	r4, #0
 800c62c:	f000 80ce 	beq.w	800c7cc <ai_platform_network_process+0x3e8>
 800c630:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c634:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800c638:	f8d3 8000 	ldr.w	r8, [r3]
 800c63c:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800c640:	f000 819f 	beq.w	800c982 <ai_platform_network_process+0x59e>
 800c644:	69a3      	ldr	r3, [r4, #24]
 800c646:	2101      	movs	r1, #1
 800c648:	4630      	mov	r0, r6
 800c64a:	685b      	ldr	r3, [r3, #4]
 800c64c:	9301      	str	r3, [sp, #4]
 800c64e:	f7fe fd11 	bl	800b074 <ai_buffer_get_size>
 800c652:	9b01      	ldr	r3, [sp, #4]
 800c654:	4283      	cmp	r3, r0
 800c656:	f0c0 8153 	bcc.w	800c900 <ai_platform_network_process+0x51c>
 800c65a:	68e0      	ldr	r0, [r4, #12]
 800c65c:	69b1      	ldr	r1, [r6, #24]
 800c65e:	68c2      	ldr	r2, [r0, #12]
 800c660:	68cb      	ldr	r3, [r1, #12]
 800c662:	429a      	cmp	r2, r3
 800c664:	f040 814c 	bne.w	800c900 <ai_platform_network_process+0x51c>
 800c668:	6882      	ldr	r2, [r0, #8]
 800c66a:	688b      	ldr	r3, [r1, #8]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	f040 8147 	bne.w	800c900 <ai_platform_network_process+0x51c>
 800c672:	6842      	ldr	r2, [r0, #4]
 800c674:	684b      	ldr	r3, [r1, #4]
 800c676:	429a      	cmp	r2, r3
 800c678:	f040 8142 	bne.w	800c900 <ai_platform_network_process+0x51c>
 800c67c:	69a3      	ldr	r3, [r4, #24]
 800c67e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c682:	f002 fa75 	bl	800eb70 <ai_array_get_data_byte_size>
 800c686:	9001      	str	r0, [sp, #4]
 800c688:	4620      	mov	r0, r4
 800c68a:	f002 f9c7 	bl	800ea1c <get_tensor_byte_size>
 800c68e:	9b01      	ldr	r3, [sp, #4]
 800c690:	4283      	cmp	r3, r0
 800c692:	f0c0 8135 	bcc.w	800c900 <ai_platform_network_process+0x51c>
 800c696:	69a3      	ldr	r3, [r4, #24]
 800c698:	6818      	ldr	r0, [r3, #0]
 800c69a:	f002 f9d5 	bl	800ea48 <ai_array_to_buffer_fmt>
 800c69e:	6833      	ldr	r3, [r6, #0]
 800c6a0:	4058      	eors	r0, r3
 800c6a2:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800c6a6:	f040 815c 	bne.w	800c962 <ai_platform_network_process+0x57e>
 800c6aa:	6873      	ldr	r3, [r6, #4]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 8150 	beq.w	800c952 <ai_platform_network_process+0x56e>
 800c6b2:	69b3      	ldr	r3, [r6, #24]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f000 815b 	beq.w	800c972 <ai_platform_network_process+0x58e>
 800c6bc:	9a02      	ldr	r2, [sp, #8]
 800c6be:	4620      	mov	r0, r4
 800c6c0:	3701      	adds	r7, #1
 800c6c2:	361c      	adds	r6, #28
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	bf38      	it	cc
 800c6c8:	461a      	movcc	r2, r3
 800c6ca:	9202      	str	r2, [sp, #8]
 800c6cc:	f002 f9a6 	bl	800ea1c <get_tensor_byte_size>
 800c6d0:	f8ca 0008 	str.w	r0, [sl, #8]
 800c6d4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	fb00 f303 	mul.w	r3, r0, r3
 800c6de:	f8ca 300c 	str.w	r3, [sl, #12]
 800c6e2:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800c6e6:	440b      	add	r3, r1
 800c6e8:	f8ca 1004 	str.w	r1, [sl, #4]
 800c6ec:	f848 300b 	str.w	r3, [r8, fp]
 800c6f0:	69a0      	ldr	r0, [r4, #24]
 800c6f2:	6803      	ldr	r3, [r0, #0]
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	d464      	bmi.n	800c7c2 <ai_platform_network_process+0x3de>
 800c6f8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c6fc:	1a9b      	subs	r3, r3, r2
 800c6fe:	4419      	add	r1, r3
 800c700:	6081      	str	r1, [r0, #8]
 800c702:	69a3      	ldr	r3, [r4, #24]
 800c704:	f8da 2004 	ldr.w	r2, [sl, #4]
 800c708:	60da      	str	r2, [r3, #12]
 800c70a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c70e:	429f      	cmp	r7, r3
 800c710:	d384      	bcc.n	800c61c <ai_platform_network_process+0x238>
 800c712:	e05b      	b.n	800c7cc <ai_platform_network_process+0x3e8>
 800c714:	e7fe      	b.n	800c714 <ai_platform_network_process+0x330>
 800c716:	68ea      	ldr	r2, [r5, #12]
 800c718:	616b      	str	r3, [r5, #20]
 800c71a:	f002 0203 	and.w	r2, r2, #3
 800c71e:	2a03      	cmp	r2, #3
 800c720:	d039      	beq.n	800c796 <ai_platform_network_process+0x3b2>
 800c722:	2230      	movs	r2, #48	; 0x30
 800c724:	2111      	movs	r1, #17
 800c726:	f105 0010 	add.w	r0, r5, #16
 800c72a:	2400      	movs	r4, #0
 800c72c:	f000 f940 	bl	800c9b0 <core_set_error>
 800c730:	4620      	mov	r0, r4
 800c732:	b005      	add	sp, #20
 800c734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c738:	4a0c      	ldr	r2, [pc, #48]	; (800c76c <ai_platform_network_process+0x388>)
 800c73a:	2301      	movs	r3, #1
 800c73c:	6093      	str	r3, [r2, #8]
 800c73e:	6893      	ldr	r3, [r2, #8]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1fc      	bne.n	800c73e <ai_platform_network_process+0x35a>
 800c744:	4b07      	ldr	r3, [pc, #28]	; (800c764 <ai_platform_network_process+0x380>)
 800c746:	6013      	str	r3, [r2, #0]
 800c748:	4b07      	ldr	r3, [pc, #28]	; (800c768 <ai_platform_network_process+0x384>)
 800c74a:	6812      	ldr	r2, [r2, #0]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	f43f aeb6 	beq.w	800c4be <ai_platform_network_process+0xda>
 800c752:	e7fe      	b.n	800c752 <ai_platform_network_process+0x36e>
 800c754:	f8b8 3000 	ldrh.w	r3, [r8]
 800c758:	429f      	cmp	r7, r3
 800c75a:	f4ff aed6 	bcc.w	800c50a <ai_platform_network_process+0x126>
 800c75e:	e74b      	b.n	800c5f8 <ai_platform_network_process+0x214>
 800c760:	58024000 	.word	0x58024000
 800c764:	f407a5c2 	.word	0xf407a5c2
 800c768:	b5e8b5cd 	.word	0xb5e8b5cd
 800c76c:	40023000 	.word	0x40023000
 800c770:	4a88      	ldr	r2, [pc, #544]	; (800c994 <ai_platform_network_process+0x5b0>)
 800c772:	2301      	movs	r3, #1
 800c774:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c778:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1fb      	bne.n	800c778 <ai_platform_network_process+0x394>
 800c780:	4b85      	ldr	r3, [pc, #532]	; (800c998 <ai_platform_network_process+0x5b4>)
 800c782:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c786:	4b85      	ldr	r3, [pc, #532]	; (800c99c <ai_platform_network_process+0x5b8>)
 800c788:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c78c:	429a      	cmp	r2, r3
 800c78e:	f43f ae96 	beq.w	800c4be <ai_platform_network_process+0xda>
 800c792:	e7fe      	b.n	800c792 <ai_platform_network_process+0x3ae>
 800c794:	9d03      	ldr	r5, [sp, #12]
 800c796:	2400      	movs	r4, #0
 800c798:	2217      	movs	r2, #23
 800c79a:	2112      	movs	r1, #18
 800c79c:	f105 0010 	add.w	r0, r5, #16
 800c7a0:	f000 f906 	bl	800c9b0 <core_set_error>
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	b005      	add	sp, #20
 800c7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ac:	462c      	mov	r4, r5
 800c7ae:	e7bf      	b.n	800c730 <ai_platform_network_process+0x34c>
 800c7b0:	9d03      	ldr	r5, [sp, #12]
 800c7b2:	2218      	movs	r2, #24
 800c7b4:	2112      	movs	r1, #18
 800c7b6:	2400      	movs	r4, #0
 800c7b8:	f105 0010 	add.w	r0, r5, #16
 800c7bc:	f000 f8f8 	bl	800c9b0 <core_set_error>
 800c7c0:	e7b6      	b.n	800c730 <ai_platform_network_process+0x34c>
 800c7c2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c7c6:	429f      	cmp	r7, r3
 800c7c8:	f4ff af28 	bcc.w	800c61c <ai_platform_network_process+0x238>
 800c7cc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c7d0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800c7d2:	82ab      	strh	r3, [r5, #20]
 800c7d4:	2a00      	cmp	r2, #0
 800c7d6:	f040 808d 	bne.w	800c8f4 <ai_platform_network_process+0x510>
 800c7da:	4616      	mov	r6, r2
 800c7dc:	4617      	mov	r7, r2
 800c7de:	8aec      	ldrh	r4, [r5, #22]
 800c7e0:	429c      	cmp	r4, r3
 800c7e2:	d2a5      	bcs.n	800c730 <ai_platform_network_process+0x34c>
 800c7e4:	46ab      	mov	fp, r5
 800c7e6:	2e00      	cmp	r6, #0
 800c7e8:	d030      	beq.n	800c84c <ai_platform_network_process+0x468>
 800c7ea:	f04f 0800 	mov.w	r8, #0
 800c7ee:	e014      	b.n	800c81a <ai_platform_network_process+0x436>
 800c7f0:	6882      	ldr	r2, [r0, #8]
 800c7f2:	68c5      	ldr	r5, [r0, #12]
 800c7f4:	6863      	ldr	r3, [r4, #4]
 800c7f6:	1b52      	subs	r2, r2, r5
 800c7f8:	4413      	add	r3, r2
 800c7fa:	6083      	str	r3, [r0, #8]
 800c7fc:	698b      	ldr	r3, [r1, #24]
 800c7fe:	6862      	ldr	r2, [r4, #4]
 800c800:	60da      	str	r2, [r3, #12]
 800c802:	f859 200a 	ldr.w	r2, [r9, sl]
 800c806:	f108 0801 	add.w	r8, r8, #1
 800c80a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800c80e:	440b      	add	r3, r1
 800c810:	4293      	cmp	r3, r2
 800c812:	d301      	bcc.n	800c818 <ai_platform_network_process+0x434>
 800c814:	68e3      	ldr	r3, [r4, #12]
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	6063      	str	r3, [r4, #4]
 800c81a:	8833      	ldrh	r3, [r6, #0]
 800c81c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800c820:	4543      	cmp	r3, r8
 800c822:	d913      	bls.n	800c84c <ai_platform_network_process+0x468>
 800c824:	6873      	ldr	r3, [r6, #4]
 800c826:	b18b      	cbz	r3, 800c84c <ai_platform_network_process+0x468>
 800c828:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800c82c:	b171      	cbz	r1, 800c84c <ai_platform_network_process+0x468>
 800c82e:	6988      	ldr	r0, [r1, #24]
 800c830:	68b2      	ldr	r2, [r6, #8]
 800c832:	6803      	ldr	r3, [r0, #0]
 800c834:	f8d2 9000 	ldr.w	r9, [r2]
 800c838:	009d      	lsls	r5, r3, #2
 800c83a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800c83e:	d5d7      	bpl.n	800c7f0 <ai_platform_network_process+0x40c>
 800c840:	6880      	ldr	r0, [r0, #8]
 800c842:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800c846:	f002 f9cd 	bl	800ebe4 <memcpy>
 800c84a:	e7da      	b.n	800c802 <ai_platform_network_process+0x41e>
 800c84c:	4658      	mov	r0, fp
 800c84e:	f001 ff6f 	bl	800e730 <ai_layers_forward_all>
 800c852:	2f00      	cmp	r7, #0
 800c854:	d03f      	beq.n	800c8d6 <ai_platform_network_process+0x4f2>
 800c856:	2400      	movs	r4, #0
 800c858:	e016      	b.n	800c888 <ai_platform_network_process+0x4a4>
 800c85a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800c85e:	f859 100a 	ldr.w	r1, [r9, sl]
 800c862:	4413      	add	r3, r2
 800c864:	428b      	cmp	r3, r1
 800c866:	d302      	bcc.n	800c86e <ai_platform_network_process+0x48a>
 800c868:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c86c:	1acb      	subs	r3, r1, r3
 800c86e:	f8c8 3004 	str.w	r3, [r8, #4]
 800c872:	6981      	ldr	r1, [r0, #24]
 800c874:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800c878:	1b52      	subs	r2, r2, r5
 800c87a:	4413      	add	r3, r2
 800c87c:	608b      	str	r3, [r1, #8]
 800c87e:	6983      	ldr	r3, [r0, #24]
 800c880:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c884:	60da      	str	r2, [r3, #12]
 800c886:	3401      	adds	r4, #1
 800c888:	883b      	ldrh	r3, [r7, #0]
 800c88a:	42a3      	cmp	r3, r4
 800c88c:	d923      	bls.n	800c8d6 <ai_platform_network_process+0x4f2>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	b30b      	cbz	r3, 800c8d6 <ai_platform_network_process+0x4f2>
 800c892:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c896:	b1f0      	cbz	r0, 800c8d6 <ai_platform_network_process+0x4f2>
 800c898:	68ba      	ldr	r2, [r7, #8]
 800c89a:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800c89e:	6983      	ldr	r3, [r0, #24]
 800c8a0:	f8d2 9000 	ldr.w	r9, [r2]
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800c8aa:	0092      	lsls	r2, r2, #2
 800c8ac:	d5d5      	bpl.n	800c85a <ai_platform_network_process+0x476>
 800c8ae:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800c8b2:	6899      	ldr	r1, [r3, #8]
 800c8b4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c8b8:	f002 f994 	bl	800ebe4 <memcpy>
 800c8bc:	f859 200a 	ldr.w	r2, [r9, sl]
 800c8c0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800c8c4:	440b      	add	r3, r1
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d302      	bcc.n	800c8d0 <ai_platform_network_process+0x4ec>
 800c8ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	f8c8 3004 	str.w	r3, [r8, #4]
 800c8d4:	e7d7      	b.n	800c886 <ai_platform_network_process+0x4a2>
 800c8d6:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800c8da:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800c8de:	3401      	adds	r4, #1
 800c8e0:	b2a4      	uxth	r4, r4
 800c8e2:	42a3      	cmp	r3, r4
 800c8e4:	f8ab 4016 	strh.w	r4, [fp, #22]
 800c8e8:	f63f af7d 	bhi.w	800c7e6 <ai_platform_network_process+0x402>
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	b005      	add	sp, #20
 800c8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f4:	2a01      	cmp	r2, #1
 800c8f6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800c8f8:	d029      	beq.n	800c94e <ai_platform_network_process+0x56a>
 800c8fa:	f106 070c 	add.w	r7, r6, #12
 800c8fe:	e76e      	b.n	800c7de <ai_platform_network_process+0x3fa>
 800c900:	2218      	movs	r2, #24
 800c902:	2113      	movs	r1, #19
 800c904:	f105 0010 	add.w	r0, r5, #16
 800c908:	2400      	movs	r4, #0
 800c90a:	f000 f851 	bl	800c9b0 <core_set_error>
 800c90e:	e70f      	b.n	800c730 <ai_platform_network_process+0x34c>
 800c910:	9d03      	ldr	r5, [sp, #12]
 800c912:	4604      	mov	r4, r0
 800c914:	2217      	movs	r2, #23
 800c916:	2112      	movs	r1, #18
 800c918:	f105 0010 	add.w	r0, r5, #16
 800c91c:	f000 f848 	bl	800c9b0 <core_set_error>
 800c920:	e706      	b.n	800c730 <ai_platform_network_process+0x34c>
 800c922:	9d03      	ldr	r5, [sp, #12]
 800c924:	2219      	movs	r2, #25
 800c926:	2112      	movs	r1, #18
 800c928:	2400      	movs	r4, #0
 800c92a:	f105 0010 	add.w	r0, r5, #16
 800c92e:	f000 f83f 	bl	800c9b0 <core_set_error>
 800c932:	e6fd      	b.n	800c730 <ai_platform_network_process+0x34c>
 800c934:	9d03      	ldr	r5, [sp, #12]
 800c936:	4604      	mov	r4, r0
 800c938:	2221      	movs	r2, #33	; 0x21
 800c93a:	2112      	movs	r1, #18
 800c93c:	f105 0010 	add.w	r0, r5, #16
 800c940:	f000 f836 	bl	800c9b0 <core_set_error>
 800c944:	e6f4      	b.n	800c730 <ai_platform_network_process+0x34c>
 800c946:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c94a:	82ab      	strh	r3, [r5, #20]
 800c94c:	e742      	b.n	800c7d4 <ai_platform_network_process+0x3f0>
 800c94e:	2700      	movs	r7, #0
 800c950:	e745      	b.n	800c7de <ai_platform_network_process+0x3fa>
 800c952:	4604      	mov	r4, r0
 800c954:	2217      	movs	r2, #23
 800c956:	2113      	movs	r1, #19
 800c958:	f105 0010 	add.w	r0, r5, #16
 800c95c:	f000 f828 	bl	800c9b0 <core_set_error>
 800c960:	e6e6      	b.n	800c730 <ai_platform_network_process+0x34c>
 800c962:	2219      	movs	r2, #25
 800c964:	2113      	movs	r1, #19
 800c966:	f105 0010 	add.w	r0, r5, #16
 800c96a:	2400      	movs	r4, #0
 800c96c:	f000 f820 	bl	800c9b0 <core_set_error>
 800c970:	e6de      	b.n	800c730 <ai_platform_network_process+0x34c>
 800c972:	4604      	mov	r4, r0
 800c974:	2221      	movs	r2, #33	; 0x21
 800c976:	2113      	movs	r1, #19
 800c978:	f105 0010 	add.w	r0, r5, #16
 800c97c:	f000 f818 	bl	800c9b0 <core_set_error>
 800c980:	e6d6      	b.n	800c730 <ai_platform_network_process+0x34c>
 800c982:	2217      	movs	r2, #23
 800c984:	2113      	movs	r1, #19
 800c986:	f105 0010 	add.w	r0, r5, #16
 800c98a:	4654      	mov	r4, sl
 800c98c:	f000 f810 	bl	800c9b0 <core_set_error>
 800c990:	e6ce      	b.n	800c730 <ai_platform_network_process+0x34c>
 800c992:	bf00      	nop
 800c994:	58024000 	.word	0x58024000
 800c998:	f407a5c2 	.word	0xf407a5c2
 800c99c:	b5e8b5cd 	.word	0xb5e8b5cd

0800c9a0 <core_init>:
 800c9a0:	2001      	movs	r0, #1
 800c9a2:	4770      	bx	lr

0800c9a4 <core_get_error>:
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	6800      	ldr	r0, [r0, #0]
 800c9aa:	601a      	str	r2, [r3, #0]
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop

0800c9b0 <core_set_error>:
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	7800      	ldrb	r0, [r0, #0]
 800c9b4:	b108      	cbz	r0, 800c9ba <core_set_error+0xa>
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	4770      	bx	lr
 800c9ba:	7019      	strb	r1, [r3, #0]
 800c9bc:	2001      	movs	r0, #1
 800c9be:	6819      	ldr	r1, [r3, #0]
 800c9c0:	f362 211f 	bfi	r1, r2, #8, #24
 800c9c4:	6019      	str	r1, [r3, #0]
 800c9c6:	4770      	bx	lr

0800c9c8 <func_dummy>:
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop

0800c9cc <ai_conv2d_stripe_f32.constprop.0>:
 800c9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d0:	ed2d 8b0e 	vpush	{d8-d14}
 800c9d4:	b09d      	sub	sp, #116	; 0x74
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	f8d7 90ec 	ldr.w	r9, [r7, #236]	; 0xec
 800c9dc:	66f8      	str	r0, [r7, #108]	; 0x6c
 800c9de:	f1b9 0f01 	cmp.w	r9, #1
 800c9e2:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800c9e6:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800c9ea:	f8d7 c0fc 	ldr.w	ip, [r7, #252]	; 0xfc
 800c9ee:	f9b7 e104 	ldrsh.w	lr, [r7, #260]	; 0x104
 800c9f2:	6579      	str	r1, [r7, #84]	; 0x54
 800c9f4:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 800c9f8:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800c9fc:	f9b7 2108 	ldrsh.w	r2, [r7, #264]	; 0x108
 800ca00:	663b      	str	r3, [r7, #96]	; 0x60
 800ca02:	e9d7 303c 	ldrd	r3, r0, [r7, #240]	; 0xf0
 800ca06:	f000 812f 	beq.w	800cc68 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 800ca0a:	45b1      	cmp	r9, r6
 800ca0c:	f000 8278 	beq.w	800cf00 <ai_conv2d_stripe_f32.constprop.0+0x534>
 800ca10:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800ca14:	2900      	cmp	r1, #0
 800ca16:	f000 8114 	beq.w	800cc42 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800ca1a:	eba0 0803 	sub.w	r8, r0, r3
 800ca1e:	1898      	adds	r0, r3, r2
 800ca20:	eddf 6a90 	vldr	s13, [pc, #576]	; 800cc64 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800ca24:	3801      	subs	r0, #1
 800ca26:	fb93 f1f2 	sdiv	r1, r3, r2
 800ca2a:	fb90 f0f2 	sdiv	r0, r0, r2
 800ca2e:	fb02 3111 	mls	r1, r2, r1, r3
 800ca32:	eba2 0a01 	sub.w	sl, r2, r1
 800ca36:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800ca3a:	fb01 f100 	mul.w	r1, r1, r0
 800ca3e:	fb9a f0f2 	sdiv	r0, sl, r2
 800ca42:	fb02 a010 	mls	r0, r2, r0, sl
 800ca46:	62b9      	str	r1, [r7, #40]	; 0x28
 800ca48:	4403      	add	r3, r0
 800ca4a:	eba8 0100 	sub.w	r1, r8, r0
 800ca4e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800ca52:	4463      	add	r3, ip
 800ca54:	4411      	add	r1, r2
 800ca56:	fb00 f303 	mul.w	r3, r0, r3
 800ca5a:	3901      	subs	r1, #1
 800ca5c:	fbb6 f4f9 	udiv	r4, r6, r9
 800ca60:	623b      	str	r3, [r7, #32]
 800ca62:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800ca66:	fb00 f302 	mul.w	r3, r0, r2
 800ca6a:	f8c7 a014 	str.w	sl, [r7, #20]
 800ca6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca70:	fb0e f306 	mul.w	r3, lr, r6
 800ca74:	1b1b      	subs	r3, r3, r4
 800ca76:	fb91 fbf2 	sdiv	fp, r1, r2
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	eba5 020b 	sub.w	r2, r5, fp
 800ca80:	00b1      	lsls	r1, r6, #2
 800ca82:	46dc      	mov	ip, fp
 800ca84:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca8a:	61f9      	str	r1, [r7, #28]
 800ca8c:	fb04 f303 	mul.w	r3, r4, r3
 800ca90:	fb02 f303 	mul.w	r3, r2, r3
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	627b      	str	r3, [r7, #36]	; 0x24
 800ca98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ca9c:	fbb3 f3f9 	udiv	r3, r3, r9
 800caa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800caa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	633b      	str	r3, [r7, #48]	; 0x30
 800caaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800caae:	f1c3 0800 	rsb	r8, r3, #0
 800cab2:	ebae 0303 	sub.w	r3, lr, r3
 800cab6:	65bb      	str	r3, [r7, #88]	; 0x58
 800cab8:	2300      	movs	r3, #0
 800caba:	653b      	str	r3, [r7, #80]	; 0x50
 800cabc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	f2c0 80c4 	blt.w	800cc4e <ai_conv2d_stripe_f32.constprop.0+0x282>
 800cac6:	2000      	movs	r0, #0
 800cac8:	4673      	mov	r3, lr
 800caca:	4672      	mov	r2, lr
 800cacc:	4601      	mov	r1, r0
 800cace:	3b01      	subs	r3, #1
 800cad0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800cad2:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 800cad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cada:	fb93 f3fe 	sdiv	r3, r3, lr
 800cade:	4423      	add	r3, r4
 800cae0:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800cae2:	fb0a 4303 	mla	r3, sl, r3, r4
 800cae6:	fb92 f4fe 	sdiv	r4, r2, lr
 800caea:	fb0e 2214 	mls	r2, lr, r4, r2
 800caee:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800caf2:	4444      	add	r4, r8
 800caf4:	42ac      	cmp	r4, r5
 800caf6:	bf94      	ite	ls
 800caf8:	ebc1 0104 	rsbls	r1, r1, r4
 800cafc:	ebc1 0105 	rsbhi	r1, r1, r5
 800cb00:	6a3c      	ldr	r4, [r7, #32]
 800cb02:	1a89      	subs	r1, r1, r2
 800cb04:	4471      	add	r1, lr
 800cb06:	3901      	subs	r1, #1
 800cb08:	fb91 f6fe 	sdiv	r6, r1, lr
 800cb0c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800cb10:	4421      	add	r1, r4
 800cb12:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800cb14:	4401      	add	r1, r0
 800cb16:	69f8      	ldr	r0, [r7, #28]
 800cb18:	4411      	add	r1, r2
 800cb1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb1c:	fb00 2201 	mla	r2, r0, r1, r2
 800cb20:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cb22:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cb24:	460a      	mov	r2, r1
 800cb26:	2900      	cmp	r1, #0
 800cb28:	bf08      	it	eq
 800cb2a:	4622      	moveq	r2, r4
 800cb2c:	42a2      	cmp	r2, r4
 800cb2e:	637a      	str	r2, [r7, #52]	; 0x34
 800cb30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb32:	fe06 7a87 	vseleq.f32	s14, s13, s14
 800cb36:	fb0e 2116 	mls	r1, lr, r6, r2
 800cb3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cb3e:	1b92      	subs	r2, r2, r6
 800cb40:	f1b9 0f00 	cmp.w	r9, #0
 800cb44:	d066      	beq.n	800cc14 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800cb46:	fb0a f202 	mul.w	r2, sl, r2
 800cb4a:	fb00 f101 	mul.w	r1, r0, r1
 800cb4e:	643a      	str	r2, [r7, #64]	; 0x40
 800cb50:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800cb54:	6479      	str	r1, [r7, #68]	; 0x44
 800cb56:	4591      	cmp	r9, r2
 800cb58:	d85c      	bhi.n	800cc14 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800cb5a:	2500      	movs	r5, #0
 800cb5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb5e:	46ab      	mov	fp, r5
 800cb60:	3a01      	subs	r2, #1
 800cb62:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800cb66:	61ba      	str	r2, [r7, #24]
 800cb68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb6a:	f04f 0800 	mov.w	r8, #0
 800cb6e:	f8c7 b008 	str.w	fp, [r7, #8]
 800cb72:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800cb76:	63ba      	str	r2, [r7, #56]	; 0x38
 800cb78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cb7a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800cb7e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cb80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb82:	f1bc 0f00 	cmp.w	ip, #0
 800cb86:	ecf2 7a01 	vldmia	r2!, {s15}
 800cb8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cb8e:	63ba      	str	r2, [r7, #56]	; 0x38
 800cb90:	dd21      	ble.n	800cbd6 <ai_conv2d_stripe_f32.constprop.0+0x20a>
 800cb92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb94:	2100      	movs	r1, #0
 800cb96:	2e00      	cmp	r6, #0
 800cb98:	dd16      	ble.n	800cbc8 <ai_conv2d_stripe_f32.constprop.0+0x1fc>
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	eb02 040a 	add.w	r4, r2, sl
 800cba0:	4294      	cmp	r4, r2
 800cba2:	d90c      	bls.n	800cbbe <ai_conv2d_stripe_f32.constprop.0+0x1f2>
 800cba4:	4696      	mov	lr, r2
 800cba6:	469b      	mov	fp, r3
 800cba8:	ecbe 6a01 	vldmia	lr!, {s12}
 800cbac:	ecfb 5a01 	vldmia	fp!, {s11}
 800cbb0:	4574      	cmp	r4, lr
 800cbb2:	eee5 7a86 	vfma.f32	s15, s11, s12
 800cbb6:	d8f7      	bhi.n	800cba8 <ai_conv2d_stripe_f32.constprop.0+0x1dc>
 800cbb8:	697c      	ldr	r4, [r7, #20]
 800cbba:	4423      	add	r3, r4
 800cbbc:	4422      	add	r2, r4
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800cbc2:	4286      	cmp	r6, r0
 800cbc4:	4422      	add	r2, r4
 800cbc6:	d1e9      	bne.n	800cb9c <ai_conv2d_stripe_f32.constprop.0+0x1d0>
 800cbc8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cbca:	3101      	adds	r1, #1
 800cbcc:	4402      	add	r2, r0
 800cbce:	458c      	cmp	ip, r1
 800cbd0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cbd2:	4403      	add	r3, r0
 800cbd4:	d1df      	bne.n	800cb96 <ai_conv2d_stripe_f32.constprop.0+0x1ca>
 800cbd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cbd8:	f108 0801 	add.w	r8, r8, #1
 800cbdc:	ece2 7a01 	vstmia	r2!, {s15}
 800cbe0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cbe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbe4:	4413      	add	r3, r2
 800cbe6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cbe8:	4542      	cmp	r2, r8
 800cbea:	d8c9      	bhi.n	800cb80 <ai_conv2d_stripe_f32.constprop.0+0x1b4>
 800cbec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cbee:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800cbf2:	4452      	add	r2, sl
 800cbf4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800cbf8:	f10b 0b01 	add.w	fp, fp, #1
 800cbfc:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cbfe:	69ba      	ldr	r2, [r7, #24]
 800cc00:	4589      	cmp	r9, r1
 800cc02:	bf88      	it	hi
 800cc04:	2200      	movhi	r2, #0
 800cc06:	45d9      	cmp	r9, fp
 800cc08:	f102 0201 	add.w	r2, r2, #1
 800cc0c:	4415      	add	r5, r2
 800cc0e:	d1ab      	bne.n	800cb68 <ai_conv2d_stripe_f32.constprop.0+0x19c>
 800cc10:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 800cc14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc1a:	440a      	add	r2, r1
 800cc1c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800cc20:	3301      	adds	r3, #1
 800cc22:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cc24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc26:	653b      	str	r3, [r7, #80]	; 0x50
 800cc28:	4411      	add	r1, r2
 800cc2a:	eba8 0802 	sub.w	r8, r8, r2
 800cc2e:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800cc32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc34:	1a8a      	subs	r2, r1, r2
 800cc36:	65ba      	str	r2, [r7, #88]	; 0x58
 800cc38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	f47f af3d 	bne.w	800cabc <ai_conv2d_stripe_f32.constprop.0+0xf0>
 800cc42:	3774      	adds	r7, #116	; 0x74
 800cc44:	46bd      	mov	sp, r7
 800cc46:	ecbd 8b0e 	vpop	{d8-d14}
 800cc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4e:	fb98 f2fe 	sdiv	r2, r8, lr
 800cc52:	fb0e 8212 	mls	r2, lr, r2, r8
 800cc56:	4641      	mov	r1, r8
 800cc58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc5a:	4640      	mov	r0, r8
 800cc5c:	ebae 0202 	sub.w	r2, lr, r2
 800cc60:	e735      	b.n	800cace <ai_conv2d_stripe_f32.constprop.0+0x102>
 800cc62:	bf00      	nop
 800cc64:	00000000 	.word	0x00000000
 800cc68:	fb0e f102 	mul.w	r1, lr, r2
 800cc6c:	2901      	cmp	r1, #1
 800cc6e:	f47f aecf 	bne.w	800ca10 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800cc72:	1ac2      	subs	r2, r0, r3
 800cc74:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800cc78:	00b0      	lsls	r0, r6, #2
 800cc7a:	eb0c 0103 	add.w	r1, ip, r3
 800cc7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cc80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc82:	63b8      	str	r0, [r7, #56]	; 0x38
 800cc84:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800cc88:	fb00 f004 	mul.w	r0, r0, r4
 800cc8c:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800cc8e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800cc92:	fb00 4101 	mla	r1, r0, r1, r4
 800cc96:	65b9      	str	r1, [r7, #88]	; 0x58
 800cc98:	f080 8263 	bcs.w	800d162 <ai_conv2d_stripe_f32.constprop.0+0x796>
 800cc9c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800cca0:	2a00      	cmp	r2, #0
 800cca2:	d0ce      	beq.n	800cc42 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800cca4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cca8:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800ccac:	fb05 f202 	mul.w	r2, r5, r2
 800ccb0:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 800cc64 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800ccb4:	fb00 f303 	mul.w	r3, r0, r3
 800ccb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccba:	fb06 f302 	mul.w	r3, r6, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	643b      	str	r3, [r7, #64]	; 0x40
 800ccc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ccc4:	fb03 f306 	mul.w	r3, r3, r6
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	627b      	str	r3, [r7, #36]	; 0x24
 800cccc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ccd0:	fb03 f306 	mul.w	r3, r3, r6
 800ccd4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ccd8:	62bb      	str	r3, [r7, #40]	; 0x28
 800ccda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cce6:	2300      	movs	r3, #0
 800cce8:	653b      	str	r3, [r7, #80]	; 0x50
 800ccea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f000 8104 	beq.w	800cefa <ai_conv2d_stripe_f32.constprop.0+0x52e>
 800ccf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccf4:	ecf3 6a01 	vldmia	r3!, {s13}
 800ccf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f000 80e8 	beq.w	800ced4 <ai_conv2d_stripe_f32.constprop.0+0x508>
 800cd04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd08:	f04f 0b00 	mov.w	fp, #0
 800cd0c:	f8d7 90f8 	ldr.w	r9, [r7, #248]	; 0xf8
 800cd10:	425d      	negs	r5, r3
 800cd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd14:	657b      	str	r3, [r7, #84]	; 0x54
 800cd16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd18:	647b      	str	r3, [r7, #68]	; 0x44
 800cd1a:	f1b9 0f00 	cmp.w	r9, #0
 800cd1e:	f2c0 8219 	blt.w	800d154 <ai_conv2d_stripe_f32.constprop.0+0x788>
 800cd22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd24:	2300      	movs	r3, #0
 800cd26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd28:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cd2a:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800cd2c:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800cd30:	fb02 0c06 	mla	ip, r2, r6, r0
 800cd34:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800cd38:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cd3c:	4428      	add	r0, r5
 800cd3e:	42a0      	cmp	r0, r4
 800cd40:	bf94      	ite	ls
 800cd42:	ebc3 0300 	rsbls	r3, r3, r0
 800cd46:	ebc3 0304 	rsbhi	r3, r3, r4
 800cd4a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800cd4e:	1ac4      	subs	r4, r0, r3
 800cd50:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800cd54:	1ac0      	subs	r0, r0, r3
 800cd56:	fb02 f303 	mul.w	r3, r2, r3
 800cd5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd5c:	2a00      	cmp	r2, #0
 800cd5e:	f340 81f6 	ble.w	800d14e <ai_conv2d_stripe_f32.constprop.0+0x782>
 800cd62:	fb06 f204 	mul.w	r2, r6, r4
 800cd66:	f023 040f 	bic.w	r4, r3, #15
 800cd6a:	eeb0 7a66 	vmov.f32	s14, s13
 800cd6e:	637a      	str	r2, [r7, #52]	; 0x34
 800cd70:	fb06 f200 	mul.w	r2, r6, r0
 800cd74:	1e60      	subs	r0, r4, #1
 800cd76:	2600      	movs	r6, #0
 800cd78:	0900      	lsrs	r0, r0, #4
 800cd7a:	633a      	str	r2, [r7, #48]	; 0x30
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	0102      	lsls	r2, r0, #4
 800cd80:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800cd84:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cd86:	4662      	mov	r2, ip
 800cd88:	2c00      	cmp	r4, #0
 800cd8a:	f340 81e8 	ble.w	800d15e <ai_conv2d_stripe_f32.constprop.0+0x792>
 800cd8e:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800cd92:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800cd96:	f04f 0800 	mov.w	r8, #0
 800cd9a:	ed50 5a0f 	vldr	s11, [r0, #-60]	; 0xffffffc4
 800cd9e:	f108 0810 	add.w	r8, r8, #16
 800cda2:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800cda6:	3040      	adds	r0, #64	; 0x40
 800cda8:	ed5c 3a10 	vldr	s7, [ip, #-64]	; 0xffffffc0
 800cdac:	45a0      	cmp	r8, r4
 800cdae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cdb2:	ed10 4a20 	vldr	s8, [r0, #-128]	; 0xffffff80
 800cdb6:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 800cdba:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800cdbe:	ed10 5a1e 	vldr	s10, [r0, #-120]	; 0xffffff88
 800cdc2:	eee3 7a84 	vfma.f32	s15, s7, s8
 800cdc6:	ed50 5a1d 	vldr	s11, [r0, #-116]	; 0xffffff8c
 800cdca:	ed1c ea1d 	vldr	s28, [ip, #-116]	; 0xffffff8c
 800cdce:	ed5c da1c 	vldr	s27, [ip, #-112]	; 0xffffff90
 800cdd2:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800cdd6:	ed5c ca1b 	vldr	s25, [ip, #-108]	; 0xffffff94
 800cdda:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800cdde:	eee4 7a85 	vfma.f32	s15, s9, s10
 800cde2:	ed5c ba1a 	vldr	s23, [ip, #-104]	; 0xffffff98
 800cde6:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800cdea:	ed5c aa19 	vldr	s21, [ip, #-100]	; 0xffffff9c
 800cdee:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800cdf2:	ed5c 9a18 	vldr	s19, [ip, #-96]	; 0xffffffa0
 800cdf6:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800cdfa:	eeee 7a25 	vfma.f32	s15, s28, s11
 800cdfe:	ed5c 8a17 	vldr	s17, [ip, #-92]	; 0xffffffa4
 800ce02:	ed10 8a17 	vldr	s16, [r0, #-92]	; 0xffffffa4
 800ce06:	ed1c 0a16 	vldr	s0, [ip, #-88]	; 0xffffffa8
 800ce0a:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800ce0e:	ed1c 1a15 	vldr	s2, [ip, #-84]	; 0xffffffac
 800ce12:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 800ce16:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800ce1a:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 800ce1e:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 800ce22:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 800ce26:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800ce2a:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 800ce2e:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 800ce32:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800ce36:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 800ce3a:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 800ce3e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ce42:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ce46:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ce4a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800ce4e:	eee0 7a20 	vfma.f32	s15, s0, s1
 800ce52:	eee1 7a21 	vfma.f32	s15, s2, s3
 800ce56:	eee2 7a22 	vfma.f32	s15, s4, s5
 800ce5a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ce5e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ce62:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ce66:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ce6a:	db96      	blt.n	800cd9a <ai_conv2d_stripe_f32.constprop.0+0x3ce>
 800ce6c:	4471      	add	r1, lr
 800ce6e:	4472      	add	r2, lr
 800ce70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ce72:	4283      	cmp	r3, r0
 800ce74:	dd11      	ble.n	800ce9a <ai_conv2d_stripe_f32.constprop.0+0x4ce>
 800ce76:	4684      	mov	ip, r0
 800ce78:	468a      	mov	sl, r1
 800ce7a:	4690      	mov	r8, r2
 800ce7c:	f10c 0c01 	add.w	ip, ip, #1
 800ce80:	ecf8 5a01 	vldmia	r8!, {s11}
 800ce84:	ecfa 7a01 	vldmia	sl!, {s15}
 800ce88:	4563      	cmp	r3, ip
 800ce8a:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ce8e:	d1f5      	bne.n	800ce7c <ai_conv2d_stripe_f32.constprop.0+0x4b0>
 800ce90:	1a18      	subs	r0, r3, r0
 800ce92:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ce96:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ce9a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ce9c:	3601      	adds	r6, #1
 800ce9e:	4401      	add	r1, r0
 800cea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cea2:	4402      	add	r2, r0
 800cea4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cea6:	42b0      	cmp	r0, r6
 800cea8:	f47f af6e 	bne.w	800cd88 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 800ceac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceae:	f10b 0b01 	add.w	fp, fp, #1
 800ceb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ceb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ceb6:	ed83 7a00 	vstr	s14, [r3]
 800ceba:	440b      	add	r3, r1
 800cebc:	4491      	add	r9, r2
 800cebe:	1aad      	subs	r5, r5, r2
 800cec0:	647b      	str	r3, [r7, #68]	; 0x44
 800cec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cec6:	4413      	add	r3, r2
 800cec8:	657b      	str	r3, [r7, #84]	; 0x54
 800ceca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cece:	455b      	cmp	r3, fp
 800ced0:	f47f af23 	bne.w	800cd1a <ai_conv2d_stripe_f32.constprop.0+0x34e>
 800ced4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ced6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ced8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceda:	440a      	add	r2, r1
 800cedc:	3301      	adds	r3, #1
 800cede:	66ba      	str	r2, [r7, #104]	; 0x68
 800cee0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cee2:	653b      	str	r3, [r7, #80]	; 0x50
 800cee4:	3204      	adds	r2, #4
 800cee6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cee8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ceec:	429a      	cmp	r2, r3
 800ceee:	f43f aea8 	beq.w	800cc42 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800cef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f47f aefc 	bne.w	800ccf2 <ai_conv2d_stripe_f32.constprop.0+0x326>
 800cefa:	eef0 6a46 	vmov.f32	s13, s12
 800cefe:	e6fc      	b.n	800ccfa <ai_conv2d_stripe_f32.constprop.0+0x32e>
 800cf00:	fb0e f102 	mul.w	r1, lr, r2
 800cf04:	2901      	cmp	r1, #1
 800cf06:	f47f ad83 	bne.w	800ca10 <ai_conv2d_stripe_f32.constprop.0+0x44>
 800cf0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf0e:	2a00      	cmp	r2, #0
 800cf10:	f43f ae97 	beq.w	800cc42 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800cf14:	eb0c 0203 	add.w	r2, ip, r3
 800cf18:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800cf1c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800cf20:	ed5f 3ab0 	vldr	s7, [pc, #-704]	; 800cc64 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800cf24:	fb01 f202 	mul.w	r2, r1, r2
 800cf28:	1ac1      	subs	r1, r0, r3
 800cf2a:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800cf2e:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800cf32:	61fa      	str	r2, [r7, #28]
 800cf34:	1a1a      	subs	r2, r3, r0
 800cf36:	64f9      	str	r1, [r7, #76]	; 0x4c
 800cf38:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 800cf3c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800cf40:	442a      	add	r2, r5
 800cf42:	fb03 f301 	mul.w	r3, r3, r1
 800cf46:	fb01 f202 	mul.w	r2, r1, r2
 800cf4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf4c:	0093      	lsls	r3, r2, #2
 800cf4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf54:	fbb3 f3f6 	udiv	r3, r3, r6
 800cf58:	61bb      	str	r3, [r7, #24]
 800cf5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cf66:	f1c3 0b00 	rsb	fp, r3, #0
 800cf6a:	00f3      	lsls	r3, r6, #3
 800cf6c:	623b      	str	r3, [r7, #32]
 800cf6e:	2300      	movs	r3, #0
 800cf70:	653b      	str	r3, [r7, #80]	; 0x50
 800cf72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	f2c0 80e3 	blt.w	800d142 <ai_conv2d_stripe_f32.constprop.0+0x776>
 800cf7c:	2500      	movs	r5, #0
 800cf7e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cf80:	462b      	mov	r3, r5
 800cf82:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800cf86:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800cf8a:	445a      	add	r2, fp
 800cf8c:	69fc      	ldr	r4, [r7, #28]
 800cf8e:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800cf90:	4282      	cmp	r2, r0
 800cf92:	bf28      	it	cs
 800cf94:	4602      	movcs	r2, r0
 800cf96:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800cf9a:	1ad2      	subs	r2, r2, r3
 800cf9c:	1904      	adds	r4, r0, r4
 800cf9e:	2e00      	cmp	r6, #0
 800cfa0:	f000 8228 	beq.w	800d3f4 <ai_conv2d_stripe_f32.constprop.0+0xa28>
 800cfa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfa6:	647e      	str	r6, [r7, #68]	; 0x44
 800cfa8:	429e      	cmp	r6, r3
 800cfaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cfb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cfb4:	fe03 3aa2 	vseleq.f32	s6, s7, s5
 800cfb8:	1a98      	subs	r0, r3, r2
 800cfba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cfbe:	fb03 f000 	mul.w	r0, r3, r0
 800cfc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfc6:	1a9b      	subs	r3, r3, r2
 800cfc8:	442c      	add	r4, r5
 800cfca:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800cfcc:	fb08 5e04 	mla	lr, r8, r4, r5
 800cfd0:	eb0e 0408 	add.w	r4, lr, r8
 800cfd4:	45a6      	cmp	lr, r4
 800cfd6:	62bc      	str	r4, [r7, #40]	; 0x28
 800cfd8:	f080 809a 	bcs.w	800d110 <ai_conv2d_stripe_f32.constprop.0+0x744>
 800cfdc:	0080      	lsls	r0, r0, #2
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	6378      	str	r0, [r7, #52]	; 0x34
 800cfe2:	633b      	str	r3, [r7, #48]	; 0x30
 800cfe4:	f022 0303 	bic.w	r3, r2, #3
 800cfe8:	e9d7 0434 	ldrd	r0, r4, [r7, #208]	; 0xd0
 800cfec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cfee:	42a0      	cmp	r0, r4
 800cff0:	f200 808e 	bhi.w	800d110 <ai_conv2d_stripe_f32.constprop.0+0x744>
 800cff4:	1e58      	subs	r0, r3, #1
 800cff6:	f04f 0900 	mov.w	r9, #0
 800cffa:	0880      	lsrs	r0, r0, #2
 800cffc:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	fb00 a00a 	mla	r0, r0, sl, sl
 800d006:	6138      	str	r0, [r7, #16]
 800d008:	0118      	lsls	r0, r3, #4
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	6178      	str	r0, [r7, #20]
 800d00e:	e9c7 b302 	strd	fp, r3, [r7, #8]
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d016:	4499      	add	r9, r3
 800d018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d01a:	181c      	adds	r4, r3, r0
 800d01c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d020:	65bc      	str	r4, [r7, #88]	; 0x58
 800d022:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800d024:	627b      	str	r3, [r7, #36]	; 0x24
 800d026:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d02a:	1820      	adds	r0, r4, r0
 800d02c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d02e:	6438      	str	r0, [r7, #64]	; 0x40
 800d030:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d032:	ecb3 7a01 	vldmia	r3!, {s14}
 800d036:	65bb      	str	r3, [r7, #88]	; 0x58
 800d038:	ee27 7a03 	vmul.f32	s14, s14, s6
 800d03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d03e:	2b00      	cmp	r3, #0
 800d040:	dd55      	ble.n	800d0ee <ai_conv2d_stripe_f32.constprop.0+0x722>
 800d042:	4675      	mov	r5, lr
 800d044:	f04f 0b00 	mov.w	fp, #0
 800d048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f340 81d0 	ble.w	800d3f0 <ai_conv2d_stripe_f32.constprop.0+0xa24>
 800d050:	6a38      	ldr	r0, [r7, #32]
 800d052:	f101 0310 	add.w	r3, r1, #16
 800d056:	2600      	movs	r6, #0
 800d058:	607a      	str	r2, [r7, #4]
 800d05a:	182c      	adds	r4, r5, r0
 800d05c:	4628      	mov	r0, r5
 800d05e:	eb00 0c08 	add.w	ip, r0, r8
 800d062:	ed13 4a03 	vldr	s8, [r3, #-12]
 800d066:	ed53 4a04 	vldr	s9, [r3, #-16]
 800d06a:	3604      	adds	r6, #4
 800d06c:	eddc 7a00 	vldr	s15, [ip]
 800d070:	eb04 0c08 	add.w	ip, r4, r8
 800d074:	ed90 5a00 	vldr	s10, [r0]
 800d078:	3310      	adds	r3, #16
 800d07a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800d07e:	edd4 6a00 	vldr	s13, [r4]
 800d082:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 800d086:	4450      	add	r0, sl
 800d088:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800d08c:	4454      	add	r4, sl
 800d08e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d092:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d094:	4296      	cmp	r6, r2
 800d096:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800d09a:	eddc 6a00 	vldr	s13, [ip]
 800d09e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d0a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d0a6:	dbda      	blt.n	800d05e <ai_conv2d_stripe_f32.constprop.0+0x692>
 800d0a8:	693b      	ldr	r3, [r7, #16]
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	441d      	add	r5, r3
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	68fc      	ldr	r4, [r7, #12]
 800d0b2:	4419      	add	r1, r3
 800d0b4:	42a2      	cmp	r2, r4
 800d0b6:	dd11      	ble.n	800d0dc <ai_conv2d_stripe_f32.constprop.0+0x710>
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	462b      	mov	r3, r5
 800d0bc:	460e      	mov	r6, r1
 800d0be:	3001      	adds	r0, #1
 800d0c0:	edd3 7a00 	vldr	s15, [r3]
 800d0c4:	ecf6 6a01 	vldmia	r6!, {s13}
 800d0c8:	4443      	add	r3, r8
 800d0ca:	4290      	cmp	r0, r2
 800d0cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d0d0:	d1f5      	bne.n	800d0be <ai_conv2d_stripe_f32.constprop.0+0x6f2>
 800d0d2:	1b14      	subs	r4, r2, r4
 800d0d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d0d8:	fb04 5508 	mla	r5, r4, r8, r5
 800d0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0de:	f10b 0b01 	add.w	fp, fp, #1
 800d0e2:	441d      	add	r5, r3
 800d0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e6:	4419      	add	r1, r3
 800d0e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0ea:	459b      	cmp	fp, r3
 800d0ec:	d1ac      	bne.n	800d048 <ai_conv2d_stripe_f32.constprop.0+0x67c>
 800d0ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d0f2:	eca3 7a01 	vstmia	r3!, {s14}
 800d0f6:	643b      	str	r3, [r7, #64]	; 0x40
 800d0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fa:	4419      	add	r1, r3
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fe:	4283      	cmp	r3, r0
 800d100:	d196      	bne.n	800d030 <ai_conv2d_stripe_f32.constprop.0+0x664>
 800d102:	f10e 0e04 	add.w	lr, lr, #4
 800d106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d108:	459e      	cmp	lr, r3
 800d10a:	d382      	bcc.n	800d012 <ai_conv2d_stripe_f32.constprop.0+0x646>
 800d10c:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800d110:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d116:	440a      	add	r2, r1
 800d118:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d11a:	3301      	adds	r3, #1
 800d11c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d11e:	ebab 0b01 	sub.w	fp, fp, r1
 800d122:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800d126:	653b      	str	r3, [r7, #80]	; 0x50
 800d128:	440a      	add	r2, r1
 800d12a:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800d12e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d132:	429a      	cmp	r2, r3
 800d134:	f43f ad85 	beq.w	800cc42 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800d138:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f6bf af1d 	bge.w	800cf7c <ai_conv2d_stripe_f32.constprop.0+0x5b0>
 800d142:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d144:	465b      	mov	r3, fp
 800d146:	465d      	mov	r5, fp
 800d148:	eb02 010b 	add.w	r1, r2, fp
 800d14c:	e719      	b.n	800cf82 <ai_conv2d_stripe_f32.constprop.0+0x5b6>
 800d14e:	eeb0 7a66 	vmov.f32	s14, s13
 800d152:	e6ab      	b.n	800ceac <ai_conv2d_stripe_f32.constprop.0+0x4e0>
 800d154:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d156:	462b      	mov	r3, r5
 800d158:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d15a:	442a      	add	r2, r5
 800d15c:	e5e4      	b.n	800cd28 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 800d15e:	2000      	movs	r0, #0
 800d160:	e687      	b.n	800ce72 <ai_conv2d_stripe_f32.constprop.0+0x4a6>
 800d162:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d166:	4669      	mov	r1, sp
 800d168:	fb05 f202 	mul.w	r2, r5, r2
 800d16c:	ee0e 1a90 	vmov	s29, r1
 800d170:	fb06 f202 	mul.w	r2, r6, r2
 800d174:	0095      	lsls	r5, r2, #2
 800d176:	637a      	str	r2, [r7, #52]	; 0x34
 800d178:	1dea      	adds	r2, r5, #7
 800d17a:	f022 0207 	bic.w	r2, r2, #7
 800d17e:	ebad 0d02 	sub.w	sp, sp, r2
 800d182:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d186:	46e9      	mov	r9, sp
 800d188:	2a00      	cmp	r2, #0
 800d18a:	f000 812d 	beq.w	800d3e8 <ai_conv2d_stripe_f32.constprop.0+0xa1c>
 800d18e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d192:	46ca      	mov	sl, r9
 800d194:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 800d434 <ai_conv2d_stripe_f32.constprop.0+0xa68>
 800d198:	46a9      	mov	r9, r5
 800d19a:	fb02 f303 	mul.w	r3, r2, r3
 800d19e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1a0:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800d1a4:	647b      	str	r3, [r7, #68]	; 0x44
 800d1a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1a8:	fb03 f306 	mul.w	r3, r3, r6
 800d1ac:	009b      	lsls	r3, r3, #2
 800d1ae:	623b      	str	r3, [r7, #32]
 800d1b0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d1b4:	fb03 f306 	mul.w	r3, r3, r6
 800d1b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d1bc:	627b      	str	r3, [r7, #36]	; 0x24
 800d1be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d0:	b123      	cbz	r3, 800d1dc <ai_conv2d_stripe_f32.constprop.0+0x810>
 800d1d2:	464a      	mov	r2, r9
 800d1d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d1d6:	4650      	mov	r0, sl
 800d1d8:	f001 fd04 	bl	800ebe4 <memcpy>
 800d1dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f000 811c 	beq.w	800d41c <ai_conv2d_stripe_f32.constprop.0+0xa50>
 800d1e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1e6:	ecf3 6a01 	vldmia	r3!, {s13}
 800d1ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800d1ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	f000 80eb 	beq.w	800d3cc <ai_conv2d_stripe_f32.constprop.0+0xa00>
 800d1f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d1fa:	f8c7 901c 	str.w	r9, [r7, #28]
 800d1fe:	425d      	negs	r5, r3
 800d200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d202:	653b      	str	r3, [r7, #80]	; 0x50
 800d204:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d206:	643b      	str	r3, [r7, #64]	; 0x40
 800d208:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d20c:	657b      	str	r3, [r7, #84]	; 0x54
 800d20e:	2300      	movs	r3, #0
 800d210:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d214:	2b00      	cmp	r3, #0
 800d216:	f2c0 8107 	blt.w	800d428 <ai_conv2d_stripe_f32.constprop.0+0xa5c>
 800d21a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d21c:	2300      	movs	r3, #0
 800d21e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d220:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800d224:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 800d228:	4428      	add	r0, r5
 800d22a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d22c:	42b0      	cmp	r0, r6
 800d22e:	bf94      	ite	ls
 800d230:	ebc3 0300 	rsbls	r3, r3, r0
 800d234:	ebc3 0306 	rsbhi	r3, r3, r6
 800d238:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800d23c:	fb02 a204 	mla	r2, r2, r4, sl
 800d240:	eba0 0c03 	sub.w	ip, r0, r3
 800d244:	1af0      	subs	r0, r6, r3
 800d246:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800d24a:	fb06 f303 	mul.w	r3, r6, r3
 800d24e:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 800d250:	2e00      	cmp	r6, #0
 800d252:	f340 80e6 	ble.w	800d422 <ai_conv2d_stripe_f32.constprop.0+0xa56>
 800d256:	fb04 f000 	mul.w	r0, r4, r0
 800d25a:	eeb0 7a66 	vmov.f32	s14, s13
 800d25e:	fb04 fc0c 	mul.w	ip, r4, ip
 800d262:	f023 040f 	bic.w	r4, r3, #15
 800d266:	6338      	str	r0, [r7, #48]	; 0x30
 800d268:	2600      	movs	r6, #0
 800d26a:	1e60      	subs	r0, r4, #1
 800d26c:	0900      	lsrs	r0, r0, #4
 800d26e:	3001      	adds	r0, #1
 800d270:	ea4f 1880 	mov.w	r8, r0, lsl #6
 800d274:	0100      	lsls	r0, r0, #4
 800d276:	62b8      	str	r0, [r7, #40]	; 0x28
 800d278:	2c00      	cmp	r4, #0
 800d27a:	f340 80cd 	ble.w	800d418 <ai_conv2d_stripe_f32.constprop.0+0xa4c>
 800d27e:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 800d282:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800d286:	f04f 0900 	mov.w	r9, #0
 800d28a:	ed10 6a0f 	vldr	s12, [r0, #-60]	; 0xffffffc4
 800d28e:	f109 0910 	add.w	r9, r9, #16
 800d292:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 800d296:	3040      	adds	r0, #64	; 0x40
 800d298:	ed1e 4a10 	vldr	s8, [lr, #-64]	; 0xffffffc0
 800d29c:	45a1      	cmp	r9, r4
 800d29e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d2a2:	ed50 4a20 	vldr	s9, [r0, #-128]	; 0xffffff80
 800d2a6:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 800d2aa:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800d2ae:	ed50 5a1e 	vldr	s11, [r0, #-120]	; 0xffffff88
 800d2b2:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d2b6:	ed10 6a1d 	vldr	s12, [r0, #-116]	; 0xffffff8c
 800d2ba:	ed1e ea1d 	vldr	s28, [lr, #-116]	; 0xffffff8c
 800d2be:	ed5e da1c 	vldr	s27, [lr, #-112]	; 0xffffff90
 800d2c2:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800d2c6:	ed5e ca1b 	vldr	s25, [lr, #-108]	; 0xffffff94
 800d2ca:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800d2ce:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d2d2:	ed5e ba1a 	vldr	s23, [lr, #-104]	; 0xffffff98
 800d2d6:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800d2da:	ed5e aa19 	vldr	s21, [lr, #-100]	; 0xffffff9c
 800d2de:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800d2e2:	ed5e 9a18 	vldr	s19, [lr, #-96]	; 0xffffffa0
 800d2e6:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800d2ea:	eeee 7a06 	vfma.f32	s15, s28, s12
 800d2ee:	ed5e 8a17 	vldr	s17, [lr, #-92]	; 0xffffffa4
 800d2f2:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 800d2f6:	ed5e 0a16 	vldr	s1, [lr, #-88]	; 0xffffffa8
 800d2fa:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 800d2fe:	ed5e 1a15 	vldr	s3, [lr, #-84]	; 0xffffffac
 800d302:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800d306:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800d30a:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 800d30e:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800d312:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 800d316:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800d31a:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 800d31e:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800d322:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800d326:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 800d32a:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800d32e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800d332:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800d336:	eee9 7a89 	vfma.f32	s15, s19, s18
 800d33a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800d33e:	eee0 7a81 	vfma.f32	s15, s1, s2
 800d342:	eee1 7a82 	vfma.f32	s15, s3, s4
 800d346:	eee2 7a83 	vfma.f32	s15, s5, s6
 800d34a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d34e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d352:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d35a:	db96      	blt.n	800d28a <ai_conv2d_stripe_f32.constprop.0+0x8be>
 800d35c:	4441      	add	r1, r8
 800d35e:	4442      	add	r2, r8
 800d360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d362:	4283      	cmp	r3, r0
 800d364:	dd11      	ble.n	800d38a <ai_conv2d_stripe_f32.constprop.0+0x9be>
 800d366:	4686      	mov	lr, r0
 800d368:	468b      	mov	fp, r1
 800d36a:	4691      	mov	r9, r2
 800d36c:	f10e 0e01 	add.w	lr, lr, #1
 800d370:	ecb9 6a01 	vldmia	r9!, {s12}
 800d374:	ecfb 7a01 	vldmia	fp!, {s15}
 800d378:	4573      	cmp	r3, lr
 800d37a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d37e:	d1f5      	bne.n	800d36c <ai_conv2d_stripe_f32.constprop.0+0x9a0>
 800d380:	1a18      	subs	r0, r3, r0
 800d382:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800d386:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800d38a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d38c:	3601      	adds	r6, #1
 800d38e:	4461      	add	r1, ip
 800d390:	4402      	add	r2, r0
 800d392:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d394:	42b0      	cmp	r0, r6
 800d396:	f47f af6f 	bne.w	800d278 <ai_conv2d_stripe_f32.constprop.0+0x8ac>
 800d39a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d39c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800d39e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3a0:	4401      	add	r1, r0
 800d3a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a4:	ed82 7a00 	vstr	s14, [r2]
 800d3a8:	1a2d      	subs	r5, r5, r0
 800d3aa:	6579      	str	r1, [r7, #84]	; 0x54
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3b2:	440a      	add	r2, r1
 800d3b4:	6a39      	ldr	r1, [r7, #32]
 800d3b6:	643a      	str	r2, [r7, #64]	; 0x40
 800d3b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3ba:	440a      	add	r2, r1
 800d3bc:	653a      	str	r2, [r7, #80]	; 0x50
 800d3be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	f47f af25 	bne.w	800d212 <ai_conv2d_stripe_f32.constprop.0+0x846>
 800d3c8:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800d3cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3d0:	444a      	add	r2, r9
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	66ba      	str	r2, [r7, #104]	; 0x68
 800d3d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d3d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d3da:	3204      	adds	r2, #4
 800d3dc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d3de:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	f47f aef3 	bne.w	800d1ce <ai_conv2d_stripe_f32.constprop.0+0x802>
 800d3e8:	ee1e 3a90 	vmov	r3, s29
 800d3ec:	469d      	mov	sp, r3
 800d3ee:	e428      	b.n	800cc42 <ai_conv2d_stripe_f32.constprop.0+0x276>
 800d3f0:	2400      	movs	r4, #0
 800d3f2:	e65f      	b.n	800d0b4 <ai_conv2d_stripe_f32.constprop.0+0x6e8>
 800d3f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d3f6:	eeb0 3a63 	vmov.f32	s6, s7
 800d3fa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d3fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d400:	647b      	str	r3, [r7, #68]	; 0x44
 800d402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d406:	1a98      	subs	r0, r3, r2
 800d408:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d40c:	fb03 f000 	mul.w	r0, r3, r0
 800d410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d414:	1a9b      	subs	r3, r3, r2
 800d416:	e5d7      	b.n	800cfc8 <ai_conv2d_stripe_f32.constprop.0+0x5fc>
 800d418:	2000      	movs	r0, #0
 800d41a:	e7a2      	b.n	800d362 <ai_conv2d_stripe_f32.constprop.0+0x996>
 800d41c:	eef0 6a48 	vmov.f32	s13, s16
 800d420:	e6e4      	b.n	800d1ec <ai_conv2d_stripe_f32.constprop.0+0x820>
 800d422:	eeb0 7a66 	vmov.f32	s14, s13
 800d426:	e7b8      	b.n	800d39a <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800d428:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d42a:	462b      	mov	r3, r5
 800d42c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d42e:	442a      	add	r2, r5
 800d430:	e6f6      	b.n	800d220 <ai_conv2d_stripe_f32.constprop.0+0x854>
 800d432:	bf00      	nop
 800d434:	00000000 	.word	0x00000000

0800d438 <ai_dict_decompress_f32>:
 800d438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d43c:	9d08      	ldr	r5, [sp, #32]
 800d43e:	2b04      	cmp	r3, #4
 800d440:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800d444:	d00e      	beq.n	800d464 <ai_dict_decompress_f32+0x2c>
 800d446:	2b08      	cmp	r3, #8
 800d448:	d10a      	bne.n	800d460 <ai_dict_decompress_f32+0x28>
 800d44a:	42a8      	cmp	r0, r5
 800d44c:	d208      	bcs.n	800d460 <ai_dict_decompress_f32+0x28>
 800d44e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d452:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f840 3b04 	str.w	r3, [r0], #4
 800d45c:	4285      	cmp	r5, r0
 800d45e:	d8f6      	bhi.n	800d44e <ai_dict_decompress_f32+0x16>
 800d460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d464:	9b07      	ldr	r3, [sp, #28]
 800d466:	085e      	lsrs	r6, r3, #1
 800d468:	f003 0701 	and.w	r7, r3, #1
 800d46c:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800d470:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d474:	42a8      	cmp	r0, r5
 800d476:	d2f3      	bcs.n	800d460 <ai_dict_decompress_f32+0x28>
 800d478:	b33e      	cbz	r6, 800d4ca <ai_dict_decompress_f32+0x92>
 800d47a:	f100 0e08 	add.w	lr, r0, #8
 800d47e:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800d482:	eb01 0408 	add.w	r4, r1, r8
 800d486:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d48a:	f10e 0e08 	add.w	lr, lr, #8
 800d48e:	091b      	lsrs	r3, r3, #4
 800d490:	4564      	cmp	r4, ip
 800d492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f84e 3c10 	str.w	r3, [lr, #-16]
 800d49c:	f89c 3000 	ldrb.w	r3, [ip]
 800d4a0:	f003 030f 	and.w	r3, r3, #15
 800d4a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800d4ae:	d1ea      	bne.n	800d486 <ai_dict_decompress_f32+0x4e>
 800d4b0:	4431      	add	r1, r6
 800d4b2:	4448      	add	r0, r9
 800d4b4:	2f00      	cmp	r7, #0
 800d4b6:	d0dd      	beq.n	800d474 <ai_dict_decompress_f32+0x3c>
 800d4b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4bc:	091b      	lsrs	r3, r3, #4
 800d4be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f840 3b04 	str.w	r3, [r0], #4
 800d4c8:	e7d4      	b.n	800d474 <ai_dict_decompress_f32+0x3c>
 800d4ca:	2f00      	cmp	r7, #0
 800d4cc:	d1f4      	bne.n	800d4b8 <ai_dict_decompress_f32+0x80>
 800d4ce:	42a8      	cmp	r0, r5
 800d4d0:	d3fd      	bcc.n	800d4ce <ai_dict_decompress_f32+0x96>
 800d4d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4d6:	bf00      	nop

0800d4d8 <forward_conv2d>:
 800d4d8:	6982      	ldr	r2, [r0, #24]
 800d4da:	8813      	ldrh	r3, [r2, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	f000 810f 	beq.w	800d700 <forward_conv2d+0x228>
 800d4e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e6:	ed2d 8b04 	vpush	{d8-d9}
 800d4ea:	6852      	ldr	r2, [r2, #4]
 800d4ec:	b0a9      	sub	sp, #164	; 0xa4
 800d4ee:	4604      	mov	r4, r0
 800d4f0:	6851      	ldr	r1, [r2, #4]
 800d4f2:	b101      	cbz	r1, 800d4f6 <forward_conv2d+0x1e>
 800d4f4:	6809      	ldr	r1, [r1, #0]
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	f000 8152 	beq.w	800d7a0 <forward_conv2d+0x2c8>
 800d4fc:	6915      	ldr	r5, [r2, #16]
 800d4fe:	b105      	cbz	r5, 800d502 <forward_conv2d+0x2a>
 800d500:	682d      	ldr	r5, [r5, #0]
 800d502:	2b02      	cmp	r3, #2
 800d504:	f000 80fe 	beq.w	800d704 <forward_conv2d+0x22c>
 800d508:	69d3      	ldr	r3, [r2, #28]
 800d50a:	8b12      	ldrh	r2, [r2, #24]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f000 8138 	beq.w	800d782 <forward_conv2d+0x2aa>
 800d512:	2a01      	cmp	r2, #1
 800d514:	681e      	ldr	r6, [r3, #0]
 800d516:	f240 813a 	bls.w	800d78e <forward_conv2d+0x2b6>
 800d51a:	685a      	ldr	r2, [r3, #4]
 800d51c:	ee08 2a10 	vmov	s16, r2
 800d520:	689b      	ldr	r3, [r3, #8]
 800d522:	68ca      	ldr	r2, [r1, #12]
 800d524:	6989      	ldr	r1, [r1, #24]
 800d526:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800d52a:	6889      	ldr	r1, [r1, #8]
 800d52c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d52e:	ee09 1a10 	vmov	s18, r1
 800d532:	6851      	ldr	r1, [r2, #4]
 800d534:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800d538:	911b      	str	r1, [sp, #108]	; 0x6c
 800d53a:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d53e:	69b7      	ldr	r7, [r6, #24]
 800d540:	9118      	str	r1, [sp, #96]	; 0x60
 800d542:	68d1      	ldr	r1, [r2, #12]
 800d544:	6892      	ldr	r2, [r2, #8]
 800d546:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800d54a:	9223      	str	r2, [sp, #140]	; 0x8c
 800d54c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d54e:	f8dc a008 	ldr.w	sl, [ip, #8]
 800d552:	9224      	str	r2, [sp, #144]	; 0x90
 800d554:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d556:	f8d4 b034 	ldr.w	fp, [r4, #52]	; 0x34
 800d55a:	9217      	str	r2, [sp, #92]	; 0x5c
 800d55c:	6802      	ldr	r2, [r0, #0]
 800d55e:	9122      	str	r1, [sp, #136]	; 0x88
 800d560:	9211      	str	r2, [sp, #68]	; 0x44
 800d562:	6842      	ldr	r2, [r0, #4]
 800d564:	921e      	str	r2, [sp, #120]	; 0x78
 800d566:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d568:	9210      	str	r2, [sp, #64]	; 0x40
 800d56a:	f8de 2008 	ldr.w	r2, [lr, #8]
 800d56e:	9219      	str	r2, [sp, #100]	; 0x64
 800d570:	f8de 2004 	ldr.w	r2, [lr, #4]
 800d574:	921a      	str	r2, [sp, #104]	; 0x68
 800d576:	69e2      	ldr	r2, [r4, #28]
 800d578:	9225      	str	r2, [sp, #148]	; 0x94
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	ee08 2a90 	vmov	s17, r2
 800d580:	ee18 2a10 	vmov	r2, s16
 800d584:	b11a      	cbz	r2, 800d58e <forward_conv2d+0xb6>
 800d586:	6992      	ldr	r2, [r2, #24]
 800d588:	6892      	ldr	r2, [r2, #8]
 800d58a:	ee08 2a10 	vmov	s16, r2
 800d58e:	69aa      	ldr	r2, [r5, #24]
 800d590:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800d594:	6892      	ldr	r2, [r2, #8]
 800d596:	9216      	str	r2, [sp, #88]	; 0x58
 800d598:	2b00      	cmp	r3, #0
 800d59a:	f000 80df 	beq.w	800d75c <forward_conv2d+0x284>
 800d59e:	699a      	ldr	r2, [r3, #24]
 800d5a0:	2a00      	cmp	r2, #0
 800d5a2:	f000 80e4 	beq.w	800d76e <forward_conv2d+0x296>
 800d5a6:	695b      	ldr	r3, [r3, #20]
 800d5a8:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800d5ac:	689b      	ldr	r3, [r3, #8]
 800d5ae:	e9d2 0100 	ldrd	r0, r1, [r2]
 800d5b2:	9327      	str	r3, [sp, #156]	; 0x9c
 800d5b4:	f001 fab4 	bl	800eb20 <ai_array_get_byte_size>
 800d5b8:	69b7      	ldr	r7, [r6, #24]
 800d5ba:	9013      	str	r0, [sp, #76]	; 0x4c
 800d5bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5be:	9312      	str	r3, [sp, #72]	; 0x48
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f000 80c8 	beq.w	800d756 <forward_conv2d+0x27e>
 800d5c6:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d5c8:	fa1f f28b 	uxth.w	r2, fp
 800d5cc:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d5d0:	1e71      	subs	r1, r6, #1
 800d5d2:	3a01      	subs	r2, #1
 800d5d4:	3b01      	subs	r3, #1
 800d5d6:	6838      	ldr	r0, [r7, #0]
 800d5d8:	fb01 6202 	mla	r2, r1, r2, r6
 800d5dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d5de:	921c      	str	r2, [sp, #112]	; 0x70
 800d5e0:	1e4a      	subs	r2, r1, #1
 800d5e2:	fb02 1303 	mla	r3, r2, r3, r1
 800d5e6:	931d      	str	r3, [sp, #116]	; 0x74
 800d5e8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800d5ec:	2b04      	cmp	r3, #4
 800d5ee:	f000 808c 	beq.w	800d70a <forward_conv2d+0x232>
 800d5f2:	2b08      	cmp	r3, #8
 800d5f4:	f000 8089 	beq.w	800d70a <forward_conv2d+0x232>
 800d5f8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d5fc:	9315      	str	r3, [sp, #84]	; 0x54
 800d5fe:	425b      	negs	r3, r3
 800d600:	9314      	str	r3, [sp, #80]	; 0x50
 800d602:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d604:	2b00      	cmp	r3, #0
 800d606:	d076      	beq.n	800d6f6 <forward_conv2d+0x21e>
 800d608:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800d60c:	4644      	mov	r4, r8
 800d60e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800d612:	425b      	negs	r3, r3
 800d614:	921e      	str	r2, [sp, #120]	; 0x78
 800d616:	fa0f f28b 	sxth.w	r2, fp
 800d61a:	9321      	str	r3, [sp, #132]	; 0x84
 800d61c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800d620:	2300      	movs	r3, #0
 800d622:	921f      	str	r2, [sp, #124]	; 0x7c
 800d624:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800d628:	9317      	str	r3, [sp, #92]	; 0x5c
 800d62a:	fb0a f30b 	mul.w	r3, sl, fp
 800d62e:	9220      	str	r2, [sp, #128]	; 0x80
 800d630:	9326      	str	r3, [sp, #152]	; 0x98
 800d632:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d634:	ee19 1a10 	vmov	r1, s18
 800d638:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d63a:	920e      	str	r2, [sp, #56]	; 0x38
 800d63c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d63e:	2b00      	cmp	r3, #0
 800d640:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800d642:	920d      	str	r2, [sp, #52]	; 0x34
 800d644:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d646:	4638      	mov	r0, r7
 800d648:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d64c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d64e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d650:	930a      	str	r3, [sp, #40]	; 0x28
 800d652:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d654:	9307      	str	r3, [sp, #28]
 800d656:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d658:	9306      	str	r3, [sp, #24]
 800d65a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d65c:	9305      	str	r3, [sp, #20]
 800d65e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d660:	e9cd a303 	strd	sl, r3, [sp, #12]
 800d664:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d666:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d66a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d670:	4413      	add	r3, r2
 800d672:	bfa8      	it	ge
 800d674:	2200      	movge	r2, #0
 800d676:	9208      	str	r2, [sp, #32]
 800d678:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d67a:	4293      	cmp	r3, r2
 800d67c:	bf28      	it	cs
 800d67e:	4613      	movcs	r3, r2
 800d680:	ee18 2a90 	vmov	r2, s17
 800d684:	9309      	str	r3, [sp, #36]	; 0x24
 800d686:	ee18 3a10 	vmov	r3, s16
 800d68a:	f7ff f99f 	bl	800c9cc <ai_conv2d_stripe_f32.constprop.0>
 800d68e:	f1ba 0f00 	cmp.w	sl, #0
 800d692:	d020      	beq.n	800d6d6 <forward_conv2d+0x1fe>
 800d694:	2600      	movs	r6, #0
 800d696:	464a      	mov	r2, r9
 800d698:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800d69c:	9610      	str	r6, [sp, #64]	; 0x40
 800d69e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6a0:	4629      	mov	r1, r5
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	9211      	str	r2, [sp, #68]	; 0x44
 800d6aa:	9310      	str	r3, [sp, #64]	; 0x40
 800d6ac:	69ab      	ldr	r3, [r5, #24]
 800d6ae:	609f      	str	r7, [r3, #8]
 800d6b0:	4623      	mov	r3, r4
 800d6b2:	444c      	add	r4, r9
 800d6b4:	47b0      	blx	r6
 800d6b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d6b8:	445f      	add	r7, fp
 800d6ba:	eba4 0308 	sub.w	r3, r4, r8
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	bfa8      	it	ge
 800d6c2:	4644      	movge	r4, r8
 800d6c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6c8:	459a      	cmp	sl, r3
 800d6ca:	d1e8      	bne.n	800d69e <forward_conv2d+0x1c6>
 800d6cc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d6ce:	4691      	mov	r9, r2
 800d6d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d6d2:	4413      	add	r3, r2
 800d6d4:	9316      	str	r3, [sp, #88]	; 0x58
 800d6d6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d6d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d6da:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800d6dc:	4413      	add	r3, r2
 800d6de:	3101      	adds	r1, #1
 800d6e0:	9314      	str	r3, [sp, #80]	; 0x50
 800d6e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6e4:	9117      	str	r1, [sp, #92]	; 0x5c
 800d6e6:	1a9b      	subs	r3, r3, r2
 800d6e8:	9315      	str	r3, [sp, #84]	; 0x54
 800d6ea:	69ab      	ldr	r3, [r5, #24]
 800d6ec:	68da      	ldr	r2, [r3, #12]
 800d6ee:	609a      	str	r2, [r3, #8]
 800d6f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d6f2:	428b      	cmp	r3, r1
 800d6f4:	d19d      	bne.n	800d632 <forward_conv2d+0x15a>
 800d6f6:	b029      	add	sp, #164	; 0xa4
 800d6f8:	ecbd 8b04 	vpop	{d8-d9}
 800d6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	deff      	udf	#255	; 0xff
 800d704:	2300      	movs	r3, #0
 800d706:	685b      	ldr	r3, [r3, #4]
 800d708:	deff      	udf	#255	; 0xff
 800d70a:	68fa      	ldr	r2, [r7, #12]
 800d70c:	2a00      	cmp	r2, #0
 800d70e:	f43f af73 	beq.w	800d5f8 <forward_conv2d+0x120>
 800d712:	69a3      	ldr	r3, [r4, #24]
 800d714:	8819      	ldrh	r1, [r3, #0]
 800d716:	2903      	cmp	r1, #3
 800d718:	d945      	bls.n	800d7a6 <forward_conv2d+0x2ce>
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d039      	beq.n	800d796 <forward_conv2d+0x2be>
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d036      	beq.n	800d796 <forward_conv2d+0x2be>
 800d728:	699c      	ldr	r4, [r3, #24]
 800d72a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d72e:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800d732:	68b9      	ldr	r1, [r7, #8]
 800d734:	4103      	asrs	r3, r0
 800d736:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	9401      	str	r4, [sp, #4]
 800d73e:	ee18 4a90 	vmov	r4, s17
 800d742:	2800      	cmp	r0, #0
 800d744:	bf18      	it	ne
 800d746:	4604      	movne	r4, r0
 800d748:	ee08 4a90 	vmov	s17, r4
 800d74c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800d74e:	9400      	str	r4, [sp, #0]
 800d750:	f7ff fe72 	bl	800d438 <ai_dict_decompress_f32>
 800d754:	e750      	b.n	800d5f8 <forward_conv2d+0x120>
 800d756:	4b15      	ldr	r3, [pc, #84]	; (800d7ac <forward_conv2d+0x2d4>)
 800d758:	9312      	str	r3, [sp, #72]	; 0x48
 800d75a:	e734      	b.n	800d5c6 <forward_conv2d+0xee>
 800d75c:	f1b8 0f00 	cmp.w	r8, #0
 800d760:	d00b      	beq.n	800d77a <forward_conv2d+0x2a2>
 800d762:	9327      	str	r3, [sp, #156]	; 0x9c
 800d764:	2301      	movs	r3, #1
 800d766:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800d76a:	9313      	str	r3, [sp, #76]	; 0x4c
 800d76c:	e726      	b.n	800d5bc <forward_conv2d+0xe4>
 800d76e:	f1b8 0f00 	cmp.w	r8, #0
 800d772:	d001      	beq.n	800d778 <forward_conv2d+0x2a0>
 800d774:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800d778:	2300      	movs	r3, #0
 800d77a:	9327      	str	r3, [sp, #156]	; 0x9c
 800d77c:	2301      	movs	r3, #1
 800d77e:	9313      	str	r3, [sp, #76]	; 0x4c
 800d780:	e71c      	b.n	800d5bc <forward_conv2d+0xe4>
 800d782:	2a01      	cmp	r2, #1
 800d784:	d90a      	bls.n	800d79c <forward_conv2d+0x2c4>
 800d786:	ee08 3a10 	vmov	s16, r3
 800d78a:	461e      	mov	r6, r3
 800d78c:	e6c9      	b.n	800d522 <forward_conv2d+0x4a>
 800d78e:	2200      	movs	r2, #0
 800d790:	ee08 2a10 	vmov	s16, r2
 800d794:	e6c4      	b.n	800d520 <forward_conv2d+0x48>
 800d796:	2300      	movs	r3, #0
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	deff      	udf	#255	; 0xff
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	deff      	udf	#255	; 0xff
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	deff      	udf	#255	; 0xff
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	deff      	udf	#255	; 0xff
 800d7ac:	0800c9c9 	.word	0x0800c9c9

0800d7b0 <forward_dense>:
 800d7b0:	6983      	ldr	r3, [r0, #24]
 800d7b2:	881a      	ldrh	r2, [r3, #0]
 800d7b4:	2a00      	cmp	r2, #0
 800d7b6:	f000 80f0 	beq.w	800d99a <forward_dense+0x1ea>
 800d7ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7be:	ed2d 8b02 	vpush	{d8}
 800d7c2:	6858      	ldr	r0, [r3, #4]
 800d7c4:	b09b      	sub	sp, #108	; 0x6c
 800d7c6:	6845      	ldr	r5, [r0, #4]
 800d7c8:	b105      	cbz	r5, 800d7cc <forward_dense+0x1c>
 800d7ca:	682d      	ldr	r5, [r5, #0]
 800d7cc:	2a01      	cmp	r2, #1
 800d7ce:	f000 840a 	beq.w	800dfe6 <forward_dense+0x836>
 800d7d2:	6906      	ldr	r6, [r0, #16]
 800d7d4:	b106      	cbz	r6, 800d7d8 <forward_dense+0x28>
 800d7d6:	6836      	ldr	r6, [r6, #0]
 800d7d8:	2a02      	cmp	r2, #2
 800d7da:	f000 80e0 	beq.w	800d99e <forward_dense+0x1ee>
 800d7de:	69c3      	ldr	r3, [r0, #28]
 800d7e0:	930d      	str	r3, [sp, #52]	; 0x34
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f000 83f1 	beq.w	800dfca <forward_dense+0x81a>
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	8b03      	ldrh	r3, [r0, #24]
 800d7ec:	6809      	ldr	r1, [r1, #0]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	910f      	str	r1, [sp, #60]	; 0x3c
 800d7f2:	f240 83ec 	bls.w	800dfce <forward_dense+0x81e>
 800d7f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	930d      	str	r3, [sp, #52]	; 0x34
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800d802:	2a03      	cmp	r2, #3
 800d804:	68eb      	ldr	r3, [r5, #12]
 800d806:	68f7      	ldr	r7, [r6, #12]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	687c      	ldr	r4, [r7, #4]
 800d80c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d80e:	f8d8 3000 	ldr.w	r3, [r8]
 800d812:	4621      	mov	r1, r4
 800d814:	9419      	str	r4, [sp, #100]	; 0x64
 800d816:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800d81a:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800d81e:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800d822:	fb01 f404 	mul.w	r4, r1, r4
 800d826:	fa4e f10c 	asr.w	r1, lr, ip
 800d82a:	9116      	str	r1, [sp, #88]	; 0x58
 800d82c:	f000 83d8 	beq.w	800dfe0 <forward_dense+0x830>
 800d830:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d832:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800d836:	2a00      	cmp	r2, #0
 800d838:	f000 83c2 	beq.w	800dfc0 <forward_dense+0x810>
 800d83c:	6812      	ldr	r2, [r2, #0]
 800d83e:	2a00      	cmp	r2, #0
 800d840:	f000 83be 	beq.w	800dfc0 <forward_dense+0x810>
 800d844:	2b04      	cmp	r3, #4
 800d846:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800d84a:	f000 83a8 	beq.w	800df9e <forward_dense+0x7ee>
 800d84e:	2b08      	cmp	r3, #8
 800d850:	f000 83a5 	beq.w	800df9e <forward_dense+0x7ee>
 800d854:	f04f 0a00 	mov.w	sl, #0
 800d858:	69ab      	ldr	r3, [r5, #24]
 800d85a:	fb07 f404 	mul.w	r4, r7, r4
 800d85e:	69b2      	ldr	r2, [r6, #24]
 800d860:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800d864:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d866:	6892      	ldr	r2, [r2, #8]
 800d868:	695b      	ldr	r3, [r3, #20]
 800d86a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800d86e:	9206      	str	r2, [sp, #24]
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	428a      	cmp	r2, r1
 800d874:	9110      	str	r1, [sp, #64]	; 0x40
 800d876:	9304      	str	r3, [sp, #16]
 800d878:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d87a:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800d87e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d882:	900e      	str	r0, [sp, #56]	; 0x38
 800d884:	9303      	str	r3, [sp, #12]
 800d886:	f080 8380 	bcs.w	800df8a <forward_dense+0x7da>
 800d88a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d88c:	4654      	mov	r4, sl
 800d88e:	4bb9      	ldr	r3, [pc, #740]	; (800db74 <forward_dense+0x3c4>)
 800d890:	46ca      	mov	sl, r9
 800d892:	08d0      	lsrs	r0, r2, #3
 800d894:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 800db78 <forward_dense+0x3c8>
 800d898:	4413      	add	r3, r2
 800d89a:	9009      	str	r0, [sp, #36]	; 0x24
 800d89c:	0099      	lsls	r1, r3, #2
 800d89e:	f022 0301 	bic.w	r3, r2, #1
 800d8a2:	f002 0201 	and.w	r2, r2, #1
 800d8a6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d8aa:	9118      	str	r1, [sp, #96]	; 0x60
 800d8ac:	920a      	str	r2, [sp, #40]	; 0x28
 800d8ae:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800d8b2:	9305      	str	r3, [sp, #20]
 800d8b4:	f101 0320 	add.w	r3, r1, #32
 800d8b8:	9207      	str	r2, [sp, #28]
 800d8ba:	9311      	str	r3, [sp, #68]	; 0x44
 800d8bc:	444b      	add	r3, r9
 800d8be:	469b      	mov	fp, r3
 800d8c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8c4:	699b      	ldr	r3, [r3, #24]
 800d8c6:	689a      	ldr	r2, [r3, #8]
 800d8c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8ca:	b10b      	cbz	r3, 800d8d0 <forward_dense+0x120>
 800d8cc:	699b      	ldr	r3, [r3, #24]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	2c00      	cmp	r4, #0
 800d8d2:	f000 834b 	beq.w	800df6c <forward_dense+0x7bc>
 800d8d6:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d8d8:	2904      	cmp	r1, #4
 800d8da:	f000 826a 	beq.w	800ddb2 <forward_dense+0x602>
 800d8de:	9903      	ldr	r1, [sp, #12]
 800d8e0:	9806      	ldr	r0, [sp, #24]
 800d8e2:	4281      	cmp	r1, r0
 800d8e4:	f240 8356 	bls.w	800df94 <forward_dense+0x7e4>
 800d8e8:	4686      	mov	lr, r0
 800d8ea:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d8ec:	eb00 090a 	add.w	r9, r0, sl
 800d8f0:	0941      	lsrs	r1, r0, #5
 800d8f2:	f10a 0004 	add.w	r0, sl, #4
 800d8f6:	f8cd 9020 	str.w	r9, [sp, #32]
 800d8fa:	9012      	str	r0, [sp, #72]	; 0x48
 800d8fc:	1c48      	adds	r0, r1, #1
 800d8fe:	00c9      	lsls	r1, r1, #3
 800d900:	3110      	adds	r1, #16
 800d902:	9115      	str	r1, [sp, #84]	; 0x54
 800d904:	00c1      	lsls	r1, r0, #3
 800d906:	9113      	str	r1, [sp, #76]	; 0x4c
 800d908:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 800d90c:	9114      	str	r1, [sp, #80]	; 0x50
 800d90e:	f1a9 0104 	sub.w	r1, r9, #4
 800d912:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800d916:	910c      	str	r1, [sp, #48]	; 0x30
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 8128 	beq.w	800db6e <forward_dense+0x3be>
 800d91e:	ecb3 5a01 	vldmia	r3!, {s10}
 800d922:	f1b9 0f07 	cmp.w	r9, #7
 800d926:	d83d      	bhi.n	800d9a4 <forward_dense+0x1f4>
 800d928:	45da      	cmp	sl, fp
 800d92a:	d211      	bcs.n	800d950 <forward_dense+0x1a0>
 800d92c:	eddf 7a92 	vldr	s15, [pc, #584]	; 800db78 <forward_dense+0x3c8>
 800d930:	4650      	mov	r0, sl
 800d932:	4615      	mov	r5, r2
 800d934:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d938:	ecb0 7a01 	vldmia	r0!, {s14}
 800d93c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d940:	4558      	cmp	r0, fp
 800d942:	edd1 6a00 	vldr	s13, [r1]
 800d946:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d94a:	d3f3      	bcc.n	800d934 <forward_dense+0x184>
 800d94c:	ee35 5a27 	vadd.f32	s10, s10, s15
 800d950:	9904      	ldr	r1, [sp, #16]
 800d952:	ecae 5a01 	vstmia	lr!, {s10}
 800d956:	440a      	add	r2, r1
 800d958:	9903      	ldr	r1, [sp, #12]
 800d95a:	458e      	cmp	lr, r1
 800d95c:	d3dc      	bcc.n	800d918 <forward_dense+0x168>
 800d95e:	9a06      	ldr	r2, [sp, #24]
 800d960:	1a8b      	subs	r3, r1, r2
 800d962:	3b01      	subs	r3, #1
 800d964:	f023 0303 	bic.w	r3, r3, #3
 800d968:	3304      	adds	r3, #4
 800d96a:	18d3      	adds	r3, r2, r3
 800d96c:	4619      	mov	r1, r3
 800d96e:	9306      	str	r3, [sp, #24]
 800d970:	9b03      	ldr	r3, [sp, #12]
 800d972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d974:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d976:	4413      	add	r3, r2
 800d978:	9a07      	ldr	r2, [sp, #28]
 800d97a:	4281      	cmp	r1, r0
 800d97c:	9303      	str	r3, [sp, #12]
 800d97e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d980:	441a      	add	r2, r3
 800d982:	449b      	add	fp, r3
 800d984:	9207      	str	r2, [sp, #28]
 800d986:	9a05      	ldr	r2, [sp, #20]
 800d988:	441a      	add	r2, r3
 800d98a:	9205      	str	r2, [sp, #20]
 800d98c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d98e:	4692      	mov	sl, r2
 800d990:	f080 82fb 	bcs.w	800df8a <forward_dense+0x7da>
 800d994:	441a      	add	r2, r3
 800d996:	920b      	str	r2, [sp, #44]	; 0x2c
 800d998:	e793      	b.n	800d8c2 <forward_dense+0x112>
 800d99a:	6853      	ldr	r3, [r2, #4]
 800d99c:	deff      	udf	#255	; 0xff
 800d99e:	2300      	movs	r3, #0
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	deff      	udf	#255	; 0xff
 800d9a4:	f002 0103 	and.w	r1, r2, #3
 800d9a8:	2902      	cmp	r1, #2
 800d9aa:	f000 81e6 	beq.w	800dd7a <forward_dense+0x5ca>
 800d9ae:	2903      	cmp	r1, #3
 800d9b0:	f000 80e4 	beq.w	800db7c <forward_dense+0x3cc>
 800d9b4:	2901      	cmp	r1, #1
 800d9b6:	f000 81ef 	beq.w	800dd98 <forward_dense+0x5e8>
 800d9ba:	9908      	ldr	r1, [sp, #32]
 800d9bc:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800db78 <forward_dense+0x3c8>
 800d9c0:	458a      	cmp	sl, r1
 800d9c2:	f200 82e9 	bhi.w	800df98 <forward_dense+0x7e8>
 800d9c6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800d9c8:	f102 0108 	add.w	r1, r2, #8
 800d9cc:	f10a 0020 	add.w	r0, sl, #32
 800d9d0:	18ae      	adds	r6, r5, r2
 800d9d2:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800d9d6:	3108      	adds	r1, #8
 800d9d8:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800d9dc:	3020      	adds	r0, #32
 800d9de:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d9e2:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800d9e6:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800d9ea:	edd5 7a00 	vldr	s15, [r5]
 800d9ee:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800d9f2:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800d9f6:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800d9fa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800d9fe:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800da02:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800da06:	edd5 2a00 	vldr	s5, [r5]
 800da0a:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800da0e:	eee2 7a83 	vfma.f32	s15, s5, s6
 800da12:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800da16:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da1a:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800da1e:	ed95 3a00 	vldr	s6, [r5]
 800da22:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800da26:	eee3 7a23 	vfma.f32	s15, s6, s7
 800da2a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da2e:	edd5 3a00 	vldr	s7, [r5]
 800da32:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800da36:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da3a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800da3e:	ed95 4a00 	vldr	s8, [r5]
 800da42:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800da46:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da4a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800da4e:	edd5 4a00 	vldr	s9, [r5]
 800da52:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800da56:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da5a:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800da5e:	edd5 5a00 	vldr	s11, [r5]
 800da62:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800da66:	428e      	cmp	r6, r1
 800da68:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da6c:	eee5 7a86 	vfma.f32	s15, s11, s12
 800da70:	ed95 6a00 	vldr	s12, [r5]
 800da74:	eee6 7a26 	vfma.f32	s15, s12, s13
 800da78:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da7c:	d1a9      	bne.n	800d9d2 <forward_dense+0x222>
 800da7e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800da80:	1850      	adds	r0, r2, r1
 800da82:	9914      	ldr	r1, [sp, #80]	; 0x50
 800da84:	4559      	cmp	r1, fp
 800da86:	d26f      	bcs.n	800db68 <forward_dense+0x3b8>
 800da88:	7805      	ldrb	r5, [r0, #0]
 800da8a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da8e:	edd5 7a00 	vldr	s15, [r5]
 800da92:	460d      	mov	r5, r1
 800da94:	ecf5 6a01 	vldmia	r5!, {s13}
 800da98:	45ab      	cmp	fp, r5
 800da9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800da9e:	d963      	bls.n	800db68 <forward_dense+0x3b8>
 800daa0:	7845      	ldrb	r5, [r0, #1]
 800daa2:	edd1 6a01 	vldr	s13, [r1, #4]
 800daa6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800daaa:	edd5 7a00 	vldr	s15, [r5]
 800daae:	f101 0508 	add.w	r5, r1, #8
 800dab2:	45ab      	cmp	fp, r5
 800dab4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dab8:	d956      	bls.n	800db68 <forward_dense+0x3b8>
 800daba:	7885      	ldrb	r5, [r0, #2]
 800dabc:	edd1 6a02 	vldr	s13, [r1, #8]
 800dac0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dac4:	edd5 7a00 	vldr	s15, [r5]
 800dac8:	f101 050c 	add.w	r5, r1, #12
 800dacc:	45ab      	cmp	fp, r5
 800dace:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dad2:	d949      	bls.n	800db68 <forward_dense+0x3b8>
 800dad4:	78c5      	ldrb	r5, [r0, #3]
 800dad6:	edd1 6a03 	vldr	s13, [r1, #12]
 800dada:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dade:	edd5 7a00 	vldr	s15, [r5]
 800dae2:	f101 0510 	add.w	r5, r1, #16
 800dae6:	45ab      	cmp	fp, r5
 800dae8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800daec:	d93c      	bls.n	800db68 <forward_dense+0x3b8>
 800daee:	7905      	ldrb	r5, [r0, #4]
 800daf0:	edd1 6a04 	vldr	s13, [r1, #16]
 800daf4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800daf8:	edd5 7a00 	vldr	s15, [r5]
 800dafc:	f101 0514 	add.w	r5, r1, #20
 800db00:	45ab      	cmp	fp, r5
 800db02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db06:	d92f      	bls.n	800db68 <forward_dense+0x3b8>
 800db08:	7945      	ldrb	r5, [r0, #5]
 800db0a:	edd1 6a05 	vldr	s13, [r1, #20]
 800db0e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db12:	edd5 7a00 	vldr	s15, [r5]
 800db16:	f101 0518 	add.w	r5, r1, #24
 800db1a:	45ab      	cmp	fp, r5
 800db1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db20:	d922      	bls.n	800db68 <forward_dense+0x3b8>
 800db22:	7985      	ldrb	r5, [r0, #6]
 800db24:	edd1 6a06 	vldr	s13, [r1, #24]
 800db28:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db2c:	edd5 7a00 	vldr	s15, [r5]
 800db30:	f101 051c 	add.w	r5, r1, #28
 800db34:	45ab      	cmp	fp, r5
 800db36:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db3a:	d915      	bls.n	800db68 <forward_dense+0x3b8>
 800db3c:	79c5      	ldrb	r5, [r0, #7]
 800db3e:	edd1 6a07 	vldr	s13, [r1, #28]
 800db42:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db46:	edd5 7a00 	vldr	s15, [r5]
 800db4a:	f101 0520 	add.w	r5, r1, #32
 800db4e:	45ab      	cmp	fp, r5
 800db50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db54:	d908      	bls.n	800db68 <forward_dense+0x3b8>
 800db56:	edd1 7a08 	vldr	s15, [r1, #32]
 800db5a:	7a01      	ldrb	r1, [r0, #8]
 800db5c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800db60:	edd1 6a00 	vldr	s13, [r1]
 800db64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db68:	ee35 5a07 	vadd.f32	s10, s10, s14
 800db6c:	e6f0      	b.n	800d950 <forward_dense+0x1a0>
 800db6e:	ed9f 5a02 	vldr	s10, [pc, #8]	; 800db78 <forward_dense+0x3c8>
 800db72:	e6d6      	b.n	800d922 <forward_dense+0x172>
 800db74:	3ffffff8 	.word	0x3ffffff8
 800db78:	00000000 	.word	0x00000000
 800db7c:	eeb0 7a48 	vmov.f32	s14, s16
 800db80:	4650      	mov	r0, sl
 800db82:	4611      	mov	r1, r2
 800db84:	468c      	mov	ip, r1
 800db86:	4606      	mov	r6, r0
 800db88:	f81c 5b01 	ldrb.w	r5, [ip], #1
 800db8c:	ecf6 7a01 	vldmia	r6!, {s15}
 800db90:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db94:	edd5 6a00 	vldr	s13, [r5]
 800db98:	9d08      	ldr	r5, [sp, #32]
 800db9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db9e:	42ae      	cmp	r6, r5
 800dba0:	d866      	bhi.n	800dc70 <forward_dense+0x4c0>
 800dba2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dba4:	f101 0711 	add.w	r7, r1, #17
 800dba8:	3109      	adds	r1, #9
 800dbaa:	eba5 0800 	sub.w	r8, r5, r0
 800dbae:	3024      	adds	r0, #36	; 0x24
 800dbb0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800dbb4:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800dbb8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800dbbc:	3108      	adds	r1, #8
 800dbbe:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800dbc2:	3020      	adds	r0, #32
 800dbc4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dbc8:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800dbcc:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800dbd0:	edd5 7a00 	vldr	s15, [r5]
 800dbd4:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800dbd8:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800dbdc:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800dbe0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dbe4:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800dbe8:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800dbec:	edd5 2a00 	vldr	s5, [r5]
 800dbf0:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800dbf4:	eee2 7a83 	vfma.f32	s15, s5, s6
 800dbf8:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800dbfc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc00:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800dc04:	ed95 3a00 	vldr	s6, [r5]
 800dc08:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800dc0c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800dc10:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc14:	edd5 3a00 	vldr	s7, [r5]
 800dc18:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800dc1c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc20:	eee3 7a84 	vfma.f32	s15, s7, s8
 800dc24:	ed95 4a00 	vldr	s8, [r5]
 800dc28:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800dc2c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc30:	eee4 7a24 	vfma.f32	s15, s8, s9
 800dc34:	edd5 4a00 	vldr	s9, [r5]
 800dc38:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800dc3c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc40:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800dc44:	edd5 5a00 	vldr	s11, [r5]
 800dc48:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800dc4c:	428f      	cmp	r7, r1
 800dc4e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc52:	eee5 7a86 	vfma.f32	s15, s11, s12
 800dc56:	ed95 6a00 	vldr	s12, [r5]
 800dc5a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800dc5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc62:	d1a9      	bne.n	800dbb8 <forward_dense+0x408>
 800dc64:	f108 0801 	add.w	r8, r8, #1
 800dc68:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800dc6c:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800dc70:	455e      	cmp	r6, fp
 800dc72:	f4bf af79 	bcs.w	800db68 <forward_dense+0x3b8>
 800dc76:	f89c 1000 	ldrb.w	r1, [ip]
 800dc7a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dc7e:	edd1 7a00 	vldr	s15, [r1]
 800dc82:	4631      	mov	r1, r6
 800dc84:	ecf1 6a01 	vldmia	r1!, {s13}
 800dc88:	458b      	cmp	fp, r1
 800dc8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dc8e:	f67f af6b 	bls.w	800db68 <forward_dense+0x3b8>
 800dc92:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800dc96:	edd6 6a01 	vldr	s13, [r6, #4]
 800dc9a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dc9e:	edd1 7a00 	vldr	s15, [r1]
 800dca2:	f106 0108 	add.w	r1, r6, #8
 800dca6:	458b      	cmp	fp, r1
 800dca8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dcac:	f67f af5c 	bls.w	800db68 <forward_dense+0x3b8>
 800dcb0:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800dcb4:	edd6 6a02 	vldr	s13, [r6, #8]
 800dcb8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dcbc:	edd1 7a00 	vldr	s15, [r1]
 800dcc0:	f106 010c 	add.w	r1, r6, #12
 800dcc4:	458b      	cmp	fp, r1
 800dcc6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dcca:	f67f af4d 	bls.w	800db68 <forward_dense+0x3b8>
 800dcce:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800dcd2:	edd6 6a03 	vldr	s13, [r6, #12]
 800dcd6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dcda:	edd1 7a00 	vldr	s15, [r1]
 800dcde:	f106 0110 	add.w	r1, r6, #16
 800dce2:	458b      	cmp	fp, r1
 800dce4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dce8:	f67f af3e 	bls.w	800db68 <forward_dense+0x3b8>
 800dcec:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800dcf0:	edd6 6a04 	vldr	s13, [r6, #16]
 800dcf4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dcf8:	edd1 7a00 	vldr	s15, [r1]
 800dcfc:	f106 0114 	add.w	r1, r6, #20
 800dd00:	458b      	cmp	fp, r1
 800dd02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd06:	f67f af2f 	bls.w	800db68 <forward_dense+0x3b8>
 800dd0a:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800dd0e:	edd6 6a05 	vldr	s13, [r6, #20]
 800dd12:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dd16:	edd1 7a00 	vldr	s15, [r1]
 800dd1a:	f106 0118 	add.w	r1, r6, #24
 800dd1e:	458b      	cmp	fp, r1
 800dd20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd24:	f67f af20 	bls.w	800db68 <forward_dense+0x3b8>
 800dd28:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800dd2c:	edd6 6a06 	vldr	s13, [r6, #24]
 800dd30:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dd34:	edd1 7a00 	vldr	s15, [r1]
 800dd38:	f106 011c 	add.w	r1, r6, #28
 800dd3c:	458b      	cmp	fp, r1
 800dd3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd42:	f67f af11 	bls.w	800db68 <forward_dense+0x3b8>
 800dd46:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800dd4a:	edd6 6a07 	vldr	s13, [r6, #28]
 800dd4e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dd52:	edd1 7a00 	vldr	s15, [r1]
 800dd56:	f106 0120 	add.w	r1, r6, #32
 800dd5a:	458b      	cmp	fp, r1
 800dd5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd60:	f67f af02 	bls.w	800db68 <forward_dense+0x3b8>
 800dd64:	f89c 1008 	ldrb.w	r1, [ip, #8]
 800dd68:	edd6 7a08 	vldr	s15, [r6, #32]
 800dd6c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dd70:	edd1 6a00 	vldr	s13, [r1]
 800dd74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd78:	e6f6      	b.n	800db68 <forward_dense+0x3b8>
 800dd7a:	eeb0 7a48 	vmov.f32	s14, s16
 800dd7e:	4650      	mov	r0, sl
 800dd80:	4611      	mov	r1, r2
 800dd82:	f811 5b01 	ldrb.w	r5, [r1], #1
 800dd86:	ecf0 7a01 	vldmia	r0!, {s15}
 800dd8a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dd8e:	edd5 6a00 	vldr	s13, [r5]
 800dd92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd96:	e6f5      	b.n	800db84 <forward_dense+0x3d4>
 800dd98:	4611      	mov	r1, r2
 800dd9a:	edda 7a00 	vldr	s15, [sl]
 800dd9e:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dda0:	f811 5b01 	ldrb.w	r5, [r1], #1
 800dda4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dda8:	ed95 7a00 	vldr	s14, [r5]
 800ddac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ddb0:	e7e7      	b.n	800dd82 <forward_dense+0x5d2>
 800ddb2:	9803      	ldr	r0, [sp, #12]
 800ddb4:	9906      	ldr	r1, [sp, #24]
 800ddb6:	4288      	cmp	r0, r1
 800ddb8:	f67f adda 	bls.w	800d970 <forward_dense+0x1c0>
 800ddbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddbe:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800ddc2:	468b      	mov	fp, r1
 800ddc4:	f100 0c01 	add.w	ip, r0, #1
 800ddc8:	9805      	ldr	r0, [sp, #20]
 800ddca:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800ddce:	3801      	subs	r0, #1
 800ddd0:	9008      	str	r0, [sp, #32]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	f000 80bf 	beq.w	800df56 <forward_dense+0x7a6>
 800ddd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ddda:	ecf3 2a01 	vldmia	r3!, {s5}
 800ddde:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800db78 <forward_dense+0x3c8>
 800dde2:	2900      	cmp	r1, #0
 800dde4:	f000 80bf 	beq.w	800df66 <forward_dense+0x7b6>
 800dde8:	1d10      	adds	r0, r2, #4
 800ddea:	f10a 0120 	add.w	r1, sl, #32
 800ddee:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800ddf2:	3004      	adds	r0, #4
 800ddf4:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800ddf8:	3120      	adds	r1, #32
 800ddfa:	f007 0e0f 	and.w	lr, r7, #15
 800ddfe:	093f      	lsrs	r7, r7, #4
 800de00:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 800de04:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800de08:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 800de0c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800de10:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 800de14:	edde 7a00 	vldr	s15, [lr]
 800de18:	ed97 3a00 	vldr	s6, [r7]
 800de1c:	0937      	lsrs	r7, r6, #4
 800de1e:	ee67 7a82 	vmul.f32	s15, s15, s4
 800de22:	f006 060f 	and.w	r6, r6, #15
 800de26:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800de2a:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800de2e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800de32:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 800de36:	eee3 7a04 	vfma.f32	s15, s6, s8
 800de3a:	ed97 3a00 	vldr	s6, [r7]
 800de3e:	ed96 4a00 	vldr	s8, [r6]
 800de42:	092e      	lsrs	r6, r5, #4
 800de44:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800de48:	f005 050f 	and.w	r5, r5, #15
 800de4c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800de50:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 800de54:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800de58:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800de5c:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800de60:	eee3 7a23 	vfma.f32	s15, s6, s7
 800de64:	eee4 7a05 	vfma.f32	s15, s8, s10
 800de68:	ed96 4a00 	vldr	s8, [r6]
 800de6c:	ed95 5a00 	vldr	s10, [r5]
 800de70:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 800de74:	4560      	cmp	r0, ip
 800de76:	ea4f 1615 	mov.w	r6, r5, lsr #4
 800de7a:	f005 050f 	and.w	r5, r5, #15
 800de7e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800de82:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800de86:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800de8a:	eee5 7a06 	vfma.f32	s15, s10, s12
 800de8e:	ed96 5a00 	vldr	s10, [r6]
 800de92:	ed95 6a00 	vldr	s12, [r5]
 800de96:	eee5 7a25 	vfma.f32	s15, s10, s11
 800de9a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800de9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dea2:	d1a4      	bne.n	800ddee <forward_dense+0x63e>
 800dea4:	f1ac 0804 	sub.w	r8, ip, #4
 800dea8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800deac:	9905      	ldr	r1, [sp, #20]
 800deae:	458e      	cmp	lr, r1
 800deb0:	d229      	bcs.n	800df06 <forward_dense+0x756>
 800deb2:	9908      	ldr	r1, [sp, #32]
 800deb4:	f10e 0008 	add.w	r0, lr, #8
 800deb8:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800debc:	eba1 070e 	sub.w	r7, r1, lr
 800dec0:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 800dec4:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800dec8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800decc:	3008      	adds	r0, #8
 800dece:	ed50 5a03 	vldr	s11, [r0, #-12]
 800ded2:	f001 050f 	and.w	r5, r1, #15
 800ded6:	0909      	lsrs	r1, r1, #4
 800ded8:	ed50 6a04 	vldr	s13, [r0, #-16]
 800dedc:	42b7      	cmp	r7, r6
 800dede:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dee2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dee6:	edd5 7a00 	vldr	s15, [r5]
 800deea:	ed91 6a00 	vldr	s12, [r1]
 800deee:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800def2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800def6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800defa:	d1e5      	bne.n	800dec8 <forward_dense+0x718>
 800defc:	f109 0901 	add.w	r9, r9, #1
 800df00:	44c8      	add	r8, r9
 800df02:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800df06:	990a      	ldr	r1, [sp, #40]	; 0x28
 800df08:	b1c1      	cbz	r1, 800df3c <forward_dense+0x78c>
 800df0a:	f898 1000 	ldrb.w	r1, [r8]
 800df0e:	edde 7a00 	vldr	s15, [lr]
 800df12:	0909      	lsrs	r1, r1, #4
 800df14:	9804      	ldr	r0, [sp, #16]
 800df16:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800df1a:	4402      	add	r2, r0
 800df1c:	4484      	add	ip, r0
 800df1e:	edd1 6a00 	vldr	s13, [r1]
 800df22:	9903      	ldr	r1, [sp, #12]
 800df24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800df28:	ee72 2a87 	vadd.f32	s5, s5, s14
 800df2c:	eceb 2a01 	vstmia	fp!, {s5}
 800df30:	4559      	cmp	r1, fp
 800df32:	f63f af4e 	bhi.w	800ddd2 <forward_dense+0x622>
 800df36:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800df3a:	e510      	b.n	800d95e <forward_dense+0x1ae>
 800df3c:	9904      	ldr	r1, [sp, #16]
 800df3e:	ee32 7a87 	vadd.f32	s14, s5, s14
 800df42:	440a      	add	r2, r1
 800df44:	448c      	add	ip, r1
 800df46:	9903      	ldr	r1, [sp, #12]
 800df48:	ecab 7a01 	vstmia	fp!, {s14}
 800df4c:	458b      	cmp	fp, r1
 800df4e:	d2f2      	bcs.n	800df36 <forward_dense+0x786>
 800df50:	2b00      	cmp	r3, #0
 800df52:	f47f af41 	bne.w	800ddd8 <forward_dense+0x628>
 800df56:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df58:	eef0 2a48 	vmov.f32	s5, s16
 800df5c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800dfec <forward_dense+0x83c>
 800df60:	2900      	cmp	r1, #0
 800df62:	f47f af41 	bne.w	800dde8 <forward_dense+0x638>
 800df66:	46d6      	mov	lr, sl
 800df68:	4690      	mov	r8, r2
 800df6a:	e79f      	b.n	800deac <forward_dense+0x6fc>
 800df6c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800df6e:	4651      	mov	r1, sl
 800df70:	9d06      	ldr	r5, [sp, #24]
 800df72:	9001      	str	r0, [sp, #4]
 800df74:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800df76:	9000      	str	r0, [sp, #0]
 800df78:	4628      	mov	r0, r5
 800df7a:	f000 fc21 	bl	800e7c0 <lite_dense_if32of32wf32>
 800df7e:	462b      	mov	r3, r5
 800df80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df82:	4413      	add	r3, r2
 800df84:	4619      	mov	r1, r3
 800df86:	9306      	str	r3, [sp, #24]
 800df88:	e4f2      	b.n	800d970 <forward_dense+0x1c0>
 800df8a:	b01b      	add	sp, #108	; 0x6c
 800df8c:	ecbd 8b02 	vpop	{d8}
 800df90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df94:	4601      	mov	r1, r0
 800df96:	e4eb      	b.n	800d970 <forward_dense+0x1c0>
 800df98:	4651      	mov	r1, sl
 800df9a:	4610      	mov	r0, r2
 800df9c:	e572      	b.n	800da84 <forward_dense+0x2d4>
 800df9e:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800dfa2:	f1b9 0f00 	cmp.w	r9, #0
 800dfa6:	d016      	beq.n	800dfd6 <forward_dense+0x826>
 800dfa8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dfac:	f000 fdb8 	bl	800eb20 <ai_array_get_byte_size>
 800dfb0:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	4641      	mov	r1, r8
 800dfb8:	4650      	mov	r0, sl
 800dfba:	f000 fe13 	bl	800ebe4 <memcpy>
 800dfbe:	e44b      	b.n	800d858 <forward_dense+0xa8>
 800dfc0:	2b04      	cmp	r3, #4
 800dfc2:	d00a      	beq.n	800dfda <forward_dense+0x82a>
 800dfc4:	f04f 0900 	mov.w	r9, #0
 800dfc8:	e441      	b.n	800d84e <forward_dense+0x9e>
 800dfca:	930f      	str	r3, [sp, #60]	; 0x3c
 800dfcc:	e417      	b.n	800d7fe <forward_dense+0x4e>
 800dfce:	2300      	movs	r3, #0
 800dfd0:	930d      	str	r3, [sp, #52]	; 0x34
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	e413      	b.n	800d7fe <forward_dense+0x4e>
 800dfd6:	46c2      	mov	sl, r8
 800dfd8:	e43e      	b.n	800d858 <forward_dense+0xa8>
 800dfda:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800dfde:	e43b      	b.n	800d858 <forward_dense+0xa8>
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	685b      	ldr	r3, [r3, #4]
 800dfe4:	deff      	udf	#255	; 0xff
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	deff      	udf	#255	; 0xff
 800dfec:	00000000 	.word	0x00000000

0800dff0 <forward_mp>:
 800dff0:	6983      	ldr	r3, [r0, #24]
 800dff2:	881a      	ldrh	r2, [r3, #0]
 800dff4:	2a00      	cmp	r2, #0
 800dff6:	f000 80bc 	beq.w	800e172 <forward_mp+0x182>
 800dffa:	6859      	ldr	r1, [r3, #4]
 800dffc:	684b      	ldr	r3, [r1, #4]
 800dffe:	b103      	cbz	r3, 800e002 <forward_mp+0x12>
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2a01      	cmp	r2, #1
 800e004:	f000 80ba 	beq.w	800e17c <forward_mp+0x18c>
 800e008:	690a      	ldr	r2, [r1, #16]
 800e00a:	2a00      	cmp	r2, #0
 800e00c:	f000 80b9 	beq.w	800e182 <forward_mp+0x192>
 800e010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e014:	6811      	ldr	r1, [r2, #0]
 800e016:	b093      	sub	sp, #76	; 0x4c
 800e018:	68ca      	ldr	r2, [r1, #12]
 800e01a:	6989      	ldr	r1, [r1, #24]
 800e01c:	68d4      	ldr	r4, [r2, #12]
 800e01e:	6895      	ldr	r5, [r2, #8]
 800e020:	688a      	ldr	r2, [r1, #8]
 800e022:	68d9      	ldr	r1, [r3, #12]
 800e024:	699b      	ldr	r3, [r3, #24]
 800e026:	9200      	str	r2, [sp, #0]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800e02c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800e030:	930e      	str	r3, [sp, #56]	; 0x38
 800e032:	9408      	str	r4, [sp, #32]
 800e034:	9504      	str	r5, [sp, #16]
 800e036:	e9d2 3600 	ldrd	r3, r6, [r2]
 800e03a:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 800e03e:	69c1      	ldr	r1, [r0, #28]
 800e040:	f1c3 0a00 	rsb	sl, r3, #0
 800e044:	960d      	str	r6, [sp, #52]	; 0x34
 800e046:	9109      	str	r1, [sp, #36]	; 0x24
 800e048:	6a01      	ldr	r1, [r0, #32]
 800e04a:	9705      	str	r7, [sp, #20]
 800e04c:	910a      	str	r1, [sp, #40]	; 0x28
 800e04e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e050:	910b      	str	r1, [sp, #44]	; 0x2c
 800e052:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e054:	910c      	str	r1, [sp, #48]	; 0x30
 800e056:	2c00      	cmp	r4, #0
 800e058:	f000 8088 	beq.w	800e16c <forward_mp+0x17c>
 800e05c:	441a      	add	r2, r3
 800e05e:	9b05      	ldr	r3, [sp, #20]
 800e060:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800e064:	f04f 0b00 	mov.w	fp, #0
 800e068:	fb09 f303 	mul.w	r3, r9, r3
 800e06c:	9201      	str	r2, [sp, #4]
 800e06e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800e072:	4273      	negs	r3, r6
 800e074:	9310      	str	r3, [sp, #64]	; 0x40
 800e076:	fb05 f307 	mul.w	r3, r5, r7
 800e07a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e07c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e07e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800e082:	9901      	ldr	r1, [sp, #4]
 800e084:	9307      	str	r3, [sp, #28]
 800e086:	428a      	cmp	r2, r1
 800e088:	bf94      	ite	ls
 800e08a:	eb0a 0e02 	addls.w	lr, sl, r2
 800e08e:	eb0a 0e01 	addhi.w	lr, sl, r1
 800e092:	9a04      	ldr	r2, [sp, #16]
 800e094:	2a00      	cmp	r2, #0
 800e096:	d05f      	beq.n	800e158 <forward_mp+0x168>
 800e098:	9a05      	ldr	r2, [sp, #20]
 800e09a:	9d00      	ldr	r5, [sp, #0]
 800e09c:	fb02 f303 	mul.w	r3, r2, r3
 800e0a0:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e0a4:	9303      	str	r3, [sp, #12]
 800e0a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0a8:	18d3      	adds	r3, r2, r3
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	9302      	str	r3, [sp, #8]
 800e0ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0b0:	9206      	str	r2, [sp, #24]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	469b      	mov	fp, r3
 800e0b6:	db5e      	blt.n	800e176 <forward_mp+0x186>
 800e0b8:	9a03      	ldr	r2, [sp, #12]
 800e0ba:	18d6      	adds	r6, r2, r3
 800e0bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0be:	9902      	ldr	r1, [sp, #8]
 800e0c0:	fb06 2607 	mla	r6, r6, r7, r2
 800e0c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0c6:	428a      	cmp	r2, r1
 800e0c8:	bf94      	ite	ls
 800e0ca:	eb0b 0402 	addls.w	r4, fp, r2
 800e0ce:	eb0b 0401 	addhi.w	r4, fp, r1
 800e0d2:	1ae4      	subs	r4, r4, r3
 800e0d4:	f1b9 0f00 	cmp.w	r9, #0
 800e0d8:	d008      	beq.n	800e0ec <forward_mp+0xfc>
 800e0da:	4633      	mov	r3, r6
 800e0dc:	462a      	mov	r2, r5
 800e0de:	19b9      	adds	r1, r7, r6
 800e0e0:	f853 0b04 	ldr.w	r0, [r3], #4
 800e0e4:	4299      	cmp	r1, r3
 800e0e6:	f842 0b04 	str.w	r0, [r2], #4
 800e0ea:	d1f9      	bne.n	800e0e0 <forward_mp+0xf0>
 800e0ec:	9b07      	ldr	r3, [sp, #28]
 800e0ee:	459e      	cmp	lr, r3
 800e0f0:	dd1f      	ble.n	800e132 <forward_mp+0x142>
 800e0f2:	469c      	mov	ip, r3
 800e0f4:	fb07 6404 	mla	r4, r7, r4, r6
 800e0f8:	42a6      	cmp	r6, r4
 800e0fa:	d214      	bcs.n	800e126 <forward_mp+0x136>
 800e0fc:	f1b9 0f00 	cmp.w	r9, #0
 800e100:	d011      	beq.n	800e126 <forward_mp+0x136>
 800e102:	19f1      	adds	r1, r6, r7
 800e104:	4630      	mov	r0, r6
 800e106:	4602      	mov	r2, r0
 800e108:	462b      	mov	r3, r5
 800e10a:	ecf2 7a01 	vldmia	r2!, {s15}
 800e10e:	ed93 7a00 	vldr	s14, [r3]
 800e112:	428a      	cmp	r2, r1
 800e114:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e118:	ece3 7a01 	vstmia	r3!, {s15}
 800e11c:	d1f5      	bne.n	800e10a <forward_mp+0x11a>
 800e11e:	4438      	add	r0, r7
 800e120:	4439      	add	r1, r7
 800e122:	42a0      	cmp	r0, r4
 800e124:	d3ef      	bcc.n	800e106 <forward_mp+0x116>
 800e126:	f10c 0c01 	add.w	ip, ip, #1
 800e12a:	4446      	add	r6, r8
 800e12c:	4444      	add	r4, r8
 800e12e:	45e6      	cmp	lr, ip
 800e130:	d1e2      	bne.n	800e0f8 <forward_mp+0x108>
 800e132:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e134:	443d      	add	r5, r7
 800e136:	9802      	ldr	r0, [sp, #8]
 800e138:	9a06      	ldr	r2, [sp, #24]
 800e13a:	eb01 030b 	add.w	r3, r1, fp
 800e13e:	1a41      	subs	r1, r0, r1
 800e140:	3201      	adds	r2, #1
 800e142:	9102      	str	r1, [sp, #8]
 800e144:	9904      	ldr	r1, [sp, #16]
 800e146:	9206      	str	r2, [sp, #24]
 800e148:	4291      	cmp	r1, r2
 800e14a:	d1b2      	bne.n	800e0b2 <forward_mp+0xc2>
 800e14c:	9b00      	ldr	r3, [sp, #0]
 800e14e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e150:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800e154:	4413      	add	r3, r2
 800e156:	9300      	str	r3, [sp, #0]
 800e158:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e15a:	f10b 0b01 	add.w	fp, fp, #1
 800e15e:	9a01      	ldr	r2, [sp, #4]
 800e160:	449a      	add	sl, r3
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	9301      	str	r3, [sp, #4]
 800e166:	9b08      	ldr	r3, [sp, #32]
 800e168:	455b      	cmp	r3, fp
 800e16a:	d187      	bne.n	800e07c <forward_mp+0x8c>
 800e16c:	b013      	add	sp, #76	; 0x4c
 800e16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e172:	6853      	ldr	r3, [r2, #4]
 800e174:	deff      	udf	#255	; 0xff
 800e176:	9e03      	ldr	r6, [sp, #12]
 800e178:	2300      	movs	r3, #0
 800e17a:	e79f      	b.n	800e0bc <forward_mp+0xcc>
 800e17c:	2300      	movs	r3, #0
 800e17e:	685b      	ldr	r3, [r3, #4]
 800e180:	deff      	udf	#255	; 0xff
 800e182:	68d3      	ldr	r3, [r2, #12]
 800e184:	deff      	udf	#255	; 0xff
 800e186:	bf00      	nop

0800e188 <nl_func_relu_array_f32>:
 800e188:	b410      	push	{r4}
 800e18a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e18e:	698c      	ldr	r4, [r1, #24]
 800e190:	6981      	ldr	r1, [r0, #24]
 800e192:	4413      	add	r3, r2
 800e194:	68a0      	ldr	r0, [r4, #8]
 800e196:	6889      	ldr	r1, [r1, #8]
 800e198:	009a      	lsls	r2, r3, #2
 800e19a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e19e:	4298      	cmp	r0, r3
 800e1a0:	d80f      	bhi.n	800e1c2 <nl_func_relu_array_f32+0x3a>
 800e1a2:	3204      	adds	r2, #4
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800e1c8 <nl_func_relu_array_f32+0x40>
 800e1aa:	4411      	add	r1, r2
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	ed73 7a01 	vldmdb	r3!, {s15}
 800e1b2:	3a08      	subs	r2, #8
 800e1b4:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e1b8:	ed61 7a01 	vstmdb	r1!, {s15}
 800e1bc:	68a0      	ldr	r0, [r4, #8]
 800e1be:	4290      	cmp	r0, r2
 800e1c0:	d9f4      	bls.n	800e1ac <nl_func_relu_array_f32+0x24>
 800e1c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1c6:	4770      	bx	lr
 800e1c8:	00000000 	.word	0x00000000

0800e1cc <forward_relu>:
 800e1cc:	6982      	ldr	r2, [r0, #24]
 800e1ce:	8813      	ldrh	r3, [r2, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d05b      	beq.n	800e28c <forward_relu+0xc0>
 800e1d4:	6851      	ldr	r1, [r2, #4]
 800e1d6:	684a      	ldr	r2, [r1, #4]
 800e1d8:	b102      	cbz	r2, 800e1dc <forward_relu+0x10>
 800e1da:	6812      	ldr	r2, [r2, #0]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	f000 8123 	beq.w	800e428 <forward_relu+0x25c>
 800e1e2:	b470      	push	{r4, r5, r6}
 800e1e4:	690b      	ldr	r3, [r1, #16]
 800e1e6:	b103      	cbz	r3, 800e1ea <forward_relu+0x1e>
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	69c6      	ldr	r6, [r0, #28]
 800e1ec:	2e00      	cmp	r6, #0
 800e1ee:	f000 809e 	beq.w	800e32e <forward_relu+0x162>
 800e1f2:	6871      	ldr	r1, [r6, #4]
 800e1f4:	6998      	ldr	r0, [r3, #24]
 800e1f6:	2901      	cmp	r1, #1
 800e1f8:	f000 80c3 	beq.w	800e382 <forward_relu+0x1b6>
 800e1fc:	6893      	ldr	r3, [r2, #8]
 800e1fe:	6991      	ldr	r1, [r2, #24]
 800e200:	0a1b      	lsrs	r3, r3, #8
 800e202:	6880      	ldr	r0, [r0, #8]
 800e204:	688d      	ldr	r5, [r1, #8]
 800e206:	f000 80f2 	beq.w	800e3ee <forward_relu+0x222>
 800e20a:	68d4      	ldr	r4, [r2, #12]
 800e20c:	2201      	movs	r2, #1
 800e20e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e212:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e216:	42a3      	cmp	r3, r4
 800e218:	fb01 f202 	mul.w	r2, r1, r2
 800e21c:	d1f9      	bne.n	800e212 <forward_relu+0x46>
 800e21e:	68b3      	ldr	r3, [r6, #8]
 800e220:	ed93 7a02 	vldr	s14, [r3, #8]
 800e224:	edd3 6a00 	vldr	s13, [r3]
 800e228:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e22c:	ed93 6a01 	vldr	s12, [r3, #4]
 800e230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e234:	d42c      	bmi.n	800e290 <forward_relu+0xc4>
 800e236:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e23a:	4413      	add	r3, r2
 800e23c:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800e240:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e244:	4295      	cmp	r5, r2
 800e246:	d81f      	bhi.n	800e288 <forward_relu+0xbc>
 800e248:	3204      	adds	r2, #4
 800e24a:	1d01      	adds	r1, r0, #4
 800e24c:	e00d      	b.n	800e26a <forward_relu+0x9e>
 800e24e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e256:	db03      	blt.n	800e260 <forward_relu+0x94>
 800e258:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e25c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e260:	3b08      	subs	r3, #8
 800e262:	ed61 7a01 	vstmdb	r1!, {s15}
 800e266:	429d      	cmp	r5, r3
 800e268:	d80e      	bhi.n	800e288 <forward_relu+0xbc>
 800e26a:	4613      	mov	r3, r2
 800e26c:	ed72 7a01 	vldmdb	r2!, {s15}
 800e270:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e278:	d9e9      	bls.n	800e24e <forward_relu+0x82>
 800e27a:	3b08      	subs	r3, #8
 800e27c:	eef0 7a47 	vmov.f32	s15, s14
 800e280:	429d      	cmp	r5, r3
 800e282:	ed61 7a01 	vstmdb	r1!, {s15}
 800e286:	d9f0      	bls.n	800e26a <forward_relu+0x9e>
 800e288:	bc70      	pop	{r4, r5, r6}
 800e28a:	4770      	bx	lr
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	deff      	udf	#255	; 0xff
 800e290:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e294:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800e298:	4411      	add	r1, r2
 800e29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800e2a2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800e2a6:	d11f      	bne.n	800e2e8 <forward_relu+0x11c>
 800e2a8:	429d      	cmp	r5, r3
 800e2aa:	d8ed      	bhi.n	800e288 <forward_relu+0xbc>
 800e2ac:	1b5d      	subs	r5, r3, r5
 800e2ae:	1d1a      	adds	r2, r3, #4
 800e2b0:	1d01      	adds	r1, r0, #4
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	f025 0503 	bic.w	r5, r5, #3
 800e2b8:	1b5b      	subs	r3, r3, r5
 800e2ba:	ed72 7a01 	vldmdb	r2!, {s15}
 800e2be:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e2c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c6:	dc0a      	bgt.n	800e2de <forward_relu+0x112>
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	f841 0d04 	str.w	r0, [r1, #-4]!
 800e2ce:	d0db      	beq.n	800e288 <forward_relu+0xbc>
 800e2d0:	ed72 7a01 	vldmdb	r2!, {s15}
 800e2d4:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e2d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2dc:	ddf4      	ble.n	800e2c8 <forward_relu+0xfc>
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	ed61 7a01 	vstmdb	r1!, {s15}
 800e2e4:	d1e9      	bne.n	800e2ba <forward_relu+0xee>
 800e2e6:	e7cf      	b.n	800e288 <forward_relu+0xbc>
 800e2e8:	429d      	cmp	r5, r3
 800e2ea:	d8cd      	bhi.n	800e288 <forward_relu+0xbc>
 800e2ec:	1b5d      	subs	r5, r3, r5
 800e2ee:	1d1a      	adds	r2, r3, #4
 800e2f0:	1d01      	adds	r1, r0, #4
 800e2f2:	f025 0503 	bic.w	r5, r5, #3
 800e2f6:	1b5b      	subs	r3, r3, r5
 800e2f8:	ed72 7a01 	vldmdb	r2!, {s15}
 800e2fc:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e304:	db0e      	blt.n	800e324 <forward_relu+0x158>
 800e306:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e30a:	4293      	cmp	r3, r2
 800e30c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e310:	ed61 7a01 	vstmdb	r1!, {s15}
 800e314:	d0b8      	beq.n	800e288 <forward_relu+0xbc>
 800e316:	ed72 7a01 	vldmdb	r2!, {s15}
 800e31a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e31e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e322:	daf0      	bge.n	800e306 <forward_relu+0x13a>
 800e324:	4293      	cmp	r3, r2
 800e326:	ed61 7a01 	vstmdb	r1!, {s15}
 800e32a:	d1e5      	bne.n	800e2f8 <forward_relu+0x12c>
 800e32c:	e7ac      	b.n	800e288 <forward_relu+0xbc>
 800e32e:	6999      	ldr	r1, [r3, #24]
 800e330:	6893      	ldr	r3, [r2, #8]
 800e332:	6990      	ldr	r0, [r2, #24]
 800e334:	0a1b      	lsrs	r3, r3, #8
 800e336:	6889      	ldr	r1, [r1, #8]
 800e338:	6884      	ldr	r4, [r0, #8]
 800e33a:	d06e      	beq.n	800e41a <forward_relu+0x24e>
 800e33c:	68d5      	ldr	r5, [r2, #12]
 800e33e:	2201      	movs	r2, #1
 800e340:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e344:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800e348:	429d      	cmp	r5, r3
 800e34a:	fb00 f202 	mul.w	r2, r0, r2
 800e34e:	d1f9      	bne.n	800e344 <forward_relu+0x178>
 800e350:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e354:	4413      	add	r3, r2
 800e356:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e35a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e35e:	4294      	cmp	r4, r2
 800e360:	d892      	bhi.n	800e288 <forward_relu+0xbc>
 800e362:	3204      	adds	r2, #4
 800e364:	3104      	adds	r1, #4
 800e366:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e430 <forward_relu+0x264>
 800e36a:	4613      	mov	r3, r2
 800e36c:	ed72 7a01 	vldmdb	r2!, {s15}
 800e370:	3b08      	subs	r3, #8
 800e372:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e376:	ed61 7a01 	vstmdb	r1!, {s15}
 800e37a:	429c      	cmp	r4, r3
 800e37c:	d9f5      	bls.n	800e36a <forward_relu+0x19e>
 800e37e:	bc70      	pop	{r4, r5, r6}
 800e380:	4770      	bx	lr
 800e382:	6993      	ldr	r3, [r2, #24]
 800e384:	6880      	ldr	r0, [r0, #8]
 800e386:	689c      	ldr	r4, [r3, #8]
 800e388:	6893      	ldr	r3, [r2, #8]
 800e38a:	0a1b      	lsrs	r3, r3, #8
 800e38c:	d047      	beq.n	800e41e <forward_relu+0x252>
 800e38e:	68d5      	ldr	r5, [r2, #12]
 800e390:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e394:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e398:	42ab      	cmp	r3, r5
 800e39a:	fb02 f101 	mul.w	r1, r2, r1
 800e39e:	d1f9      	bne.n	800e394 <forward_relu+0x1c8>
 800e3a0:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800e3a4:	68b3      	ldr	r3, [r6, #8]
 800e3a6:	440a      	add	r2, r1
 800e3a8:	ed93 7a00 	vldr	s14, [r3]
 800e3ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e3b0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e3b4:	429c      	cmp	r4, r3
 800e3b6:	f63f af67 	bhi.w	800e288 <forward_relu+0xbc>
 800e3ba:	1d02      	adds	r2, r0, #4
 800e3bc:	3304      	adds	r3, #4
 800e3be:	2000      	movs	r0, #0
 800e3c0:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e3c4:	1f19      	subs	r1, r3, #4
 800e3c6:	3b08      	subs	r3, #8
 800e3c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d0:	d406      	bmi.n	800e3e0 <forward_relu+0x214>
 800e3d2:	429c      	cmp	r4, r3
 800e3d4:	f842 0d04 	str.w	r0, [r2, #-4]!
 800e3d8:	f63f af56 	bhi.w	800e288 <forward_relu+0xbc>
 800e3dc:	460b      	mov	r3, r1
 800e3de:	e7ef      	b.n	800e3c0 <forward_relu+0x1f4>
 800e3e0:	429c      	cmp	r4, r3
 800e3e2:	ed62 7a01 	vstmdb	r2!, {s15}
 800e3e6:	f63f af4f 	bhi.w	800e288 <forward_relu+0xbc>
 800e3ea:	460b      	mov	r3, r1
 800e3ec:	e7e8      	b.n	800e3c0 <forward_relu+0x1f4>
 800e3ee:	68b3      	ldr	r3, [r6, #8]
 800e3f0:	ed93 7a02 	vldr	s14, [r3, #8]
 800e3f4:	edd3 6a00 	vldr	s13, [r3]
 800e3f8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e3fc:	ed93 6a01 	vldr	s12, [r3, #4]
 800e400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e404:	d401      	bmi.n	800e40a <forward_relu+0x23e>
 800e406:	462a      	mov	r2, r5
 800e408:	e71e      	b.n	800e248 <forward_relu+0x7c>
 800e40a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e40e:	462b      	mov	r3, r5
 800e410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e414:	f47f af6a 	bne.w	800e2ec <forward_relu+0x120>
 800e418:	e748      	b.n	800e2ac <forward_relu+0xe0>
 800e41a:	4622      	mov	r2, r4
 800e41c:	e7a1      	b.n	800e362 <forward_relu+0x196>
 800e41e:	68b2      	ldr	r2, [r6, #8]
 800e420:	4623      	mov	r3, r4
 800e422:	ed92 7a00 	vldr	s14, [r2]
 800e426:	e7c8      	b.n	800e3ba <forward_relu+0x1ee>
 800e428:	2300      	movs	r3, #0
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	deff      	udf	#255	; 0xff
 800e42e:	bf00      	nop
 800e430:	00000000 	.word	0x00000000

0800e434 <forward_sm>:
 800e434:	6982      	ldr	r2, [r0, #24]
 800e436:	8813      	ldrh	r3, [r2, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d078      	beq.n	800e52e <forward_sm+0xfa>
 800e43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e440:	ed2d 8b04 	vpush	{d8-d9}
 800e444:	6852      	ldr	r2, [r2, #4]
 800e446:	b085      	sub	sp, #20
 800e448:	6854      	ldr	r4, [r2, #4]
 800e44a:	b104      	cbz	r4, 800e44e <forward_sm+0x1a>
 800e44c:	6824      	ldr	r4, [r4, #0]
 800e44e:	2b01      	cmp	r3, #1
 800e450:	d072      	beq.n	800e538 <forward_sm+0x104>
 800e452:	6913      	ldr	r3, [r2, #16]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d072      	beq.n	800e53e <forward_sm+0x10a>
 800e458:	681e      	ldr	r6, [r3, #0]
 800e45a:	68a3      	ldr	r3, [r4, #8]
 800e45c:	68e0      	ldr	r0, [r4, #12]
 800e45e:	68f2      	ldr	r2, [r6, #12]
 800e460:	0a1b      	lsrs	r3, r3, #8
 800e462:	6845      	ldr	r5, [r0, #4]
 800e464:	6857      	ldr	r7, [r2, #4]
 800e466:	d064      	beq.n	800e532 <forward_sm+0xfe>
 800e468:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e46c:	2201      	movs	r2, #1
 800e46e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e472:	4298      	cmp	r0, r3
 800e474:	fb01 f202 	mul.w	r2, r1, r2
 800e478:	d1f9      	bne.n	800e46e <forward_sm+0x3a>
 800e47a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800e47e:	69a2      	ldr	r2, [r4, #24]
 800e480:	69b3      	ldr	r3, [r6, #24]
 800e482:	6892      	ldr	r2, [r2, #8]
 800e484:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e488:	eb02 0309 	add.w	r3, r2, r9
 800e48c:	429a      	cmp	r2, r3
 800e48e:	9301      	str	r3, [sp, #4]
 800e490:	d248      	bcs.n	800e524 <forward_sm+0xf0>
 800e492:	00bb      	lsls	r3, r7, #2
 800e494:	2d01      	cmp	r5, #1
 800e496:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800e49a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800e49e:	9303      	str	r3, [sp, #12]
 800e4a0:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800e4a4:	463e      	mov	r6, r7
 800e4a6:	ed92 8a00 	vldr	s16, [r2]
 800e4aa:	9302      	str	r3, [sp, #8]
 800e4ac:	d937      	bls.n	800e51e <forward_sm+0xea>
 800e4ae:	1d13      	adds	r3, r2, #4
 800e4b0:	ecf3 7a01 	vldmia	r3!, {s15}
 800e4b4:	429e      	cmp	r6, r3
 800e4b6:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800e4ba:	d1f9      	bne.n	800e4b0 <forward_sm+0x7c>
 800e4bc:	4692      	mov	sl, r2
 800e4be:	46c3      	mov	fp, r8
 800e4c0:	46c1      	mov	r9, r8
 800e4c2:	eddf 8a20 	vldr	s17, [pc, #128]	; 800e544 <forward_sm+0x110>
 800e4c6:	2400      	movs	r4, #0
 800e4c8:	ecba 0a01 	vldmia	sl!, {s0}
 800e4cc:	3401      	adds	r4, #1
 800e4ce:	ee30 0a48 	vsub.f32	s0, s0, s16
 800e4d2:	f001 f823 	bl	800f51c <expf>
 800e4d6:	42a5      	cmp	r5, r4
 800e4d8:	ee78 8a80 	vadd.f32	s17, s17, s0
 800e4dc:	eca9 0a01 	vstmia	r9!, {s0}
 800e4e0:	d8f2      	bhi.n	800e4c8 <forward_sm+0x94>
 800e4e2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ea:	d00b      	beq.n	800e504 <forward_sm+0xd0>
 800e4ec:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	eddb 7a00 	vldr	s15, [fp]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	429d      	cmp	r5, r3
 800e4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4fe:	eceb 7a01 	vstmia	fp!, {s15}
 800e502:	d8f6      	bhi.n	800e4f2 <forward_sm+0xbe>
 800e504:	9b03      	ldr	r3, [sp, #12]
 800e506:	463a      	mov	r2, r7
 800e508:	9901      	ldr	r1, [sp, #4]
 800e50a:	4498      	add	r8, r3
 800e50c:	9b02      	ldr	r3, [sp, #8]
 800e50e:	42b9      	cmp	r1, r7
 800e510:	441e      	add	r6, r3
 800e512:	d907      	bls.n	800e524 <forward_sm+0xf0>
 800e514:	2d01      	cmp	r5, #1
 800e516:	441f      	add	r7, r3
 800e518:	ed92 8a00 	vldr	s16, [r2]
 800e51c:	d8c7      	bhi.n	800e4ae <forward_sm+0x7a>
 800e51e:	2d00      	cmp	r5, #0
 800e520:	d0f0      	beq.n	800e504 <forward_sm+0xd0>
 800e522:	e7cb      	b.n	800e4bc <forward_sm+0x88>
 800e524:	b005      	add	sp, #20
 800e526:	ecbd 8b04 	vpop	{d8-d9}
 800e52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	deff      	udf	#255	; 0xff
 800e532:	f04f 0904 	mov.w	r9, #4
 800e536:	e7a2      	b.n	800e47e <forward_sm+0x4a>
 800e538:	2300      	movs	r3, #0
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	deff      	udf	#255	; 0xff
 800e53e:	68db      	ldr	r3, [r3, #12]
 800e540:	deff      	udf	#255	; 0xff
 800e542:	bf00      	nop
 800e544:	00000000 	.word	0x00000000

0800e548 <forward_bn>:
 800e548:	6982      	ldr	r2, [r0, #24]
 800e54a:	8813      	ldrh	r3, [r2, #0]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d055      	beq.n	800e5fc <forward_bn+0xb4>
 800e550:	6852      	ldr	r2, [r2, #4]
 800e552:	6850      	ldr	r0, [r2, #4]
 800e554:	b100      	cbz	r0, 800e558 <forward_bn+0x10>
 800e556:	6800      	ldr	r0, [r0, #0]
 800e558:	2b01      	cmp	r3, #1
 800e55a:	f000 809c 	beq.w	800e696 <forward_bn+0x14e>
 800e55e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e562:	6915      	ldr	r5, [r2, #16]
 800e564:	b105      	cbz	r5, 800e568 <forward_bn+0x20>
 800e566:	682d      	ldr	r5, [r5, #0]
 800e568:	2b02      	cmp	r3, #2
 800e56a:	d049      	beq.n	800e600 <forward_bn+0xb8>
 800e56c:	69d1      	ldr	r1, [r2, #28]
 800e56e:	2900      	cmp	r1, #0
 800e570:	d049      	beq.n	800e606 <forward_bn+0xbe>
 800e572:	8b13      	ldrh	r3, [r2, #24]
 800e574:	f8d1 c000 	ldr.w	ip, [r1]
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d945      	bls.n	800e608 <forward_bn+0xc0>
 800e57c:	6883      	ldr	r3, [r0, #8]
 800e57e:	684f      	ldr	r7, [r1, #4]
 800e580:	0a1b      	lsrs	r3, r3, #8
 800e582:	d06c      	beq.n	800e65e <forward_bn+0x116>
 800e584:	68c1      	ldr	r1, [r0, #12]
 800e586:	2401      	movs	r4, #1
 800e588:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e58c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e590:	428b      	cmp	r3, r1
 800e592:	fb02 f404 	mul.w	r4, r2, r4
 800e596:	d1f9      	bne.n	800e58c <forward_bn+0x44>
 800e598:	69aa      	ldr	r2, [r5, #24]
 800e59a:	6981      	ldr	r1, [r0, #24]
 800e59c:	685d      	ldr	r5, [r3, #4]
 800e59e:	6888      	ldr	r0, [r1, #8]
 800e5a0:	6896      	ldr	r6, [r2, #8]
 800e5a2:	b3b7      	cbz	r7, 800e612 <forward_bn+0xca>
 800e5a4:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800e5a8:	69bb      	ldr	r3, [r7, #24]
 800e5aa:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800e5ae:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e5b2:	b30c      	cbz	r4, 800e5f8 <forward_bn+0xb0>
 800e5b4:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 800e5b8:	f04f 0e00 	mov.w	lr, #0
 800e5bc:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800e5c0:	00bf      	lsls	r7, r7, #2
 800e5c2:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800e5c6:	4672      	mov	r2, lr
 800e5c8:	44ae      	add	lr, r5
 800e5ca:	4596      	cmp	lr, r2
 800e5cc:	d911      	bls.n	800e5f2 <forward_bn+0xaa>
 800e5ce:	eb07 030c 	add.w	r3, r7, ip
 800e5d2:	4648      	mov	r0, r9
 800e5d4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800e5d8:	4641      	mov	r1, r8
 800e5da:	ecf3 6a01 	vldmia	r3!, {s13}
 800e5de:	ecb0 7a01 	vldmia	r0!, {s14}
 800e5e2:	ecf1 7a01 	vldmia	r1!, {s15}
 800e5e6:	4563      	cmp	r3, ip
 800e5e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e5ec:	ece2 7a01 	vstmia	r2!, {s15}
 800e5f0:	d1f3      	bne.n	800e5da <forward_bn+0x92>
 800e5f2:	4574      	cmp	r4, lr
 800e5f4:	44d4      	add	ip, sl
 800e5f6:	d8e6      	bhi.n	800e5c6 <forward_bn+0x7e>
 800e5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5fc:	685b      	ldr	r3, [r3, #4]
 800e5fe:	deff      	udf	#255	; 0xff
 800e600:	2300      	movs	r3, #0
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	deff      	udf	#255	; 0xff
 800e606:	468c      	mov	ip, r1
 800e608:	6883      	ldr	r3, [r0, #8]
 800e60a:	0a1b      	lsrs	r3, r3, #8
 800e60c:	d037      	beq.n	800e67e <forward_bn+0x136>
 800e60e:	2700      	movs	r7, #0
 800e610:	e7b8      	b.n	800e584 <forward_bn+0x3c>
 800e612:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800e616:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e61a:	2c00      	cmp	r4, #0
 800e61c:	d0ec      	beq.n	800e5f8 <forward_bn+0xb0>
 800e61e:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 800e622:	46b6      	mov	lr, r6
 800e624:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800e628:	f04f 0c00 	mov.w	ip, #0
 800e62c:	00bf      	lsls	r7, r7, #2
 800e62e:	00ae      	lsls	r6, r5, #2
 800e630:	4663      	mov	r3, ip
 800e632:	44ac      	add	ip, r5
 800e634:	4563      	cmp	r3, ip
 800e636:	d20c      	bcs.n	800e652 <forward_bn+0x10a>
 800e638:	19c3      	adds	r3, r0, r7
 800e63a:	4641      	mov	r1, r8
 800e63c:	4672      	mov	r2, lr
 800e63e:	ecf3 7a01 	vldmia	r3!, {s15}
 800e642:	ecb1 7a01 	vldmia	r1!, {s14}
 800e646:	4298      	cmp	r0, r3
 800e648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e64c:	ece2 7a01 	vstmia	r2!, {s15}
 800e650:	d1f5      	bne.n	800e63e <forward_bn+0xf6>
 800e652:	4564      	cmp	r4, ip
 800e654:	44b6      	add	lr, r6
 800e656:	4430      	add	r0, r6
 800e658:	d8ea      	bhi.n	800e630 <forward_bn+0xe8>
 800e65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e65e:	68c1      	ldr	r1, [r0, #12]
 800e660:	69ab      	ldr	r3, [r5, #24]
 800e662:	6982      	ldr	r2, [r0, #24]
 800e664:	684d      	ldr	r5, [r1, #4]
 800e666:	6890      	ldr	r0, [r2, #8]
 800e668:	689e      	ldr	r6, [r3, #8]
 800e66a:	b177      	cbz	r7, 800e68a <forward_bn+0x142>
 800e66c:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800e670:	2401      	movs	r4, #1
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800e678:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e67c:	e79a      	b.n	800e5b4 <forward_bn+0x6c>
 800e67e:	68c1      	ldr	r1, [r0, #12]
 800e680:	69ab      	ldr	r3, [r5, #24]
 800e682:	6982      	ldr	r2, [r0, #24]
 800e684:	684d      	ldr	r5, [r1, #4]
 800e686:	6890      	ldr	r0, [r2, #8]
 800e688:	689e      	ldr	r6, [r3, #8]
 800e68a:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800e68e:	2401      	movs	r4, #1
 800e690:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e694:	e7c3      	b.n	800e61e <forward_bn+0xd6>
 800e696:	2300      	movs	r3, #0
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	deff      	udf	#255	; 0xff

0800e69c <ai_check_custom_types>:
 800e69c:	b082      	sub	sp, #8
 800e69e:	4b12      	ldr	r3, [pc, #72]	; (800e6e8 <ai_check_custom_types+0x4c>)
 800e6a0:	9301      	str	r3, [sp, #4]
 800e6a2:	b118      	cbz	r0, 800e6ac <ai_check_custom_types+0x10>
 800e6a4:	7803      	ldrb	r3, [r0, #0]
 800e6a6:	2b03      	cmp	r3, #3
 800e6a8:	d002      	beq.n	800e6b0 <ai_check_custom_types+0x14>
 800e6aa:	2000      	movs	r0, #0
 800e6ac:	b002      	add	sp, #8
 800e6ae:	4770      	bx	lr
 800e6b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e6b4:	4293      	cmp	r3, r2
 800e6b6:	d004      	beq.n	800e6c2 <ai_check_custom_types+0x26>
 800e6b8:	2001      	movs	r0, #1
 800e6ba:	f080 0001 	eor.w	r0, r0, #1
 800e6be:	b002      	add	sp, #8
 800e6c0:	4770      	bx	lr
 800e6c2:	7842      	ldrb	r2, [r0, #1]
 800e6c4:	3001      	adds	r0, #1
 800e6c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d1f4      	bne.n	800e6b8 <ai_check_custom_types+0x1c>
 800e6ce:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e6d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e6d6:	429a      	cmp	r2, r3
 800e6d8:	d1ee      	bne.n	800e6b8 <ai_check_custom_types+0x1c>
 800e6da:	7842      	ldrb	r2, [r0, #1]
 800e6dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d1e9      	bne.n	800e6b8 <ai_check_custom_types+0x1c>
 800e6e4:	2000      	movs	r0, #0
 800e6e6:	e7e8      	b.n	800e6ba <ai_check_custom_types+0x1e>
 800e6e8:	84048403 	.word	0x84048403

0800e6ec <ai_layers_init_all>:
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e6f0:	b13b      	cbz	r3, 800e702 <ai_layers_init_all+0x16>
 800e6f2:	691a      	ldr	r2, [r3, #16]
 800e6f4:	3101      	adds	r1, #1
 800e6f6:	60d8      	str	r0, [r3, #12]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	4613      	mov	r3, r2
 800e6fc:	d001      	beq.n	800e702 <ai_layers_init_all+0x16>
 800e6fe:	2a00      	cmp	r2, #0
 800e700:	d1f6      	bne.n	800e6f0 <ai_layers_init_all+0x4>
 800e702:	4608      	mov	r0, r1
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop

0800e708 <ai_layers_post_init_all>:
 800e708:	b538      	push	{r3, r4, r5, lr}
 800e70a:	2500      	movs	r5, #0
 800e70c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e70e:	b16c      	cbz	r4, 800e72c <ai_layers_post_init_all+0x24>
 800e710:	6863      	ldr	r3, [r4, #4]
 800e712:	07db      	lsls	r3, r3, #31
 800e714:	d504      	bpl.n	800e720 <ai_layers_post_init_all+0x18>
 800e716:	6a23      	ldr	r3, [r4, #32]
 800e718:	4620      	mov	r0, r4
 800e71a:	b10b      	cbz	r3, 800e720 <ai_layers_post_init_all+0x18>
 800e71c:	3501      	adds	r5, #1
 800e71e:	4798      	blx	r3
 800e720:	6923      	ldr	r3, [r4, #16]
 800e722:	42a3      	cmp	r3, r4
 800e724:	461c      	mov	r4, r3
 800e726:	d001      	beq.n	800e72c <ai_layers_post_init_all+0x24>
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d1f0      	bne.n	800e70e <ai_layers_post_init_all+0x6>
 800e72c:	4628      	mov	r0, r5
 800e72e:	bd38      	pop	{r3, r4, r5, pc}

0800e730 <ai_layers_forward_all>:
 800e730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e734:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800e738:	4604      	mov	r4, r0
 800e73a:	f1b8 0f00 	cmp.w	r8, #0
 800e73e:	d02a      	beq.n	800e796 <ai_layers_forward_all+0x66>
 800e740:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e742:	6381      	str	r1, [r0, #56]	; 0x38
 800e744:	b319      	cbz	r1, 800e78e <ai_layers_forward_all+0x5e>
 800e746:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e748:	2001      	movs	r0, #1
 800e74a:	47c0      	blx	r8
 800e74c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e74e:	b1f6      	cbz	r6, 800e78e <ai_layers_forward_all+0x5e>
 800e750:	2700      	movs	r7, #0
 800e752:	4631      	mov	r1, r6
 800e754:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e756:	2002      	movs	r0, #2
 800e758:	47c0      	blx	r8
 800e75a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800e75c:	4628      	mov	r0, r5
 800e75e:	696b      	ldr	r3, [r5, #20]
 800e760:	4798      	blx	r3
 800e762:	692e      	ldr	r6, [r5, #16]
 800e764:	2003      	movs	r0, #3
 800e766:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e768:	42b5      	cmp	r5, r6
 800e76a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e76c:	d007      	beq.n	800e77e <ai_layers_forward_all+0x4e>
 800e76e:	47c0      	blx	r8
 800e770:	3701      	adds	r7, #1
 800e772:	63a6      	str	r6, [r4, #56]	; 0x38
 800e774:	2e00      	cmp	r6, #0
 800e776:	d1ec      	bne.n	800e752 <ai_layers_forward_all+0x22>
 800e778:	4638      	mov	r0, r7
 800e77a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e77e:	2003      	movs	r0, #3
 800e780:	3701      	adds	r7, #1
 800e782:	47c0      	blx	r8
 800e784:	2300      	movs	r3, #0
 800e786:	4638      	mov	r0, r7
 800e788:	63a3      	str	r3, [r4, #56]	; 0x38
 800e78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e78e:	2700      	movs	r7, #0
 800e790:	4638      	mov	r0, r7
 800e792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e796:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800e798:	6385      	str	r5, [r0, #56]	; 0x38
 800e79a:	2d00      	cmp	r5, #0
 800e79c:	d0f7      	beq.n	800e78e <ai_layers_forward_all+0x5e>
 800e79e:	4647      	mov	r7, r8
 800e7a0:	696b      	ldr	r3, [r5, #20]
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	4798      	blx	r3
 800e7a6:	462b      	mov	r3, r5
 800e7a8:	692d      	ldr	r5, [r5, #16]
 800e7aa:	429d      	cmp	r5, r3
 800e7ac:	d004      	beq.n	800e7b8 <ai_layers_forward_all+0x88>
 800e7ae:	3701      	adds	r7, #1
 800e7b0:	63a5      	str	r5, [r4, #56]	; 0x38
 800e7b2:	2d00      	cmp	r5, #0
 800e7b4:	d1f4      	bne.n	800e7a0 <ai_layers_forward_all+0x70>
 800e7b6:	e7df      	b.n	800e778 <ai_layers_forward_all+0x48>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	3701      	adds	r7, #1
 800e7bc:	63a3      	str	r3, [r4, #56]	; 0x38
 800e7be:	e7db      	b.n	800e778 <ai_layers_forward_all+0x48>

0800e7c0 <lite_dense_if32of32wf32>:
 800e7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c4:	ed2d 8b0c 	vpush	{d8-d13}
 800e7c8:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 800e7cc:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800e7d0:	4287      	cmp	r7, r0
 800e7d2:	f240 8105 	bls.w	800e9e0 <lite_dense_if32of32wf32+0x220>
 800e7d6:	f1a6 0810 	sub.w	r8, r6, #16
 800e7da:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800e7de:	4605      	mov	r5, r0
 800e7e0:	f006 0b0f 	and.w	fp, r6, #15
 800e7e4:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800e7e8:	f108 0801 	add.w	r8, r8, #1
 800e7ec:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800e7f0:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800e7f4:	2e0f      	cmp	r6, #15
 800e7f6:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800ea0c <lite_dense_if32of32wf32+0x24c>
 800e7fa:	f240 8102 	bls.w	800ea02 <lite_dense_if32of32wf32+0x242>
 800e7fe:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800e802:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800e806:	46b6      	mov	lr, r6
 800e808:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 800e80c:	f1ae 0e10 	sub.w	lr, lr, #16
 800e810:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800e814:	3440      	adds	r4, #64	; 0x40
 800e816:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 800e81a:	f1be 0f0f 	cmp.w	lr, #15
 800e81e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e822:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 800e826:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800e82a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e82e:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 800e832:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e836:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 800e83a:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 800e83e:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 800e842:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 800e846:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 800e84a:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 800e84e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e852:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 800e856:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 800e85a:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 800e85e:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 800e862:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 800e866:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 800e86a:	eeed 7a26 	vfma.f32	s15, s26, s13
 800e86e:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 800e872:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 800e876:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 800e87a:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 800e87e:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 800e882:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800e886:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800e88a:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800e88e:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800e892:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800e896:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800e89a:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800e89e:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800e8a2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800e8a6:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800e8aa:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800e8ae:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800e8b2:	eee9 7a89 	vfma.f32	s15, s19, s18
 800e8b6:	eee8 7a88 	vfma.f32	s15, s17, s16
 800e8ba:	eee0 7a20 	vfma.f32	s15, s0, s1
 800e8be:	eee1 7a21 	vfma.f32	s15, s2, s3
 800e8c2:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e8c6:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e8ca:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e8ce:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e8d2:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e8d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e8da:	d895      	bhi.n	800e808 <lite_dense_if32of32wf32+0x48>
 800e8dc:	eb02 0e0a 	add.w	lr, r2, sl
 800e8e0:	465c      	mov	r4, fp
 800e8e2:	46c4      	mov	ip, r8
 800e8e4:	2c00      	cmp	r4, #0
 800e8e6:	d075      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e8e8:	eddc 6a00 	vldr	s13, [ip]
 800e8ec:	2c01      	cmp	r4, #1
 800e8ee:	edde 7a00 	vldr	s15, [lr]
 800e8f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e8f6:	d06d      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e8f8:	eddc 6a01 	vldr	s13, [ip, #4]
 800e8fc:	2c02      	cmp	r4, #2
 800e8fe:	edde 7a01 	vldr	s15, [lr, #4]
 800e902:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e906:	d065      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e908:	eddc 6a02 	vldr	s13, [ip, #8]
 800e90c:	2c03      	cmp	r4, #3
 800e90e:	edde 7a02 	vldr	s15, [lr, #8]
 800e912:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e916:	d05d      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e918:	eddc 6a03 	vldr	s13, [ip, #12]
 800e91c:	2c04      	cmp	r4, #4
 800e91e:	edde 7a03 	vldr	s15, [lr, #12]
 800e922:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e926:	d055      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e928:	eddc 6a04 	vldr	s13, [ip, #16]
 800e92c:	2c05      	cmp	r4, #5
 800e92e:	edde 7a04 	vldr	s15, [lr, #16]
 800e932:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e936:	d04d      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e938:	eddc 6a05 	vldr	s13, [ip, #20]
 800e93c:	2c06      	cmp	r4, #6
 800e93e:	edde 7a05 	vldr	s15, [lr, #20]
 800e942:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e946:	d045      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e948:	eddc 6a06 	vldr	s13, [ip, #24]
 800e94c:	2c07      	cmp	r4, #7
 800e94e:	edde 7a06 	vldr	s15, [lr, #24]
 800e952:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e956:	d03d      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e958:	eddc 6a07 	vldr	s13, [ip, #28]
 800e95c:	2c08      	cmp	r4, #8
 800e95e:	edde 7a07 	vldr	s15, [lr, #28]
 800e962:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e966:	d035      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e968:	eddc 6a08 	vldr	s13, [ip, #32]
 800e96c:	2c09      	cmp	r4, #9
 800e96e:	edde 7a08 	vldr	s15, [lr, #32]
 800e972:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e976:	d02d      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e978:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800e97c:	2c0a      	cmp	r4, #10
 800e97e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800e982:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e986:	d025      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e988:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800e98c:	2c0b      	cmp	r4, #11
 800e98e:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800e992:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e996:	d01d      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e998:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800e99c:	2c0c      	cmp	r4, #12
 800e99e:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800e9a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9a6:	d015      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e9a8:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800e9ac:	3c0d      	subs	r4, #13
 800e9ae:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800e9b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9b6:	d00d      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e9b8:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800e9bc:	2c01      	cmp	r4, #1
 800e9be:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800e9c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9c6:	d005      	beq.n	800e9d4 <lite_dense_if32of32wf32+0x214>
 800e9c8:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800e9cc:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800e9d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9d4:	eca5 7a01 	vstmia	r5!, {s14}
 800e9d8:	42af      	cmp	r7, r5
 800e9da:	444a      	add	r2, r9
 800e9dc:	f63f af0a 	bhi.w	800e7f4 <lite_dense_if32of32wf32+0x34>
 800e9e0:	b15b      	cbz	r3, 800e9fa <lite_dense_if32of32wf32+0x23a>
 800e9e2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e9e4:	b14a      	cbz	r2, 800e9fa <lite_dense_if32of32wf32+0x23a>
 800e9e6:	edd0 7a00 	vldr	s15, [r0]
 800e9ea:	ecb3 7a01 	vldmia	r3!, {s14}
 800e9ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9f2:	ece0 7a01 	vstmia	r0!, {s15}
 800e9f6:	4287      	cmp	r7, r0
 800e9f8:	d1f5      	bne.n	800e9e6 <lite_dense_if32of32wf32+0x226>
 800e9fa:	ecbd 8b0c 	vpop	{d8-d13}
 800e9fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea02:	4634      	mov	r4, r6
 800ea04:	4696      	mov	lr, r2
 800ea06:	468c      	mov	ip, r1
 800ea08:	e76c      	b.n	800e8e4 <lite_dense_if32of32wf32+0x124>
 800ea0a:	bf00      	nop
 800ea0c:	00000000 	.word	0x00000000

0800ea10 <ai_version_get>:
 800ea10:	0212      	lsls	r2, r2, #8
 800ea12:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ea16:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800ea1a:	4770      	bx	lr

0800ea1c <get_tensor_byte_size>:
 800ea1c:	b430      	push	{r4, r5}
 800ea1e:	6985      	ldr	r5, [r0, #24]
 800ea20:	68c4      	ldr	r4, [r0, #12]
 800ea22:	6941      	ldr	r1, [r0, #20]
 800ea24:	4b06      	ldr	r3, [pc, #24]	; (800ea40 <get_tensor_byte_size+0x24>)
 800ea26:	6828      	ldr	r0, [r5, #0]
 800ea28:	4a06      	ldr	r2, [pc, #24]	; (800ea44 <get_tensor_byte_size+0x28>)
 800ea2a:	4003      	ands	r3, r0
 800ea2c:	68c9      	ldr	r1, [r1, #12]
 800ea2e:	68e0      	ldr	r0, [r4, #12]
 800ea30:	4293      	cmp	r3, r2
 800ea32:	fb01 f000 	mul.w	r0, r1, r0
 800ea36:	d101      	bne.n	800ea3c <get_tensor_byte_size+0x20>
 800ea38:	3007      	adds	r0, #7
 800ea3a:	08c0      	lsrs	r0, r0, #3
 800ea3c:	bc30      	pop	{r4, r5}
 800ea3e:	4770      	bx	lr
 800ea40:	017fffff 	.word	0x017fffff
 800ea44:	000400c0 	.word	0x000400c0

0800ea48 <ai_array_to_buffer_fmt>:
 800ea48:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ea4c:	2b02      	cmp	r3, #2
 800ea4e:	d050      	beq.n	800eaf2 <ai_array_to_buffer_fmt+0xaa>
 800ea50:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800ea54:	4b29      	ldr	r3, [pc, #164]	; (800eafc <ai_array_to_buffer_fmt+0xb4>)
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d00b      	beq.n	800ea72 <ai_array_to_buffer_fmt+0x2a>
 800ea5a:	dc1c      	bgt.n	800ea96 <ai_array_to_buffer_fmt+0x4e>
 800ea5c:	4b28      	ldr	r3, [pc, #160]	; (800eb00 <ai_array_to_buffer_fmt+0xb8>)
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d007      	beq.n	800ea72 <ai_array_to_buffer_fmt+0x2a>
 800ea62:	dd0b      	ble.n	800ea7c <ai_array_to_buffer_fmt+0x34>
 800ea64:	4b27      	ldr	r3, [pc, #156]	; (800eb04 <ai_array_to_buffer_fmt+0xbc>)
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d003      	beq.n	800ea72 <ai_array_to_buffer_fmt+0x2a>
 800ea6a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d131      	bne.n	800ead6 <ai_array_to_buffer_fmt+0x8e>
 800ea72:	4613      	mov	r3, r2
 800ea74:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ea78:	4318      	orrs	r0, r3
 800ea7a:	4770      	bx	lr
 800ea7c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d0f6      	beq.n	800ea72 <ai_array_to_buffer_fmt+0x2a>
 800ea84:	dd2c      	ble.n	800eae0 <ai_array_to_buffer_fmt+0x98>
 800ea86:	4b20      	ldr	r3, [pc, #128]	; (800eb08 <ai_array_to_buffer_fmt+0xc0>)
 800ea88:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	bf18      	it	ne
 800ea90:	2340      	movne	r3, #64	; 0x40
 800ea92:	4318      	orrs	r0, r3
 800ea94:	4770      	bx	lr
 800ea96:	4b1d      	ldr	r3, [pc, #116]	; (800eb0c <ai_array_to_buffer_fmt+0xc4>)
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d0ea      	beq.n	800ea72 <ai_array_to_buffer_fmt+0x2a>
 800ea9c:	dd0e      	ble.n	800eabc <ai_array_to_buffer_fmt+0x74>
 800ea9e:	4b1c      	ldr	r3, [pc, #112]	; (800eb10 <ai_array_to_buffer_fmt+0xc8>)
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	d0e6      	beq.n	800ea72 <ai_array_to_buffer_fmt+0x2a>
 800eaa4:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d0e2      	beq.n	800ea72 <ai_array_to_buffer_fmt+0x2a>
 800eaac:	4b19      	ldr	r3, [pc, #100]	; (800eb14 <ai_array_to_buffer_fmt+0xcc>)
 800eaae:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800eab2:	429a      	cmp	r2, r3
 800eab4:	bf18      	it	ne
 800eab6:	2340      	movne	r3, #64	; 0x40
 800eab8:	4318      	orrs	r0, r3
 800eaba:	4770      	bx	lr
 800eabc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d0d6      	beq.n	800ea72 <ai_array_to_buffer_fmt+0x2a>
 800eac4:	3307      	adds	r3, #7
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d0d3      	beq.n	800ea72 <ai_array_to_buffer_fmt+0x2a>
 800eaca:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800eace:	429a      	cmp	r2, r3
 800ead0:	bf18      	it	ne
 800ead2:	2340      	movne	r3, #64	; 0x40
 800ead4:	e7ce      	b.n	800ea74 <ai_array_to_buffer_fmt+0x2c>
 800ead6:	4b10      	ldr	r3, [pc, #64]	; (800eb18 <ai_array_to_buffer_fmt+0xd0>)
 800ead8:	429a      	cmp	r2, r3
 800eada:	bf18      	it	ne
 800eadc:	2340      	movne	r3, #64	; 0x40
 800eade:	e7c9      	b.n	800ea74 <ai_array_to_buffer_fmt+0x2c>
 800eae0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d0c4      	beq.n	800ea72 <ai_array_to_buffer_fmt+0x2a>
 800eae8:	3380      	adds	r3, #128	; 0x80
 800eaea:	429a      	cmp	r2, r3
 800eaec:	bf18      	it	ne
 800eaee:	2340      	movne	r3, #64	; 0x40
 800eaf0:	e7c0      	b.n	800ea74 <ai_array_to_buffer_fmt+0x2c>
 800eaf2:	4b0a      	ldr	r3, [pc, #40]	; (800eb1c <ai_array_to_buffer_fmt+0xd4>)
 800eaf4:	4003      	ands	r3, r0
 800eaf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eafa:	e7bb      	b.n	800ea74 <ai_array_to_buffer_fmt+0x2c>
 800eafc:	00840040 	.word	0x00840040
 800eb00:	00040840 	.word	0x00040840
 800eb04:	00041040 	.word	0x00041040
 800eb08:	00040447 	.word	0x00040447
 800eb0c:	00840840 	.word	0x00840840
 800eb10:	00841040 	.word	0x00841040
 800eb14:	0084084f 	.word	0x0084084f
 800eb18:	0004084f 	.word	0x0004084f
 800eb1c:	00803fff 	.word	0x00803fff

0800eb20 <ai_array_get_byte_size>:
 800eb20:	b319      	cbz	r1, 800eb6a <ai_array_get_byte_size+0x4a>
 800eb22:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800eb26:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800eb2a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800eb2e:	11c0      	asrs	r0, r0, #7
 800eb30:	fb03 f101 	mul.w	r1, r3, r1
 800eb34:	2a04      	cmp	r2, #4
 800eb36:	f101 0107 	add.w	r1, r1, #7
 800eb3a:	f021 0107 	bic.w	r1, r1, #7
 800eb3e:	fa21 f10c 	lsr.w	r1, r1, ip
 800eb42:	d00b      	beq.n	800eb5c <ai_array_get_byte_size+0x3c>
 800eb44:	2a08      	cmp	r2, #8
 800eb46:	d002      	beq.n	800eb4e <ai_array_get_byte_size+0x2e>
 800eb48:	3107      	adds	r1, #7
 800eb4a:	08c8      	lsrs	r0, r1, #3
 800eb4c:	4770      	bx	lr
 800eb4e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800eb52:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800eb56:	3107      	adds	r1, #7
 800eb58:	08c8      	lsrs	r0, r1, #3
 800eb5a:	4770      	bx	lr
 800eb5c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800eb60:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800eb64:	3107      	adds	r1, #7
 800eb66:	08c8      	lsrs	r0, r1, #3
 800eb68:	4770      	bx	lr
 800eb6a:	4608      	mov	r0, r1
 800eb6c:	4770      	bx	lr
 800eb6e:	bf00      	nop

0800eb70 <ai_array_get_data_byte_size>:
 800eb70:	b161      	cbz	r1, 800eb8c <ai_array_get_data_byte_size+0x1c>
 800eb72:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800eb76:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800eb7a:	fb03 f101 	mul.w	r1, r3, r1
 800eb7e:	1dc8      	adds	r0, r1, #7
 800eb80:	f020 0007 	bic.w	r0, r0, #7
 800eb84:	40d0      	lsrs	r0, r2
 800eb86:	3007      	adds	r0, #7
 800eb88:	08c0      	lsrs	r0, r0, #3
 800eb8a:	4770      	bx	lr
 800eb8c:	4608      	mov	r0, r1
 800eb8e:	4770      	bx	lr

0800eb90 <__errno>:
 800eb90:	4b01      	ldr	r3, [pc, #4]	; (800eb98 <__errno+0x8>)
 800eb92:	6818      	ldr	r0, [r3, #0]
 800eb94:	4770      	bx	lr
 800eb96:	bf00      	nop
 800eb98:	200013b8 	.word	0x200013b8

0800eb9c <__libc_init_array>:
 800eb9c:	b570      	push	{r4, r5, r6, lr}
 800eb9e:	4d0d      	ldr	r5, [pc, #52]	; (800ebd4 <__libc_init_array+0x38>)
 800eba0:	4c0d      	ldr	r4, [pc, #52]	; (800ebd8 <__libc_init_array+0x3c>)
 800eba2:	1b64      	subs	r4, r4, r5
 800eba4:	10a4      	asrs	r4, r4, #2
 800eba6:	2600      	movs	r6, #0
 800eba8:	42a6      	cmp	r6, r4
 800ebaa:	d109      	bne.n	800ebc0 <__libc_init_array+0x24>
 800ebac:	4d0b      	ldr	r5, [pc, #44]	; (800ebdc <__libc_init_array+0x40>)
 800ebae:	4c0c      	ldr	r4, [pc, #48]	; (800ebe0 <__libc_init_array+0x44>)
 800ebb0:	f000 fd28 	bl	800f604 <_init>
 800ebb4:	1b64      	subs	r4, r4, r5
 800ebb6:	10a4      	asrs	r4, r4, #2
 800ebb8:	2600      	movs	r6, #0
 800ebba:	42a6      	cmp	r6, r4
 800ebbc:	d105      	bne.n	800ebca <__libc_init_array+0x2e>
 800ebbe:	bd70      	pop	{r4, r5, r6, pc}
 800ebc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebc4:	4798      	blx	r3
 800ebc6:	3601      	adds	r6, #1
 800ebc8:	e7ee      	b.n	800eba8 <__libc_init_array+0xc>
 800ebca:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebce:	4798      	blx	r3
 800ebd0:	3601      	adds	r6, #1
 800ebd2:	e7f2      	b.n	800ebba <__libc_init_array+0x1e>
 800ebd4:	0816e1d0 	.word	0x0816e1d0
 800ebd8:	0816e1d0 	.word	0x0816e1d0
 800ebdc:	0816e1d0 	.word	0x0816e1d0
 800ebe0:	0816e1d4 	.word	0x0816e1d4

0800ebe4 <memcpy>:
 800ebe4:	440a      	add	r2, r1
 800ebe6:	4291      	cmp	r1, r2
 800ebe8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ebec:	d100      	bne.n	800ebf0 <memcpy+0xc>
 800ebee:	4770      	bx	lr
 800ebf0:	b510      	push	{r4, lr}
 800ebf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebfa:	4291      	cmp	r1, r2
 800ebfc:	d1f9      	bne.n	800ebf2 <memcpy+0xe>
 800ebfe:	bd10      	pop	{r4, pc}

0800ec00 <memset>:
 800ec00:	4402      	add	r2, r0
 800ec02:	4603      	mov	r3, r0
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d100      	bne.n	800ec0a <memset+0xa>
 800ec08:	4770      	bx	lr
 800ec0a:	f803 1b01 	strb.w	r1, [r3], #1
 800ec0e:	e7f9      	b.n	800ec04 <memset+0x4>

0800ec10 <_free_r>:
 800ec10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec12:	2900      	cmp	r1, #0
 800ec14:	d044      	beq.n	800eca0 <_free_r+0x90>
 800ec16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec1a:	9001      	str	r0, [sp, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	f1a1 0404 	sub.w	r4, r1, #4
 800ec22:	bfb8      	it	lt
 800ec24:	18e4      	addlt	r4, r4, r3
 800ec26:	f000 f903 	bl	800ee30 <__malloc_lock>
 800ec2a:	4a1e      	ldr	r2, [pc, #120]	; (800eca4 <_free_r+0x94>)
 800ec2c:	9801      	ldr	r0, [sp, #4]
 800ec2e:	6813      	ldr	r3, [r2, #0]
 800ec30:	b933      	cbnz	r3, 800ec40 <_free_r+0x30>
 800ec32:	6063      	str	r3, [r4, #4]
 800ec34:	6014      	str	r4, [r2, #0]
 800ec36:	b003      	add	sp, #12
 800ec38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec3c:	f000 b8fe 	b.w	800ee3c <__malloc_unlock>
 800ec40:	42a3      	cmp	r3, r4
 800ec42:	d908      	bls.n	800ec56 <_free_r+0x46>
 800ec44:	6825      	ldr	r5, [r4, #0]
 800ec46:	1961      	adds	r1, r4, r5
 800ec48:	428b      	cmp	r3, r1
 800ec4a:	bf01      	itttt	eq
 800ec4c:	6819      	ldreq	r1, [r3, #0]
 800ec4e:	685b      	ldreq	r3, [r3, #4]
 800ec50:	1949      	addeq	r1, r1, r5
 800ec52:	6021      	streq	r1, [r4, #0]
 800ec54:	e7ed      	b.n	800ec32 <_free_r+0x22>
 800ec56:	461a      	mov	r2, r3
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	b10b      	cbz	r3, 800ec60 <_free_r+0x50>
 800ec5c:	42a3      	cmp	r3, r4
 800ec5e:	d9fa      	bls.n	800ec56 <_free_r+0x46>
 800ec60:	6811      	ldr	r1, [r2, #0]
 800ec62:	1855      	adds	r5, r2, r1
 800ec64:	42a5      	cmp	r5, r4
 800ec66:	d10b      	bne.n	800ec80 <_free_r+0x70>
 800ec68:	6824      	ldr	r4, [r4, #0]
 800ec6a:	4421      	add	r1, r4
 800ec6c:	1854      	adds	r4, r2, r1
 800ec6e:	42a3      	cmp	r3, r4
 800ec70:	6011      	str	r1, [r2, #0]
 800ec72:	d1e0      	bne.n	800ec36 <_free_r+0x26>
 800ec74:	681c      	ldr	r4, [r3, #0]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	6053      	str	r3, [r2, #4]
 800ec7a:	4421      	add	r1, r4
 800ec7c:	6011      	str	r1, [r2, #0]
 800ec7e:	e7da      	b.n	800ec36 <_free_r+0x26>
 800ec80:	d902      	bls.n	800ec88 <_free_r+0x78>
 800ec82:	230c      	movs	r3, #12
 800ec84:	6003      	str	r3, [r0, #0]
 800ec86:	e7d6      	b.n	800ec36 <_free_r+0x26>
 800ec88:	6825      	ldr	r5, [r4, #0]
 800ec8a:	1961      	adds	r1, r4, r5
 800ec8c:	428b      	cmp	r3, r1
 800ec8e:	bf04      	itt	eq
 800ec90:	6819      	ldreq	r1, [r3, #0]
 800ec92:	685b      	ldreq	r3, [r3, #4]
 800ec94:	6063      	str	r3, [r4, #4]
 800ec96:	bf04      	itt	eq
 800ec98:	1949      	addeq	r1, r1, r5
 800ec9a:	6021      	streq	r1, [r4, #0]
 800ec9c:	6054      	str	r4, [r2, #4]
 800ec9e:	e7ca      	b.n	800ec36 <_free_r+0x26>
 800eca0:	b003      	add	sp, #12
 800eca2:	bd30      	pop	{r4, r5, pc}
 800eca4:	20001f2c 	.word	0x20001f2c

0800eca8 <sbrk_aligned>:
 800eca8:	b570      	push	{r4, r5, r6, lr}
 800ecaa:	4e0e      	ldr	r6, [pc, #56]	; (800ece4 <sbrk_aligned+0x3c>)
 800ecac:	460c      	mov	r4, r1
 800ecae:	6831      	ldr	r1, [r6, #0]
 800ecb0:	4605      	mov	r5, r0
 800ecb2:	b911      	cbnz	r1, 800ecba <sbrk_aligned+0x12>
 800ecb4:	f000 f88c 	bl	800edd0 <_sbrk_r>
 800ecb8:	6030      	str	r0, [r6, #0]
 800ecba:	4621      	mov	r1, r4
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	f000 f887 	bl	800edd0 <_sbrk_r>
 800ecc2:	1c43      	adds	r3, r0, #1
 800ecc4:	d00a      	beq.n	800ecdc <sbrk_aligned+0x34>
 800ecc6:	1cc4      	adds	r4, r0, #3
 800ecc8:	f024 0403 	bic.w	r4, r4, #3
 800eccc:	42a0      	cmp	r0, r4
 800ecce:	d007      	beq.n	800ece0 <sbrk_aligned+0x38>
 800ecd0:	1a21      	subs	r1, r4, r0
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	f000 f87c 	bl	800edd0 <_sbrk_r>
 800ecd8:	3001      	adds	r0, #1
 800ecda:	d101      	bne.n	800ece0 <sbrk_aligned+0x38>
 800ecdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ece0:	4620      	mov	r0, r4
 800ece2:	bd70      	pop	{r4, r5, r6, pc}
 800ece4:	20001f30 	.word	0x20001f30

0800ece8 <_malloc_r>:
 800ece8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecec:	1ccd      	adds	r5, r1, #3
 800ecee:	f025 0503 	bic.w	r5, r5, #3
 800ecf2:	3508      	adds	r5, #8
 800ecf4:	2d0c      	cmp	r5, #12
 800ecf6:	bf38      	it	cc
 800ecf8:	250c      	movcc	r5, #12
 800ecfa:	2d00      	cmp	r5, #0
 800ecfc:	4607      	mov	r7, r0
 800ecfe:	db01      	blt.n	800ed04 <_malloc_r+0x1c>
 800ed00:	42a9      	cmp	r1, r5
 800ed02:	d905      	bls.n	800ed10 <_malloc_r+0x28>
 800ed04:	230c      	movs	r3, #12
 800ed06:	603b      	str	r3, [r7, #0]
 800ed08:	2600      	movs	r6, #0
 800ed0a:	4630      	mov	r0, r6
 800ed0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed10:	4e2e      	ldr	r6, [pc, #184]	; (800edcc <_malloc_r+0xe4>)
 800ed12:	f000 f88d 	bl	800ee30 <__malloc_lock>
 800ed16:	6833      	ldr	r3, [r6, #0]
 800ed18:	461c      	mov	r4, r3
 800ed1a:	bb34      	cbnz	r4, 800ed6a <_malloc_r+0x82>
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	4638      	mov	r0, r7
 800ed20:	f7ff ffc2 	bl	800eca8 <sbrk_aligned>
 800ed24:	1c43      	adds	r3, r0, #1
 800ed26:	4604      	mov	r4, r0
 800ed28:	d14d      	bne.n	800edc6 <_malloc_r+0xde>
 800ed2a:	6834      	ldr	r4, [r6, #0]
 800ed2c:	4626      	mov	r6, r4
 800ed2e:	2e00      	cmp	r6, #0
 800ed30:	d140      	bne.n	800edb4 <_malloc_r+0xcc>
 800ed32:	6823      	ldr	r3, [r4, #0]
 800ed34:	4631      	mov	r1, r6
 800ed36:	4638      	mov	r0, r7
 800ed38:	eb04 0803 	add.w	r8, r4, r3
 800ed3c:	f000 f848 	bl	800edd0 <_sbrk_r>
 800ed40:	4580      	cmp	r8, r0
 800ed42:	d13a      	bne.n	800edba <_malloc_r+0xd2>
 800ed44:	6821      	ldr	r1, [r4, #0]
 800ed46:	3503      	adds	r5, #3
 800ed48:	1a6d      	subs	r5, r5, r1
 800ed4a:	f025 0503 	bic.w	r5, r5, #3
 800ed4e:	3508      	adds	r5, #8
 800ed50:	2d0c      	cmp	r5, #12
 800ed52:	bf38      	it	cc
 800ed54:	250c      	movcc	r5, #12
 800ed56:	4629      	mov	r1, r5
 800ed58:	4638      	mov	r0, r7
 800ed5a:	f7ff ffa5 	bl	800eca8 <sbrk_aligned>
 800ed5e:	3001      	adds	r0, #1
 800ed60:	d02b      	beq.n	800edba <_malloc_r+0xd2>
 800ed62:	6823      	ldr	r3, [r4, #0]
 800ed64:	442b      	add	r3, r5
 800ed66:	6023      	str	r3, [r4, #0]
 800ed68:	e00e      	b.n	800ed88 <_malloc_r+0xa0>
 800ed6a:	6822      	ldr	r2, [r4, #0]
 800ed6c:	1b52      	subs	r2, r2, r5
 800ed6e:	d41e      	bmi.n	800edae <_malloc_r+0xc6>
 800ed70:	2a0b      	cmp	r2, #11
 800ed72:	d916      	bls.n	800eda2 <_malloc_r+0xba>
 800ed74:	1961      	adds	r1, r4, r5
 800ed76:	42a3      	cmp	r3, r4
 800ed78:	6025      	str	r5, [r4, #0]
 800ed7a:	bf18      	it	ne
 800ed7c:	6059      	strne	r1, [r3, #4]
 800ed7e:	6863      	ldr	r3, [r4, #4]
 800ed80:	bf08      	it	eq
 800ed82:	6031      	streq	r1, [r6, #0]
 800ed84:	5162      	str	r2, [r4, r5]
 800ed86:	604b      	str	r3, [r1, #4]
 800ed88:	4638      	mov	r0, r7
 800ed8a:	f104 060b 	add.w	r6, r4, #11
 800ed8e:	f000 f855 	bl	800ee3c <__malloc_unlock>
 800ed92:	f026 0607 	bic.w	r6, r6, #7
 800ed96:	1d23      	adds	r3, r4, #4
 800ed98:	1af2      	subs	r2, r6, r3
 800ed9a:	d0b6      	beq.n	800ed0a <_malloc_r+0x22>
 800ed9c:	1b9b      	subs	r3, r3, r6
 800ed9e:	50a3      	str	r3, [r4, r2]
 800eda0:	e7b3      	b.n	800ed0a <_malloc_r+0x22>
 800eda2:	6862      	ldr	r2, [r4, #4]
 800eda4:	42a3      	cmp	r3, r4
 800eda6:	bf0c      	ite	eq
 800eda8:	6032      	streq	r2, [r6, #0]
 800edaa:	605a      	strne	r2, [r3, #4]
 800edac:	e7ec      	b.n	800ed88 <_malloc_r+0xa0>
 800edae:	4623      	mov	r3, r4
 800edb0:	6864      	ldr	r4, [r4, #4]
 800edb2:	e7b2      	b.n	800ed1a <_malloc_r+0x32>
 800edb4:	4634      	mov	r4, r6
 800edb6:	6876      	ldr	r6, [r6, #4]
 800edb8:	e7b9      	b.n	800ed2e <_malloc_r+0x46>
 800edba:	230c      	movs	r3, #12
 800edbc:	603b      	str	r3, [r7, #0]
 800edbe:	4638      	mov	r0, r7
 800edc0:	f000 f83c 	bl	800ee3c <__malloc_unlock>
 800edc4:	e7a1      	b.n	800ed0a <_malloc_r+0x22>
 800edc6:	6025      	str	r5, [r4, #0]
 800edc8:	e7de      	b.n	800ed88 <_malloc_r+0xa0>
 800edca:	bf00      	nop
 800edcc:	20001f2c 	.word	0x20001f2c

0800edd0 <_sbrk_r>:
 800edd0:	b538      	push	{r3, r4, r5, lr}
 800edd2:	4d06      	ldr	r5, [pc, #24]	; (800edec <_sbrk_r+0x1c>)
 800edd4:	2300      	movs	r3, #0
 800edd6:	4604      	mov	r4, r0
 800edd8:	4608      	mov	r0, r1
 800edda:	602b      	str	r3, [r5, #0]
 800eddc:	f7f2 fd44 	bl	8001868 <_sbrk>
 800ede0:	1c43      	adds	r3, r0, #1
 800ede2:	d102      	bne.n	800edea <_sbrk_r+0x1a>
 800ede4:	682b      	ldr	r3, [r5, #0]
 800ede6:	b103      	cbz	r3, 800edea <_sbrk_r+0x1a>
 800ede8:	6023      	str	r3, [r4, #0]
 800edea:	bd38      	pop	{r3, r4, r5, pc}
 800edec:	20001f34 	.word	0x20001f34

0800edf0 <siprintf>:
 800edf0:	b40e      	push	{r1, r2, r3}
 800edf2:	b500      	push	{lr}
 800edf4:	b09c      	sub	sp, #112	; 0x70
 800edf6:	ab1d      	add	r3, sp, #116	; 0x74
 800edf8:	9002      	str	r0, [sp, #8]
 800edfa:	9006      	str	r0, [sp, #24]
 800edfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee00:	4809      	ldr	r0, [pc, #36]	; (800ee28 <siprintf+0x38>)
 800ee02:	9107      	str	r1, [sp, #28]
 800ee04:	9104      	str	r1, [sp, #16]
 800ee06:	4909      	ldr	r1, [pc, #36]	; (800ee2c <siprintf+0x3c>)
 800ee08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee0c:	9105      	str	r1, [sp, #20]
 800ee0e:	6800      	ldr	r0, [r0, #0]
 800ee10:	9301      	str	r3, [sp, #4]
 800ee12:	a902      	add	r1, sp, #8
 800ee14:	f000 f8a2 	bl	800ef5c <_svfiprintf_r>
 800ee18:	9b02      	ldr	r3, [sp, #8]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	701a      	strb	r2, [r3, #0]
 800ee1e:	b01c      	add	sp, #112	; 0x70
 800ee20:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee24:	b003      	add	sp, #12
 800ee26:	4770      	bx	lr
 800ee28:	200013b8 	.word	0x200013b8
 800ee2c:	ffff0208 	.word	0xffff0208

0800ee30 <__malloc_lock>:
 800ee30:	4801      	ldr	r0, [pc, #4]	; (800ee38 <__malloc_lock+0x8>)
 800ee32:	f000 bb27 	b.w	800f484 <__retarget_lock_acquire_recursive>
 800ee36:	bf00      	nop
 800ee38:	20001f38 	.word	0x20001f38

0800ee3c <__malloc_unlock>:
 800ee3c:	4801      	ldr	r0, [pc, #4]	; (800ee44 <__malloc_unlock+0x8>)
 800ee3e:	f000 bb22 	b.w	800f486 <__retarget_lock_release_recursive>
 800ee42:	bf00      	nop
 800ee44:	20001f38 	.word	0x20001f38

0800ee48 <_realloc_r>:
 800ee48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee4c:	4680      	mov	r8, r0
 800ee4e:	4614      	mov	r4, r2
 800ee50:	460e      	mov	r6, r1
 800ee52:	b921      	cbnz	r1, 800ee5e <_realloc_r+0x16>
 800ee54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee58:	4611      	mov	r1, r2
 800ee5a:	f7ff bf45 	b.w	800ece8 <_malloc_r>
 800ee5e:	b92a      	cbnz	r2, 800ee6c <_realloc_r+0x24>
 800ee60:	f7ff fed6 	bl	800ec10 <_free_r>
 800ee64:	4625      	mov	r5, r4
 800ee66:	4628      	mov	r0, r5
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6c:	f000 fb26 	bl	800f4bc <_malloc_usable_size_r>
 800ee70:	4284      	cmp	r4, r0
 800ee72:	4607      	mov	r7, r0
 800ee74:	d802      	bhi.n	800ee7c <_realloc_r+0x34>
 800ee76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ee7a:	d812      	bhi.n	800eea2 <_realloc_r+0x5a>
 800ee7c:	4621      	mov	r1, r4
 800ee7e:	4640      	mov	r0, r8
 800ee80:	f7ff ff32 	bl	800ece8 <_malloc_r>
 800ee84:	4605      	mov	r5, r0
 800ee86:	2800      	cmp	r0, #0
 800ee88:	d0ed      	beq.n	800ee66 <_realloc_r+0x1e>
 800ee8a:	42bc      	cmp	r4, r7
 800ee8c:	4622      	mov	r2, r4
 800ee8e:	4631      	mov	r1, r6
 800ee90:	bf28      	it	cs
 800ee92:	463a      	movcs	r2, r7
 800ee94:	f7ff fea6 	bl	800ebe4 <memcpy>
 800ee98:	4631      	mov	r1, r6
 800ee9a:	4640      	mov	r0, r8
 800ee9c:	f7ff feb8 	bl	800ec10 <_free_r>
 800eea0:	e7e1      	b.n	800ee66 <_realloc_r+0x1e>
 800eea2:	4635      	mov	r5, r6
 800eea4:	e7df      	b.n	800ee66 <_realloc_r+0x1e>

0800eea6 <__ssputs_r>:
 800eea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeaa:	688e      	ldr	r6, [r1, #8]
 800eeac:	429e      	cmp	r6, r3
 800eeae:	4682      	mov	sl, r0
 800eeb0:	460c      	mov	r4, r1
 800eeb2:	4690      	mov	r8, r2
 800eeb4:	461f      	mov	r7, r3
 800eeb6:	d838      	bhi.n	800ef2a <__ssputs_r+0x84>
 800eeb8:	898a      	ldrh	r2, [r1, #12]
 800eeba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eebe:	d032      	beq.n	800ef26 <__ssputs_r+0x80>
 800eec0:	6825      	ldr	r5, [r4, #0]
 800eec2:	6909      	ldr	r1, [r1, #16]
 800eec4:	eba5 0901 	sub.w	r9, r5, r1
 800eec8:	6965      	ldr	r5, [r4, #20]
 800eeca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eed2:	3301      	adds	r3, #1
 800eed4:	444b      	add	r3, r9
 800eed6:	106d      	asrs	r5, r5, #1
 800eed8:	429d      	cmp	r5, r3
 800eeda:	bf38      	it	cc
 800eedc:	461d      	movcc	r5, r3
 800eede:	0553      	lsls	r3, r2, #21
 800eee0:	d531      	bpl.n	800ef46 <__ssputs_r+0xa0>
 800eee2:	4629      	mov	r1, r5
 800eee4:	f7ff ff00 	bl	800ece8 <_malloc_r>
 800eee8:	4606      	mov	r6, r0
 800eeea:	b950      	cbnz	r0, 800ef02 <__ssputs_r+0x5c>
 800eeec:	230c      	movs	r3, #12
 800eeee:	f8ca 3000 	str.w	r3, [sl]
 800eef2:	89a3      	ldrh	r3, [r4, #12]
 800eef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eef8:	81a3      	strh	r3, [r4, #12]
 800eefa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eefe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef02:	6921      	ldr	r1, [r4, #16]
 800ef04:	464a      	mov	r2, r9
 800ef06:	f7ff fe6d 	bl	800ebe4 <memcpy>
 800ef0a:	89a3      	ldrh	r3, [r4, #12]
 800ef0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef14:	81a3      	strh	r3, [r4, #12]
 800ef16:	6126      	str	r6, [r4, #16]
 800ef18:	6165      	str	r5, [r4, #20]
 800ef1a:	444e      	add	r6, r9
 800ef1c:	eba5 0509 	sub.w	r5, r5, r9
 800ef20:	6026      	str	r6, [r4, #0]
 800ef22:	60a5      	str	r5, [r4, #8]
 800ef24:	463e      	mov	r6, r7
 800ef26:	42be      	cmp	r6, r7
 800ef28:	d900      	bls.n	800ef2c <__ssputs_r+0x86>
 800ef2a:	463e      	mov	r6, r7
 800ef2c:	6820      	ldr	r0, [r4, #0]
 800ef2e:	4632      	mov	r2, r6
 800ef30:	4641      	mov	r1, r8
 800ef32:	f000 faa9 	bl	800f488 <memmove>
 800ef36:	68a3      	ldr	r3, [r4, #8]
 800ef38:	1b9b      	subs	r3, r3, r6
 800ef3a:	60a3      	str	r3, [r4, #8]
 800ef3c:	6823      	ldr	r3, [r4, #0]
 800ef3e:	4433      	add	r3, r6
 800ef40:	6023      	str	r3, [r4, #0]
 800ef42:	2000      	movs	r0, #0
 800ef44:	e7db      	b.n	800eefe <__ssputs_r+0x58>
 800ef46:	462a      	mov	r2, r5
 800ef48:	f7ff ff7e 	bl	800ee48 <_realloc_r>
 800ef4c:	4606      	mov	r6, r0
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d1e1      	bne.n	800ef16 <__ssputs_r+0x70>
 800ef52:	6921      	ldr	r1, [r4, #16]
 800ef54:	4650      	mov	r0, sl
 800ef56:	f7ff fe5b 	bl	800ec10 <_free_r>
 800ef5a:	e7c7      	b.n	800eeec <__ssputs_r+0x46>

0800ef5c <_svfiprintf_r>:
 800ef5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef60:	4698      	mov	r8, r3
 800ef62:	898b      	ldrh	r3, [r1, #12]
 800ef64:	061b      	lsls	r3, r3, #24
 800ef66:	b09d      	sub	sp, #116	; 0x74
 800ef68:	4607      	mov	r7, r0
 800ef6a:	460d      	mov	r5, r1
 800ef6c:	4614      	mov	r4, r2
 800ef6e:	d50e      	bpl.n	800ef8e <_svfiprintf_r+0x32>
 800ef70:	690b      	ldr	r3, [r1, #16]
 800ef72:	b963      	cbnz	r3, 800ef8e <_svfiprintf_r+0x32>
 800ef74:	2140      	movs	r1, #64	; 0x40
 800ef76:	f7ff feb7 	bl	800ece8 <_malloc_r>
 800ef7a:	6028      	str	r0, [r5, #0]
 800ef7c:	6128      	str	r0, [r5, #16]
 800ef7e:	b920      	cbnz	r0, 800ef8a <_svfiprintf_r+0x2e>
 800ef80:	230c      	movs	r3, #12
 800ef82:	603b      	str	r3, [r7, #0]
 800ef84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef88:	e0d1      	b.n	800f12e <_svfiprintf_r+0x1d2>
 800ef8a:	2340      	movs	r3, #64	; 0x40
 800ef8c:	616b      	str	r3, [r5, #20]
 800ef8e:	2300      	movs	r3, #0
 800ef90:	9309      	str	r3, [sp, #36]	; 0x24
 800ef92:	2320      	movs	r3, #32
 800ef94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef98:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef9c:	2330      	movs	r3, #48	; 0x30
 800ef9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f148 <_svfiprintf_r+0x1ec>
 800efa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efa6:	f04f 0901 	mov.w	r9, #1
 800efaa:	4623      	mov	r3, r4
 800efac:	469a      	mov	sl, r3
 800efae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efb2:	b10a      	cbz	r2, 800efb8 <_svfiprintf_r+0x5c>
 800efb4:	2a25      	cmp	r2, #37	; 0x25
 800efb6:	d1f9      	bne.n	800efac <_svfiprintf_r+0x50>
 800efb8:	ebba 0b04 	subs.w	fp, sl, r4
 800efbc:	d00b      	beq.n	800efd6 <_svfiprintf_r+0x7a>
 800efbe:	465b      	mov	r3, fp
 800efc0:	4622      	mov	r2, r4
 800efc2:	4629      	mov	r1, r5
 800efc4:	4638      	mov	r0, r7
 800efc6:	f7ff ff6e 	bl	800eea6 <__ssputs_r>
 800efca:	3001      	adds	r0, #1
 800efcc:	f000 80aa 	beq.w	800f124 <_svfiprintf_r+0x1c8>
 800efd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efd2:	445a      	add	r2, fp
 800efd4:	9209      	str	r2, [sp, #36]	; 0x24
 800efd6:	f89a 3000 	ldrb.w	r3, [sl]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 80a2 	beq.w	800f124 <_svfiprintf_r+0x1c8>
 800efe0:	2300      	movs	r3, #0
 800efe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efea:	f10a 0a01 	add.w	sl, sl, #1
 800efee:	9304      	str	r3, [sp, #16]
 800eff0:	9307      	str	r3, [sp, #28]
 800eff2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eff6:	931a      	str	r3, [sp, #104]	; 0x68
 800eff8:	4654      	mov	r4, sl
 800effa:	2205      	movs	r2, #5
 800effc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f000:	4851      	ldr	r0, [pc, #324]	; (800f148 <_svfiprintf_r+0x1ec>)
 800f002:	f7f1 f91d 	bl	8000240 <memchr>
 800f006:	9a04      	ldr	r2, [sp, #16]
 800f008:	b9d8      	cbnz	r0, 800f042 <_svfiprintf_r+0xe6>
 800f00a:	06d0      	lsls	r0, r2, #27
 800f00c:	bf44      	itt	mi
 800f00e:	2320      	movmi	r3, #32
 800f010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f014:	0711      	lsls	r1, r2, #28
 800f016:	bf44      	itt	mi
 800f018:	232b      	movmi	r3, #43	; 0x2b
 800f01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f01e:	f89a 3000 	ldrb.w	r3, [sl]
 800f022:	2b2a      	cmp	r3, #42	; 0x2a
 800f024:	d015      	beq.n	800f052 <_svfiprintf_r+0xf6>
 800f026:	9a07      	ldr	r2, [sp, #28]
 800f028:	4654      	mov	r4, sl
 800f02a:	2000      	movs	r0, #0
 800f02c:	f04f 0c0a 	mov.w	ip, #10
 800f030:	4621      	mov	r1, r4
 800f032:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f036:	3b30      	subs	r3, #48	; 0x30
 800f038:	2b09      	cmp	r3, #9
 800f03a:	d94e      	bls.n	800f0da <_svfiprintf_r+0x17e>
 800f03c:	b1b0      	cbz	r0, 800f06c <_svfiprintf_r+0x110>
 800f03e:	9207      	str	r2, [sp, #28]
 800f040:	e014      	b.n	800f06c <_svfiprintf_r+0x110>
 800f042:	eba0 0308 	sub.w	r3, r0, r8
 800f046:	fa09 f303 	lsl.w	r3, r9, r3
 800f04a:	4313      	orrs	r3, r2
 800f04c:	9304      	str	r3, [sp, #16]
 800f04e:	46a2      	mov	sl, r4
 800f050:	e7d2      	b.n	800eff8 <_svfiprintf_r+0x9c>
 800f052:	9b03      	ldr	r3, [sp, #12]
 800f054:	1d19      	adds	r1, r3, #4
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	9103      	str	r1, [sp, #12]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	bfbb      	ittet	lt
 800f05e:	425b      	neglt	r3, r3
 800f060:	f042 0202 	orrlt.w	r2, r2, #2
 800f064:	9307      	strge	r3, [sp, #28]
 800f066:	9307      	strlt	r3, [sp, #28]
 800f068:	bfb8      	it	lt
 800f06a:	9204      	strlt	r2, [sp, #16]
 800f06c:	7823      	ldrb	r3, [r4, #0]
 800f06e:	2b2e      	cmp	r3, #46	; 0x2e
 800f070:	d10c      	bne.n	800f08c <_svfiprintf_r+0x130>
 800f072:	7863      	ldrb	r3, [r4, #1]
 800f074:	2b2a      	cmp	r3, #42	; 0x2a
 800f076:	d135      	bne.n	800f0e4 <_svfiprintf_r+0x188>
 800f078:	9b03      	ldr	r3, [sp, #12]
 800f07a:	1d1a      	adds	r2, r3, #4
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	9203      	str	r2, [sp, #12]
 800f080:	2b00      	cmp	r3, #0
 800f082:	bfb8      	it	lt
 800f084:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f088:	3402      	adds	r4, #2
 800f08a:	9305      	str	r3, [sp, #20]
 800f08c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f158 <_svfiprintf_r+0x1fc>
 800f090:	7821      	ldrb	r1, [r4, #0]
 800f092:	2203      	movs	r2, #3
 800f094:	4650      	mov	r0, sl
 800f096:	f7f1 f8d3 	bl	8000240 <memchr>
 800f09a:	b140      	cbz	r0, 800f0ae <_svfiprintf_r+0x152>
 800f09c:	2340      	movs	r3, #64	; 0x40
 800f09e:	eba0 000a 	sub.w	r0, r0, sl
 800f0a2:	fa03 f000 	lsl.w	r0, r3, r0
 800f0a6:	9b04      	ldr	r3, [sp, #16]
 800f0a8:	4303      	orrs	r3, r0
 800f0aa:	3401      	adds	r4, #1
 800f0ac:	9304      	str	r3, [sp, #16]
 800f0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0b2:	4826      	ldr	r0, [pc, #152]	; (800f14c <_svfiprintf_r+0x1f0>)
 800f0b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0b8:	2206      	movs	r2, #6
 800f0ba:	f7f1 f8c1 	bl	8000240 <memchr>
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	d038      	beq.n	800f134 <_svfiprintf_r+0x1d8>
 800f0c2:	4b23      	ldr	r3, [pc, #140]	; (800f150 <_svfiprintf_r+0x1f4>)
 800f0c4:	bb1b      	cbnz	r3, 800f10e <_svfiprintf_r+0x1b2>
 800f0c6:	9b03      	ldr	r3, [sp, #12]
 800f0c8:	3307      	adds	r3, #7
 800f0ca:	f023 0307 	bic.w	r3, r3, #7
 800f0ce:	3308      	adds	r3, #8
 800f0d0:	9303      	str	r3, [sp, #12]
 800f0d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0d4:	4433      	add	r3, r6
 800f0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f0d8:	e767      	b.n	800efaa <_svfiprintf_r+0x4e>
 800f0da:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0de:	460c      	mov	r4, r1
 800f0e0:	2001      	movs	r0, #1
 800f0e2:	e7a5      	b.n	800f030 <_svfiprintf_r+0xd4>
 800f0e4:	2300      	movs	r3, #0
 800f0e6:	3401      	adds	r4, #1
 800f0e8:	9305      	str	r3, [sp, #20]
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	f04f 0c0a 	mov.w	ip, #10
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0f6:	3a30      	subs	r2, #48	; 0x30
 800f0f8:	2a09      	cmp	r2, #9
 800f0fa:	d903      	bls.n	800f104 <_svfiprintf_r+0x1a8>
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d0c5      	beq.n	800f08c <_svfiprintf_r+0x130>
 800f100:	9105      	str	r1, [sp, #20]
 800f102:	e7c3      	b.n	800f08c <_svfiprintf_r+0x130>
 800f104:	fb0c 2101 	mla	r1, ip, r1, r2
 800f108:	4604      	mov	r4, r0
 800f10a:	2301      	movs	r3, #1
 800f10c:	e7f0      	b.n	800f0f0 <_svfiprintf_r+0x194>
 800f10e:	ab03      	add	r3, sp, #12
 800f110:	9300      	str	r3, [sp, #0]
 800f112:	462a      	mov	r2, r5
 800f114:	4b0f      	ldr	r3, [pc, #60]	; (800f154 <_svfiprintf_r+0x1f8>)
 800f116:	a904      	add	r1, sp, #16
 800f118:	4638      	mov	r0, r7
 800f11a:	f3af 8000 	nop.w
 800f11e:	1c42      	adds	r2, r0, #1
 800f120:	4606      	mov	r6, r0
 800f122:	d1d6      	bne.n	800f0d2 <_svfiprintf_r+0x176>
 800f124:	89ab      	ldrh	r3, [r5, #12]
 800f126:	065b      	lsls	r3, r3, #25
 800f128:	f53f af2c 	bmi.w	800ef84 <_svfiprintf_r+0x28>
 800f12c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f12e:	b01d      	add	sp, #116	; 0x74
 800f130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f134:	ab03      	add	r3, sp, #12
 800f136:	9300      	str	r3, [sp, #0]
 800f138:	462a      	mov	r2, r5
 800f13a:	4b06      	ldr	r3, [pc, #24]	; (800f154 <_svfiprintf_r+0x1f8>)
 800f13c:	a904      	add	r1, sp, #16
 800f13e:	4638      	mov	r0, r7
 800f140:	f000 f87a 	bl	800f238 <_printf_i>
 800f144:	e7eb      	b.n	800f11e <_svfiprintf_r+0x1c2>
 800f146:	bf00      	nop
 800f148:	0816e048 	.word	0x0816e048
 800f14c:	0816e052 	.word	0x0816e052
 800f150:	00000000 	.word	0x00000000
 800f154:	0800eea7 	.word	0x0800eea7
 800f158:	0816e04e 	.word	0x0816e04e

0800f15c <_printf_common>:
 800f15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f160:	4616      	mov	r6, r2
 800f162:	4699      	mov	r9, r3
 800f164:	688a      	ldr	r2, [r1, #8]
 800f166:	690b      	ldr	r3, [r1, #16]
 800f168:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f16c:	4293      	cmp	r3, r2
 800f16e:	bfb8      	it	lt
 800f170:	4613      	movlt	r3, r2
 800f172:	6033      	str	r3, [r6, #0]
 800f174:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f178:	4607      	mov	r7, r0
 800f17a:	460c      	mov	r4, r1
 800f17c:	b10a      	cbz	r2, 800f182 <_printf_common+0x26>
 800f17e:	3301      	adds	r3, #1
 800f180:	6033      	str	r3, [r6, #0]
 800f182:	6823      	ldr	r3, [r4, #0]
 800f184:	0699      	lsls	r1, r3, #26
 800f186:	bf42      	ittt	mi
 800f188:	6833      	ldrmi	r3, [r6, #0]
 800f18a:	3302      	addmi	r3, #2
 800f18c:	6033      	strmi	r3, [r6, #0]
 800f18e:	6825      	ldr	r5, [r4, #0]
 800f190:	f015 0506 	ands.w	r5, r5, #6
 800f194:	d106      	bne.n	800f1a4 <_printf_common+0x48>
 800f196:	f104 0a19 	add.w	sl, r4, #25
 800f19a:	68e3      	ldr	r3, [r4, #12]
 800f19c:	6832      	ldr	r2, [r6, #0]
 800f19e:	1a9b      	subs	r3, r3, r2
 800f1a0:	42ab      	cmp	r3, r5
 800f1a2:	dc26      	bgt.n	800f1f2 <_printf_common+0x96>
 800f1a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f1a8:	1e13      	subs	r3, r2, #0
 800f1aa:	6822      	ldr	r2, [r4, #0]
 800f1ac:	bf18      	it	ne
 800f1ae:	2301      	movne	r3, #1
 800f1b0:	0692      	lsls	r2, r2, #26
 800f1b2:	d42b      	bmi.n	800f20c <_printf_common+0xb0>
 800f1b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f1b8:	4649      	mov	r1, r9
 800f1ba:	4638      	mov	r0, r7
 800f1bc:	47c0      	blx	r8
 800f1be:	3001      	adds	r0, #1
 800f1c0:	d01e      	beq.n	800f200 <_printf_common+0xa4>
 800f1c2:	6823      	ldr	r3, [r4, #0]
 800f1c4:	68e5      	ldr	r5, [r4, #12]
 800f1c6:	6832      	ldr	r2, [r6, #0]
 800f1c8:	f003 0306 	and.w	r3, r3, #6
 800f1cc:	2b04      	cmp	r3, #4
 800f1ce:	bf08      	it	eq
 800f1d0:	1aad      	subeq	r5, r5, r2
 800f1d2:	68a3      	ldr	r3, [r4, #8]
 800f1d4:	6922      	ldr	r2, [r4, #16]
 800f1d6:	bf0c      	ite	eq
 800f1d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f1dc:	2500      	movne	r5, #0
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	bfc4      	itt	gt
 800f1e2:	1a9b      	subgt	r3, r3, r2
 800f1e4:	18ed      	addgt	r5, r5, r3
 800f1e6:	2600      	movs	r6, #0
 800f1e8:	341a      	adds	r4, #26
 800f1ea:	42b5      	cmp	r5, r6
 800f1ec:	d11a      	bne.n	800f224 <_printf_common+0xc8>
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	e008      	b.n	800f204 <_printf_common+0xa8>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	4652      	mov	r2, sl
 800f1f6:	4649      	mov	r1, r9
 800f1f8:	4638      	mov	r0, r7
 800f1fa:	47c0      	blx	r8
 800f1fc:	3001      	adds	r0, #1
 800f1fe:	d103      	bne.n	800f208 <_printf_common+0xac>
 800f200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f208:	3501      	adds	r5, #1
 800f20a:	e7c6      	b.n	800f19a <_printf_common+0x3e>
 800f20c:	18e1      	adds	r1, r4, r3
 800f20e:	1c5a      	adds	r2, r3, #1
 800f210:	2030      	movs	r0, #48	; 0x30
 800f212:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f216:	4422      	add	r2, r4
 800f218:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f21c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f220:	3302      	adds	r3, #2
 800f222:	e7c7      	b.n	800f1b4 <_printf_common+0x58>
 800f224:	2301      	movs	r3, #1
 800f226:	4622      	mov	r2, r4
 800f228:	4649      	mov	r1, r9
 800f22a:	4638      	mov	r0, r7
 800f22c:	47c0      	blx	r8
 800f22e:	3001      	adds	r0, #1
 800f230:	d0e6      	beq.n	800f200 <_printf_common+0xa4>
 800f232:	3601      	adds	r6, #1
 800f234:	e7d9      	b.n	800f1ea <_printf_common+0x8e>
	...

0800f238 <_printf_i>:
 800f238:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f23c:	7e0f      	ldrb	r7, [r1, #24]
 800f23e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f240:	2f78      	cmp	r7, #120	; 0x78
 800f242:	4691      	mov	r9, r2
 800f244:	4680      	mov	r8, r0
 800f246:	460c      	mov	r4, r1
 800f248:	469a      	mov	sl, r3
 800f24a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f24e:	d807      	bhi.n	800f260 <_printf_i+0x28>
 800f250:	2f62      	cmp	r7, #98	; 0x62
 800f252:	d80a      	bhi.n	800f26a <_printf_i+0x32>
 800f254:	2f00      	cmp	r7, #0
 800f256:	f000 80d8 	beq.w	800f40a <_printf_i+0x1d2>
 800f25a:	2f58      	cmp	r7, #88	; 0x58
 800f25c:	f000 80a3 	beq.w	800f3a6 <_printf_i+0x16e>
 800f260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f264:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f268:	e03a      	b.n	800f2e0 <_printf_i+0xa8>
 800f26a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f26e:	2b15      	cmp	r3, #21
 800f270:	d8f6      	bhi.n	800f260 <_printf_i+0x28>
 800f272:	a101      	add	r1, pc, #4	; (adr r1, 800f278 <_printf_i+0x40>)
 800f274:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f278:	0800f2d1 	.word	0x0800f2d1
 800f27c:	0800f2e5 	.word	0x0800f2e5
 800f280:	0800f261 	.word	0x0800f261
 800f284:	0800f261 	.word	0x0800f261
 800f288:	0800f261 	.word	0x0800f261
 800f28c:	0800f261 	.word	0x0800f261
 800f290:	0800f2e5 	.word	0x0800f2e5
 800f294:	0800f261 	.word	0x0800f261
 800f298:	0800f261 	.word	0x0800f261
 800f29c:	0800f261 	.word	0x0800f261
 800f2a0:	0800f261 	.word	0x0800f261
 800f2a4:	0800f3f1 	.word	0x0800f3f1
 800f2a8:	0800f315 	.word	0x0800f315
 800f2ac:	0800f3d3 	.word	0x0800f3d3
 800f2b0:	0800f261 	.word	0x0800f261
 800f2b4:	0800f261 	.word	0x0800f261
 800f2b8:	0800f413 	.word	0x0800f413
 800f2bc:	0800f261 	.word	0x0800f261
 800f2c0:	0800f315 	.word	0x0800f315
 800f2c4:	0800f261 	.word	0x0800f261
 800f2c8:	0800f261 	.word	0x0800f261
 800f2cc:	0800f3db 	.word	0x0800f3db
 800f2d0:	682b      	ldr	r3, [r5, #0]
 800f2d2:	1d1a      	adds	r2, r3, #4
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	602a      	str	r2, [r5, #0]
 800f2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	e0a3      	b.n	800f42c <_printf_i+0x1f4>
 800f2e4:	6820      	ldr	r0, [r4, #0]
 800f2e6:	6829      	ldr	r1, [r5, #0]
 800f2e8:	0606      	lsls	r6, r0, #24
 800f2ea:	f101 0304 	add.w	r3, r1, #4
 800f2ee:	d50a      	bpl.n	800f306 <_printf_i+0xce>
 800f2f0:	680e      	ldr	r6, [r1, #0]
 800f2f2:	602b      	str	r3, [r5, #0]
 800f2f4:	2e00      	cmp	r6, #0
 800f2f6:	da03      	bge.n	800f300 <_printf_i+0xc8>
 800f2f8:	232d      	movs	r3, #45	; 0x2d
 800f2fa:	4276      	negs	r6, r6
 800f2fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f300:	485e      	ldr	r0, [pc, #376]	; (800f47c <_printf_i+0x244>)
 800f302:	230a      	movs	r3, #10
 800f304:	e019      	b.n	800f33a <_printf_i+0x102>
 800f306:	680e      	ldr	r6, [r1, #0]
 800f308:	602b      	str	r3, [r5, #0]
 800f30a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f30e:	bf18      	it	ne
 800f310:	b236      	sxthne	r6, r6
 800f312:	e7ef      	b.n	800f2f4 <_printf_i+0xbc>
 800f314:	682b      	ldr	r3, [r5, #0]
 800f316:	6820      	ldr	r0, [r4, #0]
 800f318:	1d19      	adds	r1, r3, #4
 800f31a:	6029      	str	r1, [r5, #0]
 800f31c:	0601      	lsls	r1, r0, #24
 800f31e:	d501      	bpl.n	800f324 <_printf_i+0xec>
 800f320:	681e      	ldr	r6, [r3, #0]
 800f322:	e002      	b.n	800f32a <_printf_i+0xf2>
 800f324:	0646      	lsls	r6, r0, #25
 800f326:	d5fb      	bpl.n	800f320 <_printf_i+0xe8>
 800f328:	881e      	ldrh	r6, [r3, #0]
 800f32a:	4854      	ldr	r0, [pc, #336]	; (800f47c <_printf_i+0x244>)
 800f32c:	2f6f      	cmp	r7, #111	; 0x6f
 800f32e:	bf0c      	ite	eq
 800f330:	2308      	moveq	r3, #8
 800f332:	230a      	movne	r3, #10
 800f334:	2100      	movs	r1, #0
 800f336:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f33a:	6865      	ldr	r5, [r4, #4]
 800f33c:	60a5      	str	r5, [r4, #8]
 800f33e:	2d00      	cmp	r5, #0
 800f340:	bfa2      	ittt	ge
 800f342:	6821      	ldrge	r1, [r4, #0]
 800f344:	f021 0104 	bicge.w	r1, r1, #4
 800f348:	6021      	strge	r1, [r4, #0]
 800f34a:	b90e      	cbnz	r6, 800f350 <_printf_i+0x118>
 800f34c:	2d00      	cmp	r5, #0
 800f34e:	d04d      	beq.n	800f3ec <_printf_i+0x1b4>
 800f350:	4615      	mov	r5, r2
 800f352:	fbb6 f1f3 	udiv	r1, r6, r3
 800f356:	fb03 6711 	mls	r7, r3, r1, r6
 800f35a:	5dc7      	ldrb	r7, [r0, r7]
 800f35c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f360:	4637      	mov	r7, r6
 800f362:	42bb      	cmp	r3, r7
 800f364:	460e      	mov	r6, r1
 800f366:	d9f4      	bls.n	800f352 <_printf_i+0x11a>
 800f368:	2b08      	cmp	r3, #8
 800f36a:	d10b      	bne.n	800f384 <_printf_i+0x14c>
 800f36c:	6823      	ldr	r3, [r4, #0]
 800f36e:	07de      	lsls	r6, r3, #31
 800f370:	d508      	bpl.n	800f384 <_printf_i+0x14c>
 800f372:	6923      	ldr	r3, [r4, #16]
 800f374:	6861      	ldr	r1, [r4, #4]
 800f376:	4299      	cmp	r1, r3
 800f378:	bfde      	ittt	le
 800f37a:	2330      	movle	r3, #48	; 0x30
 800f37c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f380:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f384:	1b52      	subs	r2, r2, r5
 800f386:	6122      	str	r2, [r4, #16]
 800f388:	f8cd a000 	str.w	sl, [sp]
 800f38c:	464b      	mov	r3, r9
 800f38e:	aa03      	add	r2, sp, #12
 800f390:	4621      	mov	r1, r4
 800f392:	4640      	mov	r0, r8
 800f394:	f7ff fee2 	bl	800f15c <_printf_common>
 800f398:	3001      	adds	r0, #1
 800f39a:	d14c      	bne.n	800f436 <_printf_i+0x1fe>
 800f39c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3a0:	b004      	add	sp, #16
 800f3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3a6:	4835      	ldr	r0, [pc, #212]	; (800f47c <_printf_i+0x244>)
 800f3a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f3ac:	6829      	ldr	r1, [r5, #0]
 800f3ae:	6823      	ldr	r3, [r4, #0]
 800f3b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800f3b4:	6029      	str	r1, [r5, #0]
 800f3b6:	061d      	lsls	r5, r3, #24
 800f3b8:	d514      	bpl.n	800f3e4 <_printf_i+0x1ac>
 800f3ba:	07df      	lsls	r7, r3, #31
 800f3bc:	bf44      	itt	mi
 800f3be:	f043 0320 	orrmi.w	r3, r3, #32
 800f3c2:	6023      	strmi	r3, [r4, #0]
 800f3c4:	b91e      	cbnz	r6, 800f3ce <_printf_i+0x196>
 800f3c6:	6823      	ldr	r3, [r4, #0]
 800f3c8:	f023 0320 	bic.w	r3, r3, #32
 800f3cc:	6023      	str	r3, [r4, #0]
 800f3ce:	2310      	movs	r3, #16
 800f3d0:	e7b0      	b.n	800f334 <_printf_i+0xfc>
 800f3d2:	6823      	ldr	r3, [r4, #0]
 800f3d4:	f043 0320 	orr.w	r3, r3, #32
 800f3d8:	6023      	str	r3, [r4, #0]
 800f3da:	2378      	movs	r3, #120	; 0x78
 800f3dc:	4828      	ldr	r0, [pc, #160]	; (800f480 <_printf_i+0x248>)
 800f3de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f3e2:	e7e3      	b.n	800f3ac <_printf_i+0x174>
 800f3e4:	0659      	lsls	r1, r3, #25
 800f3e6:	bf48      	it	mi
 800f3e8:	b2b6      	uxthmi	r6, r6
 800f3ea:	e7e6      	b.n	800f3ba <_printf_i+0x182>
 800f3ec:	4615      	mov	r5, r2
 800f3ee:	e7bb      	b.n	800f368 <_printf_i+0x130>
 800f3f0:	682b      	ldr	r3, [r5, #0]
 800f3f2:	6826      	ldr	r6, [r4, #0]
 800f3f4:	6961      	ldr	r1, [r4, #20]
 800f3f6:	1d18      	adds	r0, r3, #4
 800f3f8:	6028      	str	r0, [r5, #0]
 800f3fa:	0635      	lsls	r5, r6, #24
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	d501      	bpl.n	800f404 <_printf_i+0x1cc>
 800f400:	6019      	str	r1, [r3, #0]
 800f402:	e002      	b.n	800f40a <_printf_i+0x1d2>
 800f404:	0670      	lsls	r0, r6, #25
 800f406:	d5fb      	bpl.n	800f400 <_printf_i+0x1c8>
 800f408:	8019      	strh	r1, [r3, #0]
 800f40a:	2300      	movs	r3, #0
 800f40c:	6123      	str	r3, [r4, #16]
 800f40e:	4615      	mov	r5, r2
 800f410:	e7ba      	b.n	800f388 <_printf_i+0x150>
 800f412:	682b      	ldr	r3, [r5, #0]
 800f414:	1d1a      	adds	r2, r3, #4
 800f416:	602a      	str	r2, [r5, #0]
 800f418:	681d      	ldr	r5, [r3, #0]
 800f41a:	6862      	ldr	r2, [r4, #4]
 800f41c:	2100      	movs	r1, #0
 800f41e:	4628      	mov	r0, r5
 800f420:	f7f0 ff0e 	bl	8000240 <memchr>
 800f424:	b108      	cbz	r0, 800f42a <_printf_i+0x1f2>
 800f426:	1b40      	subs	r0, r0, r5
 800f428:	6060      	str	r0, [r4, #4]
 800f42a:	6863      	ldr	r3, [r4, #4]
 800f42c:	6123      	str	r3, [r4, #16]
 800f42e:	2300      	movs	r3, #0
 800f430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f434:	e7a8      	b.n	800f388 <_printf_i+0x150>
 800f436:	6923      	ldr	r3, [r4, #16]
 800f438:	462a      	mov	r2, r5
 800f43a:	4649      	mov	r1, r9
 800f43c:	4640      	mov	r0, r8
 800f43e:	47d0      	blx	sl
 800f440:	3001      	adds	r0, #1
 800f442:	d0ab      	beq.n	800f39c <_printf_i+0x164>
 800f444:	6823      	ldr	r3, [r4, #0]
 800f446:	079b      	lsls	r3, r3, #30
 800f448:	d413      	bmi.n	800f472 <_printf_i+0x23a>
 800f44a:	68e0      	ldr	r0, [r4, #12]
 800f44c:	9b03      	ldr	r3, [sp, #12]
 800f44e:	4298      	cmp	r0, r3
 800f450:	bfb8      	it	lt
 800f452:	4618      	movlt	r0, r3
 800f454:	e7a4      	b.n	800f3a0 <_printf_i+0x168>
 800f456:	2301      	movs	r3, #1
 800f458:	4632      	mov	r2, r6
 800f45a:	4649      	mov	r1, r9
 800f45c:	4640      	mov	r0, r8
 800f45e:	47d0      	blx	sl
 800f460:	3001      	adds	r0, #1
 800f462:	d09b      	beq.n	800f39c <_printf_i+0x164>
 800f464:	3501      	adds	r5, #1
 800f466:	68e3      	ldr	r3, [r4, #12]
 800f468:	9903      	ldr	r1, [sp, #12]
 800f46a:	1a5b      	subs	r3, r3, r1
 800f46c:	42ab      	cmp	r3, r5
 800f46e:	dcf2      	bgt.n	800f456 <_printf_i+0x21e>
 800f470:	e7eb      	b.n	800f44a <_printf_i+0x212>
 800f472:	2500      	movs	r5, #0
 800f474:	f104 0619 	add.w	r6, r4, #25
 800f478:	e7f5      	b.n	800f466 <_printf_i+0x22e>
 800f47a:	bf00      	nop
 800f47c:	0816e059 	.word	0x0816e059
 800f480:	0816e06a 	.word	0x0816e06a

0800f484 <__retarget_lock_acquire_recursive>:
 800f484:	4770      	bx	lr

0800f486 <__retarget_lock_release_recursive>:
 800f486:	4770      	bx	lr

0800f488 <memmove>:
 800f488:	4288      	cmp	r0, r1
 800f48a:	b510      	push	{r4, lr}
 800f48c:	eb01 0402 	add.w	r4, r1, r2
 800f490:	d902      	bls.n	800f498 <memmove+0x10>
 800f492:	4284      	cmp	r4, r0
 800f494:	4623      	mov	r3, r4
 800f496:	d807      	bhi.n	800f4a8 <memmove+0x20>
 800f498:	1e43      	subs	r3, r0, #1
 800f49a:	42a1      	cmp	r1, r4
 800f49c:	d008      	beq.n	800f4b0 <memmove+0x28>
 800f49e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4a6:	e7f8      	b.n	800f49a <memmove+0x12>
 800f4a8:	4402      	add	r2, r0
 800f4aa:	4601      	mov	r1, r0
 800f4ac:	428a      	cmp	r2, r1
 800f4ae:	d100      	bne.n	800f4b2 <memmove+0x2a>
 800f4b0:	bd10      	pop	{r4, pc}
 800f4b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4ba:	e7f7      	b.n	800f4ac <memmove+0x24>

0800f4bc <_malloc_usable_size_r>:
 800f4bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4c0:	1f18      	subs	r0, r3, #4
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	bfbc      	itt	lt
 800f4c6:	580b      	ldrlt	r3, [r1, r0]
 800f4c8:	18c0      	addlt	r0, r0, r3
 800f4ca:	4770      	bx	lr

0800f4cc <with_errnof>:
 800f4cc:	b513      	push	{r0, r1, r4, lr}
 800f4ce:	4604      	mov	r4, r0
 800f4d0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f4d4:	f7ff fb5c 	bl	800eb90 <__errno>
 800f4d8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f4dc:	6004      	str	r4, [r0, #0]
 800f4de:	b002      	add	sp, #8
 800f4e0:	bd10      	pop	{r4, pc}

0800f4e2 <xflowf>:
 800f4e2:	b130      	cbz	r0, 800f4f2 <xflowf+0x10>
 800f4e4:	eef1 7a40 	vneg.f32	s15, s0
 800f4e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f4ec:	2022      	movs	r0, #34	; 0x22
 800f4ee:	f7ff bfed 	b.w	800f4cc <with_errnof>
 800f4f2:	eef0 7a40 	vmov.f32	s15, s0
 800f4f6:	e7f7      	b.n	800f4e8 <xflowf+0x6>

0800f4f8 <__math_uflowf>:
 800f4f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f500 <__math_uflowf+0x8>
 800f4fc:	f7ff bff1 	b.w	800f4e2 <xflowf>
 800f500:	10000000 	.word	0x10000000

0800f504 <__math_may_uflowf>:
 800f504:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f50c <__math_may_uflowf+0x8>
 800f508:	f7ff bfeb 	b.w	800f4e2 <xflowf>
 800f50c:	1a200000 	.word	0x1a200000

0800f510 <__math_oflowf>:
 800f510:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f518 <__math_oflowf+0x8>
 800f514:	f7ff bfe5 	b.w	800f4e2 <xflowf>
 800f518:	70000000 	.word	0x70000000

0800f51c <expf>:
 800f51c:	ee10 2a10 	vmov	r2, s0
 800f520:	f240 412a 	movw	r1, #1066	; 0x42a
 800f524:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800f528:	428b      	cmp	r3, r1
 800f52a:	b430      	push	{r4, r5}
 800f52c:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f530:	d92a      	bls.n	800f588 <expf+0x6c>
 800f532:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800f536:	d058      	beq.n	800f5ea <expf+0xce>
 800f538:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f53c:	d303      	bcc.n	800f546 <expf+0x2a>
 800f53e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f542:	bc30      	pop	{r4, r5}
 800f544:	4770      	bx	lr
 800f546:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800f5f0 <expf+0xd4>
 800f54a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f552:	dd03      	ble.n	800f55c <expf+0x40>
 800f554:	bc30      	pop	{r4, r5}
 800f556:	2000      	movs	r0, #0
 800f558:	f7ff bfda 	b.w	800f510 <__math_oflowf>
 800f55c:	eddf 7a25 	vldr	s15, [pc, #148]	; 800f5f4 <expf+0xd8>
 800f560:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f568:	d503      	bpl.n	800f572 <expf+0x56>
 800f56a:	bc30      	pop	{r4, r5}
 800f56c:	2000      	movs	r0, #0
 800f56e:	f7ff bfc3 	b.w	800f4f8 <__math_uflowf>
 800f572:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f5f8 <expf+0xdc>
 800f576:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57e:	d503      	bpl.n	800f588 <expf+0x6c>
 800f580:	bc30      	pop	{r4, r5}
 800f582:	2000      	movs	r0, #0
 800f584:	f7ff bfbe 	b.w	800f504 <__math_may_uflowf>
 800f588:	4b1c      	ldr	r3, [pc, #112]	; (800f5fc <expf+0xe0>)
 800f58a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f58e:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800f592:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800f596:	eeb0 7b44 	vmov.f64	d7, d4
 800f59a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f59e:	ee17 0a10 	vmov	r0, s14
 800f5a2:	ee37 7b44 	vsub.f64	d7, d7, d4
 800f5a6:	f000 021f 	and.w	r2, r0, #31
 800f5aa:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800f5ae:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800f5b2:	ee27 4b07 	vmul.f64	d4, d7, d7
 800f5b6:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800f5ba:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800f5be:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f5c2:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800f5c6:	684d      	ldr	r5, [r1, #4]
 800f5c8:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	190a      	adds	r2, r1, r4
 800f5d0:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800f5d4:	eea5 0b07 	vfma.f64	d0, d5, d7
 800f5d8:	ec43 2b17 	vmov	d7, r2, r3
 800f5dc:	eea6 0b04 	vfma.f64	d0, d6, d4
 800f5e0:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f5e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f5e8:	e7ab      	b.n	800f542 <expf+0x26>
 800f5ea:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800f600 <expf+0xe4>
 800f5ee:	e7a8      	b.n	800f542 <expf+0x26>
 800f5f0:	42b17217 	.word	0x42b17217
 800f5f4:	c2cff1b4 	.word	0xc2cff1b4
 800f5f8:	c2ce8ecf 	.word	0xc2ce8ecf
 800f5fc:	0816e080 	.word	0x0816e080
 800f600:	00000000 	.word	0x00000000

0800f604 <_init>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr

0800f610 <_fini>:
 800f610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f612:	bf00      	nop
 800f614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f616:	bc08      	pop	{r3}
 800f618:	469e      	mov	lr, r3
 800f61a:	4770      	bx	lr
