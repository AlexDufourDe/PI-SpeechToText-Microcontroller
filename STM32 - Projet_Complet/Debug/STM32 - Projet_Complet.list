
STM32 - Projet_Complet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb6c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a20  0800ed70  0800ed70  0001ed70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022790  08022790  00040070  2**0
                  CONTENTS
  4 .ARM          00000008  08022790  08022790  00032790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022798  08022798  00040070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022798  08022798  00032798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802279c  0802279c  0003279c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080227a0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018d28  20000070  08022810  00040070  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20018d98  08022810  00048d98  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023a77  00000000  00000000  0004009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d0f  00000000  00000000  00063b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  00069828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001750  00000000  00000000  0006b2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035fe0  00000000  00000000  0006ca28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000297d4  00000000  00000000  000a2a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012a947  00000000  00000000  000cc1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  001f6b23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e48  00000000  00000000  001f6be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00003ac5  00000000  00000000  001fda2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800ed54 	.word	0x0800ed54

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800ed54 	.word	0x0800ed54

08000240 <arm_bitreversal_32>:
 8000240:	1c4b      	adds	r3, r1, #1
 8000242:	2b01      	cmp	r3, #1
 8000244:	bf98      	it	ls
 8000246:	4770      	bxls	lr
 8000248:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024c:	1c91      	adds	r1, r2, #2
 800024e:	089b      	lsrs	r3, r3, #2

08000250 <arm_bitreversal_32_0>:
 8000250:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000254:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000258:	880a      	ldrh	r2, [r1, #0]
 800025a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800025e:	4480      	add	r8, r0
 8000260:	4481      	add	r9, r0
 8000262:	4402      	add	r2, r0
 8000264:	4484      	add	ip, r0
 8000266:	f8d9 7000 	ldr.w	r7, [r9]
 800026a:	f8d8 6000 	ldr.w	r6, [r8]
 800026e:	6815      	ldr	r5, [r2, #0]
 8000270:	f8dc 4000 	ldr.w	r4, [ip]
 8000274:	f8c9 6000 	str.w	r6, [r9]
 8000278:	f8c8 7000 	str.w	r7, [r8]
 800027c:	f8cc 5000 	str.w	r5, [ip]
 8000280:	6014      	str	r4, [r2, #0]
 8000282:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000286:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800028a:	6855      	ldr	r5, [r2, #4]
 800028c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000290:	f8c9 6004 	str.w	r6, [r9, #4]
 8000294:	f8c8 7004 	str.w	r7, [r8, #4]
 8000298:	f8cc 5004 	str.w	r5, [ip, #4]
 800029c:	6054      	str	r4, [r2, #4]
 800029e:	3108      	adds	r1, #8
 80002a0:	3b01      	subs	r3, #1
 80002a2:	d1d5      	bne.n	8000250 <arm_bitreversal_32_0>
 80002a4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002a8:	4770      	bx	lr

080002aa <arm_bitreversal_16>:
 80002aa:	1c4b      	adds	r3, r1, #1
 80002ac:	2b01      	cmp	r3, #1
 80002ae:	bf98      	it	ls
 80002b0:	4770      	bxls	lr
 80002b2:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80002b6:	1c91      	adds	r1, r2, #2
 80002b8:	089b      	lsrs	r3, r3, #2

080002ba <arm_bitreversal_16_0>:
 80002ba:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80002be:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80002c2:	880a      	ldrh	r2, [r1, #0]
 80002c4:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80002c8:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 80002cc:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002d0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002d4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002d8:	f8d9 7000 	ldr.w	r7, [r9]
 80002dc:	f8d8 6000 	ldr.w	r6, [r8]
 80002e0:	6815      	ldr	r5, [r2, #0]
 80002e2:	f8dc 4000 	ldr.w	r4, [ip]
 80002e6:	f8c9 6000 	str.w	r6, [r9]
 80002ea:	f8c8 7000 	str.w	r7, [r8]
 80002ee:	f8cc 5000 	str.w	r5, [ip]
 80002f2:	6014      	str	r4, [r2, #0]
 80002f4:	3108      	adds	r1, #8
 80002f6:	3b01      	subs	r3, #1
 80002f8:	d1df      	bne.n	80002ba <arm_bitreversal_16_0>
 80002fa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002fe:	4770      	bx	lr

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003b4:	f000 b974 	b.w	80006a0 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9d08      	ldr	r5, [sp, #32]
 80003d6:	4604      	mov	r4, r0
 80003d8:	468e      	mov	lr, r1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d14d      	bne.n	800047a <__udivmoddi4+0xaa>
 80003de:	428a      	cmp	r2, r1
 80003e0:	4694      	mov	ip, r2
 80003e2:	d969      	bls.n	80004b8 <__udivmoddi4+0xe8>
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	b152      	cbz	r2, 8000400 <__udivmoddi4+0x30>
 80003ea:	fa01 f302 	lsl.w	r3, r1, r2
 80003ee:	f1c2 0120 	rsb	r1, r2, #32
 80003f2:	fa20 f101 	lsr.w	r1, r0, r1
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	ea41 0e03 	orr.w	lr, r1, r3
 80003fe:	4094      	lsls	r4, r2
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	0c21      	lsrs	r1, r4, #16
 8000406:	fbbe f6f8 	udiv	r6, lr, r8
 800040a:	fa1f f78c 	uxth.w	r7, ip
 800040e:	fb08 e316 	mls	r3, r8, r6, lr
 8000412:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000416:	fb06 f107 	mul.w	r1, r6, r7
 800041a:	4299      	cmp	r1, r3
 800041c:	d90a      	bls.n	8000434 <__udivmoddi4+0x64>
 800041e:	eb1c 0303 	adds.w	r3, ip, r3
 8000422:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000426:	f080 811f 	bcs.w	8000668 <__udivmoddi4+0x298>
 800042a:	4299      	cmp	r1, r3
 800042c:	f240 811c 	bls.w	8000668 <__udivmoddi4+0x298>
 8000430:	3e02      	subs	r6, #2
 8000432:	4463      	add	r3, ip
 8000434:	1a5b      	subs	r3, r3, r1
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb3 f0f8 	udiv	r0, r3, r8
 800043c:	fb08 3310 	mls	r3, r8, r0, r3
 8000440:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000444:	fb00 f707 	mul.w	r7, r0, r7
 8000448:	42a7      	cmp	r7, r4
 800044a:	d90a      	bls.n	8000462 <__udivmoddi4+0x92>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000454:	f080 810a 	bcs.w	800066c <__udivmoddi4+0x29c>
 8000458:	42a7      	cmp	r7, r4
 800045a:	f240 8107 	bls.w	800066c <__udivmoddi4+0x29c>
 800045e:	4464      	add	r4, ip
 8000460:	3802      	subs	r0, #2
 8000462:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000466:	1be4      	subs	r4, r4, r7
 8000468:	2600      	movs	r6, #0
 800046a:	b11d      	cbz	r5, 8000474 <__udivmoddi4+0xa4>
 800046c:	40d4      	lsrs	r4, r2
 800046e:	2300      	movs	r3, #0
 8000470:	e9c5 4300 	strd	r4, r3, [r5]
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	428b      	cmp	r3, r1
 800047c:	d909      	bls.n	8000492 <__udivmoddi4+0xc2>
 800047e:	2d00      	cmp	r5, #0
 8000480:	f000 80ef 	beq.w	8000662 <__udivmoddi4+0x292>
 8000484:	2600      	movs	r6, #0
 8000486:	e9c5 0100 	strd	r0, r1, [r5]
 800048a:	4630      	mov	r0, r6
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	fab3 f683 	clz	r6, r3
 8000496:	2e00      	cmp	r6, #0
 8000498:	d14a      	bne.n	8000530 <__udivmoddi4+0x160>
 800049a:	428b      	cmp	r3, r1
 800049c:	d302      	bcc.n	80004a4 <__udivmoddi4+0xd4>
 800049e:	4282      	cmp	r2, r0
 80004a0:	f200 80f9 	bhi.w	8000696 <__udivmoddi4+0x2c6>
 80004a4:	1a84      	subs	r4, r0, r2
 80004a6:	eb61 0303 	sbc.w	r3, r1, r3
 80004aa:	2001      	movs	r0, #1
 80004ac:	469e      	mov	lr, r3
 80004ae:	2d00      	cmp	r5, #0
 80004b0:	d0e0      	beq.n	8000474 <__udivmoddi4+0xa4>
 80004b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004b6:	e7dd      	b.n	8000474 <__udivmoddi4+0xa4>
 80004b8:	b902      	cbnz	r2, 80004bc <__udivmoddi4+0xec>
 80004ba:	deff      	udf	#255	; 0xff
 80004bc:	fab2 f282 	clz	r2, r2
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	f040 8092 	bne.w	80005ea <__udivmoddi4+0x21a>
 80004c6:	eba1 010c 	sub.w	r1, r1, ip
 80004ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ce:	fa1f fe8c 	uxth.w	lr, ip
 80004d2:	2601      	movs	r6, #1
 80004d4:	0c20      	lsrs	r0, r4, #16
 80004d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004da:	fb07 1113 	mls	r1, r7, r3, r1
 80004de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e2:	fb0e f003 	mul.w	r0, lr, r3
 80004e6:	4288      	cmp	r0, r1
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x12c>
 80004ea:	eb1c 0101 	adds.w	r1, ip, r1
 80004ee:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x12a>
 80004f4:	4288      	cmp	r0, r1
 80004f6:	f200 80cb 	bhi.w	8000690 <__udivmoddi4+0x2c0>
 80004fa:	4643      	mov	r3, r8
 80004fc:	1a09      	subs	r1, r1, r0
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb1 f0f7 	udiv	r0, r1, r7
 8000504:	fb07 1110 	mls	r1, r7, r0, r1
 8000508:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800050c:	fb0e fe00 	mul.w	lr, lr, r0
 8000510:	45a6      	cmp	lr, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x156>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800051c:	d202      	bcs.n	8000524 <__udivmoddi4+0x154>
 800051e:	45a6      	cmp	lr, r4
 8000520:	f200 80bb 	bhi.w	800069a <__udivmoddi4+0x2ca>
 8000524:	4608      	mov	r0, r1
 8000526:	eba4 040e 	sub.w	r4, r4, lr
 800052a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x9a>
 8000530:	f1c6 0720 	rsb	r7, r6, #32
 8000534:	40b3      	lsls	r3, r6
 8000536:	fa22 fc07 	lsr.w	ip, r2, r7
 800053a:	ea4c 0c03 	orr.w	ip, ip, r3
 800053e:	fa20 f407 	lsr.w	r4, r0, r7
 8000542:	fa01 f306 	lsl.w	r3, r1, r6
 8000546:	431c      	orrs	r4, r3
 8000548:	40f9      	lsrs	r1, r7
 800054a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800054e:	fa00 f306 	lsl.w	r3, r0, r6
 8000552:	fbb1 f8f9 	udiv	r8, r1, r9
 8000556:	0c20      	lsrs	r0, r4, #16
 8000558:	fa1f fe8c 	uxth.w	lr, ip
 800055c:	fb09 1118 	mls	r1, r9, r8, r1
 8000560:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000564:	fb08 f00e 	mul.w	r0, r8, lr
 8000568:	4288      	cmp	r0, r1
 800056a:	fa02 f206 	lsl.w	r2, r2, r6
 800056e:	d90b      	bls.n	8000588 <__udivmoddi4+0x1b8>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000578:	f080 8088 	bcs.w	800068c <__udivmoddi4+0x2bc>
 800057c:	4288      	cmp	r0, r1
 800057e:	f240 8085 	bls.w	800068c <__udivmoddi4+0x2bc>
 8000582:	f1a8 0802 	sub.w	r8, r8, #2
 8000586:	4461      	add	r1, ip
 8000588:	1a09      	subs	r1, r1, r0
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000590:	fb09 1110 	mls	r1, r9, r0, r1
 8000594:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000598:	fb00 fe0e 	mul.w	lr, r0, lr
 800059c:	458e      	cmp	lr, r1
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x1e2>
 80005a0:	eb1c 0101 	adds.w	r1, ip, r1
 80005a4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80005a8:	d26c      	bcs.n	8000684 <__udivmoddi4+0x2b4>
 80005aa:	458e      	cmp	lr, r1
 80005ac:	d96a      	bls.n	8000684 <__udivmoddi4+0x2b4>
 80005ae:	3802      	subs	r0, #2
 80005b0:	4461      	add	r1, ip
 80005b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005b6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ba:	eba1 010e 	sub.w	r1, r1, lr
 80005be:	42a1      	cmp	r1, r4
 80005c0:	46c8      	mov	r8, r9
 80005c2:	46a6      	mov	lr, r4
 80005c4:	d356      	bcc.n	8000674 <__udivmoddi4+0x2a4>
 80005c6:	d053      	beq.n	8000670 <__udivmoddi4+0x2a0>
 80005c8:	b15d      	cbz	r5, 80005e2 <__udivmoddi4+0x212>
 80005ca:	ebb3 0208 	subs.w	r2, r3, r8
 80005ce:	eb61 010e 	sbc.w	r1, r1, lr
 80005d2:	fa01 f707 	lsl.w	r7, r1, r7
 80005d6:	fa22 f306 	lsr.w	r3, r2, r6
 80005da:	40f1      	lsrs	r1, r6
 80005dc:	431f      	orrs	r7, r3
 80005de:	e9c5 7100 	strd	r7, r1, [r5]
 80005e2:	2600      	movs	r6, #0
 80005e4:	4631      	mov	r1, r6
 80005e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	40d8      	lsrs	r0, r3
 80005f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f4:	fa21 f303 	lsr.w	r3, r1, r3
 80005f8:	4091      	lsls	r1, r2
 80005fa:	4301      	orrs	r1, r0
 80005fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000600:	fa1f fe8c 	uxth.w	lr, ip
 8000604:	fbb3 f0f7 	udiv	r0, r3, r7
 8000608:	fb07 3610 	mls	r6, r7, r0, r3
 800060c:	0c0b      	lsrs	r3, r1, #16
 800060e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000612:	fb00 f60e 	mul.w	r6, r0, lr
 8000616:	429e      	cmp	r6, r3
 8000618:	fa04 f402 	lsl.w	r4, r4, r2
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x260>
 800061e:	eb1c 0303 	adds.w	r3, ip, r3
 8000622:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000626:	d22f      	bcs.n	8000688 <__udivmoddi4+0x2b8>
 8000628:	429e      	cmp	r6, r3
 800062a:	d92d      	bls.n	8000688 <__udivmoddi4+0x2b8>
 800062c:	3802      	subs	r0, #2
 800062e:	4463      	add	r3, ip
 8000630:	1b9b      	subs	r3, r3, r6
 8000632:	b289      	uxth	r1, r1
 8000634:	fbb3 f6f7 	udiv	r6, r3, r7
 8000638:	fb07 3316 	mls	r3, r7, r6, r3
 800063c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000640:	fb06 f30e 	mul.w	r3, r6, lr
 8000644:	428b      	cmp	r3, r1
 8000646:	d908      	bls.n	800065a <__udivmoddi4+0x28a>
 8000648:	eb1c 0101 	adds.w	r1, ip, r1
 800064c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000650:	d216      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000652:	428b      	cmp	r3, r1
 8000654:	d914      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000656:	3e02      	subs	r6, #2
 8000658:	4461      	add	r1, ip
 800065a:	1ac9      	subs	r1, r1, r3
 800065c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000660:	e738      	b.n	80004d4 <__udivmoddi4+0x104>
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e705      	b.n	8000474 <__udivmoddi4+0xa4>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e3      	b.n	8000434 <__udivmoddi4+0x64>
 800066c:	4618      	mov	r0, r3
 800066e:	e6f8      	b.n	8000462 <__udivmoddi4+0x92>
 8000670:	454b      	cmp	r3, r9
 8000672:	d2a9      	bcs.n	80005c8 <__udivmoddi4+0x1f8>
 8000674:	ebb9 0802 	subs.w	r8, r9, r2
 8000678:	eb64 0e0c 	sbc.w	lr, r4, ip
 800067c:	3801      	subs	r0, #1
 800067e:	e7a3      	b.n	80005c8 <__udivmoddi4+0x1f8>
 8000680:	4646      	mov	r6, r8
 8000682:	e7ea      	b.n	800065a <__udivmoddi4+0x28a>
 8000684:	4620      	mov	r0, r4
 8000686:	e794      	b.n	80005b2 <__udivmoddi4+0x1e2>
 8000688:	4640      	mov	r0, r8
 800068a:	e7d1      	b.n	8000630 <__udivmoddi4+0x260>
 800068c:	46d0      	mov	r8, sl
 800068e:	e77b      	b.n	8000588 <__udivmoddi4+0x1b8>
 8000690:	3b02      	subs	r3, #2
 8000692:	4461      	add	r1, ip
 8000694:	e732      	b.n	80004fc <__udivmoddi4+0x12c>
 8000696:	4630      	mov	r0, r6
 8000698:	e709      	b.n	80004ae <__udivmoddi4+0xde>
 800069a:	4464      	add	r4, ip
 800069c:	3802      	subs	r0, #2
 800069e:	e742      	b.n	8000526 <__udivmoddi4+0x156>

080006a0 <__aeabi_idiv0>:
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006aa:	463b      	mov	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_ADC1_Init+0x98>)
 80006b8:	4a21      	ldr	r2, [pc, #132]	; (8000740 <MX_ADC1_Init+0x9c>)
 80006ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <MX_ADC1_Init+0x98>)
 80006be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_ADC1_Init+0x98>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_ADC1_Init+0x98>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006d6:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_ADC1_Init+0x98>)
 80006d8:	2200      	movs	r2, #0
 80006da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_ADC1_Init+0x98>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_ADC1_Init+0x98>)
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <MX_ADC1_Init+0xa0>)
 80006e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_ADC1_Init+0x98>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_ADC1_Init+0x98>)
 8000700:	2201      	movs	r2, #1
 8000702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_ADC1_Init+0x98>)
 8000706:	f001 ff29 	bl	800255c <HAL_ADC_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000710:	f000 fdac 	bl	800126c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_ADC1_Init+0xa4>)
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000718:	2301      	movs	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	4619      	mov	r1, r3
 8000724:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_ADC1_Init+0x98>)
 8000726:	f001 ff5d 	bl	80025e4 <HAL_ADC_ConfigChannel>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000730:	f000 fd9c 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000734:	bf00      	nop
 8000736:	3710      	adds	r7, #16
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000008c 	.word	0x2000008c
 8000740:	40012000 	.word	0x40012000
 8000744:	0f000001 	.word	0x0f000001
 8000748:	10000012 	.word	0x10000012

0800074c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <HAL_ADC_MspInit+0x38>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d10b      	bne.n	8000776 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <HAL_ADC_MspInit+0x3c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	4a09      	ldr	r2, [pc, #36]	; (8000788 <HAL_ADC_MspInit+0x3c>)
 8000764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000768:	6453      	str	r3, [r2, #68]	; 0x44
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <HAL_ADC_MspInit+0x3c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40012000 	.word	0x40012000
 8000788:	40023800 	.word	0x40023800

0800078c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <MX_CRC_Init+0x3c>)
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <MX_CRC_Init+0x40>)
 8000794:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_CRC_Init+0x3c>)
 8000798:	2200      	movs	r2, #0
 800079a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800079c:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <MX_CRC_Init+0x3c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80007a8:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <MX_CRC_Init+0x3c>)
 80007b6:	f002 fa77 	bl	8002ca8 <HAL_CRC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80007c0:	f000 fd54 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000d4 	.word	0x200000d4
 80007cc:	40023000 	.word	0x40023000

080007d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a0a      	ldr	r2, [pc, #40]	; (8000808 <HAL_CRC_MspInit+0x38>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10b      	bne.n	80007fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_CRC_MspInit+0x3c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a09      	ldr	r2, [pc, #36]	; (800080c <HAL_CRC_MspInit+0x3c>)
 80007e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b07      	ldr	r3, [pc, #28]	; (800080c <HAL_CRC_MspInit+0x3c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40023000 	.word	0x40023000
 800080c:	40023800 	.word	0x40023800

08000810 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000814:	4b63      	ldr	r3, [pc, #396]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000816:	4a64      	ldr	r2, [pc, #400]	; (80009a8 <MX_DFSDM1_Init+0x198>)
 8000818:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800081a:	4b62      	ldr	r3, [pc, #392]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000820:	4b60      	ldr	r3, [pc, #384]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000822:	2201      	movs	r2, #1
 8000824:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000826:	4b5f      	ldr	r3, [pc, #380]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000828:	2201      	movs	r2, #1
 800082a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800082c:	4b5d      	ldr	r3, [pc, #372]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 8000832:	4b5c      	ldr	r3, [pc, #368]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000834:	2200      	movs	r2, #0
 8000836:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000838:	4b5a      	ldr	r3, [pc, #360]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800083a:	2200      	movs	r2, #0
 800083c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800083e:	4b59      	ldr	r3, [pc, #356]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000844:	4b57      	ldr	r3, [pc, #348]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800084a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800084c:	4b55      	ldr	r3, [pc, #340]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800084e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000852:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 8000854:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000856:	22b0      	movs	r2, #176	; 0xb0
 8000858:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800085a:	4b52      	ldr	r3, [pc, #328]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 800085c:	2201      	movs	r2, #1
 800085e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000860:	4850      	ldr	r0, [pc, #320]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000862:	f002 fbcb 	bl	8002ffc <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000866:	4b51      	ldr	r3, [pc, #324]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000868:	4a51      	ldr	r2, [pc, #324]	; (80009b0 <MX_DFSDM1_Init+0x1a0>)
 800086a:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 800086c:	4b4f      	ldr	r3, [pc, #316]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800086e:	2201      	movs	r2, #1
 8000870:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000872:	4b4e      	ldr	r3, [pc, #312]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000874:	2201      	movs	r2, #1
 8000876:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 8000878:	4b4c      	ldr	r3, [pc, #304]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800087a:	2201      	movs	r2, #1
 800087c:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800087e:	4b4b      	ldr	r3, [pc, #300]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 8000884:	4b49      	ldr	r3, [pc, #292]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000886:	2201      	movs	r2, #1
 8000888:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 800088a:	4b48      	ldr	r3, [pc, #288]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800088c:	2200      	movs	r2, #0
 800088e:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000890:	4b46      	ldr	r3, [pc, #280]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000892:	2200      	movs	r2, #0
 8000894:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000896:	4b45      	ldr	r3, [pc, #276]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000898:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800089c:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800089e:	4b43      	ldr	r3, [pc, #268]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008a0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80008a4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 80008a6:	4b41      	ldr	r3, [pc, #260]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008a8:	22b0      	movs	r2, #176	; 0xb0
 80008aa:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80008ac:	4b3f      	ldr	r3, [pc, #252]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80008b2:	483e      	ldr	r0, [pc, #248]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 80008b4:	f002 fba2 	bl	8002ffc <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80008b8:	4b3e      	ldr	r3, [pc, #248]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008ba:	4a3f      	ldr	r2, [pc, #252]	; (80009b8 <MX_DFSDM1_Init+0x1a8>)
 80008bc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80008be:	4b3d      	ldr	r3, [pc, #244]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80008c4:	4b3b      	ldr	r3, [pc, #236]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ca:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 80008cc:	4b39      	ldr	r3, [pc, #228]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008d2:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008d8:	4b36      	ldr	r3, [pc, #216]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80008de:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80008e4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008e6:	4b33      	ldr	r3, [pc, #204]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008ec:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008ee:	2204      	movs	r2, #4
 80008f0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008f2:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 80008fe:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000904:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 8000906:	2200      	movs	r2, #0
 8000908:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800090a:	482a      	ldr	r0, [pc, #168]	; (80009b4 <MX_DFSDM1_Init+0x1a4>)
 800090c:	f002 fab6 	bl	8002e7c <HAL_DFSDM_ChannelInit>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 8000916:	f000 fca9 	bl	800126c <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800091c:	4a28      	ldr	r2, [pc, #160]	; (80009c0 <MX_DFSDM1_Init+0x1b0>)
 800091e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000922:	2201      	movs	r2, #1
 8000924:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000928:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000930:	2204      	movs	r2, #4
 8000932:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000934:	4b21      	ldr	r3, [pc, #132]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800094e:	2204      	movs	r2, #4
 8000950:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800095a:	220a      	movs	r2, #10
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000960:	2200      	movs	r2, #0
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 8000966:	2202      	movs	r2, #2
 8000968:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800096a:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_DFSDM1_Init+0x1ac>)
 800096c:	f002 fa86 	bl	8002e7c <HAL_DFSDM_ChannelInit>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 8000976:	f000 fc79 	bl	800126c <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800097a:	2201      	movs	r2, #1
 800097c:	4911      	ldr	r1, [pc, #68]	; (80009c4 <MX_DFSDM1_Init+0x1b4>)
 800097e:	4809      	ldr	r0, [pc, #36]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000980:	f002 fc16 	bl	80031b0 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 8000984:	490f      	ldr	r1, [pc, #60]	; (80009c4 <MX_DFSDM1_Init+0x1b4>)
 8000986:	4807      	ldr	r0, [pc, #28]	; (80009a4 <MX_DFSDM1_Init+0x194>)
 8000988:	f002 fc58 	bl	800323c <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 800098c:	2201      	movs	r2, #1
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <MX_DFSDM1_Init+0x1b4>)
 8000990:	4806      	ldr	r0, [pc, #24]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 8000992:	f002 fc0d 	bl	80031b0 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 8000996:	2101      	movs	r1, #1
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_DFSDM1_Init+0x19c>)
 800099a:	f002 fc4f 	bl	800323c <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	200000f8 	.word	0x200000f8
 80009a8:	40017500 	.word	0x40017500
 80009ac:	2000014c 	.word	0x2000014c
 80009b0:	40017580 	.word	0x40017580
 80009b4:	200001a0 	.word	0x200001a0
 80009b8:	40017400 	.word	0x40017400
 80009bc:	200001d8 	.word	0x200001d8
 80009c0:	40017420 	.word	0x40017420
 80009c4:	00010002 	.word	0x00010002

080009c8 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80009e0:	4b63      	ldr	r3, [pc, #396]	; (8000b70 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d145      	bne.n	8000a74 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80009e8:	4b62      	ldr	r3, [pc, #392]	; (8000b74 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3301      	adds	r3, #1
 80009ee:	4a61      	ldr	r2, [pc, #388]	; (8000b74 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80009f2:	4b60      	ldr	r3, [pc, #384]	; (8000b74 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d10b      	bne.n	8000a12 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80009fa:	4b5f      	ldr	r3, [pc, #380]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fe:	4a5e      	ldr	r2, [pc, #376]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a04:	6453      	str	r3, [r2, #68]	; 0x44
 8000a06:	4b5c      	ldr	r3, [pc, #368]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b59      	ldr	r3, [pc, #356]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a58      	ldr	r2, [pc, #352]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b56      	ldr	r3, [pc, #344]	; (8000b78 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a2a:	2340      	movs	r3, #64	; 0x40
 8000a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a36:	2303      	movs	r3, #3
 8000a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	484d      	ldr	r0, [pc, #308]	; (8000b7c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a46:	f003 f94b 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a52:	2302      	movs	r3, #2
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	4619      	mov	r1, r3
 8000a64:	4845      	ldr	r0, [pc, #276]	; (8000b7c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000a66:	f003 f93b 	bl	8003ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000a6a:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a3f      	ldr	r2, [pc, #252]	; (8000b70 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000a72:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a41      	ldr	r2, [pc, #260]	; (8000b80 <HAL_DFSDM_FilterMspInit+0x1b8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d137      	bne.n	8000aee <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8000a7e:	4b41      	ldr	r3, [pc, #260]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a80:	4a41      	ldr	r2, [pc, #260]	; (8000b88 <HAL_DFSDM_FilterMspInit+0x1c0>)
 8000a82:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8000a84:	4b3f      	ldr	r3, [pc, #252]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a8a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a8c:	4b3d      	ldr	r3, [pc, #244]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a92:	4b3c      	ldr	r3, [pc, #240]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8000a98:	4b3a      	ldr	r3, [pc, #232]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000aa0:	4b38      	ldr	r3, [pc, #224]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aa2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aa8:	4b36      	ldr	r3, [pc, #216]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aae:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 8000ab0:	4b34      	ldr	r3, [pc, #208]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8000ab8:	4b32      	ldr	r3, [pc, #200]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000abe:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ac0:	4b30      	ldr	r3, [pc, #192]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000ac6:	482f      	ldr	r0, [pc, #188]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ac8:	f002 fd64 	bl	8003594 <HAL_DMA_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 8000ad2:	f000 fbcb 	bl	800126c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a2a      	ldr	r2, [pc, #168]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
 8000adc:	4a29      	ldr	r2, [pc, #164]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a27      	ldr	r2, [pc, #156]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000ae6:	629a      	str	r2, [r3, #40]	; 0x28
 8000ae8:	4a26      	ldr	r2, [pc, #152]	; (8000b84 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a26      	ldr	r2, [pc, #152]	; (8000b8c <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d137      	bne.n	8000b68 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000afa:	4a26      	ldr	r2, [pc, #152]	; (8000b94 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000afc:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000afe:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b04:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b06:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b0c:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b18:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b20:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b28:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b30:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b38:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000b40:	4813      	ldr	r0, [pc, #76]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b42:	f002 fd27 	bl	8003594 <HAL_DMA_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 8000b4c:	f000 fb8e 	bl	800126c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b60:	629a      	str	r2, [r3, #40]	; 0x28
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3728      	adds	r7, #40	; 0x28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200002d4 	.word	0x200002d4
 8000b74:	200002d0 	.word	0x200002d0
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020c00 	.word	0x40020c00
 8000b80:	40017500 	.word	0x40017500
 8000b84:	20000210 	.word	0x20000210
 8000b88:	40026410 	.word	0x40026410
 8000b8c:	40017580 	.word	0x40017580
 8000b90:	20000270 	.word	0x20000270
 8000b94:	40026488 	.word	0x40026488

08000b98 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d145      	bne.n	8000c44 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000bb8:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a24      	ldr	r2, [pc, #144]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bc0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000bc2:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d10b      	bne.n	8000be2 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	4a21      	ldr	r2, [pc, #132]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd6:	4b1f      	ldr	r3, [pc, #124]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a1b      	ldr	r2, [pc, #108]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bfa:	2340      	movs	r3, #64	; 0x40
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	4810      	ldr	r0, [pc, #64]	; (8000c58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c16:	f003 f863 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c1a:	2308      	movs	r3, #8
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c26:	2303      	movs	r3, #3
 8000c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4808      	ldr	r0, [pc, #32]	; (8000c58 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c36:	f003 f853 	bl	8003ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a02      	ldr	r2, [pc, #8]	; (8000c4c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000c42:	6013      	str	r3, [r2, #0]
  }
}
 8000c44:	bf00      	nop
 8000c46:	3728      	adds	r7, #40	; 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200002d4 	.word	0x200002d4
 8000c50:	200002d0 	.word	0x200002d0
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020c00 	.word	0x40020c00

08000c5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_DMA_Init+0x78>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <MX_DMA_Init+0x78>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_DMA_Init+0x78>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2038      	movs	r0, #56	; 0x38
 8000c80:	f001 ffdb 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c84:	2038      	movs	r0, #56	; 0x38
 8000c86:	f001 fff4 	bl	8002c72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2039      	movs	r0, #57	; 0x39
 8000c90:	f001 ffd3 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000c94:	2039      	movs	r0, #57	; 0x39
 8000c96:	f001 ffec 	bl	8002c72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	203b      	movs	r0, #59	; 0x3b
 8000ca0:	f001 ffcb 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ca4:	203b      	movs	r0, #59	; 0x3b
 8000ca6:	f001 ffe4 	bl	8002c72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2044      	movs	r0, #68	; 0x44
 8000cb0:	f001 ffc3 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000cb4:	2044      	movs	r0, #68	; 0x44
 8000cb6:	f001 ffdc 	bl	8002c72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2045      	movs	r0, #69	; 0x45
 8000cc0:	f001 ffbb 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000cc4:	2045      	movs	r0, #69	; 0x45
 8000cc6:	f001 ffd4 	bl	8002c72 <HAL_NVIC_EnableIRQ>

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08e      	sub	sp, #56	; 0x38
 8000cdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b5d      	ldr	r3, [pc, #372]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a5c      	ldr	r2, [pc, #368]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b5a      	ldr	r3, [pc, #360]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	623b      	str	r3, [r7, #32]
 8000d04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d06:	4b57      	ldr	r3, [pc, #348]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a56      	ldr	r2, [pc, #344]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d0c:	f043 0310 	orr.w	r3, r3, #16
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b54      	ldr	r3, [pc, #336]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0310 	and.w	r3, r3, #16
 8000d1a:	61fb      	str	r3, [r7, #28]
 8000d1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b51      	ldr	r3, [pc, #324]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a50      	ldr	r2, [pc, #320]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b4e      	ldr	r3, [pc, #312]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	61bb      	str	r3, [r7, #24]
 8000d34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b4b      	ldr	r3, [pc, #300]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a4a      	ldr	r2, [pc, #296]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b48      	ldr	r3, [pc, #288]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4e:	4b45      	ldr	r3, [pc, #276]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a44      	ldr	r2, [pc, #272]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b42      	ldr	r3, [pc, #264]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	4b3f      	ldr	r3, [pc, #252]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a3e      	ldr	r2, [pc, #248]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b3c      	ldr	r3, [pc, #240]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a38      	ldr	r2, [pc, #224]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d96:	4b33      	ldr	r3, [pc, #204]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a32      	ldr	r2, [pc, #200]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000d9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b30      	ldr	r3, [pc, #192]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b2d      	ldr	r3, [pc, #180]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a2c      	ldr	r2, [pc, #176]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <MX_GPIO_Init+0x18c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dcc:	4826      	ldr	r0, [pc, #152]	; (8000e68 <MX_GPIO_Init+0x190>)
 8000dce:	f003 f94b 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	210b      	movs	r1, #11
 8000dd6:	4825      	ldr	r0, [pc, #148]	; (8000e6c <MX_GPIO_Init+0x194>)
 8000dd8:	f003 f946 	bl	8004068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	481f      	ldr	r0, [pc, #124]	; (8000e70 <MX_GPIO_Init+0x198>)
 8000df4:	f002 ff74 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4815      	ldr	r0, [pc, #84]	; (8000e68 <MX_GPIO_Init+0x190>)
 8000e12:	f002 ff65 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000e16:	230b      	movs	r3, #11
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	480f      	ldr	r0, [pc, #60]	; (8000e6c <MX_GPIO_Init+0x194>)
 8000e2e:	f002 ff57 	bl	8003ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <MX_GPIO_Init+0x19c>)
 8000e48:	f002 ff4a 	bl	8003ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2028      	movs	r0, #40	; 0x28
 8000e52:	f001 fef2 	bl	8002c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e56:	2028      	movs	r0, #40	; 0x28
 8000e58:	f001 ff0b 	bl	8002c72 <HAL_NVIC_EnableIRQ>

}
 8000e5c:	bf00      	nop
 8000e5e:	3738      	adds	r7, #56	; 0x38
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40022000 	.word	0x40022000
 8000e6c:	40022400 	.word	0x40022400
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020400 	.word	0x40020400

08000e78 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e7c:	f3bf 8f4f 	dsb	sy
}
 8000e80:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e82:	f3bf 8f6f 	isb	sy
}
 8000e86:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <SCB_EnableICache+0x48>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e90:	f3bf 8f4f 	dsb	sy
}
 8000e94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e96:	f3bf 8f6f 	isb	sy
}
 8000e9a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <SCB_EnableICache+0x48>)
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <SCB_EnableICache+0x48>)
 8000ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ea8:	f3bf 8f4f 	dsb	sy
}
 8000eac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eae:	f3bf 8f6f 	isb	sy
}
 8000eb2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed2:	f3bf 8f4f 	dsb	sy
}
 8000ed6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ede:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	0b5b      	lsrs	r3, r3, #13
 8000ee4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000ee8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	08db      	lsrs	r3, r3, #3
 8000eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000ef2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	015a      	lsls	r2, r3, #5
 8000ef8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000efc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f02:	4911      	ldr	r1, [pc, #68]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	60ba      	str	r2, [r7, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1ef      	bne.n	8000ef4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	60fa      	str	r2, [r7, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d1e5      	bne.n	8000eea <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f1e:	f3bf 8f4f 	dsb	sy
}
 8000f22:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <SCB_EnableDCache+0x84>)
 8000f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f30:	f3bf 8f4f 	dsb	sy
}
 8000f34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f36:	f3bf 8f6f 	isb	sy
}
 8000f3a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000f3c:	bf00      	nop
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b09c      	sub	sp, #112	; 0x70
 8000f50:	af00      	add	r7, sp, #0
	char directory_name[35];
	char file_path [35];
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000f52:	f7ff ff91 	bl	8000e78 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000f56:	f7ff ffb5 	bl	8000ec4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5a:	f001 fa7d 	bl	8002458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5e:	f000 f8e3 	bl	8001128 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f62:	f000 f953 	bl	800120c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f7ff feb7 	bl	8000cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f6a:	f7ff fe77 	bl	8000c5c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000f6e:	f7ff fc4f 	bl	8000810 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000f72:	f000 fa1b 	bl	80013ac <MX_SAI2_Init>
  MX_ADC1_Init();
 8000f76:	f7ff fb95 	bl	80006a4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000f7a:	f000 fd29 	bl	80019d0 <MX_UART4_Init>
  MX_CRC_Init();
 8000f7e:	f7ff fc05 	bl	800078c <MX_CRC_Init>
  MX_RTC_Init();
 8000f82:	f000 f979 	bl	8001278 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000f86:	f000 fb1b 	bl	80015c0 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000f8a:	f007 fd1f 	bl	80089cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, RightRecBuff, 2048))
 8000f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f92:	4959      	ldr	r1, [pc, #356]	; (80010f8 <main+0x1ac>)
 8000f94:	4859      	ldr	r0, [pc, #356]	; (80010fc <main+0x1b0>)
 8000f96:	f002 f981 	bl	800329c <HAL_DFSDM_FilterRegularStart_DMA>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <main+0x58>
    {
      Error_Handler();
 8000fa0:	f000 f964 	bl	800126c <Error_Handler>
    }
    if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, LeftRecBuff, 2048))
 8000fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa8:	4955      	ldr	r1, [pc, #340]	; (8001100 <main+0x1b4>)
 8000faa:	4856      	ldr	r0, [pc, #344]	; (8001104 <main+0x1b8>)
 8000fac:	f002 f976 	bl	800329c <HAL_DFSDM_FilterRegularStart_DMA>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <main+0x6e>
    {
      Error_Handler();
 8000fb6:	f000 f959 	bl	800126c <Error_Handler>
    }


	SDInit();
 8000fba:	f00b f86b 	bl	800c094 <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc4:	4850      	ldr	r0, [pc, #320]	; (8001108 <main+0x1bc>)
 8000fc6:	f003 f84f 	bl	8004068 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2101      	movs	r1, #1
 8000fce:	484f      	ldr	r0, [pc, #316]	; (800110c <main+0x1c0>)
 8000fd0:	f003 f84a 	bl	8004068 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	484c      	ldr	r0, [pc, #304]	; (800110c <main+0x1c0>)
 8000fda:	f003 f845 	bl	8004068 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	484a      	ldr	r0, [pc, #296]	; (800110c <main+0x1c0>)
 8000fe4:	f003 f840 	bl	8004068 <HAL_GPIO_WritePin>

	 Preprocessing_Init();
 8000fe8:	f00a fe40 	bl	800bc6c <Preprocessing_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //wait for th temper button to be pressed
	  while (!recording);
 8000fec:	bf00      	nop
 8000fee:	4b48      	ldr	r3, [pc, #288]	; (8001110 <main+0x1c4>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d0fb      	beq.n	8000fee <main+0xa2>
	  // debouncing
	  HAL_Delay(250);
 8000ff6:	20fa      	movs	r0, #250	; 0xfa
 8000ff8:	f001 fa8c 	bl	8002514 <HAL_Delay>
	  recording = 1;
 8000ffc:	4b44      	ldr	r3, [pc, #272]	; (8001110 <main+0x1c4>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	601a      	str	r2, [r3, #0]
	  //reset the buffer
	  BufferCtl.fptr = 0;
 8001002:	4b44      	ldr	r3, [pc, #272]	; (8001114 <main+0x1c8>)
 8001004:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001008:	461a      	mov	r2, r3
 800100a:	2300      	movs	r3, #0
 800100c:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
	  BufferCtl.wr_state = BUFFER_EMPTY;
 8001010:	4b40      	ldr	r3, [pc, #256]	; (8001114 <main+0x1c8>)
 8001012:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
	  //LED0 on = recording
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001022:	4839      	ldr	r0, [pc, #228]	; (8001108 <main+0x1bc>)
 8001024:	f003 f820 	bl	8004068 <HAL_GPIO_WritePin>
	  //qaits until the button is pressed again or for the buffer to be full
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 8001028:	e001      	b.n	800102e <main+0xe2>
	  {
		  //sends the microphone data to the buffer
		  checkMicrophone();
 800102a:	f00a ff17 	bl	800be5c <checkMicrophone>
	  while (recording && BufferCtl.wr_state == BUFFER_EMPTY)
 800102e:	4b38      	ldr	r3, [pc, #224]	; (8001110 <main+0x1c4>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <main+0xf8>
 8001036:	4b37      	ldr	r3, [pc, #220]	; (8001114 <main+0x1c8>)
 8001038:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800103c:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f2      	beq.n	800102a <main+0xde>
	  }
	  HAL_Delay(250);
 8001044:	20fa      	movs	r0, #250	; 0xfa
 8001046:	f001 fa65 	bl	8002514 <HAL_Delay>
	  recording = 0;
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <main+0x1c4>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8001050:	2201      	movs	r2, #1
 8001052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001056:	482c      	ldr	r0, [pc, #176]	; (8001108 <main+0x1bc>)
 8001058:	f003 f806 	bl	8004068 <HAL_GPIO_WritePin>
	  //read date to folder name
	  get_date((char*)directory_name);
 800105c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001060:	4618      	mov	r0, r3
 8001062:	f00a ffbd 	bl	800bfe0 <get_date>
	  //creates a folder with the date
	  f_mkdir ((char*)(directory_name));
 8001066:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800106a:	4618      	mov	r0, r3
 800106c:	f00a f86f 	bl	800b14e <f_mkdir>
	  //getting the mel spectrogram
	  AudioPreprocessing_Run(BufferCtl.pcm_buff, (uint32_t*)spectrogram_output, BufferCtl.fptr);
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <main+0x1c8>)
 8001072:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 8001076:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800107a:	461a      	mov	r2, r3
 800107c:	4926      	ldr	r1, [pc, #152]	; (8001118 <main+0x1cc>)
 800107e:	4825      	ldr	r0, [pc, #148]	; (8001114 <main+0x1c8>)
 8001080:	f00a fe6c 	bl	800bd5c <AudioPreprocessing_Run>
	  //read time and date
	  get_time_filename((char*)file_name);
 8001084:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001088:	4618      	mov	r0, r3
 800108a:	f00a ffcb 	bl	800c024 <get_time_filename>
	  sprintf((char*)file_path,"%s/%s.txt",directory_name, file_name);
 800108e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001092:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001096:	1d38      	adds	r0, r7, #4
 8001098:	4920      	ldr	r1, [pc, #128]	; (800111c <main+0x1d0>)
 800109a:	f00c fbb1 	bl	800d800 <siprintf>
	  //write to the sd card
	  createFile((char*)file_path);
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00b f821 	bl	800c0e8 <createFile>
	  writeToFile((uint8_t*)spectrogram_output, 4*MEL_SPEC_SIZE);
 80010a6:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <main+0x1cc>)
 80010ac:	f00b f834 	bl	800c118 <writeToFile>
	  SDclose();
 80010b0:	f00b f846 	bl	800c140 <SDclose>

	  sprintf((char*)file_path,"%s/%s.wav",directory_name, file_name);
 80010b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010b8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80010bc:	1d38      	adds	r0, r7, #4
 80010be:	4918      	ldr	r1, [pc, #96]	; (8001120 <main+0x1d4>)
 80010c0:	f00c fb9e 	bl	800d800 <siprintf>
	  //write to the sd card
	  createFile((char*)file_path);
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	4618      	mov	r0, r3
 80010c8:	f00b f80e 	bl	800c0e8 <createFile>
	  //creates the header
	  WavProcess_EncInit(DEFAULT_AUDIO_IN_FREQ, pHeaderBuff);
 80010cc:	4915      	ldr	r1, [pc, #84]	; (8001124 <main+0x1d8>)
 80010ce:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 80010d2:	f00b f85d 	bl	800c190 <WavProcess_EncInit>

	  writeToFile(pHeaderBuff, sizeof(WAVE_FormatTypeDef));
 80010d6:	212c      	movs	r1, #44	; 0x2c
 80010d8:	4812      	ldr	r0, [pc, #72]	; (8001124 <main+0x1d8>)
 80010da:	f00b f81d 	bl	800c118 <writeToFile>
	  writeToFile((uint8_t*)BufferCtl.pcm_buff, BufferCtl.size);
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <main+0x1c8>)
 80010e0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 80010e4:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 80010e8:	4619      	mov	r1, r3
 80010ea:	480a      	ldr	r0, [pc, #40]	; (8001114 <main+0x1c8>)
 80010ec:	f00b f814 	bl	800c118 <writeToFile>
	  SDclose();
 80010f0:	f00b f826 	bl	800c140 <SDclose>
  {
 80010f4:	e77a      	b.n	8000fec <main+0xa0>
 80010f6:	bf00      	nop
 80010f8:	200022dc 	.word	0x200022dc
 80010fc:	2000014c 	.word	0x2000014c
 8001100:	200002dc 	.word	0x200002dc
 8001104:	200000f8 	.word	0x200000f8
 8001108:	40022000 	.word	0x40022000
 800110c:	40022400 	.word	0x40022400
 8001110:	200002d8 	.word	0x200002d8
 8001114:	2000901c 	.word	0x2000901c
 8001118:	20010f30 	.word	0x20010f30
 800111c:	0800ed70 	.word	0x0800ed70
 8001120:	0800ed7c 	.word	0x0800ed7c
 8001124:	20018d5c 	.word	0x20018d5c

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	; 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	2234      	movs	r2, #52	; 0x34
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f00c fa6a 	bl	800d610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 0308 	add.w	r3, r7, #8
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <SystemClock_Config+0xdc>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <SystemClock_Config+0xdc>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <SystemClock_Config+0xdc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001164:	4b28      	ldr	r3, [pc, #160]	; (8001208 <SystemClock_Config+0xe0>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a27      	ldr	r2, [pc, #156]	; (8001208 <SystemClock_Config+0xe0>)
 800116a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b25      	ldr	r3, [pc, #148]	; (8001208 <SystemClock_Config+0xe0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800117c:	2309      	movs	r3, #9
 800117e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001180:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001184:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001186:	2301      	movs	r3, #1
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001194:	2319      	movs	r3, #25
 8001196:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001198:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800119c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011a2:	2309      	movs	r3, #9
 80011a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 ffdc 	bl	800416c <HAL_RCC_OscConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ba:	f000 f857 	bl	800126c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011be:	f002 ff85 	bl	80040cc <HAL_PWREx_EnableOverDrive>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80011c8:	f000 f850 	bl	800126c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011e4:	f107 0308 	add.w	r3, r7, #8
 80011e8:	2107      	movs	r1, #7
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 fa6c 	bl	80046c8 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011f6:	f000 f839 	bl	800126c <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b0a4      	sub	sp, #144	; 0x90
 8001210:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2290      	movs	r2, #144	; 0x90
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f00c f9f9 	bl	800d610 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <PeriphCommonClock_Config+0x5c>)
 8001220:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 8001222:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001226:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001228:	2302      	movs	r3, #2
 800122a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 800122c:	2306      	movs	r3, #6
 800122e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 8001234:	2306      	movs	r3, #6
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001238:	2300      	movs	r3, #0
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800123c:	2300      	movs	r3, #0
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8001240:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001244:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4618      	mov	r0, r3
 8001252:	f003 fc1f 	bl	8004a94 <HAL_RCCEx_PeriphCLKConfig>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 800125c:	f000 f806 	bl	800126c <Error_Handler>
  }
}
 8001260:	bf00      	nop
 8001262:	3790      	adds	r7, #144	; 0x90
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	18300000 	.word	0x18300000

0800126c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001270:	b672      	cpsid	i
}
 8001272:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001274:	e7fe      	b.n	8001274 <Error_Handler+0x8>
	...

08001278 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800128c:	2300      	movs	r3, #0
 800128e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001290:	4b2d      	ldr	r3, [pc, #180]	; (8001348 <MX_RTC_Init+0xd0>)
 8001292:	4a2e      	ldr	r2, [pc, #184]	; (800134c <MX_RTC_Init+0xd4>)
 8001294:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001296:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <MX_RTC_Init+0xd0>)
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <MX_RTC_Init+0xd0>)
 800129e:	227f      	movs	r2, #127	; 0x7f
 80012a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <MX_RTC_Init+0xd0>)
 80012a4:	22ff      	movs	r2, #255	; 0xff
 80012a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012a8:	4b27      	ldr	r3, [pc, #156]	; (8001348 <MX_RTC_Init+0xd0>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ae:	4b26      	ldr	r3, [pc, #152]	; (8001348 <MX_RTC_Init+0xd0>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012b4:	4b24      	ldr	r3, [pc, #144]	; (8001348 <MX_RTC_Init+0xd0>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012ba:	4823      	ldr	r0, [pc, #140]	; (8001348 <MX_RTC_Init+0xd0>)
 80012bc:	f004 f984 	bl	80055c8 <HAL_RTC_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80012c6:	f7ff ffd1 	bl	800126c <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */
  //if flag... return
  if (!SET_TIME_RTC)
  {
	  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0x32F2)
 80012ca:	2100      	movs	r1, #0
 80012cc:	481e      	ldr	r0, [pc, #120]	; (8001348 <MX_RTC_Init+0xd0>)
 80012ce:	f004 fca5 	bl	8005c1c <HAL_RTCEx_BKUPRead>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80012d8:	4293      	cmp	r3, r2
 80012da:	d02e      	beq.n	800133a <MX_RTC_Init+0xc2>

			return;

	  else
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 80012dc:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80012e0:	2100      	movs	r1, #0
 80012e2:	4819      	ldr	r0, [pc, #100]	; (8001348 <MX_RTC_Init+0xd0>)
 80012e4:	f004 fc80 	bl	8005be8 <HAL_RTCEx_BKUPWrite>
  }
  sTime.Hours = HOUR;
 80012e8:	2314      	movs	r3, #20
 80012ea:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MIN;
 80012ec:	2329      	movs	r3, #41	; 0x29
 80012ee:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SEC;
 80012f0:	2300      	movs	r3, #0
 80012f2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2201      	movs	r2, #1
 8001300:	4619      	mov	r1, r3
 8001302:	4811      	ldr	r0, [pc, #68]	; (8001348 <MX_RTC_Init+0xd0>)
 8001304:	f004 f9e4 	bl	80056d0 <HAL_RTC_SetTime>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800130e:	f7ff ffad 	bl	800126c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001312:	2301      	movs	r3, #1
 8001314:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 8001316:	2301      	movs	r3, #1
 8001318:	707b      	strb	r3, [r7, #1]
  sDate.Date = DAY;
 800131a:	2323      	movs	r3, #35	; 0x23
 800131c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 800131e:	2323      	movs	r3, #35	; 0x23
 8001320:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001322:	463b      	mov	r3, r7
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	4807      	ldr	r0, [pc, #28]	; (8001348 <MX_RTC_Init+0xd0>)
 800132a:	f004 fac9 	bl	80058c0 <HAL_RTC_SetDate>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8001334:	f7ff ff9a 	bl	800126c <Error_Handler>
  }
  return;
 8001338:	e001      	b.n	800133e <MX_RTC_Init+0xc6>
			return;
 800133a:	bf00      	nop
 800133c:	e000      	b.n	8001340 <MX_RTC_Init+0xc8>
  return;
 800133e:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200042ec 	.word	0x200042ec
 800134c:	40002800 	.word	0x40002800

08001350 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0a6      	sub	sp, #152	; 0x98
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001358:	f107 0308 	add.w	r3, r7, #8
 800135c:	2290      	movs	r2, #144	; 0x90
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f00c f955 	bl	800d610 <memset>
  if(rtcHandle->Instance==RTC)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <HAL_RTC_MspInit+0x54>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d114      	bne.n	800139a <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001370:	2320      	movs	r3, #32
 8001372:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001378:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	4618      	mov	r0, r3
 8001380:	f003 fb88 	bl	8004a94 <HAL_RCCEx_PeriphCLKConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800138a:	f7ff ff6f 	bl	800126c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_RTC_MspInit+0x58>)
 8001390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <HAL_RTC_MspInit+0x58>)
 8001394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001398:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800139a:	bf00      	nop
 800139c:	3798      	adds	r7, #152	; 0x98
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40002800 	.word	0x40002800
 80013a8:	40023800 	.word	0x40023800

080013ac <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 80013b0:	4b2a      	ldr	r3, [pc, #168]	; (800145c <MX_SAI2_Init+0xb0>)
 80013b2:	4a2b      	ldr	r2, [pc, #172]	; (8001460 <MX_SAI2_Init+0xb4>)
 80013b4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80013b6:	4b29      	ldr	r3, [pc, #164]	; (800145c <MX_SAI2_Init+0xb0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 80013bc:	4b27      	ldr	r3, [pc, #156]	; (800145c <MX_SAI2_Init+0xb0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <MX_SAI2_Init+0xb0>)
 80013c4:	2280      	movs	r2, #128	; 0x80
 80013c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80013c8:	4b24      	ldr	r3, [pc, #144]	; (800145c <MX_SAI2_Init+0xb0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <MX_SAI2_Init+0xb0>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <MX_SAI2_Init+0xb0>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 80013da:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_SAI2_Init+0xb0>)
 80013dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e0:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <MX_SAI2_Init+0xb0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80013e8:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_SAI2_Init+0xb0>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_SAI2_Init+0xb0>)
 80013f0:	4a1c      	ldr	r2, [pc, #112]	; (8001464 <MX_SAI2_Init+0xb8>)
 80013f2:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <MX_SAI2_Init+0xb0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_SAI2_Init+0xb0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001400:	4b16      	ldr	r3, [pc, #88]	; (800145c <MX_SAI2_Init+0xb0>)
 8001402:	2200      	movs	r2, #0
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_SAI2_Init+0xb0>)
 8001408:	2200      	movs	r2, #0
 800140a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <MX_SAI2_Init+0xb0>)
 800140e:	2220      	movs	r2, #32
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_SAI2_Init+0xb0>)
 8001414:	2210      	movs	r2, #16
 8001416:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_SAI2_Init+0xb0>)
 800141a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800141e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_SAI2_Init+0xb0>)
 8001422:	2200      	movs	r2, #0
 8001424:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_SAI2_Init+0xb0>)
 8001428:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800142c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800142e:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_SAI2_Init+0xb0>)
 8001430:	2200      	movs	r2, #0
 8001432:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_SAI2_Init+0xb0>)
 8001436:	2200      	movs	r2, #0
 8001438:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_SAI2_Init+0xb0>)
 800143c:	2202      	movs	r2, #2
 800143e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_SAI2_Init+0xb0>)
 8001442:	2203      	movs	r2, #3
 8001444:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_SAI2_Init+0xb0>)
 8001448:	f004 fc00 	bl	8005c4c <HAL_SAI_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8001452:	f7ff ff0b 	bl	800126c <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000430c 	.word	0x2000430c
 8001460:	40015c24 	.word	0x40015c24
 8001464:	0002ee00 	.word	0x0002ee00

08001468 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a4a      	ldr	r2, [pc, #296]	; (80015a0 <HAL_SAI_MspInit+0x138>)
 8001476:	4293      	cmp	r3, r2
 8001478:	f040 808e 	bne.w	8001598 <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 800147c:	4b49      	ldr	r3, [pc, #292]	; (80015a4 <HAL_SAI_MspInit+0x13c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10b      	bne.n	800149c <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001484:	4b48      	ldr	r3, [pc, #288]	; (80015a8 <HAL_SAI_MspInit+0x140>)
 8001486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001488:	4a47      	ldr	r2, [pc, #284]	; (80015a8 <HAL_SAI_MspInit+0x140>)
 800148a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800148e:	6453      	str	r3, [r2, #68]	; 0x44
 8001490:	4b45      	ldr	r3, [pc, #276]	; (80015a8 <HAL_SAI_MspInit+0x140>)
 8001492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001498:	60bb      	str	r3, [r7, #8]
 800149a:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800149c:	4b41      	ldr	r3, [pc, #260]	; (80015a4 <HAL_SAI_MspInit+0x13c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a40      	ldr	r2, [pc, #256]	; (80015a4 <HAL_SAI_MspInit+0x13c>)
 80014a4:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014a6:	2340      	movs	r3, #64	; 0x40
 80014a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80014b6:	230a      	movs	r3, #10
 80014b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4619      	mov	r1, r3
 80014c0:	483a      	ldr	r0, [pc, #232]	; (80015ac <HAL_SAI_MspInit+0x144>)
 80014c2:	f002 fc0d 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80014c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80014d8:	230a      	movs	r3, #10
 80014da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	4619      	mov	r1, r3
 80014e2:	4833      	ldr	r0, [pc, #204]	; (80015b0 <HAL_SAI_MspInit+0x148>)
 80014e4:	f002 fbfc 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014e8:	2301      	movs	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80014f8:	230a      	movs	r3, #10
 80014fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	482c      	ldr	r0, [pc, #176]	; (80015b4 <HAL_SAI_MspInit+0x14c>)
 8001504:	f002 fbec 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001508:	2304      	movs	r3, #4
 800150a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001514:	2303      	movs	r3, #3
 8001516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001518:	2308      	movs	r3, #8
 800151a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	4824      	ldr	r0, [pc, #144]	; (80015b4 <HAL_SAI_MspInit+0x14c>)
 8001524:	f002 fbdc 	bl	8003ce0 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 800152a:	4a24      	ldr	r2, [pc, #144]	; (80015bc <HAL_SAI_MspInit+0x154>)
 800152c:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 800152e:	4b22      	ldr	r3, [pc, #136]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001530:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 8001534:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001538:	2240      	movs	r2, #64	; 0x40
 800153a:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800153c:	4b1e      	ldr	r3, [pc, #120]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001548:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 800154c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001550:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001554:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001558:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 800155c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001560:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001564:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001568:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001570:	4811      	ldr	r0, [pc, #68]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001572:	f002 f80f 	bl	8003594 <HAL_DMA_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 800157c:	f7ff fe76 	bl	800126c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001584:	671a      	str	r2, [r3, #112]	; 0x70
 8001586:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001590:	66da      	str	r2, [r3, #108]	; 0x6c
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_SAI_MspInit+0x150>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40015c24 	.word	0x40015c24
 80015a4:	200043f0 	.word	0x200043f0
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40021800 	.word	0x40021800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	20004390 	.word	0x20004390
 80015bc:	40026428 	.word	0x40026428

080015c0 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80015c4:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015c6:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <MX_SDMMC1_SD_Init+0x3c>)
 80015c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015d8:	2200      	movs	r2, #0
 80015da:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80015e8:	4b03      	ldr	r3, [pc, #12]	; (80015f8 <MX_SDMMC1_SD_Init+0x38>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	200043f4 	.word	0x200043f4
 80015fc:	40012c00 	.word	0x40012c00

08001600 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b0ae      	sub	sp, #184	; 0xb8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001608:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	60da      	str	r2, [r3, #12]
 8001616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2290      	movs	r2, #144	; 0x90
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f00b fff5 	bl	800d610 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a74      	ldr	r2, [pc, #464]	; (80017fc <HAL_SD_MspInit+0x1fc>)
 800162c:	4293      	cmp	r3, r2
 800162e:	f040 80e0 	bne.w	80017f2 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001632:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001636:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800163e:	2300      	movs	r3, #0
 8001640:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4618      	mov	r0, r3
 800164a:	f003 fa23 	bl	8004a94 <HAL_RCCEx_PeriphCLKConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001654:	f7ff fe0a 	bl	800126c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001658:	4b69      	ldr	r3, [pc, #420]	; (8001800 <HAL_SD_MspInit+0x200>)
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	4a68      	ldr	r2, [pc, #416]	; (8001800 <HAL_SD_MspInit+0x200>)
 800165e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001662:	6453      	str	r3, [r2, #68]	; 0x44
 8001664:	4b66      	ldr	r3, [pc, #408]	; (8001800 <HAL_SD_MspInit+0x200>)
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001670:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_SD_MspInit+0x200>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	4a62      	ldr	r2, [pc, #392]	; (8001800 <HAL_SD_MspInit+0x200>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6313      	str	r3, [r2, #48]	; 0x30
 800167c:	4b60      	ldr	r3, [pc, #384]	; (8001800 <HAL_SD_MspInit+0x200>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001688:	4b5d      	ldr	r3, [pc, #372]	; (8001800 <HAL_SD_MspInit+0x200>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4a5c      	ldr	r2, [pc, #368]	; (8001800 <HAL_SD_MspInit+0x200>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
 8001694:	4b5a      	ldr	r3, [pc, #360]	; (8001800 <HAL_SD_MspInit+0x200>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80016a0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80016a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	2302      	movs	r3, #2
 80016aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016ba:	230c      	movs	r3, #12
 80016bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016c4:	4619      	mov	r1, r3
 80016c6:	484f      	ldr	r0, [pc, #316]	; (8001804 <HAL_SD_MspInit+0x204>)
 80016c8:	f002 fb0a 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016cc:	2304      	movs	r3, #4
 80016ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80016e4:	230c      	movs	r3, #12
 80016e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4845      	ldr	r0, [pc, #276]	; (8001808 <HAL_SD_MspInit+0x208>)
 80016f2:	f002 faf5 	bl	8003ce0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 80016f6:	4b45      	ldr	r3, [pc, #276]	; (800180c <HAL_SD_MspInit+0x20c>)
 80016f8:	4a45      	ldr	r2, [pc, #276]	; (8001810 <HAL_SD_MspInit+0x210>)
 80016fa:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80016fc:	4b43      	ldr	r3, [pc, #268]	; (800180c <HAL_SD_MspInit+0x20c>)
 80016fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001702:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001704:	4b41      	ldr	r3, [pc, #260]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800170a:	4b40      	ldr	r3, [pc, #256]	; (800180c <HAL_SD_MspInit+0x20c>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001710:	4b3e      	ldr	r3, [pc, #248]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001716:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001718:	4b3c      	ldr	r3, [pc, #240]	; (800180c <HAL_SD_MspInit+0x20c>)
 800171a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800171e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001720:	4b3a      	ldr	r3, [pc, #232]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001726:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001728:	4b38      	ldr	r3, [pc, #224]	; (800180c <HAL_SD_MspInit+0x20c>)
 800172a:	2220      	movs	r2, #32
 800172c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800172e:	4b37      	ldr	r3, [pc, #220]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001734:	4b35      	ldr	r3, [pc, #212]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001736:	2204      	movs	r2, #4
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800173a:	4b34      	ldr	r3, [pc, #208]	; (800180c <HAL_SD_MspInit+0x20c>)
 800173c:	2203      	movs	r2, #3
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001740:	4b32      	ldr	r3, [pc, #200]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001742:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001748:	4b30      	ldr	r3, [pc, #192]	; (800180c <HAL_SD_MspInit+0x20c>)
 800174a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800174e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001750:	482e      	ldr	r0, [pc, #184]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001752:	f001 ff1f 	bl	8003594 <HAL_DMA_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 800175c:	f7ff fd86 	bl	800126c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a2a      	ldr	r2, [pc, #168]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
 8001766:	4a29      	ldr	r2, [pc, #164]	; (800180c <HAL_SD_MspInit+0x20c>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <HAL_SD_MspInit+0x214>)
 800176e:	4a2a      	ldr	r2, [pc, #168]	; (8001818 <HAL_SD_MspInit+0x218>)
 8001770:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <HAL_SD_MspInit+0x214>)
 8001774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001778:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800177a:	4b26      	ldr	r3, [pc, #152]	; (8001814 <HAL_SD_MspInit+0x214>)
 800177c:	2240      	movs	r2, #64	; 0x40
 800177e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_SD_MspInit+0x214>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001786:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_SD_MspInit+0x214>)
 8001788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800178e:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_SD_MspInit+0x214>)
 8001790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001794:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001796:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <HAL_SD_MspInit+0x214>)
 8001798:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800179e:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017a0:	2220      	movs	r2, #32
 80017a2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017ac:	2204      	movs	r2, #4
 80017ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017b0:	4b18      	ldr	r3, [pc, #96]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017b2:	2203      	movs	r2, #3
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80017b6:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80017c6:	4813      	ldr	r0, [pc, #76]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017c8:	f001 fee4 	bl	8003594 <HAL_DMA_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 80017d2:	f7ff fd4b 	bl	800126c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c
 80017dc:	4a0d      	ldr	r2, [pc, #52]	; (8001814 <HAL_SD_MspInit+0x214>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2031      	movs	r0, #49	; 0x31
 80017e8:	f001 fa27 	bl	8002c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80017ec:	2031      	movs	r0, #49	; 0x31
 80017ee:	f001 fa40 	bl	8002c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80017f2:	bf00      	nop
 80017f4:	37b8      	adds	r7, #184	; 0xb8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	40023800 	.word	0x40023800
 8001804:	40020800 	.word	0x40020800
 8001808:	40020c00 	.word	0x40020c00
 800180c:	20004478 	.word	0x20004478
 8001810:	400264a0 	.word	0x400264a0
 8001814:	200044d8 	.word	0x200044d8
 8001818:	40026458 	.word	0x40026458

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_MspInit+0x44>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_MspInit+0x44>)
 8001828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_MspInit+0x44>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x44>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x44>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x44>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <NMI_Handler+0x4>

0800186a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <HardFault_Handler+0x4>

08001870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <MemManage_Handler+0x4>

08001876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187a:	e7fe      	b.n	800187a <BusFault_Handler+0x4>

0800187c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <UsageFault_Handler+0x4>

08001882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b0:	f000 fe10 	bl	80024d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 80018bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018c0:	f002 fbec 	bl	800409c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <SDMMC1_IRQHandler+0x10>)
 80018ce:	f004 fdf3 	bl	80064b8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200043f4 	.word	0x200043f4

080018dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA2_Stream0_IRQHandler+0x10>)
 80018e2:	f001 ff87 	bl	80037f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000210 	.word	0x20000210

080018f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <DMA2_Stream1_IRQHandler+0x10>)
 80018f6:	f001 ff7d 	bl	80037f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20004390 	.word	0x20004390

08001904 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA2_Stream3_IRQHandler+0x10>)
 800190a:	f001 ff73 	bl	80037f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200044d8 	.word	0x200044d8

08001918 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <DMA2_Stream5_IRQHandler+0x10>)
 800191e:	f001 ff69 	bl	80037f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000270 	.word	0x20000270

0800192c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <DMA2_Stream6_IRQHandler+0x10>)
 8001932:	f001 ff5f 	bl	80037f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20004478 	.word	0x20004478

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <_sbrk+0x5c>)
 800194a:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <_sbrk+0x60>)
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <_sbrk+0x64>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <_sbrk+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	429a      	cmp	r2, r3
 800196e:	d207      	bcs.n	8001980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001970:	f00b fe16 	bl	800d5a0 <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	220c      	movs	r2, #12
 8001978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800197e:	e009      	b.n	8001994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001986:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a05      	ldr	r2, [pc, #20]	; (80019a4 <_sbrk+0x64>)
 8001990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20080000 	.word	0x20080000
 80019a0:	00000800 	.word	0x00000800
 80019a4:	20004538 	.word	0x20004538
 80019a8:	20018d98 	.word	0x20018d98

080019ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <SystemInit+0x20>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <SystemInit+0x20>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_UART4_Init+0x58>)
 80019d6:	4a15      	ldr	r2, [pc, #84]	; (8001a2c <MX_UART4_Init+0x5c>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_UART4_Init+0x58>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_UART4_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_UART4_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <MX_UART4_Init+0x58>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <MX_UART4_Init+0x58>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <MX_UART4_Init+0x58>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <MX_UART4_Init+0x58>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <MX_UART4_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <MX_UART4_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	; (8001a28 <MX_UART4_Init+0x58>)
 8001a14:	f005 fdfb 	bl	800760e <HAL_UART_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001a1e:	f7ff fc25 	bl	800126c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000453c 	.word	0x2000453c
 8001a2c:	40004c00 	.word	0x40004c00

08001a30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b0ae      	sub	sp, #184	; 0xb8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2290      	movs	r2, #144	; 0x90
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00b fddd 	bl	800d610 <memset>
  if(uartHandle->Instance==UART4)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a32      	ldr	r2, [pc, #200]	; (8001b24 <HAL_UART_MspInit+0xf4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d15d      	bne.n	8001b1c <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a64:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 f810 	bl	8004a94 <HAL_RCCEx_PeriphCLKConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a7a:	f7ff fbf7 	bl	800126c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001a84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a88:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8a:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a96:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	4a23      	ldr	r2, [pc, #140]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001a9c:	f043 0308 	orr.w	r3, r3, #8
 8001aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <HAL_UART_MspInit+0xf8>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ade:	2308      	movs	r3, #8
 8001ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4810      	ldr	r0, [pc, #64]	; (8001b2c <HAL_UART_MspInit+0xfc>)
 8001aec:	f002 f8f8 	bl	8003ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001b0a:	2306      	movs	r3, #6
 8001b0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	; (8001b30 <HAL_UART_MspInit+0x100>)
 8001b18:	f002 f8e2 	bl	8003ce0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	37b8      	adds	r7, #184	; 0xb8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40004c00 	.word	0x40004c00
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020c00 	.word	0x40020c00
 8001b30:	40020000 	.word	0x40020000

08001b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b3a:	490e      	ldr	r1, [pc, #56]	; (8001b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b4e:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b50:	4c0b      	ldr	r4, [pc, #44]	; (8001b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b5e:	f7ff ff25 	bl	80019ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b62:	f00b fd23 	bl	800d5ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b66:	f7ff f9f1 	bl	8000f4c <main>
  bx  lr    
 8001b6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b6c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b74:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b78:	080227a0 	.word	0x080227a0
  ldr r2, =_sbss
 8001b7c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b80:	20018d98 	.word	0x20018d98

08001b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC_IRQHandler>
	...

08001b88 <buf_to_float_normed>:
 * @param      *pInSignal   points to input signal buffer
 * @param      *pOutSignal  points to output signal buffer
 * @param      len          signal length
 */
void buf_to_float_normed(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b087      	sub	sp, #28
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e016      	b.n	8001bc8 <buf_to_float_normed+0x40>
  {
    pOutSignal[i] = (float32_t) pInSignal[i] / (1 << 15);
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba6:	ee07 3a90 	vmov	s15, r3
 8001baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	68ba      	ldr	r2, [r7, #8]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001be0 <buf_to_float_normed+0x58>
 8001bba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bbe:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d3e4      	bcc.n	8001b9a <buf_to_float_normed+0x12>
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	371c      	adds	r7, #28
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	47000000 	.word	0x47000000

08001be4 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	; 0x30
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	6899      	ldr	r1, [r3, #8]
 8001c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	f00b f990 	bl	800cf30 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 8001c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	68ba      	ldr	r2, [r7, #8]
 8001c16:	18d0      	adds	r0, r2, r3
 8001c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	2100      	movs	r1, #0
 8001c22:	f00b fcf5 	bl	800d610 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6818      	ldr	r0, [r3, #0]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	68b9      	ldr	r1, [r7, #8]
 8001c30:	f00a fcc2 	bl	800c5b8 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	ed93 7a00 	vldr	s14, [r3]
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c44:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	ed93 7a00 	vldr	s14, [r3]
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	3304      	adds	r3, #4
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5c:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f103 0008 	add.w	r0, r3, #8
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	1d19      	adds	r1, r3, #4
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	085b      	lsrs	r3, r3, #1
 8001c74:	3b01      	subs	r3, #1
 8001c76:	461a      	mov	r2, r3
 8001c78:	f00b f902 	bl	800ce80 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	085b      	lsrs	r3, r3, #1
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	791b      	ldrb	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d12c      	bne.n	8001cec <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c96:	e023      	b.n	8001ce0 <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 8001c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	440b      	add	r3, r1
 8001caa:	617a      	str	r2, [r7, #20]
 8001cac:	613b      	str	r3, [r7, #16]
   */
  CMSIS_INLINE __STATIC_INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8001cae:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	db09      	blt.n	8001cd0 <SpectrogramColumn+0xec>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001cbc:	ed97 0a05 	vldr	s0, [r7, #20]
 8001cc0:	f00c fa7c 	bl	800e1bc <sqrtf>
 8001cc4:	eef0 7a40 	vmov.f32	s15, s0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001cce:	e004      	b.n	8001cda <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001cd8:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 8001cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cdc:	3301      	adds	r3, #1
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d3d5      	bcc.n	8001c98 <SpectrogramColumn+0xb4>
    }
  }
}
 8001cec:	bf00      	nop
 8001cee:	3730      	adds	r7, #48	; 0x30
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <MelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Mel Spectrogram column.
 * @return     None
 */
void MelSpectrogramColumn(MelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  float32_t *tmp_buffer = S->SpectrogramConf->pScratch;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	617b      	str	r3, [r7, #20]

  /* Power Spectrogram */
  SpectrogramColumn(S->SpectrogramConf, pInSignal, tmp_buffer);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff67 	bl	8001be4 <SpectrogramColumn>

  /* Mel Filter Banks Application */
  MelFilterbank(S->MelFilter, tmp_buffer, pOutCol);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6979      	ldr	r1, [r7, #20]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f000 f9a8 	bl	8002074 <MelFilterbank>
}
 8001d24:	bf00      	nop
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b0a4      	sub	sp, #144	; 0x90
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d38:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d46:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	330c      	adds	r3, #12
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 8001d82:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001d86:	4618      	mov	r0, r3
 8001d88:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001d8c:	f000 f9c8 	bl	8002120 <MelScale>
 8001d90:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 8001d94:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001d98:	4618      	mov	r0, r3
 8001d9a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001d9e:	f000 f9bf 	bl	8002120 <MelScale>
 8001da2:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 8001da6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001daa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001dae:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001db4:	3301      	adds	r3, #1
 8001db6:	ee07 3a90 	vmov	s15, r3
 8001dba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dc2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 8001dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc8:	ee07 3a90 	vmov	s15, r3
 8001dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001dd4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001de4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 8001dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001df6:	e133      	b.n	8002060 <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 8001df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d044      	beq.n	8001e88 <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 8001dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e00:	ee07 3a90 	vmov	s15, r3
 8001e04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e10:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e18:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e22:	f000 f9ed 	bl	8002200 <InverseMelScale>
 8001e26:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 8001e2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e36:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e3e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e46:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e50:	f000 f9d6 	bl	8002200 <InverseMelScale>
 8001e54:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 8001e58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	ee07 3a90 	vmov	s15, r3
 8001e60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e74:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001e78:	4618      	mov	r0, r3
 8001e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7e:	f000 f9bf 	bl	8002200 <InverseMelScale>
 8001e82:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 8001e86:	e02e      	b.n	8001ee6 <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 8001e88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e8a:	ee07 3a90 	vmov	s15, r3
 8001e8e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e92:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 8001ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eb2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec2:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 8001ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ec8:	3302      	adds	r3, #2
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ed2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee2:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 8001ee6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001eea:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 8001ef6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001efa:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f02:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	667b      	str	r3, [r7, #100]	; 0x64
 8001f1a:	e098      	b.n	800204e <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 8001f1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 8001f22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f34:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 8001f38:	e011      	b.n	8001f5e <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 8001f3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001f48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001f50:	4618      	mov	r0, r3
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	f000 f8e3 	bl	8002120 <MelScale>
 8001f5a:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 8001f5e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8001f62:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6a:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 8001f6e:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001f72:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7a:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 8001f7e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f82:	eef1 6a67 	vneg.f32	s13, s15
 8001f86:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f8e:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 8001f92:	edd7 6a06 	vldr	s13, [r7, #24]
 8001f96:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f9e:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 8001fa2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001faa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb2:	d502      	bpl.n	8001fba <MelFilterbank_Init+0x28e>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	673b      	str	r3, [r7, #112]	; 0x70
 8001fb8:	e001      	b.n	8001fbe <MelFilterbank_Init+0x292>
      else min = upper;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 8001fbe:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8001fc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fca:	dd2f      	ble.n	800202c <MelFilterbank_Init+0x300>
      {
        weight = min;
 8001fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fce:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 8001fd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d013      	beq.n	8001ffe <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 8001fd6:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001fda:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8001fde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fe2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fea:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 8001fee:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001ff2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffa:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 8001ffe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002002:	1d1a      	adds	r2, r3, #4
 8002004:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002008:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800200a:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 800200c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002014:	d102      	bne.n	800201c <MelFilterbank_Init+0x2f0>
          start_index = j;
 8002016:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002018:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 800201c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800201e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 8002022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	1c5a      	adds	r2, r3, #1
 8002028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800202a:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 800202c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002032:	4413      	add	r3, r2
 8002034:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002038:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 800203a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002040:	4413      	add	r3, r2
 8002042:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002046:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 8002048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800204a:	3301      	adds	r3, #1
 800204c:	667b      	str	r3, [r7, #100]	; 0x64
 800204e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002050:	085b      	lsrs	r3, r3, #1
 8002052:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002054:	429a      	cmp	r2, r3
 8002056:	f4ff af61 	bcc.w	8001f1c <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 800205a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800205c:	3301      	adds	r3, #1
 800205e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002060:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002064:	429a      	cmp	r2, r3
 8002066:	f4ff aec7 	bcc.w	8001df8 <MelFilterbank_Init+0xcc>
    }
  }
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	3790      	adds	r7, #144	; 0x90
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 8002074:	b480      	push	{r7}
 8002076:	b08d      	sub	sp, #52	; 0x34
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
 800209c:	e034      	b.n	8002108 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	4413      	add	r3, r2
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4413      	add	r3, r2
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80020bc:	8a7b      	ldrh	r3, [r7, #18]
 80020be:	623b      	str	r3, [r7, #32]
 80020c0:	e015      	b.n	80020ee <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	4413      	add	r3, r2
 80020ca:	ed93 7a00 	vldr	s14, [r3]
 80020ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d0:	1d1a      	adds	r2, r3, #4
 80020d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020dc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80020e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	3301      	adds	r3, #1
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	8a3b      	ldrh	r3, [r7, #16]
 80020f0:	6a3a      	ldr	r2, [r7, #32]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d9e5      	bls.n	80020c2 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002100:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	3301      	adds	r3, #1
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
 8002108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	d3c6      	bcc.n	800209e <MelFilterbank+0x2a>
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	3734      	adds	r7, #52	; 0x34
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
 8002126:	ed87 0a01 	vstr	s0, [r7, #4]
 800212a:	4603      	mov	r3, r0
 800212c:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d042      	beq.n	80021ba <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <MelScale+0xcc>)
 800213c:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 800213e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002142:	edd7 7a06 	vldr	s15, [r7, #24]
 8002146:	ee77 6a67 	vsub.f32	s13, s14, s15
 800214a:	ed97 7a05 	vldr	s14, [r7, #20]
 800214e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002152:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <MelScale+0xd0>)
 8002158:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800215a:	ed97 7a04 	vldr	s14, [r7, #16]
 800215e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002162:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002166:	ed97 7a05 	vldr	s14, [r7, #20]
 800216a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800216e:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8002172:	4b20      	ldr	r3, [pc, #128]	; (80021f4 <MelScale+0xd4>)
 8002174:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 8002176:	ed97 7a01 	vldr	s14, [r7, #4]
 800217a:	edd7 7a04 	vldr	s15, [r7, #16]
 800217e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002186:	db15      	blt.n	80021b4 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 8002188:	ed97 7a01 	vldr	s14, [r7, #4]
 800218c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002190:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002194:	eeb0 0a66 	vmov.f32	s0, s13
 8002198:	f00b ffaa 	bl	800e0f0 <logf>
 800219c:	eef0 6a40 	vmov.f32	s13, s0
 80021a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80021a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80021ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b0:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 80021b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80021b8:	e013      	b.n	80021e2 <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 80021ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80021be:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80021f8 <MelScale+0xd8>
 80021c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021ce:	eeb0 0a67 	vmov.f32	s0, s15
 80021d2:	f00b ff8d 	bl	800e0f0 <logf>
 80021d6:	eef0 7a40 	vmov.f32	s15, s0
 80021da:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80021fc <MelScale+0xdc>
 80021de:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 80021e2:	eeb0 0a67 	vmov.f32	s0, s15
 80021e6:	3720      	adds	r7, #32
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	42855555 	.word	0x42855555
 80021f0:	447a0000 	.word	0x447a0000
 80021f4:	3d8ccdbb 	.word	0x3d8ccdbb
 80021f8:	442f0000 	.word	0x442f0000
 80021fc:	448ce000 	.word	0x448ce000

08002200 <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	ed87 0a01 	vstr	s0, [r7, #4]
 800220a:	4603      	mov	r3, r0
 800220c:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d042      	beq.n	800229a <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800221a:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <InverseMelScale+0xcc>)
 800221c:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 800221e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002222:	edd7 7a01 	vldr	s15, [r7, #4]
 8002226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222a:	ed97 7a06 	vldr	s14, [r7, #24]
 800222e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002232:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 8002236:	4b26      	ldr	r3, [pc, #152]	; (80022d0 <InverseMelScale+0xd0>)
 8002238:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800223a:	ed97 7a04 	vldr	s14, [r7, #16]
 800223e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002242:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002246:	ed97 7a05 	vldr	s14, [r7, #20]
 800224a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800224e:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 8002252:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <InverseMelScale+0xd4>)
 8002254:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 8002256:	ed97 7a01 	vldr	s14, [r7, #4]
 800225a:	edd7 7a03 	vldr	s15, [r7, #12]
 800225e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002266:	db15      	blt.n	8002294 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 8002268:	ed97 7a01 	vldr	s14, [r7, #4]
 800226c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002270:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002274:	edd7 7a02 	vldr	s15, [r7, #8]
 8002278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227c:	eeb0 0a67 	vmov.f32	s0, s15
 8002280:	f00b fec2 	bl	800e008 <expf>
 8002284:	eeb0 7a40 	vmov.f32	s14, s0
 8002288:	edd7 7a04 	vldr	s15, [r7, #16]
 800228c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002290:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 8002294:	edd7 7a07 	vldr	s15, [r7, #28]
 8002298:	e013      	b.n	80022c2 <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 800229a:	edd7 7a01 	vldr	s15, [r7, #4]
 800229e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80022d8 <InverseMelScale+0xd8>
 80022a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80022a6:	eeb0 0a47 	vmov.f32	s0, s14
 80022aa:	f00b fead 	bl	800e008 <expf>
 80022ae:	eef0 7a40 	vmov.f32	s15, s0
 80022b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022ba:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80022dc <InverseMelScale+0xdc>
 80022be:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 80022c2:	eeb0 0a67 	vmov.f32	s0, s15
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	42855555 	.word	0x42855555
 80022d0:	447a0000 	.word	0x447a0000
 80022d4:	3d8ccdbb 	.word	0x3d8ccdbb
 80022d8:	448ce000 	.word	0x448ce000
 80022dc:	442f0000 	.word	0x442f0000

080022e0 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]

  switch (type)
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d01c      	beq.n	8002332 <Window_Init+0x52>
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	dc25      	bgt.n	8002348 <Window_Init+0x68>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <Window_Init+0x26>
 8002300:	2b01      	cmp	r3, #1
 8002302:	d00b      	beq.n	800231c <Window_Init+0x3c>
 8002304:	e020      	b.n	8002348 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 8002306:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8002360 <Window_Init+0x80>
 800230a:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 800230e:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f837 	bl	8002388 <cosine_sum_window_create>
      break;
 800231a:	e019      	b.n	8002350 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 800231c:	ed9f 2b10 	vldr	d2, [pc, #64]	; 8002360 <Window_Init+0x80>
 8002320:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8002368 <Window_Init+0x88>
 8002324:	ed9f 0b12 	vldr	d0, [pc, #72]	; 8002370 <Window_Init+0x90>
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 f82c 	bl	8002388 <cosine_sum_window_create>
      break;
 8002330:	e00e      	b.n	8002350 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 8002332:	ed9f 2b11 	vldr	d2, [pc, #68]	; 8002378 <Window_Init+0x98>
 8002336:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 800233a:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8002380 <Window_Init+0xa0>
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 f821 	bl	8002388 <cosine_sum_window_create>
      break;
 8002346:	e003      	b.n	8002350 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 8002348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800234c:	617b      	str	r3, [r7, #20]
      break;
 800234e:	bf00      	nop
  }

  return status;
 8002350:	697b      	ldr	r3, [r7, #20]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	f3af 8000 	nop.w
	...
 8002368:	d70a3d71 	.word	0xd70a3d71
 800236c:	3fdd70a3 	.word	0x3fdd70a3
 8002370:	147ae148 	.word	0x147ae148
 8002374:	3fe147ae 	.word	0x3fe147ae
 8002378:	47ae147b 	.word	0x47ae147b
 800237c:	3fb47ae1 	.word	0x3fb47ae1
 8002380:	ae147ae1 	.word	0xae147ae1
 8002384:	3fdae147 	.word	0x3fdae147

08002388 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	ed2d 8b02 	vpush	{d8}
 800238e:	b08a      	sub	sp, #40	; 0x28
 8002390:	af00      	add	r7, sp, #0
 8002392:	61f8      	str	r0, [r7, #28]
 8002394:	61b9      	str	r1, [r7, #24]
 8002396:	ed87 0b04 	vstr	d0, [r7, #16]
 800239a:	ed87 1b02 	vstr	d1, [r7, #8]
 800239e:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	e043      	b.n	8002430 <cosine_sum_window_create+0xa8>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023b2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8002448 <cosine_sum_window_create+0xc0>
 80023b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	ee07 3a90 	vmov	s15, r3
 80023c0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023c4:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80023c8:	eeb0 0b45 	vmov.f64	d0, d5
 80023cc:	f00b fdd0 	bl	800df70 <cos>
 80023d0:	eeb0 6b40 	vmov.f64	d6, d0
 80023d4:	ed97 7b02 	vldr	d7, [r7, #8]
 80023d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80023dc:	ed97 6b04 	vldr	d6, [r7, #16]
 80023e0:	ee36 8b47 	vsub.f64	d8, d6, d7
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023ee:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8002450 <cosine_sum_window_create+0xc8>
 80023f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	ee07 3a90 	vmov	s15, r3
 80023fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002400:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002404:	eeb0 0b45 	vmov.f64	d0, d5
 8002408:	f00b fdb2 	bl	800df70 <cos>
 800240c:	eeb0 6b40 	vmov.f64	d6, d0
 8002410:	ed97 7b00 	vldr	d7, [r7]
 8002414:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002418:	ee38 7b07 	vadd.f64	d7, d8, d7
    *pDst++ = a0
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	1d1a      	adds	r2, r3, #4
 8002420:	61fa      	str	r2, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 8002422:	eef7 7bc7 	vcvt.f32.f64	s15, d7
    *pDst++ = a0
 8002426:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	3301      	adds	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
 8002430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	429a      	cmp	r2, r3
 8002436:	d3b7      	bcc.n	80023a8 <cosine_sum_window_create+0x20>
  }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	; 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	ecbd 8b02 	vpop	{d8}
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	54442d18 	.word	0x54442d18
 800244c:	401921fb 	.word	0x401921fb
 8002450:	54442d18 	.word	0x54442d18
 8002454:	402921fb 	.word	0x402921fb

08002458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245c:	2003      	movs	r0, #3
 800245e:	f000 fbe1 	bl	8002c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002462:	200f      	movs	r0, #15
 8002464:	f000 f806 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002468:	f7ff f9d8 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_InitTick+0x54>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_InitTick+0x58>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	4619      	mov	r1, r3
 8002486:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248a:	fbb3 f3f1 	udiv	r3, r3, r1
 800248e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fbfb 	bl	8002c8e <HAL_SYSTICK_Config>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e00e      	b.n	80024c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b0f      	cmp	r3, #15
 80024a6:	d80a      	bhi.n	80024be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a8:	2200      	movs	r2, #0
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b0:	f000 fbc3 	bl	8002c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b4:	4a06      	ldr	r2, [pc, #24]	; (80024d0 <HAL_InitTick+0x5c>)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000008 	.word	0x20000008
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <HAL_IncTick+0x20>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x24>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4413      	add	r3, r2
 80024e4:	4a04      	ldr	r2, [pc, #16]	; (80024f8 <HAL_IncTick+0x24>)
 80024e6:	6013      	str	r3, [r2, #0]
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000008 	.word	0x20000008
 80024f8:	200045c4 	.word	0x200045c4

080024fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <HAL_GetTick+0x14>)
 8002502:	681b      	ldr	r3, [r3, #0]
}
 8002504:	4618      	mov	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	200045c4 	.word	0x200045c4

08002514 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff ffee 	bl	80024fc <HAL_GetTick>
 8002520:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800252c:	d005      	beq.n	800253a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_Delay+0x44>)
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800253a:	bf00      	nop
 800253c:	f7ff ffde 	bl	80024fc <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	429a      	cmp	r2, r3
 800254a:	d8f7      	bhi.n	800253c <HAL_Delay+0x28>
  {
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20000008 	.word	0x20000008

0800255c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e031      	b.n	80025d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f7fe f8e6 	bl	800074c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002592:	f003 0310 	and.w	r3, r3, #16
 8002596:	2b00      	cmp	r3, #0
 8002598:	d116      	bne.n	80025c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_ADC_Init+0x84>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	f043 0202 	orr.w	r2, r3, #2
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f970 	bl	8002890 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f023 0303 	bic.w	r3, r3, #3
 80025be:	f043 0201 	orr.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
 80025c6:	e001      	b.n	80025cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	ffffeefd 	.word	0xffffeefd

080025e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d101      	bne.n	8002600 <HAL_ADC_ConfigChannel+0x1c>
 80025fc:	2302      	movs	r3, #2
 80025fe:	e136      	b.n	800286e <HAL_ADC_ConfigChannel+0x28a>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b09      	cmp	r3, #9
 800260e:	d93a      	bls.n	8002686 <HAL_ADC_ConfigChannel+0xa2>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002618:	d035      	beq.n	8002686 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68d9      	ldr	r1, [r3, #12]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	4613      	mov	r3, r2
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4413      	add	r3, r2
 800262e:	3b1e      	subs	r3, #30
 8002630:	2207      	movs	r2, #7
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43da      	mvns	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	400a      	ands	r2, r1
 800263e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a8d      	ldr	r2, [pc, #564]	; (800287c <HAL_ADC_ConfigChannel+0x298>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d10a      	bne.n	8002660 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68d9      	ldr	r1, [r3, #12]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	061a      	lsls	r2, r3, #24
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800265e:	e035      	b.n	80026cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68d9      	ldr	r1, [r3, #12]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	4603      	mov	r3, r0
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4403      	add	r3, r0
 8002678:	3b1e      	subs	r3, #30
 800267a:	409a      	lsls	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002684:	e022      	b.n	80026cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6919      	ldr	r1, [r3, #16]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	b29b      	uxth	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	4613      	mov	r3, r2
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	2207      	movs	r2, #7
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43da      	mvns	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	400a      	ands	r2, r1
 80026a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6919      	ldr	r1, [r3, #16]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	4618      	mov	r0, r3
 80026bc:	4603      	mov	r3, r0
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4403      	add	r3, r0
 80026c2:	409a      	lsls	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	d824      	bhi.n	800271e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	3b05      	subs	r3, #5
 80026e6:	221f      	movs	r2, #31
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43da      	mvns	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	400a      	ands	r2, r1
 80026f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	4618      	mov	r0, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	3b05      	subs	r3, #5
 8002710:	fa00 f203 	lsl.w	r2, r0, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	635a      	str	r2, [r3, #52]	; 0x34
 800271c:	e04c      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d824      	bhi.n	8002770 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	3b23      	subs	r3, #35	; 0x23
 8002738:	221f      	movs	r2, #31
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	400a      	ands	r2, r1
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	4618      	mov	r0, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	3b23      	subs	r3, #35	; 0x23
 8002762:	fa00 f203 	lsl.w	r2, r0, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	e023      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	3b41      	subs	r3, #65	; 0x41
 8002782:	221f      	movs	r2, #31
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43da      	mvns	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	400a      	ands	r2, r1
 8002790:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	b29b      	uxth	r3, r3
 800279e:	4618      	mov	r0, r3
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	3b41      	subs	r3, #65	; 0x41
 80027ac:	fa00 f203 	lsl.w	r2, r0, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a30      	ldr	r2, [pc, #192]	; (8002880 <HAL_ADC_ConfigChannel+0x29c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d10a      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1f4>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027ca:	d105      	bne.n	80027d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80027cc:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a2c      	ldr	r2, [pc, #176]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80027d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a28      	ldr	r2, [pc, #160]	; (8002880 <HAL_ADC_ConfigChannel+0x29c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d10f      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x21e>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b12      	cmp	r3, #18
 80027e8:	d10b      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4a25      	ldr	r2, [pc, #148]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027f4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80027f6:	4b23      	ldr	r3, [pc, #140]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4a22      	ldr	r2, [pc, #136]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 80027fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002800:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <HAL_ADC_ConfigChannel+0x29c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d12b      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x280>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1a      	ldr	r2, [pc, #104]	; (800287c <HAL_ADC_ConfigChannel+0x298>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d003      	beq.n	800281e <HAL_ADC_ConfigChannel+0x23a>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b11      	cmp	r3, #17
 800281c:	d122      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800281e:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 8002824:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002828:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a15      	ldr	r2, [pc, #84]	; (8002884 <HAL_ADC_ConfigChannel+0x2a0>)
 8002830:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002834:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a10      	ldr	r2, [pc, #64]	; (800287c <HAL_ADC_ConfigChannel+0x298>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d111      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_ADC_ConfigChannel+0x2a4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a11      	ldr	r2, [pc, #68]	; (800288c <HAL_ADC_ConfigChannel+0x2a8>)
 8002846:	fba2 2303 	umull	r2, r3, r2, r3
 800284a:	0c9a      	lsrs	r2, r3, #18
 800284c:	4613      	mov	r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	4413      	add	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002856:	e002      	b.n	800285e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3b01      	subs	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f9      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	10000012 	.word	0x10000012
 8002880:	40012000 	.word	0x40012000
 8002884:	40012300 	.word	0x40012300
 8002888:	20000000 	.word	0x20000000
 800288c:	431bde83 	.word	0x431bde83

08002890 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002898:	4b78      	ldr	r3, [pc, #480]	; (8002a7c <ADC_Init+0x1ec>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	4a77      	ldr	r2, [pc, #476]	; (8002a7c <ADC_Init+0x1ec>)
 800289e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80028a2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80028a4:	4b75      	ldr	r3, [pc, #468]	; (8002a7c <ADC_Init+0x1ec>)
 80028a6:	685a      	ldr	r2, [r3, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4973      	ldr	r1, [pc, #460]	; (8002a7c <ADC_Init+0x1ec>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	6859      	ldr	r1, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	021a      	lsls	r2, r3, #8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689a      	ldr	r2, [r3, #8]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <ADC_Init+0x1f0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d022      	beq.n	800296a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002932:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6899      	ldr	r1, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6899      	ldr	r1, [r3, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	e00f      	b.n	800298a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002988:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0202 	bic.w	r2, r2, #2
 8002998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	005a      	lsls	r2, r3, #1
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01b      	beq.n	80029f0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6859      	ldr	r1, [r3, #4]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	3b01      	subs	r3, #1
 80029e4:	035a      	lsls	r2, r3, #13
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
 80029ee:	e007      	b.n	8002a00 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	051a      	lsls	r2, r3, #20
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a42:	025a      	lsls	r2, r3, #9
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6899      	ldr	r1, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	029a      	lsls	r2, r3, #10
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	609a      	str	r2, [r3, #8]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	40012300 	.word	0x40012300
 8002a80:	0f000001 	.word	0x0f000001

08002a84 <__NVIC_SetPriorityGrouping>:
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9a:	68ba      	ldr	r2, [r7, #8]
 8002a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ab2:	4a04      	ldr	r2, [pc, #16]	; (8002ac4 <__NVIC_SetPriorityGrouping+0x40>)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	60d3      	str	r3, [r2, #12]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00
 8002ac8:	05fa0000 	.word	0x05fa0000

08002acc <__NVIC_GetPriorityGrouping>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad0:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	f003 0307 	and.w	r3, r3, #7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000ed00 	.word	0xe000ed00

08002ae8 <__NVIC_EnableIRQ>:
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	db0b      	blt.n	8002b12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	f003 021f 	and.w	r2, r3, #31
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <__NVIC_EnableIRQ+0x38>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	2001      	movs	r0, #1
 8002b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	; (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	; (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	; 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf0:	d301      	bcc.n	8002bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e00f      	b.n	8002c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <SysTick_Config+0x40>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bfe:	210f      	movs	r1, #15
 8002c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c04:	f7ff ff8e 	bl	8002b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <SysTick_Config+0x40>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c0e:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <SysTick_Config+0x40>)
 8002c10:	2207      	movs	r2, #7
 8002c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	e000e010 	.word	0xe000e010

08002c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7ff ff29 	bl	8002a84 <__NVIC_SetPriorityGrouping>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b086      	sub	sp, #24
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	4603      	mov	r3, r0
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c4c:	f7ff ff3e 	bl	8002acc <__NVIC_GetPriorityGrouping>
 8002c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	6978      	ldr	r0, [r7, #20]
 8002c58:	f7ff ff8e 	bl	8002b78 <NVIC_EncodePriority>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff ff5d 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	4603      	mov	r3, r0
 8002c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ff31 	bl	8002ae8 <__NVIC_EnableIRQ>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ffa2 	bl	8002be0 <SysTick_Config>
 8002c9c:	4603      	mov	r3, r0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e054      	b.n	8002d64 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7f5b      	ldrb	r3, [r3, #29]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fd fd80 	bl	80007d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	791b      	ldrb	r3, [r3, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10c      	bne.n	8002cf8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <HAL_CRC_Init+0xc4>)
 8002ce4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0218 	bic.w	r2, r2, #24
 8002cf4:	609a      	str	r2, [r3, #8]
 8002cf6:	e00c      	b.n	8002d12 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6899      	ldr	r1, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	461a      	mov	r2, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f834 	bl	8002d70 <HAL_CRCEx_Polynomial_Set>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e028      	b.n	8002d64 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	795b      	ldrb	r3, [r3, #5]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d105      	bne.n	8002d26 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d22:	611a      	str	r2, [r3, #16]
 8002d24:	e004      	b.n	8002d30 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6912      	ldr	r2, [r2, #16]
 8002d2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699a      	ldr	r2, [r3, #24]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	04c11db7 	.word	0x04c11db7

08002d70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002d80:	231f      	movs	r3, #31
 8002d82:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002d84:	bf00      	nop
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1e5a      	subs	r2, r3, #1
 8002d8a:	613a      	str	r2, [r7, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_CRCEx_Polynomial_Set+0x34>
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0f0      	beq.n	8002d86 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b18      	cmp	r3, #24
 8002da8:	d846      	bhi.n	8002e38 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002daa:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db0:	08002e3f 	.word	0x08002e3f
 8002db4:	08002e39 	.word	0x08002e39
 8002db8:	08002e39 	.word	0x08002e39
 8002dbc:	08002e39 	.word	0x08002e39
 8002dc0:	08002e39 	.word	0x08002e39
 8002dc4:	08002e39 	.word	0x08002e39
 8002dc8:	08002e39 	.word	0x08002e39
 8002dcc:	08002e39 	.word	0x08002e39
 8002dd0:	08002e2d 	.word	0x08002e2d
 8002dd4:	08002e39 	.word	0x08002e39
 8002dd8:	08002e39 	.word	0x08002e39
 8002ddc:	08002e39 	.word	0x08002e39
 8002de0:	08002e39 	.word	0x08002e39
 8002de4:	08002e39 	.word	0x08002e39
 8002de8:	08002e39 	.word	0x08002e39
 8002dec:	08002e39 	.word	0x08002e39
 8002df0:	08002e21 	.word	0x08002e21
 8002df4:	08002e39 	.word	0x08002e39
 8002df8:	08002e39 	.word	0x08002e39
 8002dfc:	08002e39 	.word	0x08002e39
 8002e00:	08002e39 	.word	0x08002e39
 8002e04:	08002e39 	.word	0x08002e39
 8002e08:	08002e39 	.word	0x08002e39
 8002e0c:	08002e39 	.word	0x08002e39
 8002e10:	08002e15 	.word	0x08002e15
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d913      	bls.n	8002e42 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002e1e:	e010      	b.n	8002e42 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b07      	cmp	r3, #7
 8002e24:	d90f      	bls.n	8002e46 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002e2a:	e00c      	b.n	8002e46 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	2b0f      	cmp	r3, #15
 8002e30:	d90b      	bls.n	8002e4a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002e36:	e008      	b.n	8002e4a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e3c:	e006      	b.n	8002e4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e004      	b.n	8002e4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e42:	bf00      	nop
 8002e44:	e002      	b.n	8002e4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e4a:	bf00      	nop
  }
  if (status == HAL_OK)
 8002e4c:	7dfb      	ldrb	r3, [r7, #23]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f023 0118 	bic.w	r1, r3, #24
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0ac      	b.n	8002fe8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fadc 	bl	8003450 <DFSDM_GetChannelFromInstance>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4a55      	ldr	r2, [pc, #340]	; (8002ff0 <HAL_DFSDM_ChannelInit+0x174>)
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e09f      	b.n	8002fe8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7fd fe75 	bl	8000b98 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002eae:	4b51      	ldr	r3, [pc, #324]	; (8002ff4 <HAL_DFSDM_ChannelInit+0x178>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	4a4f      	ldr	r2, [pc, #316]	; (8002ff4 <HAL_DFSDM_ChannelInit+0x178>)
 8002eb6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8002eb8:	4b4e      	ldr	r3, [pc, #312]	; (8002ff4 <HAL_DFSDM_ChannelInit+0x178>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d125      	bne.n	8002f0c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002ec0:	4b4d      	ldr	r3, [pc, #308]	; (8002ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a4c      	ldr	r2, [pc, #304]	; (8002ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ec6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002eca:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002ecc:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4948      	ldr	r1, [pc, #288]	; (8002ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a46      	ldr	r2, [pc, #280]	; (8002ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ee0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002ee4:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	791b      	ldrb	r3, [r3, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d108      	bne.n	8002f00 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8002eee:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	041b      	lsls	r3, r3, #16
 8002efa:	493f      	ldr	r1, [pc, #252]	; (8002ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002f00:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a3c      	ldr	r2, [pc, #240]	; (8002ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f0a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002f1a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6819      	ldr	r1, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f2a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002f30:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 020f 	bic.w	r2, r2, #15
 8002f48:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002f70:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f80:	3b01      	subs	r3, #1
 8002f82:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f002 0207 	and.w	r2, r2, #7
 8002f9c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fa3a 	bl	8003450 <DFSDM_GetChannelFromInstance>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4904      	ldr	r1, [pc, #16]	; (8002ff0 <HAL_DFSDM_ChannelInit+0x174>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	200045cc 	.word	0x200045cc
 8002ff4:	200045c8 	.word	0x200045c8
 8002ff8:	40017400 	.word	0x40017400

08002ffc <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e0c6      	b.n	800319c <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a64      	ldr	r2, [pc, #400]	; (80031a4 <HAL_DFSDM_FilterInit+0x1a8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d109      	bne.n	800302c <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800301c:	2b01      	cmp	r3, #1
 800301e:	d003      	beq.n	8003028 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e0b7      	b.n	800319c <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7fd fcbf 	bl	80009c8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8003058:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7a1b      	ldrb	r3, [r3, #8]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d108      	bne.n	8003074 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	e007      	b.n	8003084 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003082:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	7a5b      	ldrb	r3, [r3, #9]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d108      	bne.n	800309e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	e007      	b.n	80030ae <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80030ac:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6819      	ldr	r1, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <HAL_DFSDM_FilterInit+0x1ac>)
 80030ba:	400b      	ands	r3, r1
 80030bc:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d108      	bne.n	80030d8 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6819      	ldr	r1, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7c1b      	ldrb	r3, [r3, #16]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d108      	bne.n	80030f2 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0210 	orr.w	r2, r2, #16
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e007      	b.n	8003102 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0210 	bic.w	r2, r2, #16
 8003100:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	7c5b      	ldrb	r3, [r3, #17]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d108      	bne.n	800311c <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 0220 	orr.w	r2, r2, #32
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	e007      	b.n	800312c <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0220 	bic.w	r2, r2, #32
 800312a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6959      	ldr	r1, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_DFSDM_FilterInit+0x1b0>)
 8003138:	400b      	ands	r3, r1
 800313a:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6959      	ldr	r1, [r3, #20]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	3b01      	subs	r3, #1
 800314c:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800314e:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 8003156:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699a      	ldr	r2, [r3, #24]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7c1a      	ldrb	r2, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40017500 	.word	0x40017500
 80031a8:	ffff80f7 	.word	0xffff80f7
 80031ac:	1c00ff00 	.word	0x1c00ff00

080031b0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d02c      	beq.n	8003224 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80031d0:	2bff      	cmp	r3, #255	; 0xff
 80031d2:	d027      	beq.n	8003224 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6819      	ldr	r1, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 80031e0:	400b      	ands	r3, r1
 80031e2:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d10d      	bne.n	8003206 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80031f8:	431a      	orrs	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e00a      	b.n	800321c <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6819      	ldr	r1, [r3, #0]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
 8003222:	e001      	b.n	8003228 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8003228:	7dfb      	ldrb	r3, [r7, #23]
}
 800322a:	4618      	mov	r0, r3
 800322c:	371c      	adds	r7, #28
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	f8fbffff 	.word	0xf8fbffff

0800323c <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003250:	2b00      	cmp	r3, #0
 8003252:	d01b      	beq.n	800328c <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800325a:	2bff      	cmp	r3, #255	; 0xff
 800325c:	d016      	beq.n	800328c <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	b292      	uxth	r2, r2
 8003266:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 8003268:	6838      	ldr	r0, [r7, #0]
 800326a:	f000 f8d2 	bl	8003412 <DFSDM_GetInjChannelsNbr>
 800326e:	4602      	mov	r2, r0
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 800327a:	2b01      	cmp	r3, #1
 800327c:	d102      	bne.n	8003284 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	e000      	b.n	8003286 <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 8003284:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6493      	str	r3, [r2, #72]	; 0x48
 800328a:	e001      	b.n	8003290 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
	...

0800329c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	75fb      	strb	r3, [r7, #23]
 80032bc:	e066      	b.n	800338c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032cc:	d002      	beq.n	80032d4 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
 80032d2:	e05b      	b.n	800338c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10e      	bne.n	80032fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d002      	beq.n	80032fa <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	75fb      	strb	r3, [r7, #23]
 80032f8:	e048      	b.n	800338c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8003306:	2b00      	cmp	r3, #0
 8003308:	d108      	bne.n	800331c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8003310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003314:	d102      	bne.n	800331c <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	75fb      	strb	r3, [r7, #23]
 800331a:	e037      	b.n	800338c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d004      	beq.n	8003330 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800332c:	2b03      	cmp	r3, #3
 800332e:	d12b      	bne.n	8003388 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	4a18      	ldr	r2, [pc, #96]	; (8003398 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8003336:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	4a17      	ldr	r2, [pc, #92]	; (800339c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800333e:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8003346:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334a:	d101      	bne.n	8003350 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 800334c:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 800334e:	e000      	b.n	8003352 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8003350:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	331c      	adds	r3, #28
 8003362:	4619      	mov	r1, r3
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f000 f9c2 	bl	80036f0 <HAL_DMA_Start_IT>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d006      	beq.n	8003380 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	22ff      	movs	r2, #255	; 0xff
 8003376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800337e:	e005      	b.n	800338c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f8b1 	bl	80034e8 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8003386:	e001      	b.n	800338c <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 800338c:	7dfb      	ldrb	r3, [r7, #23]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	080033d5 	.word	0x080033d5
 800339c:	080033f1 	.word	0x080033f1
 80033a0:	080033b9 	.word	0x080033b9

080033a4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f008 fd10 	bl	800bdec <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80033cc:	bf00      	nop
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f008 fd1e 	bl	800be24 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2203      	movs	r2, #3
 8003402:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff ffcd 	bl	80033a4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 8003412:	b480      	push	{r7}
 8003414:	b085      	sub	sp, #20
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	b29b      	uxth	r3, r3
 8003422:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8003424:	e00a      	b.n	800343c <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	3301      	adds	r3, #1
 8003434:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f1      	bne.n	8003426 <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 8003442:	68fb      	ldr	r3, [r7, #12]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <DFSDM_GetChannelFromInstance+0x7c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d102      	bne.n	8003466 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	e02b      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <DFSDM_GetChannelFromInstance+0x80>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d102      	bne.n	8003474 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	e024      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <DFSDM_GetChannelFromInstance+0x84>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d102      	bne.n	8003482 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800347c:	2302      	movs	r3, #2
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e01d      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a14      	ldr	r2, [pc, #80]	; (80034d8 <DFSDM_GetChannelFromInstance+0x88>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d102      	bne.n	8003490 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800348a:	2303      	movs	r3, #3
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	e016      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <DFSDM_GetChannelFromInstance+0x8c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d102      	bne.n	800349e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8003498:	2304      	movs	r3, #4
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	e00f      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <DFSDM_GetChannelFromInstance+0x90>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d102      	bne.n	80034ac <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80034a6:	2305      	movs	r3, #5
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	e008      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a0d      	ldr	r2, [pc, #52]	; (80034e4 <DFSDM_GetChannelFromInstance+0x94>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d102      	bne.n	80034ba <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80034b4:	2306      	movs	r3, #6
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	e001      	b.n	80034be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80034ba:	2307      	movs	r3, #7
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80034be:	68fb      	ldr	r3, [r7, #12]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40017400 	.word	0x40017400
 80034d0:	40017420 	.word	0x40017420
 80034d4:	40017440 	.word	0x40017440
 80034d8:	40017460 	.word	0x40017460
 80034dc:	40017480 	.word	0x40017480
 80034e0:	400174a0 	.word	0x400174a0
 80034e4:	400174c0 	.word	0x400174c0

080034e8 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d108      	bne.n	800350a <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	e033      	b.n	8003572 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0201 	bic.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003528:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003540:	2b03      	cmp	r3, #3
 8003542:	d116      	bne.n	8003572 <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003548:	2b00      	cmp	r3, #0
 800354a:	d107      	bne.n	800355c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 0202 	orr.w	r2, r2, #2
 800355a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 8003562:	2b01      	cmp	r3, #1
 8003564:	d102      	bne.n	800356c <DFSDM_RegConvStart+0x84>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	e000      	b.n	800356e <DFSDM_RegConvStart+0x86>
 800356c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <DFSDM_RegConvStart+0x98>
 800357c:	2202      	movs	r2, #2
 800357e:	e000      	b.n	8003582 <DFSDM_RegConvStart+0x9a>
 8003580:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035a0:	f7fe ffac 	bl	80024fc <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e099      	b.n	80036e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d0:	e00f      	b.n	80035f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035d2:	f7fe ff93 	bl	80024fc <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b05      	cmp	r3, #5
 80035de:	d908      	bls.n	80035f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2203      	movs	r2, #3
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e078      	b.n	80036e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e8      	bne.n	80035d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4b38      	ldr	r3, [pc, #224]	; (80036ec <HAL_DMA_Init+0x158>)
 800360c:	4013      	ands	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800361e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	4313      	orrs	r3, r2
 8003642:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	2b04      	cmp	r3, #4
 800364a:	d107      	bne.n	800365c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003654:	4313      	orrs	r3, r2
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f023 0307 	bic.w	r3, r3, #7
 8003672:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b04      	cmp	r3, #4
 8003684:	d117      	bne.n	80036b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 faa5 	bl	8003be8 <DMA_CheckFifoParam>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2240      	movs	r2, #64	; 0x40
 80036a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036b2:	2301      	movs	r3, #1
 80036b4:	e016      	b.n	80036e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa5c 	bl	8003b7c <DMA_CalcBaseAndBitshift>
 80036c4:	4603      	mov	r3, r0
 80036c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	223f      	movs	r2, #63	; 0x3f
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	e010803f 	.word	0xe010803f

080036f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_DMA_Start_IT+0x26>
 8003712:	2302      	movs	r3, #2
 8003714:	e048      	b.n	80037a8 <HAL_DMA_Start_IT+0xb8>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d137      	bne.n	800379a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f9ee 	bl	8003b20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	223f      	movs	r2, #63	; 0x3f
 800374a:	409a      	lsls	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0216 	orr.w	r2, r2, #22
 800375e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695a      	ldr	r2, [r3, #20]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800376e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0208 	orr.w	r2, r2, #8
 8003786:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	e005      	b.n	80037a6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037a2:	2302      	movs	r3, #2
 80037a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d004      	beq.n	80037ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2280      	movs	r2, #128	; 0x80
 80037c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e00c      	b.n	80037e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2205      	movs	r2, #5
 80037d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003800:	4b8e      	ldr	r3, [pc, #568]	; (8003a3c <HAL_DMA_IRQHandler+0x248>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a8e      	ldr	r2, [pc, #568]	; (8003a40 <HAL_DMA_IRQHandler+0x24c>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	0a9b      	lsrs	r3, r3, #10
 800380c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	2208      	movs	r2, #8
 8003820:	409a      	lsls	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4013      	ands	r3, r2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d01a      	beq.n	8003860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d013      	beq.n	8003860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	2208      	movs	r2, #8
 800384e:	409a      	lsls	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003858:	f043 0201 	orr.w	r2, r3, #1
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	2201      	movs	r2, #1
 8003866:	409a      	lsls	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4013      	ands	r3, r2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d012      	beq.n	8003896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	2201      	movs	r2, #1
 8003884:	409a      	lsls	r2, r3
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800388e:	f043 0202 	orr.w	r2, r3, #2
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	2204      	movs	r2, #4
 800389c:	409a      	lsls	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d012      	beq.n	80038cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00b      	beq.n	80038cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	2204      	movs	r2, #4
 80038ba:	409a      	lsls	r2, r3
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	f043 0204 	orr.w	r2, r3, #4
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d0:	2210      	movs	r2, #16
 80038d2:	409a      	lsls	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d043      	beq.n	8003964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d03c      	beq.n	8003964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	2210      	movs	r2, #16
 80038f0:	409a      	lsls	r2, r3
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d018      	beq.n	8003936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d108      	bne.n	8003924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d024      	beq.n	8003964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
 8003922:	e01f      	b.n	8003964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003928:	2b00      	cmp	r3, #0
 800392a:	d01b      	beq.n	8003964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
 8003934:	e016      	b.n	8003964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003940:	2b00      	cmp	r3, #0
 8003942:	d107      	bne.n	8003954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 0208 	bic.w	r2, r2, #8
 8003952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003968:	2220      	movs	r2, #32
 800396a:	409a      	lsls	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	f000 808f 	beq.w	8003a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8087 	beq.w	8003a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398a:	2220      	movs	r2, #32
 800398c:	409a      	lsls	r2, r3
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b05      	cmp	r3, #5
 800399c:	d136      	bne.n	8003a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0216 	bic.w	r2, r2, #22
 80039ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <HAL_DMA_IRQHandler+0x1da>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d007      	beq.n	80039de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0208 	bic.w	r2, r2, #8
 80039dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	223f      	movs	r2, #63	; 0x3f
 80039e4:	409a      	lsls	r2, r3
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d07e      	beq.n	8003b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
        }
        return;
 8003a0a:	e079      	b.n	8003b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01d      	beq.n	8003a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10d      	bne.n	8003a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d031      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	4798      	blx	r3
 8003a38:	e02c      	b.n	8003a94 <HAL_DMA_IRQHandler+0x2a0>
 8003a3a:	bf00      	nop
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d023      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3
 8003a54:	e01e      	b.n	8003a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10f      	bne.n	8003a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0210 	bic.w	r2, r2, #16
 8003a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d032      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d022      	beq.n	8003aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2205      	movs	r2, #5
 8003aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f022 0201 	bic.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d307      	bcc.n	8003adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f2      	bne.n	8003ac0 <HAL_DMA_IRQHandler+0x2cc>
 8003ada:	e000      	b.n	8003ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	4798      	blx	r3
 8003afe:	e000      	b.n	8003b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b00:	bf00      	nop
    }
  }
}
 8003b02:	3718      	adds	r7, #24
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	683a      	ldr	r2, [r7, #0]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	d108      	bne.n	8003b60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b5e:	e007      	b.n	8003b70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	60da      	str	r2, [r3, #12]
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	3b10      	subs	r3, #16
 8003b8c:	4a13      	ldr	r2, [pc, #76]	; (8003bdc <DMA_CalcBaseAndBitshift+0x60>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <DMA_CalcBaseAndBitshift+0x64>)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d908      	bls.n	8003bbc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <DMA_CalcBaseAndBitshift+0x68>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	1d1a      	adds	r2, r3, #4
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	659a      	str	r2, [r3, #88]	; 0x58
 8003bba:	e006      	b.n	8003bca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <DMA_CalcBaseAndBitshift+0x68>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	aaaaaaab 	.word	0xaaaaaaab
 8003be0:	0800ee08 	.word	0x0800ee08
 8003be4:	fffffc00 	.word	0xfffffc00

08003be8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11f      	bne.n	8003c42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d856      	bhi.n	8003cb6 <DMA_CheckFifoParam+0xce>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <DMA_CheckFifoParam+0x28>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c33 	.word	0x08003c33
 8003c18:	08003c21 	.word	0x08003c21
 8003c1c:	08003cb7 	.word	0x08003cb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d046      	beq.n	8003cba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c30:	e043      	b.n	8003cba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c3a:	d140      	bne.n	8003cbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c40:	e03d      	b.n	8003cbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c4a:	d121      	bne.n	8003c90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d837      	bhi.n	8003cc2 <DMA_CheckFifoParam+0xda>
 8003c52:	a201      	add	r2, pc, #4	; (adr r2, 8003c58 <DMA_CheckFifoParam+0x70>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c6f 	.word	0x08003c6f
 8003c60:	08003c69 	.word	0x08003c69
 8003c64:	08003c81 	.word	0x08003c81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c6c:	e030      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d025      	beq.n	8003cc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c7e:	e022      	b.n	8003cc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c88:	d11f      	bne.n	8003cca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c8e:	e01c      	b.n	8003cca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d903      	bls.n	8003c9e <DMA_CheckFifoParam+0xb6>
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d003      	beq.n	8003ca4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c9c:	e018      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca2:	e015      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00e      	beq.n	8003cce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb4:	e00b      	b.n	8003cce <DMA_CheckFifoParam+0xe6>
      break;
 8003cb6:	bf00      	nop
 8003cb8:	e00a      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003cba:	bf00      	nop
 8003cbc:	e008      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003cbe:	bf00      	nop
 8003cc0:	e006      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc2:	bf00      	nop
 8003cc4:	e004      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003cc6:	bf00      	nop
 8003cc8:	e002      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8003cce:	bf00      	nop
    }
  } 
  
  return status; 
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop

08003ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	e175      	b.n	8003fec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d00:	2201      	movs	r2, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	4013      	ands	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d14:	693a      	ldr	r2, [r7, #16]
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	f040 8164 	bne.w	8003fe6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d005      	beq.n	8003d36 <HAL_GPIO_Init+0x56>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f003 0303 	and.w	r3, r3, #3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d130      	bne.n	8003d98 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	2203      	movs	r2, #3
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	43db      	mvns	r3, r3
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	f003 0201 	and.w	r2, r3, #1
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0303 	and.w	r3, r3, #3
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d017      	beq.n	8003dd4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	2203      	movs	r2, #3
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d123      	bne.n	8003e28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	08da      	lsrs	r2, r3, #3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	3208      	adds	r2, #8
 8003de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	220f      	movs	r2, #15
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4013      	ands	r3, r2
 8003e02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	08da      	lsrs	r2, r3, #3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3208      	adds	r2, #8
 8003e22:	69b9      	ldr	r1, [r7, #24]
 8003e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	2203      	movs	r2, #3
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f003 0203 	and.w	r2, r3, #3
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 80be 	beq.w	8003fe6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6a:	4b66      	ldr	r3, [pc, #408]	; (8004004 <HAL_GPIO_Init+0x324>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	4a65      	ldr	r2, [pc, #404]	; (8004004 <HAL_GPIO_Init+0x324>)
 8003e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e74:	6453      	str	r3, [r2, #68]	; 0x44
 8003e76:	4b63      	ldr	r3, [pc, #396]	; (8004004 <HAL_GPIO_Init+0x324>)
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e82:	4a61      	ldr	r2, [pc, #388]	; (8004008 <HAL_GPIO_Init+0x328>)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	3302      	adds	r3, #2
 8003e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	220f      	movs	r2, #15
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_GPIO_Init+0x32c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d037      	beq.n	8003f1e <HAL_GPIO_Init+0x23e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a57      	ldr	r2, [pc, #348]	; (8004010 <HAL_GPIO_Init+0x330>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d031      	beq.n	8003f1a <HAL_GPIO_Init+0x23a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a56      	ldr	r2, [pc, #344]	; (8004014 <HAL_GPIO_Init+0x334>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d02b      	beq.n	8003f16 <HAL_GPIO_Init+0x236>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a55      	ldr	r2, [pc, #340]	; (8004018 <HAL_GPIO_Init+0x338>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d025      	beq.n	8003f12 <HAL_GPIO_Init+0x232>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a54      	ldr	r2, [pc, #336]	; (800401c <HAL_GPIO_Init+0x33c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d01f      	beq.n	8003f0e <HAL_GPIO_Init+0x22e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a53      	ldr	r2, [pc, #332]	; (8004020 <HAL_GPIO_Init+0x340>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d019      	beq.n	8003f0a <HAL_GPIO_Init+0x22a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_GPIO_Init+0x344>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <HAL_GPIO_Init+0x226>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a51      	ldr	r2, [pc, #324]	; (8004028 <HAL_GPIO_Init+0x348>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00d      	beq.n	8003f02 <HAL_GPIO_Init+0x222>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a50      	ldr	r2, [pc, #320]	; (800402c <HAL_GPIO_Init+0x34c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d007      	beq.n	8003efe <HAL_GPIO_Init+0x21e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4f      	ldr	r2, [pc, #316]	; (8004030 <HAL_GPIO_Init+0x350>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <HAL_GPIO_Init+0x21a>
 8003ef6:	2309      	movs	r3, #9
 8003ef8:	e012      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003efa:	230a      	movs	r3, #10
 8003efc:	e010      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003efe:	2308      	movs	r3, #8
 8003f00:	e00e      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f02:	2307      	movs	r3, #7
 8003f04:	e00c      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f06:	2306      	movs	r3, #6
 8003f08:	e00a      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f0a:	2305      	movs	r3, #5
 8003f0c:	e008      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f0e:	2304      	movs	r3, #4
 8003f10:	e006      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f12:	2303      	movs	r3, #3
 8003f14:	e004      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e002      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_GPIO_Init+0x240>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f002 0203 	and.w	r2, r2, #3
 8003f26:	0092      	lsls	r2, r2, #2
 8003f28:	4093      	lsls	r3, r2
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f30:	4935      	ldr	r1, [pc, #212]	; (8004008 <HAL_GPIO_Init+0x328>)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	3302      	adds	r3, #2
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f3e:	4b3d      	ldr	r3, [pc, #244]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f62:	4a34      	ldr	r2, [pc, #208]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f68:	4b32      	ldr	r3, [pc, #200]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f8c:	4a29      	ldr	r2, [pc, #164]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f92:	4b28      	ldr	r3, [pc, #160]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fb6:	4a1f      	ldr	r2, [pc, #124]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <HAL_GPIO_Init+0x354>)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	f67f ae86 	bls.w	8003d00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800
 8004008:	40013800 	.word	0x40013800
 800400c:	40020000 	.word	0x40020000
 8004010:	40020400 	.word	0x40020400
 8004014:	40020800 	.word	0x40020800
 8004018:	40020c00 	.word	0x40020c00
 800401c:	40021000 	.word	0x40021000
 8004020:	40021400 	.word	0x40021400
 8004024:	40021800 	.word	0x40021800
 8004028:	40021c00 	.word	0x40021c00
 800402c:	40022000 	.word	0x40022000
 8004030:	40022400 	.word	0x40022400
 8004034:	40013c00 	.word	0x40013c00

08004038 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	887b      	ldrh	r3, [r7, #2]
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004050:	2301      	movs	r3, #1
 8004052:	73fb      	strb	r3, [r7, #15]
 8004054:	e001      	b.n	800405a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004056:	2300      	movs	r3, #0
 8004058:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800405a:	7bfb      	ldrb	r3, [r7, #15]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	460b      	mov	r3, r1
 8004072:	807b      	strh	r3, [r7, #2]
 8004074:	4613      	mov	r3, r2
 8004076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004078:	787b      	ldrb	r3, [r7, #1]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800407e:	887a      	ldrh	r2, [r7, #2]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004084:	e003      	b.n	800408e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004086:	887b      	ldrh	r3, [r7, #2]
 8004088:	041a      	lsls	r2, r3, #16
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	619a      	str	r2, [r3, #24]
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80040a6:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	88fb      	ldrh	r3, [r7, #6]
 80040ac:	4013      	ands	r3, r2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d006      	beq.n	80040c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040b2:	4a05      	ldr	r2, [pc, #20]	; (80040c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040b4:	88fb      	ldrh	r3, [r7, #6]
 80040b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040b8:	88fb      	ldrh	r3, [r7, #6]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f008 f84a 	bl	800c154 <HAL_GPIO_EXTI_Callback>
  }
}
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40013c00 	.word	0x40013c00

080040cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040d6:	4b23      	ldr	r3, [pc, #140]	; (8004164 <HAL_PWREx_EnableOverDrive+0x98>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040da:	4a22      	ldr	r2, [pc, #136]	; (8004164 <HAL_PWREx_EnableOverDrive+0x98>)
 80040dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e0:	6413      	str	r3, [r2, #64]	; 0x40
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_PWREx_EnableOverDrive+0x98>)
 80040e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040ee:	4b1e      	ldr	r3, [pc, #120]	; (8004168 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1d      	ldr	r2, [pc, #116]	; (8004168 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040fa:	f7fe f9ff 	bl	80024fc <HAL_GetTick>
 80040fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004100:	e009      	b.n	8004116 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004102:	f7fe f9fb 	bl	80024fc <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004110:	d901      	bls.n	8004116 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e022      	b.n	800415c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800411e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004122:	d1ee      	bne.n	8004102 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004124:	4b10      	ldr	r3, [pc, #64]	; (8004168 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a0f      	ldr	r2, [pc, #60]	; (8004168 <HAL_PWREx_EnableOverDrive+0x9c>)
 800412a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004130:	f7fe f9e4 	bl	80024fc <HAL_GetTick>
 8004134:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004136:	e009      	b.n	800414c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004138:	f7fe f9e0 	bl	80024fc <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004146:	d901      	bls.n	800414c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e007      	b.n	800415c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800414c:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_PWREx_EnableOverDrive+0x9c>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004158:	d1ee      	bne.n	8004138 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40023800 	.word	0x40023800
 8004168:	40007000 	.word	0x40007000

0800416c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004174:	2300      	movs	r3, #0
 8004176:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e29b      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8087 	beq.w	800429e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004190:	4b96      	ldr	r3, [pc, #600]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 030c 	and.w	r3, r3, #12
 8004198:	2b04      	cmp	r3, #4
 800419a:	d00c      	beq.n	80041b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800419c:	4b93      	ldr	r3, [pc, #588]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 030c 	and.w	r3, r3, #12
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d112      	bne.n	80041ce <HAL_RCC_OscConfig+0x62>
 80041a8:	4b90      	ldr	r3, [pc, #576]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b4:	d10b      	bne.n	80041ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b6:	4b8d      	ldr	r3, [pc, #564]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d06c      	beq.n	800429c <HAL_RCC_OscConfig+0x130>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d168      	bne.n	800429c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e275      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x7a>
 80041d8:	4b84      	ldr	r3, [pc, #528]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a83      	ldr	r2, [pc, #524]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80041de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	e02e      	b.n	8004244 <HAL_RCC_OscConfig+0xd8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10c      	bne.n	8004208 <HAL_RCC_OscConfig+0x9c>
 80041ee:	4b7f      	ldr	r3, [pc, #508]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a7e      	ldr	r2, [pc, #504]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80041f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	4b7c      	ldr	r3, [pc, #496]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a7b      	ldr	r2, [pc, #492]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e01d      	b.n	8004244 <HAL_RCC_OscConfig+0xd8>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004210:	d10c      	bne.n	800422c <HAL_RCC_OscConfig+0xc0>
 8004212:	4b76      	ldr	r3, [pc, #472]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a75      	ldr	r2, [pc, #468]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	4b73      	ldr	r3, [pc, #460]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a72      	ldr	r2, [pc, #456]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e00b      	b.n	8004244 <HAL_RCC_OscConfig+0xd8>
 800422c:	4b6f      	ldr	r3, [pc, #444]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6e      	ldr	r2, [pc, #440]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	4b6c      	ldr	r3, [pc, #432]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a6b      	ldr	r2, [pc, #428]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 800423e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d013      	beq.n	8004274 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fe f956 	bl	80024fc <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004254:	f7fe f952 	bl	80024fc <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	; 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e229      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004266:	4b61      	ldr	r3, [pc, #388]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0f0      	beq.n	8004254 <HAL_RCC_OscConfig+0xe8>
 8004272:	e014      	b.n	800429e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004274:	f7fe f942 	bl	80024fc <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800427a:	e008      	b.n	800428e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800427c:	f7fe f93e 	bl	80024fc <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e215      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428e:	4b57      	ldr	r3, [pc, #348]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1f0      	bne.n	800427c <HAL_RCC_OscConfig+0x110>
 800429a:	e000      	b.n	800429e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800429c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d069      	beq.n	800437e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042aa:	4b50      	ldr	r3, [pc, #320]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00b      	beq.n	80042ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b6:	4b4d      	ldr	r3, [pc, #308]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d11c      	bne.n	80042fc <HAL_RCC_OscConfig+0x190>
 80042c2:	4b4a      	ldr	r3, [pc, #296]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d116      	bne.n	80042fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ce:	4b47      	ldr	r3, [pc, #284]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_RCC_OscConfig+0x17a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d001      	beq.n	80042e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e1e9      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e6:	4b41      	ldr	r3, [pc, #260]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	493d      	ldr	r1, [pc, #244]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	e040      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d023      	beq.n	800434c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004304:	4b39      	ldr	r3, [pc, #228]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a38      	ldr	r2, [pc, #224]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 800430a:	f043 0301 	orr.w	r3, r3, #1
 800430e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fe f8f4 	bl	80024fc <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004318:	f7fe f8f0 	bl	80024fc <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e1c7      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800432a:	4b30      	ldr	r3, [pc, #192]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004336:	4b2d      	ldr	r3, [pc, #180]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4929      	ldr	r1, [pc, #164]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004346:	4313      	orrs	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
 800434a:	e018      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800434c:	4b27      	ldr	r3, [pc, #156]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a26      	ldr	r2, [pc, #152]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004352:	f023 0301 	bic.w	r3, r3, #1
 8004356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fe f8d0 	bl	80024fc <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004360:	f7fe f8cc 	bl	80024fc <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e1a3      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	4b1e      	ldr	r3, [pc, #120]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d038      	beq.n	80043fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d019      	beq.n	80043c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b16      	ldr	r3, [pc, #88]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004396:	4a15      	ldr	r2, [pc, #84]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 8004398:	f043 0301 	orr.w	r3, r3, #1
 800439c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800439e:	f7fe f8ad 	bl	80024fc <HAL_GetTick>
 80043a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a6:	f7fe f8a9 	bl	80024fc <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e180      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b8:	4b0c      	ldr	r3, [pc, #48]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80043ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d0f0      	beq.n	80043a6 <HAL_RCC_OscConfig+0x23a>
 80043c4:	e01a      	b.n	80043fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80043c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ca:	4a08      	ldr	r2, [pc, #32]	; (80043ec <HAL_RCC_OscConfig+0x280>)
 80043cc:	f023 0301 	bic.w	r3, r3, #1
 80043d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d2:	f7fe f893 	bl	80024fc <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043da:	f7fe f88f 	bl	80024fc <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d903      	bls.n	80043f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e166      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
 80043ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	4b92      	ldr	r3, [pc, #584]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80043f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1ee      	bne.n	80043da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	f000 80a4 	beq.w	8004552 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440a:	4b8c      	ldr	r3, [pc, #560]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10d      	bne.n	8004432 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004416:	4b89      	ldr	r3, [pc, #548]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	4a88      	ldr	r2, [pc, #544]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 800441c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004420:	6413      	str	r3, [r2, #64]	; 0x40
 8004422:	4b86      	ldr	r3, [pc, #536]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	60bb      	str	r3, [r7, #8]
 800442c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800442e:	2301      	movs	r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004432:	4b83      	ldr	r3, [pc, #524]	; (8004640 <HAL_RCC_OscConfig+0x4d4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443a:	2b00      	cmp	r3, #0
 800443c:	d118      	bne.n	8004470 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800443e:	4b80      	ldr	r3, [pc, #512]	; (8004640 <HAL_RCC_OscConfig+0x4d4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a7f      	ldr	r2, [pc, #508]	; (8004640 <HAL_RCC_OscConfig+0x4d4>)
 8004444:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444a:	f7fe f857 	bl	80024fc <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004452:	f7fe f853 	bl	80024fc <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b64      	cmp	r3, #100	; 0x64
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e12a      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004464:	4b76      	ldr	r3, [pc, #472]	; (8004640 <HAL_RCC_OscConfig+0x4d4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d106      	bne.n	8004486 <HAL_RCC_OscConfig+0x31a>
 8004478:	4b70      	ldr	r3, [pc, #448]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 800447a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447c:	4a6f      	ldr	r2, [pc, #444]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	6713      	str	r3, [r2, #112]	; 0x70
 8004484:	e02d      	b.n	80044e2 <HAL_RCC_OscConfig+0x376>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x33c>
 800448e:	4b6b      	ldr	r3, [pc, #428]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	4a6a      	ldr	r2, [pc, #424]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 8004494:	f023 0301 	bic.w	r3, r3, #1
 8004498:	6713      	str	r3, [r2, #112]	; 0x70
 800449a:	4b68      	ldr	r3, [pc, #416]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	4a67      	ldr	r2, [pc, #412]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80044a0:	f023 0304 	bic.w	r3, r3, #4
 80044a4:	6713      	str	r3, [r2, #112]	; 0x70
 80044a6:	e01c      	b.n	80044e2 <HAL_RCC_OscConfig+0x376>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	d10c      	bne.n	80044ca <HAL_RCC_OscConfig+0x35e>
 80044b0:	4b62      	ldr	r3, [pc, #392]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80044b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b4:	4a61      	ldr	r2, [pc, #388]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80044b6:	f043 0304 	orr.w	r3, r3, #4
 80044ba:	6713      	str	r3, [r2, #112]	; 0x70
 80044bc:	4b5f      	ldr	r3, [pc, #380]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	4a5e      	ldr	r2, [pc, #376]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80044c2:	f043 0301 	orr.w	r3, r3, #1
 80044c6:	6713      	str	r3, [r2, #112]	; 0x70
 80044c8:	e00b      	b.n	80044e2 <HAL_RCC_OscConfig+0x376>
 80044ca:	4b5c      	ldr	r3, [pc, #368]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a5b      	ldr	r2, [pc, #364]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80044d0:	f023 0301 	bic.w	r3, r3, #1
 80044d4:	6713      	str	r3, [r2, #112]	; 0x70
 80044d6:	4b59      	ldr	r3, [pc, #356]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	4a58      	ldr	r2, [pc, #352]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80044dc:	f023 0304 	bic.w	r3, r3, #4
 80044e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d015      	beq.n	8004516 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ea:	f7fe f807 	bl	80024fc <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f0:	e00a      	b.n	8004508 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044f2:	f7fe f803 	bl	80024fc <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004500:	4293      	cmp	r3, r2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e0d8      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004508:	4b4c      	ldr	r3, [pc, #304]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 800450a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0ee      	beq.n	80044f2 <HAL_RCC_OscConfig+0x386>
 8004514:	e014      	b.n	8004540 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004516:	f7fd fff1 	bl	80024fc <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451c:	e00a      	b.n	8004534 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451e:	f7fd ffed 	bl	80024fc <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e0c2      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004534:	4b41      	ldr	r3, [pc, #260]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ee      	bne.n	800451e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d105      	bne.n	8004552 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004546:	4b3d      	ldr	r3, [pc, #244]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	4a3c      	ldr	r2, [pc, #240]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 800454c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004550:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80ae 	beq.w	80046b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800455c:	4b37      	ldr	r3, [pc, #220]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 030c 	and.w	r3, r3, #12
 8004564:	2b08      	cmp	r3, #8
 8004566:	d06d      	beq.n	8004644 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d14b      	bne.n	8004608 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004570:	4b32      	ldr	r3, [pc, #200]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a31      	ldr	r2, [pc, #196]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 8004576:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800457a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd ffbe 	bl	80024fc <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004584:	f7fd ffba 	bl	80024fc <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e091      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	4b29      	ldr	r3, [pc, #164]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	019b      	lsls	r3, r3, #6
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	3b01      	subs	r3, #1
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	061b      	lsls	r3, r3, #24
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	071b      	lsls	r3, r3, #28
 80045ce:	491b      	ldr	r1, [pc, #108]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d4:	4b19      	ldr	r3, [pc, #100]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a18      	ldr	r2, [pc, #96]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80045da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fd ff8c 	bl	80024fc <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e8:	f7fd ff88 	bl	80024fc <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e05f      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0x47c>
 8004606:	e057      	b.n	80046b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a0b      	ldr	r2, [pc, #44]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 800460e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd ff72 	bl	80024fc <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461c:	f7fd ff6e 	bl	80024fc <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e045      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	4b03      	ldr	r3, [pc, #12]	; (800463c <HAL_RCC_OscConfig+0x4d0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x4b0>
 800463a:	e03d      	b.n	80046b8 <HAL_RCC_OscConfig+0x54c>
 800463c:	40023800 	.word	0x40023800
 8004640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004644:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <HAL_RCC_OscConfig+0x558>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d030      	beq.n	80046b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800465c:	429a      	cmp	r2, r3
 800465e:	d129      	bne.n	80046b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466a:	429a      	cmp	r2, r3
 800466c:	d122      	bne.n	80046b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004674:	4013      	ands	r3, r2
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800467a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800467c:	4293      	cmp	r3, r2
 800467e:	d119      	bne.n	80046b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	085b      	lsrs	r3, r3, #1
 800468c:	3b01      	subs	r3, #1
 800468e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d10f      	bne.n	80046b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800

080046c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0d0      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e0:	4b6a      	ldr	r3, [pc, #424]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d910      	bls.n	8004710 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ee:	4b67      	ldr	r3, [pc, #412]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f023 020f 	bic.w	r2, r3, #15
 80046f6:	4965      	ldr	r1, [pc, #404]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fe:	4b63      	ldr	r3, [pc, #396]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	683a      	ldr	r2, [r7, #0]
 8004708:	429a      	cmp	r2, r3
 800470a:	d001      	beq.n	8004710 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0b8      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d020      	beq.n	800475e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0304 	and.w	r3, r3, #4
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004728:	4b59      	ldr	r3, [pc, #356]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a58      	ldr	r2, [pc, #352]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800472e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004732:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004740:	4b53      	ldr	r3, [pc, #332]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4a52      	ldr	r2, [pc, #328]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 8004746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800474a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800474c:	4b50      	ldr	r3, [pc, #320]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	494d      	ldr	r1, [pc, #308]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800475a:	4313      	orrs	r3, r2
 800475c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d040      	beq.n	80047ec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004772:	4b47      	ldr	r3, [pc, #284]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d115      	bne.n	80047aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e07f      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b02      	cmp	r3, #2
 8004788:	d107      	bne.n	800479a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478a:	4b41      	ldr	r3, [pc, #260]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e073      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479a:	4b3d      	ldr	r3, [pc, #244]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d101      	bne.n	80047aa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e06b      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047aa:	4b39      	ldr	r3, [pc, #228]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f023 0203 	bic.w	r2, r3, #3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4936      	ldr	r1, [pc, #216]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047bc:	f7fd fe9e 	bl	80024fc <HAL_GetTick>
 80047c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	e00a      	b.n	80047da <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c4:	f7fd fe9a 	bl	80024fc <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e053      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047da:	4b2d      	ldr	r3, [pc, #180]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 020c 	and.w	r2, r3, #12
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d1eb      	bne.n	80047c4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ec:	4b27      	ldr	r3, [pc, #156]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d210      	bcs.n	800481c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fa:	4b24      	ldr	r3, [pc, #144]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f023 020f 	bic.w	r2, r3, #15
 8004802:	4922      	ldr	r1, [pc, #136]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480a:	4b20      	ldr	r3, [pc, #128]	; (800488c <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e032      	b.n	8004882 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0304 	and.w	r3, r3, #4
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	4916      	ldr	r1, [pc, #88]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d009      	beq.n	800485a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004846:	4b12      	ldr	r3, [pc, #72]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	490e      	ldr	r1, [pc, #56]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800485a:	f000 f821 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 800485e:	4602      	mov	r2, r0
 8004860:	4b0b      	ldr	r3, [pc, #44]	; (8004890 <HAL_RCC_ClockConfig+0x1c8>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	490a      	ldr	r1, [pc, #40]	; (8004894 <HAL_RCC_ClockConfig+0x1cc>)
 800486c:	5ccb      	ldrb	r3, [r1, r3]
 800486e:	fa22 f303 	lsr.w	r3, r2, r3
 8004872:	4a09      	ldr	r2, [pc, #36]	; (8004898 <HAL_RCC_ClockConfig+0x1d0>)
 8004874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <HAL_RCC_ClockConfig+0x1d4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4618      	mov	r0, r3
 800487c:	f7fd fdfa 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40023c00 	.word	0x40023c00
 8004890:	40023800 	.word	0x40023800
 8004894:	0800edf0 	.word	0x0800edf0
 8004898:	20000000 	.word	0x20000000
 800489c:	20000004 	.word	0x20000004

080048a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048a4:	b090      	sub	sp, #64	; 0x40
 80048a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048a8:	2300      	movs	r3, #0
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
 80048ac:	2300      	movs	r3, #0
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b0:	2300      	movs	r3, #0
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b8:	4b59      	ldr	r3, [pc, #356]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 030c 	and.w	r3, r3, #12
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d00d      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x40>
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	f200 80a1 	bhi.w	8004a0c <HAL_RCC_GetSysClockFreq+0x16c>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x34>
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d003      	beq.n	80048da <HAL_RCC_GetSysClockFreq+0x3a>
 80048d2:	e09b      	b.n	8004a0c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d4:	4b53      	ldr	r3, [pc, #332]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x184>)
 80048d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048d8:	e09b      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048da:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x188>)
 80048dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048de:	e098      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e0:	4b4f      	ldr	r3, [pc, #316]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x180>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048ea:	4b4d      	ldr	r3, [pc, #308]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x180>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d028      	beq.n	8004948 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f6:	4b4a      	ldr	r3, [pc, #296]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x180>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	099b      	lsrs	r3, r3, #6
 80048fc:	2200      	movs	r2, #0
 80048fe:	623b      	str	r3, [r7, #32]
 8004900:	627a      	str	r2, [r7, #36]	; 0x24
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004908:	2100      	movs	r1, #0
 800490a:	4b47      	ldr	r3, [pc, #284]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x188>)
 800490c:	fb03 f201 	mul.w	r2, r3, r1
 8004910:	2300      	movs	r3, #0
 8004912:	fb00 f303 	mul.w	r3, r0, r3
 8004916:	4413      	add	r3, r2
 8004918:	4a43      	ldr	r2, [pc, #268]	; (8004a28 <HAL_RCC_GetSysClockFreq+0x188>)
 800491a:	fba0 1202 	umull	r1, r2, r0, r2
 800491e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004920:	460a      	mov	r2, r1
 8004922:	62ba      	str	r2, [r7, #40]	; 0x28
 8004924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004926:	4413      	add	r3, r2
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800492a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800492c:	2200      	movs	r2, #0
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	61fa      	str	r2, [r7, #28]
 8004932:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004936:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800493a:	f7fb fd31 	bl	80003a0 <__aeabi_uldivmod>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4613      	mov	r3, r2
 8004944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004946:	e053      	b.n	80049f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004948:	4b35      	ldr	r3, [pc, #212]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x180>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	099b      	lsrs	r3, r3, #6
 800494e:	2200      	movs	r2, #0
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	617a      	str	r2, [r7, #20]
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800495a:	f04f 0b00 	mov.w	fp, #0
 800495e:	4652      	mov	r2, sl
 8004960:	465b      	mov	r3, fp
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f04f 0100 	mov.w	r1, #0
 800496a:	0159      	lsls	r1, r3, #5
 800496c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004970:	0150      	lsls	r0, r2, #5
 8004972:	4602      	mov	r2, r0
 8004974:	460b      	mov	r3, r1
 8004976:	ebb2 080a 	subs.w	r8, r2, sl
 800497a:	eb63 090b 	sbc.w	r9, r3, fp
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800498a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800498e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004992:	ebb2 0408 	subs.w	r4, r2, r8
 8004996:	eb63 0509 	sbc.w	r5, r3, r9
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	00eb      	lsls	r3, r5, #3
 80049a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049a8:	00e2      	lsls	r2, r4, #3
 80049aa:	4614      	mov	r4, r2
 80049ac:	461d      	mov	r5, r3
 80049ae:	eb14 030a 	adds.w	r3, r4, sl
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	eb45 030b 	adc.w	r3, r5, fp
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049c6:	4629      	mov	r1, r5
 80049c8:	028b      	lsls	r3, r1, #10
 80049ca:	4621      	mov	r1, r4
 80049cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049d0:	4621      	mov	r1, r4
 80049d2:	028a      	lsls	r2, r1, #10
 80049d4:	4610      	mov	r0, r2
 80049d6:	4619      	mov	r1, r3
 80049d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049da:	2200      	movs	r2, #0
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	60fa      	str	r2, [r7, #12]
 80049e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e4:	f7fb fcdc 	bl	80003a0 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4613      	mov	r3, r2
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <HAL_RCC_GetSysClockFreq+0x180>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	0c1b      	lsrs	r3, r3, #16
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	3301      	adds	r3, #1
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004a00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a0a:	e002      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a0c:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a0e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3740      	adds	r7, #64	; 0x40
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	00f42400 	.word	0x00f42400
 8004a28:	017d7840 	.word	0x017d7840

08004a2c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a30:	4b03      	ldr	r3, [pc, #12]	; (8004a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a32:	681b      	ldr	r3, [r3, #0]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	20000000 	.word	0x20000000

08004a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a48:	f7ff fff0 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	0a9b      	lsrs	r3, r3, #10
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	4903      	ldr	r1, [pc, #12]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a5a:	5ccb      	ldrb	r3, [r1, r3]
 8004a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	40023800 	.word	0x40023800
 8004a68:	0800ee00 	.word	0x0800ee00

08004a6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a70:	f7ff ffdc 	bl	8004a2c <HAL_RCC_GetHCLKFreq>
 8004a74:	4602      	mov	r2, r0
 8004a76:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	0b5b      	lsrs	r3, r3, #13
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	4903      	ldr	r1, [pc, #12]	; (8004a90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a82:	5ccb      	ldrb	r3, [r1, r3]
 8004a84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	0800ee00 	.word	0x0800ee00

08004a94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d012      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004abc:	4b69      	ldr	r3, [pc, #420]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a68      	ldr	r2, [pc, #416]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ac6:	6093      	str	r3, [r2, #8]
 8004ac8:	4b66      	ldr	r3, [pc, #408]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad0:	4964      	ldr	r1, [pc, #400]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d017      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004aee:	4b5d      	ldr	r3, [pc, #372]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	4959      	ldr	r1, [pc, #356]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d017      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b2a:	4b4e      	ldr	r3, [pc, #312]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b30:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b38:	494a      	ldr	r1, [pc, #296]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b48:	d101      	bne.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b56:	2301      	movs	r3, #1
 8004b58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b66:	2301      	movs	r3, #1
 8004b68:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 808b 	beq.w	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b78:	4b3a      	ldr	r3, [pc, #232]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	4a39      	ldr	r2, [pc, #228]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b82:	6413      	str	r3, [r2, #64]	; 0x40
 8004b84:	4b37      	ldr	r3, [pc, #220]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	60bb      	str	r3, [r7, #8]
 8004b8e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b90:	4b35      	ldr	r3, [pc, #212]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a34      	ldr	r2, [pc, #208]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b9c:	f7fd fcae 	bl	80024fc <HAL_GetTick>
 8004ba0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ba4:	f7fd fcaa 	bl	80024fc <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b64      	cmp	r3, #100	; 0x64
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e38f      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004bb6:	4b2c      	ldr	r3, [pc, #176]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0f0      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bc2:	4b28      	ldr	r3, [pc, #160]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d035      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d02e      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004be0:	4b20      	ldr	r3, [pc, #128]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bea:	4b1e      	ldr	r3, [pc, #120]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bee:	4a1d      	ldr	r2, [pc, #116]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bf6:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfa:	4a1a      	ldr	r2, [pc, #104]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c02:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c08:	4b16      	ldr	r3, [pc, #88]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d114      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fd fc72 	bl	80024fc <HAL_GetTick>
 8004c18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c1a:	e00a      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c1c:	f7fd fc6e 	bl	80024fc <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e351      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c32:	4b0c      	ldr	r3, [pc, #48]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0ee      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c4a:	d111      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c5a:	400b      	ands	r3, r1
 8004c5c:	4901      	ldr	r1, [pc, #4]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	608b      	str	r3, [r1, #8]
 8004c62:	e00b      	b.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c64:	40023800 	.word	0x40023800
 8004c68:	40007000 	.word	0x40007000
 8004c6c:	0ffffcff 	.word	0x0ffffcff
 8004c70:	4bac      	ldr	r3, [pc, #688]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4aab      	ldr	r2, [pc, #684]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c7a:	6093      	str	r3, [r2, #8]
 8004c7c:	4ba9      	ldr	r3, [pc, #676]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c88:	49a6      	ldr	r1, [pc, #664]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d010      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c9a:	4ba2      	ldr	r3, [pc, #648]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca0:	4aa0      	ldr	r2, [pc, #640]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ca6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004caa:	4b9e      	ldr	r3, [pc, #632]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb4:	499b      	ldr	r1, [pc, #620]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cc8:	4b96      	ldr	r3, [pc, #600]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cd6:	4993      	ldr	r1, [pc, #588]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cea:	4b8e      	ldr	r3, [pc, #568]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf8:	498a      	ldr	r1, [pc, #552]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d0c:	4b85      	ldr	r3, [pc, #532]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d1a:	4982      	ldr	r1, [pc, #520]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d2e:	4b7d      	ldr	r3, [pc, #500]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	4979      	ldr	r1, [pc, #484]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d50:	4b74      	ldr	r3, [pc, #464]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	f023 0203 	bic.w	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	4971      	ldr	r1, [pc, #452]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d72:	4b6c      	ldr	r3, [pc, #432]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d78:	f023 020c 	bic.w	r2, r3, #12
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d80:	4968      	ldr	r1, [pc, #416]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d94:	4b63      	ldr	r3, [pc, #396]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da2:	4960      	ldr	r1, [pc, #384]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004db6:	4b5b      	ldr	r3, [pc, #364]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc4:	4957      	ldr	r1, [pc, #348]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dd8:	4b52      	ldr	r3, [pc, #328]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dde:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de6:	494f      	ldr	r1, [pc, #316]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004dfa:	4b4a      	ldr	r3, [pc, #296]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	4946      	ldr	r1, [pc, #280]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004e1c:	4b41      	ldr	r3, [pc, #260]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2a:	493e      	ldr	r1, [pc, #248]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e3e:	4b39      	ldr	r3, [pc, #228]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4c:	4935      	ldr	r1, [pc, #212]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e60:	4b30      	ldr	r3, [pc, #192]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e66:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e6e:	492d      	ldr	r1, [pc, #180]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d011      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e82:	4b28      	ldr	r3, [pc, #160]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e88:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e90:	4924      	ldr	r1, [pc, #144]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ea0:	d101      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ec2:	4b18      	ldr	r3, [pc, #96]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ed0:	4914      	ldr	r1, [pc, #80]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00b      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef4:	490b      	ldr	r1, [pc, #44]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00f      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004f08:	4b06      	ldr	r3, [pc, #24]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f0e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f18:	4902      	ldr	r1, [pc, #8]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f20:	e002      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004f22:	bf00      	nop
 8004f24:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00b      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f34:	4b8a      	ldr	r3, [pc, #552]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f44:	4986      	ldr	r1, [pc, #536]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00b      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f58:	4b81      	ldr	r3, [pc, #516]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f5e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f68:	497d      	ldr	r1, [pc, #500]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d006      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 80d6 	beq.w	8005130 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f84:	4b76      	ldr	r3, [pc, #472]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a75      	ldr	r2, [pc, #468]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f90:	f7fd fab4 	bl	80024fc <HAL_GetTick>
 8004f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f98:	f7fd fab0 	bl	80024fc <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b64      	cmp	r3, #100	; 0x64
 8004fa4:	d901      	bls.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e195      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004faa:	4b6d      	ldr	r3, [pc, #436]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1f0      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d021      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d11d      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fca:	4b65      	ldr	r3, [pc, #404]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd0:	0c1b      	lsrs	r3, r3, #16
 8004fd2:	f003 0303 	and.w	r3, r3, #3
 8004fd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fd8:	4b61      	ldr	r3, [pc, #388]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fde:	0e1b      	lsrs	r3, r3, #24
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	019a      	lsls	r2, r3, #6
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	061b      	lsls	r3, r3, #24
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	071b      	lsls	r3, r3, #28
 8004ffe:	4958      	ldr	r1, [pc, #352]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d004      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800501a:	d00a      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005024:	2b00      	cmp	r3, #0
 8005026:	d02e      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005030:	d129      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005032:	4b4b      	ldr	r3, [pc, #300]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005040:	4b47      	ldr	r3, [pc, #284]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005046:	0f1b      	lsrs	r3, r3, #28
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	019a      	lsls	r2, r3, #6
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	041b      	lsls	r3, r3, #16
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	061b      	lsls	r3, r3, #24
 8005060:	431a      	orrs	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	071b      	lsls	r3, r3, #28
 8005066:	493e      	ldr	r1, [pc, #248]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800506e:	4b3c      	ldr	r3, [pc, #240]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005074:	f023 021f 	bic.w	r2, r3, #31
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	3b01      	subs	r3, #1
 800507e:	4938      	ldr	r1, [pc, #224]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005080:	4313      	orrs	r3, r2
 8005082:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01d      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005092:	4b33      	ldr	r3, [pc, #204]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005098:	0e1b      	lsrs	r3, r3, #24
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80050a0:	4b2f      	ldr	r3, [pc, #188]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a6:	0f1b      	lsrs	r3, r3, #28
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	019a      	lsls	r2, r3, #6
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	041b      	lsls	r3, r3, #16
 80050ba:	431a      	orrs	r2, r3
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	061b      	lsls	r3, r3, #24
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	071b      	lsls	r3, r3, #28
 80050c6:	4926      	ldr	r1, [pc, #152]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050c8:	4313      	orrs	r3, r2
 80050ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d011      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	019a      	lsls	r2, r3, #6
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	041b      	lsls	r3, r3, #16
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	061b      	lsls	r3, r3, #24
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	071b      	lsls	r3, r3, #28
 80050f6:	491a      	ldr	r1, [pc, #104]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050fe:	4b18      	ldr	r3, [pc, #96]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a17      	ldr	r2, [pc, #92]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005104:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800510a:	f7fd f9f7 	bl	80024fc <HAL_GetTick>
 800510e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005110:	e008      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005112:	f7fd f9f3 	bl	80024fc <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b64      	cmp	r3, #100	; 0x64
 800511e:	d901      	bls.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e0d8      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005124:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0f0      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	2b01      	cmp	r3, #1
 8005134:	f040 80ce 	bne.w	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005138:	4b09      	ldr	r3, [pc, #36]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a08      	ldr	r2, [pc, #32]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005144:	f7fd f9da 	bl	80024fc <HAL_GetTick>
 8005148:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800514a:	e00b      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800514c:	f7fd f9d6 	bl	80024fc <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b64      	cmp	r3, #100	; 0x64
 8005158:	d904      	bls.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e0bb      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800515e:	bf00      	nop
 8005160:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005164:	4b5e      	ldr	r3, [pc, #376]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800516c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005170:	d0ec      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800518e:	2b00      	cmp	r3, #0
 8005190:	d02e      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d12a      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800519a:	4b51      	ldr	r3, [pc, #324]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	0c1b      	lsrs	r3, r3, #16
 80051a2:	f003 0303 	and.w	r3, r3, #3
 80051a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051a8:	4b4d      	ldr	r3, [pc, #308]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ae:	0f1b      	lsrs	r3, r3, #28
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	019a      	lsls	r2, r3, #6
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	041b      	lsls	r3, r3, #16
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	061b      	lsls	r3, r3, #24
 80051c8:	431a      	orrs	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	071b      	lsls	r3, r3, #28
 80051ce:	4944      	ldr	r1, [pc, #272]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051d6:	4b42      	ldr	r3, [pc, #264]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	021b      	lsls	r3, r3, #8
 80051e8:	493d      	ldr	r1, [pc, #244]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d022      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005204:	d11d      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005206:	4b36      	ldr	r3, [pc, #216]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	0e1b      	lsrs	r3, r3, #24
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005214:	4b32      	ldr	r3, [pc, #200]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521a:	0f1b      	lsrs	r3, r3, #28
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	019a      	lsls	r2, r3, #6
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	431a      	orrs	r2, r3
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	061b      	lsls	r3, r3, #24
 8005234:	431a      	orrs	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	071b      	lsls	r3, r3, #28
 800523a:	4929      	ldr	r1, [pc, #164]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d028      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800524e:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005254:	0e1b      	lsrs	r3, r3, #24
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800525c:	4b20      	ldr	r3, [pc, #128]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800525e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005262:	0c1b      	lsrs	r3, r3, #16
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	019a      	lsls	r2, r3, #6
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	041b      	lsls	r3, r3, #16
 8005274:	431a      	orrs	r2, r3
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	061b      	lsls	r3, r3, #24
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	071b      	lsls	r3, r3, #28
 8005282:	4917      	ldr	r1, [pc, #92]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005284:	4313      	orrs	r3, r2
 8005286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800528a:	4b15      	ldr	r3, [pc, #84]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800528c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005298:	4911      	ldr	r1, [pc, #68]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80052a0:	4b0f      	ldr	r3, [pc, #60]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a0e      	ldr	r2, [pc, #56]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ac:	f7fd f926 	bl	80024fc <HAL_GetTick>
 80052b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80052b4:	f7fd f922 	bl	80024fc <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b64      	cmp	r3, #100	; 0x64
 80052c0:	d901      	bls.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e007      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052c6:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052d2:	d1ef      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3720      	adds	r7, #32
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800

080052e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005302:	f040 80a3 	bne.w	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8005306:	4ba8      	ldr	r3, [pc, #672]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800530c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005314:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800531c:	f000 808a 	beq.w	8005434 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005326:	f200 8093 	bhi.w	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005330:	d07d      	beq.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005338:	f200 808a 	bhi.w	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d004      	beq.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005348:	d039      	beq.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800534a:	e081      	b.n	8005450 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800534c:	4b96      	ldr	r3, [pc, #600]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d108      	bne.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005358:	4b93      	ldr	r3, [pc, #588]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005360:	4a92      	ldr	r2, [pc, #584]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005362:	fbb2 f3f3 	udiv	r3, r2, r3
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	e007      	b.n	800537a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800536a:	4b8f      	ldr	r3, [pc, #572]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005372:	4a8f      	ldr	r2, [pc, #572]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800537a:	4b8b      	ldr	r3, [pc, #556]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005380:	0e1b      	lsrs	r3, r3, #24
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8005388:	4b87      	ldr	r3, [pc, #540]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	099b      	lsrs	r3, r3, #6
 8005390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	fb03 f202 	mul.w	r2, r3, r2
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a0:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80053a2:	4b81      	ldr	r3, [pc, #516]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	f003 031f 	and.w	r3, r3, #31
 80053ae:	3301      	adds	r3, #1
 80053b0:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ba:	617b      	str	r3, [r7, #20]
        break;
 80053bc:	e049      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80053be:	4b7a      	ldr	r3, [pc, #488]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d108      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80053ca:	4b77      	ldr	r3, [pc, #476]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053d2:	4a76      	ldr	r2, [pc, #472]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80053d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	e007      	b.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80053dc:	4b72      	ldr	r3, [pc, #456]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053e4:	4a72      	ldr	r2, [pc, #456]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80053e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ea:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80053ec:	4b6e      	ldr	r3, [pc, #440]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f2:	0e1b      	lsrs	r3, r3, #24
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80053fa:	4b6b      	ldr	r3, [pc, #428]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80053fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005400:	099b      	lsrs	r3, r3, #6
 8005402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	fb03 f202 	mul.w	r2, r3, r2
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005412:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8005414:	4b64      	ldr	r3, [pc, #400]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	fbb2 f3f3 	udiv	r3, r2, r3
 800542a:	617b      	str	r3, [r7, #20]
        break;
 800542c:	e011      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 800542e:	4b61      	ldr	r3, [pc, #388]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005430:	617b      	str	r3, [r7, #20]
        break;
 8005432:	e00e      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005434:	4b5c      	ldr	r3, [pc, #368]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8005440:	4b5a      	ldr	r3, [pc, #360]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005442:	617b      	str	r3, [r7, #20]
        break;
 8005444:	e005      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8005446:	4b5a      	ldr	r3, [pc, #360]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8005448:	617b      	str	r3, [r7, #20]
        break;
 800544a:	e002      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 800544c:	bf00      	nop
 800544e:	e000      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8005450:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005458:	f040 80a3 	bne.w	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 800545c:	4b52      	ldr	r3, [pc, #328]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800545e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005462:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800546a:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005472:	f000 808a 	beq.w	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800547c:	f200 809c 	bhi.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005486:	d07d      	beq.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800548e:	f200 8093 	bhi.w	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d004      	beq.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549e:	d039      	beq.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80054a0:	e08a      	b.n	80055b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80054a2:	4b41      	ldr	r3, [pc, #260]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d108      	bne.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054ae:	4b3e      	ldr	r3, [pc, #248]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054b6:	4a3d      	ldr	r2, [pc, #244]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80054b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	e007      	b.n	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80054c0:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054c8:	4a39      	ldr	r2, [pc, #228]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80054ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ce:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80054d0:	4b35      	ldr	r3, [pc, #212]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d6:	0e1b      	lsrs	r3, r3, #24
 80054d8:	f003 030f 	and.w	r3, r3, #15
 80054dc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80054de:	4b32      	ldr	r3, [pc, #200]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e4:	099b      	lsrs	r3, r3, #6
 80054e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	fb03 f202 	mul.w	r2, r3, r2
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054f6:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80054f8:	4b2b      	ldr	r3, [pc, #172]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80054fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054fe:	0a1b      	lsrs	r3, r3, #8
 8005500:	f003 031f 	and.w	r3, r3, #31
 8005504:	3301      	adds	r3, #1
 8005506:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	617b      	str	r3, [r7, #20]
        break;
 8005512:	e052      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8005514:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d108      	bne.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005520:	4b21      	ldr	r3, [pc, #132]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005528:	4a20      	ldr	r2, [pc, #128]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800552a:	fbb2 f3f3 	udiv	r3, r2, r3
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	e007      	b.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8005532:	4b1d      	ldr	r3, [pc, #116]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800553a:	4a1d      	ldr	r2, [pc, #116]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800553c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005540:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8005542:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005548:	0e1b      	lsrs	r3, r3, #24
 800554a:	f003 030f 	and.w	r3, r3, #15
 800554e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8005550:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8005552:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005556:	099b      	lsrs	r3, r3, #6
 8005558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	fb03 f202 	mul.w	r2, r3, r2
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800556a:	4b0f      	ldr	r3, [pc, #60]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800556c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005570:	f003 031f 	and.w	r3, r3, #31
 8005574:	3301      	adds	r3, #1
 8005576:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	617b      	str	r3, [r7, #20]
        break;
 8005582:	e01a      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 8005584:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8005586:	617b      	str	r3, [r7, #20]
        break;
 8005588:	e017      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800558a:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d102      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8005596:	4b05      	ldr	r3, [pc, #20]	; (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8005598:	617b      	str	r3, [r7, #20]
        break;
 800559a:	e00e      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 800559c:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800559e:	617b      	str	r3, [r7, #20]
        break;
 80055a0:	e00b      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 80055a2:	bf00      	nop
 80055a4:	e009      	b.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80055a6:	bf00      	nop
 80055a8:	40023800 	.word	0x40023800
 80055ac:	00f42400 	.word	0x00f42400
 80055b0:	017d7840 	.word	0x017d7840
 80055b4:	00bb8000 	.word	0x00bb8000
        break;
 80055b8:	bf00      	nop

  return frequency;
 80055ba:	697b      	ldr	r3, [r7, #20]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	371c      	adds	r7, #28
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e071      	b.n	80056c2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	7f5b      	ldrb	r3, [r3, #29]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fb feae 	bl	8001350 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b10      	cmp	r3, #16
 8005606:	d053      	beq.n	80056b0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	22ca      	movs	r2, #202	; 0xca
 800560e:	625a      	str	r2, [r3, #36]	; 0x24
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2253      	movs	r2, #83	; 0x53
 8005616:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fa4d 	bl	8005ab8 <RTC_EnterInitMode>
 800561e:	4603      	mov	r3, r0
 8005620:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d12a      	bne.n	800567e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6899      	ldr	r1, [r3, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b26      	ldr	r3, [pc, #152]	; (80056cc <HAL_RTC_Init+0x104>)
 8005634:	400b      	ands	r3, r1
 8005636:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6899      	ldr	r1, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	431a      	orrs	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	695b      	ldr	r3, [r3, #20]
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	68d2      	ldr	r2, [r2, #12]
 800565e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	6919      	ldr	r1, [r3, #16]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	041a      	lsls	r2, r3, #16
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fa56 	bl	8005b26 <RTC_ExitInitMode>
 800567a:	4603      	mov	r3, r0
 800567c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d110      	bne.n	80056a6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0208 	bic.w	r2, r2, #8
 8005692:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	22ff      	movs	r2, #255	; 0xff
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24
 80056ae:	e001      	b.n	80056b4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d102      	bne.n	80056c0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	ff8fffbf 	.word	0xff8fffbf

080056d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	7f1b      	ldrb	r3, [r3, #28]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_RTC_SetTime+0x1c>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e085      	b.n	80057f8 <HAL_RTC_SetTime+0x128>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2202      	movs	r2, #2
 80056f6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d126      	bne.n	800574c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005708:	2b00      	cmp	r3, #0
 800570a:	d102      	bne.n	8005712 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2200      	movs	r2, #0
 8005710:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fa2a 	bl	8005b70 <RTC_ByteToBcd2>
 800571c:	4603      	mov	r3, r0
 800571e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	785b      	ldrb	r3, [r3, #1]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fa23 	bl	8005b70 <RTC_ByteToBcd2>
 800572a:	4603      	mov	r3, r0
 800572c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800572e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	789b      	ldrb	r3, [r3, #2]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fa1b 	bl	8005b70 <RTC_ByteToBcd2>
 800573a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800573c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	78db      	ldrb	r3, [r3, #3]
 8005744:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
 800574a:	e018      	b.n	800577e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005756:	2b00      	cmp	r3, #0
 8005758:	d102      	bne.n	8005760 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2200      	movs	r2, #0
 800575e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	785b      	ldrb	r3, [r3, #1]
 800576a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800576c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005772:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	78db      	ldrb	r3, [r3, #3]
 8005778:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	22ca      	movs	r2, #202	; 0xca
 8005784:	625a      	str	r2, [r3, #36]	; 0x24
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2253      	movs	r2, #83	; 0x53
 800578c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800578e:	68f8      	ldr	r0, [r7, #12]
 8005790:	f000 f992 	bl	8005ab8 <RTC_EnterInitMode>
 8005794:	4603      	mov	r3, r0
 8005796:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005798:	7cfb      	ldrb	r3, [r7, #19]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d11e      	bne.n	80057dc <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	6979      	ldr	r1, [r7, #20]
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <HAL_RTC_SetTime+0x130>)
 80057a6:	400b      	ands	r3, r1
 80057a8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057b8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6899      	ldr	r1, [r3, #8]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f9a7 	bl	8005b26 <RTC_ExitInitMode>
 80057d8:	4603      	mov	r3, r0
 80057da:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057dc:	7cfb      	ldrb	r3, [r7, #19]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d102      	bne.n	80057e8 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2201      	movs	r2, #1
 80057e6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	22ff      	movs	r2, #255	; 0xff
 80057ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	771a      	strb	r2, [r3, #28]

  return status;
 80057f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd90      	pop	{r4, r7, pc}
 8005800:	007f7f7f 	.word	0x007f7f7f

08005804 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b22      	ldr	r3, [pc, #136]	; (80058bc <HAL_RTC_GetTime+0xb8>)
 8005834:	4013      	ands	r3, r2
 8005836:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	0c1b      	lsrs	r3, r3, #16
 800583c:	b2db      	uxtb	r3, r3
 800583e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005842:	b2da      	uxtb	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	0a1b      	lsrs	r3, r3, #8
 800584c:	b2db      	uxtb	r3, r3
 800584e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005852:	b2da      	uxtb	r2, r3
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	b2db      	uxtb	r3, r3
 800585c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005860:	b2da      	uxtb	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	0d9b      	lsrs	r3, r3, #22
 800586a:	b2db      	uxtb	r3, r3
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	b2da      	uxtb	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11a      	bne.n	80058b2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f993 	bl	8005bac <RTC_Bcd2ToByte>
 8005886:	4603      	mov	r3, r0
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	4618      	mov	r0, r3
 8005894:	f000 f98a 	bl	8005bac <RTC_Bcd2ToByte>
 8005898:	4603      	mov	r3, r0
 800589a:	461a      	mov	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	789b      	ldrb	r3, [r3, #2]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 f981 	bl	8005bac <RTC_Bcd2ToByte>
 80058aa:	4603      	mov	r3, r0
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	007f7f7f 	.word	0x007f7f7f

080058c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058c0:	b590      	push	{r4, r7, lr}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	7f1b      	ldrb	r3, [r3, #28]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d101      	bne.n	80058dc <HAL_RTC_SetDate+0x1c>
 80058d8:	2302      	movs	r3, #2
 80058da:	e06f      	b.n	80059bc <HAL_RTC_SetDate+0xfc>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2202      	movs	r2, #2
 80058e6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10e      	bne.n	800590c <HAL_RTC_SetDate+0x4c>
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d008      	beq.n	800590c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	f023 0310 	bic.w	r3, r3, #16
 8005902:	b2db      	uxtb	r3, r3
 8005904:	330a      	adds	r3, #10
 8005906:	b2da      	uxtb	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d11c      	bne.n	800594c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	78db      	ldrb	r3, [r3, #3]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 f92a 	bl	8005b70 <RTC_ByteToBcd2>
 800591c:	4603      	mov	r3, r0
 800591e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	785b      	ldrb	r3, [r3, #1]
 8005924:	4618      	mov	r0, r3
 8005926:	f000 f923 	bl	8005b70 <RTC_ByteToBcd2>
 800592a:	4603      	mov	r3, r0
 800592c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800592e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	789b      	ldrb	r3, [r3, #2]
 8005934:	4618      	mov	r0, r3
 8005936:	f000 f91b 	bl	8005b70 <RTC_ByteToBcd2>
 800593a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800593c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]
 800594a:	e00e      	b.n	800596a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	78db      	ldrb	r3, [r3, #3]
 8005950:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	785b      	ldrb	r3, [r3, #1]
 8005956:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005958:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800595e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	22ca      	movs	r2, #202	; 0xca
 8005970:	625a      	str	r2, [r3, #36]	; 0x24
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2253      	movs	r2, #83	; 0x53
 8005978:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f89c 	bl	8005ab8 <RTC_EnterInitMode>
 8005980:	4603      	mov	r3, r0
 8005982:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005984:	7cfb      	ldrb	r3, [r7, #19]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10a      	bne.n	80059a0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	6979      	ldr	r1, [r7, #20]
 8005990:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <HAL_RTC_SetDate+0x104>)
 8005992:	400b      	ands	r3, r1
 8005994:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f8c5 	bl	8005b26 <RTC_ExitInitMode>
 800599c:	4603      	mov	r3, r0
 800599e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80059a0:	7cfb      	ldrb	r3, [r7, #19]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	22ff      	movs	r2, #255	; 0xff
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	771a      	strb	r2, [r3, #28]

  return status;
 80059ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd90      	pop	{r4, r7, pc}
 80059c4:	00ffff3f 	.word	0x00ffff3f

080059c8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4b21      	ldr	r3, [pc, #132]	; (8005a64 <HAL_RTC_GetDate+0x9c>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	0c1b      	lsrs	r3, r3, #16
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	0a1b      	lsrs	r3, r3, #8
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	b2da      	uxtb	r2, r3
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	0b5b      	lsrs	r3, r3, #13
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d11a      	bne.n	8005a58 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	78db      	ldrb	r3, [r3, #3]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 f8c0 	bl	8005bac <RTC_Bcd2ToByte>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	785b      	ldrb	r3, [r3, #1]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 f8b7 	bl	8005bac <RTC_Bcd2ToByte>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	789b      	ldrb	r3, [r3, #2]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 f8ae 	bl	8005bac <RTC_Bcd2ToByte>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	00ffff3f 	.word	0x00ffff3f

08005a68 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a82:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a84:	f7fc fd3a 	bl	80024fc <HAL_GetTick>
 8005a88:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a8a:	e009      	b.n	8005aa0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a8c:	f7fc fd36 	bl	80024fc <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e007      	b.n	8005ab0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f003 0320 	and.w	r3, r3, #32
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d0ee      	beq.n	8005a8c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d122      	bne.n	8005b1c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005ae4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae6:	f7fc fd09 	bl	80024fc <HAL_GetTick>
 8005aea:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005aec:	e00c      	b.n	8005b08 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005aee:	f7fc fd05 	bl	80024fc <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005afc:	d904      	bls.n	8005b08 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2204      	movs	r2, #4
 8005b02:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <RTC_EnterInitMode+0x64>
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d1e8      	bne.n	8005aee <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b40:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10a      	bne.n	8005b66 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff ff89 	bl	8005a68 <HAL_RTC_WaitForSynchro>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d004      	beq.n	8005b66 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005b7e:	e005      	b.n	8005b8c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3301      	adds	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	3b0a      	subs	r3, #10
 8005b8a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	2b09      	cmp	r3, #9
 8005b90:	d8f6      	bhi.n	8005b80 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	79fb      	ldrb	r3, [r7, #7]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	b2db      	uxtb	r3, r3
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	005b      	lsls	r3, r3, #1
 8005bca:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	4413      	add	r3, r2
 8005bda:	b2db      	uxtb	r3, r3
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3350      	adds	r3, #80	; 0x50
 8005bfe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4413      	add	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	601a      	str	r2, [r3, #0]
}
 8005c10:	bf00      	nop
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	3350      	adds	r3, #80	; 0x50
 8005c30:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	4413      	add	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b088      	sub	sp, #32
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e156      	b.n	8005f18 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fb fbf2 	bl	8001468 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 f95b 	bl	8005f48 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d00c      	beq.n	8005cb4 <HAL_SAI_Init+0x68>
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d80d      	bhi.n	8005cba <HAL_SAI_Init+0x6e>
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SAI_Init+0x5c>
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d003      	beq.n	8005cae <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8005ca6:	e008      	b.n	8005cba <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	61fb      	str	r3, [r7, #28]
      break;
 8005cac:	e006      	b.n	8005cbc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005cae:	2310      	movs	r3, #16
 8005cb0:	61fb      	str	r3, [r7, #28]
      break;
 8005cb2:	e003      	b.n	8005cbc <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005cb4:	2320      	movs	r3, #32
 8005cb6:	61fb      	str	r3, [r7, #28]
      break;
 8005cb8:	e000      	b.n	8005cbc <HAL_SAI_Init+0x70>
      break;
 8005cba:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d81e      	bhi.n	8005d02 <HAL_SAI_Init+0xb6>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <HAL_SAI_Init+0x80>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005ce3 	.word	0x08005ce3
 8005cd4:	08005ceb 	.word	0x08005ceb
 8005cd8:	08005cf3 	.word	0x08005cf3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
    }
    break;
 8005ce0:	e010      	b.n	8005d04 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ce6:	617b      	str	r3, [r7, #20]
    }
    break;
 8005ce8:	e00c      	b.n	8005d04 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cee:	617b      	str	r3, [r7, #20]
    }
    break;
 8005cf0:	e008      	b.n	8005d04 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005cf2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cf6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	f043 0301 	orr.w	r3, r3, #1
 8005cfe:	61fb      	str	r3, [r7, #28]
    }
    break;
 8005d00:	e000      	b.n	8005d04 <HAL_SAI_Init+0xb8>
    default:
      break;
 8005d02:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a85      	ldr	r2, [pc, #532]	; (8005f20 <HAL_SAI_Init+0x2d4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d004      	beq.n	8005d18 <HAL_SAI_Init+0xcc>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a84      	ldr	r2, [pc, #528]	; (8005f24 <HAL_SAI_Init+0x2d8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d103      	bne.n	8005d20 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8005d18:	4a83      	ldr	r2, [pc, #524]	; (8005f28 <HAL_SAI_Init+0x2dc>)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e002      	b.n	8005d26 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005d20:	4a82      	ldr	r2, [pc, #520]	; (8005f2c <HAL_SAI_Init+0x2e0>)
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d04c      	beq.n	8005dc8 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a7a      	ldr	r2, [pc, #488]	; (8005f20 <HAL_SAI_Init+0x2d4>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d004      	beq.n	8005d46 <HAL_SAI_Init+0xfa>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a78      	ldr	r2, [pc, #480]	; (8005f24 <HAL_SAI_Init+0x2d8>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d104      	bne.n	8005d50 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005d46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005d4a:	f7ff facb 	bl	80052e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d4e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a76      	ldr	r2, [pc, #472]	; (8005f30 <HAL_SAI_Init+0x2e4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d004      	beq.n	8005d64 <HAL_SAI_Init+0x118>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a75      	ldr	r2, [pc, #468]	; (8005f34 <HAL_SAI_Init+0x2e8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d104      	bne.n	8005d6e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005d64:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005d68:	f7ff fabc 	bl	80052e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d6c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8005d6e:	693a      	ldr	r2, [r7, #16]
 8005d70:	4613      	mov	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	4413      	add	r3, r2
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	461a      	mov	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	69db      	ldr	r3, [r3, #28]
 8005d7e:	025b      	lsls	r3, r3, #9
 8005d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d84:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4a6b      	ldr	r2, [pc, #428]	; (8005f38 <HAL_SAI_Init+0x2ec>)
 8005d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8e:	08da      	lsrs	r2, r3, #3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005d94:	68f9      	ldr	r1, [r7, #12]
 8005d96:	4b68      	ldr	r3, [pc, #416]	; (8005f38 <HAL_SAI_Init+0x2ec>)
 8005d98:	fba3 2301 	umull	r2, r3, r3, r1
 8005d9c:	08da      	lsrs	r2, r3, #3
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	1aca      	subs	r2, r1, r3
 8005da8:	2a08      	cmp	r2, #8
 8005daa:	d904      	bls.n	8005db6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d104      	bne.n	8005dc8 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	085a      	lsrs	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_SAI_Init+0x18c>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d109      	bne.n	8005dec <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_SAI_Init+0x198>
 8005de0:	2300      	movs	r3, #0
 8005de2:	e001      	b.n	8005de8 <HAL_SAI_Init+0x19c>
 8005de4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	e008      	b.n	8005dfe <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d102      	bne.n	8005dfa <HAL_SAI_Init+0x1ae>
 8005df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005df8:	e000      	b.n	8005dfc <HAL_SAI_Init+0x1b0>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6819      	ldr	r1, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	4b4c      	ldr	r3, [pc, #304]	; (8005f3c <HAL_SAI_Init+0x2f0>)
 8005e0a:	400b      	ands	r3, r1
 8005e0c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	6819      	ldr	r1, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e22:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8005e36:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005e42:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	051b      	lsls	r3, r3, #20
 8005e4a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6859      	ldr	r1, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4b38      	ldr	r3, [pc, #224]	; (8005f40 <HAL_SAI_Init+0x2f4>)
 8005e60:	400b      	ands	r3, r1
 8005e62:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6859      	ldr	r1, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6899      	ldr	r1, [r3, #8]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	4b2d      	ldr	r3, [pc, #180]	; (8005f44 <HAL_SAI_Init+0x2f8>)
 8005e8e:	400b      	ands	r3, r1
 8005e90:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6899      	ldr	r1, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005ea2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005ea8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005eae:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb4:	3b01      	subs	r3, #1
 8005eb6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005eb8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68d9      	ldr	r1, [r3, #12]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005ed0:	400b      	ands	r3, r1
 8005ed2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68d9      	ldr	r1, [r3, #12]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee8:	041b      	lsls	r3, r3, #16
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3720      	adds	r7, #32
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40015804 	.word	0x40015804
 8005f24:	40015824 	.word	0x40015824
 8005f28:	40015800 	.word	0x40015800
 8005f2c:	40015c00 	.word	0x40015c00
 8005f30:	40015c04 	.word	0x40015c04
 8005f34:	40015c24 	.word	0x40015c24
 8005f38:	cccccccd 	.word	0xcccccccd
 8005f3c:	ff05c010 	.word	0xff05c010
 8005f40:	ffff1ff0 	.word	0xffff1ff0
 8005f44:	fff88000 	.word	0xfff88000

08005f48 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005f50:	4b17      	ldr	r3, [pc, #92]	; (8005fb0 <SAI_Disable+0x68>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <SAI_Disable+0x6c>)
 8005f56:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5a:	0b1b      	lsrs	r3, r3, #12
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f72:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	1e5a      	subs	r2, r3, #1
 8005f78:	60fa      	str	r2, [r7, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	72fb      	strb	r3, [r7, #11]
      break;
 8005f92:	e006      	b.n	8005fa2 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1e8      	bne.n	8005f74 <SAI_Disable+0x2c>

  return status;
 8005fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	20000000 	.word	0x20000000
 8005fb4:	95cbec1b 	.word	0x95cbec1b

08005fb8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e022      	b.n	8006010 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d105      	bne.n	8005fe2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fb fb0f 	bl	8001600 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f814 	bl	8006018 <HAL_SD_InitCard>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e00a      	b.n	8006010 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006018:	b5b0      	push	{r4, r5, r7, lr}
 800601a:	b08e      	sub	sp, #56	; 0x38
 800601c:	af04      	add	r7, sp, #16
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006020:	2300      	movs	r3, #0
 8006022:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006024:	2300      	movs	r3, #0
 8006026:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006028:	2300      	movs	r3, #0
 800602a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006030:	2300      	movs	r3, #0
 8006032:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006034:	2376      	movs	r3, #118	; 0x76
 8006036:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681d      	ldr	r5, [r3, #0]
 800603c:	466c      	mov	r4, sp
 800603e:	f107 0314 	add.w	r3, r7, #20
 8006042:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006046:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800604a:	f107 0308 	add.w	r3, r7, #8
 800604e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006050:	4628      	mov	r0, r5
 8006052:	f001 ff45 	bl	8007ee0 <SDMMC_Init>
 8006056:	4603      	mov	r3, r0
 8006058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800605c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e059      	b.n	800611c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006076:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4618      	mov	r0, r3
 800607e:	f001 ff79 	bl	8007f74 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006090:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006092:	2002      	movs	r0, #2
 8006094:	f7fc fa3e 	bl	8002514 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fff3 	bl	8007084 <SD_PowerON>
 800609e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060a0:	6a3b      	ldr	r3, [r7, #32]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00b      	beq.n	80060be <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	431a      	orrs	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e02e      	b.n	800611c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 ff12 	bl	8006ee8 <SD_InitCard>
 80060c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e01b      	b.n	800611c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 ffd3 	bl	8008098 <SDMMC_CmdBlockLength>
 80060f2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00f      	beq.n	800611a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a09      	ldr	r2, [pc, #36]	; (8006124 <HAL_SD_InitCard+0x10c>)
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3728      	adds	r7, #40	; 0x28
 8006120:	46bd      	mov	sp, r7
 8006122:	bdb0      	pop	{r4, r5, r7, pc}
 8006124:	004005ff 	.word	0x004005ff

08006128 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b08c      	sub	sp, #48	; 0x30
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d107      	bne.n	8006150 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006144:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e0c3      	b.n	80062d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	f040 80bc 	bne.w	80062d6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	441a      	add	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616e:	429a      	cmp	r2, r3
 8006170:	d907      	bls.n	8006182 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e0aa      	b.n	80062d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2203      	movs	r2, #3
 8006186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2200      	movs	r2, #0
 8006190:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80061a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	4a4e      	ldr	r2, [pc, #312]	; (80062e0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80061a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	4a4d      	ldr	r2, [pc, #308]	; (80062e4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80061b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	2200      	movs	r2, #0
 80061b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	2200      	movs	r2, #0
 80061c0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	689a      	ldr	r2, [r3, #8]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	3380      	adds	r3, #128	; 0x80
 80061e8:	4619      	mov	r1, r3
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	025b      	lsls	r3, r3, #9
 80061f0:	089b      	lsrs	r3, r3, #2
 80061f2:	f7fd fa7d 	bl	80036f0 <HAL_DMA_Start_IT>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d017      	beq.n	800622c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800620a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a35      	ldr	r2, [pc, #212]	; (80062e8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8006212:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e055      	b.n	80062d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f042 0208 	orr.w	r2, r2, #8
 800623a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006240:	2b01      	cmp	r3, #1
 8006242:	d002      	beq.n	800624a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8006244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006246:	025b      	lsls	r3, r3, #9
 8006248:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800624a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800624e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	025b      	lsls	r3, r3, #9
 8006254:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006256:	2390      	movs	r3, #144	; 0x90
 8006258:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800625a:	2302      	movs	r3, #2
 800625c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800625e:	2300      	movs	r3, #0
 8006260:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006262:	2301      	movs	r3, #1
 8006264:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f107 0210 	add.w	r2, r7, #16
 800626e:	4611      	mov	r1, r2
 8006270:	4618      	mov	r0, r3
 8006272:	f001 fee5 	bl	8008040 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d90a      	bls.n	8006292 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2282      	movs	r2, #130	; 0x82
 8006280:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006288:	4618      	mov	r0, r3
 800628a:	f001 ff49 	bl	8008120 <SDMMC_CmdReadMultiBlock>
 800628e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006290:	e009      	b.n	80062a6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2281      	movs	r2, #129	; 0x81
 8006296:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 ff1c 	bl	80080dc <SDMMC_CmdReadSingleBlock>
 80062a4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80062a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d012      	beq.n	80062d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a0d      	ldr	r2, [pc, #52]	; (80062e8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80062b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	431a      	orrs	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e002      	b.n	80062d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	e000      	b.n	80062d8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80062d6:	2302      	movs	r3, #2
  }
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3730      	adds	r7, #48	; 0x30
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	08006cf7 	.word	0x08006cf7
 80062e4:	08006d69 	.word	0x08006d69
 80062e8:	004005ff 	.word	0x004005ff

080062ec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08c      	sub	sp, #48	; 0x30
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
 80062f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d107      	bne.n	8006314 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e0c6      	b.n	80064a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b01      	cmp	r3, #1
 800631e:	f040 80bf 	bne.w	80064a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	441a      	add	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006332:	429a      	cmp	r2, r3
 8006334:	d907      	bls.n	8006346 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e0ad      	b.n	80064a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2203      	movs	r2, #3
 800634a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2200      	movs	r2, #0
 8006354:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 021a 	orr.w	r2, r2, #26
 8006364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636a:	4a50      	ldr	r2, [pc, #320]	; (80064ac <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800636c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006372:	4a4f      	ldr	r2, [pc, #316]	; (80064b0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006374:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	2200      	movs	r2, #0
 800637c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	2b01      	cmp	r3, #1
 8006384:	d002      	beq.n	800638c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	025b      	lsls	r3, r3, #9
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d90a      	bls.n	80063a8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	22a0      	movs	r2, #160	; 0xa0
 8006396:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800639e:	4618      	mov	r0, r3
 80063a0:	f001 ff02 	bl	80081a8 <SDMMC_CmdWriteMultiBlock>
 80063a4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80063a6:	e009      	b.n	80063bc <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2290      	movs	r2, #144	; 0x90
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 fed5 	bl	8008164 <SDMMC_CmdWriteSingleBlock>
 80063ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d012      	beq.n	80063e8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a3b      	ldr	r2, [pc, #236]	; (80064b4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80063c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	431a      	orrs	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	e05c      	b.n	80064a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0208 	orr.w	r2, r2, #8
 80063f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063fc:	2240      	movs	r2, #64	; 0x40
 80063fe:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	430a      	orrs	r2, r1
 800641a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	3380      	adds	r3, #128	; 0x80
 8006428:	461a      	mov	r2, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	025b      	lsls	r3, r3, #9
 800642e:	089b      	lsrs	r3, r3, #2
 8006430:	f7fd f95e 	bl	80036f0 <HAL_DMA_Start_IT>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d01a      	beq.n	8006470 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 021a 	bic.w	r2, r2, #26
 8006448:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a19      	ldr	r2, [pc, #100]	; (80064b4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006450:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006456:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	2200      	movs	r2, #0
 800646a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e018      	b.n	80064a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006474:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	025b      	lsls	r3, r3, #9
 800647a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800647c:	2390      	movs	r3, #144	; 0x90
 800647e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006484:	2300      	movs	r3, #0
 8006486:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8006488:	2301      	movs	r3, #1
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f107 0210 	add.w	r2, r7, #16
 8006494:	4611      	mov	r1, r2
 8006496:	4618      	mov	r0, r3
 8006498:	f001 fdd2 	bl	8008040 <SDMMC_ConfigData>

      return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3730      	adds	r7, #48	; 0x30
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	08006ccd 	.word	0x08006ccd
 80064b0:	08006d69 	.word	0x08006d69
 80064b4:	004005ff 	.word	0x004005ff

080064b8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d008      	beq.n	80064e6 <HAL_SD_IRQHandler+0x2e>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 0308 	and.w	r3, r3, #8
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 ffef 	bl	80074c2 <SD_Read_IT>
 80064e4:	e15a      	b.n	800679c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 808d 	beq.w	8006610 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064fe:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	4b9a      	ldr	r3, [pc, #616]	; (8006774 <HAL_SD_IRQHandler+0x2bc>)
 800650c:	400b      	ands	r3, r1
 800650e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f022 0201 	bic.w	r2, r2, #1
 800651e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d039      	beq.n	800659e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d104      	bne.n	800653e <HAL_SD_IRQHandler+0x86>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f003 0320 	and.w	r3, r3, #32
 800653a:	2b00      	cmp	r3, #0
 800653c:	d011      	beq.n	8006562 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f001 fe52 	bl	80081ec <SDMMC_CmdStopTransfer>
 8006548:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d008      	beq.n	8006562 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f921 	bl	80067a4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f240 523a 	movw	r2, #1338	; 0x53a
 800656a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f003 0301 	and.w	r3, r3, #1
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_SD_IRQHandler+0xd6>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f002 fac2 	bl	8008b18 <HAL_SD_RxCpltCallback>
 8006594:	e102      	b.n	800679c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f002 fab4 	bl	8008b04 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800659c:	e0fe      	b.n	800679c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80f9 	beq.w	800679c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f003 0320 	and.w	r3, r3, #32
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d011      	beq.n	80065d8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f001 fe17 	bl	80081ec <SDMMC_CmdStopTransfer>
 80065be:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	431a      	orrs	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f8e6 	bl	80067a4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 80dc 	bne.w	800679c <HAL_SD_IRQHandler+0x2e4>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f040 80d6 	bne.w	800679c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0208 	bic.w	r2, r2, #8
 80065fe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f002 fa7b 	bl	8008b04 <HAL_SD_TxCpltCallback>
}
 800660e:	e0c5      	b.n	800679c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d008      	beq.n	8006630 <HAL_SD_IRQHandler+0x178>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f003 0308 	and.w	r3, r3, #8
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 ff9b 	bl	8007564 <SD_Write_IT>
 800662e:	e0b5      	b.n	800679c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006636:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 80ae 	beq.w	800679c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d005      	beq.n	800665a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006652:	f043 0202 	orr.w	r2, r3, #2
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	f003 0308 	and.w	r3, r3, #8
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666c:	f043 0208 	orr.w	r2, r3, #8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d005      	beq.n	800668e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006686:	f043 0220 	orr.w	r2, r3, #32
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006694:	f003 0310 	and.w	r3, r3, #16
 8006698:	2b00      	cmp	r3, #0
 800669a:	d005      	beq.n	80066a8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a0:	f043 0210 	orr.w	r2, r3, #16
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80066b0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80066c0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f001 fd90 	bl	80081ec <SDMMC_CmdStopTransfer>
 80066cc:	4602      	mov	r2, r0
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f003 0308 	and.w	r3, r3, #8
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f857 	bl	80067a4 <HAL_SD_ErrorCallback>
}
 80066f6:	e051      	b.n	800679c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d04c      	beq.n	800679c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <HAL_SD_IRQHandler+0x25e>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d011      	beq.n	800673a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671a:	4a17      	ldr	r2, [pc, #92]	; (8006778 <HAL_SD_IRQHandler+0x2c0>)
 800671c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006722:	4618      	mov	r0, r3
 8006724:	f7fd f844 	bl	80037b0 <HAL_DMA_Abort_IT>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d036      	beq.n	800679c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fb6a 	bl	8006e0c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006738:	e030      	b.n	800679c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d104      	bne.n	800674e <HAL_SD_IRQHandler+0x296>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d018      	beq.n	8006780 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006752:	4a0a      	ldr	r2, [pc, #40]	; (800677c <HAL_SD_IRQHandler+0x2c4>)
 8006754:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	4618      	mov	r0, r3
 800675c:	f7fd f828 	bl	80037b0 <HAL_DMA_Abort_IT>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01a      	beq.n	800679c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fb85 	bl	8006e7a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006770:	e014      	b.n	800679c <HAL_SD_IRQHandler+0x2e4>
 8006772:	bf00      	nop
 8006774:	ffff3ec5 	.word	0xffff3ec5
 8006778:	08006e0d 	.word	0x08006e0d
 800677c:	08006e7b 	.word	0x08006e7b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f002 f9ab 	bl	8008af0 <HAL_SD_AbortCallback>
}
 800679a:	e7ff      	b.n	800679c <HAL_SD_IRQHandler+0x2e4>
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80067ac:	bf00      	nop
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067c6:	0f9b      	lsrs	r3, r3, #30
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d2:	0e9b      	lsrs	r3, r3, #26
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e4:	0e1b      	lsrs	r3, r3, #24
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 0303 	and.w	r3, r3, #3
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f6:	0c1b      	lsrs	r3, r3, #16
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006802:	0a1b      	lsrs	r3, r3, #8
 8006804:	b2da      	uxtb	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800680e:	b2da      	uxtb	r2, r3
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006818:	0d1b      	lsrs	r3, r3, #20
 800681a:	b29a      	uxth	r2, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006824:	0c1b      	lsrs	r3, r3, #16
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	b2da      	uxtb	r2, r3
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006836:	0bdb      	lsrs	r3, r3, #15
 8006838:	b2db      	uxtb	r3, r3
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	b2da      	uxtb	r2, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006848:	0b9b      	lsrs	r3, r3, #14
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	b2da      	uxtb	r2, r3
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800685a:	0b5b      	lsrs	r3, r3, #13
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	b2da      	uxtb	r2, r3
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800686c:	0b1b      	lsrs	r3, r3, #12
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f003 0301 	and.w	r3, r3, #1
 8006874:	b2da      	uxtb	r2, r3
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2200      	movs	r2, #0
 800687e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006884:	2b00      	cmp	r3, #0
 8006886:	d163      	bne.n	8006950 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800688c:	009a      	lsls	r2, r3, #2
 800688e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006892:	4013      	ands	r3, r2
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006898:	0f92      	lsrs	r2, r2, #30
 800689a:	431a      	orrs	r2, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068a4:	0edb      	lsrs	r3, r3, #27
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068b6:	0e1b      	lsrs	r3, r3, #24
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f003 0307 	and.w	r3, r3, #7
 80068be:	b2da      	uxtb	r2, r3
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c8:	0d5b      	lsrs	r3, r3, #21
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068da:	0c9b      	lsrs	r3, r3, #18
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f003 0307 	and.w	r3, r3, #7
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ec:	0bdb      	lsrs	r3, r3, #15
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	f003 0307 	and.w	r3, r3, #7
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	7e1b      	ldrb	r3, [r3, #24]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	3302      	adds	r3, #2
 8006910:	2201      	movs	r2, #1
 8006912:	fa02 f303 	lsl.w	r3, r2, r3
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800691a:	fb03 f202 	mul.w	r2, r3, r2
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	7a1b      	ldrb	r3, [r3, #8]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f003 030f 	and.w	r3, r3, #15
 800692c:	2201      	movs	r2, #1
 800692e:	409a      	lsls	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800693c:	0a52      	lsrs	r2, r2, #9
 800693e:	fb03 f202 	mul.w	r2, r3, r2
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800694c:	661a      	str	r2, [r3, #96]	; 0x60
 800694e:	e031      	b.n	80069b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006954:	2b01      	cmp	r3, #1
 8006956:	d11d      	bne.n	8006994 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800695c:	041b      	lsls	r3, r3, #16
 800695e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006966:	0c1b      	lsrs	r3, r3, #16
 8006968:	431a      	orrs	r2, r3
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	3301      	adds	r3, #1
 8006974:	029a      	lsls	r2, r3, #10
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006988:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	661a      	str	r2, [r3, #96]	; 0x60
 8006992:	e00f      	b.n	80069b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a58      	ldr	r2, [pc, #352]	; (8006afc <HAL_SD_GetCardCSD+0x344>)
 800699a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e09d      	b.n	8006af0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b8:	0b9b      	lsrs	r3, r3, #14
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	f003 0301 	and.w	r3, r3, #1
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ca:	09db      	lsrs	r3, r3, #7
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ec:	0fdb      	lsrs	r3, r3, #31
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f8:	0f5b      	lsrs	r3, r3, #29
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	f003 0303 	and.w	r3, r3, #3
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	0e9b      	lsrs	r3, r3, #26
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	f003 0307 	and.w	r3, r3, #7
 8006a12:	b2da      	uxtb	r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1c:	0d9b      	lsrs	r3, r3, #22
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	f003 030f 	and.w	r3, r3, #15
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2e:	0d5b      	lsrs	r3, r3, #21
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	b2da      	uxtb	r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a4a:	0c1b      	lsrs	r3, r3, #16
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	b2da      	uxtb	r2, r3
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5e:	0bdb      	lsrs	r3, r3, #15
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a72:	0b9b      	lsrs	r3, r3, #14
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a86:	0b5b      	lsrs	r3, r3, #13
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9a:	0b1b      	lsrs	r3, r3, #12
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aae:	0a9b      	lsrs	r3, r3, #10
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac2:	0a1b      	lsrs	r3, r3, #8
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	f003 0303 	and.w	r3, r3, #3
 8006aca:	b2da      	uxtb	r2, r3
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad6:	085b      	lsrs	r3, r3, #1
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	004005ff 	.word	0x004005ff

08006b00 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006b58:	b5b0      	push	{r4, r5, r7, lr}
 8006b5a:	b08e      	sub	sp, #56	; 0x38
 8006b5c:	af04      	add	r7, sp, #16
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006b62:	2300      	movs	r3, #0
 8006b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b74:	2b03      	cmp	r3, #3
 8006b76:	d02e      	beq.n	8006bd6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7e:	d106      	bne.n	8006b8e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b8c:	e029      	b.n	8006be2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b94:	d10a      	bne.n	8006bac <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fb2a 	bl	80071f0 <SD_WideBus_Enable>
 8006b9c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	639a      	str	r2, [r3, #56]	; 0x38
 8006baa:	e01a      	b.n	8006be2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fb67 	bl	8007286 <SD_WideBus_Disable>
 8006bb8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bbe:	6a3b      	ldr	r3, [r7, #32]
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	639a      	str	r2, [r3, #56]	; 0x38
 8006bc6:	e00c      	b.n	8006be2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	639a      	str	r2, [r3, #56]	; 0x38
 8006bd4:	e005      	b.n	8006be2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bda:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00b      	beq.n	8006c02 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a26      	ldr	r2, [pc, #152]	; (8006c88 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c00:	e01f      	b.n	8006c42 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	695b      	ldr	r3, [r3, #20]
 8006c1c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681d      	ldr	r5, [r3, #0]
 8006c28:	466c      	mov	r4, sp
 8006c2a:	f107 0314 	add.w	r3, r7, #20
 8006c2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006c32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c36:	f107 0308 	add.w	r3, r7, #8
 8006c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f001 f94f 	bl	8007ee0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 fa24 	bl	8008098 <SDMMC_CmdBlockLength>
 8006c50:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00c      	beq.n	8006c72 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a0a      	ldr	r2, [pc, #40]	; (8006c88 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006c5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3728      	adds	r7, #40	; 0x28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bdb0      	pop	{r4, r5, r7, pc}
 8006c86:	bf00      	nop
 8006c88:	004005ff 	.word	0x004005ff

08006c8c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006c98:	f107 030c 	add.w	r3, r7, #12
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fa7e 	bl	80071a0 <SD_SendStatus>
 8006ca4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	431a      	orrs	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	0a5b      	lsrs	r3, r3, #9
 8006cbc:	f003 030f 	and.w	r3, r3, #15
 8006cc0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006cc2:	693b      	ldr	r3, [r7, #16]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006cea:	bf00      	nop
 8006cec:	3714      	adds	r7, #20
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d02:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d08:	2b82      	cmp	r3, #130	; 0x82
 8006d0a:	d111      	bne.n	8006d30 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f001 fa6b 	bl	80081ec <SDMMC_CmdStopTransfer>
 8006d16:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d008      	beq.n	8006d30 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	431a      	orrs	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff fd3a 	bl	80067a4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0208 	bic.w	r2, r2, #8
 8006d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d48:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f001 fedd 	bl	8008b18 <HAL_SD_RxCpltCallback>
#endif
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
	...

08006d68 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d74:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fc fec6 	bl	8003b08 <HAL_DMA_GetError>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d03e      	beq.n	8006e00 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d88:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d90:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d002      	beq.n	8006d9e <SD_DMAError+0x36>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d12d      	bne.n	8006dfa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a19      	ldr	r2, [pc, #100]	; (8006e08 <SD_DMAError+0xa0>)
 8006da4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006db4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006dc2:	6978      	ldr	r0, [r7, #20]
 8006dc4:	f7ff ff62 	bl	8006c8c <HAL_SD_GetCardState>
 8006dc8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	2b06      	cmp	r3, #6
 8006dce:	d002      	beq.n	8006dd6 <SD_DMAError+0x6e>
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	2b05      	cmp	r3, #5
 8006dd4:	d10a      	bne.n	8006dec <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f001 fa06 	bl	80081ec <SDMMC_CmdStopTransfer>
 8006de0:	4602      	mov	r2, r0
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de6:	431a      	orrs	r2, r3
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	2200      	movs	r2, #0
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006dfa:	6978      	ldr	r0, [r7, #20]
 8006dfc:	f7ff fcd2 	bl	80067a4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8006e00:	bf00      	nop
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	004005ff 	.word	0x004005ff

08006e0c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7ff ff31 	bl	8006c8c <HAL_SD_GetCardState>
 8006e2a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b06      	cmp	r3, #6
 8006e3e:	d002      	beq.n	8006e46 <SD_DMATxAbort+0x3a>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b05      	cmp	r3, #5
 8006e44:	d10a      	bne.n	8006e5c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f001 f9ce 	bl	80081ec <SDMMC_CmdStopTransfer>
 8006e50:	4602      	mov	r2, r0
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	431a      	orrs	r2, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d103      	bne.n	8006e6c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f001 fe43 	bl	8008af0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006e6a:	e002      	b.n	8006e72 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f7ff fc99 	bl	80067a4 <HAL_SD_ErrorCallback>
}
 8006e72:	bf00      	nop
 8006e74:	3710      	adds	r7, #16
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b084      	sub	sp, #16
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e86:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006e90:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f7ff fefa 	bl	8006c8c <HAL_SD_GetCardState>
 8006e98:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b06      	cmp	r3, #6
 8006eac:	d002      	beq.n	8006eb4 <SD_DMARxAbort+0x3a>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b05      	cmp	r3, #5
 8006eb2:	d10a      	bne.n	8006eca <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f001 f997 	bl	80081ec <SDMMC_CmdStopTransfer>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f001 fe0c 	bl	8008af0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006ed8:	e002      	b.n	8006ee0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff fc62 	bl	80067a4 <HAL_SD_ErrorCallback>
}
 8006ee0:	bf00      	nop
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006ee8:	b5b0      	push	{r4, r5, r7, lr}
 8006eea:	b094      	sub	sp, #80	; 0x50
 8006eec:	af04      	add	r7, sp, #16
 8006eee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f001 f849 	bl	8007f90 <SDMMC_GetPowerState>
 8006efe:	4603      	mov	r3, r0
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d102      	bne.n	8006f0a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006f08:	e0b8      	b.n	800707c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d02f      	beq.n	8006f72 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f001 fa73 	bl	8008402 <SDMMC_CmdSendCID>
 8006f1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <SD_InitCard+0x40>
    {
      return errorstate;
 8006f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f26:	e0a9      	b.n	800707c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f001 f873 	bl	800801a <SDMMC_GetResponse>
 8006f34:	4602      	mov	r2, r0
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2104      	movs	r1, #4
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 f86a 	bl	800801a <SDMMC_GetResponse>
 8006f46:	4602      	mov	r2, r0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2108      	movs	r1, #8
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 f861 	bl	800801a <SDMMC_GetResponse>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	210c      	movs	r1, #12
 8006f64:	4618      	mov	r0, r3
 8006f66:	f001 f858 	bl	800801a <SDMMC_GetResponse>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d00d      	beq.n	8006f96 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f107 020e 	add.w	r2, r7, #14
 8006f82:	4611      	mov	r1, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 fa79 	bl	800847c <SDMMC_CmdSetRelAdd>
 8006f8a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <SD_InitCard+0xae>
    {
      return errorstate;
 8006f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f94:	e072      	b.n	800707c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d036      	beq.n	800700c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f9e:	89fb      	ldrh	r3, [r7, #14]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fae:	041b      	lsls	r3, r3, #16
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	f001 fa43 	bl	800843e <SDMMC_CmdSendCSD>
 8006fb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc2:	e05b      	b.n	800707c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 f825 	bl	800801a <SDMMC_GetResponse>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2104      	movs	r1, #4
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f001 f81c 	bl	800801a <SDMMC_GetResponse>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2108      	movs	r1, #8
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 f813 	bl	800801a <SDMMC_GetResponse>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	210c      	movs	r1, #12
 8007000:	4618      	mov	r0, r3
 8007002:	f001 f80a 	bl	800801a <SDMMC_GetResponse>
 8007006:	4602      	mov	r2, r0
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2104      	movs	r1, #4
 8007012:	4618      	mov	r0, r3
 8007014:	f001 f801 	bl	800801a <SDMMC_GetResponse>
 8007018:	4603      	mov	r3, r0
 800701a:	0d1a      	lsrs	r2, r3, #20
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007020:	f107 0310 	add.w	r3, r7, #16
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff fbc6 	bl	80067b8 <HAL_SD_GetCardCSD>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d002      	beq.n	8007038 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007032:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007036:	e021      	b.n	800707c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6819      	ldr	r1, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007040:	041b      	lsls	r3, r3, #16
 8007042:	2200      	movs	r2, #0
 8007044:	461c      	mov	r4, r3
 8007046:	4615      	mov	r5, r2
 8007048:	4622      	mov	r2, r4
 800704a:	462b      	mov	r3, r5
 800704c:	4608      	mov	r0, r1
 800704e:	f001 f8ef 	bl	8008230 <SDMMC_CmdSelDesel>
 8007052:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <SD_InitCard+0x176>
  {
    return errorstate;
 800705a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705c:	e00e      	b.n	800707c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681d      	ldr	r5, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	466c      	mov	r4, sp
 8007066:	f103 0210 	add.w	r2, r3, #16
 800706a:	ca07      	ldmia	r2, {r0, r1, r2}
 800706c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007070:	3304      	adds	r3, #4
 8007072:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007074:	4628      	mov	r0, r5
 8007076:	f000 ff33 	bl	8007ee0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3740      	adds	r7, #64	; 0x40
 8007080:	46bd      	mov	sp, r7
 8007082:	bdb0      	pop	{r4, r5, r7, pc}

08007084 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800708c:	2300      	movs	r3, #0
 800708e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	617b      	str	r3, [r7, #20]
 8007094:	2300      	movs	r3, #0
 8007096:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f001 f8ea 	bl	8008276 <SDMMC_CmdGoIdleState>
 80070a2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <SD_PowerON+0x2a>
  {
    return errorstate;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	e072      	b.n	8007194 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 f8fd 	bl	80082b2 <SDMMC_CmdOperCond>
 80070b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00d      	beq.n	80070dc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f001 f8d3 	bl	8008276 <SDMMC_CmdGoIdleState>
 80070d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d004      	beq.n	80070e2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	e05b      	b.n	8007194 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d137      	bne.n	800715a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2100      	movs	r1, #0
 80070f0:	4618      	mov	r0, r3
 80070f2:	f001 f8fd 	bl	80082f0 <SDMMC_CmdAppCommand>
 80070f6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d02d      	beq.n	800715a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80070fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007102:	e047      	b.n	8007194 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2100      	movs	r1, #0
 800710a:	4618      	mov	r0, r3
 800710c:	f001 f8f0 	bl	80082f0 <SDMMC_CmdAppCommand>
 8007110:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d001      	beq.n	800711c <SD_PowerON+0x98>
    {
      return errorstate;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	e03b      	b.n	8007194 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	491e      	ldr	r1, [pc, #120]	; (800719c <SD_PowerON+0x118>)
 8007122:	4618      	mov	r0, r3
 8007124:	f001 f906 	bl	8008334 <SDMMC_CmdAppOperCommand>
 8007128:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007130:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007134:	e02e      	b.n	8007194 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2100      	movs	r1, #0
 800713c:	4618      	mov	r0, r3
 800713e:	f000 ff6c 	bl	800801a <SDMMC_GetResponse>
 8007142:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	0fdb      	lsrs	r3, r3, #31
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <SD_PowerON+0xcc>
 800714c:	2301      	movs	r3, #1
 800714e:	e000      	b.n	8007152 <SD_PowerON+0xce>
 8007150:	2300      	movs	r3, #0
 8007152:	613b      	str	r3, [r7, #16]

    count++;
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	3301      	adds	r3, #1
 8007158:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007160:	4293      	cmp	r3, r2
 8007162:	d802      	bhi.n	800716a <SD_PowerON+0xe6>
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0cc      	beq.n	8007104 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007170:	4293      	cmp	r3, r2
 8007172:	d902      	bls.n	800717a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007178:	e00c      	b.n	8007194 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d003      	beq.n	800718c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	645a      	str	r2, [r3, #68]	; 0x44
 800718a:	e002      	b.n	8007192 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	c1100000 	.word	0xc1100000

080071a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d102      	bne.n	80071b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80071b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071b4:	e018      	b.n	80071e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071be:	041b      	lsls	r3, r3, #16
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f001 f97b 	bl	80084be <SDMMC_CmdSendStatus>
 80071c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d001      	beq.n	80071d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	e009      	b.n	80071e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2100      	movs	r1, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f000 ff1d 	bl	800801a <SDMMC_GetResponse>
 80071e0:	4602      	mov	r2, r0
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	2300      	movs	r3, #0
 80071fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f000 ff07 	bl	800801a <SDMMC_GetResponse>
 800720c:	4603      	mov	r3, r0
 800720e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007216:	d102      	bne.n	800721e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800721c:	e02f      	b.n	800727e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800721e:	f107 030c 	add.w	r3, r7, #12
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f879 	bl	800731c <SD_FindSCR>
 800722a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	e023      	b.n	800727e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d01c      	beq.n	800727a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007248:	041b      	lsls	r3, r3, #16
 800724a:	4619      	mov	r1, r3
 800724c:	4610      	mov	r0, r2
 800724e:	f001 f84f 	bl	80082f0 <SDMMC_CmdAppCommand>
 8007252:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	e00f      	b.n	800727e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2102      	movs	r1, #2
 8007264:	4618      	mov	r0, r3
 8007266:	f001 f889 	bl	800837c <SDMMC_CmdBusWidth>
 800726a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	e003      	b.n	800727e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007276:	2300      	movs	r3, #0
 8007278:	e001      	b.n	800727e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800727a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b086      	sub	sp, #24
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	2300      	movs	r3, #0
 8007294:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2100      	movs	r1, #0
 800729c:	4618      	mov	r0, r3
 800729e:	f000 febc 	bl	800801a <SDMMC_GetResponse>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072ac:	d102      	bne.n	80072b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072b2:	e02f      	b.n	8007314 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072b4:	f107 030c 	add.w	r3, r7, #12
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 f82e 	bl	800731c <SD_FindSCR>
 80072c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	e023      	b.n	8007314 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d01c      	beq.n	8007310 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072de:	041b      	lsls	r3, r3, #16
 80072e0:	4619      	mov	r1, r3
 80072e2:	4610      	mov	r0, r2
 80072e4:	f001 f804 	bl	80082f0 <SDMMC_CmdAppCommand>
 80072e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	e00f      	b.n	8007314 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2100      	movs	r1, #0
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 f83e 	bl	800837c <SDMMC_CmdBusWidth>
 8007300:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	e003      	b.n	8007314 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800730c:	2300      	movs	r3, #0
 800730e:	e001      	b.n	8007314 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007310:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007314:	4618      	mov	r0, r3
 8007316:	3718      	adds	r7, #24
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800731c:	b590      	push	{r4, r7, lr}
 800731e:	b08f      	sub	sp, #60	; 0x3c
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007326:	f7fb f8e9 	bl	80024fc <HAL_GetTick>
 800732a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800732c:	2300      	movs	r3, #0
 800732e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007330:	2300      	movs	r3, #0
 8007332:	60bb      	str	r3, [r7, #8]
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2108      	movs	r1, #8
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fea8 	bl	8008098 <SDMMC_CmdBlockLength>
 8007348:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800734a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007352:	e0b2      	b.n	80074ba <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735c:	041b      	lsls	r3, r3, #16
 800735e:	4619      	mov	r1, r3
 8007360:	4610      	mov	r0, r2
 8007362:	f000 ffc5 	bl	80082f0 <SDMMC_CmdAppCommand>
 8007366:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <SD_FindSCR+0x56>
  {
    return errorstate;
 800736e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007370:	e0a3      	b.n	80074ba <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007376:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007378:	2308      	movs	r3, #8
 800737a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800737c:	2330      	movs	r3, #48	; 0x30
 800737e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007380:	2302      	movs	r3, #2
 8007382:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007384:	2300      	movs	r3, #0
 8007386:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007388:	2301      	movs	r3, #1
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f107 0210 	add.w	r2, r7, #16
 8007394:	4611      	mov	r1, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fe52 	bl	8008040 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 f80d 	bl	80083c0 <SDMMC_CmdSendSCR>
 80073a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d02a      	beq.n	8007404 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80073ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b0:	e083      	b.n	80074ba <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00f      	beq.n	80073e0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	f107 0208 	add.w	r2, r7, #8
 80073cc:	18d4      	adds	r4, r2, r3
 80073ce:	4608      	mov	r0, r1
 80073d0:	f000 fdb2 	bl	8007f38 <SDMMC_ReadFIFO>
 80073d4:	4603      	mov	r3, r0
 80073d6:	6023      	str	r3, [r4, #0]
      index++;
 80073d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073da:	3301      	adds	r3, #1
 80073dc:	637b      	str	r3, [r7, #52]	; 0x34
 80073de:	e006      	b.n	80073ee <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d012      	beq.n	8007414 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80073ee:	f7fb f885 	bl	80024fc <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073fc:	d102      	bne.n	8007404 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80073fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007402:	e05a      	b.n	80074ba <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0cf      	beq.n	80073b2 <SD_FindSCR+0x96>
 8007412:	e000      	b.n	8007416 <SD_FindSCR+0xfa>
      break;
 8007414:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2208      	movs	r2, #8
 800742a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800742c:	2308      	movs	r3, #8
 800742e:	e044      	b.n	80074ba <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b00      	cmp	r3, #0
 800743c:	d005      	beq.n	800744a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	2202      	movs	r2, #2
 8007444:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007446:	2302      	movs	r3, #2
 8007448:	e037      	b.n	80074ba <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007450:	f003 0320 	and.w	r3, r3, #32
 8007454:	2b00      	cmp	r3, #0
 8007456:	d005      	beq.n	8007464 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2220      	movs	r2, #32
 800745e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007460:	2320      	movs	r3, #32
 8007462:	e02a      	b.n	80074ba <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f240 523a 	movw	r2, #1338	; 0x53a
 800746c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	061a      	lsls	r2, r3, #24
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	021b      	lsls	r3, r3, #8
 8007476:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800747a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007484:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	0e1b      	lsrs	r3, r3, #24
 800748a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	601a      	str	r2, [r3, #0]
    scr++;
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	3304      	adds	r3, #4
 8007494:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	061a      	lsls	r2, r3, #24
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	021b      	lsls	r3, r3, #8
 800749e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074a2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	0a1b      	lsrs	r3, r3, #8
 80074a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074ac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	0e1b      	lsrs	r3, r3, #24
 80074b2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80074b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	373c      	adds	r7, #60	; 0x3c
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd90      	pop	{r4, r7, pc}

080074c2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b086      	sub	sp, #24
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ce:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d03f      	beq.n	800755c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	e033      	b.n	800754a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fd26 	bl	8007f38 <SDMMC_ReadFIFO>
 80074ec:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3301      	adds	r3, #1
 80074fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	3b01      	subs	r3, #1
 8007500:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	0a1b      	lsrs	r3, r3, #8
 8007506:	b2da      	uxtb	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3301      	adds	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	3b01      	subs	r3, #1
 8007516:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	0c1b      	lsrs	r3, r3, #16
 800751c:	b2da      	uxtb	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3301      	adds	r3, #1
 8007526:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	3b01      	subs	r3, #1
 800752c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	0e1b      	lsrs	r3, r3, #24
 8007532:	b2da      	uxtb	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	3b01      	subs	r3, #1
 8007542:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	3301      	adds	r3, #1
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b07      	cmp	r3, #7
 800754e:	d9c8      	bls.n	80074e2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	693a      	ldr	r2, [r7, #16]
 800755a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800755c:	bf00      	nop
 800755e:	3718      	adds	r7, #24
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d043      	beq.n	8007606 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800757e:	2300      	movs	r3, #0
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	e037      	b.n	80075f4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	60bb      	str	r3, [r7, #8]
      tmp++;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	3301      	adds	r3, #1
 800758e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	3b01      	subs	r3, #1
 8007594:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	021a      	lsls	r2, r3, #8
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4313      	orrs	r3, r2
 80075a0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3301      	adds	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	041a      	lsls	r2, r3, #16
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3301      	adds	r3, #1
 80075be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	061a      	lsls	r2, r3, #24
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	3301      	adds	r3, #1
 80075d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	3b01      	subs	r3, #1
 80075dc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f107 0208 	add.w	r2, r7, #8
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fcb2 	bl	8007f52 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	3301      	adds	r3, #1
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	2b07      	cmp	r3, #7
 80075f8:	d9c4      	bls.n	8007584 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	68fa      	ldr	r2, [r7, #12]
 80075fe:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007606:	bf00      	nop
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e040      	b.n	80076a2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7fa f9fd 	bl	8001a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2224      	movs	r2, #36	; 0x24
 800763a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0201 	bic.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f82d 	bl	80076ac <UART_SetConfig>
 8007652:	4603      	mov	r3, r0
 8007654:	2b01      	cmp	r3, #1
 8007656:	d101      	bne.n	800765c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	e022      	b.n	80076a2 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fa85 	bl	8007b74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	685a      	ldr	r2, [r3, #4]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007678:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007688:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f042 0201 	orr.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fb0c 	bl	8007cb8 <UART_CheckIdleState>
 80076a0:	4603      	mov	r3, r0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b088      	sub	sp, #32
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4ba6      	ldr	r3, [pc, #664]	; (8007970 <UART_SetConfig+0x2c4>)
 80076d8:	4013      	ands	r3, r2
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	6812      	ldr	r2, [r2, #0]
 80076de:	6979      	ldr	r1, [r7, #20]
 80076e0:	430b      	orrs	r3, r1
 80076e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a1b      	ldr	r3, [r3, #32]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	430a      	orrs	r2, r1
 800771c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a94      	ldr	r2, [pc, #592]	; (8007974 <UART_SetConfig+0x2c8>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d120      	bne.n	800776a <UART_SetConfig+0xbe>
 8007728:	4b93      	ldr	r3, [pc, #588]	; (8007978 <UART_SetConfig+0x2cc>)
 800772a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772e:	f003 0303 	and.w	r3, r3, #3
 8007732:	2b03      	cmp	r3, #3
 8007734:	d816      	bhi.n	8007764 <UART_SetConfig+0xb8>
 8007736:	a201      	add	r2, pc, #4	; (adr r2, 800773c <UART_SetConfig+0x90>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	0800774d 	.word	0x0800774d
 8007740:	08007759 	.word	0x08007759
 8007744:	08007753 	.word	0x08007753
 8007748:	0800775f 	.word	0x0800775f
 800774c:	2301      	movs	r3, #1
 800774e:	77fb      	strb	r3, [r7, #31]
 8007750:	e150      	b.n	80079f4 <UART_SetConfig+0x348>
 8007752:	2302      	movs	r3, #2
 8007754:	77fb      	strb	r3, [r7, #31]
 8007756:	e14d      	b.n	80079f4 <UART_SetConfig+0x348>
 8007758:	2304      	movs	r3, #4
 800775a:	77fb      	strb	r3, [r7, #31]
 800775c:	e14a      	b.n	80079f4 <UART_SetConfig+0x348>
 800775e:	2308      	movs	r3, #8
 8007760:	77fb      	strb	r3, [r7, #31]
 8007762:	e147      	b.n	80079f4 <UART_SetConfig+0x348>
 8007764:	2310      	movs	r3, #16
 8007766:	77fb      	strb	r3, [r7, #31]
 8007768:	e144      	b.n	80079f4 <UART_SetConfig+0x348>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a83      	ldr	r2, [pc, #524]	; (800797c <UART_SetConfig+0x2d0>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d132      	bne.n	80077da <UART_SetConfig+0x12e>
 8007774:	4b80      	ldr	r3, [pc, #512]	; (8007978 <UART_SetConfig+0x2cc>)
 8007776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777a:	f003 030c 	and.w	r3, r3, #12
 800777e:	2b0c      	cmp	r3, #12
 8007780:	d828      	bhi.n	80077d4 <UART_SetConfig+0x128>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <UART_SetConfig+0xdc>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077bd 	.word	0x080077bd
 800778c:	080077d5 	.word	0x080077d5
 8007790:	080077d5 	.word	0x080077d5
 8007794:	080077d5 	.word	0x080077d5
 8007798:	080077c9 	.word	0x080077c9
 800779c:	080077d5 	.word	0x080077d5
 80077a0:	080077d5 	.word	0x080077d5
 80077a4:	080077d5 	.word	0x080077d5
 80077a8:	080077c3 	.word	0x080077c3
 80077ac:	080077d5 	.word	0x080077d5
 80077b0:	080077d5 	.word	0x080077d5
 80077b4:	080077d5 	.word	0x080077d5
 80077b8:	080077cf 	.word	0x080077cf
 80077bc:	2300      	movs	r3, #0
 80077be:	77fb      	strb	r3, [r7, #31]
 80077c0:	e118      	b.n	80079f4 <UART_SetConfig+0x348>
 80077c2:	2302      	movs	r3, #2
 80077c4:	77fb      	strb	r3, [r7, #31]
 80077c6:	e115      	b.n	80079f4 <UART_SetConfig+0x348>
 80077c8:	2304      	movs	r3, #4
 80077ca:	77fb      	strb	r3, [r7, #31]
 80077cc:	e112      	b.n	80079f4 <UART_SetConfig+0x348>
 80077ce:	2308      	movs	r3, #8
 80077d0:	77fb      	strb	r3, [r7, #31]
 80077d2:	e10f      	b.n	80079f4 <UART_SetConfig+0x348>
 80077d4:	2310      	movs	r3, #16
 80077d6:	77fb      	strb	r3, [r7, #31]
 80077d8:	e10c      	b.n	80079f4 <UART_SetConfig+0x348>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a68      	ldr	r2, [pc, #416]	; (8007980 <UART_SetConfig+0x2d4>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d120      	bne.n	8007826 <UART_SetConfig+0x17a>
 80077e4:	4b64      	ldr	r3, [pc, #400]	; (8007978 <UART_SetConfig+0x2cc>)
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077ee:	2b30      	cmp	r3, #48	; 0x30
 80077f0:	d013      	beq.n	800781a <UART_SetConfig+0x16e>
 80077f2:	2b30      	cmp	r3, #48	; 0x30
 80077f4:	d814      	bhi.n	8007820 <UART_SetConfig+0x174>
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	d009      	beq.n	800780e <UART_SetConfig+0x162>
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	d810      	bhi.n	8007820 <UART_SetConfig+0x174>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d002      	beq.n	8007808 <UART_SetConfig+0x15c>
 8007802:	2b10      	cmp	r3, #16
 8007804:	d006      	beq.n	8007814 <UART_SetConfig+0x168>
 8007806:	e00b      	b.n	8007820 <UART_SetConfig+0x174>
 8007808:	2300      	movs	r3, #0
 800780a:	77fb      	strb	r3, [r7, #31]
 800780c:	e0f2      	b.n	80079f4 <UART_SetConfig+0x348>
 800780e:	2302      	movs	r3, #2
 8007810:	77fb      	strb	r3, [r7, #31]
 8007812:	e0ef      	b.n	80079f4 <UART_SetConfig+0x348>
 8007814:	2304      	movs	r3, #4
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	e0ec      	b.n	80079f4 <UART_SetConfig+0x348>
 800781a:	2308      	movs	r3, #8
 800781c:	77fb      	strb	r3, [r7, #31]
 800781e:	e0e9      	b.n	80079f4 <UART_SetConfig+0x348>
 8007820:	2310      	movs	r3, #16
 8007822:	77fb      	strb	r3, [r7, #31]
 8007824:	e0e6      	b.n	80079f4 <UART_SetConfig+0x348>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a56      	ldr	r2, [pc, #344]	; (8007984 <UART_SetConfig+0x2d8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d120      	bne.n	8007872 <UART_SetConfig+0x1c6>
 8007830:	4b51      	ldr	r3, [pc, #324]	; (8007978 <UART_SetConfig+0x2cc>)
 8007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007836:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800783a:	2bc0      	cmp	r3, #192	; 0xc0
 800783c:	d013      	beq.n	8007866 <UART_SetConfig+0x1ba>
 800783e:	2bc0      	cmp	r3, #192	; 0xc0
 8007840:	d814      	bhi.n	800786c <UART_SetConfig+0x1c0>
 8007842:	2b80      	cmp	r3, #128	; 0x80
 8007844:	d009      	beq.n	800785a <UART_SetConfig+0x1ae>
 8007846:	2b80      	cmp	r3, #128	; 0x80
 8007848:	d810      	bhi.n	800786c <UART_SetConfig+0x1c0>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <UART_SetConfig+0x1a8>
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d006      	beq.n	8007860 <UART_SetConfig+0x1b4>
 8007852:	e00b      	b.n	800786c <UART_SetConfig+0x1c0>
 8007854:	2300      	movs	r3, #0
 8007856:	77fb      	strb	r3, [r7, #31]
 8007858:	e0cc      	b.n	80079f4 <UART_SetConfig+0x348>
 800785a:	2302      	movs	r3, #2
 800785c:	77fb      	strb	r3, [r7, #31]
 800785e:	e0c9      	b.n	80079f4 <UART_SetConfig+0x348>
 8007860:	2304      	movs	r3, #4
 8007862:	77fb      	strb	r3, [r7, #31]
 8007864:	e0c6      	b.n	80079f4 <UART_SetConfig+0x348>
 8007866:	2308      	movs	r3, #8
 8007868:	77fb      	strb	r3, [r7, #31]
 800786a:	e0c3      	b.n	80079f4 <UART_SetConfig+0x348>
 800786c:	2310      	movs	r3, #16
 800786e:	77fb      	strb	r3, [r7, #31]
 8007870:	e0c0      	b.n	80079f4 <UART_SetConfig+0x348>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a44      	ldr	r2, [pc, #272]	; (8007988 <UART_SetConfig+0x2dc>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d125      	bne.n	80078c8 <UART_SetConfig+0x21c>
 800787c:	4b3e      	ldr	r3, [pc, #248]	; (8007978 <UART_SetConfig+0x2cc>)
 800787e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800788a:	d017      	beq.n	80078bc <UART_SetConfig+0x210>
 800788c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007890:	d817      	bhi.n	80078c2 <UART_SetConfig+0x216>
 8007892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007896:	d00b      	beq.n	80078b0 <UART_SetConfig+0x204>
 8007898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800789c:	d811      	bhi.n	80078c2 <UART_SetConfig+0x216>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d003      	beq.n	80078aa <UART_SetConfig+0x1fe>
 80078a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a6:	d006      	beq.n	80078b6 <UART_SetConfig+0x20a>
 80078a8:	e00b      	b.n	80078c2 <UART_SetConfig+0x216>
 80078aa:	2300      	movs	r3, #0
 80078ac:	77fb      	strb	r3, [r7, #31]
 80078ae:	e0a1      	b.n	80079f4 <UART_SetConfig+0x348>
 80078b0:	2302      	movs	r3, #2
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e09e      	b.n	80079f4 <UART_SetConfig+0x348>
 80078b6:	2304      	movs	r3, #4
 80078b8:	77fb      	strb	r3, [r7, #31]
 80078ba:	e09b      	b.n	80079f4 <UART_SetConfig+0x348>
 80078bc:	2308      	movs	r3, #8
 80078be:	77fb      	strb	r3, [r7, #31]
 80078c0:	e098      	b.n	80079f4 <UART_SetConfig+0x348>
 80078c2:	2310      	movs	r3, #16
 80078c4:	77fb      	strb	r3, [r7, #31]
 80078c6:	e095      	b.n	80079f4 <UART_SetConfig+0x348>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a2f      	ldr	r2, [pc, #188]	; (800798c <UART_SetConfig+0x2e0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d125      	bne.n	800791e <UART_SetConfig+0x272>
 80078d2:	4b29      	ldr	r3, [pc, #164]	; (8007978 <UART_SetConfig+0x2cc>)
 80078d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078e0:	d017      	beq.n	8007912 <UART_SetConfig+0x266>
 80078e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078e6:	d817      	bhi.n	8007918 <UART_SetConfig+0x26c>
 80078e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ec:	d00b      	beq.n	8007906 <UART_SetConfig+0x25a>
 80078ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078f2:	d811      	bhi.n	8007918 <UART_SetConfig+0x26c>
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <UART_SetConfig+0x254>
 80078f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078fc:	d006      	beq.n	800790c <UART_SetConfig+0x260>
 80078fe:	e00b      	b.n	8007918 <UART_SetConfig+0x26c>
 8007900:	2301      	movs	r3, #1
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e076      	b.n	80079f4 <UART_SetConfig+0x348>
 8007906:	2302      	movs	r3, #2
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e073      	b.n	80079f4 <UART_SetConfig+0x348>
 800790c:	2304      	movs	r3, #4
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e070      	b.n	80079f4 <UART_SetConfig+0x348>
 8007912:	2308      	movs	r3, #8
 8007914:	77fb      	strb	r3, [r7, #31]
 8007916:	e06d      	b.n	80079f4 <UART_SetConfig+0x348>
 8007918:	2310      	movs	r3, #16
 800791a:	77fb      	strb	r3, [r7, #31]
 800791c:	e06a      	b.n	80079f4 <UART_SetConfig+0x348>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <UART_SetConfig+0x2e4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d138      	bne.n	800799a <UART_SetConfig+0x2ee>
 8007928:	4b13      	ldr	r3, [pc, #76]	; (8007978 <UART_SetConfig+0x2cc>)
 800792a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007932:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007936:	d017      	beq.n	8007968 <UART_SetConfig+0x2bc>
 8007938:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800793c:	d82a      	bhi.n	8007994 <UART_SetConfig+0x2e8>
 800793e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007942:	d00b      	beq.n	800795c <UART_SetConfig+0x2b0>
 8007944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007948:	d824      	bhi.n	8007994 <UART_SetConfig+0x2e8>
 800794a:	2b00      	cmp	r3, #0
 800794c:	d003      	beq.n	8007956 <UART_SetConfig+0x2aa>
 800794e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007952:	d006      	beq.n	8007962 <UART_SetConfig+0x2b6>
 8007954:	e01e      	b.n	8007994 <UART_SetConfig+0x2e8>
 8007956:	2300      	movs	r3, #0
 8007958:	77fb      	strb	r3, [r7, #31]
 800795a:	e04b      	b.n	80079f4 <UART_SetConfig+0x348>
 800795c:	2302      	movs	r3, #2
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e048      	b.n	80079f4 <UART_SetConfig+0x348>
 8007962:	2304      	movs	r3, #4
 8007964:	77fb      	strb	r3, [r7, #31]
 8007966:	e045      	b.n	80079f4 <UART_SetConfig+0x348>
 8007968:	2308      	movs	r3, #8
 800796a:	77fb      	strb	r3, [r7, #31]
 800796c:	e042      	b.n	80079f4 <UART_SetConfig+0x348>
 800796e:	bf00      	nop
 8007970:	efff69f3 	.word	0xefff69f3
 8007974:	40011000 	.word	0x40011000
 8007978:	40023800 	.word	0x40023800
 800797c:	40004400 	.word	0x40004400
 8007980:	40004800 	.word	0x40004800
 8007984:	40004c00 	.word	0x40004c00
 8007988:	40005000 	.word	0x40005000
 800798c:	40011400 	.word	0x40011400
 8007990:	40007800 	.word	0x40007800
 8007994:	2310      	movs	r3, #16
 8007996:	77fb      	strb	r3, [r7, #31]
 8007998:	e02c      	b.n	80079f4 <UART_SetConfig+0x348>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a72      	ldr	r2, [pc, #456]	; (8007b68 <UART_SetConfig+0x4bc>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d125      	bne.n	80079f0 <UART_SetConfig+0x344>
 80079a4:	4b71      	ldr	r3, [pc, #452]	; (8007b6c <UART_SetConfig+0x4c0>)
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80079b2:	d017      	beq.n	80079e4 <UART_SetConfig+0x338>
 80079b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80079b8:	d817      	bhi.n	80079ea <UART_SetConfig+0x33e>
 80079ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079be:	d00b      	beq.n	80079d8 <UART_SetConfig+0x32c>
 80079c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079c4:	d811      	bhi.n	80079ea <UART_SetConfig+0x33e>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <UART_SetConfig+0x326>
 80079ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079ce:	d006      	beq.n	80079de <UART_SetConfig+0x332>
 80079d0:	e00b      	b.n	80079ea <UART_SetConfig+0x33e>
 80079d2:	2300      	movs	r3, #0
 80079d4:	77fb      	strb	r3, [r7, #31]
 80079d6:	e00d      	b.n	80079f4 <UART_SetConfig+0x348>
 80079d8:	2302      	movs	r3, #2
 80079da:	77fb      	strb	r3, [r7, #31]
 80079dc:	e00a      	b.n	80079f4 <UART_SetConfig+0x348>
 80079de:	2304      	movs	r3, #4
 80079e0:	77fb      	strb	r3, [r7, #31]
 80079e2:	e007      	b.n	80079f4 <UART_SetConfig+0x348>
 80079e4:	2308      	movs	r3, #8
 80079e6:	77fb      	strb	r3, [r7, #31]
 80079e8:	e004      	b.n	80079f4 <UART_SetConfig+0x348>
 80079ea:	2310      	movs	r3, #16
 80079ec:	77fb      	strb	r3, [r7, #31]
 80079ee:	e001      	b.n	80079f4 <UART_SetConfig+0x348>
 80079f0:	2310      	movs	r3, #16
 80079f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079fc:	d15b      	bne.n	8007ab6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80079fe:	7ffb      	ldrb	r3, [r7, #31]
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d828      	bhi.n	8007a56 <UART_SetConfig+0x3aa>
 8007a04:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <UART_SetConfig+0x360>)
 8007a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0a:	bf00      	nop
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007a39 	.word	0x08007a39
 8007a14:	08007a41 	.word	0x08007a41
 8007a18:	08007a57 	.word	0x08007a57
 8007a1c:	08007a47 	.word	0x08007a47
 8007a20:	08007a57 	.word	0x08007a57
 8007a24:	08007a57 	.word	0x08007a57
 8007a28:	08007a57 	.word	0x08007a57
 8007a2c:	08007a4f 	.word	0x08007a4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a30:	f7fd f808 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 8007a34:	61b8      	str	r0, [r7, #24]
        break;
 8007a36:	e013      	b.n	8007a60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a38:	f7fd f818 	bl	8004a6c <HAL_RCC_GetPCLK2Freq>
 8007a3c:	61b8      	str	r0, [r7, #24]
        break;
 8007a3e:	e00f      	b.n	8007a60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a40:	4b4b      	ldr	r3, [pc, #300]	; (8007b70 <UART_SetConfig+0x4c4>)
 8007a42:	61bb      	str	r3, [r7, #24]
        break;
 8007a44:	e00c      	b.n	8007a60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a46:	f7fc ff2b 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 8007a4a:	61b8      	str	r0, [r7, #24]
        break;
 8007a4c:	e008      	b.n	8007a60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a52:	61bb      	str	r3, [r7, #24]
        break;
 8007a54:	e004      	b.n	8007a60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	77bb      	strb	r3, [r7, #30]
        break;
 8007a5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d074      	beq.n	8007b50 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	005a      	lsls	r2, r3, #1
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	085b      	lsrs	r3, r3, #1
 8007a70:	441a      	add	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2b0f      	cmp	r3, #15
 8007a80:	d916      	bls.n	8007ab0 <UART_SetConfig+0x404>
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a88:	d212      	bcs.n	8007ab0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	f023 030f 	bic.w	r3, r3, #15
 8007a92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	085b      	lsrs	r3, r3, #1
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	89fb      	ldrh	r3, [r7, #14]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	89fa      	ldrh	r2, [r7, #14]
 8007aac:	60da      	str	r2, [r3, #12]
 8007aae:	e04f      	b.n	8007b50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	77bb      	strb	r3, [r7, #30]
 8007ab4:	e04c      	b.n	8007b50 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ab6:	7ffb      	ldrb	r3, [r7, #31]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d828      	bhi.n	8007b0e <UART_SetConfig+0x462>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <UART_SetConfig+0x418>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007ae9 	.word	0x08007ae9
 8007ac8:	08007af1 	.word	0x08007af1
 8007acc:	08007af9 	.word	0x08007af9
 8007ad0:	08007b0f 	.word	0x08007b0f
 8007ad4:	08007aff 	.word	0x08007aff
 8007ad8:	08007b0f 	.word	0x08007b0f
 8007adc:	08007b0f 	.word	0x08007b0f
 8007ae0:	08007b0f 	.word	0x08007b0f
 8007ae4:	08007b07 	.word	0x08007b07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae8:	f7fc ffac 	bl	8004a44 <HAL_RCC_GetPCLK1Freq>
 8007aec:	61b8      	str	r0, [r7, #24]
        break;
 8007aee:	e013      	b.n	8007b18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007af0:	f7fc ffbc 	bl	8004a6c <HAL_RCC_GetPCLK2Freq>
 8007af4:	61b8      	str	r0, [r7, #24]
        break;
 8007af6:	e00f      	b.n	8007b18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af8:	4b1d      	ldr	r3, [pc, #116]	; (8007b70 <UART_SetConfig+0x4c4>)
 8007afa:	61bb      	str	r3, [r7, #24]
        break;
 8007afc:	e00c      	b.n	8007b18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007afe:	f7fc fecf 	bl	80048a0 <HAL_RCC_GetSysClockFreq>
 8007b02:	61b8      	str	r0, [r7, #24]
        break;
 8007b04:	e008      	b.n	8007b18 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b0a:	61bb      	str	r3, [r7, #24]
        break;
 8007b0c:	e004      	b.n	8007b18 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	77bb      	strb	r3, [r7, #30]
        break;
 8007b16:	bf00      	nop
    }

    if (pclk != 0U)
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d018      	beq.n	8007b50 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	085a      	lsrs	r2, r3, #1
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	441a      	add	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2b0f      	cmp	r3, #15
 8007b36:	d909      	bls.n	8007b4c <UART_SetConfig+0x4a0>
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3e:	d205      	bcs.n	8007b4c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	60da      	str	r2, [r3, #12]
 8007b4a:	e001      	b.n	8007b50 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007b5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40007c00 	.word	0x40007c00
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	00f42400 	.word	0x00f42400

08007b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	f003 0301 	and.w	r3, r3, #1
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	f003 0304 	and.w	r3, r3, #4
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	f003 0308 	and.w	r3, r3, #8
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d01a      	beq.n	8007c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c72:	d10a      	bne.n	8007c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00a      	beq.n	8007cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	605a      	str	r2, [r3, #4]
  }
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cc8:	f7fa fc18 	bl	80024fc <HAL_GetTick>
 8007ccc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b08      	cmp	r3, #8
 8007cda:	d10e      	bne.n	8007cfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f831 	bl	8007d52 <UART_WaitOnFlagUntilTimeout>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e027      	b.n	8007d4a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d10e      	bne.n	8007d26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f81b 	bl	8007d52 <UART_WaitOnFlagUntilTimeout>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e011      	b.n	8007d4a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2220      	movs	r2, #32
 8007d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d48:	2300      	movs	r3, #0
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b09c      	sub	sp, #112	; 0x70
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	60f8      	str	r0, [r7, #12]
 8007d5a:	60b9      	str	r1, [r7, #8]
 8007d5c:	603b      	str	r3, [r7, #0]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d62:	e0a7      	b.n	8007eb4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d6a:	f000 80a3 	beq.w	8007eb4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6e:	f7fa fbc5 	bl	80024fc <HAL_GetTick>
 8007d72:	4602      	mov	r2, r0
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	1ad3      	subs	r3, r2, r3
 8007d78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d302      	bcc.n	8007d84 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d13f      	bne.n	8007e04 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d8c:	e853 3f00 	ldrex	r3, [r3]
 8007d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d98:	667b      	str	r3, [r7, #100]	; 0x64
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007da4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007da8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e6      	bne.n	8007d84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	f023 0301 	bic.w	r3, r3, #1
 8007dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007dd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e5      	bne.n	8007db6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2220      	movs	r2, #32
 8007dee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e068      	b.n	8007ed6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0304 	and.w	r3, r3, #4
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d050      	beq.n	8007eb4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e20:	d148      	bne.n	8007eb4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e2a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e4c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e6      	bne.n	8007e2c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	f023 0301 	bic.w	r3, r3, #1
 8007e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e7e:	623a      	str	r2, [r7, #32]
 8007e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e82:	69f9      	ldr	r1, [r7, #28]
 8007e84:	6a3a      	ldr	r2, [r7, #32]
 8007e86:	e841 2300 	strex	r3, r2, [r1]
 8007e8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d1e5      	bne.n	8007e5e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2220      	movs	r2, #32
 8007e96:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e010      	b.n	8007ed6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69da      	ldr	r2, [r3, #28]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	68ba      	ldr	r2, [r7, #8]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	bf0c      	ite	eq
 8007ec4:	2301      	moveq	r3, #1
 8007ec6:	2300      	movne	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	f43f af48 	beq.w	8007d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3770      	adds	r7, #112	; 0x70
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
	...

08007ee0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	b480      	push	{r7}
 8007ee4:	b085      	sub	sp, #20
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	f107 001c 	add.w	r0, r7, #28
 8007eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007ef6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007efa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007efe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007f02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007f06:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007f0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	4b07      	ldr	r3, [pc, #28]	; (8007f34 <SDMMC_Init+0x54>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	b004      	add	sp, #16
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	ffff8100 	.word	0xffff8100

08007f38 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	370c      	adds	r7, #12
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr

08007f52 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2203      	movs	r2, #3
 8007f80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f003 0303 	and.w	r3, r3, #3
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr

08007fac <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007fca:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007fd0:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007fd6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <SDMMC_SendCommand+0x50>)
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3714      	adds	r7, #20
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr
 8007ffc:	fffff000 	.word	0xfffff000

08008000 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	b2db      	uxtb	r3, r3
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3314      	adds	r3, #20
 8008028:	461a      	mov	r2, r3
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	4413      	add	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
}  
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008066:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800806c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008072:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4313      	orrs	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	431a      	orrs	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800808a:	2300      	movs	r3, #0

}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80080a6:	2310      	movs	r3, #16
 80080a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080aa:	2340      	movs	r3, #64	; 0x40
 80080ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080ae:	2300      	movs	r3, #0
 80080b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080b8:	f107 0308 	add.w	r3, r7, #8
 80080bc:	4619      	mov	r1, r3
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7ff ff74 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80080c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c8:	2110      	movs	r1, #16
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fa1a 	bl	8008504 <SDMMC_GetCmdResp1>
 80080d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80080d2:	69fb      	ldr	r3, [r7, #28]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3720      	adds	r7, #32
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80080ea:	2311      	movs	r3, #17
 80080ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80080ee:	2340      	movs	r3, #64	; 0x40
 80080f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80080f2:	2300      	movs	r3, #0
 80080f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80080f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80080fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80080fc:	f107 0308 	add.w	r3, r7, #8
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f7ff ff52 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008108:	f241 3288 	movw	r2, #5000	; 0x1388
 800810c:	2111      	movs	r1, #17
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f9f8 	bl	8008504 <SDMMC_GetCmdResp1>
 8008114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008116:	69fb      	ldr	r3, [r7, #28]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3720      	adds	r7, #32
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800812e:	2312      	movs	r3, #18
 8008130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008132:	2340      	movs	r3, #64	; 0x40
 8008134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008136:	2300      	movs	r3, #0
 8008138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800813a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800813e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008140:	f107 0308 	add.w	r3, r7, #8
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7ff ff30 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800814c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008150:	2112      	movs	r1, #18
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f9d6 	bl	8008504 <SDMMC_GetCmdResp1>
 8008158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800815a:	69fb      	ldr	r3, [r7, #28]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3720      	adds	r7, #32
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008172:	2318      	movs	r3, #24
 8008174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008176:	2340      	movs	r3, #64	; 0x40
 8008178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800817a:	2300      	movs	r3, #0
 800817c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800817e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008182:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008184:	f107 0308 	add.w	r3, r7, #8
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff ff0e 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008190:	f241 3288 	movw	r2, #5000	; 0x1388
 8008194:	2118      	movs	r1, #24
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f9b4 	bl	8008504 <SDMMC_GetCmdResp1>
 800819c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800819e:	69fb      	ldr	r3, [r7, #28]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3720      	adds	r7, #32
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80081b6:	2319      	movs	r3, #25
 80081b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081ba:	2340      	movs	r3, #64	; 0x40
 80081bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80081be:	2300      	movs	r3, #0
 80081c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80081c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80081c8:	f107 0308 	add.w	r3, r7, #8
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff feec 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80081d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081d8:	2119      	movs	r1, #25
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f992 	bl	8008504 <SDMMC_GetCmdResp1>
 80081e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80081e2:	69fb      	ldr	r3, [r7, #28]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3720      	adds	r7, #32
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80081f8:	230c      	movs	r3, #12
 80081fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80081fc:	2340      	movs	r3, #64	; 0x40
 80081fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008200:	2300      	movs	r3, #0
 8008202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008208:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800820a:	f107 0308 	add.w	r3, r7, #8
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff fecb 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008216:	4a05      	ldr	r2, [pc, #20]	; (800822c <SDMMC_CmdStopTransfer+0x40>)
 8008218:	210c      	movs	r1, #12
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f972 	bl	8008504 <SDMMC_GetCmdResp1>
 8008220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008222:	69fb      	ldr	r3, [r7, #28]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3720      	adds	r7, #32
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	05f5e100 	.word	0x05f5e100

08008230 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b08a      	sub	sp, #40	; 0x28
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008240:	2307      	movs	r3, #7
 8008242:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008244:	2340      	movs	r3, #64	; 0x40
 8008246:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008248:	2300      	movs	r3, #0
 800824a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800824c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008250:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008252:	f107 0310 	add.w	r3, r7, #16
 8008256:	4619      	mov	r1, r3
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f7ff fea7 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800825e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008262:	2107      	movs	r1, #7
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 f94d 	bl	8008504 <SDMMC_GetCmdResp1>
 800826a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800826c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800826e:	4618      	mov	r0, r3
 8008270:	3728      	adds	r7, #40	; 0x28
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b088      	sub	sp, #32
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008286:	2300      	movs	r3, #0
 8008288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800828a:	2300      	movs	r3, #0
 800828c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800828e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008292:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008294:	f107 0308 	add.w	r3, r7, #8
 8008298:	4619      	mov	r1, r3
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7ff fe86 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fb67 	bl	8008974 <SDMMC_GetCmdError>
 80082a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082a8:	69fb      	ldr	r3, [r7, #28]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3720      	adds	r7, #32
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b088      	sub	sp, #32
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80082ba:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80082be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80082c0:	2308      	movs	r3, #8
 80082c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082c4:	2340      	movs	r3, #64	; 0x40
 80082c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082c8:	2300      	movs	r3, #0
 80082ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082d2:	f107 0308 	add.w	r3, r7, #8
 80082d6:	4619      	mov	r1, r3
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f7ff fe67 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fafa 	bl	80088d8 <SDMMC_GetCmdResp7>
 80082e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082e6:	69fb      	ldr	r3, [r7, #28]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b088      	sub	sp, #32
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80082fe:	2337      	movs	r3, #55	; 0x37
 8008300:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008302:	2340      	movs	r3, #64	; 0x40
 8008304:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008306:	2300      	movs	r3, #0
 8008308:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800830a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800830e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008310:	f107 0308 	add.w	r3, r7, #8
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f7ff fe48 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800831c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008320:	2137      	movs	r1, #55	; 0x37
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f8ee 	bl	8008504 <SDMMC_GetCmdResp1>
 8008328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800832a:	69fb      	ldr	r3, [r7, #28]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3720      	adds	r7, #32
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	4b0d      	ldr	r3, [pc, #52]	; (8008378 <SDMMC_CmdAppOperCommand+0x44>)
 8008342:	4313      	orrs	r3, r2
 8008344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008346:	2329      	movs	r3, #41	; 0x29
 8008348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800834a:	2340      	movs	r3, #64	; 0x40
 800834c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800834e:	2300      	movs	r3, #0
 8008350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008356:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008358:	f107 0308 	add.w	r3, r7, #8
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7ff fe24 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 fa03 	bl	8008770 <SDMMC_GetCmdResp3>
 800836a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800836c:	69fb      	ldr	r3, [r7, #28]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3720      	adds	r7, #32
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	80100000 	.word	0x80100000

0800837c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800838a:	2306      	movs	r3, #6
 800838c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800838e:	2340      	movs	r3, #64	; 0x40
 8008390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008392:	2300      	movs	r3, #0
 8008394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800839a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800839c:	f107 0308 	add.w	r3, r7, #8
 80083a0:	4619      	mov	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f7ff fe02 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80083a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ac:	2106      	movs	r1, #6
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f8a8 	bl	8008504 <SDMMC_GetCmdResp1>
 80083b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083b6:	69fb      	ldr	r3, [r7, #28]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3720      	adds	r7, #32
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80083c8:	2300      	movs	r3, #0
 80083ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80083cc:	2333      	movs	r3, #51	; 0x33
 80083ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083d0:	2340      	movs	r3, #64	; 0x40
 80083d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083d4:	2300      	movs	r3, #0
 80083d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083de:	f107 0308 	add.w	r3, r7, #8
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f7ff fde1 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80083ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ee:	2133      	movs	r1, #51	; 0x33
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f887 	bl	8008504 <SDMMC_GetCmdResp1>
 80083f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083f8:	69fb      	ldr	r3, [r7, #28]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3720      	adds	r7, #32
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b088      	sub	sp, #32
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800840e:	2302      	movs	r3, #2
 8008410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008412:	23c0      	movs	r3, #192	; 0xc0
 8008414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008416:	2300      	movs	r3, #0
 8008418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800841a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800841e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008420:	f107 0308 	add.w	r3, r7, #8
 8008424:	4619      	mov	r1, r3
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f7ff fdc0 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 f957 	bl	80086e0 <SDMMC_GetCmdResp2>
 8008432:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008434:	69fb      	ldr	r3, [r7, #28]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3720      	adds	r7, #32
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b088      	sub	sp, #32
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800844c:	2309      	movs	r3, #9
 800844e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008450:	23c0      	movs	r3, #192	; 0xc0
 8008452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008454:	2300      	movs	r3, #0
 8008456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800845c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800845e:	f107 0308 	add.w	r3, r7, #8
 8008462:	4619      	mov	r1, r3
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff fda1 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f938 	bl	80086e0 <SDMMC_GetCmdResp2>
 8008470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008472:	69fb      	ldr	r3, [r7, #28]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3720      	adds	r7, #32
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008486:	2300      	movs	r3, #0
 8008488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800848a:	2303      	movs	r3, #3
 800848c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800848e:	2340      	movs	r3, #64	; 0x40
 8008490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800849a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800849c:	f107 0308 	add.w	r3, r7, #8
 80084a0:	4619      	mov	r1, r3
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fd82 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80084a8:	683a      	ldr	r2, [r7, #0]
 80084aa:	2103      	movs	r1, #3
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 f99d 	bl	80087ec <SDMMC_GetCmdResp6>
 80084b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084b4:	69fb      	ldr	r3, [r7, #28]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3720      	adds	r7, #32
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b088      	sub	sp, #32
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80084cc:	230d      	movs	r3, #13
 80084ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084d0:	2340      	movs	r3, #64	; 0x40
 80084d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084d4:	2300      	movs	r3, #0
 80084d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084de:	f107 0308 	add.w	r3, r7, #8
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7ff fd61 	bl	8007fac <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80084ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ee:	210d      	movs	r1, #13
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f807 	bl	8008504 <SDMMC_GetCmdResp1>
 80084f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084f8:	69fb      	ldr	r3, [r7, #28]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3720      	adds	r7, #32
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
	...

08008504 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b088      	sub	sp, #32
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	460b      	mov	r3, r1
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008512:	4b70      	ldr	r3, [pc, #448]	; (80086d4 <SDMMC_GetCmdResp1+0x1d0>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a70      	ldr	r2, [pc, #448]	; (80086d8 <SDMMC_GetCmdResp1+0x1d4>)
 8008518:	fba2 2303 	umull	r2, r3, r2, r3
 800851c:	0a5a      	lsrs	r2, r3, #9
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	fb02 f303 	mul.w	r3, r2, r3
 8008524:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	1e5a      	subs	r2, r3, #1
 800852a:	61fa      	str	r2, [r7, #28]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d102      	bne.n	8008536 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008530:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008534:	e0c9      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0ef      	beq.n	8008526 <SDMMC_GetCmdResp1+0x22>
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800854c:	2b00      	cmp	r3, #0
 800854e:	d1ea      	bne.n	8008526 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d004      	beq.n	8008566 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2204      	movs	r2, #4
 8008560:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008562:	2304      	movs	r3, #4
 8008564:	e0b1      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d004      	beq.n	800857c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2201      	movs	r2, #1
 8008576:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008578:	2301      	movs	r3, #1
 800857a:	e0a6      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	22c5      	movs	r2, #197	; 0xc5
 8008580:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f7ff fd3c 	bl	8008000 <SDMMC_GetCommandResponse>
 8008588:	4603      	mov	r3, r0
 800858a:	461a      	mov	r2, r3
 800858c:	7afb      	ldrb	r3, [r7, #11]
 800858e:	4293      	cmp	r3, r2
 8008590:	d001      	beq.n	8008596 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008592:	2301      	movs	r3, #1
 8008594:	e099      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008596:	2100      	movs	r1, #0
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f7ff fd3e 	bl	800801a <SDMMC_GetResponse>
 800859e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4b4e      	ldr	r3, [pc, #312]	; (80086dc <SDMMC_GetCmdResp1+0x1d8>)
 80085a4:	4013      	ands	r3, r2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	e08d      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	da02      	bge.n	80085ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80085b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085b8:	e087      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80085c4:	2340      	movs	r3, #64	; 0x40
 80085c6:	e080      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80085d2:	2380      	movs	r3, #128	; 0x80
 80085d4:	e079      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d002      	beq.n	80085e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80085e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085e4:	e071      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d002      	beq.n	80085f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80085f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085f4:	e069      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008604:	e061      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008614:	e059      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008624:	e051      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008634:	e049      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008644:	e041      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d002      	beq.n	8008656 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008650:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008654:	e039      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800865c:	2b00      	cmp	r3, #0
 800865e:	d002      	beq.n	8008666 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008664:	e031      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008670:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008674:	e029      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008680:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008684:	e021      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008690:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008694:	e019      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80086a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80086a4:	e011      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80086b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80086b4:	e009      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f003 0308 	and.w	r3, r3, #8
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80086c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80086c4:	e001      	b.n	80086ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80086c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3720      	adds	r7, #32
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000000 	.word	0x20000000
 80086d8:	10624dd3 	.word	0x10624dd3
 80086dc:	fdffe008 	.word	0xfdffe008

080086e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80086e8:	4b1f      	ldr	r3, [pc, #124]	; (8008768 <SDMMC_GetCmdResp2+0x88>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a1f      	ldr	r2, [pc, #124]	; (800876c <SDMMC_GetCmdResp2+0x8c>)
 80086ee:	fba2 2303 	umull	r2, r3, r2, r3
 80086f2:	0a5b      	lsrs	r3, r3, #9
 80086f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f8:	fb02 f303 	mul.w	r3, r2, r3
 80086fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	1e5a      	subs	r2, r3, #1
 8008702:	60fa      	str	r2, [r7, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d102      	bne.n	800870e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008708:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800870c:	e026      	b.n	800875c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008712:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800871a:	2b00      	cmp	r3, #0
 800871c:	d0ef      	beq.n	80086fe <SDMMC_GetCmdResp2+0x1e>
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008724:	2b00      	cmp	r3, #0
 8008726:	d1ea      	bne.n	80086fe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d004      	beq.n	800873e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2204      	movs	r2, #4
 8008738:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800873a:	2304      	movs	r3, #4
 800873c:	e00e      	b.n	800875c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008750:	2301      	movs	r3, #1
 8008752:	e003      	b.n	800875c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	22c5      	movs	r2, #197	; 0xc5
 8008758:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	20000000 	.word	0x20000000
 800876c:	10624dd3 	.word	0x10624dd3

08008770 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008778:	4b1a      	ldr	r3, [pc, #104]	; (80087e4 <SDMMC_GetCmdResp3+0x74>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a1a      	ldr	r2, [pc, #104]	; (80087e8 <SDMMC_GetCmdResp3+0x78>)
 800877e:	fba2 2303 	umull	r2, r3, r2, r3
 8008782:	0a5b      	lsrs	r3, r3, #9
 8008784:	f241 3288 	movw	r2, #5000	; 0x1388
 8008788:	fb02 f303 	mul.w	r3, r2, r3
 800878c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	1e5a      	subs	r2, r3, #1
 8008792:	60fa      	str	r2, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d102      	bne.n	800879e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800879c:	e01b      	b.n	80087d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0ef      	beq.n	800878e <SDMMC_GetCmdResp3+0x1e>
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1ea      	bne.n	800878e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d004      	beq.n	80087ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2204      	movs	r2, #4
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087ca:	2304      	movs	r3, #4
 80087cc:	e003      	b.n	80087d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	22c5      	movs	r2, #197	; 0xc5
 80087d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	20000000 	.word	0x20000000
 80087e8:	10624dd3 	.word	0x10624dd3

080087ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	460b      	mov	r3, r1
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80087fa:	4b35      	ldr	r3, [pc, #212]	; (80088d0 <SDMMC_GetCmdResp6+0xe4>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a35      	ldr	r2, [pc, #212]	; (80088d4 <SDMMC_GetCmdResp6+0xe8>)
 8008800:	fba2 2303 	umull	r2, r3, r2, r3
 8008804:	0a5b      	lsrs	r3, r3, #9
 8008806:	f241 3288 	movw	r2, #5000	; 0x1388
 800880a:	fb02 f303 	mul.w	r3, r2, r3
 800880e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	1e5a      	subs	r2, r3, #1
 8008814:	61fa      	str	r2, [r7, #28]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d102      	bne.n	8008820 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800881a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800881e:	e052      	b.n	80088c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008824:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800882c:	2b00      	cmp	r3, #0
 800882e:	d0ef      	beq.n	8008810 <SDMMC_GetCmdResp6+0x24>
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1ea      	bne.n	8008810 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883e:	f003 0304 	and.w	r3, r3, #4
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2204      	movs	r2, #4
 800884a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800884c:	2304      	movs	r3, #4
 800884e:	e03a      	b.n	80088c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d004      	beq.n	8008866 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2201      	movs	r2, #1
 8008860:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008862:	2301      	movs	r3, #1
 8008864:	e02f      	b.n	80088c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f7ff fbca 	bl	8008000 <SDMMC_GetCommandResponse>
 800886c:	4603      	mov	r3, r0
 800886e:	461a      	mov	r2, r3
 8008870:	7afb      	ldrb	r3, [r7, #11]
 8008872:	4293      	cmp	r3, r2
 8008874:	d001      	beq.n	800887a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008876:	2301      	movs	r3, #1
 8008878:	e025      	b.n	80088c6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	22c5      	movs	r2, #197	; 0xc5
 800887e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008880:	2100      	movs	r1, #0
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f7ff fbc9 	bl	800801a <SDMMC_GetResponse>
 8008888:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d106      	bne.n	80088a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	0c1b      	lsrs	r3, r3, #16
 8008898:	b29a      	uxth	r2, r3
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800889e:	2300      	movs	r3, #0
 80088a0:	e011      	b.n	80088c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d002      	beq.n	80088b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80088ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088b0:	e009      	b.n	80088c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80088bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088c0:	e001      	b.n	80088c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80088c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3720      	adds	r7, #32
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000000 	.word	0x20000000
 80088d4:	10624dd3 	.word	0x10624dd3

080088d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088e0:	4b22      	ldr	r3, [pc, #136]	; (800896c <SDMMC_GetCmdResp7+0x94>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a22      	ldr	r2, [pc, #136]	; (8008970 <SDMMC_GetCmdResp7+0x98>)
 80088e6:	fba2 2303 	umull	r2, r3, r2, r3
 80088ea:	0a5b      	lsrs	r3, r3, #9
 80088ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f0:	fb02 f303 	mul.w	r3, r2, r3
 80088f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	1e5a      	subs	r2, r3, #1
 80088fa:	60fa      	str	r2, [r7, #12]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008900:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008904:	e02c      	b.n	8008960 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8008912:	2b00      	cmp	r3, #0
 8008914:	d0ef      	beq.n	80088f6 <SDMMC_GetCmdResp7+0x1e>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1ea      	bne.n	80088f6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b00      	cmp	r3, #0
 800892a:	d004      	beq.n	8008936 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2204      	movs	r2, #4
 8008930:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008932:	2304      	movs	r3, #4
 8008934:	e014      	b.n	8008960 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d004      	beq.n	800894c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008948:	2301      	movs	r3, #1
 800894a:	e009      	b.n	8008960 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008954:	2b00      	cmp	r3, #0
 8008956:	d002      	beq.n	800895e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2240      	movs	r2, #64	; 0x40
 800895c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800895e:	2300      	movs	r3, #0
  
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	20000000 	.word	0x20000000
 8008970:	10624dd3 	.word	0x10624dd3

08008974 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800897c:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <SDMMC_GetCmdError+0x50>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a11      	ldr	r2, [pc, #68]	; (80089c8 <SDMMC_GetCmdError+0x54>)
 8008982:	fba2 2303 	umull	r2, r3, r2, r3
 8008986:	0a5b      	lsrs	r3, r3, #9
 8008988:	f241 3288 	movw	r2, #5000	; 0x1388
 800898c:	fb02 f303 	mul.w	r3, r2, r3
 8008990:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	1e5a      	subs	r2, r3, #1
 8008996:	60fa      	str	r2, [r7, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d102      	bne.n	80089a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800899c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80089a0:	e009      	b.n	80089b6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d0f1      	beq.n	8008992 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	22c5      	movs	r2, #197	; 0xc5
 80089b2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000000 	.word	0x20000000
 80089c8:	10624dd3 	.word	0x10624dd3

080089cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80089d0:	4904      	ldr	r1, [pc, #16]	; (80089e4 <MX_FATFS_Init+0x18>)
 80089d2:	4805      	ldr	r0, [pc, #20]	; (80089e8 <MX_FATFS_Init+0x1c>)
 80089d4:	f003 f93a 	bl	800bc4c <FATFS_LinkDriver>
 80089d8:	4603      	mov	r3, r0
 80089da:	461a      	mov	r2, r3
 80089dc:	4b03      	ldr	r3, [pc, #12]	; (80089ec <MX_FATFS_Init+0x20>)
 80089de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80089e0:	bf00      	nop
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	200045f0 	.word	0x200045f0
 80089e8:	0800ee10 	.word	0x0800ee10
 80089ec:	200045ec 	.word	0x200045ec

080089f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80089f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008a0a:	f000 f896 	bl	8008b3a <BSP_SD_IsDetected>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d001      	beq.n	8008a18 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8008a14:	2302      	movs	r3, #2
 8008a16:	e012      	b.n	8008a3e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8008a18:	480b      	ldr	r0, [pc, #44]	; (8008a48 <BSP_SD_Init+0x48>)
 8008a1a:	f7fd facd 	bl	8005fb8 <HAL_SD_Init>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008a22:	79fb      	ldrb	r3, [r7, #7]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d109      	bne.n	8008a3c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8008a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a2c:	4806      	ldr	r0, [pc, #24]	; (8008a48 <BSP_SD_Init+0x48>)
 8008a2e:	f7fe f893 	bl	8006b58 <HAL_SD_ConfigWideBusOperation>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d001      	beq.n	8008a3c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	200043f4 	.word	0x200043f4

08008a4c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	68f9      	ldr	r1, [r7, #12]
 8008a62:	4806      	ldr	r0, [pc, #24]	; (8008a7c <BSP_SD_ReadBlocks_DMA+0x30>)
 8008a64:	f7fd fb60 	bl	8006128 <HAL_SD_ReadBlocks_DMA>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d001      	beq.n	8008a72 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	200043f4 	.word	0x200043f4

08008a80 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	68f9      	ldr	r1, [r7, #12]
 8008a96:	4806      	ldr	r0, [pc, #24]	; (8008ab0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008a98:	f7fd fc28 	bl	80062ec <HAL_SD_WriteBlocks_DMA>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	200043f4 	.word	0x200043f4

08008ab4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008ab8:	4805      	ldr	r0, [pc, #20]	; (8008ad0 <BSP_SD_GetCardState+0x1c>)
 8008aba:	f7fe f8e7 	bl	8006c8c <HAL_SD_GetCardState>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	bf14      	ite	ne
 8008ac4:	2301      	movne	r3, #1
 8008ac6:	2300      	moveq	r3, #0
 8008ac8:	b2db      	uxtb	r3, r3
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	200043f4 	.word	0x200043f4

08008ad4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008adc:	6879      	ldr	r1, [r7, #4]
 8008ade:	4803      	ldr	r0, [pc, #12]	; (8008aec <BSP_SD_GetCardInfo+0x18>)
 8008ae0:	f7fe f80e 	bl	8006b00 <HAL_SD_GetCardInfo>
}
 8008ae4:	bf00      	nop
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	200043f4 	.word	0x200043f4

08008af0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008af8:	f000 f818 	bl	8008b2c <BSP_SD_AbortCallback>
}
 8008afc:	bf00      	nop
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008b0c:	f000 f9a8 	bl	8008e60 <BSP_SD_WriteCpltCallback>
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008b20:	f000 f9aa 	bl	8008e78 <BSP_SD_ReadCpltCallback>
}
 8008b24:	bf00      	nop
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	af00      	add	r7, sp, #0

}
 8008b30:	bf00      	nop
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b082      	sub	sp, #8
 8008b3e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008b40:	2301      	movs	r3, #1
 8008b42:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008b44:	f000 f80c 	bl	8008b60 <BSP_PlatformIsDetected>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d101      	bne.n	8008b52 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	b2db      	uxtb	r3, r3
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8008b66:	2301      	movs	r3, #1
 8008b68:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8008b6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008b6e:	4806      	ldr	r0, [pc, #24]	; (8008b88 <BSP_PlatformIsDetected+0x28>)
 8008b70:	f7fb fa62 	bl	8004038 <HAL_GPIO_ReadPin>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	40020400 	.word	0x40020400

08008b8c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8008b94:	f7f9 fcb2 	bl	80024fc <HAL_GetTick>
 8008b98:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8008b9a:	e006      	b.n	8008baa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008b9c:	f7ff ff8a 	bl	8008ab4 <BSP_SD_GetCardState>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	e009      	b.n	8008bbe <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8008baa:	f7f9 fca7 	bl	80024fc <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d8f0      	bhi.n	8008b9c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
	...

08008bc8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	4603      	mov	r3, r0
 8008bd0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008bd2:	4b0b      	ldr	r3, [pc, #44]	; (8008c00 <SD_CheckStatus+0x38>)
 8008bd4:	2201      	movs	r2, #1
 8008bd6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8008bd8:	f7ff ff6c 	bl	8008ab4 <BSP_SD_GetCardState>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d107      	bne.n	8008bf2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008be2:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <SD_CheckStatus+0x38>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	f023 0301 	bic.w	r3, r3, #1
 8008bec:	b2da      	uxtb	r2, r3
 8008bee:	4b04      	ldr	r3, [pc, #16]	; (8008c00 <SD_CheckStatus+0x38>)
 8008bf0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008bf2:	4b03      	ldr	r3, [pc, #12]	; (8008c00 <SD_CheckStatus+0x38>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	b2db      	uxtb	r3, r3
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	20000009 	.word	0x20000009

08008c04 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008c0e:	f7ff fef7 	bl	8008a00 <BSP_SD_Init>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d107      	bne.n	8008c28 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8008c18:	79fb      	ldrb	r3, [r7, #7]
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7ff ffd4 	bl	8008bc8 <SD_CheckStatus>
 8008c20:	4603      	mov	r3, r0
 8008c22:	461a      	mov	r2, r3
 8008c24:	4b04      	ldr	r3, [pc, #16]	; (8008c38 <SD_initialize+0x34>)
 8008c26:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008c28:	4b03      	ldr	r3, [pc, #12]	; (8008c38 <SD_initialize+0x34>)
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	b2db      	uxtb	r3, r3
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20000009 	.word	0x20000009

08008c3c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008c46:	79fb      	ldrb	r3, [r7, #7]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff ffbd 	bl	8008bc8 <SD_CheckStatus>
 8008c4e:	4603      	mov	r3, r0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	607a      	str	r2, [r7, #4]
 8008c62:	603b      	str	r3, [r7, #0]
 8008c64:	4603      	mov	r3, r0
 8008c66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008c6c:	f247 5030 	movw	r0, #30000	; 0x7530
 8008c70:	f7ff ff8c 	bl	8008b8c <SD_CheckStatusWithTimeout>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da01      	bge.n	8008c7e <SD_read+0x26>
  {
    return res;
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
 8008c7c:	e03b      	b.n	8008cf6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	68b8      	ldr	r0, [r7, #8]
 8008c84:	f7ff fee2 	bl	8008a4c <BSP_SD_ReadBlocks_DMA>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d132      	bne.n	8008cf4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8008c8e:	4b1c      	ldr	r3, [pc, #112]	; (8008d00 <SD_read+0xa8>)
 8008c90:	2200      	movs	r2, #0
 8008c92:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8008c94:	f7f9 fc32 	bl	80024fc <HAL_GetTick>
 8008c98:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008c9a:	bf00      	nop
 8008c9c:	4b18      	ldr	r3, [pc, #96]	; (8008d00 <SD_read+0xa8>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d108      	bne.n	8008cb6 <SD_read+0x5e>
 8008ca4:	f7f9 fc2a 	bl	80024fc <HAL_GetTick>
 8008ca8:	4602      	mov	r2, r0
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	1ad3      	subs	r3, r2, r3
 8008cae:	f247 522f 	movw	r2, #29999	; 0x752f
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d9f2      	bls.n	8008c9c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8008cb6:	4b12      	ldr	r3, [pc, #72]	; (8008d00 <SD_read+0xa8>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d102      	bne.n	8008cc4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]
 8008cc2:	e017      	b.n	8008cf4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8008cc4:	4b0e      	ldr	r3, [pc, #56]	; (8008d00 <SD_read+0xa8>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008cca:	f7f9 fc17 	bl	80024fc <HAL_GetTick>
 8008cce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008cd0:	e007      	b.n	8008ce2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008cd2:	f7ff feef 	bl	8008ab4 <BSP_SD_GetCardState>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d102      	bne.n	8008ce2 <SD_read+0x8a>
          {
            res = RES_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8008ce0:	e008      	b.n	8008cf4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008ce2:	f7f9 fc0b 	bl	80024fc <HAL_GetTick>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	f247 522f 	movw	r2, #29999	; 0x752f
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d9ee      	bls.n	8008cd2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8008cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20004a58 	.word	0x20004a58

08008d04 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	60b9      	str	r1, [r7, #8]
 8008d0c:	607a      	str	r2, [r7, #4]
 8008d0e:	603b      	str	r3, [r7, #0]
 8008d10:	4603      	mov	r3, r0
 8008d12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8008d18:	4b24      	ldr	r3, [pc, #144]	; (8008dac <SD_write+0xa8>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008d1e:	f247 5030 	movw	r0, #30000	; 0x7530
 8008d22:	f7ff ff33 	bl	8008b8c <SD_CheckStatusWithTimeout>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	da01      	bge.n	8008d30 <SD_write+0x2c>
  {
    return res;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	e038      	b.n	8008da2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8008d30:	683a      	ldr	r2, [r7, #0]
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	68b8      	ldr	r0, [r7, #8]
 8008d36:	f7ff fea3 	bl	8008a80 <BSP_SD_WriteBlocks_DMA>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d12f      	bne.n	8008da0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008d40:	f7f9 fbdc 	bl	80024fc <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008d46:	bf00      	nop
 8008d48:	4b18      	ldr	r3, [pc, #96]	; (8008dac <SD_write+0xa8>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d108      	bne.n	8008d62 <SD_write+0x5e>
 8008d50:	f7f9 fbd4 	bl	80024fc <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	f247 522f 	movw	r2, #29999	; 0x752f
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d9f2      	bls.n	8008d48 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <SD_write+0xa8>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d102      	bne.n	8008d70 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	75fb      	strb	r3, [r7, #23]
 8008d6e:	e017      	b.n	8008da0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008d70:	4b0e      	ldr	r3, [pc, #56]	; (8008dac <SD_write+0xa8>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008d76:	f7f9 fbc1 	bl	80024fc <HAL_GetTick>
 8008d7a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008d7c:	e007      	b.n	8008d8e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008d7e:	f7ff fe99 	bl	8008ab4 <BSP_SD_GetCardState>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d102      	bne.n	8008d8e <SD_write+0x8a>
          {
            res = RES_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	75fb      	strb	r3, [r7, #23]
            break;
 8008d8c:	e008      	b.n	8008da0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8008d8e:	f7f9 fbb5 	bl	80024fc <HAL_GetTick>
 8008d92:	4602      	mov	r2, r0
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	f247 522f 	movw	r2, #29999	; 0x752f
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d9ee      	bls.n	8008d7e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20004a54 	.word	0x20004a54

08008db0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08c      	sub	sp, #48	; 0x30
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	4603      	mov	r3, r0
 8008db8:	603a      	str	r2, [r7, #0]
 8008dba:	71fb      	strb	r3, [r7, #7]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008dc6:	4b25      	ldr	r3, [pc, #148]	; (8008e5c <SD_ioctl+0xac>)
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d001      	beq.n	8008dd8 <SD_ioctl+0x28>
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e03c      	b.n	8008e52 <SD_ioctl+0xa2>

  switch (cmd)
 8008dd8:	79bb      	ldrb	r3, [r7, #6]
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	d834      	bhi.n	8008e48 <SD_ioctl+0x98>
 8008dde:	a201      	add	r2, pc, #4	; (adr r2, 8008de4 <SD_ioctl+0x34>)
 8008de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de4:	08008df5 	.word	0x08008df5
 8008de8:	08008dfd 	.word	0x08008dfd
 8008dec:	08008e15 	.word	0x08008e15
 8008df0:	08008e2f 	.word	0x08008e2f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008dfa:	e028      	b.n	8008e4e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008dfc:	f107 030c 	add.w	r3, r7, #12
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7ff fe67 	bl	8008ad4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008e12:	e01c      	b.n	8008e4e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008e14:	f107 030c 	add.w	r3, r7, #12
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7ff fe5b 	bl	8008ad4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008e2c:	e00f      	b.n	8008e4e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008e2e:	f107 030c 	add.w	r3, r7, #12
 8008e32:	4618      	mov	r0, r3
 8008e34:	f7ff fe4e 	bl	8008ad4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3a:	0a5a      	lsrs	r2, r3, #9
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008e40:	2300      	movs	r3, #0
 8008e42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008e46:	e002      	b.n	8008e4e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008e48:	2304      	movs	r3, #4
 8008e4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8008e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3730      	adds	r7, #48	; 0x30
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20000009 	.word	0x20000009

08008e60 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008e60:	b480      	push	{r7}
 8008e62:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008e64:	4b03      	ldr	r3, [pc, #12]	; (8008e74 <BSP_SD_WriteCpltCallback+0x14>)
 8008e66:	2201      	movs	r2, #1
 8008e68:	601a      	str	r2, [r3, #0]
}
 8008e6a:	bf00      	nop
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	20004a54 	.word	0x20004a54

08008e78 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8008e7c:	4b03      	ldr	r3, [pc, #12]	; (8008e8c <BSP_SD_ReadCpltCallback+0x14>)
 8008e7e:	2201      	movs	r2, #1
 8008e80:	601a      	str	r2, [r3, #0]
}
 8008e82:	bf00      	nop
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	20004a58 	.word	0x20004a58

08008e90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b084      	sub	sp, #16
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	4a08      	ldr	r2, [pc, #32]	; (8008ec0 <disk_status+0x30>)
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4413      	add	r3, r2
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	79fa      	ldrb	r2, [r7, #7]
 8008ea8:	4905      	ldr	r1, [pc, #20]	; (8008ec0 <disk_status+0x30>)
 8008eaa:	440a      	add	r2, r1
 8008eac:	7a12      	ldrb	r2, [r2, #8]
 8008eae:	4610      	mov	r0, r2
 8008eb0:	4798      	blx	r3
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	20004a84 	.word	0x20004a84

08008ec4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	4a0d      	ldr	r2, [pc, #52]	; (8008f0c <disk_initialize+0x48>)
 8008ed6:	5cd3      	ldrb	r3, [r2, r3]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d111      	bne.n	8008f00 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	4a0b      	ldr	r2, [pc, #44]	; (8008f0c <disk_initialize+0x48>)
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	4a09      	ldr	r2, [pc, #36]	; (8008f0c <disk_initialize+0x48>)
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4413      	add	r3, r2
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	79fa      	ldrb	r2, [r7, #7]
 8008ef2:	4906      	ldr	r1, [pc, #24]	; (8008f0c <disk_initialize+0x48>)
 8008ef4:	440a      	add	r2, r1
 8008ef6:	7a12      	ldrb	r2, [r2, #8]
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4798      	blx	r3
 8008efc:	4603      	mov	r3, r0
 8008efe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20004a84 	.word	0x20004a84

08008f10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008f10:	b590      	push	{r4, r7, lr}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60b9      	str	r1, [r7, #8]
 8008f18:	607a      	str	r2, [r7, #4]
 8008f1a:	603b      	str	r3, [r7, #0]
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	4a0a      	ldr	r2, [pc, #40]	; (8008f4c <disk_read+0x3c>)
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	689c      	ldr	r4, [r3, #8]
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	4a07      	ldr	r2, [pc, #28]	; (8008f4c <disk_read+0x3c>)
 8008f30:	4413      	add	r3, r2
 8008f32:	7a18      	ldrb	r0, [r3, #8]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	68b9      	ldr	r1, [r7, #8]
 8008f3a:	47a0      	blx	r4
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	371c      	adds	r7, #28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd90      	pop	{r4, r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20004a84 	.word	0x20004a84

08008f50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008f50:	b590      	push	{r4, r7, lr}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60b9      	str	r1, [r7, #8]
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	603b      	str	r3, [r7, #0]
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	4a0a      	ldr	r2, [pc, #40]	; (8008f8c <disk_write+0x3c>)
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	68dc      	ldr	r4, [r3, #12]
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
 8008f6e:	4a07      	ldr	r2, [pc, #28]	; (8008f8c <disk_write+0x3c>)
 8008f70:	4413      	add	r3, r2
 8008f72:	7a18      	ldrb	r0, [r3, #8]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	68b9      	ldr	r1, [r7, #8]
 8008f7a:	47a0      	blx	r4
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	371c      	adds	r7, #28
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd90      	pop	{r4, r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	20004a84 	.word	0x20004a84

08008f90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	603a      	str	r2, [r7, #0]
 8008f9a:	71fb      	strb	r3, [r7, #7]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008fa0:	79fb      	ldrb	r3, [r7, #7]
 8008fa2:	4a09      	ldr	r2, [pc, #36]	; (8008fc8 <disk_ioctl+0x38>)
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	79fa      	ldrb	r2, [r7, #7]
 8008fae:	4906      	ldr	r1, [pc, #24]	; (8008fc8 <disk_ioctl+0x38>)
 8008fb0:	440a      	add	r2, r1
 8008fb2:	7a10      	ldrb	r0, [r2, #8]
 8008fb4:	79b9      	ldrb	r1, [r7, #6]
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	4798      	blx	r3
 8008fba:	4603      	mov	r3, r0
 8008fbc:	73fb      	strb	r3, [r7, #15]
  return res;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	20004a84 	.word	0x20004a84

08008fcc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008fdc:	89fb      	ldrh	r3, [r7, #14]
 8008fde:	021b      	lsls	r3, r3, #8
 8008fe0:	b21a      	sxth	r2, r3
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	b21b      	sxth	r3, r3
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	b21b      	sxth	r3, r3
 8008fec:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008fee:	89fb      	ldrh	r3, [r7, #14]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	3303      	adds	r3, #3
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	3202      	adds	r2, #2
 8009014:	7812      	ldrb	r2, [r2, #0]
 8009016:	4313      	orrs	r3, r2
 8009018:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	021b      	lsls	r3, r3, #8
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	3201      	adds	r2, #1
 8009022:	7812      	ldrb	r2, [r2, #0]
 8009024:	4313      	orrs	r3, r2
 8009026:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	021b      	lsls	r3, r3, #8
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	7812      	ldrb	r2, [r2, #0]
 8009030:	4313      	orrs	r3, r2
 8009032:	60fb      	str	r3, [r7, #12]
	return rv;
 8009034:	68fb      	ldr	r3, [r7, #12]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009042:	b480      	push	{r7}
 8009044:	b083      	sub	sp, #12
 8009046:	af00      	add	r7, sp, #0
 8009048:	6078      	str	r0, [r7, #4]
 800904a:	460b      	mov	r3, r1
 800904c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	887a      	ldrh	r2, [r7, #2]
 8009056:	b2d2      	uxtb	r2, r2
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	887b      	ldrh	r3, [r7, #2]
 800905c:	0a1b      	lsrs	r3, r3, #8
 800905e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	607a      	str	r2, [r7, #4]
 8009066:	887a      	ldrh	r2, [r7, #2]
 8009068:	b2d2      	uxtb	r2, r2
 800906a:	701a      	strb	r2, [r3, #0]
}
 800906c:	bf00      	nop
 800906e:	370c      	adds	r7, #12
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr

08009078 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	607a      	str	r2, [r7, #4]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	701a      	strb	r2, [r3, #0]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	0a1b      	lsrs	r3, r3, #8
 8009092:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	607a      	str	r2, [r7, #4]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	b2d2      	uxtb	r2, r2
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	0a1b      	lsrs	r3, r3, #8
 80090a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	1c5a      	adds	r2, r3, #1
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	b2d2      	uxtb	r2, r2
 80090b0:	701a      	strb	r2, [r3, #0]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	0a1b      	lsrs	r3, r3, #8
 80090b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	607a      	str	r2, [r7, #4]
 80090be:	683a      	ldr	r2, [r7, #0]
 80090c0:	b2d2      	uxtb	r2, r2
 80090c2:	701a      	strb	r2, [r3, #0]
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00d      	beq.n	8009106 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	1c53      	adds	r3, r2, #1
 80090ee:	613b      	str	r3, [r7, #16]
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	1c59      	adds	r1, r3, #1
 80090f4:	6179      	str	r1, [r7, #20]
 80090f6:	7812      	ldrb	r2, [r2, #0]
 80090f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	607b      	str	r3, [r7, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1f1      	bne.n	80090ea <mem_cpy+0x1a>
	}
}
 8009106:	bf00      	nop
 8009108:	371c      	adds	r7, #28
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr

08009112 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009112:	b480      	push	{r7}
 8009114:	b087      	sub	sp, #28
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	1c5a      	adds	r2, r3, #1
 8009126:	617a      	str	r2, [r7, #20]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	b2d2      	uxtb	r2, r2
 800912c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	3b01      	subs	r3, #1
 8009132:	607b      	str	r3, [r7, #4]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1f3      	bne.n	8009122 <mem_set+0x10>
}
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	371c      	adds	r7, #28
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr

08009148 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009148:	b480      	push	{r7}
 800914a:	b089      	sub	sp, #36	; 0x24
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	61fb      	str	r3, [r7, #28]
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	1c5a      	adds	r2, r3, #1
 8009164:	61fa      	str	r2, [r7, #28]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	4619      	mov	r1, r3
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	61ba      	str	r2, [r7, #24]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	1acb      	subs	r3, r1, r3
 8009174:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	3b01      	subs	r3, #1
 800917a:	607b      	str	r3, [r7, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d002      	beq.n	8009188 <mem_cmp+0x40>
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0eb      	beq.n	8009160 <mem_cmp+0x18>

	return r;
 8009188:	697b      	ldr	r3, [r7, #20]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3724      	adds	r7, #36	; 0x24
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009196:	b480      	push	{r7}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80091a0:	e002      	b.n	80091a8 <chk_chr+0x12>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3301      	adds	r3, #1
 80091a6:	607b      	str	r3, [r7, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <chk_chr+0x26>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	781b      	ldrb	r3, [r3, #0]
 80091b4:	461a      	mov	r2, r3
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d1f2      	bne.n	80091a2 <chk_chr+0xc>
	return *str;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	781b      	ldrb	r3, [r3, #0]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80091d6:	2300      	movs	r3, #0
 80091d8:	60bb      	str	r3, [r7, #8]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	60fb      	str	r3, [r7, #12]
 80091de:	e029      	b.n	8009234 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80091e0:	4a27      	ldr	r2, [pc, #156]	; (8009280 <chk_lock+0xb4>)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	011b      	lsls	r3, r3, #4
 80091e6:	4413      	add	r3, r2
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d01d      	beq.n	800922a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80091ee:	4a24      	ldr	r2, [pc, #144]	; (8009280 <chk_lock+0xb4>)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	4413      	add	r3, r2
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d116      	bne.n	800922e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009200:	4a1f      	ldr	r2, [pc, #124]	; (8009280 <chk_lock+0xb4>)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	011b      	lsls	r3, r3, #4
 8009206:	4413      	add	r3, r2
 8009208:	3304      	adds	r3, #4
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009210:	429a      	cmp	r2, r3
 8009212:	d10c      	bne.n	800922e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009214:	4a1a      	ldr	r2, [pc, #104]	; (8009280 <chk_lock+0xb4>)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	011b      	lsls	r3, r3, #4
 800921a:	4413      	add	r3, r2
 800921c:	3308      	adds	r3, #8
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009224:	429a      	cmp	r2, r3
 8009226:	d102      	bne.n	800922e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009228:	e007      	b.n	800923a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800922a:	2301      	movs	r3, #1
 800922c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3301      	adds	r3, #1
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b01      	cmp	r3, #1
 8009238:	d9d2      	bls.n	80091e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b02      	cmp	r3, #2
 800923e:	d109      	bne.n	8009254 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d102      	bne.n	800924c <chk_lock+0x80>
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b02      	cmp	r3, #2
 800924a:	d101      	bne.n	8009250 <chk_lock+0x84>
 800924c:	2300      	movs	r3, #0
 800924e:	e010      	b.n	8009272 <chk_lock+0xa6>
 8009250:	2312      	movs	r3, #18
 8009252:	e00e      	b.n	8009272 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d108      	bne.n	800926c <chk_lock+0xa0>
 800925a:	4a09      	ldr	r2, [pc, #36]	; (8009280 <chk_lock+0xb4>)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	4413      	add	r3, r2
 8009262:	330c      	adds	r3, #12
 8009264:	881b      	ldrh	r3, [r3, #0]
 8009266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800926a:	d101      	bne.n	8009270 <chk_lock+0xa4>
 800926c:	2310      	movs	r3, #16
 800926e:	e000      	b.n	8009272 <chk_lock+0xa6>
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	20004a64 	.word	0x20004a64

08009284 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800928a:	2300      	movs	r3, #0
 800928c:	607b      	str	r3, [r7, #4]
 800928e:	e002      	b.n	8009296 <enq_lock+0x12>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	3301      	adds	r3, #1
 8009294:	607b      	str	r3, [r7, #4]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d806      	bhi.n	80092aa <enq_lock+0x26>
 800929c:	4a09      	ldr	r2, [pc, #36]	; (80092c4 <enq_lock+0x40>)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	011b      	lsls	r3, r3, #4
 80092a2:	4413      	add	r3, r2
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1f2      	bne.n	8009290 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	bf14      	ite	ne
 80092b0:	2301      	movne	r3, #1
 80092b2:	2300      	moveq	r3, #0
 80092b4:	b2db      	uxtb	r3, r3
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20004a64 	.word	0x20004a64

080092c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80092d2:	2300      	movs	r3, #0
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	e01f      	b.n	8009318 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80092d8:	4a41      	ldr	r2, [pc, #260]	; (80093e0 <inc_lock+0x118>)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	4413      	add	r3, r2
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d113      	bne.n	8009312 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80092ea:	4a3d      	ldr	r2, [pc, #244]	; (80093e0 <inc_lock+0x118>)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	011b      	lsls	r3, r3, #4
 80092f0:	4413      	add	r3, r2
 80092f2:	3304      	adds	r3, #4
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d109      	bne.n	8009312 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80092fe:	4a38      	ldr	r2, [pc, #224]	; (80093e0 <inc_lock+0x118>)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	011b      	lsls	r3, r3, #4
 8009304:	4413      	add	r3, r2
 8009306:	3308      	adds	r3, #8
 8009308:	681a      	ldr	r2, [r3, #0]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800930e:	429a      	cmp	r2, r3
 8009310:	d006      	beq.n	8009320 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3301      	adds	r3, #1
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d9dc      	bls.n	80092d8 <inc_lock+0x10>
 800931e:	e000      	b.n	8009322 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009320:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b02      	cmp	r3, #2
 8009326:	d132      	bne.n	800938e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	e002      	b.n	8009334 <inc_lock+0x6c>
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3301      	adds	r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d806      	bhi.n	8009348 <inc_lock+0x80>
 800933a:	4a29      	ldr	r2, [pc, #164]	; (80093e0 <inc_lock+0x118>)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	4413      	add	r3, r2
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1f2      	bne.n	800932e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b02      	cmp	r3, #2
 800934c:	d101      	bne.n	8009352 <inc_lock+0x8a>
 800934e:	2300      	movs	r3, #0
 8009350:	e040      	b.n	80093d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	4922      	ldr	r1, [pc, #136]	; (80093e0 <inc_lock+0x118>)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	440b      	add	r3, r1
 800935e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	491e      	ldr	r1, [pc, #120]	; (80093e0 <inc_lock+0x118>)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	011b      	lsls	r3, r3, #4
 800936a:	440b      	add	r3, r1
 800936c:	3304      	adds	r3, #4
 800936e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	695a      	ldr	r2, [r3, #20]
 8009374:	491a      	ldr	r1, [pc, #104]	; (80093e0 <inc_lock+0x118>)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	011b      	lsls	r3, r3, #4
 800937a:	440b      	add	r3, r1
 800937c:	3308      	adds	r3, #8
 800937e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009380:	4a17      	ldr	r2, [pc, #92]	; (80093e0 <inc_lock+0x118>)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	011b      	lsls	r3, r3, #4
 8009386:	4413      	add	r3, r2
 8009388:	330c      	adds	r3, #12
 800938a:	2200      	movs	r2, #0
 800938c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d009      	beq.n	80093a8 <inc_lock+0xe0>
 8009394:	4a12      	ldr	r2, [pc, #72]	; (80093e0 <inc_lock+0x118>)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	011b      	lsls	r3, r3, #4
 800939a:	4413      	add	r3, r2
 800939c:	330c      	adds	r3, #12
 800939e:	881b      	ldrh	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <inc_lock+0xe0>
 80093a4:	2300      	movs	r3, #0
 80093a6:	e015      	b.n	80093d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d108      	bne.n	80093c0 <inc_lock+0xf8>
 80093ae:	4a0c      	ldr	r2, [pc, #48]	; (80093e0 <inc_lock+0x118>)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	011b      	lsls	r3, r3, #4
 80093b4:	4413      	add	r3, r2
 80093b6:	330c      	adds	r3, #12
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	3301      	adds	r3, #1
 80093bc:	b29a      	uxth	r2, r3
 80093be:	e001      	b.n	80093c4 <inc_lock+0xfc>
 80093c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093c4:	4906      	ldr	r1, [pc, #24]	; (80093e0 <inc_lock+0x118>)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	011b      	lsls	r3, r3, #4
 80093ca:	440b      	add	r3, r1
 80093cc:	330c      	adds	r3, #12
 80093ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3301      	adds	r3, #1
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	20004a64 	.word	0x20004a64

080093e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	3b01      	subs	r3, #1
 80093f0:	607b      	str	r3, [r7, #4]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d825      	bhi.n	8009444 <dec_lock+0x60>
		n = Files[i].ctr;
 80093f8:	4a17      	ldr	r2, [pc, #92]	; (8009458 <dec_lock+0x74>)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	011b      	lsls	r3, r3, #4
 80093fe:	4413      	add	r3, r2
 8009400:	330c      	adds	r3, #12
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009406:	89fb      	ldrh	r3, [r7, #14]
 8009408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800940c:	d101      	bne.n	8009412 <dec_lock+0x2e>
 800940e:	2300      	movs	r3, #0
 8009410:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009412:	89fb      	ldrh	r3, [r7, #14]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <dec_lock+0x3a>
 8009418:	89fb      	ldrh	r3, [r7, #14]
 800941a:	3b01      	subs	r3, #1
 800941c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800941e:	4a0e      	ldr	r2, [pc, #56]	; (8009458 <dec_lock+0x74>)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	011b      	lsls	r3, r3, #4
 8009424:	4413      	add	r3, r2
 8009426:	330c      	adds	r3, #12
 8009428:	89fa      	ldrh	r2, [r7, #14]
 800942a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800942c:	89fb      	ldrh	r3, [r7, #14]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d105      	bne.n	800943e <dec_lock+0x5a>
 8009432:	4a09      	ldr	r2, [pc, #36]	; (8009458 <dec_lock+0x74>)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	011b      	lsls	r3, r3, #4
 8009438:	4413      	add	r3, r2
 800943a:	2200      	movs	r2, #0
 800943c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800943e:	2300      	movs	r3, #0
 8009440:	737b      	strb	r3, [r7, #13]
 8009442:	e001      	b.n	8009448 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009444:	2302      	movs	r3, #2
 8009446:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009448:	7b7b      	ldrb	r3, [r7, #13]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	20004a64 	.word	0x20004a64

0800945c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009464:	2300      	movs	r3, #0
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	e010      	b.n	800948c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800946a:	4a0d      	ldr	r2, [pc, #52]	; (80094a0 <clear_lock+0x44>)
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	4413      	add	r3, r2
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	429a      	cmp	r2, r3
 8009478:	d105      	bne.n	8009486 <clear_lock+0x2a>
 800947a:	4a09      	ldr	r2, [pc, #36]	; (80094a0 <clear_lock+0x44>)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	4413      	add	r3, r2
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3301      	adds	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d9eb      	bls.n	800946a <clear_lock+0xe>
	}
}
 8009492:	bf00      	nop
 8009494:	bf00      	nop
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	20004a64 	.word	0x20004a64

080094a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b086      	sub	sp, #24
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	78db      	ldrb	r3, [r3, #3]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d034      	beq.n	8009522 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	7858      	ldrb	r0, [r3, #1]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094c8:	2301      	movs	r3, #1
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	f7ff fd40 	bl	8008f50 <disk_write>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <sync_window+0x38>
			res = FR_DISK_ERR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	73fb      	strb	r3, [r7, #15]
 80094da:	e022      	b.n	8009522 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	1ad2      	subs	r2, r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	699b      	ldr	r3, [r3, #24]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d217      	bcs.n	8009522 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	789b      	ldrb	r3, [r3, #2]
 80094f6:	613b      	str	r3, [r7, #16]
 80094f8:	e010      	b.n	800951c <sync_window+0x78>
					wsect += fs->fsize;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	697a      	ldr	r2, [r7, #20]
 8009500:	4413      	add	r3, r2
 8009502:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	7858      	ldrb	r0, [r3, #1]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800950e:	2301      	movs	r3, #1
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	f7ff fd1d 	bl	8008f50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	3b01      	subs	r3, #1
 800951a:	613b      	str	r3, [r7, #16]
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d8eb      	bhi.n	80094fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009522:	7bfb      	ldrb	r3, [r7, #15]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	429a      	cmp	r2, r3
 8009542:	d01b      	beq.n	800957c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff ffad 	bl	80094a4 <sync_window>
 800954a:	4603      	mov	r3, r0
 800954c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d113      	bne.n	800957c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	7858      	ldrb	r0, [r3, #1]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800955e:	2301      	movs	r3, #1
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	f7ff fcd5 	bl	8008f10 <disk_read>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d004      	beq.n	8009576 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800956c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009570:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009572:	2301      	movs	r3, #1
 8009574:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800957c:	7bfb      	ldrb	r3, [r7, #15]
}
 800957e:	4618      	mov	r0, r3
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
	...

08009588 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff ff87 	bl	80094a4 <sync_window>
 8009596:	4603      	mov	r3, r0
 8009598:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d158      	bne.n	8009652 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b03      	cmp	r3, #3
 80095a6:	d148      	bne.n	800963a <sync_fs+0xb2>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	791b      	ldrb	r3, [r3, #4]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d144      	bne.n	800963a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	3330      	adds	r3, #48	; 0x30
 80095b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095b8:	2100      	movs	r1, #0
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff fda9 	bl	8009112 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	3330      	adds	r3, #48	; 0x30
 80095c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80095c8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7ff fd38 	bl	8009042 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	3330      	adds	r3, #48	; 0x30
 80095d6:	4921      	ldr	r1, [pc, #132]	; (800965c <sync_fs+0xd4>)
 80095d8:	4618      	mov	r0, r3
 80095da:	f7ff fd4d 	bl	8009078 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	3330      	adds	r3, #48	; 0x30
 80095e2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80095e6:	491e      	ldr	r1, [pc, #120]	; (8009660 <sync_fs+0xd8>)
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff fd45 	bl	8009078 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	3330      	adds	r3, #48	; 0x30
 80095f2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f7ff fd3b 	bl	8009078 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	3330      	adds	r3, #48	; 0x30
 8009606:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68db      	ldr	r3, [r3, #12]
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f7ff fd31 	bl	8009078 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	1c5a      	adds	r2, r3, #1
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	7858      	ldrb	r0, [r3, #1]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962e:	2301      	movs	r3, #1
 8009630:	f7ff fc8e 	bl	8008f50 <disk_write>
			fs->fsi_flag = 0;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	785b      	ldrb	r3, [r3, #1]
 800963e:	2200      	movs	r2, #0
 8009640:	2100      	movs	r1, #0
 8009642:	4618      	mov	r0, r3
 8009644:	f7ff fca4 	bl	8008f90 <disk_ioctl>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <sync_fs+0xca>
 800964e:	2301      	movs	r3, #1
 8009650:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009652:	7bfb      	ldrb	r3, [r7, #15]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	41615252 	.word	0x41615252
 8009660:	61417272 	.word	0x61417272

08009664 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	3b02      	subs	r3, #2
 8009672:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	695b      	ldr	r3, [r3, #20]
 8009678:	3b02      	subs	r3, #2
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	429a      	cmp	r2, r3
 800967e:	d301      	bcc.n	8009684 <clust2sect+0x20>
 8009680:	2300      	movs	r3, #0
 8009682:	e008      	b.n	8009696 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	895b      	ldrh	r3, [r3, #10]
 8009688:	461a      	mov	r2, r3
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	fb03 f202 	mul.w	r2, r3, r2
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009694:	4413      	add	r3, r2
}
 8009696:	4618      	mov	r0, r3
 8009698:	370c      	adds	r7, #12
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr

080096a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b086      	sub	sp, #24
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
 80096aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d904      	bls.n	80096c2 <get_fat+0x20>
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	683a      	ldr	r2, [r7, #0]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d302      	bcc.n	80096c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80096c2:	2301      	movs	r3, #1
 80096c4:	617b      	str	r3, [r7, #20]
 80096c6:	e08f      	b.n	80097e8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80096c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b03      	cmp	r3, #3
 80096d4:	d062      	beq.n	800979c <get_fat+0xfa>
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	dc7c      	bgt.n	80097d4 <get_fat+0x132>
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d002      	beq.n	80096e4 <get_fat+0x42>
 80096de:	2b02      	cmp	r3, #2
 80096e0:	d042      	beq.n	8009768 <get_fat+0xc6>
 80096e2:	e077      	b.n	80097d4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	60fb      	str	r3, [r7, #12]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	085b      	lsrs	r3, r3, #1
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	4413      	add	r3, r2
 80096f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6a1a      	ldr	r2, [r3, #32]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	0a5b      	lsrs	r3, r3, #9
 80096fa:	4413      	add	r3, r2
 80096fc:	4619      	mov	r1, r3
 80096fe:	6938      	ldr	r0, [r7, #16]
 8009700:	f7ff ff14 	bl	800952c <move_window>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d167      	bne.n	80097da <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	1c5a      	adds	r2, r3, #1
 800970e:	60fa      	str	r2, [r7, #12]
 8009710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009714:	693a      	ldr	r2, [r7, #16]
 8009716:	4413      	add	r3, r2
 8009718:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800971c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	6a1a      	ldr	r2, [r3, #32]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	0a5b      	lsrs	r3, r3, #9
 8009726:	4413      	add	r3, r2
 8009728:	4619      	mov	r1, r3
 800972a:	6938      	ldr	r0, [r7, #16]
 800972c:	f7ff fefe 	bl	800952c <move_window>
 8009730:	4603      	mov	r3, r0
 8009732:	2b00      	cmp	r3, #0
 8009734:	d153      	bne.n	80097de <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973c:	693a      	ldr	r2, [r7, #16]
 800973e:	4413      	add	r3, r2
 8009740:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009744:	021b      	lsls	r3, r3, #8
 8009746:	461a      	mov	r2, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	4313      	orrs	r3, r2
 800974c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <get_fat+0xbc>
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	091b      	lsrs	r3, r3, #4
 800975c:	e002      	b.n	8009764 <get_fat+0xc2>
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009764:	617b      	str	r3, [r7, #20]
			break;
 8009766:	e03f      	b.n	80097e8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	6a1a      	ldr	r2, [r3, #32]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	0a1b      	lsrs	r3, r3, #8
 8009770:	4413      	add	r3, r2
 8009772:	4619      	mov	r1, r3
 8009774:	6938      	ldr	r0, [r7, #16]
 8009776:	f7ff fed9 	bl	800952c <move_window>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d130      	bne.n	80097e2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	005b      	lsls	r3, r3, #1
 800978a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800978e:	4413      	add	r3, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f7ff fc1b 	bl	8008fcc <ld_word>
 8009796:	4603      	mov	r3, r0
 8009798:	617b      	str	r3, [r7, #20]
			break;
 800979a:	e025      	b.n	80097e8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	6a1a      	ldr	r2, [r3, #32]
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	09db      	lsrs	r3, r3, #7
 80097a4:	4413      	add	r3, r2
 80097a6:	4619      	mov	r1, r3
 80097a8:	6938      	ldr	r0, [r7, #16]
 80097aa:	f7ff febf 	bl	800952c <move_window>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d118      	bne.n	80097e6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80097c2:	4413      	add	r3, r2
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fc19 	bl	8008ffc <ld_dword>
 80097ca:	4603      	mov	r3, r0
 80097cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80097d0:	617b      	str	r3, [r7, #20]
			break;
 80097d2:	e009      	b.n	80097e8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80097d4:	2301      	movs	r3, #1
 80097d6:	617b      	str	r3, [r7, #20]
 80097d8:	e006      	b.n	80097e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097da:	bf00      	nop
 80097dc:	e004      	b.n	80097e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097de:	bf00      	nop
 80097e0:	e002      	b.n	80097e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80097e2:	bf00      	nop
 80097e4:	e000      	b.n	80097e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80097e6:	bf00      	nop
		}
	}

	return val;
 80097e8:	697b      	ldr	r3, [r7, #20]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3718      	adds	r7, #24
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80097f2:	b590      	push	{r4, r7, lr}
 80097f4:	b089      	sub	sp, #36	; 0x24
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80097fe:	2302      	movs	r3, #2
 8009800:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b01      	cmp	r3, #1
 8009806:	f240 80d2 	bls.w	80099ae <put_fat+0x1bc>
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	695b      	ldr	r3, [r3, #20]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	429a      	cmp	r2, r3
 8009812:	f080 80cc 	bcs.w	80099ae <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	2b03      	cmp	r3, #3
 800981c:	f000 8096 	beq.w	800994c <put_fat+0x15a>
 8009820:	2b03      	cmp	r3, #3
 8009822:	f300 80cd 	bgt.w	80099c0 <put_fat+0x1ce>
 8009826:	2b01      	cmp	r3, #1
 8009828:	d002      	beq.n	8009830 <put_fat+0x3e>
 800982a:	2b02      	cmp	r3, #2
 800982c:	d06e      	beq.n	800990c <put_fat+0x11a>
 800982e:	e0c7      	b.n	80099c0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	61bb      	str	r3, [r7, #24]
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	085b      	lsrs	r3, r3, #1
 8009838:	69ba      	ldr	r2, [r7, #24]
 800983a:	4413      	add	r3, r2
 800983c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6a1a      	ldr	r2, [r3, #32]
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	0a5b      	lsrs	r3, r3, #9
 8009846:	4413      	add	r3, r2
 8009848:	4619      	mov	r1, r3
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f7ff fe6e 	bl	800952c <move_window>
 8009850:	4603      	mov	r3, r0
 8009852:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009854:	7ffb      	ldrb	r3, [r7, #31]
 8009856:	2b00      	cmp	r3, #0
 8009858:	f040 80ab 	bne.w	80099b2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	1c59      	adds	r1, r3, #1
 8009866:	61b9      	str	r1, [r7, #24]
 8009868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986c:	4413      	add	r3, r2
 800986e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00d      	beq.n	8009896 <put_fat+0xa4>
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	b25b      	sxtb	r3, r3
 8009880:	f003 030f 	and.w	r3, r3, #15
 8009884:	b25a      	sxtb	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	b2db      	uxtb	r3, r3
 800988a:	011b      	lsls	r3, r3, #4
 800988c:	b25b      	sxtb	r3, r3
 800988e:	4313      	orrs	r3, r2
 8009890:	b25b      	sxtb	r3, r3
 8009892:	b2db      	uxtb	r3, r3
 8009894:	e001      	b.n	800989a <put_fat+0xa8>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2201      	movs	r2, #1
 80098a2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6a1a      	ldr	r2, [r3, #32]
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	0a5b      	lsrs	r3, r3, #9
 80098ac:	4413      	add	r3, r2
 80098ae:	4619      	mov	r1, r3
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7ff fe3b 	bl	800952c <move_window>
 80098b6:	4603      	mov	r3, r0
 80098b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80098ba:	7ffb      	ldrb	r3, [r7, #31]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d17a      	bne.n	80099b6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098cc:	4413      	add	r3, r2
 80098ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	f003 0301 	and.w	r3, r3, #1
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d003      	beq.n	80098e2 <put_fat+0xf0>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	091b      	lsrs	r3, r3, #4
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	e00e      	b.n	8009900 <put_fat+0x10e>
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	b25b      	sxtb	r3, r3
 80098e8:	f023 030f 	bic.w	r3, r3, #15
 80098ec:	b25a      	sxtb	r2, r3
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	0a1b      	lsrs	r3, r3, #8
 80098f2:	b25b      	sxtb	r3, r3
 80098f4:	f003 030f 	and.w	r3, r3, #15
 80098f8:	b25b      	sxtb	r3, r3
 80098fa:	4313      	orrs	r3, r2
 80098fc:	b25b      	sxtb	r3, r3
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2201      	movs	r2, #1
 8009908:	70da      	strb	r2, [r3, #3]
			break;
 800990a:	e059      	b.n	80099c0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6a1a      	ldr	r2, [r3, #32]
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	0a1b      	lsrs	r3, r3, #8
 8009914:	4413      	add	r3, r2
 8009916:	4619      	mov	r1, r3
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f7ff fe07 	bl	800952c <move_window>
 800991e:	4603      	mov	r3, r0
 8009920:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009922:	7ffb      	ldrb	r3, [r7, #31]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d148      	bne.n	80099ba <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	005b      	lsls	r3, r3, #1
 8009932:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009936:	4413      	add	r3, r2
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	b292      	uxth	r2, r2
 800993c:	4611      	mov	r1, r2
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff fb7f 	bl	8009042 <st_word>
			fs->wflag = 1;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2201      	movs	r2, #1
 8009948:	70da      	strb	r2, [r3, #3]
			break;
 800994a:	e039      	b.n	80099c0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6a1a      	ldr	r2, [r3, #32]
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	09db      	lsrs	r3, r3, #7
 8009954:	4413      	add	r3, r2
 8009956:	4619      	mov	r1, r3
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f7ff fde7 	bl	800952c <move_window>
 800995e:	4603      	mov	r3, r0
 8009960:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009962:	7ffb      	ldrb	r3, [r7, #31]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d12a      	bne.n	80099be <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800997c:	4413      	add	r3, r2
 800997e:	4618      	mov	r0, r3
 8009980:	f7ff fb3c 	bl	8008ffc <ld_dword>
 8009984:	4603      	mov	r3, r0
 8009986:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800998a:	4323      	orrs	r3, r4
 800998c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800999c:	4413      	add	r3, r2
 800999e:	6879      	ldr	r1, [r7, #4]
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7ff fb69 	bl	8009078 <st_dword>
			fs->wflag = 1;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2201      	movs	r2, #1
 80099aa:	70da      	strb	r2, [r3, #3]
			break;
 80099ac:	e008      	b.n	80099c0 <put_fat+0x1ce>
		}
	}
 80099ae:	bf00      	nop
 80099b0:	e006      	b.n	80099c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80099b2:	bf00      	nop
 80099b4:	e004      	b.n	80099c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80099b6:	bf00      	nop
 80099b8:	e002      	b.n	80099c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80099ba:	bf00      	nop
 80099bc:	e000      	b.n	80099c0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80099be:	bf00      	nop
	return res;
 80099c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3724      	adds	r7, #36	; 0x24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd90      	pop	{r4, r7, pc}

080099ca <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b088      	sub	sp, #32
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d904      	bls.n	80099f0 <remove_chain+0x26>
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	68ba      	ldr	r2, [r7, #8]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d301      	bcc.n	80099f4 <remove_chain+0x2a>
 80099f0:	2302      	movs	r3, #2
 80099f2:	e04b      	b.n	8009a8c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d00c      	beq.n	8009a14 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80099fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	69b8      	ldr	r0, [r7, #24]
 8009a02:	f7ff fef6 	bl	80097f2 <put_fat>
 8009a06:	4603      	mov	r3, r0
 8009a08:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009a0a:	7ffb      	ldrb	r3, [r7, #31]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d001      	beq.n	8009a14 <remove_chain+0x4a>
 8009a10:	7ffb      	ldrb	r3, [r7, #31]
 8009a12:	e03b      	b.n	8009a8c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009a14:	68b9      	ldr	r1, [r7, #8]
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7ff fe43 	bl	80096a2 <get_fat>
 8009a1c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d031      	beq.n	8009a88 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d101      	bne.n	8009a2e <remove_chain+0x64>
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	e02e      	b.n	8009a8c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a34:	d101      	bne.n	8009a3a <remove_chain+0x70>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e028      	b.n	8009a8c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	68b9      	ldr	r1, [r7, #8]
 8009a3e:	69b8      	ldr	r0, [r7, #24]
 8009a40:	f7ff fed7 	bl	80097f2 <put_fat>
 8009a44:	4603      	mov	r3, r0
 8009a46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009a48:	7ffb      	ldrb	r3, [r7, #31]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d001      	beq.n	8009a52 <remove_chain+0x88>
 8009a4e:	7ffb      	ldrb	r3, [r7, #31]
 8009a50:	e01c      	b.n	8009a8c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	691a      	ldr	r2, [r3, #16]
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	3b02      	subs	r3, #2
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d20b      	bcs.n	8009a78 <remove_chain+0xae>
			fs->free_clst++;
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	791b      	ldrb	r3, [r3, #4]
 8009a6e:	f043 0301 	orr.w	r3, r3, #1
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	695b      	ldr	r3, [r3, #20]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d3c6      	bcc.n	8009a14 <remove_chain+0x4a>
 8009a86:	e000      	b.n	8009a8a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009a88:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d10d      	bne.n	8009ac6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d004      	beq.n	8009ac0 <create_chain+0x2c>
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	695b      	ldr	r3, [r3, #20]
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d31b      	bcc.n	8009af8 <create_chain+0x64>
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	61bb      	str	r3, [r7, #24]
 8009ac4:	e018      	b.n	8009af8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff fdea 	bl	80096a2 <get_fat>
 8009ace:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d801      	bhi.n	8009ada <create_chain+0x46>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e070      	b.n	8009bbc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ae0:	d101      	bne.n	8009ae6 <create_chain+0x52>
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	e06a      	b.n	8009bbc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d201      	bcs.n	8009af4 <create_chain+0x60>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	e063      	b.n	8009bbc <create_chain+0x128>
		scl = clst;
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	3301      	adds	r3, #1
 8009b00:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	69fa      	ldr	r2, [r7, #28]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d307      	bcc.n	8009b1c <create_chain+0x88>
				ncl = 2;
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009b10:	69fa      	ldr	r2, [r7, #28]
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d901      	bls.n	8009b1c <create_chain+0x88>
 8009b18:	2300      	movs	r3, #0
 8009b1a:	e04f      	b.n	8009bbc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009b1c:	69f9      	ldr	r1, [r7, #28]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7ff fdbf 	bl	80096a2 <get_fat>
 8009b24:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00e      	beq.n	8009b4a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d003      	beq.n	8009b3a <create_chain+0xa6>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b38:	d101      	bne.n	8009b3e <create_chain+0xaa>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	e03e      	b.n	8009bbc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009b3e:	69fa      	ldr	r2, [r7, #28]
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d1da      	bne.n	8009afc <create_chain+0x68>
 8009b46:	2300      	movs	r3, #0
 8009b48:	e038      	b.n	8009bbc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009b4a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b50:	69f9      	ldr	r1, [r7, #28]
 8009b52:	6938      	ldr	r0, [r7, #16]
 8009b54:	f7ff fe4d 	bl	80097f2 <put_fat>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009b5c:	7dfb      	ldrb	r3, [r7, #23]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d109      	bne.n	8009b76 <create_chain+0xe2>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d006      	beq.n	8009b76 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009b68:	69fa      	ldr	r2, [r7, #28]
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6938      	ldr	r0, [r7, #16]
 8009b6e:	f7ff fe40 	bl	80097f2 <put_fat>
 8009b72:	4603      	mov	r3, r0
 8009b74:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009b76:	7dfb      	ldrb	r3, [r7, #23]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d116      	bne.n	8009baa <create_chain+0x116>
		fs->last_clst = ncl;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	69fa      	ldr	r2, [r7, #28]
 8009b80:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	691a      	ldr	r2, [r3, #16]
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	3b02      	subs	r3, #2
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d804      	bhi.n	8009b9a <create_chain+0x106>
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	1e5a      	subs	r2, r3, #1
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	791b      	ldrb	r3, [r3, #4]
 8009b9e:	f043 0301 	orr.w	r3, r3, #1
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	711a      	strb	r2, [r3, #4]
 8009ba8:	e007      	b.n	8009bba <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d102      	bne.n	8009bb6 <create_chain+0x122>
 8009bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009bb4:	e000      	b.n	8009bb8 <create_chain+0x124>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009bba:	69fb      	ldr	r3, [r7, #28]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3720      	adds	r7, #32
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd8:	3304      	adds	r3, #4
 8009bda:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	0a5b      	lsrs	r3, r3, #9
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	8952      	ldrh	r2, [r2, #10]
 8009be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009be8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	1d1a      	adds	r2, r3, #4
 8009bee:	613a      	str	r2, [r7, #16]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <clmt_clust+0x3a>
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	e010      	b.n	8009c20 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009bfe:	697a      	ldr	r2, [r7, #20]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d307      	bcc.n	8009c16 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009c06:	697a      	ldr	r2, [r7, #20]
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	617b      	str	r3, [r7, #20]
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	3304      	adds	r3, #4
 8009c12:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009c14:	e7e9      	b.n	8009bea <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009c16:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	4413      	add	r3, r2
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b086      	sub	sp, #24
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c42:	d204      	bcs.n	8009c4e <dir_sdi+0x22>
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	f003 031f 	and.w	r3, r3, #31
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009c4e:	2302      	movs	r3, #2
 8009c50:	e063      	b.n	8009d1a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d106      	bne.n	8009c72 <dir_sdi+0x46>
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d902      	bls.n	8009c72 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d10c      	bne.n	8009c92 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	095b      	lsrs	r3, r3, #5
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	8912      	ldrh	r2, [r2, #8]
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d301      	bcc.n	8009c88 <dir_sdi+0x5c>
 8009c84:	2302      	movs	r3, #2
 8009c86:	e048      	b.n	8009d1a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	61da      	str	r2, [r3, #28]
 8009c90:	e029      	b.n	8009ce6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	895b      	ldrh	r3, [r3, #10]
 8009c96:	025b      	lsls	r3, r3, #9
 8009c98:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009c9a:	e019      	b.n	8009cd0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6979      	ldr	r1, [r7, #20]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f7ff fcfe 	bl	80096a2 <get_fat>
 8009ca6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cae:	d101      	bne.n	8009cb4 <dir_sdi+0x88>
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e032      	b.n	8009d1a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d904      	bls.n	8009cc4 <dir_sdi+0x98>
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d301      	bcc.n	8009cc8 <dir_sdi+0x9c>
 8009cc4:	2302      	movs	r3, #2
 8009cc6:	e028      	b.n	8009d1a <dir_sdi+0xee>
			ofs -= csz;
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d2e1      	bcs.n	8009c9c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009cd8:	6979      	ldr	r1, [r7, #20]
 8009cda:	6938      	ldr	r0, [r7, #16]
 8009cdc:	f7ff fcc2 	bl	8009664 <clust2sect>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	697a      	ldr	r2, [r7, #20]
 8009cea:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <dir_sdi+0xcc>
 8009cf4:	2302      	movs	r3, #2
 8009cf6:	e010      	b.n	8009d1a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	69da      	ldr	r2, [r3, #28]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	0a5b      	lsrs	r3, r3, #9
 8009d00:	441a      	add	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d12:	441a      	add	r2, r3
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3718      	adds	r7, #24
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	3320      	adds	r3, #32
 8009d38:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d003      	beq.n	8009d4a <dir_next+0x28>
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d48:	d301      	bcc.n	8009d4e <dir_next+0x2c>
 8009d4a:	2304      	movs	r3, #4
 8009d4c:	e0aa      	b.n	8009ea4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f040 8098 	bne.w	8009e8a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	69db      	ldr	r3, [r3, #28]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	699b      	ldr	r3, [r3, #24]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10b      	bne.n	8009d84 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	8912      	ldrh	r2, [r2, #8]
 8009d74:	4293      	cmp	r3, r2
 8009d76:	f0c0 8088 	bcc.w	8009e8a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	61da      	str	r2, [r3, #28]
 8009d80:	2304      	movs	r3, #4
 8009d82:	e08f      	b.n	8009ea4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	0a5b      	lsrs	r3, r3, #9
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	8952      	ldrh	r2, [r2, #10]
 8009d8c:	3a01      	subs	r2, #1
 8009d8e:	4013      	ands	r3, r2
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d17a      	bne.n	8009e8a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	699b      	ldr	r3, [r3, #24]
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	4610      	mov	r0, r2
 8009d9e:	f7ff fc80 	bl	80096a2 <get_fat>
 8009da2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d801      	bhi.n	8009dae <dir_next+0x8c>
 8009daa:	2302      	movs	r3, #2
 8009dac:	e07a      	b.n	8009ea4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009db4:	d101      	bne.n	8009dba <dir_next+0x98>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e074      	b.n	8009ea4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d358      	bcc.n	8009e76 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d104      	bne.n	8009dd4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	61da      	str	r2, [r3, #28]
 8009dd0:	2304      	movs	r3, #4
 8009dd2:	e067      	b.n	8009ea4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	699b      	ldr	r3, [r3, #24]
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4610      	mov	r0, r2
 8009dde:	f7ff fe59 	bl	8009a94 <create_chain>
 8009de2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d101      	bne.n	8009dee <dir_next+0xcc>
 8009dea:	2307      	movs	r3, #7
 8009dec:	e05a      	b.n	8009ea4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d101      	bne.n	8009df8 <dir_next+0xd6>
 8009df4:	2302      	movs	r3, #2
 8009df6:	e055      	b.n	8009ea4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dfe:	d101      	bne.n	8009e04 <dir_next+0xe2>
 8009e00:	2301      	movs	r3, #1
 8009e02:	e04f      	b.n	8009ea4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff fb4d 	bl	80094a4 <sync_window>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d001      	beq.n	8009e14 <dir_next+0xf2>
 8009e10:	2301      	movs	r3, #1
 8009e12:	e047      	b.n	8009ea4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	3330      	adds	r3, #48	; 0x30
 8009e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e1c:	2100      	movs	r1, #0
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7ff f977 	bl	8009112 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009e24:	2300      	movs	r3, #0
 8009e26:	613b      	str	r3, [r7, #16]
 8009e28:	6979      	ldr	r1, [r7, #20]
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f7ff fc1a 	bl	8009664 <clust2sect>
 8009e30:	4602      	mov	r2, r0
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	62da      	str	r2, [r3, #44]	; 0x2c
 8009e36:	e012      	b.n	8009e5e <dir_next+0x13c>
						fs->wflag = 1;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009e3e:	68f8      	ldr	r0, [r7, #12]
 8009e40:	f7ff fb30 	bl	80094a4 <sync_window>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <dir_next+0x12c>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e02a      	b.n	8009ea4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	3301      	adds	r3, #1
 8009e52:	613b      	str	r3, [r7, #16]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	895b      	ldrh	r3, [r3, #10]
 8009e62:	461a      	mov	r2, r3
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d3e6      	bcc.n	8009e38 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	1ad2      	subs	r2, r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	697a      	ldr	r2, [r7, #20]
 8009e7a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009e7c:	6979      	ldr	r1, [r7, #20]
 8009e7e:	68f8      	ldr	r0, [r7, #12]
 8009e80:	f7ff fbf0 	bl	8009664 <clust2sect>
 8009e84:	4602      	mov	r2, r0
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68ba      	ldr	r2, [r7, #8]
 8009e8e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e9c:	441a      	add	r2, r3
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009ea2:	2300      	movs	r3, #0
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3718      	adds	r7, #24
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f7ff feb4 	bl	8009c2c <dir_sdi>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d12b      	bne.n	8009f26 <dir_alloc+0x7a>
		n = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	69db      	ldr	r3, [r3, #28]
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f7ff fb27 	bl	800952c <move_window>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009ee2:	7dfb      	ldrb	r3, [r7, #23]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d11d      	bne.n	8009f24 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2be5      	cmp	r3, #229	; 0xe5
 8009ef0:	d004      	beq.n	8009efc <dir_alloc+0x50>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6a1b      	ldr	r3, [r3, #32]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d107      	bne.n	8009f0c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	3301      	adds	r3, #1
 8009f00:	613b      	str	r3, [r7, #16]
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d102      	bne.n	8009f10 <dir_alloc+0x64>
 8009f0a:	e00c      	b.n	8009f26 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009f10:	2101      	movs	r1, #1
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7ff ff05 	bl	8009d22 <dir_next>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d0d7      	beq.n	8009ed2 <dir_alloc+0x26>
 8009f22:	e000      	b.n	8009f26 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009f24:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
 8009f28:	2b04      	cmp	r3, #4
 8009f2a:	d101      	bne.n	8009f30 <dir_alloc+0x84>
 8009f2c:	2307      	movs	r3, #7
 8009f2e:	75fb      	strb	r3, [r7, #23]
	return res;
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3718      	adds	r7, #24
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	331a      	adds	r3, #26
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7ff f83f 	bl	8008fcc <ld_word>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d109      	bne.n	8009f6e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	3314      	adds	r3, #20
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff f834 	bl	8008fcc <ld_word>
 8009f64:	4603      	mov	r3, r0
 8009f66:	041b      	lsls	r3, r3, #16
 8009f68:	68fa      	ldr	r2, [r7, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	331a      	adds	r3, #26
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	b292      	uxth	r2, r2
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7ff f857 	bl	8009042 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d109      	bne.n	8009fb0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	f103 0214 	add.w	r2, r3, #20
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	0c1b      	lsrs	r3, r3, #16
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	4619      	mov	r1, r3
 8009faa:	4610      	mov	r0, r2
 8009fac:	f7ff f849 	bl	8009042 <st_word>
	}
}
 8009fb0:	bf00      	nop
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7ff fe2f 	bl	8009c2c <dir_sdi>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009fd2:	7dfb      	ldrb	r3, [r7, #23]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <dir_find+0x24>
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
 8009fda:	e03e      	b.n	800a05a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	69db      	ldr	r3, [r3, #28]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	6938      	ldr	r0, [r7, #16]
 8009fe4:	f7ff faa2 	bl	800952c <move_window>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d12f      	bne.n	800a052 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d102      	bne.n	800a006 <dir_find+0x4e>
 800a000:	2304      	movs	r3, #4
 800a002:	75fb      	strb	r3, [r7, #23]
 800a004:	e028      	b.n	800a058 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	330b      	adds	r3, #11
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a012:	b2da      	uxtb	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	330b      	adds	r3, #11
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	f003 0308 	and.w	r3, r3, #8
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <dir_find+0x86>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a18      	ldr	r0, [r3, #32]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	3324      	adds	r3, #36	; 0x24
 800a030:	220b      	movs	r2, #11
 800a032:	4619      	mov	r1, r3
 800a034:	f7ff f888 	bl	8009148 <mem_cmp>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00b      	beq.n	800a056 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a03e:	2100      	movs	r1, #0
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7ff fe6e 	bl	8009d22 <dir_next>
 800a046:	4603      	mov	r3, r0
 800a048:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d0c5      	beq.n	8009fdc <dir_find+0x24>
 800a050:	e002      	b.n	800a058 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a052:	bf00      	nop
 800a054:	e000      	b.n	800a058 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a056:	bf00      	nop

	return res;
 800a058:	7dfb      	ldrb	r3, [r7, #23]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b084      	sub	sp, #16
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a070:	2101      	movs	r1, #1
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f7ff ff1a 	bl	8009eac <dir_alloc>
 800a078:	4603      	mov	r3, r0
 800a07a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d11c      	bne.n	800a0bc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	69db      	ldr	r3, [r3, #28]
 800a086:	4619      	mov	r1, r3
 800a088:	68b8      	ldr	r0, [r7, #8]
 800a08a:	f7ff fa4f 	bl	800952c <move_window>
 800a08e:	4603      	mov	r3, r0
 800a090:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d111      	bne.n	800a0bc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	2220      	movs	r2, #32
 800a09e:	2100      	movs	r1, #0
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7ff f836 	bl	8009112 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a18      	ldr	r0, [r3, #32]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	3324      	adds	r3, #36	; 0x24
 800a0ae:	220b      	movs	r2, #11
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	f7ff f80d 	bl	80090d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b088      	sub	sp, #32
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	60fb      	str	r3, [r7, #12]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3324      	adds	r3, #36	; 0x24
 800a0dc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a0de:	220b      	movs	r2, #11
 800a0e0:	2120      	movs	r1, #32
 800a0e2:	68b8      	ldr	r0, [r7, #8]
 800a0e4:	f7ff f815 	bl	8009112 <mem_set>
	si = i = 0; ni = 8;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	613b      	str	r3, [r7, #16]
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	61fb      	str	r3, [r7, #28]
 800a0f0:	2308      	movs	r3, #8
 800a0f2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	1c5a      	adds	r2, r3, #1
 800a0f8:	61fa      	str	r2, [r7, #28]
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a102:	7efb      	ldrb	r3, [r7, #27]
 800a104:	2b20      	cmp	r3, #32
 800a106:	d94e      	bls.n	800a1a6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a108:	7efb      	ldrb	r3, [r7, #27]
 800a10a:	2b2f      	cmp	r3, #47	; 0x2f
 800a10c:	d006      	beq.n	800a11c <create_name+0x54>
 800a10e:	7efb      	ldrb	r3, [r7, #27]
 800a110:	2b5c      	cmp	r3, #92	; 0x5c
 800a112:	d110      	bne.n	800a136 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a114:	e002      	b.n	800a11c <create_name+0x54>
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	3301      	adds	r3, #1
 800a11a:	61fb      	str	r3, [r7, #28]
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	4413      	add	r3, r2
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	2b2f      	cmp	r3, #47	; 0x2f
 800a126:	d0f6      	beq.n	800a116 <create_name+0x4e>
 800a128:	68fa      	ldr	r2, [r7, #12]
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	4413      	add	r3, r2
 800a12e:	781b      	ldrb	r3, [r3, #0]
 800a130:	2b5c      	cmp	r3, #92	; 0x5c
 800a132:	d0f0      	beq.n	800a116 <create_name+0x4e>
			break;
 800a134:	e038      	b.n	800a1a8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a136:	7efb      	ldrb	r3, [r7, #27]
 800a138:	2b2e      	cmp	r3, #46	; 0x2e
 800a13a:	d003      	beq.n	800a144 <create_name+0x7c>
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	429a      	cmp	r2, r3
 800a142:	d30c      	bcc.n	800a15e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2b0b      	cmp	r3, #11
 800a148:	d002      	beq.n	800a150 <create_name+0x88>
 800a14a:	7efb      	ldrb	r3, [r7, #27]
 800a14c:	2b2e      	cmp	r3, #46	; 0x2e
 800a14e:	d001      	beq.n	800a154 <create_name+0x8c>
 800a150:	2306      	movs	r3, #6
 800a152:	e044      	b.n	800a1de <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a154:	2308      	movs	r3, #8
 800a156:	613b      	str	r3, [r7, #16]
 800a158:	230b      	movs	r3, #11
 800a15a:	617b      	str	r3, [r7, #20]
			continue;
 800a15c:	e022      	b.n	800a1a4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a15e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a162:	2b00      	cmp	r3, #0
 800a164:	da04      	bge.n	800a170 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a166:	7efb      	ldrb	r3, [r7, #27]
 800a168:	3b80      	subs	r3, #128	; 0x80
 800a16a:	4a1f      	ldr	r2, [pc, #124]	; (800a1e8 <create_name+0x120>)
 800a16c:	5cd3      	ldrb	r3, [r2, r3]
 800a16e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a170:	7efb      	ldrb	r3, [r7, #27]
 800a172:	4619      	mov	r1, r3
 800a174:	481d      	ldr	r0, [pc, #116]	; (800a1ec <create_name+0x124>)
 800a176:	f7ff f80e 	bl	8009196 <chk_chr>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <create_name+0xbc>
 800a180:	2306      	movs	r3, #6
 800a182:	e02c      	b.n	800a1de <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a184:	7efb      	ldrb	r3, [r7, #27]
 800a186:	2b60      	cmp	r3, #96	; 0x60
 800a188:	d905      	bls.n	800a196 <create_name+0xce>
 800a18a:	7efb      	ldrb	r3, [r7, #27]
 800a18c:	2b7a      	cmp	r3, #122	; 0x7a
 800a18e:	d802      	bhi.n	800a196 <create_name+0xce>
 800a190:	7efb      	ldrb	r3, [r7, #27]
 800a192:	3b20      	subs	r3, #32
 800a194:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	1c5a      	adds	r2, r3, #1
 800a19a:	613a      	str	r2, [r7, #16]
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	4413      	add	r3, r2
 800a1a0:	7efa      	ldrb	r2, [r7, #27]
 800a1a2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a1a4:	e7a6      	b.n	800a0f4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a1a6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	441a      	add	r2, r3
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <create_name+0xf4>
 800a1b8:	2306      	movs	r3, #6
 800a1ba:	e010      	b.n	800a1de <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2be5      	cmp	r3, #229	; 0xe5
 800a1c2:	d102      	bne.n	800a1ca <create_name+0x102>
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2205      	movs	r2, #5
 800a1c8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a1ca:	7efb      	ldrb	r3, [r7, #27]
 800a1cc:	2b20      	cmp	r3, #32
 800a1ce:	d801      	bhi.n	800a1d4 <create_name+0x10c>
 800a1d0:	2204      	movs	r2, #4
 800a1d2:	e000      	b.n	800a1d6 <create_name+0x10e>
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	330b      	adds	r3, #11
 800a1da:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a1dc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3720      	adds	r7, #32
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop
 800a1e8:	0800ee24 	.word	0x0800ee24
 800a1ec:	0800ed88 	.word	0x0800ed88

0800a1f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a204:	e002      	b.n	800a20c <follow_path+0x1c>
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	3301      	adds	r3, #1
 800a20a:	603b      	str	r3, [r7, #0]
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	2b2f      	cmp	r3, #47	; 0x2f
 800a212:	d0f8      	beq.n	800a206 <follow_path+0x16>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b5c      	cmp	r3, #92	; 0x5c
 800a21a:	d0f4      	beq.n	800a206 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	2200      	movs	r2, #0
 800a220:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	2b1f      	cmp	r3, #31
 800a228:	d80a      	bhi.n	800a240 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2280      	movs	r2, #128	; 0x80
 800a22e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a232:	2100      	movs	r1, #0
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff fcf9 	bl	8009c2c <dir_sdi>
 800a23a:	4603      	mov	r3, r0
 800a23c:	75fb      	strb	r3, [r7, #23]
 800a23e:	e043      	b.n	800a2c8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a240:	463b      	mov	r3, r7
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff ff3f 	bl	800a0c8 <create_name>
 800a24a:	4603      	mov	r3, r0
 800a24c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a24e:	7dfb      	ldrb	r3, [r7, #23]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d134      	bne.n	800a2be <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f7ff feaf 	bl	8009fb8 <dir_find>
 800a25a:	4603      	mov	r3, r0
 800a25c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a264:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00a      	beq.n	800a282 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d127      	bne.n	800a2c2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a272:	7afb      	ldrb	r3, [r7, #11]
 800a274:	f003 0304 	and.w	r3, r3, #4
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d122      	bne.n	800a2c2 <follow_path+0xd2>
 800a27c:	2305      	movs	r3, #5
 800a27e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a280:	e01f      	b.n	800a2c2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a282:	7afb      	ldrb	r3, [r7, #11]
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d11c      	bne.n	800a2c6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	799b      	ldrb	r3, [r3, #6]
 800a290:	f003 0310 	and.w	r3, r3, #16
 800a294:	2b00      	cmp	r3, #0
 800a296:	d102      	bne.n	800a29e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a298:	2305      	movs	r3, #5
 800a29a:	75fb      	strb	r3, [r7, #23]
 800a29c:	e014      	b.n	800a2c8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2ac:	4413      	add	r3, r2
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	68f8      	ldr	r0, [r7, #12]
 800a2b2:	f7ff fe42 	bl	8009f3a <ld_clust>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a2bc:	e7c0      	b.n	800a240 <follow_path+0x50>
			if (res != FR_OK) break;
 800a2be:	bf00      	nop
 800a2c0:	e002      	b.n	800a2c8 <follow_path+0xd8>
				break;
 800a2c2:	bf00      	nop
 800a2c4:	e000      	b.n	800a2c8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a2c6:	bf00      	nop
			}
		}
	}

	return res;
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b087      	sub	sp, #28
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a2da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a2de:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d031      	beq.n	800a34c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	617b      	str	r3, [r7, #20]
 800a2ee:	e002      	b.n	800a2f6 <get_ldnumber+0x24>
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	617b      	str	r3, [r7, #20]
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	2b20      	cmp	r3, #32
 800a2fc:	d903      	bls.n	800a306 <get_ldnumber+0x34>
 800a2fe:	697b      	ldr	r3, [r7, #20]
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b3a      	cmp	r3, #58	; 0x3a
 800a304:	d1f4      	bne.n	800a2f0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	2b3a      	cmp	r3, #58	; 0x3a
 800a30c:	d11c      	bne.n	800a348 <get_ldnumber+0x76>
			tp = *path;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	1c5a      	adds	r2, r3, #1
 800a318:	60fa      	str	r2, [r7, #12]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	3b30      	subs	r3, #48	; 0x30
 800a31e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	2b09      	cmp	r3, #9
 800a324:	d80e      	bhi.n	800a344 <get_ldnumber+0x72>
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d10a      	bne.n	800a344 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d107      	bne.n	800a344 <get_ldnumber+0x72>
					vol = (int)i;
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	3301      	adds	r3, #1
 800a33c:	617b      	str	r3, [r7, #20]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	697a      	ldr	r2, [r7, #20]
 800a342:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	e002      	b.n	800a34e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a348:	2300      	movs	r3, #0
 800a34a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a34c:	693b      	ldr	r3, [r7, #16]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	371c      	adds	r7, #28
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
	...

0800a35c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	70da      	strb	r2, [r3, #3]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a372:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a374:	6839      	ldr	r1, [r7, #0]
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7ff f8d8 	bl	800952c <move_window>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <check_fs+0x2a>
 800a382:	2304      	movs	r3, #4
 800a384:	e038      	b.n	800a3f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	3330      	adds	r3, #48	; 0x30
 800a38a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe fe1c 	bl	8008fcc <ld_word>
 800a394:	4603      	mov	r3, r0
 800a396:	461a      	mov	r2, r3
 800a398:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d001      	beq.n	800a3a4 <check_fs+0x48>
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e029      	b.n	800a3f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3aa:	2be9      	cmp	r3, #233	; 0xe9
 800a3ac:	d009      	beq.n	800a3c2 <check_fs+0x66>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3b4:	2beb      	cmp	r3, #235	; 0xeb
 800a3b6:	d11e      	bne.n	800a3f6 <check_fs+0x9a>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a3be:	2b90      	cmp	r3, #144	; 0x90
 800a3c0:	d119      	bne.n	800a3f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	3330      	adds	r3, #48	; 0x30
 800a3c6:	3336      	adds	r3, #54	; 0x36
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fe fe17 	bl	8008ffc <ld_dword>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a3d4:	4a0a      	ldr	r2, [pc, #40]	; (800a400 <check_fs+0xa4>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d101      	bne.n	800a3de <check_fs+0x82>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	e00c      	b.n	800a3f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	3330      	adds	r3, #48	; 0x30
 800a3e2:	3352      	adds	r3, #82	; 0x52
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe fe09 	bl	8008ffc <ld_dword>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	4a05      	ldr	r2, [pc, #20]	; (800a404 <check_fs+0xa8>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d101      	bne.n	800a3f6 <check_fs+0x9a>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e000      	b.n	800a3f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a3f6:	2302      	movs	r3, #2
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3708      	adds	r7, #8
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	00544146 	.word	0x00544146
 800a404:	33544146 	.word	0x33544146

0800a408 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b096      	sub	sp, #88	; 0x58
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	4613      	mov	r3, r2
 800a414:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2200      	movs	r2, #0
 800a41a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f7ff ff58 	bl	800a2d2 <get_ldnumber>
 800a422:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a426:	2b00      	cmp	r3, #0
 800a428:	da01      	bge.n	800a42e <find_volume+0x26>
 800a42a:	230b      	movs	r3, #11
 800a42c:	e22d      	b.n	800a88a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a42e:	4aa1      	ldr	r2, [pc, #644]	; (800a6b4 <find_volume+0x2ac>)
 800a430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a436:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d101      	bne.n	800a442 <find_volume+0x3a>
 800a43e:	230c      	movs	r3, #12
 800a440:	e223      	b.n	800a88a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a446:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a448:	79fb      	ldrb	r3, [r7, #7]
 800a44a:	f023 0301 	bic.w	r3, r3, #1
 800a44e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d01a      	beq.n	800a48e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	785b      	ldrb	r3, [r3, #1]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe fd17 	bl	8008e90 <disk_status>
 800a462:	4603      	mov	r3, r0
 800a464:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a468:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a46c:	f003 0301 	and.w	r3, r3, #1
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10c      	bne.n	800a48e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a474:	79fb      	ldrb	r3, [r7, #7]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d007      	beq.n	800a48a <find_volume+0x82>
 800a47a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a47e:	f003 0304 	and.w	r3, r3, #4
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a486:	230a      	movs	r3, #10
 800a488:	e1ff      	b.n	800a88a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800a48a:	2300      	movs	r3, #0
 800a48c:	e1fd      	b.n	800a88a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a490:	2200      	movs	r2, #0
 800a492:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a496:	b2da      	uxtb	r2, r3
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	785b      	ldrb	r3, [r3, #1]
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f7fe fd0f 	bl	8008ec4 <disk_initialize>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a4ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e1e6      	b.n	800a88a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a4bc:	79fb      	ldrb	r3, [r7, #7]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d007      	beq.n	800a4d2 <find_volume+0xca>
 800a4c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a4c6:	f003 0304 	and.w	r3, r3, #4
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a4ce:	230a      	movs	r3, #10
 800a4d0:	e1db      	b.n	800a88a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a4d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a4d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a4da:	f7ff ff3f 	bl	800a35c <check_fs>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a4e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4e8:	2b02      	cmp	r3, #2
 800a4ea:	d149      	bne.n	800a580 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	643b      	str	r3, [r7, #64]	; 0x40
 800a4f0:	e01e      	b.n	800a530 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fa:	011b      	lsls	r3, r3, #4
 800a4fc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a500:	4413      	add	r3, r2
 800a502:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a506:	3304      	adds	r3, #4
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d006      	beq.n	800a51c <find_volume+0x114>
 800a50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a510:	3308      	adds	r3, #8
 800a512:	4618      	mov	r0, r3
 800a514:	f7fe fd72 	bl	8008ffc <ld_dword>
 800a518:	4602      	mov	r2, r0
 800a51a:	e000      	b.n	800a51e <find_volume+0x116>
 800a51c:	2200      	movs	r2, #0
 800a51e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	3358      	adds	r3, #88	; 0x58
 800a524:	443b      	add	r3, r7
 800a526:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a52a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a52c:	3301      	adds	r3, #1
 800a52e:	643b      	str	r3, [r7, #64]	; 0x40
 800a530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a532:	2b03      	cmp	r3, #3
 800a534:	d9dd      	bls.n	800a4f2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a536:	2300      	movs	r3, #0
 800a538:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a53a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <find_volume+0x13e>
 800a540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a542:	3b01      	subs	r3, #1
 800a544:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	3358      	adds	r3, #88	; 0x58
 800a54c:	443b      	add	r3, r7
 800a54e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a552:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a556:	2b00      	cmp	r3, #0
 800a558:	d005      	beq.n	800a566 <find_volume+0x15e>
 800a55a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a55c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a55e:	f7ff fefd 	bl	800a35c <check_fs>
 800a562:	4603      	mov	r3, r0
 800a564:	e000      	b.n	800a568 <find_volume+0x160>
 800a566:	2303      	movs	r3, #3
 800a568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a56c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a570:	2b01      	cmp	r3, #1
 800a572:	d905      	bls.n	800a580 <find_volume+0x178>
 800a574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a576:	3301      	adds	r3, #1
 800a578:	643b      	str	r3, [r7, #64]	; 0x40
 800a57a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a57c:	2b03      	cmp	r3, #3
 800a57e:	d9e2      	bls.n	800a546 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a580:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a584:	2b04      	cmp	r3, #4
 800a586:	d101      	bne.n	800a58c <find_volume+0x184>
 800a588:	2301      	movs	r3, #1
 800a58a:	e17e      	b.n	800a88a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a58c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a590:	2b01      	cmp	r3, #1
 800a592:	d901      	bls.n	800a598 <find_volume+0x190>
 800a594:	230d      	movs	r3, #13
 800a596:	e178      	b.n	800a88a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a59a:	3330      	adds	r3, #48	; 0x30
 800a59c:	330b      	adds	r3, #11
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fe fd14 	bl	8008fcc <ld_word>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5aa:	d001      	beq.n	800a5b0 <find_volume+0x1a8>
 800a5ac:	230d      	movs	r3, #13
 800a5ae:	e16c      	b.n	800a88a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b2:	3330      	adds	r3, #48	; 0x30
 800a5b4:	3316      	adds	r3, #22
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fe fd08 	bl	8008fcc <ld_word>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a5c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d106      	bne.n	800a5d4 <find_volume+0x1cc>
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c8:	3330      	adds	r3, #48	; 0x30
 800a5ca:	3324      	adds	r3, #36	; 0x24
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f7fe fd15 	bl	8008ffc <ld_dword>
 800a5d2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a5d8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5dc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e6:	789b      	ldrb	r3, [r3, #2]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d005      	beq.n	800a5f8 <find_volume+0x1f0>
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	789b      	ldrb	r3, [r3, #2]
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d001      	beq.n	800a5f8 <find_volume+0x1f0>
 800a5f4:	230d      	movs	r3, #13
 800a5f6:	e148      	b.n	800a88a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fa:	789b      	ldrb	r3, [r3, #2]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a600:	fb02 f303 	mul.w	r3, r2, r3
 800a604:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a614:	895b      	ldrh	r3, [r3, #10]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d008      	beq.n	800a62c <find_volume+0x224>
 800a61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a61c:	895b      	ldrh	r3, [r3, #10]
 800a61e:	461a      	mov	r2, r3
 800a620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a622:	895b      	ldrh	r3, [r3, #10]
 800a624:	3b01      	subs	r3, #1
 800a626:	4013      	ands	r3, r2
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <find_volume+0x228>
 800a62c:	230d      	movs	r3, #13
 800a62e:	e12c      	b.n	800a88a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a632:	3330      	adds	r3, #48	; 0x30
 800a634:	3311      	adds	r3, #17
 800a636:	4618      	mov	r0, r3
 800a638:	f7fe fcc8 	bl	8008fcc <ld_word>
 800a63c:	4603      	mov	r3, r0
 800a63e:	461a      	mov	r2, r3
 800a640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a642:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a646:	891b      	ldrh	r3, [r3, #8]
 800a648:	f003 030f 	and.w	r3, r3, #15
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d001      	beq.n	800a656 <find_volume+0x24e>
 800a652:	230d      	movs	r3, #13
 800a654:	e119      	b.n	800a88a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a658:	3330      	adds	r3, #48	; 0x30
 800a65a:	3313      	adds	r3, #19
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fe fcb5 	bl	8008fcc <ld_word>
 800a662:	4603      	mov	r3, r0
 800a664:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d106      	bne.n	800a67a <find_volume+0x272>
 800a66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66e:	3330      	adds	r3, #48	; 0x30
 800a670:	3320      	adds	r3, #32
 800a672:	4618      	mov	r0, r3
 800a674:	f7fe fcc2 	bl	8008ffc <ld_dword>
 800a678:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67c:	3330      	adds	r3, #48	; 0x30
 800a67e:	330e      	adds	r3, #14
 800a680:	4618      	mov	r0, r3
 800a682:	f7fe fca3 	bl	8008fcc <ld_word>
 800a686:	4603      	mov	r3, r0
 800a688:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a68a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d101      	bne.n	800a694 <find_volume+0x28c>
 800a690:	230d      	movs	r3, #13
 800a692:	e0fa      	b.n	800a88a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a694:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a698:	4413      	add	r3, r2
 800a69a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a69c:	8912      	ldrh	r2, [r2, #8]
 800a69e:	0912      	lsrs	r2, r2, #4
 800a6a0:	b292      	uxth	r2, r2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a6a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d204      	bcs.n	800a6b8 <find_volume+0x2b0>
 800a6ae:	230d      	movs	r3, #13
 800a6b0:	e0eb      	b.n	800a88a <find_volume+0x482>
 800a6b2:	bf00      	nop
 800a6b4:	20004a5c 	.word	0x20004a5c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a6b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6bc:	1ad3      	subs	r3, r2, r3
 800a6be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6c0:	8952      	ldrh	r2, [r2, #10]
 800a6c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d101      	bne.n	800a6d2 <find_volume+0x2ca>
 800a6ce:	230d      	movs	r3, #13
 800a6d0:	e0db      	b.n	800a88a <find_volume+0x482>
		fmt = FS_FAT32;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d802      	bhi.n	800a6e8 <find_volume+0x2e0>
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d802      	bhi.n	800a6f8 <find_volume+0x2f0>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fa:	1c9a      	adds	r2, r3, #2
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a702:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a704:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a706:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a70a:	441a      	add	r2, r3
 800a70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a710:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a714:	441a      	add	r2, r3
 800a716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a718:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800a71a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a71e:	2b03      	cmp	r3, #3
 800a720:	d11e      	bne.n	800a760 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a724:	3330      	adds	r3, #48	; 0x30
 800a726:	332a      	adds	r3, #42	; 0x2a
 800a728:	4618      	mov	r0, r3
 800a72a:	f7fe fc4f 	bl	8008fcc <ld_word>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	d001      	beq.n	800a738 <find_volume+0x330>
 800a734:	230d      	movs	r3, #13
 800a736:	e0a8      	b.n	800a88a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73a:	891b      	ldrh	r3, [r3, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d001      	beq.n	800a744 <find_volume+0x33c>
 800a740:	230d      	movs	r3, #13
 800a742:	e0a2      	b.n	800a88a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a746:	3330      	adds	r3, #48	; 0x30
 800a748:	332c      	adds	r3, #44	; 0x2c
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fe fc56 	bl	8008ffc <ld_dword>
 800a750:	4602      	mov	r2, r0
 800a752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a754:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	695b      	ldr	r3, [r3, #20]
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	647b      	str	r3, [r7, #68]	; 0x44
 800a75e:	e01f      	b.n	800a7a0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a762:	891b      	ldrh	r3, [r3, #8]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d101      	bne.n	800a76c <find_volume+0x364>
 800a768:	230d      	movs	r3, #13
 800a76a:	e08e      	b.n	800a88a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76e:	6a1a      	ldr	r2, [r3, #32]
 800a770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a772:	441a      	add	r2, r3
 800a774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a776:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a778:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d103      	bne.n	800a788 <find_volume+0x380>
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	695b      	ldr	r3, [r3, #20]
 800a784:	005b      	lsls	r3, r3, #1
 800a786:	e00a      	b.n	800a79e <find_volume+0x396>
 800a788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78a:	695a      	ldr	r2, [r3, #20]
 800a78c:	4613      	mov	r3, r2
 800a78e:	005b      	lsls	r3, r3, #1
 800a790:	4413      	add	r3, r2
 800a792:	085a      	lsrs	r2, r3, #1
 800a794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a796:	695b      	ldr	r3, [r3, #20]
 800a798:	f003 0301 	and.w	r3, r3, #1
 800a79c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a79e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a2:	699a      	ldr	r2, [r3, #24]
 800a7a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7a6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a7aa:	0a5b      	lsrs	r3, r3, #9
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d201      	bcs.n	800a7b4 <find_volume+0x3ac>
 800a7b0:	230d      	movs	r3, #13
 800a7b2:	e06a      	b.n	800a88a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7ba:	611a      	str	r2, [r3, #16]
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	691a      	ldr	r2, [r3, #16]
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	2280      	movs	r2, #128	; 0x80
 800a7c8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a7ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d149      	bne.n	800a866 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d4:	3330      	adds	r3, #48	; 0x30
 800a7d6:	3330      	adds	r3, #48	; 0x30
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe fbf7 	bl	8008fcc <ld_word>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d140      	bne.n	800a866 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a7e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a7ec:	f7fe fe9e 	bl	800952c <move_window>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d137      	bne.n	800a866 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	3330      	adds	r3, #48	; 0x30
 800a800:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a804:	4618      	mov	r0, r3
 800a806:	f7fe fbe1 	bl	8008fcc <ld_word>
 800a80a:	4603      	mov	r3, r0
 800a80c:	461a      	mov	r2, r3
 800a80e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a812:	429a      	cmp	r2, r3
 800a814:	d127      	bne.n	800a866 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a818:	3330      	adds	r3, #48	; 0x30
 800a81a:	4618      	mov	r0, r3
 800a81c:	f7fe fbee 	bl	8008ffc <ld_dword>
 800a820:	4603      	mov	r3, r0
 800a822:	4a1c      	ldr	r2, [pc, #112]	; (800a894 <find_volume+0x48c>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d11e      	bne.n	800a866 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	3330      	adds	r3, #48	; 0x30
 800a82c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a830:	4618      	mov	r0, r3
 800a832:	f7fe fbe3 	bl	8008ffc <ld_dword>
 800a836:	4603      	mov	r3, r0
 800a838:	4a17      	ldr	r2, [pc, #92]	; (800a898 <find_volume+0x490>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d113      	bne.n	800a866 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	3330      	adds	r3, #48	; 0x30
 800a842:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fbd8 	bl	8008ffc <ld_dword>
 800a84c:	4602      	mov	r2, r0
 800a84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a850:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a854:	3330      	adds	r3, #48	; 0x30
 800a856:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fe fbce 	bl	8008ffc <ld_dword>
 800a860:	4602      	mov	r2, r0
 800a862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a864:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a868:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a86c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a86e:	4b0b      	ldr	r3, [pc, #44]	; (800a89c <find_volume+0x494>)
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	3301      	adds	r3, #1
 800a874:	b29a      	uxth	r2, r3
 800a876:	4b09      	ldr	r3, [pc, #36]	; (800a89c <find_volume+0x494>)
 800a878:	801a      	strh	r2, [r3, #0]
 800a87a:	4b08      	ldr	r3, [pc, #32]	; (800a89c <find_volume+0x494>)
 800a87c:	881a      	ldrh	r2, [r3, #0]
 800a87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a880:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a882:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a884:	f7fe fdea 	bl	800945c <clear_lock>
#endif
	return FR_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3758      	adds	r7, #88	; 0x58
 800a88e:	46bd      	mov	sp, r7
 800a890:	bd80      	pop	{r7, pc}
 800a892:	bf00      	nop
 800a894:	41615252 	.word	0x41615252
 800a898:	61417272 	.word	0x61417272
 800a89c:	20004a60 	.word	0x20004a60

0800a8a0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a8aa:	2309      	movs	r3, #9
 800a8ac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d01c      	beq.n	800a8ee <validate+0x4e>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d018      	beq.n	800a8ee <validate+0x4e>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d013      	beq.n	800a8ee <validate+0x4e>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	889a      	ldrh	r2, [r3, #4]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	88db      	ldrh	r3, [r3, #6]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d10c      	bne.n	800a8ee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7fe fad8 	bl	8008e90 <disk_status>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <validate+0x4e>
			res = FR_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a8ee:	7bfb      	ldrb	r3, [r7, #15]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d102      	bne.n	800a8fa <validate+0x5a>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	e000      	b.n	800a8fc <validate+0x5c>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	683a      	ldr	r2, [r7, #0]
 800a8fe:	6013      	str	r3, [r2, #0]
	return res;
 800a900:	7bfb      	ldrb	r3, [r7, #15]
}
 800a902:	4618      	mov	r0, r3
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
	...

0800a90c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b088      	sub	sp, #32
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	4613      	mov	r3, r2
 800a918:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a91e:	f107 0310 	add.w	r3, r7, #16
 800a922:	4618      	mov	r0, r3
 800a924:	f7ff fcd5 	bl	800a2d2 <get_ldnumber>
 800a928:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	da01      	bge.n	800a934 <f_mount+0x28>
 800a930:	230b      	movs	r3, #11
 800a932:	e02b      	b.n	800a98c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a934:	4a17      	ldr	r2, [pc, #92]	; (800a994 <f_mount+0x88>)
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a93c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d005      	beq.n	800a950 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a944:	69b8      	ldr	r0, [r7, #24]
 800a946:	f7fe fd89 	bl	800945c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	2200      	movs	r2, #0
 800a94e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a95c:	68fa      	ldr	r2, [r7, #12]
 800a95e:	490d      	ldr	r1, [pc, #52]	; (800a994 <f_mount+0x88>)
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <f_mount+0x66>
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d001      	beq.n	800a976 <f_mount+0x6a>
 800a972:	2300      	movs	r3, #0
 800a974:	e00a      	b.n	800a98c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a976:	f107 010c 	add.w	r1, r7, #12
 800a97a:	f107 0308 	add.w	r3, r7, #8
 800a97e:	2200      	movs	r2, #0
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff fd41 	bl	800a408 <find_volume>
 800a986:	4603      	mov	r3, r0
 800a988:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3720      	adds	r7, #32
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	20004a5c 	.word	0x20004a5c

0800a998 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b098      	sub	sp, #96	; 0x60
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <f_open+0x18>
 800a9ac:	2309      	movs	r3, #9
 800a9ae:	e1ad      	b.n	800ad0c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a9b0:	79fb      	ldrb	r3, [r7, #7]
 800a9b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a9b8:	79fa      	ldrb	r2, [r7, #7]
 800a9ba:	f107 0110 	add.w	r1, r7, #16
 800a9be:	f107 0308 	add.w	r3, r7, #8
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff fd20 	bl	800a408 <find_volume>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a9ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f040 8191 	bne.w	800acfa <f_open+0x362>
		dj.obj.fs = fs;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	f107 0314 	add.w	r3, r7, #20
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7ff fc03 	bl	800a1f0 <follow_path>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a9f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d11a      	bne.n	800aa2e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a9f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a9fc:	b25b      	sxtb	r3, r3
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	da03      	bge.n	800aa0a <f_open+0x72>
				res = FR_INVALID_NAME;
 800aa02:	2306      	movs	r3, #6
 800aa04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa08:	e011      	b.n	800aa2e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800aa0a:	79fb      	ldrb	r3, [r7, #7]
 800aa0c:	f023 0301 	bic.w	r3, r3, #1
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	bf14      	ite	ne
 800aa14:	2301      	movne	r3, #1
 800aa16:	2300      	moveq	r3, #0
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	f107 0314 	add.w	r3, r7, #20
 800aa20:	4611      	mov	r1, r2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fbd2 	bl	80091cc <chk_lock>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800aa2e:	79fb      	ldrb	r3, [r7, #7]
 800aa30:	f003 031c 	and.w	r3, r3, #28
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d07f      	beq.n	800ab38 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800aa38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d017      	beq.n	800aa70 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800aa40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa44:	2b04      	cmp	r3, #4
 800aa46:	d10e      	bne.n	800aa66 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800aa48:	f7fe fc1c 	bl	8009284 <enq_lock>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d006      	beq.n	800aa60 <f_open+0xc8>
 800aa52:	f107 0314 	add.w	r3, r7, #20
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff fb03 	bl	800a062 <dir_register>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	e000      	b.n	800aa62 <f_open+0xca>
 800aa60:	2312      	movs	r3, #18
 800aa62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800aa66:	79fb      	ldrb	r3, [r7, #7]
 800aa68:	f043 0308 	orr.w	r3, r3, #8
 800aa6c:	71fb      	strb	r3, [r7, #7]
 800aa6e:	e010      	b.n	800aa92 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800aa70:	7ebb      	ldrb	r3, [r7, #26]
 800aa72:	f003 0311 	and.w	r3, r3, #17
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d003      	beq.n	800aa82 <f_open+0xea>
					res = FR_DENIED;
 800aa7a:	2307      	movs	r3, #7
 800aa7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aa80:	e007      	b.n	800aa92 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800aa82:	79fb      	ldrb	r3, [r7, #7]
 800aa84:	f003 0304 	and.w	r3, r3, #4
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <f_open+0xfa>
 800aa8c:	2308      	movs	r3, #8
 800aa8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800aa92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d168      	bne.n	800ab6c <f_open+0x1d4>
 800aa9a:	79fb      	ldrb	r3, [r7, #7]
 800aa9c:	f003 0308 	and.w	r3, r3, #8
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d063      	beq.n	800ab6c <f_open+0x1d4>
				dw = GET_FATTIME();
 800aaa4:	f7fd ffa4 	bl	80089f0 <get_fattime>
 800aaa8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800aaaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaac:	330e      	adds	r3, #14
 800aaae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fe fae1 	bl	8009078 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800aab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aab8:	3316      	adds	r3, #22
 800aaba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fe fadb 	bl	8009078 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800aac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aac4:	330b      	adds	r3, #11
 800aac6:	2220      	movs	r2, #32
 800aac8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aace:	4611      	mov	r1, r2
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7ff fa32 	bl	8009f3a <ld_clust>
 800aad6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800aadc:	2200      	movs	r2, #0
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff fa4a 	bl	8009f78 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800aae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aae6:	331c      	adds	r3, #28
 800aae8:	2100      	movs	r1, #0
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fac4 	bl	8009078 <st_dword>
					fs->wflag = 1;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800aaf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d037      	beq.n	800ab6c <f_open+0x1d4>
						dw = fs->winsect;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab00:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ab02:	f107 0314 	add.w	r3, r7, #20
 800ab06:	2200      	movs	r2, #0
 800ab08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe ff5d 	bl	80099ca <remove_chain>
 800ab10:	4603      	mov	r3, r0
 800ab12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ab16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d126      	bne.n	800ab6c <f_open+0x1d4>
							res = move_window(fs, dw);
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe fd02 	bl	800952c <move_window>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab32:	3a01      	subs	r2, #1
 800ab34:	60da      	str	r2, [r3, #12]
 800ab36:	e019      	b.n	800ab6c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ab38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d115      	bne.n	800ab6c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ab40:	7ebb      	ldrb	r3, [r7, #26]
 800ab42:	f003 0310 	and.w	r3, r3, #16
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ab4a:	2304      	movs	r3, #4
 800ab4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ab50:	e00c      	b.n	800ab6c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ab52:	79fb      	ldrb	r3, [r7, #7]
 800ab54:	f003 0302 	and.w	r3, r3, #2
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d007      	beq.n	800ab6c <f_open+0x1d4>
 800ab5c:	7ebb      	ldrb	r3, [r7, #26]
 800ab5e:	f003 0301 	and.w	r3, r3, #1
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d002      	beq.n	800ab6c <f_open+0x1d4>
						res = FR_DENIED;
 800ab66:	2307      	movs	r3, #7
 800ab68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ab6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d128      	bne.n	800abc6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	f003 0308 	and.w	r3, r3, #8
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d003      	beq.n	800ab86 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ab7e:	79fb      	ldrb	r3, [r7, #7]
 800ab80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ab8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ab94:	79fb      	ldrb	r3, [r7, #7]
 800ab96:	f023 0301 	bic.w	r3, r3, #1
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	bf14      	ite	ne
 800ab9e:	2301      	movne	r3, #1
 800aba0:	2300      	moveq	r3, #0
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	461a      	mov	r2, r3
 800aba6:	f107 0314 	add.w	r3, r7, #20
 800abaa:	4611      	mov	r1, r2
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe fb8b 	bl	80092c8 <inc_lock>
 800abb2:	4602      	mov	r2, r0
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	691b      	ldr	r3, [r3, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d102      	bne.n	800abc6 <f_open+0x22e>
 800abc0:	2302      	movs	r3, #2
 800abc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800abc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f040 8095 	bne.w	800acfa <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abd4:	4611      	mov	r1, r2
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7ff f9af 	bl	8009f3a <ld_clust>
 800abdc:	4602      	mov	r2, r0
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800abe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe4:	331c      	adds	r3, #28
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7fe fa08 	bl	8008ffc <ld_dword>
 800abec:	4602      	mov	r2, r0
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2200      	movs	r2, #0
 800abf6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	88da      	ldrh	r2, [r3, #6]
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	79fa      	ldrb	r2, [r7, #7]
 800ac0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	3330      	adds	r3, #48	; 0x30
 800ac22:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac26:	2100      	movs	r1, #0
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7fe fa72 	bl	8009112 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	f003 0320 	and.w	r3, r3, #32
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d060      	beq.n	800acfa <f_open+0x362>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d05c      	beq.n	800acfa <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	68da      	ldr	r2, [r3, #12]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	895b      	ldrh	r3, [r3, #10]
 800ac4c:	025b      	lsls	r3, r3, #9
 800ac4e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	657b      	str	r3, [r7, #84]	; 0x54
 800ac5c:	e016      	b.n	800ac8c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fe fd1d 	bl	80096a2 <get_fat>
 800ac68:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ac6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d802      	bhi.n	800ac76 <f_open+0x2de>
 800ac70:	2302      	movs	r3, #2
 800ac72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ac76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ac78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac7c:	d102      	bne.n	800ac84 <f_open+0x2ec>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ac84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	657b      	str	r3, [r7, #84]	; 0x54
 800ac8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d103      	bne.n	800ac9c <f_open+0x304>
 800ac94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d8e0      	bhi.n	800ac5e <f_open+0x2c6>
				}
				fp->clust = clst;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aca0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aca2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d127      	bne.n	800acfa <f_open+0x362>
 800acaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d022      	beq.n	800acfa <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800acb8:	4618      	mov	r0, r3
 800acba:	f7fe fcd3 	bl	8009664 <clust2sect>
 800acbe:	6478      	str	r0, [r7, #68]	; 0x44
 800acc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d103      	bne.n	800acce <f_open+0x336>
						res = FR_INT_ERR;
 800acc6:	2302      	movs	r3, #2
 800acc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800accc:	e015      	b.n	800acfa <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800acce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acd0:	0a5a      	lsrs	r2, r3, #9
 800acd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acd4:	441a      	add	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	7858      	ldrb	r0, [r3, #1]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6a1a      	ldr	r2, [r3, #32]
 800ace8:	2301      	movs	r3, #1
 800acea:	f7fe f911 	bl	8008f10 <disk_read>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <f_open+0x362>
 800acf4:	2301      	movs	r3, #1
 800acf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800acfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <f_open+0x370>
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2200      	movs	r2, #0
 800ad06:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ad08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3760      	adds	r7, #96	; 0x60
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b08c      	sub	sp, #48	; 0x30
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f107 0210 	add.w	r2, r7, #16
 800ad32:	4611      	mov	r1, r2
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7ff fdb3 	bl	800a8a0 <validate>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ad40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d107      	bne.n	800ad58 <f_write+0x44>
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	7d5b      	ldrb	r3, [r3, #21]
 800ad4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ad50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d002      	beq.n	800ad5e <f_write+0x4a>
 800ad58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad5c:	e14b      	b.n	800aff6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	7d1b      	ldrb	r3, [r3, #20]
 800ad62:	f003 0302 	and.w	r3, r3, #2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <f_write+0x5a>
 800ad6a:	2307      	movs	r3, #7
 800ad6c:	e143      	b.n	800aff6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	699a      	ldr	r2, [r3, #24]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	441a      	add	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	699b      	ldr	r3, [r3, #24]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	f080 812d 	bcs.w	800afda <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	43db      	mvns	r3, r3
 800ad86:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ad88:	e127      	b.n	800afda <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	f040 80e3 	bne.w	800af5e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	0a5b      	lsrs	r3, r3, #9
 800ad9e:	693a      	ldr	r2, [r7, #16]
 800ada0:	8952      	ldrh	r2, [r2, #10]
 800ada2:	3a01      	subs	r2, #1
 800ada4:	4013      	ands	r3, r2
 800ada6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d143      	bne.n	800ae36 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10c      	bne.n	800add0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d11a      	bne.n	800adf8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2100      	movs	r1, #0
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fe fe64 	bl	8009a94 <create_chain>
 800adcc:	62b8      	str	r0, [r7, #40]	; 0x28
 800adce:	e013      	b.n	800adf8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add4:	2b00      	cmp	r3, #0
 800add6:	d007      	beq.n	800ade8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	699b      	ldr	r3, [r3, #24]
 800addc:	4619      	mov	r1, r3
 800adde:	68f8      	ldr	r0, [r7, #12]
 800ade0:	f7fe fef0 	bl	8009bc4 <clmt_clust>
 800ade4:	62b8      	str	r0, [r7, #40]	; 0x28
 800ade6:	e007      	b.n	800adf8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ade8:	68fa      	ldr	r2, [r7, #12]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	4619      	mov	r1, r3
 800adf0:	4610      	mov	r0, r2
 800adf2:	f7fe fe4f 	bl	8009a94 <create_chain>
 800adf6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800adf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f000 80f2 	beq.w	800afe4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d104      	bne.n	800ae10 <f_write+0xfc>
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2202      	movs	r2, #2
 800ae0a:	755a      	strb	r2, [r3, #21]
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	e0f2      	b.n	800aff6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae16:	d104      	bne.n	800ae22 <f_write+0x10e>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	755a      	strb	r2, [r3, #21]
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e0e9      	b.n	800aff6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae26:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d102      	bne.n	800ae36 <f_write+0x122>
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae34:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	7d1b      	ldrb	r3, [r3, #20]
 800ae3a:	b25b      	sxtb	r3, r3
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	da18      	bge.n	800ae72 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	7858      	ldrb	r0, [r3, #1]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6a1a      	ldr	r2, [r3, #32]
 800ae4e:	2301      	movs	r3, #1
 800ae50:	f7fe f87e 	bl	8008f50 <disk_write>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d004      	beq.n	800ae64 <f_write+0x150>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2201      	movs	r2, #1
 800ae5e:	755a      	strb	r2, [r3, #21]
 800ae60:	2301      	movs	r3, #1
 800ae62:	e0c8      	b.n	800aff6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	7d1b      	ldrb	r3, [r3, #20]
 800ae68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae6c:	b2da      	uxtb	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ae72:	693a      	ldr	r2, [r7, #16]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	4619      	mov	r1, r3
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	f7fe fbf2 	bl	8009664 <clust2sect>
 800ae80:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d104      	bne.n	800ae92 <f_write+0x17e>
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	755a      	strb	r2, [r3, #21]
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e0b1      	b.n	800aff6 <f_write+0x2e2>
			sect += csect;
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	4413      	add	r3, r2
 800ae98:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	0a5b      	lsrs	r3, r3, #9
 800ae9e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800aea0:	6a3b      	ldr	r3, [r7, #32]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d03c      	beq.n	800af20 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	4413      	add	r3, r2
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	8952      	ldrh	r2, [r2, #10]
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d905      	bls.n	800aec0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	895b      	ldrh	r3, [r3, #10]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	69bb      	ldr	r3, [r7, #24]
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	7858      	ldrb	r0, [r3, #1]
 800aec4:	6a3b      	ldr	r3, [r7, #32]
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	69f9      	ldr	r1, [r7, #28]
 800aeca:	f7fe f841 	bl	8008f50 <disk_write>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d004      	beq.n	800aede <f_write+0x1ca>
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2201      	movs	r2, #1
 800aed8:	755a      	strb	r2, [r3, #21]
 800aeda:	2301      	movs	r3, #1
 800aedc:	e08b      	b.n	800aff6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	6a1a      	ldr	r2, [r3, #32]
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	6a3a      	ldr	r2, [r7, #32]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d915      	bls.n	800af18 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	6a1a      	ldr	r2, [r3, #32]
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	025b      	lsls	r3, r3, #9
 800aefc:	69fa      	ldr	r2, [r7, #28]
 800aefe:	4413      	add	r3, r2
 800af00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af04:	4619      	mov	r1, r3
 800af06:	f7fe f8e3 	bl	80090d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	7d1b      	ldrb	r3, [r3, #20]
 800af0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af12:	b2da      	uxtb	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800af18:	6a3b      	ldr	r3, [r7, #32]
 800af1a:	025b      	lsls	r3, r3, #9
 800af1c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800af1e:	e03f      	b.n	800afa0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6a1b      	ldr	r3, [r3, #32]
 800af24:	697a      	ldr	r2, [r7, #20]
 800af26:	429a      	cmp	r2, r3
 800af28:	d016      	beq.n	800af58 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	699a      	ldr	r2, [r3, #24]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800af32:	429a      	cmp	r2, r3
 800af34:	d210      	bcs.n	800af58 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	7858      	ldrb	r0, [r3, #1]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af40:	2301      	movs	r3, #1
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	f7fd ffe4 	bl	8008f10 <disk_read>
 800af48:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d004      	beq.n	800af58 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2201      	movs	r2, #1
 800af52:	755a      	strb	r2, [r3, #21]
 800af54:	2301      	movs	r3, #1
 800af56:	e04e      	b.n	800aff6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	699b      	ldr	r3, [r3, #24]
 800af62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af66:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800af6a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800af6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	429a      	cmp	r2, r3
 800af72:	d901      	bls.n	800af78 <f_write+0x264>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af86:	4413      	add	r3, r2
 800af88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af8a:	69f9      	ldr	r1, [r7, #28]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fe f89f 	bl	80090d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	7d1b      	ldrb	r3, [r3, #20]
 800af96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af9a:	b2da      	uxtb	r2, r3
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800afa0:	69fa      	ldr	r2, [r7, #28]
 800afa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa4:	4413      	add	r3, r2
 800afa6:	61fb      	str	r3, [r7, #28]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	699a      	ldr	r2, [r3, #24]
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	441a      	add	r2, r3
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	619a      	str	r2, [r3, #24]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	68da      	ldr	r2, [r3, #12]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	bf38      	it	cc
 800afc0:	461a      	movcc	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	60da      	str	r2, [r3, #12]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	441a      	add	r2, r3
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	601a      	str	r2, [r3, #0]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	1ad3      	subs	r3, r2, r3
 800afd8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	f47f aed4 	bne.w	800ad8a <f_write+0x76>
 800afe2:	e000      	b.n	800afe6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800afe4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	7d1b      	ldrb	r3, [r3, #20]
 800afea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3730      	adds	r7, #48	; 0x30
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b086      	sub	sp, #24
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f107 0208 	add.w	r2, r7, #8
 800b00c:	4611      	mov	r1, r2
 800b00e:	4618      	mov	r0, r3
 800b010:	f7ff fc46 	bl	800a8a0 <validate>
 800b014:	4603      	mov	r3, r0
 800b016:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b018:	7dfb      	ldrb	r3, [r7, #23]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d168      	bne.n	800b0f0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	7d1b      	ldrb	r3, [r3, #20]
 800b022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b026:	2b00      	cmp	r3, #0
 800b028:	d062      	beq.n	800b0f0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	7d1b      	ldrb	r3, [r3, #20]
 800b02e:	b25b      	sxtb	r3, r3
 800b030:	2b00      	cmp	r3, #0
 800b032:	da15      	bge.n	800b060 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	7858      	ldrb	r0, [r3, #1]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1a      	ldr	r2, [r3, #32]
 800b042:	2301      	movs	r3, #1
 800b044:	f7fd ff84 	bl	8008f50 <disk_write>
 800b048:	4603      	mov	r3, r0
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d001      	beq.n	800b052 <f_sync+0x54>
 800b04e:	2301      	movs	r3, #1
 800b050:	e04f      	b.n	800b0f2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	7d1b      	ldrb	r3, [r3, #20]
 800b056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b05a:	b2da      	uxtb	r2, r3
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b060:	f7fd fcc6 	bl	80089f0 <get_fattime>
 800b064:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06c:	4619      	mov	r1, r3
 800b06e:	4610      	mov	r0, r2
 800b070:	f7fe fa5c 	bl	800952c <move_window>
 800b074:	4603      	mov	r3, r0
 800b076:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b078:	7dfb      	ldrb	r3, [r7, #23]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d138      	bne.n	800b0f0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b082:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	330b      	adds	r3, #11
 800b088:	781a      	ldrb	r2, [r3, #0]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	330b      	adds	r3, #11
 800b08e:	f042 0220 	orr.w	r2, r2, #32
 800b092:	b2d2      	uxtb	r2, r2
 800b094:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6818      	ldr	r0, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	689b      	ldr	r3, [r3, #8]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	68f9      	ldr	r1, [r7, #12]
 800b0a2:	f7fe ff69 	bl	8009f78 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f103 021c 	add.w	r2, r3, #28
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f7fd ffe0 	bl	8009078 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	3316      	adds	r3, #22
 800b0bc:	6939      	ldr	r1, [r7, #16]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7fd ffda 	bl	8009078 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3312      	adds	r3, #18
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fd ffb9 	bl	8009042 <st_word>
					fs->wflag = 1;
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fe fa55 	bl	8009588 <sync_fs>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	7d1b      	ldrb	r3, [r3, #20]
 800b0e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b0f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b084      	sub	sp, #16
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f7ff ff7b 	bl	800affe <f_sync>
 800b108:	4603      	mov	r3, r0
 800b10a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d118      	bne.n	800b144 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f107 0208 	add.w	r2, r7, #8
 800b118:	4611      	mov	r1, r2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7ff fbc0 	bl	800a8a0 <validate>
 800b120:	4603      	mov	r3, r0
 800b122:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b124:	7bfb      	ldrb	r3, [r7, #15]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d10c      	bne.n	800b144 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fe f958 	bl	80093e4 <dec_lock>
 800b134:	4603      	mov	r3, r0
 800b136:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d102      	bne.n	800b144 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b144:	7bfb      	ldrb	r3, [r7, #15]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b096      	sub	sp, #88	; 0x58
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800b156:	f107 0108 	add.w	r1, r7, #8
 800b15a:	1d3b      	adds	r3, r7, #4
 800b15c:	2202      	movs	r2, #2
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff f952 	bl	800a408 <find_volume>
 800b164:	4603      	mov	r3, r0
 800b166:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 800b16e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b172:	2b00      	cmp	r3, #0
 800b174:	f040 80ec 	bne.w	800b350 <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	f107 030c 	add.w	r3, r7, #12
 800b17e:	4611      	mov	r1, r2
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff f835 	bl	800a1f0 <follow_path>
 800b186:	4603      	mov	r3, r0
 800b188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800b18c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b190:	2b00      	cmp	r3, #0
 800b192:	d102      	bne.n	800b19a <f_mkdir+0x4c>
 800b194:	2308      	movs	r3, #8
 800b196:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800b19a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	f040 80d6 	bne.w	800b350 <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800b1a4:	f107 030c 	add.w	r3, r7, #12
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7fe fc72 	bl	8009a94 <create_chain>
 800b1b0:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	895b      	ldrh	r3, [r3, #10]
 800b1b6:	025b      	lsls	r3, r3, #9
 800b1b8:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800b1c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d102      	bne.n	800b1cc <f_mkdir+0x7e>
 800b1c6:	2307      	movs	r3, #7
 800b1c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 800b1cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d102      	bne.n	800b1d8 <f_mkdir+0x8a>
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b1d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1de:	d102      	bne.n	800b1e6 <f_mkdir+0x98>
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800b1e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d106      	bne.n	800b1fc <f_mkdir+0xae>
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7fe f957 	bl	80094a4 <sync_window>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 800b1fc:	f7fd fbf8 	bl	80089f0 <get_fattime>
 800b200:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800b202:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b206:	2b00      	cmp	r3, #0
 800b208:	d16a      	bne.n	800b2e0 <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b20e:	4618      	mov	r0, r3
 800b210:	f7fe fa28 	bl	8009664 <clust2sect>
 800b214:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	3330      	adds	r3, #48	; 0x30
 800b21a:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 800b21c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b220:	2100      	movs	r1, #0
 800b222:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b224:	f7fd ff75 	bl	8009112 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800b228:	220b      	movs	r2, #11
 800b22a:	2120      	movs	r1, #32
 800b22c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b22e:	f7fd ff70 	bl	8009112 <mem_set>
					dir[DIR_Name] = '.';
 800b232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b234:	222e      	movs	r2, #46	; 0x2e
 800b236:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800b238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b23a:	330b      	adds	r3, #11
 800b23c:	2210      	movs	r2, #16
 800b23e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800b240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b242:	3316      	adds	r3, #22
 800b244:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b246:	4618      	mov	r0, r3
 800b248:	f7fd ff16 	bl	8009078 <st_dword>
					st_clust(fs, dir, dcl);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b250:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b252:	4618      	mov	r0, r3
 800b254:	f7fe fe90 	bl	8009f78 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800b258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b25a:	3320      	adds	r3, #32
 800b25c:	2220      	movs	r2, #32
 800b25e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b260:	4618      	mov	r0, r3
 800b262:	f7fd ff35 	bl	80090d0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800b266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b268:	3321      	adds	r3, #33	; 0x21
 800b26a:	222e      	movs	r2, #46	; 0x2e
 800b26c:	701a      	strb	r2, [r3, #0]
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	2b03      	cmp	r3, #3
 800b278:	d106      	bne.n	800b288 <f_mkdir+0x13a>
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b280:	429a      	cmp	r2, r3
 800b282:	d101      	bne.n	800b288 <f_mkdir+0x13a>
 800b284:	2300      	movs	r3, #0
 800b286:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 800b288:	68b8      	ldr	r0, [r7, #8]
 800b28a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b28c:	3320      	adds	r3, #32
 800b28e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b290:	4619      	mov	r1, r3
 800b292:	f7fe fe71 	bl	8009f78 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	895b      	ldrh	r3, [r3, #10]
 800b29a:	653b      	str	r3, [r7, #80]	; 0x50
 800b29c:	e01b      	b.n	800b2d6 <f_mkdir+0x188>
					fs->winsect = dsc++;
 800b29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2a0:	1c5a      	adds	r2, r3, #1
 800b2a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b2a4:	68ba      	ldr	r2, [r7, #8]
 800b2a6:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f7fe f8f7 	bl	80094a4 <sync_window>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 800b2bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10c      	bne.n	800b2de <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800b2c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b2cc:	f7fd ff21 	bl	8009112 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800b2d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	653b      	str	r3, [r7, #80]	; 0x50
 800b2d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e0      	bne.n	800b29e <f_mkdir+0x150>
 800b2dc:	e000      	b.n	800b2e0 <f_mkdir+0x192>
					if (res != FR_OK) break;
 800b2de:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800b2e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d107      	bne.n	800b2f8 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800b2e8:	f107 030c 	add.w	r3, r7, #12
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f7fe feb8 	bl	800a062 <dir_register>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 800b2f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d120      	bne.n	800b342 <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800b304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b306:	3316      	adds	r3, #22
 800b308:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fd feb4 	bl	8009078 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b314:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b316:	4618      	mov	r0, r3
 800b318:	f7fe fe2e 	bl	8009f78 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800b31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b31e:	330b      	adds	r3, #11
 800b320:	2210      	movs	r2, #16
 800b322:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2201      	movs	r2, #1
 800b328:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800b32a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10e      	bne.n	800b350 <f_mkdir+0x202>
					res = sync_fs(fs);
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	4618      	mov	r0, r3
 800b336:	f7fe f927 	bl	8009588 <sync_fs>
 800b33a:	4603      	mov	r3, r0
 800b33c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800b340:	e006      	b.n	800b350 <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800b342:	f107 030c 	add.w	r3, r7, #12
 800b346:	2200      	movs	r2, #0
 800b348:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7fe fb3d 	bl	80099ca <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800b350:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 800b354:	4618      	mov	r0, r3
 800b356:	3758      	adds	r7, #88	; 0x58
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800b35c:	b590      	push	{r4, r7, lr}
 800b35e:	b09d      	sub	sp, #116	; 0x74
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	607a      	str	r2, [r7, #4]
 800b366:	603b      	str	r3, [r7, #0]
 800b368:	460b      	mov	r3, r1
 800b36a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800b36c:	2301      	movs	r3, #1
 800b36e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800b370:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b374:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800b376:	f107 030c 	add.w	r3, r7, #12
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe ffa9 	bl	800a2d2 <get_ldnumber>
 800b380:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b384:	2b00      	cmp	r3, #0
 800b386:	da02      	bge.n	800b38e <f_mkfs+0x32>
 800b388:	230b      	movs	r3, #11
 800b38a:	f000 bc0d 	b.w	800bba8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800b38e:	4a94      	ldr	r2, [pc, #592]	; (800b5e0 <f_mkfs+0x284>)
 800b390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d005      	beq.n	800b3a6 <f_mkfs+0x4a>
 800b39a:	4a91      	ldr	r2, [pc, #580]	; (800b5e0 <f_mkfs+0x284>)
 800b39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b39e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800b3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800b3b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7fd fd84 	bl	8008ec4 <disk_initialize>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800b3c2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b3c6:	f003 0301 	and.w	r3, r3, #1
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <f_mkfs+0x76>
 800b3ce:	2303      	movs	r3, #3
 800b3d0:	e3ea      	b.n	800bba8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800b3d2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800b3d6:	f003 0304 	and.w	r3, r3, #4
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <f_mkfs+0x86>
 800b3de:	230a      	movs	r3, #10
 800b3e0:	e3e2      	b.n	800bba8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800b3e2:	f107 0214 	add.w	r2, r7, #20
 800b3e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b3ea:	2103      	movs	r1, #3
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7fd fdcf 	bl	8008f90 <disk_ioctl>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d10c      	bne.n	800b412 <f_mkfs+0xb6>
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d009      	beq.n	800b412 <f_mkfs+0xb6>
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b404:	d805      	bhi.n	800b412 <f_mkfs+0xb6>
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	1e5a      	subs	r2, r3, #1
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	4013      	ands	r3, r2
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <f_mkfs+0xba>
 800b412:	2301      	movs	r3, #1
 800b414:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800b416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b41a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d003      	beq.n	800b42a <f_mkfs+0xce>
 800b422:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	429a      	cmp	r2, r3
 800b428:	d309      	bcc.n	800b43e <f_mkfs+0xe2>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b430:	d805      	bhi.n	800b43e <f_mkfs+0xe2>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	1e5a      	subs	r2, r3, #1
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	4013      	ands	r3, r2
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d001      	beq.n	800b442 <f_mkfs+0xe6>
 800b43e:	2313      	movs	r3, #19
 800b440:	e3b2      	b.n	800bba8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800b442:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	fbb2 f3f3 	udiv	r3, r2, r3
 800b44a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800b450:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b452:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b456:	fbb2 f3f3 	udiv	r3, r2, r3
 800b45a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800b45c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b460:	fb02 f303 	mul.w	r3, r2, r3
 800b464:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800b466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d101      	bne.n	800b470 <f_mkfs+0x114>
 800b46c:	230e      	movs	r3, #14
 800b46e:	e39b      	b.n	800bba8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800b470:	f107 0210 	add.w	r2, r7, #16
 800b474:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b478:	2101      	movs	r1, #1
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fd fd88 	bl	8008f90 <disk_ioctl>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <f_mkfs+0x12e>
 800b486:	2301      	movs	r3, #1
 800b488:	e38e      	b.n	800bba8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800b48a:	7afb      	ldrb	r3, [r7, #11]
 800b48c:	f003 0308 	and.w	r3, r3, #8
 800b490:	2b00      	cmp	r3, #0
 800b492:	d001      	beq.n	800b498 <f_mkfs+0x13c>
 800b494:	2300      	movs	r3, #0
 800b496:	e000      	b.n	800b49a <f_mkfs+0x13e>
 800b498:	233f      	movs	r3, #63	; 0x3f
 800b49a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d901      	bls.n	800b4a8 <f_mkfs+0x14c>
 800b4a4:	230e      	movs	r3, #14
 800b4a6:	e37f      	b.n	800bba8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800b4a8:	693a      	ldr	r2, [r7, #16]
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	2b7f      	cmp	r3, #127	; 0x7f
 800b4b4:	d801      	bhi.n	800b4ba <f_mkfs+0x15e>
 800b4b6:	230e      	movs	r3, #14
 800b4b8:	e376      	b.n	800bba8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b80      	cmp	r3, #128	; 0x80
 800b4be:	d901      	bls.n	800b4c4 <f_mkfs+0x168>
 800b4c0:	2313      	movs	r3, #19
 800b4c2:	e371      	b.n	800bba8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800b4c4:	7afb      	ldrb	r3, [r7, #11]
 800b4c6:	f003 0302 	and.w	r3, r3, #2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00d      	beq.n	800b4ea <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800b4ce:	7afb      	ldrb	r3, [r7, #11]
 800b4d0:	f003 0307 	and.w	r3, r3, #7
 800b4d4:	2b02      	cmp	r3, #2
 800b4d6:	d004      	beq.n	800b4e2 <f_mkfs+0x186>
 800b4d8:	7afb      	ldrb	r3, [r7, #11]
 800b4da:	f003 0301 	and.w	r3, r3, #1
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d103      	bne.n	800b4ea <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800b4e2:	2303      	movs	r3, #3
 800b4e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b4e8:	e009      	b.n	800b4fe <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800b4ea:	7afb      	ldrb	r3, [r7, #11]
 800b4ec:	f003 0301 	and.w	r3, r3, #1
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d101      	bne.n	800b4f8 <f_mkfs+0x19c>
 800b4f4:	2313      	movs	r3, #19
 800b4f6:	e357      	b.n	800bba8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800b4f8:	2302      	movs	r3, #2
 800b4fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800b502:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b506:	2b03      	cmp	r3, #3
 800b508:	d13c      	bne.n	800b584 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800b50a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d11b      	bne.n	800b548 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800b510:	693b      	ldr	r3, [r7, #16]
 800b512:	0c5b      	lsrs	r3, r3, #17
 800b514:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b516:	2300      	movs	r3, #0
 800b518:	64bb      	str	r3, [r7, #72]	; 0x48
 800b51a:	2301      	movs	r3, #1
 800b51c:	653b      	str	r3, [r7, #80]	; 0x50
 800b51e:	e005      	b.n	800b52c <f_mkfs+0x1d0>
 800b520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b522:	3301      	adds	r3, #1
 800b524:	64bb      	str	r3, [r7, #72]	; 0x48
 800b526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b528:	005b      	lsls	r3, r3, #1
 800b52a:	653b      	str	r3, [r7, #80]	; 0x50
 800b52c:	4a2d      	ldr	r2, [pc, #180]	; (800b5e4 <f_mkfs+0x288>)
 800b52e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b530:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d007      	beq.n	800b548 <f_mkfs+0x1ec>
 800b538:	4a2a      	ldr	r2, [pc, #168]	; (800b5e4 <f_mkfs+0x288>)
 800b53a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b53c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b540:	461a      	mov	r2, r3
 800b542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b544:	4293      	cmp	r3, r2
 800b546:	d2eb      	bcs.n	800b520 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b54c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b550:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800b552:	6a3b      	ldr	r3, [r7, #32]
 800b554:	3302      	adds	r3, #2
 800b556:	009a      	lsls	r2, r3, #2
 800b558:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b55a:	4413      	add	r3, r2
 800b55c:	1e5a      	subs	r2, r3, #1
 800b55e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b560:	fbb2 f3f3 	udiv	r3, r2, r3
 800b564:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800b566:	2320      	movs	r3, #32
 800b568:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800b56a:	2300      	movs	r3, #0
 800b56c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800b56e:	6a3b      	ldr	r3, [r7, #32]
 800b570:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b574:	4293      	cmp	r3, r2
 800b576:	d903      	bls.n	800b580 <f_mkfs+0x224>
 800b578:	6a3b      	ldr	r3, [r7, #32]
 800b57a:	4a1b      	ldr	r2, [pc, #108]	; (800b5e8 <f_mkfs+0x28c>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d952      	bls.n	800b626 <f_mkfs+0x2ca>
 800b580:	230e      	movs	r3, #14
 800b582:	e311      	b.n	800bba8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800b584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b586:	2b00      	cmp	r3, #0
 800b588:	d11b      	bne.n	800b5c2 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	0b1b      	lsrs	r3, r3, #12
 800b58e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800b590:	2300      	movs	r3, #0
 800b592:	64bb      	str	r3, [r7, #72]	; 0x48
 800b594:	2301      	movs	r3, #1
 800b596:	653b      	str	r3, [r7, #80]	; 0x50
 800b598:	e005      	b.n	800b5a6 <f_mkfs+0x24a>
 800b59a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b59c:	3301      	adds	r3, #1
 800b59e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5a2:	005b      	lsls	r3, r3, #1
 800b5a4:	653b      	str	r3, [r7, #80]	; 0x50
 800b5a6:	4a11      	ldr	r2, [pc, #68]	; (800b5ec <f_mkfs+0x290>)
 800b5a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d007      	beq.n	800b5c2 <f_mkfs+0x266>
 800b5b2:	4a0e      	ldr	r2, [pc, #56]	; (800b5ec <f_mkfs+0x290>)
 800b5b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d2eb      	bcs.n	800b59a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ca:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d90c      	bls.n	800b5f0 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800b5d6:	6a3b      	ldr	r3, [r7, #32]
 800b5d8:	3302      	adds	r3, #2
 800b5da:	005b      	lsls	r3, r3, #1
 800b5dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5de:	e012      	b.n	800b606 <f_mkfs+0x2aa>
 800b5e0:	20004a5c 	.word	0x20004a5c
 800b5e4:	0800eea4 	.word	0x0800eea4
 800b5e8:	0ffffff5 	.word	0x0ffffff5
 800b5ec:	0800eeb4 	.word	0x0800eeb4
				} else {
					fmt = FS_FAT12;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800b5f6:	6a3a      	ldr	r2, [r7, #32]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	4413      	add	r3, r2
 800b5fe:	3301      	adds	r3, #1
 800b600:	085b      	lsrs	r3, r3, #1
 800b602:	3303      	adds	r3, #3
 800b604:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800b606:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b60a:	4413      	add	r3, r2
 800b60c:	1e5a      	subs	r2, r3, #1
 800b60e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b610:	fbb2 f3f3 	udiv	r3, r2, r3
 800b614:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800b616:	2301      	movs	r3, #1
 800b618:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800b61a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b61c:	015a      	lsls	r2, r3, #5
 800b61e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b620:	fbb2 f3f3 	udiv	r3, r2, r3
 800b624:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800b626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b62a:	4413      	add	r3, r2
 800b62c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800b62e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b632:	fb03 f202 	mul.w	r2, r3, r2
 800b636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b638:	4413      	add	r3, r2
 800b63a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b63c:	4413      	add	r3, r2
 800b63e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800b640:	697a      	ldr	r2, [r7, #20]
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	4413      	add	r3, r2
 800b646:	1e5a      	subs	r2, r3, #1
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	425b      	negs	r3, r3
 800b64c:	401a      	ands	r2, r3
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800b654:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b658:	2b03      	cmp	r3, #3
 800b65a:	d108      	bne.n	800b66e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800b65c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b65e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b660:	4413      	add	r3, r2
 800b662:	657b      	str	r3, [r7, #84]	; 0x54
 800b664:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b668:	4413      	add	r3, r2
 800b66a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b66c:	e006      	b.n	800b67c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800b66e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b672:	fbb2 f3f3 	udiv	r3, r2, r3
 800b676:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b678:	4413      	add	r3, r2
 800b67a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800b67c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b67e:	011a      	lsls	r2, r3, #4
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	441a      	add	r2, r3
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	1ad2      	subs	r2, r2, r3
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d901      	bls.n	800b692 <f_mkfs+0x336>
 800b68e:	230e      	movs	r3, #14
 800b690:	e28a      	b.n	800bba8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800b692:	693a      	ldr	r2, [r7, #16]
 800b694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b696:	1ad2      	subs	r2, r2, r3
 800b698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b69a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b69c:	fb01 f303 	mul.w	r3, r1, r3
 800b6a0:	1ad2      	subs	r2, r2, r3
 800b6a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6a4:	1ad2      	subs	r2, r2, r3
 800b6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6ac:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800b6ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	d10f      	bne.n	800b6d6 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800b6b6:	6a3b      	ldr	r3, [r7, #32]
 800b6b8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d80a      	bhi.n	800b6d6 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d105      	bne.n	800b6d2 <f_mkfs+0x376>
 800b6c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6c8:	085b      	lsrs	r3, r3, #1
 800b6ca:	607b      	str	r3, [r7, #4]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d144      	bne.n	800b75c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800b6d2:	230e      	movs	r3, #14
 800b6d4:	e268      	b.n	800bba8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800b6d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b6da:	2b02      	cmp	r3, #2
 800b6dc:	d133      	bne.n	800b746 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800b6de:	6a3b      	ldr	r3, [r7, #32]
 800b6e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d91e      	bls.n	800b726 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d107      	bne.n	800b6fe <f_mkfs+0x3a2>
 800b6ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	2b40      	cmp	r3, #64	; 0x40
 800b6f4:	d803      	bhi.n	800b6fe <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800b6f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6f8:	005b      	lsls	r3, r3, #1
 800b6fa:	607b      	str	r3, [r7, #4]
 800b6fc:	e033      	b.n	800b766 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800b6fe:	7afb      	ldrb	r3, [r7, #11]
 800b700:	f003 0302 	and.w	r3, r3, #2
 800b704:	2b00      	cmp	r3, #0
 800b706:	d003      	beq.n	800b710 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800b708:	2303      	movs	r3, #3
 800b70a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800b70e:	e02a      	b.n	800b766 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d105      	bne.n	800b722 <f_mkfs+0x3c6>
 800b716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b718:	005b      	lsls	r3, r3, #1
 800b71a:	607b      	str	r3, [r7, #4]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b80      	cmp	r3, #128	; 0x80
 800b720:	d91e      	bls.n	800b760 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800b722:	230e      	movs	r3, #14
 800b724:	e240      	b.n	800bba8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d80a      	bhi.n	800b746 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d105      	bne.n	800b742 <f_mkfs+0x3e6>
 800b736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b738:	005b      	lsls	r3, r3, #1
 800b73a:	607b      	str	r3, [r7, #4]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2b80      	cmp	r3, #128	; 0x80
 800b740:	d910      	bls.n	800b764 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800b742:	230e      	movs	r3, #14
 800b744:	e230      	b.n	800bba8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800b746:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d10c      	bne.n	800b768 <f_mkfs+0x40c>
 800b74e:	6a3b      	ldr	r3, [r7, #32]
 800b750:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b754:	4293      	cmp	r3, r2
 800b756:	d907      	bls.n	800b768 <f_mkfs+0x40c>
 800b758:	230e      	movs	r3, #14
 800b75a:	e225      	b.n	800bba8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800b75c:	bf00      	nop
 800b75e:	e6ce      	b.n	800b4fe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b760:	bf00      	nop
 800b762:	e6cc      	b.n	800b4fe <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800b764:	bf00      	nop
			pau = au;
 800b766:	e6ca      	b.n	800b4fe <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800b768:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800b76a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b76c:	461a      	mov	r2, r3
 800b76e:	2100      	movs	r1, #0
 800b770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b772:	f7fd fcce 	bl	8009112 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800b776:	220b      	movs	r2, #11
 800b778:	49b2      	ldr	r1, [pc, #712]	; (800ba44 <f_mkfs+0x6e8>)
 800b77a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b77c:	f7fd fca8 	bl	80090d0 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	330b      	adds	r3, #11
 800b784:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b786:	4611      	mov	r1, r2
 800b788:	4618      	mov	r0, r3
 800b78a:	f7fd fc5a 	bl	8009042 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800b78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b790:	330d      	adds	r3, #13
 800b792:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b794:	b2d2      	uxtb	r2, r2
 800b796:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800b798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b79a:	330e      	adds	r3, #14
 800b79c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b79e:	b292      	uxth	r2, r2
 800b7a0:	4611      	mov	r1, r2
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fd fc4d 	bl	8009042 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800b7a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7aa:	3310      	adds	r3, #16
 800b7ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7ae:	b2d2      	uxtb	r2, r2
 800b7b0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800b7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7b4:	f103 0211 	add.w	r2, r3, #17
 800b7b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b7bc:	2b03      	cmp	r3, #3
 800b7be:	d002      	beq.n	800b7c6 <f_mkfs+0x46a>
 800b7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	e000      	b.n	800b7c8 <f_mkfs+0x46c>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	4619      	mov	r1, r3
 800b7ca:	4610      	mov	r0, r2
 800b7cc:	f7fd fc39 	bl	8009042 <st_word>
		if (sz_vol < 0x10000) {
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d6:	d208      	bcs.n	800b7ea <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800b7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7da:	3313      	adds	r3, #19
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	b292      	uxth	r2, r2
 800b7e0:	4611      	mov	r1, r2
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fd fc2d 	bl	8009042 <st_word>
 800b7e8:	e006      	b.n	800b7f8 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800b7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ec:	3320      	adds	r3, #32
 800b7ee:	693a      	ldr	r2, [r7, #16]
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fd fc40 	bl	8009078 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	3315      	adds	r3, #21
 800b7fc:	22f8      	movs	r2, #248	; 0xf8
 800b7fe:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800b800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b802:	3318      	adds	r3, #24
 800b804:	213f      	movs	r1, #63	; 0x3f
 800b806:	4618      	mov	r0, r3
 800b808:	f7fd fc1b 	bl	8009042 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800b80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b80e:	331a      	adds	r3, #26
 800b810:	21ff      	movs	r1, #255	; 0xff
 800b812:	4618      	mov	r0, r3
 800b814:	f7fd fc15 	bl	8009042 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800b818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b81a:	331c      	adds	r3, #28
 800b81c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fd fc2a 	bl	8009078 <st_dword>
		if (fmt == FS_FAT32) {
 800b824:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b828:	2b03      	cmp	r3, #3
 800b82a:	d131      	bne.n	800b890 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800b832:	f7fd f8dd 	bl	80089f0 <get_fattime>
 800b836:	4603      	mov	r3, r0
 800b838:	4619      	mov	r1, r3
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7fd fc1c 	bl	8009078 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800b840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b842:	3324      	adds	r3, #36	; 0x24
 800b844:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b846:	4618      	mov	r0, r3
 800b848:	f7fd fc16 	bl	8009078 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800b84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b84e:	332c      	adds	r3, #44	; 0x2c
 800b850:	2102      	movs	r1, #2
 800b852:	4618      	mov	r0, r3
 800b854:	f7fd fc10 	bl	8009078 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800b858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85a:	3330      	adds	r3, #48	; 0x30
 800b85c:	2101      	movs	r1, #1
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fd fbef 	bl	8009042 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800b864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b866:	3332      	adds	r3, #50	; 0x32
 800b868:	2106      	movs	r1, #6
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7fd fbe9 	bl	8009042 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	3340      	adds	r3, #64	; 0x40
 800b874:	2280      	movs	r2, #128	; 0x80
 800b876:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800b878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87a:	3342      	adds	r3, #66	; 0x42
 800b87c:	2229      	movs	r2, #41	; 0x29
 800b87e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800b880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b882:	3347      	adds	r3, #71	; 0x47
 800b884:	2213      	movs	r2, #19
 800b886:	4970      	ldr	r1, [pc, #448]	; (800ba48 <f_mkfs+0x6ec>)
 800b888:	4618      	mov	r0, r3
 800b88a:	f7fd fc21 	bl	80090d0 <mem_cpy>
 800b88e:	e020      	b.n	800b8d2 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b892:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800b896:	f7fd f8ab 	bl	80089f0 <get_fattime>
 800b89a:	4603      	mov	r3, r0
 800b89c:	4619      	mov	r1, r3
 800b89e:	4620      	mov	r0, r4
 800b8a0:	f7fd fbea 	bl	8009078 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	3316      	adds	r3, #22
 800b8a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b8aa:	b292      	uxth	r2, r2
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7fd fbc7 	bl	8009042 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	3324      	adds	r3, #36	; 0x24
 800b8b8:	2280      	movs	r2, #128	; 0x80
 800b8ba:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8be:	3326      	adds	r3, #38	; 0x26
 800b8c0:	2229      	movs	r2, #41	; 0x29
 800b8c2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800b8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c6:	332b      	adds	r3, #43	; 0x2b
 800b8c8:	2213      	movs	r2, #19
 800b8ca:	4960      	ldr	r1, [pc, #384]	; (800ba4c <f_mkfs+0x6f0>)
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fd fbff 	bl	80090d0 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800b8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b8d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f7fd fbb0 	bl	8009042 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800b8e2:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b8ec:	f7fd fb30 	bl	8008f50 <disk_write>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <f_mkfs+0x59e>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e156      	b.n	800bba8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800b8fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d140      	bne.n	800b984 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	1d9a      	adds	r2, r3, #6
 800b906:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b90a:	2301      	movs	r3, #1
 800b90c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b90e:	f7fd fb1f 	bl	8008f50 <disk_write>
			mem_set(buf, 0, ss);
 800b912:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b914:	461a      	mov	r2, r3
 800b916:	2100      	movs	r1, #0
 800b918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b91a:	f7fd fbfa 	bl	8009112 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800b91e:	494c      	ldr	r1, [pc, #304]	; (800ba50 <f_mkfs+0x6f4>)
 800b920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b922:	f7fd fba9 	bl	8009078 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800b926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b928:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b92c:	4949      	ldr	r1, [pc, #292]	; (800ba54 <f_mkfs+0x6f8>)
 800b92e:	4618      	mov	r0, r3
 800b930:	f7fd fba2 	bl	8009078 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800b934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b936:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b93a:	6a3b      	ldr	r3, [r7, #32]
 800b93c:	3b01      	subs	r3, #1
 800b93e:	4619      	mov	r1, r3
 800b940:	4610      	mov	r0, r2
 800b942:	f7fd fb99 	bl	8009078 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800b946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b948:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b94c:	2102      	movs	r1, #2
 800b94e:	4618      	mov	r0, r3
 800b950:	f7fd fb92 	bl	8009078 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800b954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b956:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b95a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b95e:	4618      	mov	r0, r3
 800b960:	f7fd fb6f 	bl	8009042 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	1dda      	adds	r2, r3, #7
 800b968:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b96c:	2301      	movs	r3, #1
 800b96e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b970:	f7fd faee 	bl	8008f50 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800b974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b976:	1c5a      	adds	r2, r3, #1
 800b978:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b97c:	2301      	movs	r3, #1
 800b97e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b980:	f7fd fae6 	bl	8008f50 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800b984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b986:	2100      	movs	r1, #0
 800b988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b98a:	f7fd fbc2 	bl	8009112 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800b98e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b990:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800b992:	2300      	movs	r3, #0
 800b994:	64bb      	str	r3, [r7, #72]	; 0x48
 800b996:	e04b      	b.n	800ba30 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800b998:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d113      	bne.n	800b9c8 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800b9a0:	f06f 0107 	mvn.w	r1, #7
 800b9a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9a6:	f7fd fb67 	bl	8009078 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fd fb60 	bl	8009078 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800b9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ba:	3308      	adds	r3, #8
 800b9bc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fd fb59 	bl	8009078 <st_dword>
 800b9c6:	e00b      	b.n	800b9e0 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800b9c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d101      	bne.n	800b9d4 <f_mkfs+0x678>
 800b9d0:	4b21      	ldr	r3, [pc, #132]	; (800ba58 <f_mkfs+0x6fc>)
 800b9d2:	e001      	b.n	800b9d8 <f_mkfs+0x67c>
 800b9d4:	f06f 0307 	mvn.w	r3, #7
 800b9d8:	4619      	mov	r1, r3
 800b9da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9dc:	f7fd fb4c 	bl	8009078 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800b9e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b9e2:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800b9e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	bf28      	it	cs
 800b9ec:	4613      	movcs	r3, r2
 800b9ee:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800b9f0:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800b9f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b9f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9fa:	f7fd faa9 	bl	8008f50 <disk_write>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <f_mkfs+0x6ac>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e0cf      	b.n	800bba8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800ba08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba10:	f7fd fb7f 	bl	8009112 <mem_set>
				sect += n; nsect -= n;
 800ba14:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ba16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba18:	4413      	add	r3, r2
 800ba1a:	667b      	str	r3, [r7, #100]	; 0x64
 800ba1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba20:	1ad3      	subs	r3, r2, r3
 800ba22:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800ba24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1dc      	bne.n	800b9e4 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ba2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba2c:	3301      	adds	r3, #1
 800ba2e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d3af      	bcc.n	800b998 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800ba38:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ba3c:	2b03      	cmp	r3, #3
 800ba3e:	d10d      	bne.n	800ba5c <f_mkfs+0x700>
 800ba40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba42:	e00c      	b.n	800ba5e <f_mkfs+0x702>
 800ba44:	0800ed98 	.word	0x0800ed98
 800ba48:	0800eda4 	.word	0x0800eda4
 800ba4c:	0800edb8 	.word	0x0800edb8
 800ba50:	41615252 	.word	0x41615252
 800ba54:	61417272 	.word	0x61417272
 800ba58:	00fffff8 	.word	0x00fffff8
 800ba5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ba5e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ba60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba64:	4293      	cmp	r3, r2
 800ba66:	bf28      	it	cs
 800ba68:	4613      	movcs	r3, r2
 800ba6a:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ba6c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800ba70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ba74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba76:	f7fd fa6b 	bl	8008f50 <disk_write>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d001      	beq.n	800ba84 <f_mkfs+0x728>
 800ba80:	2301      	movs	r3, #1
 800ba82:	e091      	b.n	800bba8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800ba84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ba86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba88:	4413      	add	r3, r2
 800ba8a:	667b      	str	r3, [r7, #100]	; 0x64
 800ba8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800ba94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1e2      	bne.n	800ba60 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800ba9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ba9e:	2b03      	cmp	r3, #3
 800baa0:	d103      	bne.n	800baaa <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800baa2:	230c      	movs	r3, #12
 800baa4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800baa8:	e010      	b.n	800bacc <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bab0:	d303      	bcc.n	800baba <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800bab2:	2306      	movs	r3, #6
 800bab4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800bab8:	e008      	b.n	800bacc <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800baba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d101      	bne.n	800bac6 <f_mkfs+0x76a>
 800bac2:	2304      	movs	r3, #4
 800bac4:	e000      	b.n	800bac8 <f_mkfs+0x76c>
 800bac6:	2301      	movs	r3, #1
 800bac8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800bacc:	7afb      	ldrb	r3, [r7, #11]
 800bace:	f003 0308 	and.w	r3, r3, #8
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d15b      	bne.n	800bb8e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800bad6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bad8:	461a      	mov	r2, r3
 800bada:	2100      	movs	r1, #0
 800badc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bade:	f7fd fb18 	bl	8009112 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bae8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800baec:	4618      	mov	r0, r3
 800baee:	f7fd faa8 	bl	8009042 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800baf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800baf8:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	2200      	movs	r2, #0
 800bafe:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800bb00:	69bb      	ldr	r3, [r7, #24]
 800bb02:	3301      	adds	r3, #1
 800bb04:	2201      	movs	r2, #1
 800bb06:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	3302      	adds	r3, #2
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800bb10:	69bb      	ldr	r3, [r7, #24]
 800bb12:	3303      	adds	r3, #3
 800bb14:	2200      	movs	r2, #0
 800bb16:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800bb18:	69bb      	ldr	r3, [r7, #24]
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800bb20:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb26:	441a      	add	r2, r3
 800bb28:	4b21      	ldr	r3, [pc, #132]	; (800bbb0 <f_mkfs+0x854>)
 800bb2a:	fba3 1302 	umull	r1, r3, r3, r2
 800bb2e:	1ad2      	subs	r2, r2, r3
 800bb30:	0852      	lsrs	r2, r2, #1
 800bb32:	4413      	add	r3, r2
 800bb34:	0b5b      	lsrs	r3, r3, #13
 800bb36:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	3305      	adds	r3, #5
 800bb3c:	22fe      	movs	r2, #254	; 0xfe
 800bb3e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800bb40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb42:	089b      	lsrs	r3, r3, #2
 800bb44:	b2da      	uxtb	r2, r3
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	3306      	adds	r3, #6
 800bb4a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800bb4e:	b2d2      	uxtb	r2, r2
 800bb50:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	3307      	adds	r3, #7
 800bb56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb58:	b2d2      	uxtb	r2, r2
 800bb5a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	3308      	adds	r3, #8
 800bb60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fd fa88 	bl	8009078 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800bb68:	69bb      	ldr	r3, [r7, #24]
 800bb6a:	330c      	adds	r3, #12
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	4611      	mov	r1, r2
 800bb70:	4618      	mov	r0, r3
 800bb72:	f7fd fa81 	bl	8009078 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800bb76:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb80:	f7fd f9e6 	bl	8008f50 <disk_write>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d001      	beq.n	800bb8e <f_mkfs+0x832>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e00c      	b.n	800bba8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800bb8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800bb92:	2200      	movs	r2, #0
 800bb94:	2100      	movs	r1, #0
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7fd f9fa 	bl	8008f90 <disk_ioctl>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <f_mkfs+0x84a>
 800bba2:	2301      	movs	r3, #1
 800bba4:	e000      	b.n	800bba8 <f_mkfs+0x84c>

	return FR_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3774      	adds	r7, #116	; 0x74
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd90      	pop	{r4, r7, pc}
 800bbb0:	0515565b 	.word	0x0515565b

0800bbb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bbca:	4b1f      	ldr	r3, [pc, #124]	; (800bc48 <FATFS_LinkDriverEx+0x94>)
 800bbcc:	7a5b      	ldrb	r3, [r3, #9]
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d131      	bne.n	800bc38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bbd4:	4b1c      	ldr	r3, [pc, #112]	; (800bc48 <FATFS_LinkDriverEx+0x94>)
 800bbd6:	7a5b      	ldrb	r3, [r3, #9]
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	461a      	mov	r2, r3
 800bbdc:	4b1a      	ldr	r3, [pc, #104]	; (800bc48 <FATFS_LinkDriverEx+0x94>)
 800bbde:	2100      	movs	r1, #0
 800bbe0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bbe2:	4b19      	ldr	r3, [pc, #100]	; (800bc48 <FATFS_LinkDriverEx+0x94>)
 800bbe4:	7a5b      	ldrb	r3, [r3, #9]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	4a17      	ldr	r2, [pc, #92]	; (800bc48 <FATFS_LinkDriverEx+0x94>)
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	4413      	add	r3, r2
 800bbee:	68fa      	ldr	r2, [r7, #12]
 800bbf0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bbf2:	4b15      	ldr	r3, [pc, #84]	; (800bc48 <FATFS_LinkDriverEx+0x94>)
 800bbf4:	7a5b      	ldrb	r3, [r3, #9]
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4b13      	ldr	r3, [pc, #76]	; (800bc48 <FATFS_LinkDriverEx+0x94>)
 800bbfc:	4413      	add	r3, r2
 800bbfe:	79fa      	ldrb	r2, [r7, #7]
 800bc00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bc02:	4b11      	ldr	r3, [pc, #68]	; (800bc48 <FATFS_LinkDriverEx+0x94>)
 800bc04:	7a5b      	ldrb	r3, [r3, #9]
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	1c5a      	adds	r2, r3, #1
 800bc0a:	b2d1      	uxtb	r1, r2
 800bc0c:	4a0e      	ldr	r2, [pc, #56]	; (800bc48 <FATFS_LinkDriverEx+0x94>)
 800bc0e:	7251      	strb	r1, [r2, #9]
 800bc10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bc12:	7dbb      	ldrb	r3, [r7, #22]
 800bc14:	3330      	adds	r3, #48	; 0x30
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	223a      	movs	r2, #58	; 0x3a
 800bc22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	3302      	adds	r3, #2
 800bc28:	222f      	movs	r2, #47	; 0x2f
 800bc2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	3303      	adds	r3, #3
 800bc30:	2200      	movs	r2, #0
 800bc32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bc34:	2300      	movs	r3, #0
 800bc36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	371c      	adds	r7, #28
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	20004a84 	.word	0x20004a84

0800bc4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bc56:	2200      	movs	r2, #0
 800bc58:	6839      	ldr	r1, [r7, #0]
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7ff ffaa 	bl	800bbb4 <FATFS_LinkDriverEx>
 800bc60:	4603      	mov	r3, r0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3708      	adds	r7, #8
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
	...

0800bc6c <Preprocessing_Init>:
float32_t pMelFilterCoefs[NUM_MEL_COEFS];
uint32_t pMelFilterStartIndices[NUM_MELS];
uint32_t pMelFilterStopIndices[NUM_MELS];

void Preprocessing_Init(void)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	af00      	add	r7, sp, #0
  /* Init window function */
  if (Window_Init(pWindowFuncBuffer, FRAME_LEN, WINDOW_HANN) != 0)
 800bc70:	2200      	movs	r2, #0
 800bc72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc76:	4830      	ldr	r0, [pc, #192]	; (800bd38 <Preprocessing_Init+0xcc>)
 800bc78:	f7f6 fb32 	bl	80022e0 <Window_Init>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d000      	beq.n	800bc84 <Preprocessing_Init+0x18>
  {
    while(1);
 800bc82:	e7fe      	b.n	800bc82 <Preprocessing_Init+0x16>
  }

  /* Init RFFT */
  arm_rfft_fast_init_f32(&S_Rfft, FFT_LEN);
 800bc84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bc88:	482c      	ldr	r0, [pc, #176]	; (800bd3c <Preprocessing_Init+0xd0>)
 800bc8a:	f000 fbe1 	bl	800c450 <arm_rfft_fast_init_f32>

  /* Init Spectrogram */
  S_Spectr.pRfft    = &S_Rfft;
 800bc8e:	4b2c      	ldr	r3, [pc, #176]	; (800bd40 <Preprocessing_Init+0xd4>)
 800bc90:	4a2a      	ldr	r2, [pc, #168]	; (800bd3c <Preprocessing_Init+0xd0>)
 800bc92:	601a      	str	r2, [r3, #0]
  S_Spectr.Type     = SPECTRUM_TYPE_POWER;
 800bc94:	4b2a      	ldr	r3, [pc, #168]	; (800bd40 <Preprocessing_Init+0xd4>)
 800bc96:	2201      	movs	r2, #1
 800bc98:	711a      	strb	r2, [r3, #4]
  S_Spectr.pWindow  = pWindowFuncBuffer;
 800bc9a:	4b29      	ldr	r3, [pc, #164]	; (800bd40 <Preprocessing_Init+0xd4>)
 800bc9c:	4a26      	ldr	r2, [pc, #152]	; (800bd38 <Preprocessing_Init+0xcc>)
 800bc9e:	609a      	str	r2, [r3, #8]
  S_Spectr.SampRate = SAMPLE_RATE;
 800bca0:	4b27      	ldr	r3, [pc, #156]	; (800bd40 <Preprocessing_Init+0xd4>)
 800bca2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800bca6:	60da      	str	r2, [r3, #12]
  S_Spectr.FrameLen = FRAME_LEN;
 800bca8:	4b25      	ldr	r3, [pc, #148]	; (800bd40 <Preprocessing_Init+0xd4>)
 800bcaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bcae:	611a      	str	r2, [r3, #16]
  S_Spectr.FFTLen   = FFT_LEN;
 800bcb0:	4b23      	ldr	r3, [pc, #140]	; (800bd40 <Preprocessing_Init+0xd4>)
 800bcb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bcb6:	615a      	str	r2, [r3, #20]
  S_Spectr.pScratch = pSpectrScratchBuffer;
 800bcb8:	4b21      	ldr	r3, [pc, #132]	; (800bd40 <Preprocessing_Init+0xd4>)
 800bcba:	4a22      	ldr	r2, [pc, #136]	; (800bd44 <Preprocessing_Init+0xd8>)
 800bcbc:	619a      	str	r2, [r3, #24]

  /* Init Mel filter */
  S_MelFilter.pStartIndices = pMelFilterStartIndices;
 800bcbe:	4b22      	ldr	r3, [pc, #136]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bcc0:	4a22      	ldr	r2, [pc, #136]	; (800bd4c <Preprocessing_Init+0xe0>)
 800bcc2:	601a      	str	r2, [r3, #0]
  S_MelFilter.pStopIndices  = pMelFilterStopIndices;
 800bcc4:	4b20      	ldr	r3, [pc, #128]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bcc6:	4a22      	ldr	r2, [pc, #136]	; (800bd50 <Preprocessing_Init+0xe4>)
 800bcc8:	605a      	str	r2, [r3, #4]
  S_MelFilter.pCoefficients = pMelFilterCoefs;
 800bcca:	4b1f      	ldr	r3, [pc, #124]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bccc:	4a21      	ldr	r2, [pc, #132]	; (800bd54 <Preprocessing_Init+0xe8>)
 800bcce:	609a      	str	r2, [r3, #8]
  S_MelFilter.NumMels   = NUM_MELS;
 800bcd0:	4b1d      	ldr	r3, [pc, #116]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bcd2:	2280      	movs	r2, #128	; 0x80
 800bcd4:	611a      	str	r2, [r3, #16]
  S_MelFilter.FFTLen    = FFT_LEN;
 800bcd6:	4b1c      	ldr	r3, [pc, #112]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bcd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bcdc:	615a      	str	r2, [r3, #20]
  S_MelFilter.SampRate  = SAMPLE_RATE;
 800bcde:	4b1a      	ldr	r3, [pc, #104]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bce0:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800bce4:	619a      	str	r2, [r3, #24]
  S_MelFilter.FMin      = 0.0;
 800bce6:	4b18      	ldr	r3, [pc, #96]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bce8:	f04f 0200 	mov.w	r2, #0
 800bcec:	61da      	str	r2, [r3, #28]
  S_MelFilter.FMax      = S_MelFilter.SampRate / 2.0;
 800bcee:	4b16      	ldr	r3, [pc, #88]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bcf0:	699b      	ldr	r3, [r3, #24]
 800bcf2:	ee07 3a90 	vmov	s15, r3
 800bcf6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800bcfa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bcfe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bd02:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800bd06:	4b10      	ldr	r3, [pc, #64]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bd08:	edc3 7a08 	vstr	s15, [r3, #32]
  S_MelFilter.Formula   = MEL_SLANEY;
 800bd0c:	4b0e      	ldr	r3, [pc, #56]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  S_MelFilter.Normalize = 1;
 800bd14:	4b0c      	ldr	r3, [pc, #48]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bd16:	2201      	movs	r2, #1
 800bd18:	629a      	str	r2, [r3, #40]	; 0x28
  S_MelFilter.Mel2F     = 1;
 800bd1a:	4b0b      	ldr	r3, [pc, #44]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	62da      	str	r2, [r3, #44]	; 0x2c
  MelFilterbank_Init(&S_MelFilter);
 800bd20:	4809      	ldr	r0, [pc, #36]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bd22:	f7f6 f803 	bl	8001d2c <MelFilterbank_Init>

  /* Init MelSpectrogram */
  S_MelSpectr.SpectrogramConf = &S_Spectr;
 800bd26:	4b0c      	ldr	r3, [pc, #48]	; (800bd58 <Preprocessing_Init+0xec>)
 800bd28:	4a05      	ldr	r2, [pc, #20]	; (800bd40 <Preprocessing_Init+0xd4>)
 800bd2a:	601a      	str	r2, [r3, #0]
  S_MelSpectr.MelFilter       = &S_MelFilter;
 800bd2c:	4b0a      	ldr	r3, [pc, #40]	; (800bd58 <Preprocessing_Init+0xec>)
 800bd2e:	4a06      	ldr	r2, [pc, #24]	; (800bd48 <Preprocessing_Init+0xdc>)
 800bd30:	605a      	str	r2, [r3, #4]
}
 800bd32:	bf00      	nop
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	20005cfc 	.word	0x20005cfc
 800bd3c:	20004a90 	.word	0x20004a90
 800bd40:	20004ad8 	.word	0x20004ad8
 800bd44:	20006cfc 	.word	0x20006cfc
 800bd48:	20004aa8 	.word	0x20004aa8
 800bd4c:	20008c1c 	.word	0x20008c1c
 800bd50:	20008e1c 	.word	0x20008e1c
 800bd54:	20007cfc 	.word	0x20007cfc
 800bd58:	20004af4 	.word	0x20004af4

0800bd5c <AudioPreprocessing_Run>:

void AudioPreprocessing_Run(int16_t *pInSignal, float32_t *pOut, uint32_t signal_len)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b088      	sub	sp, #32
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
  const uint32_t num_frames = 1 + (signal_len - FRAME_LEN) / HOP_LEN;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800bd6e:	0a1b      	lsrs	r3, r3, #8
 800bd70:	3301      	adds	r3, #1
 800bd72:	617b      	str	r3, [r7, #20]

  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800bd74:	2300      	movs	r3, #0
 800bd76:	61fb      	str	r3, [r7, #28]
 800bd78:	e029      	b.n	800bdce <AudioPreprocessing_Run+0x72>
  {
    buf_to_float_normed(&pInSignal[HOP_LEN * frame_index], pInFrame, FRAME_LEN);
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	025b      	lsls	r3, r3, #9
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	4413      	add	r3, r2
 800bd82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bd86:	4916      	ldr	r1, [pc, #88]	; (800bde0 <AudioPreprocessing_Run+0x84>)
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7f5 fefd 	bl	8001b88 <buf_to_float_normed>
    MelSpectrogramColumn(&S_MelSpectr, pInFrame, pOutColBuffer);
 800bd8e:	4a15      	ldr	r2, [pc, #84]	; (800bde4 <AudioPreprocessing_Run+0x88>)
 800bd90:	4913      	ldr	r1, [pc, #76]	; (800bde0 <AudioPreprocessing_Run+0x84>)
 800bd92:	4815      	ldr	r0, [pc, #84]	; (800bde8 <AudioPreprocessing_Run+0x8c>)
 800bd94:	f7f5 ffae 	bl	8001cf4 <MelSpectrogramColumn>
    /* Reshape column into pOut */
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800bd98:	2300      	movs	r3, #0
 800bd9a:	61bb      	str	r3, [r7, #24]
 800bd9c:	e011      	b.n	800bdc2 <AudioPreprocessing_Run+0x66>
    {
      pOut[i * num_frames + frame_index] = pOutColBuffer[i];
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	697a      	ldr	r2, [r7, #20]
 800bda2:	fb03 f202 	mul.w	r2, r3, r2
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	4413      	add	r3, r2
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	4413      	add	r3, r2
 800bdb0:	490c      	ldr	r1, [pc, #48]	; (800bde4 <AudioPreprocessing_Run+0x88>)
 800bdb2:	69ba      	ldr	r2, [r7, #24]
 800bdb4:	0092      	lsls	r2, r2, #2
 800bdb6:	440a      	add	r2, r1
 800bdb8:	6812      	ldr	r2, [r2, #0]
 800bdba:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < NUM_MELS; i++)
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	61bb      	str	r3, [r7, #24]
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	2b7f      	cmp	r3, #127	; 0x7f
 800bdc6:	d9ea      	bls.n	800bd9e <AudioPreprocessing_Run+0x42>
  for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++)
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	61fb      	str	r3, [r7, #28]
 800bdce:	69fa      	ldr	r2, [r7, #28]
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d3d1      	bcc.n	800bd7a <AudioPreprocessing_Run+0x1e>
    }
  }
}
 800bdd6:	bf00      	nop
 800bdd8:	bf00      	nop
 800bdda:	3720      	adds	r7, #32
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	20004afc 	.word	0x20004afc
 800bde4:	20005afc 	.word	0x20005afc
 800bde8:	20004af4 	.word	0x20004af4

0800bdec <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
extern SAI_HandleTypeDef hsai_BlockA1;


//handler functions
void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a08      	ldr	r2, [pc, #32]	; (800be18 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d103      	bne.n	800be04 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 800bdfc:	4b07      	ldr	r3, [pc, #28]	; (800be1c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 800bdfe:	2201      	movs	r2, #1
 800be00:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 800be02:	e002      	b.n	800be0a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 800be04:	4b06      	ldr	r3, [pc, #24]	; (800be20 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 800be06:	2201      	movs	r2, #1
 800be08:	601a      	str	r2, [r3, #0]
}
 800be0a:	bf00      	nop
 800be0c:	370c      	adds	r7, #12
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	200000f8 	.word	0x200000f8
 800be1c:	200042dc 	.word	0x200042dc
 800be20:	200042e4 	.word	0x200042e4

0800be24 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800be24:	b480      	push	{r7}
 800be26:	b083      	sub	sp, #12
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a08      	ldr	r2, [pc, #32]	; (800be50 <HAL_DFSDM_FilterRegConvCpltCallback+0x2c>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d103      	bne.n	800be3c <HAL_DFSDM_FilterRegConvCpltCallback+0x18>
  {
    DmaLeftRecBuffCplt = 1;
 800be34:	4b07      	ldr	r3, [pc, #28]	; (800be54 <HAL_DFSDM_FilterRegConvCpltCallback+0x30>)
 800be36:	2201      	movs	r2, #1
 800be38:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecBuffCplt = 1;
  }
}
 800be3a:	e002      	b.n	800be42 <HAL_DFSDM_FilterRegConvCpltCallback+0x1e>
    DmaRightRecBuffCplt = 1;
 800be3c:	4b06      	ldr	r3, [pc, #24]	; (800be58 <HAL_DFSDM_FilterRegConvCpltCallback+0x34>)
 800be3e:	2201      	movs	r2, #1
 800be40:	601a      	str	r2, [r3, #0]
}
 800be42:	bf00      	nop
 800be44:	370c      	adds	r7, #12
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	200000f8 	.word	0x200000f8
 800be54:	200042e0 	.word	0x200042e0
 800be58:	200042e8 	.word	0x200042e8

0800be5c <checkMicrophone>:



//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 800be62:	4b59      	ldr	r3, [pc, #356]	; (800bfc8 <checkMicrophone+0x16c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2b01      	cmp	r3, #1
 800be68:	d151      	bne.n	800bf0e <checkMicrophone+0xb2>
 800be6a:	4b58      	ldr	r3, [pc, #352]	; (800bfcc <checkMicrophone+0x170>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d14d      	bne.n	800bf0e <checkMicrophone+0xb2>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 800be72:	2300      	movs	r3, #0
 800be74:	607b      	str	r3, [r7, #4]
 800be76:	e040      	b.n	800befa <checkMicrophone+0x9e>
		{
			//if the buffer is not full, copies the data to the buffer
			if (BufferCtl.wr_state!= BUFFER_FULL)
 800be78:	4b55      	ldr	r3, [pc, #340]	; (800bfd0 <checkMicrophone+0x174>)
 800be7a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800be7e:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 800be82:	2b01      	cmp	r3, #1
 800be84:	d028      	beq.n	800bed8 <checkMicrophone+0x7c>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800be86:	4a53      	ldr	r2, [pc, #332]	; (800bfd4 <checkMicrophone+0x178>)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be8e:	121b      	asrs	r3, r3, #8
 800be90:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800be94:	db0b      	blt.n	800beae <checkMicrophone+0x52>
 800be96:	4a4f      	ldr	r2, [pc, #316]	; (800bfd4 <checkMicrophone+0x178>)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be9e:	121b      	asrs	r3, r3, #8
 800bea0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bea4:	4293      	cmp	r3, r2
 800bea6:	bfa8      	it	ge
 800bea8:	4613      	movge	r3, r2
 800beaa:	b29a      	uxth	r2, r3
 800beac:	e001      	b.n	800beb2 <checkMicrophone+0x56>
 800beae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800beb2:	4b47      	ldr	r3, [pc, #284]	; (800bfd0 <checkMicrophone+0x174>)
 800beb4:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800beb8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800bebc:	4944      	ldr	r1, [pc, #272]	; (800bfd0 <checkMicrophone+0x174>)
 800bebe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800bec2:	4b43      	ldr	r3, [pc, #268]	; (800bfd0 <checkMicrophone+0x174>)
 800bec4:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bec8:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800becc:	3301      	adds	r3, #1
 800bece:	4a40      	ldr	r2, [pc, #256]	; (800bfd0 <checkMicrophone+0x174>)
 800bed0:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800bed4:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800bed8:	4b3d      	ldr	r3, [pc, #244]	; (800bfd0 <checkMicrophone+0x174>)
 800beda:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bede:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800bee2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800bee6:	d305      	bcc.n	800bef4 <checkMicrophone+0x98>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800bee8:	4b39      	ldr	r3, [pc, #228]	; (800bfd0 <checkMicrophone+0x174>)
 800beea:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
		for(int i = 0; i < 1024; i++)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	3301      	adds	r3, #1
 800bef8:	607b      	str	r3, [r7, #4]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bf00:	dbba      	blt.n	800be78 <checkMicrophone+0x1c>
			}

		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 800bf02:	4b31      	ldr	r3, [pc, #196]	; (800bfc8 <checkMicrophone+0x16c>)
 800bf04:	2200      	movs	r2, #0
 800bf06:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 800bf08:	4b30      	ldr	r3, [pc, #192]	; (800bfcc <checkMicrophone+0x170>)
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 800bf0e:	4b32      	ldr	r3, [pc, #200]	; (800bfd8 <checkMicrophone+0x17c>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d152      	bne.n	800bfbc <checkMicrophone+0x160>
 800bf16:	4b31      	ldr	r3, [pc, #196]	; (800bfdc <checkMicrophone+0x180>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	2b01      	cmp	r3, #1
 800bf1c:	d14e      	bne.n	800bfbc <checkMicrophone+0x160>
	{
		for(int i = 1024; i < 2048; i++)
 800bf1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf22:	603b      	str	r3, [r7, #0]
 800bf24:	e040      	b.n	800bfa8 <checkMicrophone+0x14c>
		{

			if (BufferCtl.wr_state!= BUFFER_FULL)
 800bf26:	4b2a      	ldr	r3, [pc, #168]	; (800bfd0 <checkMicrophone+0x174>)
 800bf28:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bf2c:	f893 3d04 	ldrb.w	r3, [r3, #3332]	; 0xd04
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d028      	beq.n	800bf86 <checkMicrophone+0x12a>
			{
				BufferCtl.pcm_buff[BufferCtl.fptr]=SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800bf34:	4a27      	ldr	r2, [pc, #156]	; (800bfd4 <checkMicrophone+0x178>)
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf3c:	121b      	asrs	r3, r3, #8
 800bf3e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800bf42:	db0b      	blt.n	800bf5c <checkMicrophone+0x100>
 800bf44:	4a23      	ldr	r2, [pc, #140]	; (800bfd4 <checkMicrophone+0x178>)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf4c:	121b      	asrs	r3, r3, #8
 800bf4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800bf52:	4293      	cmp	r3, r2
 800bf54:	bfa8      	it	ge
 800bf56:	4613      	movge	r3, r2
 800bf58:	b29a      	uxth	r2, r3
 800bf5a:	e001      	b.n	800bf60 <checkMicrophone+0x104>
 800bf5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bf60:	4b1b      	ldr	r3, [pc, #108]	; (800bfd0 <checkMicrophone+0x174>)
 800bf62:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bf66:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800bf6a:	4919      	ldr	r1, [pc, #100]	; (800bfd0 <checkMicrophone+0x174>)
 800bf6c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				BufferCtl.fptr+= 1;
 800bf70:	4b17      	ldr	r3, [pc, #92]	; (800bfd0 <checkMicrophone+0x174>)
 800bf72:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bf76:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800bf7a:	3301      	adds	r3, #1
 800bf7c:	4a14      	ldr	r2, [pc, #80]	; (800bfd0 <checkMicrophone+0x174>)
 800bf7e:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800bf82:	f8c2 3d0c 	str.w	r3, [r2, #3340]	; 0xd0c
			}
			if (BufferCtl.fptr >= AUDIO_IN_PCM_BUFFER_SIZE)
 800bf86:	4b12      	ldr	r3, [pc, #72]	; (800bfd0 <checkMicrophone+0x174>)
 800bf88:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bf8c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800bf90:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800bf94:	d305      	bcc.n	800bfa2 <checkMicrophone+0x146>
			{
				BufferCtl.wr_state= BUFFER_FULL;
 800bf96:	4b0e      	ldr	r3, [pc, #56]	; (800bfd0 <checkMicrophone+0x174>)
 800bf98:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 2d04 	strb.w	r2, [r3, #3332]	; 0xd04
		for(int i = 1024; i < 2048; i++)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	603b      	str	r3, [r7, #0]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfae:	dbba      	blt.n	800bf26 <checkMicrophone+0xca>
			}
		}
		DmaLeftRecBuffCplt  = 0;
 800bfb0:	4b09      	ldr	r3, [pc, #36]	; (800bfd8 <checkMicrophone+0x17c>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 800bfb6:	4b09      	ldr	r3, [pc, #36]	; (800bfdc <checkMicrophone+0x180>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	601a      	str	r2, [r3, #0]
	}
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr
 800bfc8:	200042dc 	.word	0x200042dc
 800bfcc:	200042e4 	.word	0x200042e4
 800bfd0:	2000901c 	.word	0x2000901c
 800bfd4:	200002dc 	.word	0x200002dc
 800bfd8:	200042e0 	.word	0x200042e0
 800bfdc:	200042e8 	.word	0x200042e8

0800bfe0 <get_date>:
extern RTC_HandleTypeDef hrtc;


//returns a string containing current date
char* get_date( char* date)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af02      	add	r7, sp, #8
 800bfe6:	6078      	str	r0, [r7, #4]
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800bfe8:	f107 030c 	add.w	r3, r7, #12
 800bfec:	2200      	movs	r2, #0
 800bfee:	4619      	mov	r1, r3
 800bff0:	480a      	ldr	r0, [pc, #40]	; (800c01c <get_date+0x3c>)
 800bff2:	f7f9 fce9 	bl	80059c8 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format dd:mm::yyy
	 sprintf((char*)date,"%02d%02d%02d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 800bff6:	7bbb      	ldrb	r3, [r7, #14]
 800bff8:	461a      	mov	r2, r3
 800bffa:	7b7b      	ldrb	r3, [r7, #13]
 800bffc:	4619      	mov	r1, r3
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
 800c000:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800c004:	9300      	str	r3, [sp, #0]
 800c006:	460b      	mov	r3, r1
 800c008:	4905      	ldr	r1, [pc, #20]	; (800c020 <get_date+0x40>)
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f001 fbf8 	bl	800d800 <siprintf>

	 return date;
 800c010:	687b      	ldr	r3, [r7, #4]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	200042ec 	.word	0x200042ec
 800c020:	0800edcc 	.word	0x0800edcc

0800c024 <get_time_filename>:

	 return time;
}
//returns a string containing current time
char* get_time_filename( char* name)
	{
 800c024:	b580      	push	{r7, lr}
 800c026:	b08c      	sub	sp, #48	; 0x30
 800c028:	af02      	add	r7, sp, #8
 800c02a:	6078      	str	r0, [r7, #4]
	 char day = 'd', month = 'm', year = 'y', hour = 'h', min = 'm', sec = 's';
 800c02c:	2364      	movs	r3, #100	; 0x64
 800c02e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c032:	236d      	movs	r3, #109	; 0x6d
 800c034:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c038:	2379      	movs	r3, #121	; 0x79
 800c03a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c03e:	2368      	movs	r3, #104	; 0x68
 800c040:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 800c044:	236d      	movs	r3, #109	; 0x6d
 800c046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800c04a:	2373      	movs	r3, #115	; 0x73
 800c04c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 RTC_TimeTypeDef gTime;
	 RTC_DateTypeDef gDate;
	 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 800c050:	f107 030c 	add.w	r3, r7, #12
 800c054:	2200      	movs	r2, #0
 800c056:	4619      	mov	r1, r3
 800c058:	480c      	ldr	r0, [pc, #48]	; (800c08c <get_time_filename+0x68>)
 800c05a:	f7f9 fbd3 	bl	8005804 <HAL_RTC_GetTime>
	 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 800c05e:	f107 0308 	add.w	r3, r7, #8
 800c062:	2200      	movs	r2, #0
 800c064:	4619      	mov	r1, r3
 800c066:	4809      	ldr	r0, [pc, #36]	; (800c08c <get_time_filename+0x68>)
 800c068:	f7f9 fcae 	bl	80059c8 <HAL_RTC_GetDate>
	 //converts the struct into a sctring in the format hh:mm::ss
	 //sprintf((char*)name,"%02d-%02d-%4d-%02dh%02dm%02ds.wav",gDate.Date, gDate.Month, 2000 + gDate.Year,gTime.Hours, gTime.Minutes, gTime.Seconds);
	 //sprintf((char*)name,"%02dh%02dm%02ds.wav",gTime.Hours, gTime.Minutes, gTime.Seconds);
	 sprintf((char*)name,"%02d%02d%02d", gTime.Hours, gTime.Minutes, gTime.Seconds);
 800c06c:	7b3b      	ldrb	r3, [r7, #12]
 800c06e:	461a      	mov	r2, r3
 800c070:	7b7b      	ldrb	r3, [r7, #13]
 800c072:	4619      	mov	r1, r3
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	9300      	str	r3, [sp, #0]
 800c078:	460b      	mov	r3, r1
 800c07a:	4905      	ldr	r1, [pc, #20]	; (800c090 <get_time_filename+0x6c>)
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f001 fbbf 	bl	800d800 <siprintf>
	 return name;
 800c082:	687b      	ldr	r3, [r7, #4]
}
 800c084:	4618      	mov	r0, r3
 800c086:	3728      	adds	r7, #40	; 0x28
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	200042ec 	.word	0x200042ec
 800c090:	0800edcc 	.word	0x0800edcc

0800c094 <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b084      	sub	sp, #16
 800c098:	af02      	add	r7, sp, #8
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800c09a:	2200      	movs	r2, #0
 800c09c:	490f      	ldr	r1, [pc, #60]	; (800c0dc <SDInit+0x48>)
 800c09e:	4810      	ldr	r0, [pc, #64]	; (800c0e0 <SDInit+0x4c>)
 800c0a0:	f7fe fc34 	bl	800a90c <f_mount>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d002      	beq.n	800c0b0 <SDInit+0x1c>
	      {
	          Error_Handler();
 800c0aa:	f7f5 f8df 	bl	800126c <Error_Handler>
 800c0ae:	e010      	b.n	800c0d2 <SDInit+0x3e>
	      }
	      else if (ERASE)
	      {
	    	  //creates an FAT/exFAT volume on the logical drive
	    	  int val = f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext));
 800c0b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	4b0b      	ldr	r3, [pc, #44]	; (800c0e4 <SDInit+0x50>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	2107      	movs	r1, #7
 800c0bc:	4807      	ldr	r0, [pc, #28]	; (800c0dc <SDInit+0x48>)
 800c0be:	f7ff f94d 	bl	800b35c <f_mkfs>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	607b      	str	r3, [r7, #4]
	          if(val != FR_OK)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <SDInit+0x3e>
	          {
	        	  return -1;
 800c0cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0d0:	e000      	b.n	800c0d4 <SDInit+0x40>
	          }
	      }
	return 0;
 800c0d2:	2300      	movs	r3, #0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	200045f0 	.word	0x200045f0
 800c0e0:	200045f4 	.word	0x200045f4
 800c0e4:	20010d30 	.word	0x20010d30

0800c0e8 <createFile>:

int createFile(char* file_name)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_CREATE_ALWAYS | FA_WRITE);
 800c0f0:	220a      	movs	r2, #10
 800c0f2:	6879      	ldr	r1, [r7, #4]
 800c0f4:	4807      	ldr	r0, [pc, #28]	; (800c114 <createFile+0x2c>)
 800c0f6:	f7fe fc4f 	bl	800a998 <f_open>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d002      	beq.n	800c10a <createFile+0x22>
	  {
		  return -1;
 800c104:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c108:	e000      	b.n	800c10c <createFile+0x24>
	  }
	  return 0;
 800c10a:	2300      	movs	r3, #0

}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	20004824 	.word	0x20004824

0800c118 <writeToFile>:
int writeToFile(char* text, int size)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	f107 030c 	add.w	r3, r7, #12
 800c128:	6879      	ldr	r1, [r7, #4]
 800c12a:	4804      	ldr	r0, [pc, #16]	; (800c13c <writeToFile+0x24>)
 800c12c:	f7fe fdf2 	bl	800ad14 <f_write>
	return byteswritten;
 800c130:	68fb      	ldr	r3, [r7, #12]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	20004824 	.word	0x20004824

0800c140 <SDclose>:
int SDclose()
{
 800c140:	b580      	push	{r7, lr}
 800c142:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800c144:	4802      	ldr	r0, [pc, #8]	; (800c150 <SDclose+0x10>)
 800c146:	f7fe ffd8 	bl	800b0fa <f_close>
	return 0;
 800c14a:	2300      	movs	r3, #0
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	20004824 	.word	0x20004824

0800c154 <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern recording;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	4603      	mov	r3, r0
 800c15c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800c15e:	88fb      	ldrh	r3, [r7, #6]
 800c160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c164:	d10a      	bne.n	800c17c <HAL_GPIO_EXTI_Callback+0x28>
	  recording = !recording;
 800c166:	4b09      	ldr	r3, [pc, #36]	; (800c18c <HAL_GPIO_EXTI_Callback+0x38>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	bf0c      	ite	eq
 800c16e:	2301      	moveq	r3, #1
 800c170:	2300      	movne	r3, #0
 800c172:	b2db      	uxtb	r3, r3
 800c174:	461a      	mov	r2, r3
 800c176:	4b05      	ldr	r3, [pc, #20]	; (800c18c <HAL_GPIO_EXTI_Callback+0x38>)
 800c178:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800c17a:	e000      	b.n	800c17e <HAL_GPIO_EXTI_Callback+0x2a>
      __NOP();
 800c17c:	bf00      	nop
}
 800c17e:	bf00      	nop
 800c180:	370c      	adds	r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	200002d8 	.word	0x200002d8

0800c190 <WavProcess_EncInit>:
extern AUDIO_IN_BufferTypeDef  BufferCtl;
uint8_t pHeaderBuff[44];


uint32_t WavProcess_EncInit(uint32_t Freq, uint8_t *pHeader)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  /* Initialize the encoder structure */
  WaveFormat.SampleRate = 16000U;        /* Audio sampling frequency */
 800c19a:	4b21      	ldr	r3, [pc, #132]	; (800c220 <WavProcess_EncInit+0x90>)
 800c19c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800c1a0:	619a      	str	r2, [r3, #24]
  WaveFormat.NbrChannels = 1;          /* Number of channels: 1:Mono or 2:Stereo */
 800c1a2:	4b1f      	ldr	r3, [pc, #124]	; (800c220 <WavProcess_EncInit+0x90>)
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	82da      	strh	r2, [r3, #22]
  WaveFormat.BitPerSample = 16;        /* Number of bits per sample (16, 24 or 32) */
 800c1a8:	4b1d      	ldr	r3, [pc, #116]	; (800c220 <WavProcess_EncInit+0x90>)
 800c1aa:	2210      	movs	r2, #16
 800c1ac:	845a      	strh	r2, [r3, #34]	; 0x22
  WaveFormat.FileSize = 0x001D4C00;    /* Total length of useful audio data (payload) */
 800c1ae:	4b1c      	ldr	r3, [pc, #112]	; (800c220 <WavProcess_EncInit+0x90>)
 800c1b0:	4a1c      	ldr	r2, [pc, #112]	; (800c224 <WavProcess_EncInit+0x94>)
 800c1b2:	605a      	str	r2, [r3, #4]
  WaveFormat.SubChunk1Size = 44;       /* The file header chunk size */
 800c1b4:	4b1a      	ldr	r3, [pc, #104]	; (800c220 <WavProcess_EncInit+0x90>)
 800c1b6:	222c      	movs	r2, #44	; 0x2c
 800c1b8:	611a      	str	r2, [r3, #16]
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800c1ba:	4b19      	ldr	r3, [pc, #100]	; (800c220 <WavProcess_EncInit+0x90>)
 800c1bc:	699b      	ldr	r3, [r3, #24]
                        (WaveFormat.BitPerSample/8) * \
 800c1be:	4a18      	ldr	r2, [pc, #96]	; (800c220 <WavProcess_EncInit+0x90>)
 800c1c0:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 800c1c2:	08d2      	lsrs	r2, r2, #3
 800c1c4:	b292      	uxth	r2, r2
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800c1c6:	fb02 f303 	mul.w	r3, r2, r3
                         WaveFormat.NbrChannels);     /* Number of bytes per second  (sample rate * block align)  */
 800c1ca:	4a15      	ldr	r2, [pc, #84]	; (800c220 <WavProcess_EncInit+0x90>)
 800c1cc:	8ad2      	ldrh	r2, [r2, #22]
                        (WaveFormat.BitPerSample/8) * \
 800c1ce:	fb02 f303 	mul.w	r3, r2, r3
  WaveFormat.ByteRate = (WaveFormat.SampleRate * \
 800c1d2:	4a13      	ldr	r2, [pc, #76]	; (800c220 <WavProcess_EncInit+0x90>)
 800c1d4:	61d3      	str	r3, [r2, #28]
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800c1d6:	4b12      	ldr	r3, [pc, #72]	; (800c220 <WavProcess_EncInit+0x90>)
 800c1d8:	8ada      	ldrh	r2, [r3, #22]
                         (WaveFormat.BitPerSample/8); /* channels * bits/sample / 8 */
 800c1da:	4b11      	ldr	r3, [pc, #68]	; (800c220 <WavProcess_EncInit+0x90>)
 800c1dc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
  WaveFormat.BlockAlign = WaveFormat.NbrChannels * \
 800c1de:	08db      	lsrs	r3, r3, #3
 800c1e0:	b29b      	uxth	r3, r3
 800c1e2:	fb12 f303 	smulbb	r3, r2, r3
 800c1e6:	b29a      	uxth	r2, r3
 800c1e8:	4b0d      	ldr	r3, [pc, #52]	; (800c220 <WavProcess_EncInit+0x90>)
 800c1ea:	841a      	strh	r2, [r3, #32]
  BufferCtl.size = BufferCtl.fptr * 2;
 800c1ec:	4b0e      	ldr	r3, [pc, #56]	; (800c228 <WavProcess_EncInit+0x98>)
 800c1ee:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c1f2:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800c1f6:	005b      	lsls	r3, r3, #1
 800c1f8:	4a0b      	ldr	r2, [pc, #44]	; (800c228 <WavProcess_EncInit+0x98>)
 800c1fa:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800c1fe:	f8c2 3d10 	str.w	r3, [r2, #3344]	; 0xd10
  /* Parse the wav file header and extract required information */
  if(WavProcess_HeaderInit(pHeader, &WaveFormat, &BufferCtl))
 800c202:	4a09      	ldr	r2, [pc, #36]	; (800c228 <WavProcess_EncInit+0x98>)
 800c204:	4906      	ldr	r1, [pc, #24]	; (800c220 <WavProcess_EncInit+0x90>)
 800c206:	6838      	ldr	r0, [r7, #0]
 800c208:	f000 f810 	bl	800c22c <WavProcess_HeaderInit>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d001      	beq.n	800c216 <WavProcess_EncInit+0x86>
  {
    return 1;
 800c212:	2301      	movs	r3, #1
 800c214:	e000      	b.n	800c218 <WavProcess_EncInit+0x88>
  }
  return 0;
 800c216:	2300      	movs	r3, #0
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	20018d30 	.word	0x20018d30
 800c224:	001d4c00 	.word	0x001d4c00
 800c228:	2000901c 	.word	0x2000901c

0800c22c <WavProcess_HeaderInit>:
  * @param  pHeader: Header Buffer to be filled
  * @param  pWaveFormatStruct: Pointer to the wave structure to be filled.
  * @retval 0 if passed, !0 if failed.
  */
uint32_t WavProcess_HeaderInit(uint8_t* pHeader, WAVE_FormatTypeDef* pWaveFormatStruct, AUDIO_IN_BufferTypeDef*  BufferCtl)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
  /* Write chunkID, must be 'RIFF'  ------------------------------------------*/
  pHeader[0] = 'R';
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2252      	movs	r2, #82	; 0x52
 800c23c:	701a      	strb	r2, [r3, #0]
  pHeader[1] = 'I';
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	3301      	adds	r3, #1
 800c242:	2249      	movs	r2, #73	; 0x49
 800c244:	701a      	strb	r2, [r3, #0]
  pHeader[2] = 'F';
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	3302      	adds	r3, #2
 800c24a:	2246      	movs	r2, #70	; 0x46
 800c24c:	701a      	strb	r2, [r3, #0]
  pHeader[3] = 'F';
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	3303      	adds	r3, #3
 800c252:	2246      	movs	r2, #70	; 0x46
 800c254:	701a      	strb	r2, [r3, #0]

  /* Write the file length ---------------------------------------------------*/
  /* The sampling time: this value will be written back at the end of the
     recording operation.  Example: 661500 Btyes = 0x000A17FC, byte[7]=0x00, byte[4]=0xFC */

  pHeader[4] = (uint8_t)(BufferCtl->size);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c25c:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	3304      	adds	r3, #4
 800c264:	b2d2      	uxtb	r2, r2
 800c266:	701a      	strb	r2, [r3, #0]
  pHeader[5] = (uint8_t)(BufferCtl->size >> 8);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c26e:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c272:	0a1a      	lsrs	r2, r3, #8
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	3305      	adds	r3, #5
 800c278:	b2d2      	uxtb	r2, r2
 800c27a:	701a      	strb	r2, [r3, #0]
  pHeader[6] = (uint8_t)(BufferCtl->size >> 16);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c282:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c286:	0c1a      	lsrs	r2, r3, #16
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	3306      	adds	r3, #6
 800c28c:	b2d2      	uxtb	r2, r2
 800c28e:	701a      	strb	r2, [r3, #0]
  pHeader[7] = (uint8_t)(BufferCtl->size >> 24);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c296:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c29a:	0e1a      	lsrs	r2, r3, #24
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	3307      	adds	r3, #7
 800c2a0:	b2d2      	uxtb	r2, r2
 800c2a2:	701a      	strb	r2, [r3, #0]

  /* Write the file format, must be 'WAVE' -----------------------------------*/
  pHeader[8]  = 'W';
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3308      	adds	r3, #8
 800c2a8:	2257      	movs	r2, #87	; 0x57
 800c2aa:	701a      	strb	r2, [r3, #0]
  pHeader[9]  = 'A';
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	3309      	adds	r3, #9
 800c2b0:	2241      	movs	r2, #65	; 0x41
 800c2b2:	701a      	strb	r2, [r3, #0]
  pHeader[10] = 'V';
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	330a      	adds	r3, #10
 800c2b8:	2256      	movs	r2, #86	; 0x56
 800c2ba:	701a      	strb	r2, [r3, #0]
  pHeader[11] = 'E';
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	330b      	adds	r3, #11
 800c2c0:	2245      	movs	r2, #69	; 0x45
 800c2c2:	701a      	strb	r2, [r3, #0]

  /* Write the format chunk, must be'fmt ' -----------------------------------*/
  pHeader[12]  = 'f';
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	330c      	adds	r3, #12
 800c2c8:	2266      	movs	r2, #102	; 0x66
 800c2ca:	701a      	strb	r2, [r3, #0]
  pHeader[13]  = 'm';
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	330d      	adds	r3, #13
 800c2d0:	226d      	movs	r2, #109	; 0x6d
 800c2d2:	701a      	strb	r2, [r3, #0]
  pHeader[14]  = 't';
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	330e      	adds	r3, #14
 800c2d8:	2274      	movs	r2, #116	; 0x74
 800c2da:	701a      	strb	r2, [r3, #0]
  pHeader[15]  = ' ';
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	330f      	adds	r3, #15
 800c2e0:	2220      	movs	r2, #32
 800c2e2:	701a      	strb	r2, [r3, #0]

  /* Write the length of the 'fmt' data, must be 0x10 ------------------------*/
  pHeader[16]  = 0x10;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	3310      	adds	r3, #16
 800c2e8:	2210      	movs	r2, #16
 800c2ea:	701a      	strb	r2, [r3, #0]
  pHeader[17]  = 0x00;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	3311      	adds	r3, #17
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	701a      	strb	r2, [r3, #0]
  pHeader[18]  = 0x00;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3312      	adds	r3, #18
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	701a      	strb	r2, [r3, #0]
  pHeader[19]  = 0x00;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	3313      	adds	r3, #19
 800c300:	2200      	movs	r2, #0
 800c302:	701a      	strb	r2, [r3, #0]

  /* Write the audio format, must be 0x01 (PCM) ------------------------------*/
  pHeader[20]  = 0x01;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	3314      	adds	r3, #20
 800c308:	2201      	movs	r2, #1
 800c30a:	701a      	strb	r2, [r3, #0]
  pHeader[21]  = 0x00;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	3315      	adds	r3, #21
 800c310:	2200      	movs	r2, #0
 800c312:	701a      	strb	r2, [r3, #0]

  /* Write the number of channels, ie. 0x01 (Mono) ---------------------------*/
  pHeader[22]  = pWaveFormatStruct->NbrChannels;
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	8ada      	ldrh	r2, [r3, #22]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	3316      	adds	r3, #22
 800c31c:	b2d2      	uxtb	r2, r2
 800c31e:	701a      	strb	r2, [r3, #0]
  pHeader[23]  = 0x00;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	3317      	adds	r3, #23
 800c324:	2200      	movs	r2, #0
 800c326:	701a      	strb	r2, [r3, #0]

  /* Write the Sample Rate in Hz ---------------------------------------------*/
  /* Write Little Endian ie. 8000 = 0x00001F40 => byte[24]=0x40, byte[27]=0x00*/
  pHeader[24]  = (uint8_t)((pWaveFormatStruct->SampleRate & 0xFF));
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	699a      	ldr	r2, [r3, #24]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3318      	adds	r3, #24
 800c330:	b2d2      	uxtb	r2, r2
 800c332:	701a      	strb	r2, [r3, #0]
  pHeader[25]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 8) & 0xFF);
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	0a1a      	lsrs	r2, r3, #8
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	3319      	adds	r3, #25
 800c33e:	b2d2      	uxtb	r2, r2
 800c340:	701a      	strb	r2, [r3, #0]
  pHeader[26]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 16) & 0xFF);
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	699b      	ldr	r3, [r3, #24]
 800c346:	0c1a      	lsrs	r2, r3, #16
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	331a      	adds	r3, #26
 800c34c:	b2d2      	uxtb	r2, r2
 800c34e:	701a      	strb	r2, [r3, #0]
  pHeader[27]  = (uint8_t)((pWaveFormatStruct->SampleRate >> 24) & 0xFF);
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	699b      	ldr	r3, [r3, #24]
 800c354:	0e1a      	lsrs	r2, r3, #24
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	331b      	adds	r3, #27
 800c35a:	b2d2      	uxtb	r2, r2
 800c35c:	701a      	strb	r2, [r3, #0]

  /* Write the Byte Rate -----------------------------------------------------*/
  pHeader[28]  = (uint8_t)((pWaveFormatStruct->ByteRate & 0xFF));
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	69da      	ldr	r2, [r3, #28]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	331c      	adds	r3, #28
 800c366:	b2d2      	uxtb	r2, r2
 800c368:	701a      	strb	r2, [r3, #0]
  pHeader[29]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 8) & 0xFF);
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	69db      	ldr	r3, [r3, #28]
 800c36e:	0a1a      	lsrs	r2, r3, #8
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	331d      	adds	r3, #29
 800c374:	b2d2      	uxtb	r2, r2
 800c376:	701a      	strb	r2, [r3, #0]
  pHeader[30]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 16) & 0xFF);
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	69db      	ldr	r3, [r3, #28]
 800c37c:	0c1a      	lsrs	r2, r3, #16
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	331e      	adds	r3, #30
 800c382:	b2d2      	uxtb	r2, r2
 800c384:	701a      	strb	r2, [r3, #0]
  pHeader[31]  = (uint8_t)((pWaveFormatStruct->ByteRate >> 24) & 0xFF);
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	69db      	ldr	r3, [r3, #28]
 800c38a:	0e1a      	lsrs	r2, r3, #24
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	331f      	adds	r3, #31
 800c390:	b2d2      	uxtb	r2, r2
 800c392:	701a      	strb	r2, [r3, #0]

  /* Write the block alignment -----------------------------------------------*/
  pHeader[32]  = pWaveFormatStruct->BlockAlign;
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	8c1a      	ldrh	r2, [r3, #32]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3320      	adds	r3, #32
 800c39c:	b2d2      	uxtb	r2, r2
 800c39e:	701a      	strb	r2, [r3, #0]
  pHeader[33]  = 0x00;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3321      	adds	r3, #33	; 0x21
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	701a      	strb	r2, [r3, #0]

  /* Write the number of bits per sample -------------------------------------*/
  pHeader[34]  = pWaveFormatStruct->BitPerSample;
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	3322      	adds	r3, #34	; 0x22
 800c3b0:	b2d2      	uxtb	r2, r2
 800c3b2:	701a      	strb	r2, [r3, #0]
  pHeader[35]  = 0x00;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	3323      	adds	r3, #35	; 0x23
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	701a      	strb	r2, [r3, #0]

  /* Write the Data chunk, must be 'data' ------------------------------------*/
  pHeader[36]  = 'd';
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3324      	adds	r3, #36	; 0x24
 800c3c0:	2264      	movs	r2, #100	; 0x64
 800c3c2:	701a      	strb	r2, [r3, #0]
  pHeader[37]  = 'a';
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	3325      	adds	r3, #37	; 0x25
 800c3c8:	2261      	movs	r2, #97	; 0x61
 800c3ca:	701a      	strb	r2, [r3, #0]
  pHeader[38]  = 't';
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	3326      	adds	r3, #38	; 0x26
 800c3d0:	2274      	movs	r2, #116	; 0x74
 800c3d2:	701a      	strb	r2, [r3, #0]
  pHeader[39]  = 'a';
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3327      	adds	r3, #39	; 0x27
 800c3d8:	2261      	movs	r2, #97	; 0x61
 800c3da:	701a      	strb	r2, [r3, #0]

  /* Write the number of sample data -----------------------------------------*/
  /* This variable will be written back at the end of the recording operation */
  BufferCtl->size -=44;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c3e2:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c3e6:	3b2c      	subs	r3, #44	; 0x2c
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
 800c3ee:	f8c2 3d10 	str.w	r3, [r2, #3344]	; 0xd10
  pHeader[40] = (uint8_t)(BufferCtl->size);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c3f8:	f8d3 2d10 	ldr.w	r2, [r3, #3344]	; 0xd10
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	3328      	adds	r3, #40	; 0x28
 800c400:	b2d2      	uxtb	r2, r2
 800c402:	701a      	strb	r2, [r3, #0]
  pHeader[41] = (uint8_t)(BufferCtl->size >> 8);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c40a:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c40e:	0a1a      	lsrs	r2, r3, #8
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	3329      	adds	r3, #41	; 0x29
 800c414:	b2d2      	uxtb	r2, r2
 800c416:	701a      	strb	r2, [r3, #0]
  pHeader[42] = (uint8_t)(BufferCtl->size >> 16);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c41e:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c422:	0c1a      	lsrs	r2, r3, #16
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	332a      	adds	r3, #42	; 0x2a
 800c428:	b2d2      	uxtb	r2, r2
 800c42a:	701a      	strb	r2, [r3, #0]
  pHeader[43] = (uint8_t)(BufferCtl->size >> 24);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
 800c432:	f8d3 3d10 	ldr.w	r3, [r3, #3344]	; 0xd10
 800c436:	0e1a      	lsrs	r2, r3, #24
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	332b      	adds	r3, #43	; 0x2b
 800c43c:	b2d2      	uxtb	r2, r2
 800c43e:	701a      	strb	r2, [r3, #0]

  /* Return 0 if all operations are OK */
  return 0;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3714      	adds	r7, #20
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
	...

0800c450 <arm_rfft_fast_init_f32>:
 800c450:	084b      	lsrs	r3, r1, #1
 800c452:	2b80      	cmp	r3, #128	; 0x80
 800c454:	b430      	push	{r4, r5}
 800c456:	8201      	strh	r1, [r0, #16]
 800c458:	8003      	strh	r3, [r0, #0]
 800c45a:	d070      	beq.n	800c53e <arm_rfft_fast_init_f32+0xee>
 800c45c:	d916      	bls.n	800c48c <arm_rfft_fast_init_f32+0x3c>
 800c45e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c462:	d05f      	beq.n	800c524 <arm_rfft_fast_init_f32+0xd4>
 800c464:	d936      	bls.n	800c4d4 <arm_rfft_fast_init_f32+0x84>
 800c466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c46a:	d026      	beq.n	800c4ba <arm_rfft_fast_init_f32+0x6a>
 800c46c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c470:	d112      	bne.n	800c498 <arm_rfft_fast_init_f32+0x48>
 800c472:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 800c476:	4c38      	ldr	r4, [pc, #224]	; (800c558 <arm_rfft_fast_init_f32+0x108>)
 800c478:	4938      	ldr	r1, [pc, #224]	; (800c55c <arm_rfft_fast_init_f32+0x10c>)
 800c47a:	2300      	movs	r3, #0
 800c47c:	4a38      	ldr	r2, [pc, #224]	; (800c560 <arm_rfft_fast_init_f32+0x110>)
 800c47e:	8185      	strh	r5, [r0, #12]
 800c480:	6084      	str	r4, [r0, #8]
 800c482:	6041      	str	r1, [r0, #4]
 800c484:	6142      	str	r2, [r0, #20]
 800c486:	4618      	mov	r0, r3
 800c488:	bc30      	pop	{r4, r5}
 800c48a:	4770      	bx	lr
 800c48c:	2b20      	cmp	r3, #32
 800c48e:	d031      	beq.n	800c4f4 <arm_rfft_fast_init_f32+0xa4>
 800c490:	2b40      	cmp	r3, #64	; 0x40
 800c492:	d006      	beq.n	800c4a2 <arm_rfft_fast_init_f32+0x52>
 800c494:	2b10      	cmp	r3, #16
 800c496:	d039      	beq.n	800c50c <arm_rfft_fast_init_f32+0xbc>
 800c498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c49c:	bc30      	pop	{r4, r5}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	4770      	bx	lr
 800c4a2:	2538      	movs	r5, #56	; 0x38
 800c4a4:	4c2f      	ldr	r4, [pc, #188]	; (800c564 <arm_rfft_fast_init_f32+0x114>)
 800c4a6:	4930      	ldr	r1, [pc, #192]	; (800c568 <arm_rfft_fast_init_f32+0x118>)
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	4a30      	ldr	r2, [pc, #192]	; (800c56c <arm_rfft_fast_init_f32+0x11c>)
 800c4ac:	8185      	strh	r5, [r0, #12]
 800c4ae:	6084      	str	r4, [r0, #8]
 800c4b0:	6041      	str	r1, [r0, #4]
 800c4b2:	6142      	str	r2, [r0, #20]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	bc30      	pop	{r4, r5}
 800c4b8:	4770      	bx	lr
 800c4ba:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 800c4be:	4c2c      	ldr	r4, [pc, #176]	; (800c570 <arm_rfft_fast_init_f32+0x120>)
 800c4c0:	492c      	ldr	r1, [pc, #176]	; (800c574 <arm_rfft_fast_init_f32+0x124>)
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	4a2c      	ldr	r2, [pc, #176]	; (800c578 <arm_rfft_fast_init_f32+0x128>)
 800c4c6:	8185      	strh	r5, [r0, #12]
 800c4c8:	6084      	str	r4, [r0, #8]
 800c4ca:	6041      	str	r1, [r0, #4]
 800c4cc:	6142      	str	r2, [r0, #20]
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	bc30      	pop	{r4, r5}
 800c4d2:	4770      	bx	lr
 800c4d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4d8:	d1de      	bne.n	800c498 <arm_rfft_fast_init_f32+0x48>
 800c4da:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 800c4de:	4c27      	ldr	r4, [pc, #156]	; (800c57c <arm_rfft_fast_init_f32+0x12c>)
 800c4e0:	4927      	ldr	r1, [pc, #156]	; (800c580 <arm_rfft_fast_init_f32+0x130>)
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	4a27      	ldr	r2, [pc, #156]	; (800c584 <arm_rfft_fast_init_f32+0x134>)
 800c4e6:	8185      	strh	r5, [r0, #12]
 800c4e8:	6084      	str	r4, [r0, #8]
 800c4ea:	6041      	str	r1, [r0, #4]
 800c4ec:	6142      	str	r2, [r0, #20]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	bc30      	pop	{r4, r5}
 800c4f2:	4770      	bx	lr
 800c4f4:	2530      	movs	r5, #48	; 0x30
 800c4f6:	4c24      	ldr	r4, [pc, #144]	; (800c588 <arm_rfft_fast_init_f32+0x138>)
 800c4f8:	4924      	ldr	r1, [pc, #144]	; (800c58c <arm_rfft_fast_init_f32+0x13c>)
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	4a24      	ldr	r2, [pc, #144]	; (800c590 <arm_rfft_fast_init_f32+0x140>)
 800c4fe:	8185      	strh	r5, [r0, #12]
 800c500:	6084      	str	r4, [r0, #8]
 800c502:	6041      	str	r1, [r0, #4]
 800c504:	6142      	str	r2, [r0, #20]
 800c506:	4618      	mov	r0, r3
 800c508:	bc30      	pop	{r4, r5}
 800c50a:	4770      	bx	lr
 800c50c:	2514      	movs	r5, #20
 800c50e:	4c21      	ldr	r4, [pc, #132]	; (800c594 <arm_rfft_fast_init_f32+0x144>)
 800c510:	4921      	ldr	r1, [pc, #132]	; (800c598 <arm_rfft_fast_init_f32+0x148>)
 800c512:	2300      	movs	r3, #0
 800c514:	4a21      	ldr	r2, [pc, #132]	; (800c59c <arm_rfft_fast_init_f32+0x14c>)
 800c516:	8185      	strh	r5, [r0, #12]
 800c518:	6084      	str	r4, [r0, #8]
 800c51a:	6041      	str	r1, [r0, #4]
 800c51c:	6142      	str	r2, [r0, #20]
 800c51e:	4618      	mov	r0, r3
 800c520:	bc30      	pop	{r4, r5}
 800c522:	4770      	bx	lr
 800c524:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 800c528:	4c1d      	ldr	r4, [pc, #116]	; (800c5a0 <arm_rfft_fast_init_f32+0x150>)
 800c52a:	491e      	ldr	r1, [pc, #120]	; (800c5a4 <arm_rfft_fast_init_f32+0x154>)
 800c52c:	2300      	movs	r3, #0
 800c52e:	4a1e      	ldr	r2, [pc, #120]	; (800c5a8 <arm_rfft_fast_init_f32+0x158>)
 800c530:	8185      	strh	r5, [r0, #12]
 800c532:	6084      	str	r4, [r0, #8]
 800c534:	6041      	str	r1, [r0, #4]
 800c536:	6142      	str	r2, [r0, #20]
 800c538:	4618      	mov	r0, r3
 800c53a:	bc30      	pop	{r4, r5}
 800c53c:	4770      	bx	lr
 800c53e:	25d0      	movs	r5, #208	; 0xd0
 800c540:	4c1a      	ldr	r4, [pc, #104]	; (800c5ac <arm_rfft_fast_init_f32+0x15c>)
 800c542:	491b      	ldr	r1, [pc, #108]	; (800c5b0 <arm_rfft_fast_init_f32+0x160>)
 800c544:	2300      	movs	r3, #0
 800c546:	4a1b      	ldr	r2, [pc, #108]	; (800c5b4 <arm_rfft_fast_init_f32+0x164>)
 800c548:	8185      	strh	r5, [r0, #12]
 800c54a:	6084      	str	r4, [r0, #8]
 800c54c:	6041      	str	r1, [r0, #4]
 800c54e:	6142      	str	r2, [r0, #20]
 800c550:	4618      	mov	r0, r3
 800c552:	bc30      	pop	{r4, r5}
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	0801dccc 	.word	0x0801dccc
 800c55c:	0800eec4 	.word	0x0800eec4
 800c560:	08015034 	.word	0x08015034
 800c564:	08012fc4 	.word	0x08012fc4
 800c568:	0801fa8c 	.word	0x0801fa8c
 800c56c:	08021f7c 	.word	0x08021f7c
 800c570:	0801b9b4 	.word	0x0801b9b4
 800c574:	080198b4 	.word	0x080198b4
 800c578:	08013034 	.word	0x08013034
 800c57c:	08021c0c 	.word	0x08021c0c
 800c580:	08019034 	.word	0x08019034
 800c584:	0801fc8c 	.word	0x0801fc8c
 800c588:	0801c86c 	.word	0x0801c86c
 800c58c:	0801b8b4 	.word	0x0801b8b4
 800c590:	08012ec4 	.word	0x08012ec4
 800c594:	0801c7c4 	.word	0x0801c7c4
 800c598:	08019834 	.word	0x08019834
 800c59c:	0801c7ec 	.word	0x0801c7ec
 800c5a0:	0802048c 	.word	0x0802048c
 800c5a4:	0801cccc 	.word	0x0801cccc
 800c5a8:	0802080c 	.word	0x0802080c
 800c5ac:	0802217c 	.word	0x0802217c
 800c5b0:	0801c8cc 	.word	0x0801c8cc
 800c5b4:	0802180c 	.word	0x0802180c

0800c5b8 <arm_rfft_fast_f32>:
 800c5b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5bc:	8a05      	ldrh	r5, [r0, #16]
 800c5be:	4606      	mov	r6, r0
 800c5c0:	4617      	mov	r7, r2
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	086d      	lsrs	r5, r5, #1
 800c5c6:	8005      	strh	r5, [r0, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d15e      	bne.n	800c68a <arm_rfft_fast_f32+0xd2>
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	f000 fbde 	bl	800cd90 <arm_cfft_f32>
 800c5d4:	edd4 7a00 	vldr	s15, [r4]
 800c5d8:	ed94 7a01 	vldr	s14, [r4, #4]
 800c5dc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800c5e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c5e4:	8832      	ldrh	r2, [r6, #0]
 800c5e6:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c5ea:	6975      	ldr	r5, [r6, #20]
 800c5ec:	3a01      	subs	r2, #1
 800c5ee:	eeb0 3a46 	vmov.f32	s6, s12
 800c5f2:	3510      	adds	r5, #16
 800c5f4:	f107 0610 	add.w	r6, r7, #16
 800c5f8:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c5fc:	eb04 00c2 	add.w	r0, r4, r2, lsl #3
 800c600:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c604:	f104 0310 	add.w	r3, r4, #16
 800c608:	3808      	subs	r0, #8
 800c60a:	ee26 7a86 	vmul.f32	s14, s13, s12
 800c60e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c612:	ed87 7a00 	vstr	s14, [r7]
 800c616:	edc7 7a01 	vstr	s15, [r7, #4]
 800c61a:	ed90 7a02 	vldr	s14, [r0, #8]
 800c61e:	3a01      	subs	r2, #1
 800c620:	ed53 6a02 	vldr	s13, [r3, #-8]
 800c624:	f1a0 0008 	sub.w	r0, r0, #8
 800c628:	ed15 6a02 	vldr	s12, [r5, #-8]
 800c62c:	f103 0308 	add.w	r3, r3, #8
 800c630:	ee77 7a66 	vsub.f32	s15, s14, s13
 800c634:	edd0 3a05 	vldr	s7, [r0, #20]
 800c638:	ed13 5a03 	vldr	s10, [r3, #-12]
 800c63c:	ee77 4a26 	vadd.f32	s9, s14, s13
 800c640:	ed55 5a01 	vldr	s11, [r5, #-4]
 800c644:	f106 0608 	add.w	r6, r6, #8
 800c648:	ee66 6a27 	vmul.f32	s13, s12, s15
 800c64c:	f105 0508 	add.w	r5, r5, #8
 800c650:	ee33 4a85 	vadd.f32	s8, s7, s10
 800c654:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800c658:	ee35 5a63 	vsub.f32	s10, s10, s7
 800c65c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800c660:	ee26 6a04 	vmul.f32	s12, s12, s8
 800c664:	ee77 7a05 	vadd.f32	s15, s14, s10
 800c668:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c66c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c670:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800c674:	ee67 7a83 	vmul.f32	s15, s15, s6
 800c678:	ee27 7a03 	vmul.f32	s14, s14, s6
 800c67c:	ed46 7a03 	vstr	s15, [r6, #-12]
 800c680:	ed06 7a04 	vstr	s14, [r6, #-16]
 800c684:	d1c9      	bne.n	800c61a <arm_rfft_fast_f32+0x62>
 800c686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c68a:	edd1 7a00 	vldr	s15, [r1]
 800c68e:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 800c692:	edd1 6a01 	vldr	s13, [r1, #4]
 800c696:	1e68      	subs	r0, r5, #1
 800c698:	6975      	ldr	r5, [r6, #20]
 800c69a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c69e:	00c1      	lsls	r1, r0, #3
 800c6a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c6a4:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c6a8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800c6ac:	ed82 7a00 	vstr	s14, [r2]
 800c6b0:	edc2 7a01 	vstr	s15, [r2, #4]
 800c6b4:	b3e0      	cbz	r0, 800c730 <arm_rfft_fast_f32+0x178>
 800c6b6:	3908      	subs	r1, #8
 800c6b8:	f104 0210 	add.w	r2, r4, #16
 800c6bc:	3510      	adds	r5, #16
 800c6be:	440c      	add	r4, r1
 800c6c0:	f107 0110 	add.w	r1, r7, #16
 800c6c4:	ed94 7a02 	vldr	s14, [r4, #8]
 800c6c8:	3801      	subs	r0, #1
 800c6ca:	ed52 6a02 	vldr	s13, [r2, #-8]
 800c6ce:	f1a4 0408 	sub.w	r4, r4, #8
 800c6d2:	ed15 6a02 	vldr	s12, [r5, #-8]
 800c6d6:	f102 0208 	add.w	r2, r2, #8
 800c6da:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800c6de:	ed94 4a05 	vldr	s8, [r4, #20]
 800c6e2:	ed12 5a03 	vldr	s10, [r2, #-12]
 800c6e6:	ee77 6a26 	vadd.f32	s13, s14, s13
 800c6ea:	ed55 5a01 	vldr	s11, [r5, #-4]
 800c6ee:	f101 0108 	add.w	r1, r1, #8
 800c6f2:	ee26 3a27 	vmul.f32	s6, s12, s15
 800c6f6:	f105 0508 	add.w	r5, r5, #8
 800c6fa:	ee74 4a05 	vadd.f32	s9, s8, s10
 800c6fe:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800c702:	ee35 5a44 	vsub.f32	s10, s10, s8
 800c706:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800c70a:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c70e:	ee77 7a05 	vadd.f32	s15, s14, s10
 800c712:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800c716:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c71a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800c71e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800c722:	ee27 7a23 	vmul.f32	s14, s14, s7
 800c726:	ed41 7a03 	vstr	s15, [r1, #-12]
 800c72a:	ed01 7a04 	vstr	s14, [r1, #-16]
 800c72e:	d1c9      	bne.n	800c6c4 <arm_rfft_fast_f32+0x10c>
 800c730:	461a      	mov	r2, r3
 800c732:	4639      	mov	r1, r7
 800c734:	4630      	mov	r0, r6
 800c736:	2301      	movs	r3, #1
 800c738:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c73c:	f000 bb28 	b.w	800cd90 <arm_cfft_f32>

0800c740 <arm_cfft_radix8by2_f32>:
 800c740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c744:	4607      	mov	r7, r0
 800c746:	4608      	mov	r0, r1
 800c748:	ed2d 8b06 	vpush	{d8-d10}
 800c74c:	f8b7 e000 	ldrh.w	lr, [r7]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800c756:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 800c75a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800c75e:	f000 80b0 	beq.w	800c8c2 <arm_cfft_radix8by2_f32+0x182>
 800c762:	008b      	lsls	r3, r1, #2
 800c764:	3210      	adds	r2, #16
 800c766:	f100 0610 	add.w	r6, r0, #16
 800c76a:	f108 0510 	add.w	r5, r8, #16
 800c76e:	3310      	adds	r3, #16
 800c770:	18c4      	adds	r4, r0, r3
 800c772:	4443      	add	r3, r8
 800c774:	ed55 6a04 	vldr	s13, [r5, #-16]
 800c778:	f1be 0e01 	subs.w	lr, lr, #1
 800c77c:	ed56 4a04 	vldr	s9, [r6, #-16]
 800c780:	f104 0410 	add.w	r4, r4, #16
 800c784:	ed15 7a03 	vldr	s14, [r5, #-12]
 800c788:	f106 0610 	add.w	r6, r6, #16
 800c78c:	ee74 9aa6 	vadd.f32	s19, s9, s13
 800c790:	ed55 7a02 	vldr	s15, [r5, #-8]
 800c794:	ed55 2a01 	vldr	s5, [r5, #-4]
 800c798:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800c79c:	ed53 0a04 	vldr	s1, [r3, #-16]
 800c7a0:	f102 0210 	add.w	r2, r2, #16
 800c7a4:	ed13 5a03 	vldr	s10, [r3, #-12]
 800c7a8:	f105 0510 	add.w	r5, r5, #16
 800c7ac:	ed13 3a02 	vldr	s6, [r3, #-8]
 800c7b0:	f103 0310 	add.w	r3, r3, #16
 800c7b4:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800c7b8:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 800c7bc:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800c7c0:	ee33 8a83 	vadd.f32	s16, s7, s6
 800c7c4:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800c7c8:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 800c7cc:	ee34 0a06 	vadd.f32	s0, s8, s12
 800c7d0:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 800c7d4:	ee76 aa87 	vadd.f32	s21, s13, s14
 800c7d8:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800c7dc:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c7e0:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 800c7e4:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800c7e8:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 800c7ec:	ee71 8a05 	vadd.f32	s17, s2, s10
 800c7f0:	ee31 aaa7 	vadd.f32	s20, s3, s15
 800c7f4:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800c7f8:	ee72 9a22 	vadd.f32	s19, s4, s5
 800c7fc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800c800:	ee35 5a41 	vsub.f32	s10, s10, s2
 800c804:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800c808:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 800c80c:	ee36 6a44 	vsub.f32	s12, s12, s8
 800c810:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 800c814:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800c818:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 800c81c:	ee72 7a62 	vsub.f32	s15, s4, s5
 800c820:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 800c824:	ee73 2a63 	vsub.f32	s5, s6, s7
 800c828:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 800c82c:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 800c830:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 800c834:	ee24 3a84 	vmul.f32	s6, s9, s8
 800c838:	ee27 2a26 	vmul.f32	s4, s14, s13
 800c83c:	ee64 4aa6 	vmul.f32	s9, s9, s13
 800c840:	ee65 3aa6 	vmul.f32	s7, s11, s13
 800c844:	ee27 7a04 	vmul.f32	s14, s14, s8
 800c848:	ee65 5a84 	vmul.f32	s11, s11, s8
 800c84c:	ee65 6a26 	vmul.f32	s13, s10, s13
 800c850:	ee25 5a04 	vmul.f32	s10, s10, s8
 800c854:	ee37 7a64 	vsub.f32	s14, s14, s9
 800c858:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800c85c:	ee33 4a02 	vadd.f32	s8, s6, s4
 800c860:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800c864:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 800c868:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 800c86c:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 800c870:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 800c874:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 800c878:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 800c87c:	ee61 4aa6 	vmul.f32	s9, s3, s13
 800c880:	ee27 4a87 	vmul.f32	s8, s15, s14
 800c884:	ee61 5a87 	vmul.f32	s11, s3, s14
 800c888:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c88c:	ee22 5a87 	vmul.f32	s10, s5, s14
 800c890:	ee26 7a07 	vmul.f32	s14, s12, s14
 800c894:	ee26 6a26 	vmul.f32	s12, s12, s13
 800c898:	ee62 6aa6 	vmul.f32	s13, s5, s13
 800c89c:	ee74 4a84 	vadd.f32	s9, s9, s8
 800c8a0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c8a4:	ee35 6a46 	vsub.f32	s12, s10, s12
 800c8a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c8ac:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 800c8b0:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 800c8b4:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800c8b8:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800c8bc:	f47f af5a 	bne.w	800c774 <arm_cfft_radix8by2_f32+0x34>
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	b28c      	uxth	r4, r1
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	4621      	mov	r1, r4
 800c8c8:	f000 fb78 	bl	800cfbc <arm_radix8_butterfly_f32>
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	4640      	mov	r0, r8
 800c8d2:	2302      	movs	r3, #2
 800c8d4:	ecbd 8b06 	vpop	{d8-d10}
 800c8d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8dc:	f000 bb6e 	b.w	800cfbc <arm_radix8_butterfly_f32>

0800c8e0 <arm_cfft_radix8by4_f32>:
 800c8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	ed2d 8b06 	vpush	{d8-d10}
 800c8e8:	8804      	ldrh	r4, [r0, #0]
 800c8ea:	b08f      	sub	sp, #60	; 0x3c
 800c8ec:	ed91 6a00 	vldr	s12, [r1]
 800c8f0:	460a      	mov	r2, r1
 800c8f2:	0864      	lsrs	r4, r4, #1
 800c8f4:	ed91 7a01 	vldr	s14, [r1, #4]
 800c8f8:	9101      	str	r1, [sp, #4]
 800c8fa:	00a3      	lsls	r3, r4, #2
 800c8fc:	6841      	ldr	r1, [r0, #4]
 800c8fe:	0864      	lsrs	r4, r4, #1
 800c900:	900c      	str	r0, [sp, #48]	; 0x30
 800c902:	9205      	str	r2, [sp, #20]
 800c904:	f101 0610 	add.w	r6, r1, #16
 800c908:	4625      	mov	r5, r4
 800c90a:	940b      	str	r4, [sp, #44]	; 0x2c
 800c90c:	f101 0408 	add.w	r4, r1, #8
 800c910:	9602      	str	r6, [sp, #8]
 800c912:	9407      	str	r4, [sp, #28]
 800c914:	18d4      	adds	r4, r2, r3
 800c916:	1eaa      	subs	r2, r5, #2
 800c918:	f101 0518 	add.w	r5, r1, #24
 800c91c:	18e0      	adds	r0, r4, r3
 800c91e:	edd4 4a00 	vldr	s9, [r4]
 800c922:	ed94 4a01 	vldr	s8, [r4, #4]
 800c926:	46a6      	mov	lr, r4
 800c928:	edd0 6a00 	vldr	s13, [r0]
 800c92c:	18c7      	adds	r7, r0, r3
 800c92e:	edd0 7a01 	vldr	s15, [r0, #4]
 800c932:	46a0      	mov	r8, r4
 800c934:	ee76 5a26 	vadd.f32	s11, s12, s13
 800c938:	ed97 5a00 	vldr	s10, [r7]
 800c93c:	ee76 6a66 	vsub.f32	s13, s12, s13
 800c940:	4604      	mov	r4, r0
 800c942:	9506      	str	r5, [sp, #24]
 800c944:	4605      	mov	r5, r0
 800c946:	ee75 2aa4 	vadd.f32	s5, s11, s9
 800c94a:	900a      	str	r0, [sp, #40]	; 0x28
 800c94c:	9801      	ldr	r0, [sp, #4]
 800c94e:	ee37 6a27 	vadd.f32	s12, s14, s15
 800c952:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c956:	ed97 3a01 	vldr	s6, [r7, #4]
 800c95a:	ee72 2a85 	vadd.f32	s5, s5, s10
 800c95e:	46bc      	mov	ip, r7
 800c960:	ee76 3a84 	vadd.f32	s7, s13, s8
 800c964:	9704      	str	r7, [sp, #16]
 800c966:	ee36 7a44 	vsub.f32	s14, s12, s8
 800c96a:	f8cd e00c 	str.w	lr, [sp, #12]
 800c96e:	ee12 9a90 	vmov	r9, s5
 800c972:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800c976:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800c97a:	1f3e      	subs	r6, r7, #4
 800c97c:	f840 9b08 	str.w	r9, [r0], #8
 800c980:	ee37 4ae4 	vsub.f32	s8, s15, s9
 800c984:	edde 2a01 	vldr	s5, [lr, #4]
 800c988:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800c98c:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800c990:	eddc 4a01 	vldr	s9, [ip, #4]
 800c994:	ee36 6a22 	vadd.f32	s12, s12, s5
 800c998:	9001      	str	r0, [sp, #4]
 800c99a:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800c99e:	9805      	ldr	r0, [sp, #20]
 800c9a0:	ee13 9a90 	vmov	r9, s7
 800c9a4:	ee37 7a43 	vsub.f32	s14, s14, s6
 800c9a8:	ee36 6a24 	vadd.f32	s12, s12, s9
 800c9ac:	f1ae 0704 	sub.w	r7, lr, #4
 800c9b0:	ee74 4a05 	vadd.f32	s9, s8, s10
 800c9b4:	ee76 6a83 	vadd.f32	s13, s13, s6
 800c9b8:	ed80 6a01 	vstr	s12, [r0, #4]
 800c9bc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800c9c0:	f848 9b08 	str.w	r9, [r8], #8
 800c9c4:	edce 4a01 	vstr	s9, [lr, #4]
 800c9c8:	ee15 ea90 	vmov	lr, s11
 800c9cc:	f844 eb08 	str.w	lr, [r4], #8
 800c9d0:	ee16 ea90 	vmov	lr, s13
 800c9d4:	9408      	str	r4, [sp, #32]
 800c9d6:	462c      	mov	r4, r5
 800c9d8:	ed85 7a01 	vstr	s14, [r5, #4]
 800c9dc:	9d04      	ldr	r5, [sp, #16]
 800c9de:	f84c eb08 	str.w	lr, [ip], #8
 800c9e2:	edc5 7a01 	vstr	s15, [r5, #4]
 800c9e6:	0855      	lsrs	r5, r2, #1
 800c9e8:	9509      	str	r5, [sp, #36]	; 0x24
 800c9ea:	f000 8130 	beq.w	800cc4e <arm_cfft_radix8by4_f32+0x36e>
 800c9ee:	9805      	ldr	r0, [sp, #20]
 800c9f0:	3b08      	subs	r3, #8
 800c9f2:	46ab      	mov	fp, r5
 800c9f4:	f1a4 020c 	sub.w	r2, r4, #12
 800c9f8:	f100 0510 	add.w	r5, r0, #16
 800c9fc:	f101 0920 	add.w	r9, r1, #32
 800ca00:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800ca04:	f8dd a008 	ldr.w	sl, [sp, #8]
 800ca08:	4433      	add	r3, r6
 800ca0a:	3410      	adds	r4, #16
 800ca0c:	4660      	mov	r0, ip
 800ca0e:	4641      	mov	r1, r8
 800ca10:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800ca14:	ed54 6a02 	vldr	s13, [r4, #-8]
 800ca18:	f1bb 0b01 	subs.w	fp, fp, #1
 800ca1c:	ed55 5a02 	vldr	s11, [r5, #-8]
 800ca20:	f10a 0a08 	add.w	sl, sl, #8
 800ca24:	edd1 7a00 	vldr	s15, [r1]
 800ca28:	f105 0508 	add.w	r5, r5, #8
 800ca2c:	ee75 3aa6 	vadd.f32	s7, s11, s13
 800ca30:	edd0 2a00 	vldr	s5, [r0]
 800ca34:	ed14 7a01 	vldr	s14, [r4, #-4]
 800ca38:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800ca3c:	ed55 6a03 	vldr	s13, [r5, #-12]
 800ca40:	f1a2 0208 	sub.w	r2, r2, #8
 800ca44:	ee73 4aa7 	vadd.f32	s9, s7, s15
 800ca48:	ed90 2a01 	vldr	s4, [r0, #4]
 800ca4c:	ee36 5a87 	vadd.f32	s10, s13, s14
 800ca50:	ed91 6a01 	vldr	s12, [r1, #4]
 800ca54:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ca58:	f109 0910 	add.w	r9, r9, #16
 800ca5c:	ee74 6aa2 	vadd.f32	s13, s9, s5
 800ca60:	f104 0408 	add.w	r4, r4, #8
 800ca64:	ee73 3ae7 	vsub.f32	s7, s7, s15
 800ca68:	f10e 0e18 	add.w	lr, lr, #24
 800ca6c:	ee37 3a67 	vsub.f32	s6, s14, s15
 800ca70:	f1a3 0308 	sub.w	r3, r3, #8
 800ca74:	ed45 6a04 	vstr	s13, [r5, #-16]
 800ca78:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ca7c:	edd1 6a01 	vldr	s13, [r1, #4]
 800ca80:	ee75 1a86 	vadd.f32	s3, s11, s12
 800ca84:	edd0 4a01 	vldr	s9, [r0, #4]
 800ca88:	ee33 3a22 	vadd.f32	s6, s6, s5
 800ca8c:	ee75 6a26 	vadd.f32	s13, s10, s13
 800ca90:	ee35 5a46 	vsub.f32	s10, s10, s12
 800ca94:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800ca98:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800ca9c:	ee71 1ac2 	vsub.f32	s3, s3, s4
 800caa0:	ee35 5a42 	vsub.f32	s10, s10, s4
 800caa4:	ed45 6a03 	vstr	s13, [r5, #-12]
 800caa8:	ee36 2a02 	vadd.f32	s4, s12, s4
 800caac:	edd6 7a00 	vldr	s15, [r6]
 800cab0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800cab4:	ed97 1a00 	vldr	s2, [r7]
 800cab8:	ee77 2a62 	vsub.f32	s5, s14, s5
 800cabc:	ed92 8a04 	vldr	s16, [r2, #16]
 800cac0:	ee71 8a27 	vadd.f32	s17, s2, s15
 800cac4:	ed93 aa04 	vldr	s20, [r3, #16]
 800cac8:	ed16 7a01 	vldr	s14, [r6, #-4]
 800cacc:	ee71 7a67 	vsub.f32	s15, s2, s15
 800cad0:	ed57 0a01 	vldr	s1, [r7, #-4]
 800cad4:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800cad8:	ee38 6a88 	vadd.f32	s12, s17, s16
 800cadc:	edd3 9a03 	vldr	s19, [r3, #12]
 800cae0:	ee30 0a87 	vadd.f32	s0, s1, s14
 800cae4:	ed92 9a03 	vldr	s18, [r2, #12]
 800cae8:	ee78 5ac8 	vsub.f32	s11, s17, s16
 800caec:	ee36 6a0a 	vadd.f32	s12, s12, s20
 800caf0:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800caf4:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800caf8:	ee16 ca10 	vmov	ip, s12
 800cafc:	ee30 6a49 	vsub.f32	s12, s0, s18
 800cb00:	ee77 4a01 	vadd.f32	s9, s14, s2
 800cb04:	f847 c908 	str.w	ip, [r7], #-8
 800cb08:	ee34 4a29 	vadd.f32	s8, s8, s19
 800cb0c:	edd2 8a03 	vldr	s17, [r2, #12]
 800cb10:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800cb14:	ed93 8a03 	vldr	s16, [r3, #12]
 800cb18:	ee71 0a47 	vsub.f32	s1, s2, s14
 800cb1c:	ee30 0a28 	vadd.f32	s0, s0, s17
 800cb20:	ee39 1a67 	vsub.f32	s2, s18, s15
 800cb24:	ee36 6a69 	vsub.f32	s12, s12, s19
 800cb28:	ee30 0a08 	vadd.f32	s0, s0, s16
 800cb2c:	ee75 5aca 	vsub.f32	s11, s11, s20
 800cb30:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb34:	ed1a 0a04 	vldr	s0, [sl, #-16]
 800cb38:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800cb3c:	ee21 8a80 	vmul.f32	s16, s3, s0
 800cb40:	ee23 7a26 	vmul.f32	s14, s6, s13
 800cb44:	ee64 7a26 	vmul.f32	s15, s8, s13
 800cb48:	ee61 1aa6 	vmul.f32	s3, s3, s13
 800cb4c:	ee24 4a00 	vmul.f32	s8, s8, s0
 800cb50:	ee23 3a00 	vmul.f32	s6, s6, s0
 800cb54:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800cb58:	ee24 0a80 	vmul.f32	s0, s9, s0
 800cb5c:	ee38 7a07 	vadd.f32	s14, s16, s14
 800cb60:	ee76 6a84 	vadd.f32	s13, s13, s8
 800cb64:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cb68:	ee33 3a61 	vsub.f32	s6, s6, s3
 800cb6c:	ee17 ca10 	vmov	ip, s14
 800cb70:	f841 cb08 	str.w	ip, [r1], #8
 800cb74:	ed01 3a01 	vstr	s6, [r1, #-4]
 800cb78:	ed82 0a04 	vstr	s0, [r2, #16]
 800cb7c:	edc2 6a03 	vstr	s13, [r2, #12]
 800cb80:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800cb84:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800cb88:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 800cb8c:	ee23 4aa6 	vmul.f32	s8, s7, s13
 800cb90:	ee65 4a27 	vmul.f32	s9, s10, s15
 800cb94:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800cb98:	ee63 3aa7 	vmul.f32	s7, s7, s15
 800cb9c:	ee66 7a27 	vmul.f32	s15, s12, s15
 800cba0:	ee25 5a26 	vmul.f32	s10, s10, s13
 800cba4:	ee66 6a26 	vmul.f32	s13, s12, s13
 800cba8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbac:	ee34 6a24 	vadd.f32	s12, s8, s9
 800cbb0:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800cbb4:	ee35 5a63 	vsub.f32	s10, s10, s7
 800cbb8:	ee17 ca90 	vmov	ip, s15
 800cbbc:	ed04 6a04 	vstr	s12, [r4, #-16]
 800cbc0:	ed04 5a03 	vstr	s10, [r4, #-12]
 800cbc4:	f846 c908 	str.w	ip, [r6], #-8
 800cbc8:	edc6 6a01 	vstr	s13, [r6, #4]
 800cbcc:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 800cbd0:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800cbd4:	ee62 5a27 	vmul.f32	s11, s4, s15
 800cbd8:	ee22 6a87 	vmul.f32	s12, s5, s14
 800cbdc:	ee22 2a07 	vmul.f32	s4, s4, s14
 800cbe0:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800cbe4:	ee61 6a07 	vmul.f32	s13, s2, s14
 800cbe8:	ee20 7a87 	vmul.f32	s14, s1, s14
 800cbec:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800cbf0:	ee61 7a27 	vmul.f32	s15, s2, s15
 800cbf4:	ee35 6a86 	vadd.f32	s12, s11, s12
 800cbf8:	ee72 2ac2 	vsub.f32	s5, s5, s4
 800cbfc:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800cc00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc04:	ee16 ca10 	vmov	ip, s12
 800cc08:	f840 cb08 	str.w	ip, [r0], #8
 800cc0c:	ed40 2a01 	vstr	s5, [r0, #-4]
 800cc10:	edc3 0a04 	vstr	s1, [r3, #16]
 800cc14:	edc3 7a03 	vstr	s15, [r3, #12]
 800cc18:	f47f aefc 	bne.w	800ca14 <arm_cfft_radix8by4_f32+0x134>
 800cc1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc1e:	9802      	ldr	r0, [sp, #8]
 800cc20:	00cb      	lsls	r3, r1, #3
 800cc22:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800cc26:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800cc2a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800cc2e:	4498      	add	r8, r3
 800cc30:	449c      	add	ip, r3
 800cc32:	9102      	str	r1, [sp, #8]
 800cc34:	9901      	ldr	r1, [sp, #4]
 800cc36:	4419      	add	r1, r3
 800cc38:	9101      	str	r1, [sp, #4]
 800cc3a:	9907      	ldr	r1, [sp, #28]
 800cc3c:	4419      	add	r1, r3
 800cc3e:	9107      	str	r1, [sp, #28]
 800cc40:	9908      	ldr	r1, [sp, #32]
 800cc42:	4419      	add	r1, r3
 800cc44:	9b06      	ldr	r3, [sp, #24]
 800cc46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc4a:	9108      	str	r1, [sp, #32]
 800cc4c:	9306      	str	r3, [sp, #24]
 800cc4e:	9a01      	ldr	r2, [sp, #4]
 800cc50:	2304      	movs	r3, #4
 800cc52:	9e08      	ldr	r6, [sp, #32]
 800cc54:	edd2 7a00 	vldr	s15, [r2]
 800cc58:	ed96 7a00 	vldr	s14, [r6]
 800cc5c:	edd8 2a00 	vldr	s5, [r8]
 800cc60:	ee77 5a87 	vadd.f32	s11, s15, s14
 800cc64:	ed9c 3a00 	vldr	s6, [ip]
 800cc68:	ed92 6a01 	vldr	s12, [r2, #4]
 800cc6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800cc70:	edd6 6a01 	vldr	s13, [r6, #4]
 800cc74:	ee75 4aa2 	vadd.f32	s9, s11, s5
 800cc78:	ed9c 2a01 	vldr	s4, [ip, #4]
 800cc7c:	ee36 5a26 	vadd.f32	s10, s12, s13
 800cc80:	edd8 7a01 	vldr	s15, [r8, #4]
 800cc84:	ee76 6a66 	vsub.f32	s13, s12, s13
 800cc88:	9d02      	ldr	r5, [sp, #8]
 800cc8a:	ee34 6a83 	vadd.f32	s12, s9, s6
 800cc8e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800cc92:	ee37 4a27 	vadd.f32	s8, s14, s15
 800cc96:	9805      	ldr	r0, [sp, #20]
 800cc98:	ee76 4ae2 	vsub.f32	s9, s13, s5
 800cc9c:	4621      	mov	r1, r4
 800cc9e:	ed82 6a00 	vstr	s12, [r2]
 800cca2:	ee35 6ae2 	vsub.f32	s12, s11, s5
 800cca6:	edd8 3a01 	vldr	s7, [r8, #4]
 800ccaa:	ee75 5a67 	vsub.f32	s11, s10, s15
 800ccae:	eddc 1a01 	vldr	s3, [ip, #4]
 800ccb2:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ccb6:	ee75 3a23 	vadd.f32	s7, s10, s7
 800ccba:	ee74 4a83 	vadd.f32	s9, s9, s6
 800ccbe:	ee76 6aa2 	vadd.f32	s13, s13, s5
 800ccc2:	ee33 5aa1 	vadd.f32	s10, s7, s3
 800ccc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ccca:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ccce:	ed82 5a01 	vstr	s10, [r2, #4]
 800ccd2:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ccd6:	9a07      	ldr	r2, [sp, #28]
 800ccd8:	ee77 7a02 	vadd.f32	s15, s14, s4
 800ccdc:	ee36 7ac3 	vsub.f32	s14, s13, s6
 800cce0:	edd2 2a00 	vldr	s5, [r2]
 800cce4:	ed92 5a01 	vldr	s10, [r2, #4]
 800cce8:	ee64 3a22 	vmul.f32	s7, s8, s5
 800ccec:	ee24 4a05 	vmul.f32	s8, s8, s10
 800ccf0:	ee24 5a85 	vmul.f32	s10, s9, s10
 800ccf4:	ee64 4aa2 	vmul.f32	s9, s9, s5
 800ccf8:	ee33 5a85 	vadd.f32	s10, s7, s10
 800ccfc:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800cd00:	ed88 5a00 	vstr	s10, [r8]
 800cd04:	edc8 4a01 	vstr	s9, [r8, #4]
 800cd08:	edd5 4a01 	vldr	s9, [r5, #4]
 800cd0c:	edd5 6a00 	vldr	s13, [r5]
 800cd10:	9d06      	ldr	r5, [sp, #24]
 800cd12:	ee26 5a26 	vmul.f32	s10, s12, s13
 800cd16:	ee26 6a24 	vmul.f32	s12, s12, s9
 800cd1a:	ee65 6aa6 	vmul.f32	s13, s11, s13
 800cd1e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800cd22:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800cd26:	ee75 5a25 	vadd.f32	s11, s10, s11
 800cd2a:	ed86 6a01 	vstr	s12, [r6, #4]
 800cd2e:	edc6 5a00 	vstr	s11, [r6]
 800cd32:	edd5 5a01 	vldr	s11, [r5, #4]
 800cd36:	edd5 6a00 	vldr	s13, [r5]
 800cd3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800cd3c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800cd40:	ee67 6a26 	vmul.f32	s13, s14, s13
 800cd44:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cd48:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cd4c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cd50:	ee36 7a07 	vadd.f32	s14, s12, s14
 800cd54:	edcc 7a01 	vstr	s15, [ip, #4]
 800cd58:	ed8c 7a00 	vstr	s14, [ip]
 800cd5c:	6872      	ldr	r2, [r6, #4]
 800cd5e:	f000 f92d 	bl	800cfbc <arm_radix8_butterfly_f32>
 800cd62:	9803      	ldr	r0, [sp, #12]
 800cd64:	4621      	mov	r1, r4
 800cd66:	6872      	ldr	r2, [r6, #4]
 800cd68:	2304      	movs	r3, #4
 800cd6a:	f000 f927 	bl	800cfbc <arm_radix8_butterfly_f32>
 800cd6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800cd70:	4621      	mov	r1, r4
 800cd72:	6872      	ldr	r2, [r6, #4]
 800cd74:	2304      	movs	r3, #4
 800cd76:	f000 f921 	bl	800cfbc <arm_radix8_butterfly_f32>
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	6872      	ldr	r2, [r6, #4]
 800cd7e:	2304      	movs	r3, #4
 800cd80:	9804      	ldr	r0, [sp, #16]
 800cd82:	b00f      	add	sp, #60	; 0x3c
 800cd84:	ecbd 8b06 	vpop	{d8-d10}
 800cd88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd8c:	f000 b916 	b.w	800cfbc <arm_radix8_butterfly_f32>

0800cd90 <arm_cfft_f32>:
 800cd90:	2a01      	cmp	r2, #1
 800cd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd96:	4606      	mov	r6, r0
 800cd98:	4617      	mov	r7, r2
 800cd9a:	460c      	mov	r4, r1
 800cd9c:	4698      	mov	r8, r3
 800cd9e:	8805      	ldrh	r5, [r0, #0]
 800cda0:	d053      	beq.n	800ce4a <arm_cfft_f32+0xba>
 800cda2:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800cda6:	d04b      	beq.n	800ce40 <arm_cfft_f32+0xb0>
 800cda8:	d916      	bls.n	800cdd8 <arm_cfft_f32+0x48>
 800cdaa:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800cdae:	d01a      	beq.n	800cde6 <arm_cfft_f32+0x56>
 800cdb0:	d95a      	bls.n	800ce68 <arm_cfft_f32+0xd8>
 800cdb2:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800cdb6:	d043      	beq.n	800ce40 <arm_cfft_f32+0xb0>
 800cdb8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800cdbc:	d105      	bne.n	800cdca <arm_cfft_f32+0x3a>
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	6872      	ldr	r2, [r6, #4]
 800cdc2:	4629      	mov	r1, r5
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f000 f8f9 	bl	800cfbc <arm_radix8_butterfly_f32>
 800cdca:	f1b8 0f00 	cmp.w	r8, #0
 800cdce:	d111      	bne.n	800cdf4 <arm_cfft_f32+0x64>
 800cdd0:	2f01      	cmp	r7, #1
 800cdd2:	d016      	beq.n	800ce02 <arm_cfft_f32+0x72>
 800cdd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdd8:	2d20      	cmp	r5, #32
 800cdda:	d031      	beq.n	800ce40 <arm_cfft_f32+0xb0>
 800cddc:	d948      	bls.n	800ce70 <arm_cfft_f32+0xe0>
 800cdde:	2d40      	cmp	r5, #64	; 0x40
 800cde0:	d0ed      	beq.n	800cdbe <arm_cfft_f32+0x2e>
 800cde2:	2d80      	cmp	r5, #128	; 0x80
 800cde4:	d1f1      	bne.n	800cdca <arm_cfft_f32+0x3a>
 800cde6:	4621      	mov	r1, r4
 800cde8:	4630      	mov	r0, r6
 800cdea:	f7ff fca9 	bl	800c740 <arm_cfft_radix8by2_f32>
 800cdee:	f1b8 0f00 	cmp.w	r8, #0
 800cdf2:	d0ed      	beq.n	800cdd0 <arm_cfft_f32+0x40>
 800cdf4:	68b2      	ldr	r2, [r6, #8]
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	89b1      	ldrh	r1, [r6, #12]
 800cdfa:	f7f3 fa21 	bl	8000240 <arm_bitreversal_32>
 800cdfe:	2f01      	cmp	r7, #1
 800ce00:	d1e8      	bne.n	800cdd4 <arm_cfft_f32+0x44>
 800ce02:	ee07 5a90 	vmov	s15, r5
 800ce06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ce12:	2d00      	cmp	r5, #0
 800ce14:	d0de      	beq.n	800cdd4 <arm_cfft_f32+0x44>
 800ce16:	f104 0108 	add.w	r1, r4, #8
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	ed11 7a02 	vldr	s14, [r1, #-8]
 800ce20:	3301      	adds	r3, #1
 800ce22:	ed51 7a01 	vldr	s15, [r1, #-4]
 800ce26:	3108      	adds	r1, #8
 800ce28:	429d      	cmp	r5, r3
 800ce2a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ce2e:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ce32:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ce36:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ce3a:	d1ef      	bne.n	800ce1c <arm_cfft_f32+0x8c>
 800ce3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce40:	4621      	mov	r1, r4
 800ce42:	4630      	mov	r0, r6
 800ce44:	f7ff fd4c 	bl	800c8e0 <arm_cfft_radix8by4_f32>
 800ce48:	e7bf      	b.n	800cdca <arm_cfft_f32+0x3a>
 800ce4a:	b1a5      	cbz	r5, 800ce76 <arm_cfft_f32+0xe6>
 800ce4c:	f101 030c 	add.w	r3, r1, #12
 800ce50:	2200      	movs	r2, #0
 800ce52:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ce56:	3201      	adds	r2, #1
 800ce58:	3308      	adds	r3, #8
 800ce5a:	eef1 7a67 	vneg.f32	s15, s15
 800ce5e:	4295      	cmp	r5, r2
 800ce60:	ed43 7a04 	vstr	s15, [r3, #-16]
 800ce64:	d1f5      	bne.n	800ce52 <arm_cfft_f32+0xc2>
 800ce66:	e79c      	b.n	800cda2 <arm_cfft_f32+0x12>
 800ce68:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800ce6c:	d0a7      	beq.n	800cdbe <arm_cfft_f32+0x2e>
 800ce6e:	e7ac      	b.n	800cdca <arm_cfft_f32+0x3a>
 800ce70:	2d10      	cmp	r5, #16
 800ce72:	d0b8      	beq.n	800cde6 <arm_cfft_f32+0x56>
 800ce74:	e7a9      	b.n	800cdca <arm_cfft_f32+0x3a>
 800ce76:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ce7a:	d896      	bhi.n	800cdaa <arm_cfft_f32+0x1a>
 800ce7c:	e7ac      	b.n	800cdd8 <arm_cfft_f32+0x48>
 800ce7e:	bf00      	nop

0800ce80 <arm_cmplx_mag_squared_f32>:
 800ce80:	b470      	push	{r4, r5, r6}
 800ce82:	0896      	lsrs	r6, r2, #2
 800ce84:	d03e      	beq.n	800cf04 <arm_cmplx_mag_squared_f32+0x84>
 800ce86:	f100 0320 	add.w	r3, r0, #32
 800ce8a:	f101 0410 	add.w	r4, r1, #16
 800ce8e:	4635      	mov	r5, r6
 800ce90:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 800ce94:	3d01      	subs	r5, #1
 800ce96:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 800ce9a:	f104 0410 	add.w	r4, r4, #16
 800ce9e:	ed53 5a07 	vldr	s11, [r3, #-28]	; 0xffffffe4
 800cea2:	ee27 5a07 	vmul.f32	s10, s14, s14
 800cea6:	ed53 6a05 	vldr	s13, [r3, #-20]	; 0xffffffec
 800ceaa:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ceae:	ed13 7a04 	vldr	s14, [r3, #-16]
 800ceb2:	ee65 5aa5 	vmul.f32	s11, s11, s11
 800ceb6:	ed13 4a03 	vldr	s8, [r3, #-12]
 800ceba:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800cebe:	ed53 7a02 	vldr	s15, [r3, #-8]
 800cec2:	ee27 7a07 	vmul.f32	s14, s14, s14
 800cec6:	ed53 4a01 	vldr	s9, [r3, #-4]
 800ceca:	ee24 4a04 	vmul.f32	s8, s8, s8
 800cece:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ced2:	f103 0320 	add.w	r3, r3, #32
 800ced6:	ee64 4aa4 	vmul.f32	s9, s9, s9
 800ceda:	ee75 5a25 	vadd.f32	s11, s10, s11
 800cede:	ee76 6a26 	vadd.f32	s13, s12, s13
 800cee2:	ee37 7a04 	vadd.f32	s14, s14, s8
 800cee6:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800ceea:	ed44 5a08 	vstr	s11, [r4, #-32]	; 0xffffffe0
 800ceee:	ed44 6a07 	vstr	s13, [r4, #-28]	; 0xffffffe4
 800cef2:	ed04 7a06 	vstr	s14, [r4, #-24]	; 0xffffffe8
 800cef6:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800cefa:	d1c9      	bne.n	800ce90 <arm_cmplx_mag_squared_f32+0x10>
 800cefc:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 800cf00:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800cf04:	f012 0203 	ands.w	r2, r2, #3
 800cf08:	d010      	beq.n	800cf2c <arm_cmplx_mag_squared_f32+0xac>
 800cf0a:	3008      	adds	r0, #8
 800cf0c:	ed50 7a02 	vldr	s15, [r0, #-8]
 800cf10:	3a01      	subs	r2, #1
 800cf12:	ed10 7a01 	vldr	s14, [r0, #-4]
 800cf16:	f100 0008 	add.w	r0, r0, #8
 800cf1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf1e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800cf22:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf26:	ece1 7a01 	vstmia	r1!, {s15}
 800cf2a:	d1ef      	bne.n	800cf0c <arm_cmplx_mag_squared_f32+0x8c>
 800cf2c:	bc70      	pop	{r4, r5, r6}
 800cf2e:	4770      	bx	lr

0800cf30 <arm_mult_f32>:
 800cf30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf32:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800cf36:	d033      	beq.n	800cfa0 <arm_mult_f32+0x70>
 800cf38:	f100 0610 	add.w	r6, r0, #16
 800cf3c:	f101 0510 	add.w	r5, r1, #16
 800cf40:	f102 0410 	add.w	r4, r2, #16
 800cf44:	4677      	mov	r7, lr
 800cf46:	ed16 7a04 	vldr	s14, [r6, #-16]
 800cf4a:	3f01      	subs	r7, #1
 800cf4c:	ed15 6a04 	vldr	s12, [r5, #-16]
 800cf50:	f106 0610 	add.w	r6, r6, #16
 800cf54:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800cf58:	f105 0510 	add.w	r5, r5, #16
 800cf5c:	ee27 6a06 	vmul.f32	s12, s14, s12
 800cf60:	ed55 6a06 	vldr	s13, [r5, #-24]	; 0xffffffe8
 800cf64:	ed16 7a07 	vldr	s14, [r6, #-28]	; 0xffffffe4
 800cf68:	f104 0410 	add.w	r4, r4, #16
 800cf6c:	ed55 5a07 	vldr	s11, [r5, #-28]	; 0xffffffe4
 800cf70:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800cf74:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800cf78:	ed04 6a08 	vstr	s12, [r4, #-32]	; 0xffffffe0
 800cf7c:	ee27 7a25 	vmul.f32	s14, s14, s11
 800cf80:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800cf84:	ed44 6a06 	vstr	s13, [r4, #-24]	; 0xffffffe8
 800cf88:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cf8c:	ed04 7a07 	vstr	s14, [r4, #-28]	; 0xffffffe4
 800cf90:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800cf94:	d1d7      	bne.n	800cf46 <arm_mult_f32+0x16>
 800cf96:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800cf9a:	4420      	add	r0, r4
 800cf9c:	4421      	add	r1, r4
 800cf9e:	4422      	add	r2, r4
 800cfa0:	f013 0303 	ands.w	r3, r3, #3
 800cfa4:	d009      	beq.n	800cfba <arm_mult_f32+0x8a>
 800cfa6:	ecf0 7a01 	vldmia	r0!, {s15}
 800cfaa:	3b01      	subs	r3, #1
 800cfac:	ecb1 7a01 	vldmia	r1!, {s14}
 800cfb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfb4:	ece2 7a01 	vstmia	r2!, {s15}
 800cfb8:	d1f5      	bne.n	800cfa6 <arm_mult_f32+0x76>
 800cfba:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cfbc <arm_radix8_butterfly_f32>:
 800cfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc0:	469e      	mov	lr, r3
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	468a      	mov	sl, r1
 800cfc6:	468b      	mov	fp, r1
 800cfc8:	3304      	adds	r3, #4
 800cfca:	ed2d 8b10 	vpush	{d8-d15}
 800cfce:	469c      	mov	ip, r3
 800cfd0:	b09d      	sub	sp, #116	; 0x74
 800cfd2:	ed9f 9ac3 	vldr	s18, [pc, #780]	; 800d2e0 <arm_radix8_butterfly_f32+0x324>
 800cfd6:	9019      	str	r0, [sp, #100]	; 0x64
 800cfd8:	921a      	str	r2, [sp, #104]	; 0x68
 800cfda:	931b      	str	r3, [sp, #108]	; 0x6c
 800cfdc:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800cfe0:	f04f 0800 	mov.w	r8, #0
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	9311      	str	r3, [sp, #68]	; 0x44
 800cfe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cfec:	4611      	mov	r1, r2
 800cfee:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	0053      	lsls	r3, r2, #1
 800cff6:	18d5      	adds	r5, r2, r3
 800cff8:	9301      	str	r3, [sp, #4]
 800cffa:	0113      	lsls	r3, r2, #4
 800cffc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cffe:	194c      	adds	r4, r1, r5
 800d000:	eb02 0609 	add.w	r6, r2, r9
 800d004:	9302      	str	r3, [sp, #8]
 800d006:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d00a:	4613      	mov	r3, r2
 800d00c:	190a      	adds	r2, r1, r4
 800d00e:	eb06 0709 	add.w	r7, r6, r9
 800d012:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d016:	1888      	adds	r0, r1, r2
 800d018:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d01c:	4401      	add	r1, r0
 800d01e:	3204      	adds	r2, #4
 800d020:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800d024:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d028:	9b00      	ldr	r3, [sp, #0]
 800d02a:	3104      	adds	r1, #4
 800d02c:	ed5c 7a01 	vldr	s15, [ip, #-4]
 800d030:	44d8      	add	r8, fp
 800d032:	ed90 7a00 	vldr	s14, [r0]
 800d036:	ed94 5a00 	vldr	s10, [r4]
 800d03a:	45c2      	cmp	sl, r8
 800d03c:	edd7 3a00 	vldr	s7, [r7]
 800d040:	ed96 6a00 	vldr	s12, [r6]
 800d044:	ee37 1a85 	vadd.f32	s2, s15, s10
 800d048:	ed52 6a01 	vldr	s13, [r2, #-4]
 800d04c:	ee73 4a87 	vadd.f32	s9, s7, s14
 800d050:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800d054:	edd5 7a00 	vldr	s15, [r5]
 800d058:	ee73 3ac7 	vsub.f32	s7, s7, s14
 800d05c:	ed11 7a01 	vldr	s14, [r1, #-4]
 800d060:	ee36 2a26 	vadd.f32	s4, s12, s13
 800d064:	ee37 4a87 	vadd.f32	s8, s15, s14
 800d068:	ee76 6a66 	vsub.f32	s13, s12, s13
 800d06c:	ee71 5a24 	vadd.f32	s11, s2, s9
 800d070:	ee32 6a04 	vadd.f32	s12, s4, s8
 800d074:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d078:	ee31 1a64 	vsub.f32	s2, s2, s9
 800d07c:	ee75 4a86 	vadd.f32	s9, s11, s12
 800d080:	ee76 7ac7 	vsub.f32	s15, s13, s14
 800d084:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800d088:	ed4c 4a01 	vstr	s9, [ip, #-4]
 800d08c:	ee32 2a44 	vsub.f32	s4, s4, s8
 800d090:	ee67 7a89 	vmul.f32	s15, s15, s18
 800d094:	ed94 0a01 	vldr	s0, [r4, #4]
 800d098:	edc4 5a00 	vstr	s11, [r4]
 800d09c:	ee36 7a87 	vadd.f32	s14, s13, s14
 800d0a0:	edd6 5a01 	vldr	s11, [r6, #4]
 800d0a4:	edd5 2a01 	vldr	s5, [r5, #4]
 800d0a8:	ee75 1a27 	vadd.f32	s3, s10, s15
 800d0ac:	ed92 4a00 	vldr	s8, [r2]
 800d0b0:	ee75 7a67 	vsub.f32	s15, s10, s15
 800d0b4:	edd1 4a00 	vldr	s9, [r1]
 800d0b8:	ee27 7a09 	vmul.f32	s14, s14, s18
 800d0bc:	ee35 3ac4 	vsub.f32	s6, s11, s8
 800d0c0:	ed9c 6a00 	vldr	s12, [ip]
 800d0c4:	ee72 6ae4 	vsub.f32	s13, s5, s9
 800d0c8:	edd0 0a01 	vldr	s1, [r0, #4]
 800d0cc:	ed97 5a01 	vldr	s10, [r7, #4]
 800d0d0:	ee35 4a84 	vadd.f32	s8, s11, s8
 800d0d4:	ee72 4aa4 	vadd.f32	s9, s5, s9
 800d0d8:	ee73 5a26 	vadd.f32	s11, s6, s13
 800d0dc:	ee76 2a00 	vadd.f32	s5, s12, s0
 800d0e0:	ee73 6a66 	vsub.f32	s13, s6, s13
 800d0e4:	ee36 6a40 	vsub.f32	s12, s12, s0
 800d0e8:	ee35 0a20 	vadd.f32	s0, s10, s1
 800d0ec:	ee65 5a89 	vmul.f32	s11, s11, s18
 800d0f0:	ee35 5a60 	vsub.f32	s10, s10, s1
 800d0f4:	ee32 3a80 	vadd.f32	s6, s5, s0
 800d0f8:	ee74 0a24 	vadd.f32	s1, s8, s9
 800d0fc:	ee66 6a89 	vmul.f32	s13, s13, s18
 800d100:	ee74 4a64 	vsub.f32	s9, s8, s9
 800d104:	ee32 4ac0 	vsub.f32	s8, s5, s0
 800d108:	ee75 2a25 	vadd.f32	s5, s10, s11
 800d10c:	ee33 0a20 	vadd.f32	s0, s6, s1
 800d110:	ee75 5a65 	vsub.f32	s11, s10, s11
 800d114:	ee33 3a60 	vsub.f32	s6, s6, s1
 800d118:	ee36 5a26 	vadd.f32	s10, s12, s13
 800d11c:	ed8c 0a00 	vstr	s0, [ip]
 800d120:	ee76 6a66 	vsub.f32	s13, s12, s13
 800d124:	449c      	add	ip, r3
 800d126:	ee33 6a87 	vadd.f32	s12, s7, s14
 800d12a:	ed84 3a01 	vstr	s6, [r4, #4]
 800d12e:	ee33 7ac7 	vsub.f32	s14, s7, s14
 800d132:	441c      	add	r4, r3
 800d134:	ee71 3a24 	vadd.f32	s7, s2, s9
 800d138:	ee71 4a64 	vsub.f32	s9, s2, s9
 800d13c:	ee31 3aa2 	vadd.f32	s6, s3, s5
 800d140:	edc7 3a00 	vstr	s7, [r7]
 800d144:	ee34 1a42 	vsub.f32	s2, s8, s4
 800d148:	edc0 4a00 	vstr	s9, [r0]
 800d14c:	ee77 3aa5 	vadd.f32	s7, s15, s11
 800d150:	ee75 4a46 	vsub.f32	s9, s10, s12
 800d154:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800d158:	ed87 1a01 	vstr	s2, [r7, #4]
 800d15c:	ee76 5ac7 	vsub.f32	s11, s13, s14
 800d160:	441f      	add	r7, r3
 800d162:	ee32 4a04 	vadd.f32	s8, s4, s8
 800d166:	ee71 1ae2 	vsub.f32	s3, s3, s5
 800d16a:	ee36 6a05 	vadd.f32	s12, s12, s10
 800d16e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800d172:	ed80 4a01 	vstr	s8, [r0, #4]
 800d176:	ed86 3a00 	vstr	s6, [r6]
 800d17a:	4418      	add	r0, r3
 800d17c:	ed41 1a01 	vstr	s3, [r1, #-4]
 800d180:	ed42 3a01 	vstr	s7, [r2, #-4]
 800d184:	edc5 7a00 	vstr	s15, [r5]
 800d188:	edc6 4a01 	vstr	s9, [r6, #4]
 800d18c:	441e      	add	r6, r3
 800d18e:	ed81 6a00 	vstr	s12, [r1]
 800d192:	4419      	add	r1, r3
 800d194:	edc2 5a00 	vstr	s11, [r2]
 800d198:	441a      	add	r2, r3
 800d19a:	ed85 7a01 	vstr	s14, [r5, #4]
 800d19e:	441d      	add	r5, r3
 800d1a0:	f63f af44 	bhi.w	800d02c <arm_radix8_butterfly_f32+0x70>
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d1a8:	2b07      	cmp	r3, #7
 800d1aa:	f240 81f4 	bls.w	800d596 <arm_radix8_butterfly_f32+0x5da>
 800d1ae:	9901      	ldr	r1, [sp, #4]
 800d1b0:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 800d1b4:	9d02      	ldr	r5, [sp, #8]
 800d1b6:	ea4f 02ce 	mov.w	r2, lr, lsl #3
 800d1ba:	3101      	adds	r1, #1
 800d1bc:	eb04 000e 	add.w	r0, r4, lr
 800d1c0:	00e4      	lsls	r4, r4, #3
 800d1c2:	3508      	adds	r5, #8
 800d1c4:	4419      	add	r1, r3
 800d1c6:	eb00 0c0e 	add.w	ip, r0, lr
 800d1ca:	9413      	str	r4, [sp, #76]	; 0x4c
 800d1cc:	00c0      	lsls	r0, r0, #3
 800d1ce:	185e      	adds	r6, r3, r1
 800d1d0:	4617      	mov	r7, r2
 800d1d2:	9218      	str	r2, [sp, #96]	; 0x60
 800d1d4:	f109 0908 	add.w	r9, r9, #8
 800d1d8:	199c      	adds	r4, r3, r6
 800d1da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d1dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d1de:	9012      	str	r0, [sp, #72]	; 0x48
 800d1e0:	195d      	adds	r5, r3, r5
 800d1e2:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d1e4:	443a      	add	r2, r7
 800d1e6:	950c      	str	r5, [sp, #48]	; 0x30
 800d1e8:	4698      	mov	r8, r3
 800d1ea:	4420      	add	r0, r4
 800d1ec:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800d1ee:	19d7      	adds	r7, r2, r7
 800d1f0:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d1f4:	4405      	add	r5, r0
 800d1f6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800d1fa:	9710      	str	r7, [sp, #64]	; 0x40
 800d1fc:	eb0c 070e 	add.w	r7, ip, lr
 800d200:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800d204:	3404      	adds	r4, #4
 800d206:	3004      	adds	r0, #4
 800d208:	44c8      	add	r8, r9
 800d20a:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800d20e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d210:	940a      	str	r4, [sp, #40]	; 0x28
 800d212:	9009      	str	r0, [sp, #36]	; 0x24
 800d214:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d218:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 800d21a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d21e:	9815      	ldr	r0, [sp, #84]	; 0x54
 800d220:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800d224:	eb07 080e 	add.w	r8, r7, lr
 800d228:	eb04 0900 	add.w	r9, r4, r0
 800d22c:	00f8      	lsls	r0, r7, #3
 800d22e:	ea4f 0cc8 	mov.w	ip, r8, lsl #3
 800d232:	3504      	adds	r5, #4
 800d234:	4607      	mov	r7, r0
 800d236:	9017      	str	r0, [sp, #92]	; 0x5c
 800d238:	910b      	str	r1, [sp, #44]	; 0x2c
 800d23a:	4618      	mov	r0, r3
 800d23c:	eb03 01c6 	add.w	r1, r3, r6, lsl #3
 800d240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d242:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800d246:	18e3      	adds	r3, r4, r3
 800d248:	9508      	str	r5, [sp, #32]
 800d24a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800d24c:	910e      	str	r1, [sp, #56]	; 0x38
 800d24e:	4621      	mov	r1, r4
 800d250:	eb04 0805 	add.w	r8, r4, r5
 800d254:	9304      	str	r3, [sp, #16]
 800d256:	19e5      	adds	r5, r4, r7
 800d258:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800d25c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800d25e:	9316      	str	r3, [sp, #88]	; 0x58
 800d260:	190b      	adds	r3, r1, r4
 800d262:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800d264:	9505      	str	r5, [sp, #20]
 800d266:	9303      	str	r3, [sp, #12]
 800d268:	f100 0308 	add.w	r3, r0, #8
 800d26c:	9707      	str	r7, [sp, #28]
 800d26e:	4638      	mov	r0, r7
 800d270:	930f      	str	r3, [sp, #60]	; 0x3c
 800d272:	2301      	movs	r3, #1
 800d274:	9306      	str	r3, [sp, #24]
 800d276:	9b00      	ldr	r3, [sp, #0]
 800d278:	ed90 fa00 	vldr	s30, [r0]
 800d27c:	edd0 ba01 	vldr	s23, [r0, #4]
 800d280:	9803      	ldr	r0, [sp, #12]
 800d282:	9903      	ldr	r1, [sp, #12]
 800d284:	ed90 ba01 	vldr	s22, [r0, #4]
 800d288:	9804      	ldr	r0, [sp, #16]
 800d28a:	edd1 ea00 	vldr	s29, [r1]
 800d28e:	edd0 aa01 	vldr	s21, [r0, #4]
 800d292:	9805      	ldr	r0, [sp, #20]
 800d294:	9905      	ldr	r1, [sp, #20]
 800d296:	edd0 7a01 	vldr	s15, [r0, #4]
 800d29a:	ed91 da00 	vldr	s26, [r1]
 800d29e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d2a0:	9c04      	ldr	r4, [sp, #16]
 800d2a2:	edcd 7a01 	vstr	s15, [sp, #4]
 800d2a6:	edd8 7a01 	vldr	s15, [r8, #4]
 800d2aa:	9100      	str	r1, [sp, #0]
 800d2ac:	edd2 fa00 	vldr	s31, [r2]
 800d2b0:	ed94 ea00 	vldr	s28, [r4]
 800d2b4:	ed92 ca01 	vldr	s24, [r2, #4]
 800d2b8:	f8dd e020 	ldr.w	lr, [sp, #32]
 800d2bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d2be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d2c0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800d2c2:	edd9 da00 	vldr	s27, [r9]
 800d2c6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d2c8:	edd8 ca00 	vldr	s25, [r8]
 800d2cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d2ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d2d0:	f8dd c018 	ldr.w	ip, [sp, #24]
 800d2d4:	ed99 aa01 	vldr	s20, [r9, #4]
 800d2d8:	edcd 7a02 	vstr	s15, [sp, #8]
 800d2dc:	9800      	ldr	r0, [sp, #0]
 800d2de:	e001      	b.n	800d2e4 <arm_radix8_butterfly_f32+0x328>
 800d2e0:	3f3504f3 	.word	0x3f3504f3
 800d2e4:	edd5 3a00 	vldr	s7, [r5]
 800d2e8:	44dc      	add	ip, fp
 800d2ea:	ed91 7a00 	vldr	s14, [r1]
 800d2ee:	edd4 8a00 	vldr	s17, [r4]
 800d2f2:	45e2      	cmp	sl, ip
 800d2f4:	ed57 7a01 	vldr	s15, [r7, #-4]
 800d2f8:	ed90 5a00 	vldr	s10, [r0]
 800d2fc:	ed56 5a01 	vldr	s11, [r6, #-4]
 800d300:	ee38 6aa7 	vadd.f32	s12, s17, s15
 800d304:	ed92 1a00 	vldr	s2, [r2]
 800d308:	ee78 4ae7 	vsub.f32	s9, s17, s15
 800d30c:	ed1e 4a01 	vldr	s8, [lr, #-4]
 800d310:	ee75 9a25 	vadd.f32	s19, s10, s11
 800d314:	ee31 3a07 	vadd.f32	s6, s2, s14
 800d318:	ed92 8a01 	vldr	s16, [r2, #4]
 800d31c:	ee73 6a84 	vadd.f32	s13, s7, s8
 800d320:	ee75 5a65 	vsub.f32	s11, s10, s11
 800d324:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800d328:	ee73 1a06 	vadd.f32	s3, s6, s12
 800d32c:	ee39 5aa6 	vadd.f32	s10, s19, s13
 800d330:	ee75 7a84 	vadd.f32	s15, s11, s8
 800d334:	ee31 1a47 	vsub.f32	s2, s2, s14
 800d338:	ee31 7a85 	vadd.f32	s14, s3, s10
 800d33c:	ee67 7a89 	vmul.f32	s15, s15, s18
 800d340:	ee33 3a46 	vsub.f32	s6, s6, s12
 800d344:	ed82 7a00 	vstr	s14, [r2]
 800d348:	ee79 9ae6 	vsub.f32	s19, s19, s13
 800d34c:	ed96 6a00 	vldr	s12, [r6]
 800d350:	ee34 2aa7 	vadd.f32	s4, s9, s15
 800d354:	edd5 3a01 	vldr	s7, [r5, #4]
 800d358:	ee74 8ae7 	vsub.f32	s17, s9, s15
 800d35c:	ed90 7a01 	vldr	s14, [r0, #4]
 800d360:	ee35 4ac4 	vsub.f32	s8, s11, s8
 800d364:	edde 4a00 	vldr	s9, [lr]
 800d368:	ee31 5ac5 	vsub.f32	s10, s3, s10
 800d36c:	ee77 2a46 	vsub.f32	s5, s14, s12
 800d370:	edd1 6a01 	vldr	s13, [r1, #4]
 800d374:	ee73 7ae4 	vsub.f32	s15, s7, s9
 800d378:	edd7 0a00 	vldr	s1, [r7]
 800d37c:	ee77 5a06 	vadd.f32	s11, s14, s12
 800d380:	ed94 7a01 	vldr	s14, [r4, #4]
 800d384:	ee33 6aa4 	vadd.f32	s12, s7, s9
 800d388:	ee32 0ae7 	vsub.f32	s0, s5, s15
 800d38c:	ee78 4a66 	vsub.f32	s9, s16, s13
 800d390:	ee78 3a26 	vadd.f32	s7, s16, s13
 800d394:	ee72 2aa7 	vadd.f32	s5, s5, s15
 800d398:	ee77 6a20 	vadd.f32	s13, s14, s1
 800d39c:	ee24 4a09 	vmul.f32	s8, s8, s18
 800d3a0:	ee37 7a60 	vsub.f32	s14, s14, s1
 800d3a4:	ee20 8a09 	vmul.f32	s16, s0, s18
 800d3a8:	ee75 0a86 	vadd.f32	s1, s11, s12
 800d3ac:	ee33 0aa6 	vadd.f32	s0, s7, s13
 800d3b0:	ee62 2a89 	vmul.f32	s5, s5, s18
 800d3b4:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800d3b8:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800d3bc:	ee77 7a62 	vsub.f32	s15, s14, s5
 800d3c0:	ee74 5a88 	vadd.f32	s11, s9, s16
 800d3c4:	ee34 8ac8 	vsub.f32	s16, s9, s16
 800d3c8:	ee77 4a22 	vadd.f32	s9, s14, s5
 800d3cc:	ee71 2a04 	vadd.f32	s5, s2, s8
 800d3d0:	ee31 7a44 	vsub.f32	s14, s2, s8
 800d3d4:	ee30 1a60 	vsub.f32	s2, s0, s1
 800d3d8:	ee73 1a06 	vadd.f32	s3, s6, s12
 800d3dc:	ee33 6a46 	vsub.f32	s12, s6, s12
 800d3e0:	ee33 3ae9 	vsub.f32	s6, s7, s19
 800d3e4:	ee79 6aa3 	vadd.f32	s13, s19, s7
 800d3e8:	ee38 4a68 	vsub.f32	s8, s16, s17
 800d3ec:	ee75 3ac2 	vsub.f32	s7, s11, s4
 800d3f0:	ee72 5a25 	vadd.f32	s11, s4, s11
 800d3f4:	ee32 2aa4 	vadd.f32	s4, s5, s9
 800d3f8:	ee72 4ae4 	vsub.f32	s9, s5, s9
 800d3fc:	ee77 2a27 	vadd.f32	s5, s14, s15
 800d400:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d404:	ee78 7a88 	vadd.f32	s15, s17, s16
 800d408:	ee6e 8a05 	vmul.f32	s17, s28, s10
 800d40c:	ee2a 8a81 	vmul.f32	s16, s21, s2
 800d410:	ee2a 5a85 	vmul.f32	s10, s21, s10
 800d414:	ee2e 1a01 	vmul.f32	s2, s28, s2
 800d418:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800d41c:	ee70 0a20 	vadd.f32	s1, s0, s1
 800d420:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800d424:	ee2b 0a83 	vmul.f32	s0, s23, s6
 800d428:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800d42c:	edc2 0a01 	vstr	s1, [r2, #4]
 800d430:	ee38 8a88 	vadd.f32	s16, s17, s16
 800d434:	441a      	add	r2, r3
 800d436:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800d43a:	ee31 5a45 	vsub.f32	s10, s2, s10
 800d43e:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 800d442:	ed81 8a00 	vstr	s16, [r1]
 800d446:	ee39 0a80 	vadd.f32	s0, s19, s0
 800d44a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800d44e:	ed81 5a01 	vstr	s10, [r1, #4]
 800d452:	ee6f 0a82 	vmul.f32	s1, s31, s4
 800d456:	edcd 3a00 	vstr	s7, [sp]
 800d45a:	ed9d 5a02 	vldr	s10, [sp, #8]
 800d45e:	ee2d 8a06 	vmul.f32	s16, s26, s12
 800d462:	eddd 3a01 	vldr	s7, [sp, #4]
 800d466:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 800d46a:	ed84 0a00 	vstr	s0, [r4]
 800d46e:	ee65 4a24 	vmul.f32	s9, s10, s9
 800d472:	ed84 3a01 	vstr	s6, [r4, #4]
 800d476:	ee23 1aa6 	vmul.f32	s2, s7, s13
 800d47a:	ee23 6a86 	vmul.f32	s12, s7, s12
 800d47e:	eddd 3a00 	vldr	s7, [sp]
 800d482:	ee25 5a25 	vmul.f32	s10, s10, s11
 800d486:	4419      	add	r1, r3
 800d488:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 800d48c:	441c      	add	r4, r3
 800d48e:	ee6a 1a04 	vmul.f32	s3, s20, s8
 800d492:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800d496:	ee2e 3a87 	vmul.f32	s6, s29, s14
 800d49a:	ee6b 8a27 	vmul.f32	s17, s22, s15
 800d49e:	ee2c 2a02 	vmul.f32	s4, s24, s4
 800d4a2:	ee6d 6a26 	vmul.f32	s13, s26, s13
 800d4a6:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 800d4aa:	ee6a 2a22 	vmul.f32	s5, s20, s5
 800d4ae:	ee2d 4a84 	vmul.f32	s8, s27, s8
 800d4b2:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800d4b6:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800d4ba:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800d4be:	ee38 8a01 	vadd.f32	s16, s16, s2
 800d4c2:	ee36 6ac6 	vsub.f32	s12, s13, s12
 800d4c6:	ee39 5a85 	vadd.f32	s10, s19, s10
 800d4ca:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800d4ce:	ed07 8a01 	vstr	s16, [r7, #-4]
 800d4d2:	ee30 0a21 	vadd.f32	s0, s0, s3
 800d4d6:	ed87 6a00 	vstr	s12, [r7]
 800d4da:	ee74 2a62 	vsub.f32	s5, s8, s5
 800d4de:	edc0 0a00 	vstr	s1, [r0]
 800d4e2:	ee33 3a28 	vadd.f32	s6, s6, s17
 800d4e6:	edc0 3a01 	vstr	s7, [r0, #4]
 800d4ea:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d4ee:	ed0e 5a01 	vstr	s10, [lr, #-4]
 800d4f2:	edce 4a00 	vstr	s9, [lr]
 800d4f6:	4418      	add	r0, r3
 800d4f8:	ed06 0a01 	vstr	s0, [r6, #-4]
 800d4fc:	441f      	add	r7, r3
 800d4fe:	edc6 2a00 	vstr	s5, [r6]
 800d502:	449e      	add	lr, r3
 800d504:	ed85 3a00 	vstr	s6, [r5]
 800d508:	441e      	add	r6, r3
 800d50a:	ed85 7a01 	vstr	s14, [r5, #4]
 800d50e:	441d      	add	r5, r3
 800d510:	f63f aee8 	bhi.w	800d2e4 <arm_radix8_butterfly_f32+0x328>
 800d514:	9a06      	ldr	r2, [sp, #24]
 800d516:	9816      	ldr	r0, [sp, #88]	; 0x58
 800d518:	3201      	adds	r2, #1
 800d51a:	4611      	mov	r1, r2
 800d51c:	9206      	str	r2, [sp, #24]
 800d51e:	9a07      	ldr	r2, [sp, #28]
 800d520:	4402      	add	r2, r0
 800d522:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800d524:	9207      	str	r2, [sp, #28]
 800d526:	9a03      	ldr	r2, [sp, #12]
 800d528:	4402      	add	r2, r0
 800d52a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d52c:	9203      	str	r2, [sp, #12]
 800d52e:	9a04      	ldr	r2, [sp, #16]
 800d530:	4402      	add	r2, r0
 800d532:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d534:	9204      	str	r2, [sp, #16]
 800d536:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d538:	4491      	add	r9, r2
 800d53a:	9a05      	ldr	r2, [sp, #20]
 800d53c:	4402      	add	r2, r0
 800d53e:	9205      	str	r2, [sp, #20]
 800d540:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d542:	4490      	add	r8, r2
 800d544:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d546:	3208      	adds	r2, #8
 800d548:	920f      	str	r2, [sp, #60]	; 0x3c
 800d54a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d54c:	3208      	adds	r2, #8
 800d54e:	920e      	str	r2, [sp, #56]	; 0x38
 800d550:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d552:	3208      	adds	r2, #8
 800d554:	920d      	str	r2, [sp, #52]	; 0x34
 800d556:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d558:	3208      	adds	r2, #8
 800d55a:	920c      	str	r2, [sp, #48]	; 0x30
 800d55c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d55e:	3208      	adds	r2, #8
 800d560:	920b      	str	r2, [sp, #44]	; 0x2c
 800d562:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d564:	3208      	adds	r2, #8
 800d566:	920a      	str	r2, [sp, #40]	; 0x28
 800d568:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d56a:	3208      	adds	r2, #8
 800d56c:	9209      	str	r2, [sp, #36]	; 0x24
 800d56e:	9a08      	ldr	r2, [sp, #32]
 800d570:	3208      	adds	r2, #8
 800d572:	9208      	str	r2, [sp, #32]
 800d574:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800d576:	9811      	ldr	r0, [sp, #68]	; 0x44
 800d578:	4622      	mov	r2, r4
 800d57a:	4288      	cmp	r0, r1
 800d57c:	d005      	beq.n	800d58a <arm_radix8_butterfly_f32+0x5ce>
 800d57e:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d580:	4621      	mov	r1, r4
 800d582:	4401      	add	r1, r0
 800d584:	9807      	ldr	r0, [sp, #28]
 800d586:	9110      	str	r1, [sp, #64]	; 0x40
 800d588:	e676      	b.n	800d278 <arm_radix8_butterfly_f32+0x2bc>
 800d58a:	4683      	mov	fp, r0
 800d58c:	f8bd e060 	ldrh.w	lr, [sp, #96]	; 0x60
 800d590:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 800d594:	e522      	b.n	800cfdc <arm_radix8_butterfly_f32+0x20>
 800d596:	b01d      	add	sp, #116	; 0x74
 800d598:	ecbd 8b10 	vpop	{d8-d15}
 800d59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d5a0 <__errno>:
 800d5a0:	4b01      	ldr	r3, [pc, #4]	; (800d5a8 <__errno+0x8>)
 800d5a2:	6818      	ldr	r0, [r3, #0]
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	2000000c 	.word	0x2000000c

0800d5ac <__libc_init_array>:
 800d5ac:	b570      	push	{r4, r5, r6, lr}
 800d5ae:	4d0d      	ldr	r5, [pc, #52]	; (800d5e4 <__libc_init_array+0x38>)
 800d5b0:	4c0d      	ldr	r4, [pc, #52]	; (800d5e8 <__libc_init_array+0x3c>)
 800d5b2:	1b64      	subs	r4, r4, r5
 800d5b4:	10a4      	asrs	r4, r4, #2
 800d5b6:	2600      	movs	r6, #0
 800d5b8:	42a6      	cmp	r6, r4
 800d5ba:	d109      	bne.n	800d5d0 <__libc_init_array+0x24>
 800d5bc:	4d0b      	ldr	r5, [pc, #44]	; (800d5ec <__libc_init_array+0x40>)
 800d5be:	4c0c      	ldr	r4, [pc, #48]	; (800d5f0 <__libc_init_array+0x44>)
 800d5c0:	f001 fbc8 	bl	800ed54 <_init>
 800d5c4:	1b64      	subs	r4, r4, r5
 800d5c6:	10a4      	asrs	r4, r4, #2
 800d5c8:	2600      	movs	r6, #0
 800d5ca:	42a6      	cmp	r6, r4
 800d5cc:	d105      	bne.n	800d5da <__libc_init_array+0x2e>
 800d5ce:	bd70      	pop	{r4, r5, r6, pc}
 800d5d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5d4:	4798      	blx	r3
 800d5d6:	3601      	adds	r6, #1
 800d5d8:	e7ee      	b.n	800d5b8 <__libc_init_array+0xc>
 800d5da:	f855 3b04 	ldr.w	r3, [r5], #4
 800d5de:	4798      	blx	r3
 800d5e0:	3601      	adds	r6, #1
 800d5e2:	e7f2      	b.n	800d5ca <__libc_init_array+0x1e>
 800d5e4:	08022798 	.word	0x08022798
 800d5e8:	08022798 	.word	0x08022798
 800d5ec:	08022798 	.word	0x08022798
 800d5f0:	0802279c 	.word	0x0802279c

0800d5f4 <memcpy>:
 800d5f4:	440a      	add	r2, r1
 800d5f6:	4291      	cmp	r1, r2
 800d5f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d5fc:	d100      	bne.n	800d600 <memcpy+0xc>
 800d5fe:	4770      	bx	lr
 800d600:	b510      	push	{r4, lr}
 800d602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d60a:	4291      	cmp	r1, r2
 800d60c:	d1f9      	bne.n	800d602 <memcpy+0xe>
 800d60e:	bd10      	pop	{r4, pc}

0800d610 <memset>:
 800d610:	4402      	add	r2, r0
 800d612:	4603      	mov	r3, r0
 800d614:	4293      	cmp	r3, r2
 800d616:	d100      	bne.n	800d61a <memset+0xa>
 800d618:	4770      	bx	lr
 800d61a:	f803 1b01 	strb.w	r1, [r3], #1
 800d61e:	e7f9      	b.n	800d614 <memset+0x4>

0800d620 <_free_r>:
 800d620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d622:	2900      	cmp	r1, #0
 800d624:	d044      	beq.n	800d6b0 <_free_r+0x90>
 800d626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d62a:	9001      	str	r0, [sp, #4]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	f1a1 0404 	sub.w	r4, r1, #4
 800d632:	bfb8      	it	lt
 800d634:	18e4      	addlt	r4, r4, r3
 800d636:	f000 f903 	bl	800d840 <__malloc_lock>
 800d63a:	4a1e      	ldr	r2, [pc, #120]	; (800d6b4 <_free_r+0x94>)
 800d63c:	9801      	ldr	r0, [sp, #4]
 800d63e:	6813      	ldr	r3, [r2, #0]
 800d640:	b933      	cbnz	r3, 800d650 <_free_r+0x30>
 800d642:	6063      	str	r3, [r4, #4]
 800d644:	6014      	str	r4, [r2, #0]
 800d646:	b003      	add	sp, #12
 800d648:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d64c:	f000 b8fe 	b.w	800d84c <__malloc_unlock>
 800d650:	42a3      	cmp	r3, r4
 800d652:	d908      	bls.n	800d666 <_free_r+0x46>
 800d654:	6825      	ldr	r5, [r4, #0]
 800d656:	1961      	adds	r1, r4, r5
 800d658:	428b      	cmp	r3, r1
 800d65a:	bf01      	itttt	eq
 800d65c:	6819      	ldreq	r1, [r3, #0]
 800d65e:	685b      	ldreq	r3, [r3, #4]
 800d660:	1949      	addeq	r1, r1, r5
 800d662:	6021      	streq	r1, [r4, #0]
 800d664:	e7ed      	b.n	800d642 <_free_r+0x22>
 800d666:	461a      	mov	r2, r3
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	b10b      	cbz	r3, 800d670 <_free_r+0x50>
 800d66c:	42a3      	cmp	r3, r4
 800d66e:	d9fa      	bls.n	800d666 <_free_r+0x46>
 800d670:	6811      	ldr	r1, [r2, #0]
 800d672:	1855      	adds	r5, r2, r1
 800d674:	42a5      	cmp	r5, r4
 800d676:	d10b      	bne.n	800d690 <_free_r+0x70>
 800d678:	6824      	ldr	r4, [r4, #0]
 800d67a:	4421      	add	r1, r4
 800d67c:	1854      	adds	r4, r2, r1
 800d67e:	42a3      	cmp	r3, r4
 800d680:	6011      	str	r1, [r2, #0]
 800d682:	d1e0      	bne.n	800d646 <_free_r+0x26>
 800d684:	681c      	ldr	r4, [r3, #0]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	6053      	str	r3, [r2, #4]
 800d68a:	4421      	add	r1, r4
 800d68c:	6011      	str	r1, [r2, #0]
 800d68e:	e7da      	b.n	800d646 <_free_r+0x26>
 800d690:	d902      	bls.n	800d698 <_free_r+0x78>
 800d692:	230c      	movs	r3, #12
 800d694:	6003      	str	r3, [r0, #0]
 800d696:	e7d6      	b.n	800d646 <_free_r+0x26>
 800d698:	6825      	ldr	r5, [r4, #0]
 800d69a:	1961      	adds	r1, r4, r5
 800d69c:	428b      	cmp	r3, r1
 800d69e:	bf04      	itt	eq
 800d6a0:	6819      	ldreq	r1, [r3, #0]
 800d6a2:	685b      	ldreq	r3, [r3, #4]
 800d6a4:	6063      	str	r3, [r4, #4]
 800d6a6:	bf04      	itt	eq
 800d6a8:	1949      	addeq	r1, r1, r5
 800d6aa:	6021      	streq	r1, [r4, #0]
 800d6ac:	6054      	str	r4, [r2, #4]
 800d6ae:	e7ca      	b.n	800d646 <_free_r+0x26>
 800d6b0:	b003      	add	sp, #12
 800d6b2:	bd30      	pop	{r4, r5, pc}
 800d6b4:	20018d88 	.word	0x20018d88

0800d6b8 <sbrk_aligned>:
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	4e0e      	ldr	r6, [pc, #56]	; (800d6f4 <sbrk_aligned+0x3c>)
 800d6bc:	460c      	mov	r4, r1
 800d6be:	6831      	ldr	r1, [r6, #0]
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	b911      	cbnz	r1, 800d6ca <sbrk_aligned+0x12>
 800d6c4:	f000 f88c 	bl	800d7e0 <_sbrk_r>
 800d6c8:	6030      	str	r0, [r6, #0]
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	f000 f887 	bl	800d7e0 <_sbrk_r>
 800d6d2:	1c43      	adds	r3, r0, #1
 800d6d4:	d00a      	beq.n	800d6ec <sbrk_aligned+0x34>
 800d6d6:	1cc4      	adds	r4, r0, #3
 800d6d8:	f024 0403 	bic.w	r4, r4, #3
 800d6dc:	42a0      	cmp	r0, r4
 800d6de:	d007      	beq.n	800d6f0 <sbrk_aligned+0x38>
 800d6e0:	1a21      	subs	r1, r4, r0
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	f000 f87c 	bl	800d7e0 <_sbrk_r>
 800d6e8:	3001      	adds	r0, #1
 800d6ea:	d101      	bne.n	800d6f0 <sbrk_aligned+0x38>
 800d6ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	bd70      	pop	{r4, r5, r6, pc}
 800d6f4:	20018d8c 	.word	0x20018d8c

0800d6f8 <_malloc_r>:
 800d6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6fc:	1ccd      	adds	r5, r1, #3
 800d6fe:	f025 0503 	bic.w	r5, r5, #3
 800d702:	3508      	adds	r5, #8
 800d704:	2d0c      	cmp	r5, #12
 800d706:	bf38      	it	cc
 800d708:	250c      	movcc	r5, #12
 800d70a:	2d00      	cmp	r5, #0
 800d70c:	4607      	mov	r7, r0
 800d70e:	db01      	blt.n	800d714 <_malloc_r+0x1c>
 800d710:	42a9      	cmp	r1, r5
 800d712:	d905      	bls.n	800d720 <_malloc_r+0x28>
 800d714:	230c      	movs	r3, #12
 800d716:	603b      	str	r3, [r7, #0]
 800d718:	2600      	movs	r6, #0
 800d71a:	4630      	mov	r0, r6
 800d71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d720:	4e2e      	ldr	r6, [pc, #184]	; (800d7dc <_malloc_r+0xe4>)
 800d722:	f000 f88d 	bl	800d840 <__malloc_lock>
 800d726:	6833      	ldr	r3, [r6, #0]
 800d728:	461c      	mov	r4, r3
 800d72a:	bb34      	cbnz	r4, 800d77a <_malloc_r+0x82>
 800d72c:	4629      	mov	r1, r5
 800d72e:	4638      	mov	r0, r7
 800d730:	f7ff ffc2 	bl	800d6b8 <sbrk_aligned>
 800d734:	1c43      	adds	r3, r0, #1
 800d736:	4604      	mov	r4, r0
 800d738:	d14d      	bne.n	800d7d6 <_malloc_r+0xde>
 800d73a:	6834      	ldr	r4, [r6, #0]
 800d73c:	4626      	mov	r6, r4
 800d73e:	2e00      	cmp	r6, #0
 800d740:	d140      	bne.n	800d7c4 <_malloc_r+0xcc>
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	4631      	mov	r1, r6
 800d746:	4638      	mov	r0, r7
 800d748:	eb04 0803 	add.w	r8, r4, r3
 800d74c:	f000 f848 	bl	800d7e0 <_sbrk_r>
 800d750:	4580      	cmp	r8, r0
 800d752:	d13a      	bne.n	800d7ca <_malloc_r+0xd2>
 800d754:	6821      	ldr	r1, [r4, #0]
 800d756:	3503      	adds	r5, #3
 800d758:	1a6d      	subs	r5, r5, r1
 800d75a:	f025 0503 	bic.w	r5, r5, #3
 800d75e:	3508      	adds	r5, #8
 800d760:	2d0c      	cmp	r5, #12
 800d762:	bf38      	it	cc
 800d764:	250c      	movcc	r5, #12
 800d766:	4629      	mov	r1, r5
 800d768:	4638      	mov	r0, r7
 800d76a:	f7ff ffa5 	bl	800d6b8 <sbrk_aligned>
 800d76e:	3001      	adds	r0, #1
 800d770:	d02b      	beq.n	800d7ca <_malloc_r+0xd2>
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	442b      	add	r3, r5
 800d776:	6023      	str	r3, [r4, #0]
 800d778:	e00e      	b.n	800d798 <_malloc_r+0xa0>
 800d77a:	6822      	ldr	r2, [r4, #0]
 800d77c:	1b52      	subs	r2, r2, r5
 800d77e:	d41e      	bmi.n	800d7be <_malloc_r+0xc6>
 800d780:	2a0b      	cmp	r2, #11
 800d782:	d916      	bls.n	800d7b2 <_malloc_r+0xba>
 800d784:	1961      	adds	r1, r4, r5
 800d786:	42a3      	cmp	r3, r4
 800d788:	6025      	str	r5, [r4, #0]
 800d78a:	bf18      	it	ne
 800d78c:	6059      	strne	r1, [r3, #4]
 800d78e:	6863      	ldr	r3, [r4, #4]
 800d790:	bf08      	it	eq
 800d792:	6031      	streq	r1, [r6, #0]
 800d794:	5162      	str	r2, [r4, r5]
 800d796:	604b      	str	r3, [r1, #4]
 800d798:	4638      	mov	r0, r7
 800d79a:	f104 060b 	add.w	r6, r4, #11
 800d79e:	f000 f855 	bl	800d84c <__malloc_unlock>
 800d7a2:	f026 0607 	bic.w	r6, r6, #7
 800d7a6:	1d23      	adds	r3, r4, #4
 800d7a8:	1af2      	subs	r2, r6, r3
 800d7aa:	d0b6      	beq.n	800d71a <_malloc_r+0x22>
 800d7ac:	1b9b      	subs	r3, r3, r6
 800d7ae:	50a3      	str	r3, [r4, r2]
 800d7b0:	e7b3      	b.n	800d71a <_malloc_r+0x22>
 800d7b2:	6862      	ldr	r2, [r4, #4]
 800d7b4:	42a3      	cmp	r3, r4
 800d7b6:	bf0c      	ite	eq
 800d7b8:	6032      	streq	r2, [r6, #0]
 800d7ba:	605a      	strne	r2, [r3, #4]
 800d7bc:	e7ec      	b.n	800d798 <_malloc_r+0xa0>
 800d7be:	4623      	mov	r3, r4
 800d7c0:	6864      	ldr	r4, [r4, #4]
 800d7c2:	e7b2      	b.n	800d72a <_malloc_r+0x32>
 800d7c4:	4634      	mov	r4, r6
 800d7c6:	6876      	ldr	r6, [r6, #4]
 800d7c8:	e7b9      	b.n	800d73e <_malloc_r+0x46>
 800d7ca:	230c      	movs	r3, #12
 800d7cc:	603b      	str	r3, [r7, #0]
 800d7ce:	4638      	mov	r0, r7
 800d7d0:	f000 f83c 	bl	800d84c <__malloc_unlock>
 800d7d4:	e7a1      	b.n	800d71a <_malloc_r+0x22>
 800d7d6:	6025      	str	r5, [r4, #0]
 800d7d8:	e7de      	b.n	800d798 <_malloc_r+0xa0>
 800d7da:	bf00      	nop
 800d7dc:	20018d88 	.word	0x20018d88

0800d7e0 <_sbrk_r>:
 800d7e0:	b538      	push	{r3, r4, r5, lr}
 800d7e2:	4d06      	ldr	r5, [pc, #24]	; (800d7fc <_sbrk_r+0x1c>)
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	4608      	mov	r0, r1
 800d7ea:	602b      	str	r3, [r5, #0]
 800d7ec:	f7f4 f8a8 	bl	8001940 <_sbrk>
 800d7f0:	1c43      	adds	r3, r0, #1
 800d7f2:	d102      	bne.n	800d7fa <_sbrk_r+0x1a>
 800d7f4:	682b      	ldr	r3, [r5, #0]
 800d7f6:	b103      	cbz	r3, 800d7fa <_sbrk_r+0x1a>
 800d7f8:	6023      	str	r3, [r4, #0]
 800d7fa:	bd38      	pop	{r3, r4, r5, pc}
 800d7fc:	20018d90 	.word	0x20018d90

0800d800 <siprintf>:
 800d800:	b40e      	push	{r1, r2, r3}
 800d802:	b500      	push	{lr}
 800d804:	b09c      	sub	sp, #112	; 0x70
 800d806:	ab1d      	add	r3, sp, #116	; 0x74
 800d808:	9002      	str	r0, [sp, #8]
 800d80a:	9006      	str	r0, [sp, #24]
 800d80c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d810:	4809      	ldr	r0, [pc, #36]	; (800d838 <siprintf+0x38>)
 800d812:	9107      	str	r1, [sp, #28]
 800d814:	9104      	str	r1, [sp, #16]
 800d816:	4909      	ldr	r1, [pc, #36]	; (800d83c <siprintf+0x3c>)
 800d818:	f853 2b04 	ldr.w	r2, [r3], #4
 800d81c:	9105      	str	r1, [sp, #20]
 800d81e:	6800      	ldr	r0, [r0, #0]
 800d820:	9301      	str	r3, [sp, #4]
 800d822:	a902      	add	r1, sp, #8
 800d824:	f000 f8a2 	bl	800d96c <_svfiprintf_r>
 800d828:	9b02      	ldr	r3, [sp, #8]
 800d82a:	2200      	movs	r2, #0
 800d82c:	701a      	strb	r2, [r3, #0]
 800d82e:	b01c      	add	sp, #112	; 0x70
 800d830:	f85d eb04 	ldr.w	lr, [sp], #4
 800d834:	b003      	add	sp, #12
 800d836:	4770      	bx	lr
 800d838:	2000000c 	.word	0x2000000c
 800d83c:	ffff0208 	.word	0xffff0208

0800d840 <__malloc_lock>:
 800d840:	4801      	ldr	r0, [pc, #4]	; (800d848 <__malloc_lock+0x8>)
 800d842:	f000 bb27 	b.w	800de94 <__retarget_lock_acquire_recursive>
 800d846:	bf00      	nop
 800d848:	20018d94 	.word	0x20018d94

0800d84c <__malloc_unlock>:
 800d84c:	4801      	ldr	r0, [pc, #4]	; (800d854 <__malloc_unlock+0x8>)
 800d84e:	f000 bb22 	b.w	800de96 <__retarget_lock_release_recursive>
 800d852:	bf00      	nop
 800d854:	20018d94 	.word	0x20018d94

0800d858 <_realloc_r>:
 800d858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d85c:	4680      	mov	r8, r0
 800d85e:	4614      	mov	r4, r2
 800d860:	460e      	mov	r6, r1
 800d862:	b921      	cbnz	r1, 800d86e <_realloc_r+0x16>
 800d864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d868:	4611      	mov	r1, r2
 800d86a:	f7ff bf45 	b.w	800d6f8 <_malloc_r>
 800d86e:	b92a      	cbnz	r2, 800d87c <_realloc_r+0x24>
 800d870:	f7ff fed6 	bl	800d620 <_free_r>
 800d874:	4625      	mov	r5, r4
 800d876:	4628      	mov	r0, r5
 800d878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d87c:	f000 fb26 	bl	800decc <_malloc_usable_size_r>
 800d880:	4284      	cmp	r4, r0
 800d882:	4607      	mov	r7, r0
 800d884:	d802      	bhi.n	800d88c <_realloc_r+0x34>
 800d886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d88a:	d812      	bhi.n	800d8b2 <_realloc_r+0x5a>
 800d88c:	4621      	mov	r1, r4
 800d88e:	4640      	mov	r0, r8
 800d890:	f7ff ff32 	bl	800d6f8 <_malloc_r>
 800d894:	4605      	mov	r5, r0
 800d896:	2800      	cmp	r0, #0
 800d898:	d0ed      	beq.n	800d876 <_realloc_r+0x1e>
 800d89a:	42bc      	cmp	r4, r7
 800d89c:	4622      	mov	r2, r4
 800d89e:	4631      	mov	r1, r6
 800d8a0:	bf28      	it	cs
 800d8a2:	463a      	movcs	r2, r7
 800d8a4:	f7ff fea6 	bl	800d5f4 <memcpy>
 800d8a8:	4631      	mov	r1, r6
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	f7ff feb8 	bl	800d620 <_free_r>
 800d8b0:	e7e1      	b.n	800d876 <_realloc_r+0x1e>
 800d8b2:	4635      	mov	r5, r6
 800d8b4:	e7df      	b.n	800d876 <_realloc_r+0x1e>

0800d8b6 <__ssputs_r>:
 800d8b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ba:	688e      	ldr	r6, [r1, #8]
 800d8bc:	429e      	cmp	r6, r3
 800d8be:	4682      	mov	sl, r0
 800d8c0:	460c      	mov	r4, r1
 800d8c2:	4690      	mov	r8, r2
 800d8c4:	461f      	mov	r7, r3
 800d8c6:	d838      	bhi.n	800d93a <__ssputs_r+0x84>
 800d8c8:	898a      	ldrh	r2, [r1, #12]
 800d8ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8ce:	d032      	beq.n	800d936 <__ssputs_r+0x80>
 800d8d0:	6825      	ldr	r5, [r4, #0]
 800d8d2:	6909      	ldr	r1, [r1, #16]
 800d8d4:	eba5 0901 	sub.w	r9, r5, r1
 800d8d8:	6965      	ldr	r5, [r4, #20]
 800d8da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	444b      	add	r3, r9
 800d8e6:	106d      	asrs	r5, r5, #1
 800d8e8:	429d      	cmp	r5, r3
 800d8ea:	bf38      	it	cc
 800d8ec:	461d      	movcc	r5, r3
 800d8ee:	0553      	lsls	r3, r2, #21
 800d8f0:	d531      	bpl.n	800d956 <__ssputs_r+0xa0>
 800d8f2:	4629      	mov	r1, r5
 800d8f4:	f7ff ff00 	bl	800d6f8 <_malloc_r>
 800d8f8:	4606      	mov	r6, r0
 800d8fa:	b950      	cbnz	r0, 800d912 <__ssputs_r+0x5c>
 800d8fc:	230c      	movs	r3, #12
 800d8fe:	f8ca 3000 	str.w	r3, [sl]
 800d902:	89a3      	ldrh	r3, [r4, #12]
 800d904:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d908:	81a3      	strh	r3, [r4, #12]
 800d90a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d912:	6921      	ldr	r1, [r4, #16]
 800d914:	464a      	mov	r2, r9
 800d916:	f7ff fe6d 	bl	800d5f4 <memcpy>
 800d91a:	89a3      	ldrh	r3, [r4, #12]
 800d91c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d924:	81a3      	strh	r3, [r4, #12]
 800d926:	6126      	str	r6, [r4, #16]
 800d928:	6165      	str	r5, [r4, #20]
 800d92a:	444e      	add	r6, r9
 800d92c:	eba5 0509 	sub.w	r5, r5, r9
 800d930:	6026      	str	r6, [r4, #0]
 800d932:	60a5      	str	r5, [r4, #8]
 800d934:	463e      	mov	r6, r7
 800d936:	42be      	cmp	r6, r7
 800d938:	d900      	bls.n	800d93c <__ssputs_r+0x86>
 800d93a:	463e      	mov	r6, r7
 800d93c:	6820      	ldr	r0, [r4, #0]
 800d93e:	4632      	mov	r2, r6
 800d940:	4641      	mov	r1, r8
 800d942:	f000 faa9 	bl	800de98 <memmove>
 800d946:	68a3      	ldr	r3, [r4, #8]
 800d948:	1b9b      	subs	r3, r3, r6
 800d94a:	60a3      	str	r3, [r4, #8]
 800d94c:	6823      	ldr	r3, [r4, #0]
 800d94e:	4433      	add	r3, r6
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	2000      	movs	r0, #0
 800d954:	e7db      	b.n	800d90e <__ssputs_r+0x58>
 800d956:	462a      	mov	r2, r5
 800d958:	f7ff ff7e 	bl	800d858 <_realloc_r>
 800d95c:	4606      	mov	r6, r0
 800d95e:	2800      	cmp	r0, #0
 800d960:	d1e1      	bne.n	800d926 <__ssputs_r+0x70>
 800d962:	6921      	ldr	r1, [r4, #16]
 800d964:	4650      	mov	r0, sl
 800d966:	f7ff fe5b 	bl	800d620 <_free_r>
 800d96a:	e7c7      	b.n	800d8fc <__ssputs_r+0x46>

0800d96c <_svfiprintf_r>:
 800d96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d970:	4698      	mov	r8, r3
 800d972:	898b      	ldrh	r3, [r1, #12]
 800d974:	061b      	lsls	r3, r3, #24
 800d976:	b09d      	sub	sp, #116	; 0x74
 800d978:	4607      	mov	r7, r0
 800d97a:	460d      	mov	r5, r1
 800d97c:	4614      	mov	r4, r2
 800d97e:	d50e      	bpl.n	800d99e <_svfiprintf_r+0x32>
 800d980:	690b      	ldr	r3, [r1, #16]
 800d982:	b963      	cbnz	r3, 800d99e <_svfiprintf_r+0x32>
 800d984:	2140      	movs	r1, #64	; 0x40
 800d986:	f7ff feb7 	bl	800d6f8 <_malloc_r>
 800d98a:	6028      	str	r0, [r5, #0]
 800d98c:	6128      	str	r0, [r5, #16]
 800d98e:	b920      	cbnz	r0, 800d99a <_svfiprintf_r+0x2e>
 800d990:	230c      	movs	r3, #12
 800d992:	603b      	str	r3, [r7, #0]
 800d994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d998:	e0d1      	b.n	800db3e <_svfiprintf_r+0x1d2>
 800d99a:	2340      	movs	r3, #64	; 0x40
 800d99c:	616b      	str	r3, [r5, #20]
 800d99e:	2300      	movs	r3, #0
 800d9a0:	9309      	str	r3, [sp, #36]	; 0x24
 800d9a2:	2320      	movs	r3, #32
 800d9a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9ac:	2330      	movs	r3, #48	; 0x30
 800d9ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db58 <_svfiprintf_r+0x1ec>
 800d9b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9b6:	f04f 0901 	mov.w	r9, #1
 800d9ba:	4623      	mov	r3, r4
 800d9bc:	469a      	mov	sl, r3
 800d9be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9c2:	b10a      	cbz	r2, 800d9c8 <_svfiprintf_r+0x5c>
 800d9c4:	2a25      	cmp	r2, #37	; 0x25
 800d9c6:	d1f9      	bne.n	800d9bc <_svfiprintf_r+0x50>
 800d9c8:	ebba 0b04 	subs.w	fp, sl, r4
 800d9cc:	d00b      	beq.n	800d9e6 <_svfiprintf_r+0x7a>
 800d9ce:	465b      	mov	r3, fp
 800d9d0:	4622      	mov	r2, r4
 800d9d2:	4629      	mov	r1, r5
 800d9d4:	4638      	mov	r0, r7
 800d9d6:	f7ff ff6e 	bl	800d8b6 <__ssputs_r>
 800d9da:	3001      	adds	r0, #1
 800d9dc:	f000 80aa 	beq.w	800db34 <_svfiprintf_r+0x1c8>
 800d9e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9e2:	445a      	add	r2, fp
 800d9e4:	9209      	str	r2, [sp, #36]	; 0x24
 800d9e6:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	f000 80a2 	beq.w	800db34 <_svfiprintf_r+0x1c8>
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9fa:	f10a 0a01 	add.w	sl, sl, #1
 800d9fe:	9304      	str	r3, [sp, #16]
 800da00:	9307      	str	r3, [sp, #28]
 800da02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da06:	931a      	str	r3, [sp, #104]	; 0x68
 800da08:	4654      	mov	r4, sl
 800da0a:	2205      	movs	r2, #5
 800da0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da10:	4851      	ldr	r0, [pc, #324]	; (800db58 <_svfiprintf_r+0x1ec>)
 800da12:	f7f2 fc75 	bl	8000300 <memchr>
 800da16:	9a04      	ldr	r2, [sp, #16]
 800da18:	b9d8      	cbnz	r0, 800da52 <_svfiprintf_r+0xe6>
 800da1a:	06d0      	lsls	r0, r2, #27
 800da1c:	bf44      	itt	mi
 800da1e:	2320      	movmi	r3, #32
 800da20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da24:	0711      	lsls	r1, r2, #28
 800da26:	bf44      	itt	mi
 800da28:	232b      	movmi	r3, #43	; 0x2b
 800da2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da2e:	f89a 3000 	ldrb.w	r3, [sl]
 800da32:	2b2a      	cmp	r3, #42	; 0x2a
 800da34:	d015      	beq.n	800da62 <_svfiprintf_r+0xf6>
 800da36:	9a07      	ldr	r2, [sp, #28]
 800da38:	4654      	mov	r4, sl
 800da3a:	2000      	movs	r0, #0
 800da3c:	f04f 0c0a 	mov.w	ip, #10
 800da40:	4621      	mov	r1, r4
 800da42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da46:	3b30      	subs	r3, #48	; 0x30
 800da48:	2b09      	cmp	r3, #9
 800da4a:	d94e      	bls.n	800daea <_svfiprintf_r+0x17e>
 800da4c:	b1b0      	cbz	r0, 800da7c <_svfiprintf_r+0x110>
 800da4e:	9207      	str	r2, [sp, #28]
 800da50:	e014      	b.n	800da7c <_svfiprintf_r+0x110>
 800da52:	eba0 0308 	sub.w	r3, r0, r8
 800da56:	fa09 f303 	lsl.w	r3, r9, r3
 800da5a:	4313      	orrs	r3, r2
 800da5c:	9304      	str	r3, [sp, #16]
 800da5e:	46a2      	mov	sl, r4
 800da60:	e7d2      	b.n	800da08 <_svfiprintf_r+0x9c>
 800da62:	9b03      	ldr	r3, [sp, #12]
 800da64:	1d19      	adds	r1, r3, #4
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	9103      	str	r1, [sp, #12]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	bfbb      	ittet	lt
 800da6e:	425b      	neglt	r3, r3
 800da70:	f042 0202 	orrlt.w	r2, r2, #2
 800da74:	9307      	strge	r3, [sp, #28]
 800da76:	9307      	strlt	r3, [sp, #28]
 800da78:	bfb8      	it	lt
 800da7a:	9204      	strlt	r2, [sp, #16]
 800da7c:	7823      	ldrb	r3, [r4, #0]
 800da7e:	2b2e      	cmp	r3, #46	; 0x2e
 800da80:	d10c      	bne.n	800da9c <_svfiprintf_r+0x130>
 800da82:	7863      	ldrb	r3, [r4, #1]
 800da84:	2b2a      	cmp	r3, #42	; 0x2a
 800da86:	d135      	bne.n	800daf4 <_svfiprintf_r+0x188>
 800da88:	9b03      	ldr	r3, [sp, #12]
 800da8a:	1d1a      	adds	r2, r3, #4
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	9203      	str	r2, [sp, #12]
 800da90:	2b00      	cmp	r3, #0
 800da92:	bfb8      	it	lt
 800da94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800da98:	3402      	adds	r4, #2
 800da9a:	9305      	str	r3, [sp, #20]
 800da9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db68 <_svfiprintf_r+0x1fc>
 800daa0:	7821      	ldrb	r1, [r4, #0]
 800daa2:	2203      	movs	r2, #3
 800daa4:	4650      	mov	r0, sl
 800daa6:	f7f2 fc2b 	bl	8000300 <memchr>
 800daaa:	b140      	cbz	r0, 800dabe <_svfiprintf_r+0x152>
 800daac:	2340      	movs	r3, #64	; 0x40
 800daae:	eba0 000a 	sub.w	r0, r0, sl
 800dab2:	fa03 f000 	lsl.w	r0, r3, r0
 800dab6:	9b04      	ldr	r3, [sp, #16]
 800dab8:	4303      	orrs	r3, r0
 800daba:	3401      	adds	r4, #1
 800dabc:	9304      	str	r3, [sp, #16]
 800dabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dac2:	4826      	ldr	r0, [pc, #152]	; (800db5c <_svfiprintf_r+0x1f0>)
 800dac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dac8:	2206      	movs	r2, #6
 800daca:	f7f2 fc19 	bl	8000300 <memchr>
 800dace:	2800      	cmp	r0, #0
 800dad0:	d038      	beq.n	800db44 <_svfiprintf_r+0x1d8>
 800dad2:	4b23      	ldr	r3, [pc, #140]	; (800db60 <_svfiprintf_r+0x1f4>)
 800dad4:	bb1b      	cbnz	r3, 800db1e <_svfiprintf_r+0x1b2>
 800dad6:	9b03      	ldr	r3, [sp, #12]
 800dad8:	3307      	adds	r3, #7
 800dada:	f023 0307 	bic.w	r3, r3, #7
 800dade:	3308      	adds	r3, #8
 800dae0:	9303      	str	r3, [sp, #12]
 800dae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dae4:	4433      	add	r3, r6
 800dae6:	9309      	str	r3, [sp, #36]	; 0x24
 800dae8:	e767      	b.n	800d9ba <_svfiprintf_r+0x4e>
 800daea:	fb0c 3202 	mla	r2, ip, r2, r3
 800daee:	460c      	mov	r4, r1
 800daf0:	2001      	movs	r0, #1
 800daf2:	e7a5      	b.n	800da40 <_svfiprintf_r+0xd4>
 800daf4:	2300      	movs	r3, #0
 800daf6:	3401      	adds	r4, #1
 800daf8:	9305      	str	r3, [sp, #20]
 800dafa:	4619      	mov	r1, r3
 800dafc:	f04f 0c0a 	mov.w	ip, #10
 800db00:	4620      	mov	r0, r4
 800db02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db06:	3a30      	subs	r2, #48	; 0x30
 800db08:	2a09      	cmp	r2, #9
 800db0a:	d903      	bls.n	800db14 <_svfiprintf_r+0x1a8>
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d0c5      	beq.n	800da9c <_svfiprintf_r+0x130>
 800db10:	9105      	str	r1, [sp, #20]
 800db12:	e7c3      	b.n	800da9c <_svfiprintf_r+0x130>
 800db14:	fb0c 2101 	mla	r1, ip, r1, r2
 800db18:	4604      	mov	r4, r0
 800db1a:	2301      	movs	r3, #1
 800db1c:	e7f0      	b.n	800db00 <_svfiprintf_r+0x194>
 800db1e:	ab03      	add	r3, sp, #12
 800db20:	9300      	str	r3, [sp, #0]
 800db22:	462a      	mov	r2, r5
 800db24:	4b0f      	ldr	r3, [pc, #60]	; (800db64 <_svfiprintf_r+0x1f8>)
 800db26:	a904      	add	r1, sp, #16
 800db28:	4638      	mov	r0, r7
 800db2a:	f3af 8000 	nop.w
 800db2e:	1c42      	adds	r2, r0, #1
 800db30:	4606      	mov	r6, r0
 800db32:	d1d6      	bne.n	800dae2 <_svfiprintf_r+0x176>
 800db34:	89ab      	ldrh	r3, [r5, #12]
 800db36:	065b      	lsls	r3, r3, #25
 800db38:	f53f af2c 	bmi.w	800d994 <_svfiprintf_r+0x28>
 800db3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db3e:	b01d      	add	sp, #116	; 0x74
 800db40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db44:	ab03      	add	r3, sp, #12
 800db46:	9300      	str	r3, [sp, #0]
 800db48:	462a      	mov	r2, r5
 800db4a:	4b06      	ldr	r3, [pc, #24]	; (800db64 <_svfiprintf_r+0x1f8>)
 800db4c:	a904      	add	r1, sp, #16
 800db4e:	4638      	mov	r0, r7
 800db50:	f000 f87a 	bl	800dc48 <_printf_i>
 800db54:	e7eb      	b.n	800db2e <_svfiprintf_r+0x1c2>
 800db56:	bf00      	nop
 800db58:	0802231c 	.word	0x0802231c
 800db5c:	08022326 	.word	0x08022326
 800db60:	00000000 	.word	0x00000000
 800db64:	0800d8b7 	.word	0x0800d8b7
 800db68:	08022322 	.word	0x08022322

0800db6c <_printf_common>:
 800db6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db70:	4616      	mov	r6, r2
 800db72:	4699      	mov	r9, r3
 800db74:	688a      	ldr	r2, [r1, #8]
 800db76:	690b      	ldr	r3, [r1, #16]
 800db78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db7c:	4293      	cmp	r3, r2
 800db7e:	bfb8      	it	lt
 800db80:	4613      	movlt	r3, r2
 800db82:	6033      	str	r3, [r6, #0]
 800db84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db88:	4607      	mov	r7, r0
 800db8a:	460c      	mov	r4, r1
 800db8c:	b10a      	cbz	r2, 800db92 <_printf_common+0x26>
 800db8e:	3301      	adds	r3, #1
 800db90:	6033      	str	r3, [r6, #0]
 800db92:	6823      	ldr	r3, [r4, #0]
 800db94:	0699      	lsls	r1, r3, #26
 800db96:	bf42      	ittt	mi
 800db98:	6833      	ldrmi	r3, [r6, #0]
 800db9a:	3302      	addmi	r3, #2
 800db9c:	6033      	strmi	r3, [r6, #0]
 800db9e:	6825      	ldr	r5, [r4, #0]
 800dba0:	f015 0506 	ands.w	r5, r5, #6
 800dba4:	d106      	bne.n	800dbb4 <_printf_common+0x48>
 800dba6:	f104 0a19 	add.w	sl, r4, #25
 800dbaa:	68e3      	ldr	r3, [r4, #12]
 800dbac:	6832      	ldr	r2, [r6, #0]
 800dbae:	1a9b      	subs	r3, r3, r2
 800dbb0:	42ab      	cmp	r3, r5
 800dbb2:	dc26      	bgt.n	800dc02 <_printf_common+0x96>
 800dbb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dbb8:	1e13      	subs	r3, r2, #0
 800dbba:	6822      	ldr	r2, [r4, #0]
 800dbbc:	bf18      	it	ne
 800dbbe:	2301      	movne	r3, #1
 800dbc0:	0692      	lsls	r2, r2, #26
 800dbc2:	d42b      	bmi.n	800dc1c <_printf_common+0xb0>
 800dbc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dbc8:	4649      	mov	r1, r9
 800dbca:	4638      	mov	r0, r7
 800dbcc:	47c0      	blx	r8
 800dbce:	3001      	adds	r0, #1
 800dbd0:	d01e      	beq.n	800dc10 <_printf_common+0xa4>
 800dbd2:	6823      	ldr	r3, [r4, #0]
 800dbd4:	68e5      	ldr	r5, [r4, #12]
 800dbd6:	6832      	ldr	r2, [r6, #0]
 800dbd8:	f003 0306 	and.w	r3, r3, #6
 800dbdc:	2b04      	cmp	r3, #4
 800dbde:	bf08      	it	eq
 800dbe0:	1aad      	subeq	r5, r5, r2
 800dbe2:	68a3      	ldr	r3, [r4, #8]
 800dbe4:	6922      	ldr	r2, [r4, #16]
 800dbe6:	bf0c      	ite	eq
 800dbe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dbec:	2500      	movne	r5, #0
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	bfc4      	itt	gt
 800dbf2:	1a9b      	subgt	r3, r3, r2
 800dbf4:	18ed      	addgt	r5, r5, r3
 800dbf6:	2600      	movs	r6, #0
 800dbf8:	341a      	adds	r4, #26
 800dbfa:	42b5      	cmp	r5, r6
 800dbfc:	d11a      	bne.n	800dc34 <_printf_common+0xc8>
 800dbfe:	2000      	movs	r0, #0
 800dc00:	e008      	b.n	800dc14 <_printf_common+0xa8>
 800dc02:	2301      	movs	r3, #1
 800dc04:	4652      	mov	r2, sl
 800dc06:	4649      	mov	r1, r9
 800dc08:	4638      	mov	r0, r7
 800dc0a:	47c0      	blx	r8
 800dc0c:	3001      	adds	r0, #1
 800dc0e:	d103      	bne.n	800dc18 <_printf_common+0xac>
 800dc10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc18:	3501      	adds	r5, #1
 800dc1a:	e7c6      	b.n	800dbaa <_printf_common+0x3e>
 800dc1c:	18e1      	adds	r1, r4, r3
 800dc1e:	1c5a      	adds	r2, r3, #1
 800dc20:	2030      	movs	r0, #48	; 0x30
 800dc22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dc26:	4422      	add	r2, r4
 800dc28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dc2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dc30:	3302      	adds	r3, #2
 800dc32:	e7c7      	b.n	800dbc4 <_printf_common+0x58>
 800dc34:	2301      	movs	r3, #1
 800dc36:	4622      	mov	r2, r4
 800dc38:	4649      	mov	r1, r9
 800dc3a:	4638      	mov	r0, r7
 800dc3c:	47c0      	blx	r8
 800dc3e:	3001      	adds	r0, #1
 800dc40:	d0e6      	beq.n	800dc10 <_printf_common+0xa4>
 800dc42:	3601      	adds	r6, #1
 800dc44:	e7d9      	b.n	800dbfa <_printf_common+0x8e>
	...

0800dc48 <_printf_i>:
 800dc48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc4c:	7e0f      	ldrb	r7, [r1, #24]
 800dc4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc50:	2f78      	cmp	r7, #120	; 0x78
 800dc52:	4691      	mov	r9, r2
 800dc54:	4680      	mov	r8, r0
 800dc56:	460c      	mov	r4, r1
 800dc58:	469a      	mov	sl, r3
 800dc5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dc5e:	d807      	bhi.n	800dc70 <_printf_i+0x28>
 800dc60:	2f62      	cmp	r7, #98	; 0x62
 800dc62:	d80a      	bhi.n	800dc7a <_printf_i+0x32>
 800dc64:	2f00      	cmp	r7, #0
 800dc66:	f000 80d8 	beq.w	800de1a <_printf_i+0x1d2>
 800dc6a:	2f58      	cmp	r7, #88	; 0x58
 800dc6c:	f000 80a3 	beq.w	800ddb6 <_printf_i+0x16e>
 800dc70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dc78:	e03a      	b.n	800dcf0 <_printf_i+0xa8>
 800dc7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dc7e:	2b15      	cmp	r3, #21
 800dc80:	d8f6      	bhi.n	800dc70 <_printf_i+0x28>
 800dc82:	a101      	add	r1, pc, #4	; (adr r1, 800dc88 <_printf_i+0x40>)
 800dc84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dc88:	0800dce1 	.word	0x0800dce1
 800dc8c:	0800dcf5 	.word	0x0800dcf5
 800dc90:	0800dc71 	.word	0x0800dc71
 800dc94:	0800dc71 	.word	0x0800dc71
 800dc98:	0800dc71 	.word	0x0800dc71
 800dc9c:	0800dc71 	.word	0x0800dc71
 800dca0:	0800dcf5 	.word	0x0800dcf5
 800dca4:	0800dc71 	.word	0x0800dc71
 800dca8:	0800dc71 	.word	0x0800dc71
 800dcac:	0800dc71 	.word	0x0800dc71
 800dcb0:	0800dc71 	.word	0x0800dc71
 800dcb4:	0800de01 	.word	0x0800de01
 800dcb8:	0800dd25 	.word	0x0800dd25
 800dcbc:	0800dde3 	.word	0x0800dde3
 800dcc0:	0800dc71 	.word	0x0800dc71
 800dcc4:	0800dc71 	.word	0x0800dc71
 800dcc8:	0800de23 	.word	0x0800de23
 800dccc:	0800dc71 	.word	0x0800dc71
 800dcd0:	0800dd25 	.word	0x0800dd25
 800dcd4:	0800dc71 	.word	0x0800dc71
 800dcd8:	0800dc71 	.word	0x0800dc71
 800dcdc:	0800ddeb 	.word	0x0800ddeb
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	1d1a      	adds	r2, r3, #4
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	602a      	str	r2, [r5, #0]
 800dce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dcec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	e0a3      	b.n	800de3c <_printf_i+0x1f4>
 800dcf4:	6820      	ldr	r0, [r4, #0]
 800dcf6:	6829      	ldr	r1, [r5, #0]
 800dcf8:	0606      	lsls	r6, r0, #24
 800dcfa:	f101 0304 	add.w	r3, r1, #4
 800dcfe:	d50a      	bpl.n	800dd16 <_printf_i+0xce>
 800dd00:	680e      	ldr	r6, [r1, #0]
 800dd02:	602b      	str	r3, [r5, #0]
 800dd04:	2e00      	cmp	r6, #0
 800dd06:	da03      	bge.n	800dd10 <_printf_i+0xc8>
 800dd08:	232d      	movs	r3, #45	; 0x2d
 800dd0a:	4276      	negs	r6, r6
 800dd0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd10:	485e      	ldr	r0, [pc, #376]	; (800de8c <_printf_i+0x244>)
 800dd12:	230a      	movs	r3, #10
 800dd14:	e019      	b.n	800dd4a <_printf_i+0x102>
 800dd16:	680e      	ldr	r6, [r1, #0]
 800dd18:	602b      	str	r3, [r5, #0]
 800dd1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dd1e:	bf18      	it	ne
 800dd20:	b236      	sxthne	r6, r6
 800dd22:	e7ef      	b.n	800dd04 <_printf_i+0xbc>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	6820      	ldr	r0, [r4, #0]
 800dd28:	1d19      	adds	r1, r3, #4
 800dd2a:	6029      	str	r1, [r5, #0]
 800dd2c:	0601      	lsls	r1, r0, #24
 800dd2e:	d501      	bpl.n	800dd34 <_printf_i+0xec>
 800dd30:	681e      	ldr	r6, [r3, #0]
 800dd32:	e002      	b.n	800dd3a <_printf_i+0xf2>
 800dd34:	0646      	lsls	r6, r0, #25
 800dd36:	d5fb      	bpl.n	800dd30 <_printf_i+0xe8>
 800dd38:	881e      	ldrh	r6, [r3, #0]
 800dd3a:	4854      	ldr	r0, [pc, #336]	; (800de8c <_printf_i+0x244>)
 800dd3c:	2f6f      	cmp	r7, #111	; 0x6f
 800dd3e:	bf0c      	ite	eq
 800dd40:	2308      	moveq	r3, #8
 800dd42:	230a      	movne	r3, #10
 800dd44:	2100      	movs	r1, #0
 800dd46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dd4a:	6865      	ldr	r5, [r4, #4]
 800dd4c:	60a5      	str	r5, [r4, #8]
 800dd4e:	2d00      	cmp	r5, #0
 800dd50:	bfa2      	ittt	ge
 800dd52:	6821      	ldrge	r1, [r4, #0]
 800dd54:	f021 0104 	bicge.w	r1, r1, #4
 800dd58:	6021      	strge	r1, [r4, #0]
 800dd5a:	b90e      	cbnz	r6, 800dd60 <_printf_i+0x118>
 800dd5c:	2d00      	cmp	r5, #0
 800dd5e:	d04d      	beq.n	800ddfc <_printf_i+0x1b4>
 800dd60:	4615      	mov	r5, r2
 800dd62:	fbb6 f1f3 	udiv	r1, r6, r3
 800dd66:	fb03 6711 	mls	r7, r3, r1, r6
 800dd6a:	5dc7      	ldrb	r7, [r0, r7]
 800dd6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dd70:	4637      	mov	r7, r6
 800dd72:	42bb      	cmp	r3, r7
 800dd74:	460e      	mov	r6, r1
 800dd76:	d9f4      	bls.n	800dd62 <_printf_i+0x11a>
 800dd78:	2b08      	cmp	r3, #8
 800dd7a:	d10b      	bne.n	800dd94 <_printf_i+0x14c>
 800dd7c:	6823      	ldr	r3, [r4, #0]
 800dd7e:	07de      	lsls	r6, r3, #31
 800dd80:	d508      	bpl.n	800dd94 <_printf_i+0x14c>
 800dd82:	6923      	ldr	r3, [r4, #16]
 800dd84:	6861      	ldr	r1, [r4, #4]
 800dd86:	4299      	cmp	r1, r3
 800dd88:	bfde      	ittt	le
 800dd8a:	2330      	movle	r3, #48	; 0x30
 800dd8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dd94:	1b52      	subs	r2, r2, r5
 800dd96:	6122      	str	r2, [r4, #16]
 800dd98:	f8cd a000 	str.w	sl, [sp]
 800dd9c:	464b      	mov	r3, r9
 800dd9e:	aa03      	add	r2, sp, #12
 800dda0:	4621      	mov	r1, r4
 800dda2:	4640      	mov	r0, r8
 800dda4:	f7ff fee2 	bl	800db6c <_printf_common>
 800dda8:	3001      	adds	r0, #1
 800ddaa:	d14c      	bne.n	800de46 <_printf_i+0x1fe>
 800ddac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddb0:	b004      	add	sp, #16
 800ddb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddb6:	4835      	ldr	r0, [pc, #212]	; (800de8c <_printf_i+0x244>)
 800ddb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ddbc:	6829      	ldr	r1, [r5, #0]
 800ddbe:	6823      	ldr	r3, [r4, #0]
 800ddc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ddc4:	6029      	str	r1, [r5, #0]
 800ddc6:	061d      	lsls	r5, r3, #24
 800ddc8:	d514      	bpl.n	800ddf4 <_printf_i+0x1ac>
 800ddca:	07df      	lsls	r7, r3, #31
 800ddcc:	bf44      	itt	mi
 800ddce:	f043 0320 	orrmi.w	r3, r3, #32
 800ddd2:	6023      	strmi	r3, [r4, #0]
 800ddd4:	b91e      	cbnz	r6, 800ddde <_printf_i+0x196>
 800ddd6:	6823      	ldr	r3, [r4, #0]
 800ddd8:	f023 0320 	bic.w	r3, r3, #32
 800dddc:	6023      	str	r3, [r4, #0]
 800ddde:	2310      	movs	r3, #16
 800dde0:	e7b0      	b.n	800dd44 <_printf_i+0xfc>
 800dde2:	6823      	ldr	r3, [r4, #0]
 800dde4:	f043 0320 	orr.w	r3, r3, #32
 800dde8:	6023      	str	r3, [r4, #0]
 800ddea:	2378      	movs	r3, #120	; 0x78
 800ddec:	4828      	ldr	r0, [pc, #160]	; (800de90 <_printf_i+0x248>)
 800ddee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ddf2:	e7e3      	b.n	800ddbc <_printf_i+0x174>
 800ddf4:	0659      	lsls	r1, r3, #25
 800ddf6:	bf48      	it	mi
 800ddf8:	b2b6      	uxthmi	r6, r6
 800ddfa:	e7e6      	b.n	800ddca <_printf_i+0x182>
 800ddfc:	4615      	mov	r5, r2
 800ddfe:	e7bb      	b.n	800dd78 <_printf_i+0x130>
 800de00:	682b      	ldr	r3, [r5, #0]
 800de02:	6826      	ldr	r6, [r4, #0]
 800de04:	6961      	ldr	r1, [r4, #20]
 800de06:	1d18      	adds	r0, r3, #4
 800de08:	6028      	str	r0, [r5, #0]
 800de0a:	0635      	lsls	r5, r6, #24
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	d501      	bpl.n	800de14 <_printf_i+0x1cc>
 800de10:	6019      	str	r1, [r3, #0]
 800de12:	e002      	b.n	800de1a <_printf_i+0x1d2>
 800de14:	0670      	lsls	r0, r6, #25
 800de16:	d5fb      	bpl.n	800de10 <_printf_i+0x1c8>
 800de18:	8019      	strh	r1, [r3, #0]
 800de1a:	2300      	movs	r3, #0
 800de1c:	6123      	str	r3, [r4, #16]
 800de1e:	4615      	mov	r5, r2
 800de20:	e7ba      	b.n	800dd98 <_printf_i+0x150>
 800de22:	682b      	ldr	r3, [r5, #0]
 800de24:	1d1a      	adds	r2, r3, #4
 800de26:	602a      	str	r2, [r5, #0]
 800de28:	681d      	ldr	r5, [r3, #0]
 800de2a:	6862      	ldr	r2, [r4, #4]
 800de2c:	2100      	movs	r1, #0
 800de2e:	4628      	mov	r0, r5
 800de30:	f7f2 fa66 	bl	8000300 <memchr>
 800de34:	b108      	cbz	r0, 800de3a <_printf_i+0x1f2>
 800de36:	1b40      	subs	r0, r0, r5
 800de38:	6060      	str	r0, [r4, #4]
 800de3a:	6863      	ldr	r3, [r4, #4]
 800de3c:	6123      	str	r3, [r4, #16]
 800de3e:	2300      	movs	r3, #0
 800de40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de44:	e7a8      	b.n	800dd98 <_printf_i+0x150>
 800de46:	6923      	ldr	r3, [r4, #16]
 800de48:	462a      	mov	r2, r5
 800de4a:	4649      	mov	r1, r9
 800de4c:	4640      	mov	r0, r8
 800de4e:	47d0      	blx	sl
 800de50:	3001      	adds	r0, #1
 800de52:	d0ab      	beq.n	800ddac <_printf_i+0x164>
 800de54:	6823      	ldr	r3, [r4, #0]
 800de56:	079b      	lsls	r3, r3, #30
 800de58:	d413      	bmi.n	800de82 <_printf_i+0x23a>
 800de5a:	68e0      	ldr	r0, [r4, #12]
 800de5c:	9b03      	ldr	r3, [sp, #12]
 800de5e:	4298      	cmp	r0, r3
 800de60:	bfb8      	it	lt
 800de62:	4618      	movlt	r0, r3
 800de64:	e7a4      	b.n	800ddb0 <_printf_i+0x168>
 800de66:	2301      	movs	r3, #1
 800de68:	4632      	mov	r2, r6
 800de6a:	4649      	mov	r1, r9
 800de6c:	4640      	mov	r0, r8
 800de6e:	47d0      	blx	sl
 800de70:	3001      	adds	r0, #1
 800de72:	d09b      	beq.n	800ddac <_printf_i+0x164>
 800de74:	3501      	adds	r5, #1
 800de76:	68e3      	ldr	r3, [r4, #12]
 800de78:	9903      	ldr	r1, [sp, #12]
 800de7a:	1a5b      	subs	r3, r3, r1
 800de7c:	42ab      	cmp	r3, r5
 800de7e:	dcf2      	bgt.n	800de66 <_printf_i+0x21e>
 800de80:	e7eb      	b.n	800de5a <_printf_i+0x212>
 800de82:	2500      	movs	r5, #0
 800de84:	f104 0619 	add.w	r6, r4, #25
 800de88:	e7f5      	b.n	800de76 <_printf_i+0x22e>
 800de8a:	bf00      	nop
 800de8c:	0802232d 	.word	0x0802232d
 800de90:	0802233e 	.word	0x0802233e

0800de94 <__retarget_lock_acquire_recursive>:
 800de94:	4770      	bx	lr

0800de96 <__retarget_lock_release_recursive>:
 800de96:	4770      	bx	lr

0800de98 <memmove>:
 800de98:	4288      	cmp	r0, r1
 800de9a:	b510      	push	{r4, lr}
 800de9c:	eb01 0402 	add.w	r4, r1, r2
 800dea0:	d902      	bls.n	800dea8 <memmove+0x10>
 800dea2:	4284      	cmp	r4, r0
 800dea4:	4623      	mov	r3, r4
 800dea6:	d807      	bhi.n	800deb8 <memmove+0x20>
 800dea8:	1e43      	subs	r3, r0, #1
 800deaa:	42a1      	cmp	r1, r4
 800deac:	d008      	beq.n	800dec0 <memmove+0x28>
 800deae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800deb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800deb6:	e7f8      	b.n	800deaa <memmove+0x12>
 800deb8:	4402      	add	r2, r0
 800deba:	4601      	mov	r1, r0
 800debc:	428a      	cmp	r2, r1
 800debe:	d100      	bne.n	800dec2 <memmove+0x2a>
 800dec0:	bd10      	pop	{r4, pc}
 800dec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800deca:	e7f7      	b.n	800debc <memmove+0x24>

0800decc <_malloc_usable_size_r>:
 800decc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ded0:	1f18      	subs	r0, r3, #4
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	bfbc      	itt	lt
 800ded6:	580b      	ldrlt	r3, [r1, r0]
 800ded8:	18c0      	addlt	r0, r0, r3
 800deda:	4770      	bx	lr

0800dedc <with_errnof>:
 800dedc:	b513      	push	{r0, r1, r4, lr}
 800dede:	4604      	mov	r4, r0
 800dee0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800dee4:	f7ff fb5c 	bl	800d5a0 <__errno>
 800dee8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800deec:	6004      	str	r4, [r0, #0]
 800deee:	b002      	add	sp, #8
 800def0:	bd10      	pop	{r4, pc}

0800def2 <xflowf>:
 800def2:	b130      	cbz	r0, 800df02 <xflowf+0x10>
 800def4:	eef1 7a40 	vneg.f32	s15, s0
 800def8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800defc:	2022      	movs	r0, #34	; 0x22
 800defe:	f7ff bfed 	b.w	800dedc <with_errnof>
 800df02:	eef0 7a40 	vmov.f32	s15, s0
 800df06:	e7f7      	b.n	800def8 <xflowf+0x6>

0800df08 <__math_uflowf>:
 800df08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800df10 <__math_uflowf+0x8>
 800df0c:	f7ff bff1 	b.w	800def2 <xflowf>
 800df10:	10000000 	.word	0x10000000

0800df14 <__math_may_uflowf>:
 800df14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800df1c <__math_may_uflowf+0x8>
 800df18:	f7ff bfeb 	b.w	800def2 <xflowf>
 800df1c:	1a200000 	.word	0x1a200000

0800df20 <__math_oflowf>:
 800df20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800df28 <__math_oflowf+0x8>
 800df24:	f7ff bfe5 	b.w	800def2 <xflowf>
 800df28:	70000000 	.word	0x70000000

0800df2c <__math_divzerof>:
 800df2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800df30:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800df34:	2800      	cmp	r0, #0
 800df36:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800df3a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800df48 <__math_divzerof+0x1c>
 800df3e:	2022      	movs	r0, #34	; 0x22
 800df40:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800df44:	f7ff bfca 	b.w	800dedc <with_errnof>
 800df48:	00000000 	.word	0x00000000

0800df4c <__math_invalidf>:
 800df4c:	eef0 7a40 	vmov.f32	s15, s0
 800df50:	ee30 7a40 	vsub.f32	s14, s0, s0
 800df54:	eef4 7a67 	vcmp.f32	s15, s15
 800df58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df5c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800df60:	d602      	bvs.n	800df68 <__math_invalidf+0x1c>
 800df62:	2021      	movs	r0, #33	; 0x21
 800df64:	f7ff bfba 	b.w	800dedc <with_errnof>
 800df68:	4770      	bx	lr
 800df6a:	0000      	movs	r0, r0
 800df6c:	0000      	movs	r0, r0
	...

0800df70 <cos>:
 800df70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800df72:	eeb0 7b40 	vmov.f64	d7, d0
 800df76:	ee17 3a90 	vmov	r3, s15
 800df7a:	4a21      	ldr	r2, [pc, #132]	; (800e000 <cos+0x90>)
 800df7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df80:	4293      	cmp	r3, r2
 800df82:	dc06      	bgt.n	800df92 <cos+0x22>
 800df84:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800dff8 <cos+0x88>
 800df88:	b005      	add	sp, #20
 800df8a:	f85d eb04 	ldr.w	lr, [sp], #4
 800df8e:	f000 ba7b 	b.w	800e488 <__kernel_cos>
 800df92:	4a1c      	ldr	r2, [pc, #112]	; (800e004 <cos+0x94>)
 800df94:	4293      	cmp	r3, r2
 800df96:	dd04      	ble.n	800dfa2 <cos+0x32>
 800df98:	ee30 0b40 	vsub.f64	d0, d0, d0
 800df9c:	b005      	add	sp, #20
 800df9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfa2:	4668      	mov	r0, sp
 800dfa4:	f000 f928 	bl	800e1f8 <__ieee754_rem_pio2>
 800dfa8:	f000 0003 	and.w	r0, r0, #3
 800dfac:	2801      	cmp	r0, #1
 800dfae:	d009      	beq.n	800dfc4 <cos+0x54>
 800dfb0:	2802      	cmp	r0, #2
 800dfb2:	d010      	beq.n	800dfd6 <cos+0x66>
 800dfb4:	b9b0      	cbnz	r0, 800dfe4 <cos+0x74>
 800dfb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dfba:	ed9d 0b00 	vldr	d0, [sp]
 800dfbe:	f000 fa63 	bl	800e488 <__kernel_cos>
 800dfc2:	e7eb      	b.n	800df9c <cos+0x2c>
 800dfc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dfc8:	ed9d 0b00 	vldr	d0, [sp]
 800dfcc:	f000 fd60 	bl	800ea90 <__kernel_sin>
 800dfd0:	eeb1 0b40 	vneg.f64	d0, d0
 800dfd4:	e7e2      	b.n	800df9c <cos+0x2c>
 800dfd6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dfda:	ed9d 0b00 	vldr	d0, [sp]
 800dfde:	f000 fa53 	bl	800e488 <__kernel_cos>
 800dfe2:	e7f5      	b.n	800dfd0 <cos+0x60>
 800dfe4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dfe8:	ed9d 0b00 	vldr	d0, [sp]
 800dfec:	2001      	movs	r0, #1
 800dfee:	f000 fd4f 	bl	800ea90 <__kernel_sin>
 800dff2:	e7d3      	b.n	800df9c <cos+0x2c>
 800dff4:	f3af 8000 	nop.w
	...
 800e000:	3fe921fb 	.word	0x3fe921fb
 800e004:	7fefffff 	.word	0x7fefffff

0800e008 <expf>:
 800e008:	ee10 2a10 	vmov	r2, s0
 800e00c:	f240 412a 	movw	r1, #1066	; 0x42a
 800e010:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800e014:	428b      	cmp	r3, r1
 800e016:	b430      	push	{r4, r5}
 800e018:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800e01c:	d92a      	bls.n	800e074 <expf+0x6c>
 800e01e:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800e022:	d058      	beq.n	800e0d6 <expf+0xce>
 800e024:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800e028:	d303      	bcc.n	800e032 <expf+0x2a>
 800e02a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e02e:	bc30      	pop	{r4, r5}
 800e030:	4770      	bx	lr
 800e032:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800e0dc <expf+0xd4>
 800e036:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e03e:	dd03      	ble.n	800e048 <expf+0x40>
 800e040:	bc30      	pop	{r4, r5}
 800e042:	2000      	movs	r0, #0
 800e044:	f7ff bf6c 	b.w	800df20 <__math_oflowf>
 800e048:	eddf 7a25 	vldr	s15, [pc, #148]	; 800e0e0 <expf+0xd8>
 800e04c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e054:	d503      	bpl.n	800e05e <expf+0x56>
 800e056:	bc30      	pop	{r4, r5}
 800e058:	2000      	movs	r0, #0
 800e05a:	f7ff bf55 	b.w	800df08 <__math_uflowf>
 800e05e:	eddf 7a21 	vldr	s15, [pc, #132]	; 800e0e4 <expf+0xdc>
 800e062:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e06a:	d503      	bpl.n	800e074 <expf+0x6c>
 800e06c:	bc30      	pop	{r4, r5}
 800e06e:	2000      	movs	r0, #0
 800e070:	f7ff bf50 	b.w	800df14 <__math_may_uflowf>
 800e074:	4b1c      	ldr	r3, [pc, #112]	; (800e0e8 <expf+0xe0>)
 800e076:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e07a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800e07e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800e082:	eeb0 7b44 	vmov.f64	d7, d4
 800e086:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e08a:	ee17 0a10 	vmov	r0, s14
 800e08e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e092:	f000 021f 	and.w	r2, r0, #31
 800e096:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800e09a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800e09e:	ee27 4b07 	vmul.f64	d4, d7, d7
 800e0a2:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800e0a6:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800e0aa:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e0ae:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800e0b2:	684d      	ldr	r5, [r1, #4]
 800e0b4:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	190a      	adds	r2, r1, r4
 800e0bc:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800e0c0:	eea5 0b07 	vfma.f64	d0, d5, d7
 800e0c4:	ec43 2b17 	vmov	d7, r2, r3
 800e0c8:	eea6 0b04 	vfma.f64	d0, d6, d4
 800e0cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e0d0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e0d4:	e7ab      	b.n	800e02e <expf+0x26>
 800e0d6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800e0ec <expf+0xe4>
 800e0da:	e7a8      	b.n	800e02e <expf+0x26>
 800e0dc:	42b17217 	.word	0x42b17217
 800e0e0:	c2cff1b4 	.word	0xc2cff1b4
 800e0e4:	c2ce8ecf 	.word	0xc2ce8ecf
 800e0e8:	08022350 	.word	0x08022350
 800e0ec:	00000000 	.word	0x00000000

0800e0f0 <logf>:
 800e0f0:	ee10 3a10 	vmov	r3, s0
 800e0f4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e0f8:	b410      	push	{r4}
 800e0fa:	d055      	beq.n	800e1a8 <logf+0xb8>
 800e0fc:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800e100:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800e104:	d31a      	bcc.n	800e13c <logf+0x4c>
 800e106:	005a      	lsls	r2, r3, #1
 800e108:	d104      	bne.n	800e114 <logf+0x24>
 800e10a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e10e:	2001      	movs	r0, #1
 800e110:	f7ff bf0c 	b.w	800df2c <__math_divzerof>
 800e114:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e118:	d043      	beq.n	800e1a2 <logf+0xb2>
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	db02      	blt.n	800e124 <logf+0x34>
 800e11e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800e122:	d303      	bcc.n	800e12c <logf+0x3c>
 800e124:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e128:	f7ff bf10 	b.w	800df4c <__math_invalidf>
 800e12c:	eddf 7a20 	vldr	s15, [pc, #128]	; 800e1b0 <logf+0xc0>
 800e130:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e134:	ee10 3a10 	vmov	r3, s0
 800e138:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800e13c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800e140:	491c      	ldr	r1, [pc, #112]	; (800e1b4 <logf+0xc4>)
 800e142:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800e146:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800e14a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800e14e:	0dd4      	lsrs	r4, r2, #23
 800e150:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800e154:	05e4      	lsls	r4, r4, #23
 800e156:	ed90 6b00 	vldr	d6, [r0]
 800e15a:	1b1b      	subs	r3, r3, r4
 800e15c:	ee07 3a90 	vmov	s15, r3
 800e160:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800e164:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800e168:	15d2      	asrs	r2, r2, #23
 800e16a:	eea6 0b07 	vfma.f64	d0, d6, d7
 800e16e:	ed90 6b02 	vldr	d6, [r0, #8]
 800e172:	ee20 4b00 	vmul.f64	d4, d0, d0
 800e176:	ee07 2a90 	vmov	s15, r2
 800e17a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e17e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e182:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 800e186:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800e18a:	eea5 7b00 	vfma.f64	d7, d5, d0
 800e18e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800e192:	ee30 0b06 	vadd.f64	d0, d0, d6
 800e196:	eea5 7b04 	vfma.f64	d7, d5, d4
 800e19a:	eea4 0b07 	vfma.f64	d0, d4, d7
 800e19e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e1a6:	4770      	bx	lr
 800e1a8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800e1b8 <logf+0xc8>
 800e1ac:	e7f9      	b.n	800e1a2 <logf+0xb2>
 800e1ae:	bf00      	nop
 800e1b0:	4b000000 	.word	0x4b000000
 800e1b4:	08022498 	.word	0x08022498
 800e1b8:	00000000 	.word	0x00000000

0800e1bc <sqrtf>:
 800e1bc:	b508      	push	{r3, lr}
 800e1be:	ed2d 8b02 	vpush	{d8}
 800e1c2:	eeb0 8a40 	vmov.f32	s16, s0
 800e1c6:	f000 f95b 	bl	800e480 <__ieee754_sqrtf>
 800e1ca:	eeb4 8a48 	vcmp.f32	s16, s16
 800e1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d2:	d60c      	bvs.n	800e1ee <sqrtf+0x32>
 800e1d4:	eddf 8a07 	vldr	s17, [pc, #28]	; 800e1f4 <sqrtf+0x38>
 800e1d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e0:	d505      	bpl.n	800e1ee <sqrtf+0x32>
 800e1e2:	f7ff f9dd 	bl	800d5a0 <__errno>
 800e1e6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e1ea:	2321      	movs	r3, #33	; 0x21
 800e1ec:	6003      	str	r3, [r0, #0]
 800e1ee:	ecbd 8b02 	vpop	{d8}
 800e1f2:	bd08      	pop	{r3, pc}
 800e1f4:	00000000 	.word	0x00000000

0800e1f8 <__ieee754_rem_pio2>:
 800e1f8:	b570      	push	{r4, r5, r6, lr}
 800e1fa:	eeb0 7b40 	vmov.f64	d7, d0
 800e1fe:	ee17 5a90 	vmov	r5, s15
 800e202:	4b99      	ldr	r3, [pc, #612]	; (800e468 <__ieee754_rem_pio2+0x270>)
 800e204:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e208:	429e      	cmp	r6, r3
 800e20a:	b088      	sub	sp, #32
 800e20c:	4604      	mov	r4, r0
 800e20e:	dc07      	bgt.n	800e220 <__ieee754_rem_pio2+0x28>
 800e210:	2200      	movs	r2, #0
 800e212:	2300      	movs	r3, #0
 800e214:	ed84 0b00 	vstr	d0, [r4]
 800e218:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e21c:	2000      	movs	r0, #0
 800e21e:	e01b      	b.n	800e258 <__ieee754_rem_pio2+0x60>
 800e220:	4b92      	ldr	r3, [pc, #584]	; (800e46c <__ieee754_rem_pio2+0x274>)
 800e222:	429e      	cmp	r6, r3
 800e224:	dc3b      	bgt.n	800e29e <__ieee754_rem_pio2+0xa6>
 800e226:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800e22a:	2d00      	cmp	r5, #0
 800e22c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800e428 <__ieee754_rem_pio2+0x230>
 800e230:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800e234:	dd19      	ble.n	800e26a <__ieee754_rem_pio2+0x72>
 800e236:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e23a:	429e      	cmp	r6, r3
 800e23c:	d00e      	beq.n	800e25c <__ieee754_rem_pio2+0x64>
 800e23e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800e430 <__ieee754_rem_pio2+0x238>
 800e242:	ee37 5b46 	vsub.f64	d5, d7, d6
 800e246:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e24a:	ed84 5b00 	vstr	d5, [r4]
 800e24e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e252:	ed84 7b02 	vstr	d7, [r4, #8]
 800e256:	2001      	movs	r0, #1
 800e258:	b008      	add	sp, #32
 800e25a:	bd70      	pop	{r4, r5, r6, pc}
 800e25c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800e438 <__ieee754_rem_pio2+0x240>
 800e260:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e264:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800e440 <__ieee754_rem_pio2+0x248>
 800e268:	e7eb      	b.n	800e242 <__ieee754_rem_pio2+0x4a>
 800e26a:	429e      	cmp	r6, r3
 800e26c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e270:	d00e      	beq.n	800e290 <__ieee754_rem_pio2+0x98>
 800e272:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800e430 <__ieee754_rem_pio2+0x238>
 800e276:	ee37 5b06 	vadd.f64	d5, d7, d6
 800e27a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e27e:	ed84 5b00 	vstr	d5, [r4]
 800e282:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e28a:	ed84 7b02 	vstr	d7, [r4, #8]
 800e28e:	e7e3      	b.n	800e258 <__ieee754_rem_pio2+0x60>
 800e290:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e438 <__ieee754_rem_pio2+0x240>
 800e294:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e298:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e440 <__ieee754_rem_pio2+0x248>
 800e29c:	e7eb      	b.n	800e276 <__ieee754_rem_pio2+0x7e>
 800e29e:	4b74      	ldr	r3, [pc, #464]	; (800e470 <__ieee754_rem_pio2+0x278>)
 800e2a0:	429e      	cmp	r6, r3
 800e2a2:	dc70      	bgt.n	800e386 <__ieee754_rem_pio2+0x18e>
 800e2a4:	f000 fc4c 	bl	800eb40 <fabs>
 800e2a8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e2ac:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800e448 <__ieee754_rem_pio2+0x250>
 800e2b0:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e2b4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e2b8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e2bc:	ee17 0a90 	vmov	r0, s15
 800e2c0:	eeb1 4b45 	vneg.f64	d4, d5
 800e2c4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800e428 <__ieee754_rem_pio2+0x230>
 800e2c8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e2cc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800e430 <__ieee754_rem_pio2+0x238>
 800e2d0:	281f      	cmp	r0, #31
 800e2d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e2d6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e2da:	dc08      	bgt.n	800e2ee <__ieee754_rem_pio2+0xf6>
 800e2dc:	4b65      	ldr	r3, [pc, #404]	; (800e474 <__ieee754_rem_pio2+0x27c>)
 800e2de:	1e42      	subs	r2, r0, #1
 800e2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2e4:	42b3      	cmp	r3, r6
 800e2e6:	d002      	beq.n	800e2ee <__ieee754_rem_pio2+0xf6>
 800e2e8:	ed84 6b00 	vstr	d6, [r4]
 800e2ec:	e026      	b.n	800e33c <__ieee754_rem_pio2+0x144>
 800e2ee:	ee16 3a90 	vmov	r3, s13
 800e2f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e2f6:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e2fa:	2b10      	cmp	r3, #16
 800e2fc:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e300:	ddf2      	ble.n	800e2e8 <__ieee754_rem_pio2+0xf0>
 800e302:	eeb0 6b40 	vmov.f64	d6, d0
 800e306:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 800e438 <__ieee754_rem_pio2+0x240>
 800e30a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 800e440 <__ieee754_rem_pio2+0x248>
 800e30e:	eea4 6b07 	vfma.f64	d6, d4, d7
 800e312:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e316:	eea4 0b07 	vfma.f64	d0, d4, d7
 800e31a:	eeb0 7b40 	vmov.f64	d7, d0
 800e31e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e322:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e326:	ee13 3a90 	vmov	r3, s7
 800e32a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e32e:	1ad3      	subs	r3, r2, r3
 800e330:	2b31      	cmp	r3, #49	; 0x31
 800e332:	dc17      	bgt.n	800e364 <__ieee754_rem_pio2+0x16c>
 800e334:	eeb0 0b46 	vmov.f64	d0, d6
 800e338:	ed84 3b00 	vstr	d3, [r4]
 800e33c:	ed94 6b00 	vldr	d6, [r4]
 800e340:	2d00      	cmp	r5, #0
 800e342:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e346:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e34a:	ed84 0b02 	vstr	d0, [r4, #8]
 800e34e:	da83      	bge.n	800e258 <__ieee754_rem_pio2+0x60>
 800e350:	eeb1 6b46 	vneg.f64	d6, d6
 800e354:	eeb1 0b40 	vneg.f64	d0, d0
 800e358:	ed84 6b00 	vstr	d6, [r4]
 800e35c:	ed84 0b02 	vstr	d0, [r4, #8]
 800e360:	4240      	negs	r0, r0
 800e362:	e779      	b.n	800e258 <__ieee754_rem_pio2+0x60>
 800e364:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 800e450 <__ieee754_rem_pio2+0x258>
 800e368:	eeb0 0b46 	vmov.f64	d0, d6
 800e36c:	eea4 0b03 	vfma.f64	d0, d4, d3
 800e370:	ee36 7b40 	vsub.f64	d7, d6, d0
 800e374:	ed9f 6b38 	vldr	d6, [pc, #224]	; 800e458 <__ieee754_rem_pio2+0x260>
 800e378:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e37c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800e380:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e384:	e7b0      	b.n	800e2e8 <__ieee754_rem_pio2+0xf0>
 800e386:	4b3c      	ldr	r3, [pc, #240]	; (800e478 <__ieee754_rem_pio2+0x280>)
 800e388:	429e      	cmp	r6, r3
 800e38a:	dd06      	ble.n	800e39a <__ieee754_rem_pio2+0x1a2>
 800e38c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e390:	ed80 7b02 	vstr	d7, [r0, #8]
 800e394:	ed80 7b00 	vstr	d7, [r0]
 800e398:	e740      	b.n	800e21c <__ieee754_rem_pio2+0x24>
 800e39a:	1532      	asrs	r2, r6, #20
 800e39c:	ee10 0a10 	vmov	r0, s0
 800e3a0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800e3a4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e3a8:	ec41 0b17 	vmov	d7, r0, r1
 800e3ac:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e3b0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800e460 <__ieee754_rem_pio2+0x268>
 800e3b4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e3b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e3bc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e3c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e3c4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e3c8:	a902      	add	r1, sp, #8
 800e3ca:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e3ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e3d2:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e3d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e3da:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e3de:	2603      	movs	r6, #3
 800e3e0:	4608      	mov	r0, r1
 800e3e2:	ed91 7b04 	vldr	d7, [r1, #16]
 800e3e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ee:	4633      	mov	r3, r6
 800e3f0:	f1a1 0108 	sub.w	r1, r1, #8
 800e3f4:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 800e3f8:	d0f3      	beq.n	800e3e2 <__ieee754_rem_pio2+0x1ea>
 800e3fa:	4920      	ldr	r1, [pc, #128]	; (800e47c <__ieee754_rem_pio2+0x284>)
 800e3fc:	9101      	str	r1, [sp, #4]
 800e3fe:	2102      	movs	r1, #2
 800e400:	9100      	str	r1, [sp, #0]
 800e402:	4621      	mov	r1, r4
 800e404:	f000 f8ac 	bl	800e560 <__kernel_rem_pio2>
 800e408:	2d00      	cmp	r5, #0
 800e40a:	f6bf af25 	bge.w	800e258 <__ieee754_rem_pio2+0x60>
 800e40e:	ed94 7b00 	vldr	d7, [r4]
 800e412:	eeb1 7b47 	vneg.f64	d7, d7
 800e416:	ed84 7b00 	vstr	d7, [r4]
 800e41a:	ed94 7b02 	vldr	d7, [r4, #8]
 800e41e:	eeb1 7b47 	vneg.f64	d7, d7
 800e422:	ed84 7b02 	vstr	d7, [r4, #8]
 800e426:	e79b      	b.n	800e360 <__ieee754_rem_pio2+0x168>
 800e428:	54400000 	.word	0x54400000
 800e42c:	3ff921fb 	.word	0x3ff921fb
 800e430:	1a626331 	.word	0x1a626331
 800e434:	3dd0b461 	.word	0x3dd0b461
 800e438:	1a600000 	.word	0x1a600000
 800e43c:	3dd0b461 	.word	0x3dd0b461
 800e440:	2e037073 	.word	0x2e037073
 800e444:	3ba3198a 	.word	0x3ba3198a
 800e448:	6dc9c883 	.word	0x6dc9c883
 800e44c:	3fe45f30 	.word	0x3fe45f30
 800e450:	2e000000 	.word	0x2e000000
 800e454:	3ba3198a 	.word	0x3ba3198a
 800e458:	252049c1 	.word	0x252049c1
 800e45c:	397b839a 	.word	0x397b839a
 800e460:	00000000 	.word	0x00000000
 800e464:	41700000 	.word	0x41700000
 800e468:	3fe921fb 	.word	0x3fe921fb
 800e46c:	4002d97b 	.word	0x4002d97b
 800e470:	413921fb 	.word	0x413921fb
 800e474:	080225b8 	.word	0x080225b8
 800e478:	7fefffff 	.word	0x7fefffff
 800e47c:	08022638 	.word	0x08022638

0800e480 <__ieee754_sqrtf>:
 800e480:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e484:	4770      	bx	lr
	...

0800e488 <__kernel_cos>:
 800e488:	ee10 1a90 	vmov	r1, s1
 800e48c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e490:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e494:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800e498:	da05      	bge.n	800e4a6 <__kernel_cos+0x1e>
 800e49a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e49e:	ee17 3a90 	vmov	r3, s15
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d03d      	beq.n	800e522 <__kernel_cos+0x9a>
 800e4a6:	ee20 3b00 	vmul.f64	d3, d0, d0
 800e4aa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800e528 <__kernel_cos+0xa0>
 800e4ae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e530 <__kernel_cos+0xa8>
 800e4b2:	eea3 6b07 	vfma.f64	d6, d3, d7
 800e4b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e538 <__kernel_cos+0xb0>
 800e4ba:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e4be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800e540 <__kernel_cos+0xb8>
 800e4c2:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e4c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800e548 <__kernel_cos+0xc0>
 800e4ca:	4b23      	ldr	r3, [pc, #140]	; (800e558 <__kernel_cos+0xd0>)
 800e4cc:	eea6 7b03 	vfma.f64	d7, d6, d3
 800e4d0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800e550 <__kernel_cos+0xc8>
 800e4d4:	4299      	cmp	r1, r3
 800e4d6:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e4da:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e4de:	ee26 5b03 	vmul.f64	d5, d6, d3
 800e4e2:	ee23 7b07 	vmul.f64	d7, d3, d7
 800e4e6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800e4ea:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e4ee:	dc04      	bgt.n	800e4fa <__kernel_cos+0x72>
 800e4f0:	ee37 6b46 	vsub.f64	d6, d7, d6
 800e4f4:	ee34 0b46 	vsub.f64	d0, d4, d6
 800e4f8:	4770      	bx	lr
 800e4fa:	4b18      	ldr	r3, [pc, #96]	; (800e55c <__kernel_cos+0xd4>)
 800e4fc:	4299      	cmp	r1, r3
 800e4fe:	dc0d      	bgt.n	800e51c <__kernel_cos+0x94>
 800e500:	2200      	movs	r2, #0
 800e502:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800e506:	ec43 2b15 	vmov	d5, r2, r3
 800e50a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800e50e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e512:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e516:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e51a:	4770      	bx	lr
 800e51c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800e520:	e7f3      	b.n	800e50a <__kernel_cos+0x82>
 800e522:	eeb0 0b44 	vmov.f64	d0, d4
 800e526:	4770      	bx	lr
 800e528:	be8838d4 	.word	0xbe8838d4
 800e52c:	bda8fae9 	.word	0xbda8fae9
 800e530:	bdb4b1c4 	.word	0xbdb4b1c4
 800e534:	3e21ee9e 	.word	0x3e21ee9e
 800e538:	809c52ad 	.word	0x809c52ad
 800e53c:	be927e4f 	.word	0xbe927e4f
 800e540:	19cb1590 	.word	0x19cb1590
 800e544:	3efa01a0 	.word	0x3efa01a0
 800e548:	16c15177 	.word	0x16c15177
 800e54c:	bf56c16c 	.word	0xbf56c16c
 800e550:	5555554c 	.word	0x5555554c
 800e554:	3fa55555 	.word	0x3fa55555
 800e558:	3fd33332 	.word	0x3fd33332
 800e55c:	3fe90000 	.word	0x3fe90000

0800e560 <__kernel_rem_pio2>:
 800e560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e564:	ed2d 8b06 	vpush	{d8-d10}
 800e568:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800e56c:	460f      	mov	r7, r1
 800e56e:	9002      	str	r0, [sp, #8]
 800e570:	49c5      	ldr	r1, [pc, #788]	; (800e888 <__kernel_rem_pio2+0x328>)
 800e572:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800e574:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 800e578:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800e57c:	9301      	str	r3, [sp, #4]
 800e57e:	f112 0f14 	cmn.w	r2, #20
 800e582:	bfa8      	it	ge
 800e584:	2018      	movge	r0, #24
 800e586:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800e58a:	bfb8      	it	lt
 800e58c:	2000      	movlt	r0, #0
 800e58e:	f06f 0417 	mvn.w	r4, #23
 800e592:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 800e870 <__kernel_rem_pio2+0x310>
 800e596:	bfa4      	itt	ge
 800e598:	f1a2 0a03 	subge.w	sl, r2, #3
 800e59c:	fb9a f0f0 	sdivge	r0, sl, r0
 800e5a0:	fb00 4404 	mla	r4, r0, r4, r4
 800e5a4:	1a46      	subs	r6, r0, r1
 800e5a6:	4414      	add	r4, r2
 800e5a8:	eb09 0c01 	add.w	ip, r9, r1
 800e5ac:	ad1a      	add	r5, sp, #104	; 0x68
 800e5ae:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	4562      	cmp	r2, ip
 800e5b6:	dd10      	ble.n	800e5da <__kernel_rem_pio2+0x7a>
 800e5b8:	9a01      	ldr	r2, [sp, #4]
 800e5ba:	ab1a      	add	r3, sp, #104	; 0x68
 800e5bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800e5c0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 800e5c4:	f04f 0c00 	mov.w	ip, #0
 800e5c8:	45cc      	cmp	ip, r9
 800e5ca:	dc26      	bgt.n	800e61a <__kernel_rem_pio2+0xba>
 800e5cc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 800e870 <__kernel_rem_pio2+0x310>
 800e5d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e5d4:	4616      	mov	r6, r2
 800e5d6:	2500      	movs	r5, #0
 800e5d8:	e015      	b.n	800e606 <__kernel_rem_pio2+0xa6>
 800e5da:	42d6      	cmn	r6, r2
 800e5dc:	d409      	bmi.n	800e5f2 <__kernel_rem_pio2+0x92>
 800e5de:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 800e5e2:	ee07 3a90 	vmov	s15, r3
 800e5e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e5ea:	eca5 7b02 	vstmia	r5!, {d7}
 800e5ee:	3201      	adds	r2, #1
 800e5f0:	e7e0      	b.n	800e5b4 <__kernel_rem_pio2+0x54>
 800e5f2:	eeb0 7b46 	vmov.f64	d7, d6
 800e5f6:	e7f8      	b.n	800e5ea <__kernel_rem_pio2+0x8a>
 800e5f8:	ecb8 5b02 	vldmia	r8!, {d5}
 800e5fc:	ed96 6b00 	vldr	d6, [r6]
 800e600:	3501      	adds	r5, #1
 800e602:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e606:	428d      	cmp	r5, r1
 800e608:	f1a6 0608 	sub.w	r6, r6, #8
 800e60c:	ddf4      	ble.n	800e5f8 <__kernel_rem_pio2+0x98>
 800e60e:	ecaa 7b02 	vstmia	sl!, {d7}
 800e612:	f10c 0c01 	add.w	ip, ip, #1
 800e616:	3208      	adds	r2, #8
 800e618:	e7d6      	b.n	800e5c8 <__kernel_rem_pio2+0x68>
 800e61a:	ab06      	add	r3, sp, #24
 800e61c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800e878 <__kernel_rem_pio2+0x318>
 800e620:	ed9f ab97 	vldr	d10, [pc, #604]	; 800e880 <__kernel_rem_pio2+0x320>
 800e624:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800e628:	9303      	str	r3, [sp, #12]
 800e62a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800e62e:	464d      	mov	r5, r9
 800e630:	00eb      	lsls	r3, r5, #3
 800e632:	9304      	str	r3, [sp, #16]
 800e634:	ab92      	add	r3, sp, #584	; 0x248
 800e636:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e63a:	f10d 0b18 	add.w	fp, sp, #24
 800e63e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800e640:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800e644:	465e      	mov	r6, fp
 800e646:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e64a:	4628      	mov	r0, r5
 800e64c:	2800      	cmp	r0, #0
 800e64e:	f1a2 0208 	sub.w	r2, r2, #8
 800e652:	dc4c      	bgt.n	800e6ee <__kernel_rem_pio2+0x18e>
 800e654:	4620      	mov	r0, r4
 800e656:	9105      	str	r1, [sp, #20]
 800e658:	f000 faf2 	bl	800ec40 <scalbn>
 800e65c:	eeb0 8b40 	vmov.f64	d8, d0
 800e660:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800e664:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e668:	f000 fa76 	bl	800eb58 <floor>
 800e66c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800e670:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e674:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e678:	2c00      	cmp	r4, #0
 800e67a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800e67e:	ee17 8a90 	vmov	r8, s15
 800e682:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e686:	9905      	ldr	r1, [sp, #20]
 800e688:	dd43      	ble.n	800e712 <__kernel_rem_pio2+0x1b2>
 800e68a:	1e68      	subs	r0, r5, #1
 800e68c:	ab06      	add	r3, sp, #24
 800e68e:	f1c4 0c18 	rsb	ip, r4, #24
 800e692:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800e696:	fa46 f20c 	asr.w	r2, r6, ip
 800e69a:	4490      	add	r8, r2
 800e69c:	fa02 f20c 	lsl.w	r2, r2, ip
 800e6a0:	1ab6      	subs	r6, r6, r2
 800e6a2:	f1c4 0217 	rsb	r2, r4, #23
 800e6a6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800e6aa:	4116      	asrs	r6, r2
 800e6ac:	2e00      	cmp	r6, #0
 800e6ae:	dd3f      	ble.n	800e730 <__kernel_rem_pio2+0x1d0>
 800e6b0:	f04f 0c00 	mov.w	ip, #0
 800e6b4:	f108 0801 	add.w	r8, r8, #1
 800e6b8:	4660      	mov	r0, ip
 800e6ba:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800e6be:	4565      	cmp	r5, ip
 800e6c0:	dc6e      	bgt.n	800e7a0 <__kernel_rem_pio2+0x240>
 800e6c2:	2c00      	cmp	r4, #0
 800e6c4:	dd04      	ble.n	800e6d0 <__kernel_rem_pio2+0x170>
 800e6c6:	2c01      	cmp	r4, #1
 800e6c8:	d07f      	beq.n	800e7ca <__kernel_rem_pio2+0x26a>
 800e6ca:	2c02      	cmp	r4, #2
 800e6cc:	f000 8087 	beq.w	800e7de <__kernel_rem_pio2+0x27e>
 800e6d0:	2e02      	cmp	r6, #2
 800e6d2:	d12d      	bne.n	800e730 <__kernel_rem_pio2+0x1d0>
 800e6d4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e6d8:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e6dc:	b340      	cbz	r0, 800e730 <__kernel_rem_pio2+0x1d0>
 800e6de:	4620      	mov	r0, r4
 800e6e0:	9105      	str	r1, [sp, #20]
 800e6e2:	f000 faad 	bl	800ec40 <scalbn>
 800e6e6:	9905      	ldr	r1, [sp, #20]
 800e6e8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e6ec:	e020      	b.n	800e730 <__kernel_rem_pio2+0x1d0>
 800e6ee:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e6f2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e6f6:	3801      	subs	r0, #1
 800e6f8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e6fc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e700:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e704:	eca6 0a01 	vstmia	r6!, {s0}
 800e708:	ed92 0b00 	vldr	d0, [r2]
 800e70c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e710:	e79c      	b.n	800e64c <__kernel_rem_pio2+0xec>
 800e712:	d105      	bne.n	800e720 <__kernel_rem_pio2+0x1c0>
 800e714:	1e6a      	subs	r2, r5, #1
 800e716:	ab06      	add	r3, sp, #24
 800e718:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800e71c:	15f6      	asrs	r6, r6, #23
 800e71e:	e7c5      	b.n	800e6ac <__kernel_rem_pio2+0x14c>
 800e720:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e724:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72c:	da36      	bge.n	800e79c <__kernel_rem_pio2+0x23c>
 800e72e:	2600      	movs	r6, #0
 800e730:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e738:	f040 80aa 	bne.w	800e890 <__kernel_rem_pio2+0x330>
 800e73c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800e740:	4658      	mov	r0, fp
 800e742:	2200      	movs	r2, #0
 800e744:	4548      	cmp	r0, r9
 800e746:	da52      	bge.n	800e7ee <__kernel_rem_pio2+0x28e>
 800e748:	2a00      	cmp	r2, #0
 800e74a:	f000 8081 	beq.w	800e850 <__kernel_rem_pio2+0x2f0>
 800e74e:	ab06      	add	r3, sp, #24
 800e750:	3c18      	subs	r4, #24
 800e752:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e756:	2b00      	cmp	r3, #0
 800e758:	f000 8087 	beq.w	800e86a <__kernel_rem_pio2+0x30a>
 800e75c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e760:	4620      	mov	r0, r4
 800e762:	f000 fa6d 	bl	800ec40 <scalbn>
 800e766:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e76a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 800e878 <__kernel_rem_pio2+0x318>
 800e76e:	a96a      	add	r1, sp, #424	; 0x1a8
 800e770:	f103 0208 	add.w	r2, r3, #8
 800e774:	1888      	adds	r0, r1, r2
 800e776:	4659      	mov	r1, fp
 800e778:	2900      	cmp	r1, #0
 800e77a:	f280 80b7 	bge.w	800e8ec <__kernel_rem_pio2+0x38c>
 800e77e:	4659      	mov	r1, fp
 800e780:	2900      	cmp	r1, #0
 800e782:	f2c0 80d5 	blt.w	800e930 <__kernel_rem_pio2+0x3d0>
 800e786:	a86a      	add	r0, sp, #424	; 0x1a8
 800e788:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800e78c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 800e870 <__kernel_rem_pio2+0x310>
 800e790:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800e88c <__kernel_rem_pio2+0x32c>
 800e794:	2400      	movs	r4, #0
 800e796:	ebab 0001 	sub.w	r0, fp, r1
 800e79a:	e0be      	b.n	800e91a <__kernel_rem_pio2+0x3ba>
 800e79c:	2602      	movs	r6, #2
 800e79e:	e787      	b.n	800e6b0 <__kernel_rem_pio2+0x150>
 800e7a0:	f8db 2000 	ldr.w	r2, [fp]
 800e7a4:	b958      	cbnz	r0, 800e7be <__kernel_rem_pio2+0x25e>
 800e7a6:	b122      	cbz	r2, 800e7b2 <__kernel_rem_pio2+0x252>
 800e7a8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800e7ac:	f8cb 2000 	str.w	r2, [fp]
 800e7b0:	2201      	movs	r2, #1
 800e7b2:	f10c 0c01 	add.w	ip, ip, #1
 800e7b6:	f10b 0b04 	add.w	fp, fp, #4
 800e7ba:	4610      	mov	r0, r2
 800e7bc:	e77f      	b.n	800e6be <__kernel_rem_pio2+0x15e>
 800e7be:	ebae 0202 	sub.w	r2, lr, r2
 800e7c2:	f8cb 2000 	str.w	r2, [fp]
 800e7c6:	4602      	mov	r2, r0
 800e7c8:	e7f3      	b.n	800e7b2 <__kernel_rem_pio2+0x252>
 800e7ca:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800e7ce:	ab06      	add	r3, sp, #24
 800e7d0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e7d4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e7d8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800e7dc:	e778      	b.n	800e6d0 <__kernel_rem_pio2+0x170>
 800e7de:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800e7e2:	ab06      	add	r3, sp, #24
 800e7e4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e7e8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800e7ec:	e7f4      	b.n	800e7d8 <__kernel_rem_pio2+0x278>
 800e7ee:	ab06      	add	r3, sp, #24
 800e7f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e7f4:	3801      	subs	r0, #1
 800e7f6:	431a      	orrs	r2, r3
 800e7f8:	e7a4      	b.n	800e744 <__kernel_rem_pio2+0x1e4>
 800e7fa:	f10c 0c01 	add.w	ip, ip, #1
 800e7fe:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800e802:	2800      	cmp	r0, #0
 800e804:	d0f9      	beq.n	800e7fa <__kernel_rem_pio2+0x29a>
 800e806:	9b04      	ldr	r3, [sp, #16]
 800e808:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800e80c:	eb0d 0203 	add.w	r2, sp, r3
 800e810:	9b01      	ldr	r3, [sp, #4]
 800e812:	18e8      	adds	r0, r5, r3
 800e814:	ab1a      	add	r3, sp, #104	; 0x68
 800e816:	1c6e      	adds	r6, r5, #1
 800e818:	3a98      	subs	r2, #152	; 0x98
 800e81a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800e81e:	4465      	add	r5, ip
 800e820:	42b5      	cmp	r5, r6
 800e822:	f6ff af05 	blt.w	800e630 <__kernel_rem_pio2+0xd0>
 800e826:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800e82a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e82e:	ee07 3a90 	vmov	s15, r3
 800e832:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e836:	f04f 0c00 	mov.w	ip, #0
 800e83a:	eca0 7b02 	vstmia	r0!, {d7}
 800e83e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800e870 <__kernel_rem_pio2+0x310>
 800e842:	4680      	mov	r8, r0
 800e844:	458c      	cmp	ip, r1
 800e846:	dd07      	ble.n	800e858 <__kernel_rem_pio2+0x2f8>
 800e848:	eca2 7b02 	vstmia	r2!, {d7}
 800e84c:	3601      	adds	r6, #1
 800e84e:	e7e7      	b.n	800e820 <__kernel_rem_pio2+0x2c0>
 800e850:	9a03      	ldr	r2, [sp, #12]
 800e852:	f04f 0c01 	mov.w	ip, #1
 800e856:	e7d2      	b.n	800e7fe <__kernel_rem_pio2+0x29e>
 800e858:	ecbe 5b02 	vldmia	lr!, {d5}
 800e85c:	ed38 6b02 	vldmdb	r8!, {d6}
 800e860:	f10c 0c01 	add.w	ip, ip, #1
 800e864:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e868:	e7ec      	b.n	800e844 <__kernel_rem_pio2+0x2e4>
 800e86a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e86e:	e76e      	b.n	800e74e <__kernel_rem_pio2+0x1ee>
	...
 800e87c:	3e700000 	.word	0x3e700000
 800e880:	00000000 	.word	0x00000000
 800e884:	41700000 	.word	0x41700000
 800e888:	08022780 	.word	0x08022780
 800e88c:	08022740 	.word	0x08022740
 800e890:	4260      	negs	r0, r4
 800e892:	eeb0 0b48 	vmov.f64	d0, d8
 800e896:	f000 f9d3 	bl	800ec40 <scalbn>
 800e89a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800ea78 <__kernel_rem_pio2+0x518>
 800e89e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e8a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8a6:	db18      	blt.n	800e8da <__kernel_rem_pio2+0x37a>
 800e8a8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800ea80 <__kernel_rem_pio2+0x520>
 800e8ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e8b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e8b4:	aa06      	add	r2, sp, #24
 800e8b6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e8ba:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e8be:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e8c2:	f105 0b01 	add.w	fp, r5, #1
 800e8c6:	ee10 3a10 	vmov	r3, s0
 800e8ca:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e8ce:	ee17 3a10 	vmov	r3, s14
 800e8d2:	3418      	adds	r4, #24
 800e8d4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800e8d8:	e740      	b.n	800e75c <__kernel_rem_pio2+0x1fc>
 800e8da:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e8de:	aa06      	add	r2, sp, #24
 800e8e0:	ee10 3a10 	vmov	r3, s0
 800e8e4:	46ab      	mov	fp, r5
 800e8e6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e8ea:	e737      	b.n	800e75c <__kernel_rem_pio2+0x1fc>
 800e8ec:	ac06      	add	r4, sp, #24
 800e8ee:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800e8f2:	9401      	str	r4, [sp, #4]
 800e8f4:	ee07 4a90 	vmov	s15, r4
 800e8f8:	3901      	subs	r1, #1
 800e8fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e8fe:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e902:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e906:	ed20 7b02 	vstmdb	r0!, {d7}
 800e90a:	e735      	b.n	800e778 <__kernel_rem_pio2+0x218>
 800e90c:	ecbc 5b02 	vldmia	ip!, {d5}
 800e910:	ecb5 6b02 	vldmia	r5!, {d6}
 800e914:	3401      	adds	r4, #1
 800e916:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e91a:	454c      	cmp	r4, r9
 800e91c:	dc01      	bgt.n	800e922 <__kernel_rem_pio2+0x3c2>
 800e91e:	4284      	cmp	r4, r0
 800e920:	ddf4      	ble.n	800e90c <__kernel_rem_pio2+0x3ac>
 800e922:	ac42      	add	r4, sp, #264	; 0x108
 800e924:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800e928:	ed80 7b00 	vstr	d7, [r0]
 800e92c:	3901      	subs	r1, #1
 800e92e:	e727      	b.n	800e780 <__kernel_rem_pio2+0x220>
 800e930:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800e932:	2902      	cmp	r1, #2
 800e934:	dc0a      	bgt.n	800e94c <__kernel_rem_pio2+0x3ec>
 800e936:	2900      	cmp	r1, #0
 800e938:	dc2c      	bgt.n	800e994 <__kernel_rem_pio2+0x434>
 800e93a:	d045      	beq.n	800e9c8 <__kernel_rem_pio2+0x468>
 800e93c:	f008 0007 	and.w	r0, r8, #7
 800e940:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800e944:	ecbd 8b06 	vpop	{d8-d10}
 800e948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e94c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e94e:	2a03      	cmp	r2, #3
 800e950:	d1f4      	bne.n	800e93c <__kernel_rem_pio2+0x3dc>
 800e952:	aa42      	add	r2, sp, #264	; 0x108
 800e954:	4413      	add	r3, r2
 800e956:	461a      	mov	r2, r3
 800e958:	4619      	mov	r1, r3
 800e95a:	4658      	mov	r0, fp
 800e95c:	2800      	cmp	r0, #0
 800e95e:	f1a1 0108 	sub.w	r1, r1, #8
 800e962:	dc54      	bgt.n	800ea0e <__kernel_rem_pio2+0x4ae>
 800e964:	4659      	mov	r1, fp
 800e966:	2901      	cmp	r1, #1
 800e968:	f1a2 0208 	sub.w	r2, r2, #8
 800e96c:	dc5f      	bgt.n	800ea2e <__kernel_rem_pio2+0x4ce>
 800e96e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 800ea88 <__kernel_rem_pio2+0x528>
 800e972:	3308      	adds	r3, #8
 800e974:	f1bb 0f01 	cmp.w	fp, #1
 800e978:	dc69      	bgt.n	800ea4e <__kernel_rem_pio2+0x4ee>
 800e97a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800e97e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800e982:	2e00      	cmp	r6, #0
 800e984:	d16a      	bne.n	800ea5c <__kernel_rem_pio2+0x4fc>
 800e986:	ed87 5b00 	vstr	d5, [r7]
 800e98a:	ed87 6b02 	vstr	d6, [r7, #8]
 800e98e:	ed87 7b04 	vstr	d7, [r7, #16]
 800e992:	e7d3      	b.n	800e93c <__kernel_rem_pio2+0x3dc>
 800e994:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800ea88 <__kernel_rem_pio2+0x528>
 800e998:	ab42      	add	r3, sp, #264	; 0x108
 800e99a:	441a      	add	r2, r3
 800e99c:	465b      	mov	r3, fp
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	da26      	bge.n	800e9f0 <__kernel_rem_pio2+0x490>
 800e9a2:	b35e      	cbz	r6, 800e9fc <__kernel_rem_pio2+0x49c>
 800e9a4:	eeb1 7b46 	vneg.f64	d7, d6
 800e9a8:	ed87 7b00 	vstr	d7, [r7]
 800e9ac:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800e9b0:	aa44      	add	r2, sp, #272	; 0x110
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e9b8:	459b      	cmp	fp, r3
 800e9ba:	da22      	bge.n	800ea02 <__kernel_rem_pio2+0x4a2>
 800e9bc:	b10e      	cbz	r6, 800e9c2 <__kernel_rem_pio2+0x462>
 800e9be:	eeb1 7b47 	vneg.f64	d7, d7
 800e9c2:	ed87 7b02 	vstr	d7, [r7, #8]
 800e9c6:	e7b9      	b.n	800e93c <__kernel_rem_pio2+0x3dc>
 800e9c8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800ea88 <__kernel_rem_pio2+0x528>
 800e9cc:	ab42      	add	r3, sp, #264	; 0x108
 800e9ce:	441a      	add	r2, r3
 800e9d0:	f1bb 0f00 	cmp.w	fp, #0
 800e9d4:	da05      	bge.n	800e9e2 <__kernel_rem_pio2+0x482>
 800e9d6:	b10e      	cbz	r6, 800e9dc <__kernel_rem_pio2+0x47c>
 800e9d8:	eeb1 7b47 	vneg.f64	d7, d7
 800e9dc:	ed87 7b00 	vstr	d7, [r7]
 800e9e0:	e7ac      	b.n	800e93c <__kernel_rem_pio2+0x3dc>
 800e9e2:	ed32 6b02 	vldmdb	r2!, {d6}
 800e9e6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e9ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e9ee:	e7ef      	b.n	800e9d0 <__kernel_rem_pio2+0x470>
 800e9f0:	ed32 7b02 	vldmdb	r2!, {d7}
 800e9f4:	3b01      	subs	r3, #1
 800e9f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e9fa:	e7d0      	b.n	800e99e <__kernel_rem_pio2+0x43e>
 800e9fc:	eeb0 7b46 	vmov.f64	d7, d6
 800ea00:	e7d2      	b.n	800e9a8 <__kernel_rem_pio2+0x448>
 800ea02:	ecb2 6b02 	vldmia	r2!, {d6}
 800ea06:	3301      	adds	r3, #1
 800ea08:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ea0c:	e7d4      	b.n	800e9b8 <__kernel_rem_pio2+0x458>
 800ea0e:	ed91 7b00 	vldr	d7, [r1]
 800ea12:	ed91 5b02 	vldr	d5, [r1, #8]
 800ea16:	3801      	subs	r0, #1
 800ea18:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ea1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ea20:	ed81 6b00 	vstr	d6, [r1]
 800ea24:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ea28:	ed81 7b02 	vstr	d7, [r1, #8]
 800ea2c:	e796      	b.n	800e95c <__kernel_rem_pio2+0x3fc>
 800ea2e:	ed92 7b00 	vldr	d7, [r2]
 800ea32:	ed92 5b02 	vldr	d5, [r2, #8]
 800ea36:	3901      	subs	r1, #1
 800ea38:	ee37 6b05 	vadd.f64	d6, d7, d5
 800ea3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ea40:	ed82 6b00 	vstr	d6, [r2]
 800ea44:	ee37 7b05 	vadd.f64	d7, d7, d5
 800ea48:	ed82 7b02 	vstr	d7, [r2, #8]
 800ea4c:	e78b      	b.n	800e966 <__kernel_rem_pio2+0x406>
 800ea4e:	ed33 6b02 	vldmdb	r3!, {d6}
 800ea52:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800ea56:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ea5a:	e78b      	b.n	800e974 <__kernel_rem_pio2+0x414>
 800ea5c:	eeb1 5b45 	vneg.f64	d5, d5
 800ea60:	eeb1 6b46 	vneg.f64	d6, d6
 800ea64:	ed87 5b00 	vstr	d5, [r7]
 800ea68:	eeb1 7b47 	vneg.f64	d7, d7
 800ea6c:	ed87 6b02 	vstr	d6, [r7, #8]
 800ea70:	e78d      	b.n	800e98e <__kernel_rem_pio2+0x42e>
 800ea72:	bf00      	nop
 800ea74:	f3af 8000 	nop.w
 800ea78:	00000000 	.word	0x00000000
 800ea7c:	41700000 	.word	0x41700000
 800ea80:	00000000 	.word	0x00000000
 800ea84:	3e700000 	.word	0x3e700000
	...

0800ea90 <__kernel_sin>:
 800ea90:	ee10 3a90 	vmov	r3, s1
 800ea94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ea98:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ea9c:	da04      	bge.n	800eaa8 <__kernel_sin+0x18>
 800ea9e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800eaa2:	ee17 3a90 	vmov	r3, s15
 800eaa6:	b35b      	cbz	r3, 800eb00 <__kernel_sin+0x70>
 800eaa8:	ee20 6b00 	vmul.f64	d6, d0, d0
 800eaac:	ee20 5b06 	vmul.f64	d5, d0, d6
 800eab0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800eb08 <__kernel_sin+0x78>
 800eab4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800eb10 <__kernel_sin+0x80>
 800eab8:	eea6 4b07 	vfma.f64	d4, d6, d7
 800eabc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800eb18 <__kernel_sin+0x88>
 800eac0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800eac4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800eb20 <__kernel_sin+0x90>
 800eac8:	eea7 4b06 	vfma.f64	d4, d7, d6
 800eacc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800eb28 <__kernel_sin+0x98>
 800ead0:	eea4 7b06 	vfma.f64	d7, d4, d6
 800ead4:	b930      	cbnz	r0, 800eae4 <__kernel_sin+0x54>
 800ead6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800eb30 <__kernel_sin+0xa0>
 800eada:	eea6 4b07 	vfma.f64	d4, d6, d7
 800eade:	eea4 0b05 	vfma.f64	d0, d4, d5
 800eae2:	4770      	bx	lr
 800eae4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800eae8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800eaec:	eea1 7b04 	vfma.f64	d7, d1, d4
 800eaf0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800eaf4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800eb38 <__kernel_sin+0xa8>
 800eaf8:	eea5 1b07 	vfma.f64	d1, d5, d7
 800eafc:	ee30 0b41 	vsub.f64	d0, d0, d1
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	f3af 8000 	nop.w
 800eb08:	5acfd57c 	.word	0x5acfd57c
 800eb0c:	3de5d93a 	.word	0x3de5d93a
 800eb10:	8a2b9ceb 	.word	0x8a2b9ceb
 800eb14:	be5ae5e6 	.word	0xbe5ae5e6
 800eb18:	57b1fe7d 	.word	0x57b1fe7d
 800eb1c:	3ec71de3 	.word	0x3ec71de3
 800eb20:	19c161d5 	.word	0x19c161d5
 800eb24:	bf2a01a0 	.word	0xbf2a01a0
 800eb28:	1110f8a6 	.word	0x1110f8a6
 800eb2c:	3f811111 	.word	0x3f811111
 800eb30:	55555549 	.word	0x55555549
 800eb34:	bfc55555 	.word	0xbfc55555
 800eb38:	55555549 	.word	0x55555549
 800eb3c:	3fc55555 	.word	0x3fc55555

0800eb40 <fabs>:
 800eb40:	ec51 0b10 	vmov	r0, r1, d0
 800eb44:	ee10 2a10 	vmov	r2, s0
 800eb48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb4c:	ec43 2b10 	vmov	d0, r2, r3
 800eb50:	4770      	bx	lr
 800eb52:	0000      	movs	r0, r0
 800eb54:	0000      	movs	r0, r0
	...

0800eb58 <floor>:
 800eb58:	ee10 1a90 	vmov	r1, s1
 800eb5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800eb60:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800eb64:	2b13      	cmp	r3, #19
 800eb66:	b530      	push	{r4, r5, lr}
 800eb68:	ee10 0a10 	vmov	r0, s0
 800eb6c:	ee10 5a10 	vmov	r5, s0
 800eb70:	dc31      	bgt.n	800ebd6 <floor+0x7e>
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	da15      	bge.n	800eba2 <floor+0x4a>
 800eb76:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800ec30 <floor+0xd8>
 800eb7a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800eb7e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800eb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb86:	dd07      	ble.n	800eb98 <floor+0x40>
 800eb88:	2900      	cmp	r1, #0
 800eb8a:	da4e      	bge.n	800ec2a <floor+0xd2>
 800eb8c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb90:	4318      	orrs	r0, r3
 800eb92:	d001      	beq.n	800eb98 <floor+0x40>
 800eb94:	4928      	ldr	r1, [pc, #160]	; (800ec38 <floor+0xe0>)
 800eb96:	2000      	movs	r0, #0
 800eb98:	460b      	mov	r3, r1
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	ec43 2b10 	vmov	d0, r2, r3
 800eba0:	e020      	b.n	800ebe4 <floor+0x8c>
 800eba2:	4a26      	ldr	r2, [pc, #152]	; (800ec3c <floor+0xe4>)
 800eba4:	411a      	asrs	r2, r3
 800eba6:	ea01 0402 	and.w	r4, r1, r2
 800ebaa:	4304      	orrs	r4, r0
 800ebac:	d01a      	beq.n	800ebe4 <floor+0x8c>
 800ebae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ec30 <floor+0xd8>
 800ebb2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ebb6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ebba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebbe:	ddeb      	ble.n	800eb98 <floor+0x40>
 800ebc0:	2900      	cmp	r1, #0
 800ebc2:	bfbe      	ittt	lt
 800ebc4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800ebc8:	fa40 f303 	asrlt.w	r3, r0, r3
 800ebcc:	18c9      	addlt	r1, r1, r3
 800ebce:	ea21 0102 	bic.w	r1, r1, r2
 800ebd2:	2000      	movs	r0, #0
 800ebd4:	e7e0      	b.n	800eb98 <floor+0x40>
 800ebd6:	2b33      	cmp	r3, #51	; 0x33
 800ebd8:	dd05      	ble.n	800ebe6 <floor+0x8e>
 800ebda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ebde:	d101      	bne.n	800ebe4 <floor+0x8c>
 800ebe0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ebe4:	bd30      	pop	{r4, r5, pc}
 800ebe6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800ebea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ebee:	40e2      	lsrs	r2, r4
 800ebf0:	4202      	tst	r2, r0
 800ebf2:	d0f7      	beq.n	800ebe4 <floor+0x8c>
 800ebf4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800ec30 <floor+0xd8>
 800ebf8:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ebfc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ec00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec04:	ddc8      	ble.n	800eb98 <floor+0x40>
 800ec06:	2900      	cmp	r1, #0
 800ec08:	da02      	bge.n	800ec10 <floor+0xb8>
 800ec0a:	2b14      	cmp	r3, #20
 800ec0c:	d103      	bne.n	800ec16 <floor+0xbe>
 800ec0e:	3101      	adds	r1, #1
 800ec10:	ea20 0002 	bic.w	r0, r0, r2
 800ec14:	e7c0      	b.n	800eb98 <floor+0x40>
 800ec16:	2401      	movs	r4, #1
 800ec18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ec1c:	fa04 f303 	lsl.w	r3, r4, r3
 800ec20:	4418      	add	r0, r3
 800ec22:	42a8      	cmp	r0, r5
 800ec24:	bf38      	it	cc
 800ec26:	1909      	addcc	r1, r1, r4
 800ec28:	e7f2      	b.n	800ec10 <floor+0xb8>
 800ec2a:	2000      	movs	r0, #0
 800ec2c:	4601      	mov	r1, r0
 800ec2e:	e7b3      	b.n	800eb98 <floor+0x40>
 800ec30:	8800759c 	.word	0x8800759c
 800ec34:	7e37e43c 	.word	0x7e37e43c
 800ec38:	bff00000 	.word	0xbff00000
 800ec3c:	000fffff 	.word	0x000fffff

0800ec40 <scalbn>:
 800ec40:	ee10 1a90 	vmov	r1, s1
 800ec44:	b510      	push	{r4, lr}
 800ec46:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ec4a:	b98c      	cbnz	r4, 800ec70 <scalbn+0x30>
 800ec4c:	ee10 3a10 	vmov	r3, s0
 800ec50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ec54:	430b      	orrs	r3, r1
 800ec56:	d011      	beq.n	800ec7c <scalbn+0x3c>
 800ec58:	ed9f 7b31 	vldr	d7, [pc, #196]	; 800ed20 <scalbn+0xe0>
 800ec5c:	4b3c      	ldr	r3, [pc, #240]	; (800ed50 <scalbn+0x110>)
 800ec5e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ec62:	4298      	cmp	r0, r3
 800ec64:	da0b      	bge.n	800ec7e <scalbn+0x3e>
 800ec66:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800ed28 <scalbn+0xe8>
 800ec6a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800ec6e:	e005      	b.n	800ec7c <scalbn+0x3c>
 800ec70:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ec74:	429c      	cmp	r4, r3
 800ec76:	d107      	bne.n	800ec88 <scalbn+0x48>
 800ec78:	ee30 0b00 	vadd.f64	d0, d0, d0
 800ec7c:	bd10      	pop	{r4, pc}
 800ec7e:	ee10 1a90 	vmov	r1, s1
 800ec82:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800ec86:	3c36      	subs	r4, #54	; 0x36
 800ec88:	4404      	add	r4, r0
 800ec8a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800ec8e:	429c      	cmp	r4, r3
 800ec90:	dd0d      	ble.n	800ecae <scalbn+0x6e>
 800ec92:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800ed30 <scalbn+0xf0>
 800ec96:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800ed38 <scalbn+0xf8>
 800ec9a:	eeb0 6b47 	vmov.f64	d6, d7
 800ec9e:	ee10 3a90 	vmov	r3, s1
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	fe27 7b05 	vselge.f64	d7, d7, d5
 800eca8:	ee27 0b06 	vmul.f64	d0, d7, d6
 800ecac:	e7e6      	b.n	800ec7c <scalbn+0x3c>
 800ecae:	2c00      	cmp	r4, #0
 800ecb0:	dd0a      	ble.n	800ecc8 <scalbn+0x88>
 800ecb2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800ecb6:	ec53 2b10 	vmov	r2, r3, d0
 800ecba:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800ecbe:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800ecc2:	ec43 2b10 	vmov	d0, r2, r3
 800ecc6:	e7d9      	b.n	800ec7c <scalbn+0x3c>
 800ecc8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800eccc:	da19      	bge.n	800ed02 <scalbn+0xc2>
 800ecce:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ecd2:	4298      	cmp	r0, r3
 800ecd4:	ee10 3a90 	vmov	r3, s1
 800ecd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ecdc:	dd09      	ble.n	800ecf2 <scalbn+0xb2>
 800ecde:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800ed30 <scalbn+0xf0>
 800ece2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800ed38 <scalbn+0xf8>
 800ece6:	eeb0 7b40 	vmov.f64	d7, d0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	fe00 0b06 	vseleq.f64	d0, d0, d6
 800ecf0:	e7bb      	b.n	800ec6a <scalbn+0x2a>
 800ecf2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 800ed28 <scalbn+0xe8>
 800ecf6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 800ed40 <scalbn+0x100>
 800ecfa:	eeb0 7b40 	vmov.f64	d7, d0
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	e7f4      	b.n	800ecec <scalbn+0xac>
 800ed02:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800ed06:	ec53 2b10 	vmov	r2, r3, d0
 800ed0a:	3436      	adds	r4, #54	; 0x36
 800ed0c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800ed10:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800ed14:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800ed48 <scalbn+0x108>
 800ed18:	ec43 2b10 	vmov	d0, r2, r3
 800ed1c:	e7a5      	b.n	800ec6a <scalbn+0x2a>
 800ed1e:	bf00      	nop
 800ed20:	00000000 	.word	0x00000000
 800ed24:	43500000 	.word	0x43500000
 800ed28:	c2f8f359 	.word	0xc2f8f359
 800ed2c:	01a56e1f 	.word	0x01a56e1f
 800ed30:	8800759c 	.word	0x8800759c
 800ed34:	7e37e43c 	.word	0x7e37e43c
 800ed38:	8800759c 	.word	0x8800759c
 800ed3c:	fe37e43c 	.word	0xfe37e43c
 800ed40:	c2f8f359 	.word	0xc2f8f359
 800ed44:	81a56e1f 	.word	0x81a56e1f
 800ed48:	00000000 	.word	0x00000000
 800ed4c:	3c900000 	.word	0x3c900000
 800ed50:	ffff3cb0 	.word	0xffff3cb0

0800ed54 <_init>:
 800ed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed56:	bf00      	nop
 800ed58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed5a:	bc08      	pop	{r3}
 800ed5c:	469e      	mov	lr, r3
 800ed5e:	4770      	bx	lr

0800ed60 <_fini>:
 800ed60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed62:	bf00      	nop
 800ed64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed66:	bc08      	pop	{r3}
 800ed68:	469e      	mov	lr, r3
 800ed6a:	4770      	bx	lr
