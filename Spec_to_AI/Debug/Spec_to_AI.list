
Spec_to_AI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f458  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0015eba8  0800f660  0800f660  0001f660  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0816e208  0816e208  0018141c  2**0
                  CONTENTS
  4 .ARM          00000008  0816e208  0816e208  0017e208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0816e210  0816e210  0018141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0816e210  0816e210  0017e210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0816e214  0816e214  0017e214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000141c  20000000  0816e218  00180000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b20  2000141c  0816f634  0018141c  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20001f3c  0816f634  00181f3c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0018141c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000217c4  00000000  00000000  0018144a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000537f  00000000  00000000  001a2c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  001a7f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b0  00000000  00000000  001a98c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003688a  00000000  00000000  001aaf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025cfb  00000000  00000000  001e1802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001350fb  00000000  00000000  002074fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0033c5f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006918  00000000  00000000  0033c648  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000141c 	.word	0x2000141c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f640 	.word	0x0800f640

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001420 	.word	0x20001420
 800023c:	0800f640 	.word	0x0800f640

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f6:	4b21      	ldr	r3, [pc, #132]	; (800067c <MX_ADC1_Init+0x98>)
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <MX_ADC1_Init+0x9c>)
 80005fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_ADC1_Init+0x98>)
 80005fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000604:	4b1d      	ldr	r3, [pc, #116]	; (800067c <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000610:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_ADC1_Init+0x98>)
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <MX_ADC1_Init+0xa0>)
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_ADC1_Init+0x98>)
 8000632:	2201      	movs	r2, #1
 8000634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_ADC1_Init+0x98>)
 8000640:	2201      	movs	r2, #1
 8000642:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <MX_ADC1_Init+0x98>)
 8000646:	f001 fac7 	bl	8001bd8 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000650:	f000 fdb4 	bl	80011bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_ADC1_Init+0xa4>)
 8000656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000658:	2301      	movs	r3, #1
 800065a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	4619      	mov	r1, r3
 8000664:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_ADC1_Init+0x98>)
 8000666:	f001 fafb 	bl	8001c60 <HAL_ADC_ConfigChannel>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000670:	f000 fda4 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20001438 	.word	0x20001438
 8000680:	40012000 	.word	0x40012000
 8000684:	0f000001 	.word	0x0f000001
 8000688:	10000012 	.word	0x10000012

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <HAL_ADC_MspInit+0x38>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d10b      	bne.n	80006b6 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b07      	ldr	r3, [pc, #28]	; (80006c8 <HAL_ADC_MspInit+0x3c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006b6:	bf00      	nop
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40012000 	.word	0x40012000
 80006c8:	40023800 	.word	0x40023800

080006cc <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d2:	4a0e      	ldr	r2, [pc, #56]	; (800070c <MX_CRC_Init+0x40>)
 80006d4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_CRC_Init+0x3c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006dc:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_CRC_Init+0x3c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_CRC_Init+0x3c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_CRC_Init+0x3c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_CRC_Init+0x3c>)
 80006f6:	f001 fe15 	bl	8002324 <HAL_CRC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000700:	f000 fd5c 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20001480 	.word	0x20001480
 800070c:	40023000 	.word	0x40023000

08000710 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <HAL_CRC_MspInit+0x38>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d10b      	bne.n	800073a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a09      	ldr	r2, [pc, #36]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000728:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b07      	ldr	r3, [pc, #28]	; (800074c <HAL_CRC_MspInit+0x3c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800073a:	bf00      	nop
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023000 	.word	0x40023000
 800074c:	40023800 	.word	0x40023800

08000750 <MX_DFSDM1_Init>:
DMA_HandleTypeDef hdma_dfsdm1_flt0;
DMA_HandleTypeDef hdma_dfsdm1_flt1;

/* DFSDM1 init function */
void MX_DFSDM1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000754:	4b63      	ldr	r3, [pc, #396]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000756:	4a64      	ldr	r2, [pc, #400]	; (80008e8 <MX_DFSDM1_Init+0x198>)
 8000758:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800075a:	4b62      	ldr	r3, [pc, #392]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000760:	4b60      	ldr	r3, [pc, #384]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000762:	2201      	movs	r2, #1
 8000764:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000766:	4b5f      	ldr	r3, [pc, #380]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000768:	2201      	movs	r2, #1
 800076a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800076c:	4b5d      	ldr	r3, [pc, #372]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 8000772:	4b5c      	ldr	r3, [pc, #368]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000774:	2200      	movs	r2, #0
 8000776:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000778:	4b5a      	ldr	r3, [pc, #360]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800077a:	2200      	movs	r2, #0
 800077c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800077e:	4b59      	ldr	r3, [pc, #356]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000784:	4b57      	ldr	r3, [pc, #348]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800078a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800078c:	4b55      	ldr	r3, [pc, #340]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800078e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000792:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 176;
 8000794:	4b53      	ldr	r3, [pc, #332]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 8000796:	22b0      	movs	r2, #176	; 0xb0
 8000798:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800079a:	4b52      	ldr	r3, [pc, #328]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 800079c:	2201      	movs	r2, #1
 800079e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80007a0:	4850      	ldr	r0, [pc, #320]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80007a2:	f001 ff69 	bl	8002678 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80007a6:	4b51      	ldr	r3, [pc, #324]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007a8:	4a51      	ldr	r2, [pc, #324]	; (80008f0 <MX_DFSDM1_Init+0x1a0>)
 80007aa:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 80007ac:	4b4f      	ldr	r3, [pc, #316]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80007b2:	4b4e      	ldr	r3, [pc, #312]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80007b8:	4b4c      	ldr	r3, [pc, #304]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007be:	4b4b      	ldr	r3, [pc, #300]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 80007c4:	4b49      	ldr	r3, [pc, #292]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 80007ca:	4b48      	ldr	r3, [pc, #288]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80007d0:	4b46      	ldr	r3, [pc, #280]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80007d6:	4b45      	ldr	r3, [pc, #276]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007dc:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80007de:	4b43      	ldr	r3, [pc, #268]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007e0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80007e4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 176;
 80007e6:	4b41      	ldr	r3, [pc, #260]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007e8:	22b0      	movs	r2, #176	; 0xb0
 80007ea:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80007ec:	4b3f      	ldr	r3, [pc, #252]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 80007f2:	483e      	ldr	r0, [pc, #248]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80007f4:	f001 ff40 	bl	8002678 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 80007f8:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 80007fa:	4a3f      	ldr	r2, [pc, #252]	; (80008f8 <MX_DFSDM1_Init+0x1a8>)
 80007fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 80007fe:	4b3d      	ldr	r3, [pc, #244]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000800:	2201      	movs	r2, #1
 8000802:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000804:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800080a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 800080c:	4b39      	ldr	r3, [pc, #228]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800080e:	2204      	movs	r2, #4
 8000810:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800081e:	4b35      	ldr	r3, [pc, #212]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000820:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000824:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000826:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800082c:	4b31      	ldr	r3, [pc, #196]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800082e:	2204      	movs	r2, #4
 8000830:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000832:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8000838:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800083a:	2201      	movs	r2, #1
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000840:	2200      	movs	r2, #0
 8000842:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8000844:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 8000846:	2200      	movs	r2, #0
 8000848:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <MX_DFSDM1_Init+0x1a4>)
 800084c:	f001 fe54 	bl	80024f8 <HAL_DFSDM_ChannelInit>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 8000856:	f000 fcb1 	bl	80011bc <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800085a:	4b28      	ldr	r3, [pc, #160]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800085c:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_DFSDM1_Init+0x1b0>)
 800085e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000860:	4b26      	ldr	r3, [pc, #152]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000862:	2201      	movs	r2, #1
 8000864:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000866:	4b25      	ldr	r3, [pc, #148]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800086c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000870:	2204      	movs	r2, #4
 8000872:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000874:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800087c:	2200      	movs	r2, #0
 800087e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000882:	2200      	movs	r2, #0
 8000884:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000886:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000888:	2200      	movs	r2, #0
 800088a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800088e:	2204      	movs	r2, #4
 8000890:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 800089a:	220a      	movs	r2, #10
 800089c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008a6:	2202      	movs	r2, #2
 80008a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_DFSDM1_Init+0x1ac>)
 80008ac:	f001 fe24 	bl	80024f8 <HAL_DFSDM_ChannelInit>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 80008b6:	f000 fc81 	bl	80011bc <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 80008ba:	2201      	movs	r2, #1
 80008bc:	4911      	ldr	r1, [pc, #68]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80008c0:	f001 ffb4 	bl	800282c <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 80008c4:	490f      	ldr	r1, [pc, #60]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <MX_DFSDM1_Init+0x194>)
 80008c8:	f001 fff6 	bl	80028b8 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_ON);
 80008cc:	2201      	movs	r2, #1
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <MX_DFSDM1_Init+0x1b4>)
 80008d0:	4806      	ldr	r0, [pc, #24]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80008d2:	f001 ffab 	bl	800282c <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 80008d6:	2101      	movs	r1, #1
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_DFSDM1_Init+0x19c>)
 80008da:	f001 ffed 	bl	80028b8 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200014a4 	.word	0x200014a4
 80008e8:	40017500 	.word	0x40017500
 80008ec:	200014f8 	.word	0x200014f8
 80008f0:	40017580 	.word	0x40017580
 80008f4:	2000154c 	.word	0x2000154c
 80008f8:	40017400 	.word	0x40017400
 80008fc:	20001584 	.word	0x20001584
 8000900:	40017420 	.word	0x40017420
 8000904:	00010002 	.word	0x00010002

08000908 <HAL_DFSDM_FilterMspInit>:
static uint32_t HAL_RCC_DFSDM1_CLK_ENABLED=0;

static uint32_t DFSDM1_Init = 0;

void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* dfsdm_filterHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000920:	4b63      	ldr	r3, [pc, #396]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d145      	bne.n	80009b4 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000928:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	3301      	adds	r3, #1
 800092e:	4a61      	ldr	r2, [pc, #388]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000930:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000932:	4b60      	ldr	r3, [pc, #384]	; (8000ab4 <HAL_DFSDM_FilterMspInit+0x1ac>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d10b      	bne.n	8000952 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800093a:	4b5f      	ldr	r3, [pc, #380]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a5e      	ldr	r2, [pc, #376]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000940:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b5c      	ldr	r3, [pc, #368]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000952:	4b59      	ldr	r3, [pc, #356]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a58      	ldr	r2, [pc, #352]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b56      	ldr	r3, [pc, #344]	; (8000ab8 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800096a:	2340      	movs	r3, #64	; 0x40
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000972:	2302      	movs	r3, #2
 8000974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000976:	2303      	movs	r3, #3
 8000978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800097a:	230a      	movs	r3, #10
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	484d      	ldr	r0, [pc, #308]	; (8000abc <HAL_DFSDM_FilterMspInit+0x1b4>)
 8000986:	f002 fbd7 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800098a:	2308      	movs	r3, #8
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800099a:	2303      	movs	r3, #3
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4845      	ldr	r0, [pc, #276]	; (8000abc <HAL_DFSDM_FilterMspInit+0x1b4>)
 80009a6:	f002 fbc7 	bl	8003138 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80009aa:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a3f      	ldr	r2, [pc, #252]	; (8000ab0 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80009b2:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter0){
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a41      	ldr	r2, [pc, #260]	; (8000ac0 <HAL_DFSDM_FilterMspInit+0x1b8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d137      	bne.n	8000a2e <HAL_DFSDM_FilterMspInit+0x126>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 80009be:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009c0:	4a41      	ldr	r2, [pc, #260]	; (8000ac8 <HAL_DFSDM_FilterMspInit+0x1c0>)
 80009c2:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 80009c4:	4b3f      	ldr	r3, [pc, #252]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ca:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009cc:	4b3d      	ldr	r3, [pc, #244]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d2:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80009d8:	4b3a      	ldr	r3, [pc, #232]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009de:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009e0:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009e6:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80009e8:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ee:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_CIRCULAR;
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80009fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009fe:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8000a06:	482f      	ldr	r0, [pc, #188]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a08:	f001 fff0 	bl	80029ec <HAL_DMA_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <HAL_DFSDM_FilterMspInit+0x10e>
    {
      Error_Handler();
 8000a12:	f000 fbd3 	bl	80011bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt0);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a2a      	ldr	r2, [pc, #168]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a1c:	4a29      	ldr	r2, [pc, #164]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt0);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
 8000a28:	4a26      	ldr	r2, [pc, #152]	; (8000ac4 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(dfsdm_filterHandle->Instance == DFSDM1_Filter1){
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <HAL_DFSDM_FilterMspInit+0x1c4>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d137      	bne.n	8000aa8 <HAL_DFSDM_FilterMspInit+0x1a0>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream5;
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a3a:	4a26      	ldr	r2, [pc, #152]	; (8000ad4 <HAL_DFSDM_FilterMspInit+0x1cc>)
 8000a3c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a44:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a46:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4c:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8000a52:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a58:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a68:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a70:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a78:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8000a80:	4813      	ldr	r0, [pc, #76]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a82:	f001 ffb3 	bl	80029ec <HAL_DMA_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_DFSDM_FilterMspInit+0x188>
    {
      Error_Handler();
 8000a8c:	f000 fb96 	bl	80011bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaInj,hdma_dfsdm1_flt1);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(dfsdm_filterHandle,hdmaReg,hdma_dfsdm1_flt1);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a0c      	ldr	r2, [pc, #48]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	20001680 	.word	0x20001680
 8000ab4:	2000167c 	.word	0x2000167c
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	40017500 	.word	0x40017500
 8000ac4:	200015bc 	.word	0x200015bc
 8000ac8:	40026410 	.word	0x40026410
 8000acc:	40017580 	.word	0x40017580
 8000ad0:	2000161c 	.word	0x2000161c
 8000ad4:	40026488 	.word	0x40026488

08000ad8 <HAL_DFSDM_ChannelMspInit>:


void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* dfsdm_channelHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000af0:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d145      	bne.n	8000b84 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* DFSDM1 clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8000af8:	4b25      	ldr	r3, [pc, #148]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a24      	ldr	r2, [pc, #144]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000b00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8000b02:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d10b      	bne.n	8000b22 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b14:	6453      	str	r3, [r2, #68]	; 0x44
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a1b      	ldr	r2, [pc, #108]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8000b4a:	230a      	movs	r3, #10
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	4810      	ldr	r0, [pc, #64]	; (8000b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000b56:	f002 faef 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b62:	2302      	movs	r3, #2
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000b76:	f002 fadf 	bl	8003138 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	4a02      	ldr	r2, [pc, #8]	; (8000b8c <HAL_DFSDM_ChannelMspInit+0xb4>)
 8000b82:	6013      	str	r3, [r2, #0]
  }
}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20001680 	.word	0x20001680
 8000b90:	2000167c 	.word	0x2000167c
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40020c00 	.word	0x40020c00

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_DMA_Init+0x78>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a1b      	ldr	r2, [pc, #108]	; (8000c14 <MX_DMA_Init+0x78>)
 8000ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_DMA_Init+0x78>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2038      	movs	r0, #56	; 0x38
 8000bc0:	f001 fb79 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bc4:	2038      	movs	r0, #56	; 0x38
 8000bc6:	f001 fb92 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2039      	movs	r0, #57	; 0x39
 8000bd0:	f001 fb71 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000bd4:	2039      	movs	r0, #57	; 0x39
 8000bd6:	f001 fb8a 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	203b      	movs	r0, #59	; 0x3b
 8000be0:	f001 fb69 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000be4:	203b      	movs	r0, #59	; 0x3b
 8000be6:	f001 fb82 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2044      	movs	r0, #68	; 0x44
 8000bf0:	f001 fb61 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000bf4:	2044      	movs	r0, #68	; 0x44
 8000bf6:	f001 fb7a 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2045      	movs	r0, #69	; 0x45
 8000c00:	f001 fb59 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000c04:	2045      	movs	r0, #69	; 0x45
 8000c06:	f001 fb72 	bl	80022ee <HAL_NVIC_EnableIRQ>

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	; 0x38
 8000c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b5d      	ldr	r3, [pc, #372]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a5c      	ldr	r2, [pc, #368]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b5a      	ldr	r3, [pc, #360]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	623b      	str	r3, [r7, #32]
 8000c44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	4b57      	ldr	r3, [pc, #348]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a56      	ldr	r2, [pc, #344]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c4c:	f043 0310 	orr.w	r3, r3, #16
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	61fb      	str	r3, [r7, #28]
 8000c5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	4b51      	ldr	r3, [pc, #324]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a50      	ldr	r2, [pc, #320]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b4e      	ldr	r3, [pc, #312]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b4b      	ldr	r3, [pc, #300]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	4a4a      	ldr	r2, [pc, #296]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6313      	str	r3, [r2, #48]	; 0x30
 8000c82:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a44      	ldr	r2, [pc, #272]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	4b3f      	ldr	r3, [pc, #252]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a3e      	ldr	r2, [pc, #248]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b3c      	ldr	r3, [pc, #240]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cbe:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a38      	ldr	r2, [pc, #224]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000cd6:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a32      	ldr	r2, [pc, #200]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b30      	ldr	r3, [pc, #192]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b2d      	ldr	r3, [pc, #180]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <MX_GPIO_Init+0x18c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d0c:	4826      	ldr	r0, [pc, #152]	; (8000da8 <MX_GPIO_Init+0x190>)
 8000d0e:	f002 fbd7 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, LED3_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	210b      	movs	r1, #11
 8000d16:	4825      	ldr	r0, [pc, #148]	; (8000dac <MX_GPIO_Init+0x194>)
 8000d18:	f002 fbd2 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_Pin;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PUSH_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	481f      	ldr	r0, [pc, #124]	; (8000db0 <MX_GPIO_Init+0x198>)
 8000d34:	f002 fa00 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8000d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4815      	ldr	r0, [pc, #84]	; (8000da8 <MX_GPIO_Init+0x190>)
 8000d52:	f002 f9f1 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED2_Pin;
 8000d56:	230b      	movs	r3, #11
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480f      	ldr	r0, [pc, #60]	; (8000dac <MX_GPIO_Init+0x194>)
 8000d6e:	f002 f9e3 	bl	8003138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d84:	4619      	mov	r1, r3
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <MX_GPIO_Init+0x19c>)
 8000d88:	f002 f9d6 	bl	8003138 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2028      	movs	r0, #40	; 0x28
 8000d92:	f001 fa90 	bl	80022b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d96:	2028      	movs	r0, #40	; 0x28
 8000d98:	f001 faa9 	bl	80022ee <HAL_NVIC_EnableIRQ>

}
 8000d9c:	bf00      	nop
 8000d9e:	3738      	adds	r7, #56	; 0x38
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40022000 	.word	0x40022000
 8000dac:	40022400 	.word	0x40022400
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020400 	.word	0x40020400

08000db8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dbc:	f3bf 8f4f 	dsb	sy
}
 8000dc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dc2:	f3bf 8f6f 	isb	sy
}
 8000dc6:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <SCB_EnableICache+0x48>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd0:	f3bf 8f4f 	dsb	sy
}
 8000dd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dd6:	f3bf 8f6f 	isb	sy
}
 8000dda:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <SCB_EnableICache+0x48>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <SCB_EnableICache+0x48>)
 8000de2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	f3bf 8f4f 	dsb	sy
}
 8000dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dee:	f3bf 8f6f 	isb	sy
}
 8000df2:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000e12:	f3bf 8f4f 	dsb	sy
}
 8000e16:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e1e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	0b5b      	lsrs	r3, r3, #13
 8000e24:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000e28:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	08db      	lsrs	r3, r3, #3
 8000e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e32:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	015a      	lsls	r2, r3, #5
 8000e38:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000e3c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000e42:	4911      	ldr	r1, [pc, #68]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e44:	4313      	orrs	r3, r2
 8000e46:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	1e5a      	subs	r2, r3, #1
 8000e4e:	60ba      	str	r2, [r7, #8]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1ef      	bne.n	8000e34 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	60fa      	str	r2, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1e5      	bne.n	8000e2a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e5e:	f3bf 8f4f 	dsb	sy
}
 8000e62:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000e64:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e66:	695b      	ldr	r3, [r3, #20]
 8000e68:	4a07      	ldr	r2, [pc, #28]	; (8000e88 <SCB_EnableDCache+0x84>)
 8000e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e70:	f3bf 8f4f 	dsb	sy
}
 8000e74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e76:	f3bf 8f6f 	isb	sy
}
 8000e7a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	f5ad 4d00 	sub.w	sp, sp, #32768	; 0x8000
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	__HAL_RCC_CRC_CLK_ENABLE();
 8000e96:	4b71      	ldr	r3, [pc, #452]	; (800105c <main+0x1d0>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a70      	ldr	r2, [pc, #448]	; (800105c <main+0x1d0>)
 8000e9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b6e      	ldr	r3, [pc, #440]	; (800105c <main+0x1d0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eae:	f842 3c28 	str.w	r3, [r2, #-40]
 8000eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eb6:	f853 3c28 	ldr.w	r3, [r3, #-40]
	//list of files containing Mel spectrograms
	char file_path[FILE_LIST_SIZE] [35]={"down_c.txt","down_e.txt","go_e.txt","left_c.txt",
 8000eba:	f248 0328 	movw	r3, #32808	; 0x8028
 8000ebe:	443b      	add	r3, r7
 8000ec0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000ec4:	4a66      	ldr	r2, [pc, #408]	; (8001060 <main+0x1d4>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	4611      	mov	r1, r2
 8000eca:	f240 230d 	movw	r3, #525	; 0x20d
 8000ece:	461a      	mov	r2, r3
 8000ed0:	f00d fea6 	bl	800ec20 <memcpy>
	float32_t input_buffer [BUFFER_FLOAT_SIZE];

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000ed4:	f7ff ff70 	bl	8000db8 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000ed8:	f7ff ff94 	bl	8000e04 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f000 fdfb 	bl	8001ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f8ca 	bl	8001078 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ee4:	f000 f93a 	bl	800115c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee8:	f7ff fe96 	bl	8000c18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eec:	f7ff fe56 	bl	8000b9c <MX_DMA_Init>
  MX_DFSDM1_Init();
 8000ef0:	f7ff fc2e 	bl	8000750 <MX_DFSDM1_Init>
  MX_SAI2_Init();
 8000ef4:	f000 fa02 	bl	80012fc <MX_SAI2_Init>
  MX_ADC1_Init();
 8000ef8:	f7ff fb74 	bl	80005e4 <MX_ADC1_Init>
  MX_UART4_Init();
 8000efc:	f000 fd10 	bl	8001920 <MX_UART4_Init>
  MX_CRC_Init();
 8000f00:	f7ff fbe4 	bl	80006cc <MX_CRC_Init>
  MX_RTC_Init();
 8000f04:	f000 f960 	bl	80011c8 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000f08:	f000 fb02 	bl	8001510 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000f0c:	f006 febe 	bl	8007c8c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Start DFSDM conversions */


	SDInit();
 8000f10:	f00a f82c 	bl	800af6c <SDInit>
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f1a:	4852      	ldr	r0, [pc, #328]	; (8001064 <main+0x1d8>)
 8000f1c:	f002 fad0 	bl	80034c0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2101      	movs	r1, #1
 8000f24:	4850      	ldr	r0, [pc, #320]	; (8001068 <main+0x1dc>)
 8000f26:	f002 facb 	bl	80034c0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	484e      	ldr	r0, [pc, #312]	; (8001068 <main+0x1dc>)
 8000f30:	f002 fac6 	bl	80034c0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8000f34:	2201      	movs	r2, #1
 8000f36:	2108      	movs	r1, #8
 8000f38:	484b      	ldr	r0, [pc, #300]	; (8001068 <main+0x1dc>)
 8000f3a:	f002 fac1 	bl	80034c0 <HAL_GPIO_WritePin>

	int file_count = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f248 0224 	movw	r2, #32804	; 0x8024
 8000f44:	443a      	add	r2, r7
 8000f46:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //reads one file at a time
	  	openFile(file_path[file_count]);
 8000f48:	f647 6114 	movw	r1, #32276	; 0x7e14
 8000f4c:	4439      	add	r1, r7
 8000f4e:	f248 0324 	movw	r3, #32804	; 0x8024
 8000f52:	443b      	add	r3, r7
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	00da      	lsls	r2, r3, #3
 8000f5e:	1ad2      	subs	r2, r2, r3
 8000f60:	188b      	adds	r3, r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00a f816 	bl	800af94 <openFile>
		readFile((char*)input_buffer, 4);
 8000f68:	4b40      	ldr	r3, [pc, #256]	; (800106c <main+0x1e0>)
 8000f6a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000f6e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000f72:	443b      	add	r3, r7
 8000f74:	2104      	movs	r1, #4
 8000f76:	4618      	mov	r0, r3
 8000f78:	f00a f824 	bl	800afc4 <readFile>
		readFile(((char*)input_buffer)+4, BUFFER_BYTE_SIZE-4);
 8000f7c:	4b3b      	ldr	r3, [pc, #236]	; (800106c <main+0x1e0>)
 8000f7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000f82:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000f86:	443b      	add	r3, r7
 8000f88:	3304      	adds	r3, #4
 8000f8a:	f647 51fc 	movw	r1, #32252	; 0x7dfc
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00a f818 	bl	800afc4 <readFile>
		SDclose();
 8000f94:	f00a f82a 	bl	800afec <SDclose>
		//verifies if AI is setup correctly
		if (modelSetup()!= AI_OK)
 8000f98:	f009 fe58 	bl	800ac4c <modelSetup>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <main+0x11a>
		{
			Error_Handler();
 8000fa2:	f000 f90b 	bl	80011bc <Error_Handler>
		}
		//runs the NN model on the spectrogram and reads the result
		outputs[file_count] = modelRun(input_buffer);
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <main+0x1e0>)
 8000fa8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000fac:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8000fb0:	443b      	add	r3, r7
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f009 fea0 	bl	800acf8 <modelRun>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f248 0328 	movw	r3, #32808	; 0x8028
 8000fc0:	443b      	add	r3, r7
 8000fc2:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000fc6:	f248 0324 	movw	r3, #32804	; 0x8024
 8000fca:	443b      	add	r3, r7
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	701a      	strb	r2, [r3, #0]
		//shows the result in binary
		ledsShowValue(outputs[file_count]);
 8000fd4:	f248 0328 	movw	r3, #32808	; 0x8028
 8000fd8:	443b      	add	r3, r7
 8000fda:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8000fde:	f248 0324 	movw	r3, #32804	; 0x8024
 8000fe2:	443b      	add	r3, r7
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f00a f81e 	bl	800b02c <ledsShowValue>
		//waits for the temper button to be clicked on to read the next file
		file_count = (file_count+1)%FILE_LIST_SIZE;
 8000ff0:	f248 0324 	movw	r3, #32804	; 0x8024
 8000ff4:	443b      	add	r3, r7
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <main+0x1e4>)
 8000ffc:	fb83 1302 	smull	r1, r3, r3, r2
 8001000:	4413      	add	r3, r2
 8001002:	10d9      	asrs	r1, r3, #3
 8001004:	17d3      	asrs	r3, r2, #31
 8001006:	1ac9      	subs	r1, r1, r3
 8001008:	460b      	mov	r3, r1
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	1a5b      	subs	r3, r3, r1
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	f248 0224 	movw	r2, #32804	; 0x8024
 8001014:	443a      	add	r2, r7
 8001016:	6013      	str	r3, [r2, #0]
		while(!click);
 8001018:	bf00      	nop
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <main+0x1e8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0fb      	beq.n	800101a <main+0x18e>
		HAL_Delay(250);
 8001022:	20fa      	movs	r0, #250	; 0xfa
 8001024:	f000 fdb4 	bl	8001b90 <HAL_Delay>
		//lights up all leds while waiting for the result
		 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102e:	480d      	ldr	r0, [pc, #52]	; (8001064 <main+0x1d8>)
 8001030:	f002 fa46 	bl	80034c0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2101      	movs	r1, #1
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <main+0x1dc>)
 800103a:	f002 fa41 	bl	80034c0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2102      	movs	r1, #2
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <main+0x1dc>)
 8001044:	f002 fa3c 	bl	80034c0 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2108      	movs	r1, #8
 800104c:	4806      	ldr	r0, [pc, #24]	; (8001068 <main+0x1dc>)
 800104e:	f002 fa37 	bl	80034c0 <HAL_GPIO_WritePin>
		click = 0;
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <main+0x1e8>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
  {
 8001058:	e776      	b.n	8000f48 <main+0xbc>
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	0800f660 	.word	0x0800f660
 8001064:	40022000 	.word	0x40022000
 8001068:	40022400 	.word	0x40022400
 800106c:	ffff7fdc 	.word	0xffff7fdc
 8001070:	88888889 	.word	0x88888889
 8001074:	20001684 	.word	0x20001684

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	2234      	movs	r2, #52	; 0x34
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f00d fdd8 	bl	800ec3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <SystemClock_Config+0xdc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	4a2c      	ldr	r2, [pc, #176]	; (8001154 <SystemClock_Config+0xdc>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a6:	6413      	str	r3, [r2, #64]	; 0x40
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <SystemClock_Config+0xdc>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b4:	4b28      	ldr	r3, [pc, #160]	; (8001158 <SystemClock_Config+0xe0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a27      	ldr	r2, [pc, #156]	; (8001158 <SystemClock_Config+0xe0>)
 80010ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b25      	ldr	r3, [pc, #148]	; (8001158 <SystemClock_Config+0xe0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010cc:	2309      	movs	r3, #9
 80010ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010d6:	2301      	movs	r3, #1
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010da:	2302      	movs	r3, #2
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010e4:	2319      	movs	r3, #25
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80010e8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80010ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ee:	2302      	movs	r3, #2
 80010f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010f2:	2309      	movs	r3, #9
 80010f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010f6:	2302      	movs	r3, #2
 80010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4618      	mov	r0, r3
 8001100:	f002 fa60 	bl	80035c4 <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800110a:	f000 f857 	bl	80011bc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800110e:	f002 fa09 	bl	8003524 <HAL_PWREx_EnableOverDrive>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001118:	f000 f850 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111c:	230f      	movs	r3, #15
 800111e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001120:	2302      	movs	r3, #2
 8001122:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001128:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800112c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800112e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001132:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001134:	f107 0308 	add.w	r3, r7, #8
 8001138:	2107      	movs	r1, #7
 800113a:	4618      	mov	r0, r3
 800113c:	f002 fcf0 	bl	8003b20 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001146:	f000 f839 	bl	80011bc <Error_Handler>
  }
}
 800114a:	bf00      	nop
 800114c:	3750      	adds	r7, #80	; 0x50
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0a4      	sub	sp, #144	; 0x90
 8001160:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001162:	463b      	mov	r3, r7
 8001164:	2290      	movs	r2, #144	; 0x90
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f00d fd67 	bl	800ec3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 800116e:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <PeriphCommonClock_Config+0x5c>)
 8001170:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 429;
 8001172:	f240 13ad 	movw	r3, #429	; 0x1ad
 8001176:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001178:	2302      	movs	r3, #2
 800117a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 6;
 800117c:	2306      	movs	r3, #6
 800117e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 6;
 8001184:	2306      	movs	r3, #6
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001188:	2300      	movs	r3, #0
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800118c:	2300      	movs	r3, #0
 800118e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI2;
 8001190:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001194:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	4618      	mov	r0, r3
 80011a2:	f002 fea3 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80011ac:	f000 f806 	bl	80011bc <Error_Handler>
  }
}
 80011b0:	bf00      	nop
 80011b2:	3790      	adds	r7, #144	; 0x90
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	18300000 	.word	0x18300000

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <Error_Handler+0x8>
	...

080011c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <MX_RTC_Init+0xd0>)
 80011e2:	4a2e      	ldr	r2, [pc, #184]	; (800129c <MX_RTC_Init+0xd4>)
 80011e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <MX_RTC_Init+0xd0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011ec:	4b2a      	ldr	r3, [pc, #168]	; (8001298 <MX_RTC_Init+0xd0>)
 80011ee:	227f      	movs	r2, #127	; 0x7f
 80011f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011f2:	4b29      	ldr	r3, [pc, #164]	; (8001298 <MX_RTC_Init+0xd0>)
 80011f4:	22ff      	movs	r2, #255	; 0xff
 80011f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <MX_RTC_Init+0xd0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <MX_RTC_Init+0xd0>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <MX_RTC_Init+0xd0>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800120a:	4823      	ldr	r0, [pc, #140]	; (8001298 <MX_RTC_Init+0xd0>)
 800120c:	f003 fc08 	bl	8004a20 <HAL_RTC_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001216:	f7ff ffd1 	bl	80011bc <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */
  //if flag... return
  if (!SET_TIME_RTC)
  {
	  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0x32F2)
 800121a:	2100      	movs	r1, #0
 800121c:	481e      	ldr	r0, [pc, #120]	; (8001298 <MX_RTC_Init+0xd0>)
 800121e:	f003 fe5d 	bl	8004edc <HAL_RTCEx_BKUPRead>
 8001222:	4603      	mov	r3, r0
 8001224:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001228:	4293      	cmp	r3, r2
 800122a:	d02e      	beq.n	800128a <MX_RTC_Init+0xc2>

			return;

	  else
		  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0x32F2);
 800122c:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8001230:	2100      	movs	r1, #0
 8001232:	4819      	ldr	r0, [pc, #100]	; (8001298 <MX_RTC_Init+0xd0>)
 8001234:	f003 fe38 	bl	8004ea8 <HAL_RTCEx_BKUPWrite>
  }
  sTime.Hours = HOUR;
 8001238:	2314      	movs	r3, #20
 800123a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = MIN;
 800123c:	2329      	movs	r3, #41	; 0x29
 800123e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = SEC;
 8001240:	2300      	movs	r3, #0
 8001242:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2201      	movs	r2, #1
 8001250:	4619      	mov	r1, r3
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <MX_RTC_Init+0xd0>)
 8001254:	f003 fc68 	bl	8004b28 <HAL_RTC_SetTime>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800125e:	f7ff ffad 	bl	80011bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001262:	2301      	movs	r3, #1
 8001264:	703b      	strb	r3, [r7, #0]
  sDate.Month = MONTH;
 8001266:	2301      	movs	r3, #1
 8001268:	707b      	strb	r3, [r7, #1]
  sDate.Date = DAY;
 800126a:	2323      	movs	r3, #35	; 0x23
 800126c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = YEAR;
 800126e:	2323      	movs	r3, #35	; 0x23
 8001270:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	2201      	movs	r2, #1
 8001276:	4619      	mov	r1, r3
 8001278:	4807      	ldr	r0, [pc, #28]	; (8001298 <MX_RTC_Init+0xd0>)
 800127a:	f003 fcef 	bl	8004c5c <HAL_RTC_SetDate>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d004      	beq.n	800128e <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8001284:	f7ff ff9a 	bl	80011bc <Error_Handler>
  }
  return;
 8001288:	e001      	b.n	800128e <MX_RTC_Init+0xc6>
			return;
 800128a:	bf00      	nop
 800128c:	e000      	b.n	8001290 <MX_RTC_Init+0xc8>
  return;
 800128e:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20001688 	.word	0x20001688
 800129c:	40002800 	.word	0x40002800

080012a0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b0a6      	sub	sp, #152	; 0x98
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	2290      	movs	r2, #144	; 0x90
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f00d fcc3 	bl	800ec3c <memset>
  if(rtcHandle->Instance==RTC)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_RTC_MspInit+0x54>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d114      	bne.n	80012ea <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012c0:	2320      	movs	r3, #32
 80012c2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 fe0c 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80012da:	f7ff ff6f 	bl	80011bc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_RTC_MspInit+0x58>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <HAL_RTC_MspInit+0x58>)
 80012e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e8:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80012ea:	bf00      	nop
 80012ec:	3798      	adds	r7, #152	; 0x98
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40002800 	.word	0x40002800
 80012f8:	40023800 	.word	0x40023800

080012fc <MX_SAI2_Init>:
SAI_HandleTypeDef hsai_BlockB2;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockB2.Instance = SAI2_Block_B;
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001302:	4a2b      	ldr	r2, [pc, #172]	; (80013b0 <MX_SAI2_Init+0xb4>)
 8001304:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001308:	2200      	movs	r2, #0
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_SAI2_Init+0xb0>)
 800130e:	2200      	movs	r2, #0
 8001310:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001314:	2280      	movs	r2, #128	; 0x80
 8001316:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <MX_SAI2_Init+0xb0>)
 800131a:	2200      	movs	r2, #0
 800131c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001320:	2200      	movs	r2, #0
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_SAI2_Init+0xb0>)
 800132c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001330:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001334:	2200      	movs	r2, #0
 8001336:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_SAI2_Init+0xb0>)
 800133a:	2201      	movs	r2, #1
 800133c:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001340:	4a1c      	ldr	r2, [pc, #112]	; (80013b4 <MX_SAI2_Init+0xb8>)
 8001342:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <MX_SAI2_Init+0xb0>)
 800134c:	2200      	movs	r2, #0
 800134e:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001352:	2200      	movs	r2, #0
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001358:	2200      	movs	r2, #0
 800135a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 32;
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <MX_SAI2_Init+0xb0>)
 800135e:	2220      	movs	r2, #32
 8001360:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 16;
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001364:	2210      	movs	r2, #16
 8001366:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <MX_SAI2_Init+0xb0>)
 800136a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800136e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001370:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001372:	2200      	movs	r2, #0
 8001374:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001378:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800137c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001380:	2200      	movs	r2, #0
 8001382:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001386:	2200      	movs	r2, #0
 8001388:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <MX_SAI2_Init+0xb0>)
 800138c:	2202      	movs	r2, #2
 800138e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000003;
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001392:	2203      	movs	r2, #3
 8001394:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <MX_SAI2_Init+0xb0>)
 8001398:	f003 fdb8 	bl	8004f0c <HAL_SAI_Init>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 80013a2:	f7ff ff0b 	bl	80011bc <Error_Handler>

  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80013a6:	bf00      	nop
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	200016a8 	.word	0x200016a8
 80013b0:	40015c24 	.word	0x40015c24
 80013b4:	0002ee00 	.word	0x0002ee00

080013b8 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_B)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a4a      	ldr	r2, [pc, #296]	; (80014f0 <HAL_SAI_MspInit+0x138>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	f040 808e 	bne.w	80014e8 <HAL_SAI_MspInit+0x130>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 80013cc:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <HAL_SAI_MspInit+0x13c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d10b      	bne.n	80013ec <HAL_SAI_MspInit+0x34>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80013d4:	4b48      	ldr	r3, [pc, #288]	; (80014f8 <HAL_SAI_MspInit+0x140>)
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	4a47      	ldr	r2, [pc, #284]	; (80014f8 <HAL_SAI_MspInit+0x140>)
 80013da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013de:	6453      	str	r3, [r2, #68]	; 0x44
 80013e0:	4b45      	ldr	r3, [pc, #276]	; (80014f8 <HAL_SAI_MspInit+0x140>)
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 80013ec:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_SAI_MspInit+0x13c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	4a40      	ldr	r2, [pc, #256]	; (80014f4 <HAL_SAI_MspInit+0x13c>)
 80013f4:	6013      	str	r3, [r2, #0]
    PE6     ------> SAI2_MCLK_B
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f6:	2340      	movs	r3, #64	; 0x40
 80013f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001406:	230a      	movs	r3, #10
 8001408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	483a      	ldr	r0, [pc, #232]	; (80014fc <HAL_SAI_MspInit+0x144>)
 8001412:	f001 fe91 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800141a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001428:	230a      	movs	r3, #10
 800142a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	4619      	mov	r1, r3
 8001432:	4833      	ldr	r0, [pc, #204]	; (8001500 <HAL_SAI_MspInit+0x148>)
 8001434:	f001 fe80 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001438:	2301      	movs	r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001448:	230a      	movs	r3, #10
 800144a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	4619      	mov	r1, r3
 8001452:	482c      	ldr	r0, [pc, #176]	; (8001504 <HAL_SAI_MspInit+0x14c>)
 8001454:	f001 fe70 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001458:	2304      	movs	r3, #4
 800145a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145c:	2302      	movs	r3, #2
 800145e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001464:	2303      	movs	r3, #3
 8001466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001468:	2308      	movs	r3, #8
 800146a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	4824      	ldr	r0, [pc, #144]	; (8001504 <HAL_SAI_MspInit+0x14c>)
 8001474:	f001 fe60 	bl	8003138 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_SAI_MspInit+0x150>)
 800147a:	4a24      	ldr	r2, [pc, #144]	; (800150c <HAL_SAI_MspInit+0x154>)
 800147c:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <HAL_SAI_MspInit+0x150>)
 8001480:	f04f 52a0 	mov.w	r2, #335544320	; 0x14000000
 8001484:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001486:	4b20      	ldr	r3, [pc, #128]	; (8001508 <HAL_SAI_MspInit+0x150>)
 8001488:	2240      	movs	r2, #64	; 0x40
 800148a:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	4b1e      	ldr	r3, [pc, #120]	; (8001508 <HAL_SAI_MspInit+0x150>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001492:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_SAI_MspInit+0x150>)
 8001494:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001498:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <HAL_SAI_MspInit+0x150>)
 800149c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a0:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_SAI_MspInit+0x150>)
 80014a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a8:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_SAI_MspInit+0x150>)
 80014ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b0:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_HIGH;
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_SAI_MspInit+0x150>)
 80014b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014b8:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_SAI_MspInit+0x150>)
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80014c0:	4811      	ldr	r0, [pc, #68]	; (8001508 <HAL_SAI_MspInit+0x150>)
 80014c2:	f001 fa93 	bl	80029ec <HAL_DMA_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_SAI_MspInit+0x118>
    {
      Error_Handler();
 80014cc:	f7ff fe76 	bl	80011bc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4a0d      	ldr	r2, [pc, #52]	; (8001508 <HAL_SAI_MspInit+0x150>)
 80014d4:	671a      	str	r2, [r3, #112]	; 0x70
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <HAL_SAI_MspInit+0x150>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <HAL_SAI_MspInit+0x150>)
 80014e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80014e2:	4a09      	ldr	r2, [pc, #36]	; (8001508 <HAL_SAI_MspInit+0x150>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80014e8:	bf00      	nop
 80014ea:	3720      	adds	r7, #32
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40015c24 	.word	0x40015c24
 80014f4:	2000178c 	.word	0x2000178c
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40021000 	.word	0x40021000
 8001500:	40021800 	.word	0x40021800
 8001504:	40020000 	.word	0x40020000
 8001508:	2000172c 	.word	0x2000172c
 800150c:	40026428 	.word	0x40026428

08001510 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 8001516:	4a0d      	ldr	r2, [pc, #52]	; (800154c <MX_SDMMC1_SD_Init+0x3c>)
 8001518:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	20001790 	.word	0x20001790
 800154c:	40012c00 	.word	0x40012c00

08001550 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b0ae      	sub	sp, #184	; 0xb8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	2290      	movs	r2, #144	; 0x90
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f00d fb63 	bl	800ec3c <memset>
  if(sdHandle->Instance==SDMMC1)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a74      	ldr	r2, [pc, #464]	; (800174c <HAL_SD_MspInit+0x1fc>)
 800157c:	4293      	cmp	r3, r2
 800157e:	f040 80e0 	bne.w	8001742 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001582:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001586:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fca7 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80015a4:	f7ff fe0a 	bl	80011bc <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015a8:	4b69      	ldr	r3, [pc, #420]	; (8001750 <HAL_SD_MspInit+0x200>)
 80015aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ac:	4a68      	ldr	r2, [pc, #416]	; (8001750 <HAL_SD_MspInit+0x200>)
 80015ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015b2:	6453      	str	r3, [r2, #68]	; 0x44
 80015b4:	4b66      	ldr	r3, [pc, #408]	; (8001750 <HAL_SD_MspInit+0x200>)
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c0:	4b63      	ldr	r3, [pc, #396]	; (8001750 <HAL_SD_MspInit+0x200>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	4a62      	ldr	r2, [pc, #392]	; (8001750 <HAL_SD_MspInit+0x200>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30
 80015cc:	4b60      	ldr	r3, [pc, #384]	; (8001750 <HAL_SD_MspInit+0x200>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	4b5d      	ldr	r3, [pc, #372]	; (8001750 <HAL_SD_MspInit+0x200>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	4a5c      	ldr	r2, [pc, #368]	; (8001750 <HAL_SD_MspInit+0x200>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	6313      	str	r3, [r2, #48]	; 0x30
 80015e4:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <HAL_SD_MspInit+0x200>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80015f0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800160a:	230c      	movs	r3, #12
 800160c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001610:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001614:	4619      	mov	r1, r3
 8001616:	484f      	ldr	r0, [pc, #316]	; (8001754 <HAL_SD_MspInit+0x204>)
 8001618:	f001 fd8e 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800161c:	2304      	movs	r3, #4
 800161e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001634:	230c      	movs	r3, #12
 8001636:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800163e:	4619      	mov	r1, r3
 8001640:	4845      	ldr	r0, [pc, #276]	; (8001758 <HAL_SD_MspInit+0x208>)
 8001642:	f001 fd79 	bl	8003138 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 8001646:	4b45      	ldr	r3, [pc, #276]	; (800175c <HAL_SD_MspInit+0x20c>)
 8001648:	4a45      	ldr	r2, [pc, #276]	; (8001760 <HAL_SD_MspInit+0x210>)
 800164a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800164c:	4b43      	ldr	r3, [pc, #268]	; (800175c <HAL_SD_MspInit+0x20c>)
 800164e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001652:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001654:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_SD_MspInit+0x20c>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800165a:	4b40      	ldr	r3, [pc, #256]	; (800175c <HAL_SD_MspInit+0x20c>)
 800165c:	2200      	movs	r2, #0
 800165e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001660:	4b3e      	ldr	r3, [pc, #248]	; (800175c <HAL_SD_MspInit+0x20c>)
 8001662:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001666:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001668:	4b3c      	ldr	r3, [pc, #240]	; (800175c <HAL_SD_MspInit+0x20c>)
 800166a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800166e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001670:	4b3a      	ldr	r3, [pc, #232]	; (800175c <HAL_SD_MspInit+0x20c>)
 8001672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001676:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001678:	4b38      	ldr	r3, [pc, #224]	; (800175c <HAL_SD_MspInit+0x20c>)
 800167a:	2220      	movs	r2, #32
 800167c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <HAL_SD_MspInit+0x20c>)
 8001680:	2200      	movs	r2, #0
 8001682:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001684:	4b35      	ldr	r3, [pc, #212]	; (800175c <HAL_SD_MspInit+0x20c>)
 8001686:	2204      	movs	r2, #4
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800168a:	4b34      	ldr	r3, [pc, #208]	; (800175c <HAL_SD_MspInit+0x20c>)
 800168c:	2203      	movs	r2, #3
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001690:	4b32      	ldr	r3, [pc, #200]	; (800175c <HAL_SD_MspInit+0x20c>)
 8001692:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001698:	4b30      	ldr	r3, [pc, #192]	; (800175c <HAL_SD_MspInit+0x20c>)
 800169a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800169e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80016a0:	482e      	ldr	r0, [pc, #184]	; (800175c <HAL_SD_MspInit+0x20c>)
 80016a2:	f001 f9a3 	bl	80029ec <HAL_DMA_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80016ac:	f7ff fd86 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a2a      	ldr	r2, [pc, #168]	; (800175c <HAL_SD_MspInit+0x20c>)
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
 80016b6:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_SD_MspInit+0x20c>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <HAL_SD_MspInit+0x214>)
 80016be:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <HAL_SD_MspInit+0x218>)
 80016c0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80016c2:	4b28      	ldr	r3, [pc, #160]	; (8001764 <HAL_SD_MspInit+0x214>)
 80016c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016c8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016ca:	4b26      	ldr	r3, [pc, #152]	; (8001764 <HAL_SD_MspInit+0x214>)
 80016cc:	2240      	movs	r2, #64	; 0x40
 80016ce:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d0:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_SD_MspInit+0x214>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016d6:	4b23      	ldr	r3, [pc, #140]	; (8001764 <HAL_SD_MspInit+0x214>)
 80016d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016dc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016de:	4b21      	ldr	r3, [pc, #132]	; (8001764 <HAL_SD_MspInit+0x214>)
 80016e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016e4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <HAL_SD_MspInit+0x214>)
 80016e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ec:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_SD_MspInit+0x214>)
 80016f0:	2220      	movs	r2, #32
 80016f2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016f4:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_SD_MspInit+0x214>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	; (8001764 <HAL_SD_MspInit+0x214>)
 80016fc:	2204      	movs	r2, #4
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001700:	4b18      	ldr	r3, [pc, #96]	; (8001764 <HAL_SD_MspInit+0x214>)
 8001702:	2203      	movs	r2, #3
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_SD_MspInit+0x214>)
 8001708:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800170c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_SD_MspInit+0x214>)
 8001710:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001716:	4813      	ldr	r0, [pc, #76]	; (8001764 <HAL_SD_MspInit+0x214>)
 8001718:	f001 f968 	bl	80029ec <HAL_DMA_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001722:	f7ff fd4b 	bl	80011bc <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a0e      	ldr	r2, [pc, #56]	; (8001764 <HAL_SD_MspInit+0x214>)
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
 800172c:	4a0d      	ldr	r2, [pc, #52]	; (8001764 <HAL_SD_MspInit+0x214>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2031      	movs	r0, #49	; 0x31
 8001738:	f000 fdbd 	bl	80022b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800173c:	2031      	movs	r0, #49	; 0x31
 800173e:	f000 fdd6 	bl	80022ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8001742:	bf00      	nop
 8001744:	37b8      	adds	r7, #184	; 0xb8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40012c00 	.word	0x40012c00
 8001750:	40023800 	.word	0x40023800
 8001754:	40020800 	.word	0x40020800
 8001758:	40020c00 	.word	0x40020c00
 800175c:	20001814 	.word	0x20001814
 8001760:	400264a0 	.word	0x400264a0
 8001764:	20001874 	.word	0x20001874
 8001768:	40026458 	.word	0x40026458

0800176c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <HAL_MspInit+0x44>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a0e      	ldr	r2, [pc, #56]	; (80017b0 <HAL_MspInit+0x44>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <HAL_MspInit+0x44>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <HAL_MspInit+0x44>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a08      	ldr	r2, [pc, #32]	; (80017b0 <HAL_MspInit+0x44>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_MspInit+0x44>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	603b      	str	r3, [r7, #0]
 80017a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001800:	f000 f9a6 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH_BUTTON_Pin);
 800180c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001810:	f001 fe70 	bl	80034f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <SDMMC1_IRQHandler+0x10>)
 800181e:	f003 ffab 	bl	8005778 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20001790 	.word	0x20001790

0800182c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <DMA2_Stream0_IRQHandler+0x10>)
 8001832:	f001 fa0b 	bl	8002c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200015bc 	.word	0x200015bc

08001840 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001844:	4802      	ldr	r0, [pc, #8]	; (8001850 <DMA2_Stream1_IRQHandler+0x10>)
 8001846:	f001 fa01 	bl	8002c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000172c 	.word	0x2000172c

08001854 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <DMA2_Stream3_IRQHandler+0x10>)
 800185a:	f001 f9f7 	bl	8002c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20001874 	.word	0x20001874

08001868 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <DMA2_Stream5_IRQHandler+0x10>)
 800186e:	f001 f9ed 	bl	8002c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	2000161c 	.word	0x2000161c

0800187c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <DMA2_Stream6_IRQHandler+0x10>)
 8001882:	f001 f9e3 	bl	8002c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20001814 	.word	0x20001814

08001890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001898:	4a14      	ldr	r2, [pc, #80]	; (80018ec <_sbrk+0x5c>)
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <_sbrk+0x60>)
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a4:	4b13      	ldr	r3, [pc, #76]	; (80018f4 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d102      	bne.n	80018b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <_sbrk+0x64>)
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <_sbrk+0x68>)
 80018b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d207      	bcs.n	80018d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c0:	f00d f984 	bl	800ebcc <__errno>
 80018c4:	4603      	mov	r3, r0
 80018c6:	220c      	movs	r2, #12
 80018c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ce:	e009      	b.n	80018e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <_sbrk+0x64>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4413      	add	r3, r2
 80018de:	4a05      	ldr	r2, [pc, #20]	; (80018f4 <_sbrk+0x64>)
 80018e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20080000 	.word	0x20080000
 80018f0:	00000800 	.word	0x00000800
 80018f4:	200018d4 	.word	0x200018d4
 80018f8:	20001f40 	.word	0x20001f40

080018fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <SystemInit+0x20>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <SystemInit+0x20>)
 8001908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800190c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <MX_UART4_Init+0x58>)
 8001926:	4a15      	ldr	r2, [pc, #84]	; (800197c <MX_UART4_Init+0x5c>)
 8001928:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <MX_UART4_Init+0x58>)
 800192c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001930:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <MX_UART4_Init+0x58>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001938:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <MX_UART4_Init+0x58>)
 800193a:	2200      	movs	r2, #0
 800193c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <MX_UART4_Init+0x58>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_UART4_Init+0x58>)
 8001946:	220c      	movs	r2, #12
 8001948:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <MX_UART4_Init+0x58>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001950:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_UART4_Init+0x58>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <MX_UART4_Init+0x58>)
 8001958:	2200      	movs	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <MX_UART4_Init+0x58>)
 800195e:	2200      	movs	r2, #0
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001962:	4805      	ldr	r0, [pc, #20]	; (8001978 <MX_UART4_Init+0x58>)
 8001964:	f004 ffb3 	bl	80068ce <HAL_UART_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800196e:	f7ff fc25 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200018d8 	.word	0x200018d8
 800197c:	40004c00 	.word	0x40004c00

08001980 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0ae      	sub	sp, #184	; 0xb8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2290      	movs	r2, #144	; 0x90
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00d f94b 	bl	800ec3c <memset>
  if(uartHandle->Instance==UART4)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a32      	ldr	r2, [pc, #200]	; (8001a74 <HAL_UART_MspInit+0xf4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d15d      	bne.n	8001a6c <HAL_UART_MspInit+0xec>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80019b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80019b6:	2300      	movs	r3, #0
 80019b8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 fa94 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019ca:	f7ff fbf7 	bl	80011bc <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <HAL_UART_MspInit+0xf8>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a29      	ldr	r2, [pc, #164]	; (8001a78 <HAL_UART_MspInit+0xf8>)
 80019d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_UART_MspInit+0xf8>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_UART_MspInit+0xf8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a23      	ldr	r2, [pc, #140]	; (8001a78 <HAL_UART_MspInit+0xf8>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_UART_MspInit+0xf8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_UART_MspInit+0xf8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a1d      	ldr	r2, [pc, #116]	; (8001a78 <HAL_UART_MspInit+0xf8>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <HAL_UART_MspInit+0xf8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a16:	2301      	movs	r3, #1
 8001a18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001a2e:	2308      	movs	r3, #8
 8001a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4810      	ldr	r0, [pc, #64]	; (8001a7c <HAL_UART_MspInit+0xfc>)
 8001a3c:	f001 fb7c 	bl	8003138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8001a5a:	2306      	movs	r3, #6
 8001a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a64:	4619      	mov	r1, r3
 8001a66:	4806      	ldr	r0, [pc, #24]	; (8001a80 <HAL_UART_MspInit+0x100>)
 8001a68:	f001 fb66 	bl	8003138 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	37b8      	adds	r7, #184	; 0xb8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40004c00 	.word	0x40004c00
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020c00 	.word	0x40020c00
 8001a80:	40020000 	.word	0x40020000

08001a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001abc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8a:	490e      	ldr	r1, [pc, #56]	; (8001ac4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a8c:	4a0e      	ldr	r2, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa0:	4c0b      	ldr	r4, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001aae:	f7ff ff25 	bl	80018fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f00d f891 	bl	800ebd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ab6:	f7ff f9e9 	bl	8000e8c <main>
  bx  lr    
 8001aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001abc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	2000141c 	.word	0x2000141c
  ldr r2, =_sidata
 8001ac8:	0816e218 	.word	0x0816e218
  ldr r2, =_sbss
 8001acc:	2000141c 	.word	0x2000141c
  ldr r4, =_ebss
 8001ad0:	20001f3c 	.word	0x20001f3c

08001ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC_IRQHandler>

08001ad6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ada:	2003      	movs	r0, #3
 8001adc:	f000 fbe0 	bl	80022a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae0:	200f      	movs	r0, #15
 8001ae2:	f000 f805 	bl	8001af0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ae6:	f7ff fe41 	bl	800176c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x54>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x58>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f000 fbfb 	bl	800230a <HAL_SYSTICK_Config>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e00e      	b.n	8001b3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d80a      	bhi.n	8001b3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b24:	2200      	movs	r2, #0
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b2c:	f000 fbc3 	bl	80022b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <HAL_InitTick+0x5c>)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x24>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	4a04      	ldr	r2, [pc, #16]	; (8001b74 <HAL_IncTick+0x24>)
 8001b62:	6013      	str	r3, [r2, #0]
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008
 8001b74:	20001960 	.word	0x20001960

08001b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	; (8001b8c <HAL_GetTick+0x14>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	20001960 	.word	0x20001960

08001b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b98:	f7ff ffee 	bl	8001b78 <HAL_GetTick>
 8001b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ba8:	d005      	beq.n	8001bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_Delay+0x44>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff ffde 	bl	8001b78 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d8f7      	bhi.n	8001bb8 <HAL_Delay+0x28>
  {
  }
}
 8001bc8:	bf00      	nop
 8001bca:	bf00      	nop
 8001bcc:	3710      	adds	r7, #16
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000008 	.word	0x20000008

08001bd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e031      	b.n	8001c52 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe fd48 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d116      	bne.n	8001c44 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c1a:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <HAL_ADC_Init+0x84>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	f043 0202 	orr.w	r2, r3, #2
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f970 	bl	8001f0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f023 0303 	bic.w	r3, r3, #3
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
 8001c42:	e001      	b.n	8001c48 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	ffffeefd 	.word	0xffffeefd

08001c60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x1c>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e136      	b.n	8001eea <HAL_ADC_ConfigChannel+0x28a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b09      	cmp	r3, #9
 8001c8a:	d93a      	bls.n	8001d02 <HAL_ADC_ConfigChannel+0xa2>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c94:	d035      	beq.n	8001d02 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68d9      	ldr	r1, [r3, #12]
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	3b1e      	subs	r3, #30
 8001cac:	2207      	movs	r2, #7
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	400a      	ands	r2, r1
 8001cba:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a8d      	ldr	r2, [pc, #564]	; (8001ef8 <HAL_ADC_ConfigChannel+0x298>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d10a      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68d9      	ldr	r1, [r3, #12]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	061a      	lsls	r2, r3, #24
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cda:	e035      	b.n	8001d48 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68d9      	ldr	r1, [r3, #12]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4618      	mov	r0, r3
 8001cee:	4603      	mov	r3, r0
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4403      	add	r3, r0
 8001cf4:	3b1e      	subs	r3, #30
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d00:	e022      	b.n	8001d48 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6919      	ldr	r1, [r3, #16]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	2207      	movs	r2, #7
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43da      	mvns	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	400a      	ands	r2, r1
 8001d24:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6919      	ldr	r1, [r3, #16]
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	4603      	mov	r3, r0
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4403      	add	r3, r0
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b06      	cmp	r3, #6
 8001d4e:	d824      	bhi.n	8001d9a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685a      	ldr	r2, [r3, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	3b05      	subs	r3, #5
 8001d62:	221f      	movs	r2, #31
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	400a      	ands	r2, r1
 8001d70:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	4613      	mov	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b05      	subs	r3, #5
 8001d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	635a      	str	r2, [r3, #52]	; 0x34
 8001d98:	e04c      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d824      	bhi.n	8001dec <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	3b23      	subs	r3, #35	; 0x23
 8001db4:	221f      	movs	r2, #31
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b23      	subs	r3, #35	; 0x23
 8001dde:	fa00 f203 	lsl.w	r2, r0, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dea:	e023      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3b41      	subs	r3, #65	; 0x41
 8001dfe:	221f      	movs	r2, #31
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43da      	mvns	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	400a      	ands	r2, r1
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	3b41      	subs	r3, #65	; 0x41
 8001e28:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a30      	ldr	r2, [pc, #192]	; (8001efc <HAL_ADC_ConfigChannel+0x29c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10a      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1f4>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e46:	d105      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e48:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	4a2c      	ldr	r2, [pc, #176]	; (8001f00 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e4e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e52:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a28      	ldr	r2, [pc, #160]	; (8001efc <HAL_ADC_ConfigChannel+0x29c>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d10f      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x21e>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b12      	cmp	r3, #18
 8001e64:	d10b      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	4a25      	ldr	r2, [pc, #148]	; (8001f00 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e70:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e7c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_ADC_ConfigChannel+0x29c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d12b      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x280>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <HAL_ADC_ConfigChannel+0x298>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d003      	beq.n	8001e9a <HAL_ADC_ConfigChannel+0x23a>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b11      	cmp	r3, #17
 8001e98:	d122      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ea0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ea4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a15      	ldr	r2, [pc, #84]	; (8001f00 <HAL_ADC_ConfigChannel+0x2a0>)
 8001eac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eb0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <HAL_ADC_ConfigChannel+0x298>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d111      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001ebc:	4b11      	ldr	r3, [pc, #68]	; (8001f04 <HAL_ADC_ConfigChannel+0x2a4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a11      	ldr	r2, [pc, #68]	; (8001f08 <HAL_ADC_ConfigChannel+0x2a8>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0c9a      	lsrs	r2, r3, #18
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ed2:	e002      	b.n	8001eda <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f9      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	10000012 	.word	0x10000012
 8001efc:	40012000 	.word	0x40012000
 8001f00:	40012300 	.word	0x40012300
 8001f04:	20000000 	.word	0x20000000
 8001f08:	431bde83 	.word	0x431bde83

08001f0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f14:	4b78      	ldr	r3, [pc, #480]	; (80020f8 <ADC_Init+0x1ec>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a77      	ldr	r2, [pc, #476]	; (80020f8 <ADC_Init+0x1ec>)
 8001f1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f1e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f20:	4b75      	ldr	r3, [pc, #468]	; (80020f8 <ADC_Init+0x1ec>)
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4973      	ldr	r1, [pc, #460]	; (80020f8 <ADC_Init+0x1ec>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	021a      	lsls	r2, r3, #8
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685a      	ldr	r2, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6899      	ldr	r1, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9a:	4a58      	ldr	r2, [pc, #352]	; (80020fc <ADC_Init+0x1f0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d022      	beq.n	8001fe6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6899      	ldr	r1, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6899      	ldr	r1, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	e00f      	b.n	8002006 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002004:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0202 	bic.w	r2, r2, #2
 8002014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6899      	ldr	r1, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	005a      	lsls	r2, r3, #1
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01b      	beq.n	800206c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002042:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002052:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6859      	ldr	r1, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	3b01      	subs	r3, #1
 8002060:	035a      	lsls	r2, r3, #13
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	e007      	b.n	800207c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800207a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	3b01      	subs	r3, #1
 8002098:	051a      	lsls	r2, r3, #20
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6899      	ldr	r1, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020be:	025a      	lsls	r2, r3, #9
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6899      	ldr	r1, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	029a      	lsls	r2, r3, #10
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	609a      	str	r2, [r3, #8]
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40012300 	.word	0x40012300
 80020fc:	0f000001 	.word	0x0f000001

08002100 <__NVIC_SetPriorityGrouping>:
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <__NVIC_SetPriorityGrouping+0x40>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800211c:	4013      	ands	r3, r2
 800211e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <__NVIC_SetPriorityGrouping+0x44>)
 800212a:	4313      	orrs	r3, r2
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	; (8002140 <__NVIC_SetPriorityGrouping+0x40>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00
 8002144:	05fa0000 	.word	0x05fa0000

08002148 <__NVIC_GetPriorityGrouping>:
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800214c:	4b04      	ldr	r3, [pc, #16]	; (8002160 <__NVIC_GetPriorityGrouping+0x18>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	0a1b      	lsrs	r3, r3, #8
 8002152:	f003 0307 	and.w	r3, r3, #7
}
 8002156:	4618      	mov	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <__NVIC_EnableIRQ>:
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	db0b      	blt.n	800218e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002176:	79fb      	ldrb	r3, [r7, #7]
 8002178:	f003 021f 	and.w	r2, r3, #31
 800217c:	4907      	ldr	r1, [pc, #28]	; (800219c <__NVIC_EnableIRQ+0x38>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	095b      	lsrs	r3, r3, #5
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100

080021a0 <__NVIC_SetPriority>:
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	db0a      	blt.n	80021ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	490c      	ldr	r1, [pc, #48]	; (80021ec <__NVIC_SetPriority+0x4c>)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	440b      	add	r3, r1
 80021c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021c8:	e00a      	b.n	80021e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	4908      	ldr	r1, [pc, #32]	; (80021f0 <__NVIC_SetPriority+0x50>)
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	3b04      	subs	r3, #4
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	440b      	add	r3, r1
 80021de:	761a      	strb	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000e100 	.word	0xe000e100
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <NVIC_EncodePriority>:
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800223c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	43d9      	mvns	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	4313      	orrs	r3, r2
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800226c:	d301      	bcc.n	8002272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226e:	2301      	movs	r3, #1
 8002270:	e00f      	b.n	8002292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <SysTick_Config+0x40>)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3b01      	subs	r3, #1
 8002278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227a:	210f      	movs	r1, #15
 800227c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002280:	f7ff ff8e 	bl	80021a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002284:	4b05      	ldr	r3, [pc, #20]	; (800229c <SysTick_Config+0x40>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228a:	4b04      	ldr	r3, [pc, #16]	; (800229c <SysTick_Config+0x40>)
 800228c:	2207      	movs	r2, #7
 800228e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	e000e010 	.word	0xe000e010

080022a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff ff29 	bl	8002100 <__NVIC_SetPriorityGrouping>
}
 80022ae:	bf00      	nop
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b086      	sub	sp, #24
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	4603      	mov	r3, r0
 80022be:	60b9      	str	r1, [r7, #8]
 80022c0:	607a      	str	r2, [r7, #4]
 80022c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c8:	f7ff ff3e 	bl	8002148 <__NVIC_GetPriorityGrouping>
 80022cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	68b9      	ldr	r1, [r7, #8]
 80022d2:	6978      	ldr	r0, [r7, #20]
 80022d4:	f7ff ff8e 	bl	80021f4 <NVIC_EncodePriority>
 80022d8:	4602      	mov	r2, r0
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	4611      	mov	r1, r2
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff5d 	bl	80021a0 <__NVIC_SetPriority>
}
 80022e6:	bf00      	nop
 80022e8:	3718      	adds	r7, #24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7ff ff31 	bl	8002164 <__NVIC_EnableIRQ>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffa2 	bl	800225c <SysTick_Config>
 8002318:	4603      	mov	r3, r0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e054      	b.n	80023e0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7f5b      	ldrb	r3, [r3, #29]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d105      	bne.n	800234c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7fe f9e2 	bl	8000710 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	791b      	ldrb	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10c      	bne.n	8002374 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a22      	ldr	r2, [pc, #136]	; (80023e8 <HAL_CRC_Init+0xc4>)
 8002360:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0218 	bic.w	r2, r2, #24
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	e00c      	b.n	800238e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6899      	ldr	r1, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	461a      	mov	r2, r3
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f834 	bl	80023ec <HAL_CRCEx_Polynomial_Set>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e028      	b.n	80023e0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	795b      	ldrb	r3, [r3, #5]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800239e:	611a      	str	r2, [r3, #16]
 80023a0:	e004      	b.n	80023ac <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6912      	ldr	r2, [r2, #16]
 80023aa:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	695a      	ldr	r2, [r3, #20]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	04c11db7 	.word	0x04c11db7

080023ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80023fc:	231f      	movs	r3, #31
 80023fe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002400:	bf00      	nop
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	613a      	str	r2, [r7, #16]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <HAL_CRCEx_Polynomial_Set+0x34>
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	f003 031f 	and.w	r3, r3, #31
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0f0      	beq.n	8002402 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b18      	cmp	r3, #24
 8002424:	d846      	bhi.n	80024b4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002426:	a201      	add	r2, pc, #4	; (adr r2, 800242c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242c:	080024bb 	.word	0x080024bb
 8002430:	080024b5 	.word	0x080024b5
 8002434:	080024b5 	.word	0x080024b5
 8002438:	080024b5 	.word	0x080024b5
 800243c:	080024b5 	.word	0x080024b5
 8002440:	080024b5 	.word	0x080024b5
 8002444:	080024b5 	.word	0x080024b5
 8002448:	080024b5 	.word	0x080024b5
 800244c:	080024a9 	.word	0x080024a9
 8002450:	080024b5 	.word	0x080024b5
 8002454:	080024b5 	.word	0x080024b5
 8002458:	080024b5 	.word	0x080024b5
 800245c:	080024b5 	.word	0x080024b5
 8002460:	080024b5 	.word	0x080024b5
 8002464:	080024b5 	.word	0x080024b5
 8002468:	080024b5 	.word	0x080024b5
 800246c:	0800249d 	.word	0x0800249d
 8002470:	080024b5 	.word	0x080024b5
 8002474:	080024b5 	.word	0x080024b5
 8002478:	080024b5 	.word	0x080024b5
 800247c:	080024b5 	.word	0x080024b5
 8002480:	080024b5 	.word	0x080024b5
 8002484:	080024b5 	.word	0x080024b5
 8002488:	080024b5 	.word	0x080024b5
 800248c:	08002491 	.word	0x08002491
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	2b06      	cmp	r3, #6
 8002494:	d913      	bls.n	80024be <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800249a:	e010      	b.n	80024be <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b07      	cmp	r3, #7
 80024a0:	d90f      	bls.n	80024c2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024a6:	e00c      	b.n	80024c2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b0f      	cmp	r3, #15
 80024ac:	d90b      	bls.n	80024c6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80024b2:	e008      	b.n	80024c6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	75fb      	strb	r3, [r7, #23]
      break;
 80024b8:	e006      	b.n	80024c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024ba:	bf00      	nop
 80024bc:	e004      	b.n	80024c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024be:	bf00      	nop
 80024c0:	e002      	b.n	80024c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024c2:	bf00      	nop
 80024c4:	e000      	b.n	80024c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80024c6:	bf00      	nop
  }
  if (status == HAL_OK)
 80024c8:	7dfb      	ldrb	r3, [r7, #23]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10d      	bne.n	80024ea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f023 0118 	bic.w	r1, r3, #24
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80024ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e0ac      	b.n	8002664 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 fa20 	bl	8002954 <DFSDM_GetChannelFromInstance>
 8002514:	4603      	mov	r3, r0
 8002516:	4a55      	ldr	r2, [pc, #340]	; (800266c <HAL_DFSDM_ChannelInit+0x174>)
 8002518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e09f      	b.n	8002664 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f7fe fad7 	bl	8000ad8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800252a:	4b51      	ldr	r3, [pc, #324]	; (8002670 <HAL_DFSDM_ChannelInit+0x178>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	4a4f      	ldr	r2, [pc, #316]	; (8002670 <HAL_DFSDM_ChannelInit+0x178>)
 8002532:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8002534:	4b4e      	ldr	r3, [pc, #312]	; (8002670 <HAL_DFSDM_ChannelInit+0x178>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d125      	bne.n	8002588 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800253c:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <HAL_DFSDM_ChannelInit+0x17c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a4c      	ldr	r2, [pc, #304]	; (8002674 <HAL_DFSDM_ChannelInit+0x17c>)
 8002542:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002546:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002548:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_DFSDM_ChannelInit+0x17c>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	4948      	ldr	r1, [pc, #288]	; (8002674 <HAL_DFSDM_ChannelInit+0x17c>)
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002556:	4b47      	ldr	r3, [pc, #284]	; (8002674 <HAL_DFSDM_ChannelInit+0x17c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a46      	ldr	r2, [pc, #280]	; (8002674 <HAL_DFSDM_ChannelInit+0x17c>)
 800255c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002560:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	791b      	ldrb	r3, [r3, #4]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d108      	bne.n	800257c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 800256a:	4b42      	ldr	r3, [pc, #264]	; (8002674 <HAL_DFSDM_ChannelInit+0x17c>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	3b01      	subs	r3, #1
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	493f      	ldr	r1, [pc, #252]	; (8002674 <HAL_DFSDM_ChannelInit+0x17c>)
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800257c:	4b3d      	ldr	r3, [pc, #244]	; (8002674 <HAL_DFSDM_ChannelInit+0x17c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a3c      	ldr	r2, [pc, #240]	; (8002674 <HAL_DFSDM_ChannelInit+0x17c>)
 8002582:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002586:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002596:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025a6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80025ac:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 020f 	bic.w	r2, r2, #15
 80025c4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6819      	ldr	r1, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80025ec:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	6899      	ldr	r1, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	3b01      	subs	r3, #1
 80025fe:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f002 0207 	and.w	r2, r2, #7
 8002618:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002644:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f97e 	bl	8002954 <DFSDM_GetChannelFromInstance>
 8002658:	4602      	mov	r2, r0
 800265a:	4904      	ldr	r1, [pc, #16]	; (800266c <HAL_DFSDM_ChannelInit+0x174>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20001968 	.word	0x20001968
 8002670:	20001964 	.word	0x20001964
 8002674:	40017400 	.word	0x40017400

08002678 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e0c6      	b.n	8002818 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a64      	ldr	r2, [pc, #400]	; (8002820 <HAL_DFSDM_FilterInit+0x1a8>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d109      	bne.n	80026a8 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8002698:	2b01      	cmp	r3, #1
 800269a:	d003      	beq.n	80026a4 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e0b7      	b.n	8002818 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7fe f921 	bl	8000908 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80026d4:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7a1b      	ldrb	r3, [r3, #8]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d108      	bne.n	80026f0 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	e007      	b.n	8002700 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80026fe:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7a5b      	ldrb	r3, [r3, #9]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d108      	bne.n	800271a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e007      	b.n	800272a <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002728:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6819      	ldr	r1, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_DFSDM_FilterInit+0x1ac>)
 8002736:	400b      	ands	r3, r1
 8002738:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d108      	bne.n	8002754 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6819      	ldr	r1, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7c1b      	ldrb	r3, [r3, #16]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d108      	bne.n	800276e <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0210 	orr.w	r2, r2, #16
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e007      	b.n	800277e <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0210 	bic.w	r2, r2, #16
 800277c:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7c5b      	ldrb	r3, [r3, #17]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d108      	bne.n	8002798 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f042 0220 	orr.w	r2, r2, #32
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	e007      	b.n	80027a8 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0220 	bic.w	r2, r2, #32
 80027a6:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6959      	ldr	r1, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <HAL_DFSDM_FilterInit+0x1b0>)
 80027b4:	400b      	ands	r3, r1
 80027b6:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6959      	ldr	r1, [r3, #20]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	3b01      	subs	r3, #1
 80027c8:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80027ca:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80027d2:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7c1a      	ldrb	r2, [r3, #16]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0201 	orr.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40017500 	.word	0x40017500
 8002824:	ffff80f7 	.word	0xffff80f7
 8002828:	1c00ff00 	.word	0x1c00ff00

0800282c <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8002842:	2b00      	cmp	r3, #0
 8002844:	d02c      	beq.n	80028a0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800284c:	2bff      	cmp	r3, #255	; 0xff
 800284e:	d027      	beq.n	80028a0 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6819      	ldr	r1, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 800285c:	400b      	ands	r3, r1
 800285e:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d10d      	bne.n	8002882 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e00a      	b.n	8002898 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6819      	ldr	r1, [r3, #0]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	631a      	str	r2, [r3, #48]	; 0x30
 800289e:	e001      	b.n	80028a4 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80028a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	371c      	adds	r7, #28
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	f8fbffff 	.word	0xf8fbffff

080028b8 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80028d6:	2bff      	cmp	r3, #255	; 0xff
 80028d8:	d016      	beq.n	8002908 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	b292      	uxth	r2, r2
 80028e2:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 80028e4:	6838      	ldr	r0, [r7, #0]
 80028e6:	f000 f816 	bl	8002916 <DFSDM_GetInjChannelsNbr>
 80028ea:	4602      	mov	r2, r0
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d102      	bne.n	8002900 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	e000      	b.n	8002902 <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 8002900:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6493      	str	r3, [r2, #72]	; 0x48
 8002906:	e001      	b.n	800290c <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 8002916:	b480      	push	{r7}
 8002918:	b085      	sub	sp, #20
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	b29b      	uxth	r3, r3
 8002926:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8002928:	e00a      	b.n	8002940 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3301      	adds	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1f1      	bne.n	800292a <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <DFSDM_GetChannelFromInstance+0x7c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d102      	bne.n	800296a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	e02b      	b.n	80029c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <DFSDM_GetChannelFromInstance+0x80>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d102      	bne.n	8002978 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002972:	2301      	movs	r3, #1
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e024      	b.n	80029c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <DFSDM_GetChannelFromInstance+0x84>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d102      	bne.n	8002986 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002980:	2302      	movs	r3, #2
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e01d      	b.n	80029c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a14      	ldr	r2, [pc, #80]	; (80029dc <DFSDM_GetChannelFromInstance+0x88>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d102      	bne.n	8002994 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800298e:	2303      	movs	r3, #3
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	e016      	b.n	80029c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <DFSDM_GetChannelFromInstance+0x8c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d102      	bne.n	80029a2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 800299c:	2304      	movs	r3, #4
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e00f      	b.n	80029c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a0f      	ldr	r2, [pc, #60]	; (80029e4 <DFSDM_GetChannelFromInstance+0x90>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d102      	bne.n	80029b0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80029aa:	2305      	movs	r3, #5
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e008      	b.n	80029c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a0d      	ldr	r2, [pc, #52]	; (80029e8 <DFSDM_GetChannelFromInstance+0x94>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d102      	bne.n	80029be <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80029b8:	2306      	movs	r3, #6
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e001      	b.n	80029c2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80029be:	2307      	movs	r3, #7
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80029c2:	68fb      	ldr	r3, [r7, #12]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	40017400 	.word	0x40017400
 80029d4:	40017420 	.word	0x40017420
 80029d8:	40017440 	.word	0x40017440
 80029dc:	40017460 	.word	0x40017460
 80029e0:	40017480 	.word	0x40017480
 80029e4:	400174a0 	.word	0x400174a0
 80029e8:	400174c0 	.word	0x400174c0

080029ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff f8be 	bl	8001b78 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e099      	b.n	8002b3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a28:	e00f      	b.n	8002a4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a2a:	f7ff f8a5 	bl	8001b78 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b05      	cmp	r3, #5
 8002a36:	d908      	bls.n	8002a4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2203      	movs	r2, #3
 8002a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e078      	b.n	8002b3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e8      	bne.n	8002a2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <HAL_DMA_Init+0x158>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d107      	bne.n	8002ab4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	4313      	orrs	r3, r2
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f023 0307 	bic.w	r3, r3, #7
 8002aca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d117      	bne.n	8002b0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00e      	beq.n	8002b0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 faa5 	bl	8003040 <DMA_CheckFifoParam>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2240      	movs	r2, #64	; 0x40
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e016      	b.n	8002b3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fa5c 	bl	8002fd4 <DMA_CalcBaseAndBitshift>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	223f      	movs	r2, #63	; 0x3f
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	e010803f 	.word	0xe010803f

08002b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
 8002b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <HAL_DMA_Start_IT+0x26>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	e048      	b.n	8002c00 <HAL_DMA_Start_IT+0xb8>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d137      	bne.n	8002bf2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68b9      	ldr	r1, [r7, #8]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f9ee 	bl	8002f78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	223f      	movs	r2, #63	; 0x3f
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0216 	orr.w	r2, r2, #22
 8002bb6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002bc6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0208 	orr.w	r2, r2, #8
 8002bde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e005      	b.n	8002bfe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d004      	beq.n	8002c26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2280      	movs	r2, #128	; 0x80
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e00c      	b.n	8002c40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2205      	movs	r2, #5
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002c58:	4b8e      	ldr	r3, [pc, #568]	; (8002e94 <HAL_DMA_IRQHandler+0x248>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a8e      	ldr	r2, [pc, #568]	; (8002e98 <HAL_DMA_IRQHandler+0x24c>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0a9b      	lsrs	r3, r3, #10
 8002c64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c76:	2208      	movs	r2, #8
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01a      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0204 	bic.w	r2, r2, #4
 8002c9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d012      	beq.n	8002cee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2201      	movs	r2, #1
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	f043 0202 	orr.w	r2, r3, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d012      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00b      	beq.n	8002d24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	2204      	movs	r2, #4
 8002d12:	409a      	lsls	r2, r3
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1c:	f043 0204 	orr.w	r2, r3, #4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d28:	2210      	movs	r2, #16
 8002d2a:	409a      	lsls	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d043      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d03c      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d46:	2210      	movs	r2, #16
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d018      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d108      	bne.n	8002d7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d024      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	4798      	blx	r3
 8002d7a:	e01f      	b.n	8002dbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d01b      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	4798      	blx	r3
 8002d8c:	e016      	b.n	8002dbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d107      	bne.n	8002dac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0208 	bic.w	r2, r2, #8
 8002daa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d003      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	409a      	lsls	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 808f 	beq.w	8002eec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8087 	beq.w	8002eec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	2220      	movs	r2, #32
 8002de4:	409a      	lsls	r2, r3
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b05      	cmp	r3, #5
 8002df4:	d136      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0216 	bic.w	r2, r2, #22
 8002e04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695a      	ldr	r2, [r3, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d103      	bne.n	8002e26 <HAL_DMA_IRQHandler+0x1da>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0208 	bic.w	r2, r2, #8
 8002e34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3a:	223f      	movs	r2, #63	; 0x3f
 8002e3c:	409a      	lsls	r2, r3
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d07e      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	4798      	blx	r3
        }
        return;
 8002e62:	e079      	b.n	8002f58 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d01d      	beq.n	8002eae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10d      	bne.n	8002e9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d031      	beq.n	8002eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
 8002e90:	e02c      	b.n	8002eec <HAL_DMA_IRQHandler+0x2a0>
 8002e92:	bf00      	nop
 8002e94:	20000000 	.word	0x20000000
 8002e98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d023      	beq.n	8002eec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	4798      	blx	r3
 8002eac:	e01e      	b.n	8002eec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10f      	bne.n	8002edc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0210 	bic.w	r2, r2, #16
 8002eca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d032      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d022      	beq.n	8002f46 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2205      	movs	r2, #5
 8002f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0201 	bic.w	r2, r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d307      	bcc.n	8002f34 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1f2      	bne.n	8002f18 <HAL_DMA_IRQHandler+0x2cc>
 8002f32:	e000      	b.n	8002f36 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f34:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	4798      	blx	r3
 8002f56:	e000      	b.n	8002f5a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f58:	bf00      	nop
    }
  }
}
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	2b40      	cmp	r3, #64	; 0x40
 8002fa4:	d108      	bne.n	8002fb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fb6:	e007      	b.n	8002fc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	60da      	str	r2, [r3, #12]
}
 8002fc8:	bf00      	nop
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	3b10      	subs	r3, #16
 8002fe4:	4a13      	ldr	r2, [pc, #76]	; (8003034 <DMA_CalcBaseAndBitshift+0x60>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	091b      	lsrs	r3, r3, #4
 8002fec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fee:	4a12      	ldr	r2, [pc, #72]	; (8003038 <DMA_CalcBaseAndBitshift+0x64>)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d908      	bls.n	8003014 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b0c      	ldr	r3, [pc, #48]	; (800303c <DMA_CalcBaseAndBitshift+0x68>)
 800300a:	4013      	ands	r3, r2
 800300c:	1d1a      	adds	r2, r3, #4
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	659a      	str	r2, [r3, #88]	; 0x58
 8003012:	e006      	b.n	8003022 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <DMA_CalcBaseAndBitshift+0x68>)
 800301c:	4013      	ands	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	aaaaaaab 	.word	0xaaaaaaab
 8003038:	0800f934 	.word	0x0800f934
 800303c:	fffffc00 	.word	0xfffffc00

08003040 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11f      	bne.n	800309a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d856      	bhi.n	800310e <DMA_CheckFifoParam+0xce>
 8003060:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <DMA_CheckFifoParam+0x28>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	08003079 	.word	0x08003079
 800306c:	0800308b 	.word	0x0800308b
 8003070:	08003079 	.word	0x08003079
 8003074:	0800310f 	.word	0x0800310f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d046      	beq.n	8003112 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003088:	e043      	b.n	8003112 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003092:	d140      	bne.n	8003116 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003098:	e03d      	b.n	8003116 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a2:	d121      	bne.n	80030e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d837      	bhi.n	800311a <DMA_CheckFifoParam+0xda>
 80030aa:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <DMA_CheckFifoParam+0x70>)
 80030ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b0:	080030c1 	.word	0x080030c1
 80030b4:	080030c7 	.word	0x080030c7
 80030b8:	080030c1 	.word	0x080030c1
 80030bc:	080030d9 	.word	0x080030d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      break;
 80030c4:	e030      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d025      	beq.n	800311e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d6:	e022      	b.n	800311e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030e0:	d11f      	bne.n	8003122 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030e6:	e01c      	b.n	8003122 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d903      	bls.n	80030f6 <DMA_CheckFifoParam+0xb6>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	d003      	beq.n	80030fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030f4:	e018      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
      break;
 80030fa:	e015      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00e      	beq.n	8003126 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      break;
 800310c:	e00b      	b.n	8003126 <DMA_CheckFifoParam+0xe6>
      break;
 800310e:	bf00      	nop
 8003110:	e00a      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 8003112:	bf00      	nop
 8003114:	e008      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 8003116:	bf00      	nop
 8003118:	e006      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 800311a:	bf00      	nop
 800311c:	e004      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 800311e:	bf00      	nop
 8003120:	e002      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;   
 8003122:	bf00      	nop
 8003124:	e000      	b.n	8003128 <DMA_CheckFifoParam+0xe8>
      break;
 8003126:	bf00      	nop
    }
  } 
  
  return status; 
 8003128:	7bfb      	ldrb	r3, [r7, #15]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3714      	adds	r7, #20
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop

08003138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	; 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	e175      	b.n	8003444 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003158:	2201      	movs	r2, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	429a      	cmp	r2, r3
 8003172:	f040 8164 	bne.w	800343e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d005      	beq.n	800318e <HAL_GPIO_Init+0x56>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0303 	and.w	r3, r3, #3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d130      	bne.n	80031f0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2203      	movs	r2, #3
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 0201 	and.w	r2, r3, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d017      	beq.n	800322c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d123      	bne.n	8003280 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	08da      	lsrs	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3208      	adds	r2, #8
 8003240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	220f      	movs	r2, #15
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	08da      	lsrs	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3208      	adds	r2, #8
 800327a:	69b9      	ldr	r1, [r7, #24]
 800327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80be 	beq.w	800343e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c2:	4b66      	ldr	r3, [pc, #408]	; (800345c <HAL_GPIO_Init+0x324>)
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	4a65      	ldr	r2, [pc, #404]	; (800345c <HAL_GPIO_Init+0x324>)
 80032c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032cc:	6453      	str	r3, [r2, #68]	; 0x44
 80032ce:	4b63      	ldr	r3, [pc, #396]	; (800345c <HAL_GPIO_Init+0x324>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80032da:	4a61      	ldr	r2, [pc, #388]	; (8003460 <HAL_GPIO_Init+0x328>)
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	089b      	lsrs	r3, r3, #2
 80032e0:	3302      	adds	r3, #2
 80032e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	220f      	movs	r2, #15
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	43db      	mvns	r3, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4013      	ands	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a58      	ldr	r2, [pc, #352]	; (8003464 <HAL_GPIO_Init+0x32c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d037      	beq.n	8003376 <HAL_GPIO_Init+0x23e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a57      	ldr	r2, [pc, #348]	; (8003468 <HAL_GPIO_Init+0x330>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d031      	beq.n	8003372 <HAL_GPIO_Init+0x23a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a56      	ldr	r2, [pc, #344]	; (800346c <HAL_GPIO_Init+0x334>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d02b      	beq.n	800336e <HAL_GPIO_Init+0x236>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a55      	ldr	r2, [pc, #340]	; (8003470 <HAL_GPIO_Init+0x338>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d025      	beq.n	800336a <HAL_GPIO_Init+0x232>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a54      	ldr	r2, [pc, #336]	; (8003474 <HAL_GPIO_Init+0x33c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01f      	beq.n	8003366 <HAL_GPIO_Init+0x22e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a53      	ldr	r2, [pc, #332]	; (8003478 <HAL_GPIO_Init+0x340>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d019      	beq.n	8003362 <HAL_GPIO_Init+0x22a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a52      	ldr	r2, [pc, #328]	; (800347c <HAL_GPIO_Init+0x344>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <HAL_GPIO_Init+0x226>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a51      	ldr	r2, [pc, #324]	; (8003480 <HAL_GPIO_Init+0x348>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00d      	beq.n	800335a <HAL_GPIO_Init+0x222>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a50      	ldr	r2, [pc, #320]	; (8003484 <HAL_GPIO_Init+0x34c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <HAL_GPIO_Init+0x21e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4f      	ldr	r2, [pc, #316]	; (8003488 <HAL_GPIO_Init+0x350>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d101      	bne.n	8003352 <HAL_GPIO_Init+0x21a>
 800334e:	2309      	movs	r3, #9
 8003350:	e012      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003352:	230a      	movs	r3, #10
 8003354:	e010      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003356:	2308      	movs	r3, #8
 8003358:	e00e      	b.n	8003378 <HAL_GPIO_Init+0x240>
 800335a:	2307      	movs	r3, #7
 800335c:	e00c      	b.n	8003378 <HAL_GPIO_Init+0x240>
 800335e:	2306      	movs	r3, #6
 8003360:	e00a      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003362:	2305      	movs	r3, #5
 8003364:	e008      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003366:	2304      	movs	r3, #4
 8003368:	e006      	b.n	8003378 <HAL_GPIO_Init+0x240>
 800336a:	2303      	movs	r3, #3
 800336c:	e004      	b.n	8003378 <HAL_GPIO_Init+0x240>
 800336e:	2302      	movs	r3, #2
 8003370:	e002      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_GPIO_Init+0x240>
 8003376:	2300      	movs	r3, #0
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	f002 0203 	and.w	r2, r2, #3
 800337e:	0092      	lsls	r2, r2, #2
 8003380:	4093      	lsls	r3, r2
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003388:	4935      	ldr	r1, [pc, #212]	; (8003460 <HAL_GPIO_Init+0x328>)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	3302      	adds	r3, #2
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_GPIO_Init+0x354>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ba:	4a34      	ldr	r2, [pc, #208]	; (800348c <HAL_GPIO_Init+0x354>)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c0:	4b32      	ldr	r3, [pc, #200]	; (800348c <HAL_GPIO_Init+0x354>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e4:	4a29      	ldr	r2, [pc, #164]	; (800348c <HAL_GPIO_Init+0x354>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ea:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_GPIO_Init+0x354>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800340e:	4a1f      	ldr	r2, [pc, #124]	; (800348c <HAL_GPIO_Init+0x354>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_GPIO_Init+0x354>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003438:	4a14      	ldr	r2, [pc, #80]	; (800348c <HAL_GPIO_Init+0x354>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3301      	adds	r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b0f      	cmp	r3, #15
 8003448:	f67f ae86 	bls.w	8003158 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3724      	adds	r7, #36	; 0x24
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	40013800 	.word	0x40013800
 8003464:	40020000 	.word	0x40020000
 8003468:	40020400 	.word	0x40020400
 800346c:	40020800 	.word	0x40020800
 8003470:	40020c00 	.word	0x40020c00
 8003474:	40021000 	.word	0x40021000
 8003478:	40021400 	.word	0x40021400
 800347c:	40021800 	.word	0x40021800
 8003480:	40021c00 	.word	0x40021c00
 8003484:	40022000 	.word	0x40022000
 8003488:	40022400 	.word	0x40022400
 800348c:	40013c00 	.word	0x40013c00

08003490 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	887b      	ldrh	r3, [r7, #2]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
 80034ac:	e001      	b.n	80034b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3714      	adds	r7, #20
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
 80034cc:	4613      	mov	r3, r2
 80034ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d0:	787b      	ldrb	r3, [r7, #1]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034dc:	e003      	b.n	80034e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	041a      	lsls	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	619a      	str	r2, [r3, #24]
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034fe:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	4013      	ands	r3, r2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d006      	beq.n	8003518 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800350a:	4a05      	ldr	r2, [pc, #20]	; (8003520 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	4618      	mov	r0, r3
 8003514:	f007 fd74 	bl	800b000 <HAL_GPIO_EXTI_Callback>
  }
}
 8003518:	bf00      	nop
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40013c00 	.word	0x40013c00

08003524 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	4b23      	ldr	r3, [pc, #140]	; (80035bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	4a22      	ldr	r2, [pc, #136]	; (80035bc <HAL_PWREx_EnableOverDrive+0x98>)
 8003534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003538:	6413      	str	r3, [r2, #64]	; 0x40
 800353a:	4b20      	ldr	r3, [pc, #128]	; (80035bc <HAL_PWREx_EnableOverDrive+0x98>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003546:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1d      	ldr	r2, [pc, #116]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003550:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003552:	f7fe fb11 	bl	8001b78 <HAL_GetTick>
 8003556:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003558:	e009      	b.n	800356e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800355a:	f7fe fb0d 	bl	8001b78 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003568:	d901      	bls.n	800356e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e022      	b.n	80035b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357a:	d1ee      	bne.n	800355a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0f      	ldr	r2, [pc, #60]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003586:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003588:	f7fe faf6 	bl	8001b78 <HAL_GetTick>
 800358c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800358e:	e009      	b.n	80035a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003590:	f7fe faf2 	bl	8001b78 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800359e:	d901      	bls.n	80035a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e007      	b.n	80035b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035b0:	d1ee      	bne.n	8003590 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40023800 	.word	0x40023800
 80035c0:	40007000 	.word	0x40007000

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035cc:	2300      	movs	r3, #0
 80035ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e29b      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8087 	beq.w	80036f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035e8:	4b96      	ldr	r3, [pc, #600]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d00c      	beq.n	800360e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f4:	4b93      	ldr	r3, [pc, #588]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d112      	bne.n	8003626 <HAL_RCC_OscConfig+0x62>
 8003600:	4b90      	ldr	r3, [pc, #576]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360c:	d10b      	bne.n	8003626 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800360e:	4b8d      	ldr	r3, [pc, #564]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d06c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x130>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d168      	bne.n	80036f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e275      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362e:	d106      	bne.n	800363e <HAL_RCC_OscConfig+0x7a>
 8003630:	4b84      	ldr	r3, [pc, #528]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a83      	ldr	r2, [pc, #524]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363a:	6013      	str	r3, [r2, #0]
 800363c:	e02e      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0x9c>
 8003646:	4b7f      	ldr	r3, [pc, #508]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a7e      	ldr	r2, [pc, #504]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800364c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b7c      	ldr	r3, [pc, #496]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a7b      	ldr	r2, [pc, #492]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003658:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e01d      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003668:	d10c      	bne.n	8003684 <HAL_RCC_OscConfig+0xc0>
 800366a:	4b76      	ldr	r3, [pc, #472]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a75      	ldr	r2, [pc, #468]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	4b73      	ldr	r3, [pc, #460]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a72      	ldr	r2, [pc, #456]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800367c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	e00b      	b.n	800369c <HAL_RCC_OscConfig+0xd8>
 8003684:	4b6f      	ldr	r3, [pc, #444]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6e      	ldr	r2, [pc, #440]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800368a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	4b6c      	ldr	r3, [pc, #432]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a6b      	ldr	r2, [pc, #428]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800369a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d013      	beq.n	80036cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fa68 	bl	8001b78 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fe fa64 	bl	8001b78 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e229      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036be:	4b61      	ldr	r3, [pc, #388]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0xe8>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fa54 	bl	8001b78 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d4:	f7fe fa50 	bl	8001b78 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e215      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e6:	4b57      	ldr	r3, [pc, #348]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x110>
 80036f2:	e000      	b.n	80036f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d069      	beq.n	80037d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003702:	4b50      	ldr	r3, [pc, #320]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370e:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f003 030c 	and.w	r3, r3, #12
 8003716:	2b08      	cmp	r3, #8
 8003718:	d11c      	bne.n	8003754 <HAL_RCC_OscConfig+0x190>
 800371a:	4b4a      	ldr	r3, [pc, #296]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d116      	bne.n	8003754 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003726:	4b47      	ldr	r3, [pc, #284]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_RCC_OscConfig+0x17a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d001      	beq.n	800373e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e1e9      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373e:	4b41      	ldr	r3, [pc, #260]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	493d      	ldr	r1, [pc, #244]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003752:	e040      	b.n	80037d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d023      	beq.n	80037a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800375c:	4b39      	ldr	r3, [pc, #228]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a38      	ldr	r2, [pc, #224]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003768:	f7fe fa06 	bl	8001b78 <HAL_GetTick>
 800376c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	e008      	b.n	8003782 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003770:	f7fe fa02 	bl	8001b78 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	2b02      	cmp	r3, #2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e1c7      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003782:	4b30      	ldr	r3, [pc, #192]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d0f0      	beq.n	8003770 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800378e:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4929      	ldr	r1, [pc, #164]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	600b      	str	r3, [r1, #0]
 80037a2:	e018      	b.n	80037d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a26      	ldr	r2, [pc, #152]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037aa:	f023 0301 	bic.w	r3, r3, #1
 80037ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b0:	f7fe f9e2 	bl	8001b78 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b8:	f7fe f9de 	bl	8001b78 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e1a3      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d038      	beq.n	8003854 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d019      	beq.n	800381e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ea:	4b16      	ldr	r3, [pc, #88]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ee:	4a15      	ldr	r2, [pc, #84]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fe f9bf 	bl	8001b78 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fe:	f7fe f9bb 	bl	8001b78 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e180      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003810:	4b0c      	ldr	r3, [pc, #48]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x23a>
 800381c:	e01a      	b.n	8003854 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381e:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003822:	4a08      	ldr	r2, [pc, #32]	; (8003844 <HAL_RCC_OscConfig+0x280>)
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382a:	f7fe f9a5 	bl	8001b78 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003832:	f7fe f9a1 	bl	8001b78 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d903      	bls.n	8003848 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e166      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
 8003844:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	4b92      	ldr	r3, [pc, #584]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800384a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ee      	bne.n	8003832 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80a4 	beq.w	80039aa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003862:	4b8c      	ldr	r3, [pc, #560]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10d      	bne.n	800388a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800386e:	4b89      	ldr	r3, [pc, #548]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	4a88      	ldr	r2, [pc, #544]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003878:	6413      	str	r3, [r2, #64]	; 0x40
 800387a:	4b86      	ldr	r3, [pc, #536]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003882:	60bb      	str	r3, [r7, #8]
 8003884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003886:	2301      	movs	r3, #1
 8003888:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388a:	4b83      	ldr	r3, [pc, #524]	; (8003a98 <HAL_RCC_OscConfig+0x4d4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	2b00      	cmp	r3, #0
 8003894:	d118      	bne.n	80038c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003896:	4b80      	ldr	r3, [pc, #512]	; (8003a98 <HAL_RCC_OscConfig+0x4d4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a7f      	ldr	r2, [pc, #508]	; (8003a98 <HAL_RCC_OscConfig+0x4d4>)
 800389c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038a2:	f7fe f969 	bl	8001b78 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038aa:	f7fe f965 	bl	8001b78 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b64      	cmp	r3, #100	; 0x64
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e12a      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038bc:	4b76      	ldr	r3, [pc, #472]	; (8003a98 <HAL_RCC_OscConfig+0x4d4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x31a>
 80038d0:	4b70      	ldr	r3, [pc, #448]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a6f      	ldr	r2, [pc, #444]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
 80038dc:	e02d      	b.n	800393a <HAL_RCC_OscConfig+0x376>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x33c>
 80038e6:	4b6b      	ldr	r3, [pc, #428]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a6a      	ldr	r2, [pc, #424]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038ec:	f023 0301 	bic.w	r3, r3, #1
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
 80038f2:	4b68      	ldr	r3, [pc, #416]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f6:	4a67      	ldr	r2, [pc, #412]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80038f8:	f023 0304 	bic.w	r3, r3, #4
 80038fc:	6713      	str	r3, [r2, #112]	; 0x70
 80038fe:	e01c      	b.n	800393a <HAL_RCC_OscConfig+0x376>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b05      	cmp	r3, #5
 8003906:	d10c      	bne.n	8003922 <HAL_RCC_OscConfig+0x35e>
 8003908:	4b62      	ldr	r3, [pc, #392]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	4a61      	ldr	r2, [pc, #388]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800390e:	f043 0304 	orr.w	r3, r3, #4
 8003912:	6713      	str	r3, [r2, #112]	; 0x70
 8003914:	4b5f      	ldr	r3, [pc, #380]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4a5e      	ldr	r2, [pc, #376]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6713      	str	r3, [r2, #112]	; 0x70
 8003920:	e00b      	b.n	800393a <HAL_RCC_OscConfig+0x376>
 8003922:	4b5c      	ldr	r3, [pc, #368]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003926:	4a5b      	ldr	r2, [pc, #364]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	6713      	str	r3, [r2, #112]	; 0x70
 800392e:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003932:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003934:	f023 0304 	bic.w	r3, r3, #4
 8003938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d015      	beq.n	800396e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003942:	f7fe f919 	bl	8001b78 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fe f915 	bl	8001b78 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0d8      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	4b4c      	ldr	r3, [pc, #304]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ee      	beq.n	800394a <HAL_RCC_OscConfig+0x386>
 800396c:	e014      	b.n	8003998 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396e:	f7fe f903 	bl	8001b78 <HAL_GetTick>
 8003972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003974:	e00a      	b.n	800398c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003976:	f7fe f8ff 	bl	8001b78 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	f241 3288 	movw	r2, #5000	; 0x1388
 8003984:	4293      	cmp	r3, r2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e0c2      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398c:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1ee      	bne.n	8003976 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d105      	bne.n	80039aa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a3c      	ldr	r2, [pc, #240]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 80ae 	beq.w	8003b10 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039b4:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d06d      	beq.n	8003a9c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d14b      	bne.n	8003a60 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c8:	4b32      	ldr	r3, [pc, #200]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a31      	ldr	r2, [pc, #196]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fe f8d0 	bl	8001b78 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fe f8cc 	bl	8001b78 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e091      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ee:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1f0      	bne.n	80039dc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	019b      	lsls	r3, r3, #6
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a10:	085b      	lsrs	r3, r3, #1
 8003a12:	3b01      	subs	r3, #1
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	071b      	lsls	r3, r3, #28
 8003a26:	491b      	ldr	r1, [pc, #108]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a18      	ldr	r2, [pc, #96]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a38:	f7fe f89e 	bl	8001b78 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fe f89a 	bl	8001b78 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e05f      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCC_OscConfig+0x47c>
 8003a5e:	e057      	b.n	8003b10 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0b      	ldr	r2, [pc, #44]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fe f884 	bl	8001b78 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fe f880 	bl	8001b78 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e045      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a86:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <HAL_RCC_OscConfig+0x4d0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x4b0>
 8003a92:	e03d      	b.n	8003b10 <HAL_RCC_OscConfig+0x54c>
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a9c:	4b1f      	ldr	r3, [pc, #124]	; (8003b1c <HAL_RCC_OscConfig+0x558>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d030      	beq.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d129      	bne.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d122      	bne.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003acc:	4013      	ands	r3, r2
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ad2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d119      	bne.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	085b      	lsrs	r3, r3, #1
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d10f      	bne.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40023800 	.word	0x40023800

08003b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0d0      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b38:	4b6a      	ldr	r3, [pc, #424]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d910      	bls.n	8003b68 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b67      	ldr	r3, [pc, #412]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 020f 	bic.w	r2, r3, #15
 8003b4e:	4965      	ldr	r1, [pc, #404]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b63      	ldr	r3, [pc, #396]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e0b8      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d020      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0304 	and.w	r3, r3, #4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d005      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b80:	4b59      	ldr	r3, [pc, #356]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	4a58      	ldr	r2, [pc, #352]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b98:	4b53      	ldr	r3, [pc, #332]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	4a52      	ldr	r2, [pc, #328]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ba2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba4:	4b50      	ldr	r3, [pc, #320]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	494d      	ldr	r1, [pc, #308]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d040      	beq.n	8003c44 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d107      	bne.n	8003bda <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	4b47      	ldr	r3, [pc, #284]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d115      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e07f      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d107      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be2:	4b41      	ldr	r3, [pc, #260]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d109      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e073      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf2:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e06b      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c02:	4b39      	ldr	r3, [pc, #228]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f023 0203 	bic.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4936      	ldr	r1, [pc, #216]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c14:	f7fd ffb0 	bl	8001b78 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1a:	e00a      	b.n	8003c32 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c1c:	f7fd ffac 	bl	8001b78 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e053      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c32:	4b2d      	ldr	r3, [pc, #180]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 020c 	and.w	r2, r3, #12
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d1eb      	bne.n	8003c1c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c44:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d210      	bcs.n	8003c74 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 020f 	bic.w	r2, r3, #15
 8003c5a:	4922      	ldr	r1, [pc, #136]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b20      	ldr	r3, [pc, #128]	; (8003ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e032      	b.n	8003cda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c80:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4916      	ldr	r1, [pc, #88]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c9e:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	490e      	ldr	r1, [pc, #56]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cb2:	f000 f821 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	490a      	ldr	r1, [pc, #40]	; (8003cec <HAL_RCC_ClockConfig+0x1cc>)
 8003cc4:	5ccb      	ldrb	r3, [r1, r3]
 8003cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_RCC_ClockConfig+0x1d0>)
 8003ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cce:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <HAL_RCC_ClockConfig+0x1d4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd ff0c 	bl	8001af0 <HAL_InitTick>

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40023c00 	.word	0x40023c00
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	0800f91c 	.word	0x0800f91c
 8003cf0:	20000000 	.word	0x20000000
 8003cf4:	20000004 	.word	0x20000004

08003cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cfc:	b090      	sub	sp, #64	; 0x40
 8003cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
 8003d04:	2300      	movs	r3, #0
 8003d06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d08:	2300      	movs	r3, #0
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d10:	4b59      	ldr	r3, [pc, #356]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 030c 	and.w	r3, r3, #12
 8003d18:	2b08      	cmp	r3, #8
 8003d1a:	d00d      	beq.n	8003d38 <HAL_RCC_GetSysClockFreq+0x40>
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	f200 80a1 	bhi.w	8003e64 <HAL_RCC_GetSysClockFreq+0x16c>
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_RCC_GetSysClockFreq+0x34>
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d003      	beq.n	8003d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d2a:	e09b      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d2c:	4b53      	ldr	r3, [pc, #332]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x184>)
 8003d2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d30:	e09b      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d32:	4b53      	ldr	r3, [pc, #332]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d36:	e098      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d38:	4b4f      	ldr	r3, [pc, #316]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d40:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d42:	4b4d      	ldr	r3, [pc, #308]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d028      	beq.n	8003da0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d4e:	4b4a      	ldr	r3, [pc, #296]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	099b      	lsrs	r3, r3, #6
 8003d54:	2200      	movs	r2, #0
 8003d56:	623b      	str	r3, [r7, #32]
 8003d58:	627a      	str	r2, [r7, #36]	; 0x24
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d60:	2100      	movs	r1, #0
 8003d62:	4b47      	ldr	r3, [pc, #284]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d64:	fb03 f201 	mul.w	r2, r3, r1
 8003d68:	2300      	movs	r3, #0
 8003d6a:	fb00 f303 	mul.w	r3, r0, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	4a43      	ldr	r2, [pc, #268]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d72:	fba0 1202 	umull	r1, r2, r0, r2
 8003d76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d78:	460a      	mov	r2, r1
 8003d7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7e:	4413      	add	r3, r2
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d84:	2200      	movs	r2, #0
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	61fa      	str	r2, [r7, #28]
 8003d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d92:	f7fc faa5 	bl	80002e0 <__aeabi_uldivmod>
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d9e:	e053      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da0:	4b35      	ldr	r3, [pc, #212]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	099b      	lsrs	r3, r3, #6
 8003da6:	2200      	movs	r2, #0
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	617a      	str	r2, [r7, #20]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003db2:	f04f 0b00 	mov.w	fp, #0
 8003db6:	4652      	mov	r2, sl
 8003db8:	465b      	mov	r3, fp
 8003dba:	f04f 0000 	mov.w	r0, #0
 8003dbe:	f04f 0100 	mov.w	r1, #0
 8003dc2:	0159      	lsls	r1, r3, #5
 8003dc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc8:	0150      	lsls	r0, r2, #5
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	ebb2 080a 	subs.w	r8, r2, sl
 8003dd2:	eb63 090b 	sbc.w	r9, r3, fp
 8003dd6:	f04f 0200 	mov.w	r2, #0
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003de2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003de6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003dea:	ebb2 0408 	subs.w	r4, r2, r8
 8003dee:	eb63 0509 	sbc.w	r5, r3, r9
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	00eb      	lsls	r3, r5, #3
 8003dfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e00:	00e2      	lsls	r2, r4, #3
 8003e02:	4614      	mov	r4, r2
 8003e04:	461d      	mov	r5, r3
 8003e06:	eb14 030a 	adds.w	r3, r4, sl
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	eb45 030b 	adc.w	r3, r5, fp
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e1e:	4629      	mov	r1, r5
 8003e20:	028b      	lsls	r3, r1, #10
 8003e22:	4621      	mov	r1, r4
 8003e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e28:	4621      	mov	r1, r4
 8003e2a:	028a      	lsls	r2, r1, #10
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	2200      	movs	r2, #0
 8003e34:	60bb      	str	r3, [r7, #8]
 8003e36:	60fa      	str	r2, [r7, #12]
 8003e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e3c:	f7fc fa50 	bl	80002e0 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4613      	mov	r3, r2
 8003e46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e48:	4b0b      	ldr	r3, [pc, #44]	; (8003e78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	3301      	adds	r3, #1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003e58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e62:	e002      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3740      	adds	r7, #64	; 0x40
 8003e70:	46bd      	mov	sp, r7
 8003e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	00f42400 	.word	0x00f42400
 8003e80:	017d7840 	.word	0x017d7840

08003e84 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000000 	.word	0x20000000

08003e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ea0:	f7ff fff0 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0a9b      	lsrs	r3, r3, #10
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4903      	ldr	r1, [pc, #12]	; (8003ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	0800f92c 	.word	0x0800f92c

08003ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ec8:	f7ff ffdc 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	0b5b      	lsrs	r3, r3, #13
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4903      	ldr	r1, [pc, #12]	; (8003ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	0800f92c 	.word	0x0800f92c

08003eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003efc:	2300      	movs	r3, #0
 8003efe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0301 	and.w	r3, r3, #1
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d012      	beq.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f14:	4b69      	ldr	r3, [pc, #420]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a68      	ldr	r2, [pc, #416]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003f1e:	6093      	str	r3, [r2, #8]
 8003f20:	4b66      	ldr	r3, [pc, #408]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	4964      	ldr	r1, [pc, #400]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003f36:	2301      	movs	r3, #1
 8003f38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d017      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f46:	4b5d      	ldr	r3, [pc, #372]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f54:	4959      	ldr	r1, [pc, #356]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f64:	d101      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003f66:	2301      	movs	r3, #1
 8003f68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003f72:	2301      	movs	r3, #1
 8003f74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d017      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f82:	4b4e      	ldr	r3, [pc, #312]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	494a      	ldr	r1, [pc, #296]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 808b 	beq.w	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4b3a      	ldr	r3, [pc, #232]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	4a39      	ldr	r2, [pc, #228]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fda:	6413      	str	r3, [r2, #64]	; 0x40
 8003fdc:	4b37      	ldr	r3, [pc, #220]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	60bb      	str	r3, [r7, #8]
 8003fe6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fe8:	4b35      	ldr	r3, [pc, #212]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a34      	ldr	r2, [pc, #208]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ff4:	f7fd fdc0 	bl	8001b78 <HAL_GetTick>
 8003ff8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fd fdbc 	bl	8001b78 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b64      	cmp	r3, #100	; 0x64
 8004008:	d901      	bls.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e38f      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800400e:	4b2c      	ldr	r3, [pc, #176]	; (80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0f0      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800401a:	4b28      	ldr	r3, [pc, #160]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004022:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d035      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d02e      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004038:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800403a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004040:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004042:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004046:	4a1d      	ldr	r2, [pc, #116]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800404e:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004052:	4a1a      	ldr	r2, [pc, #104]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004058:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800405a:	4a18      	ldr	r2, [pc, #96]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004060:	4b16      	ldr	r3, [pc, #88]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d114      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fd fd84 	bl	8001b78 <HAL_GetTick>
 8004070:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	e00a      	b.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004074:	f7fd fd80 	bl	8001b78 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e351      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800408c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0ee      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040a2:	d111      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040b0:	4b04      	ldr	r3, [pc, #16]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040b2:	400b      	ands	r3, r1
 80040b4:	4901      	ldr	r1, [pc, #4]	; (80040bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
 80040ba:	e00b      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40007000 	.word	0x40007000
 80040c4:	0ffffcff 	.word	0x0ffffcff
 80040c8:	4bac      	ldr	r3, [pc, #688]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4aab      	ldr	r2, [pc, #684]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040d2:	6093      	str	r3, [r2, #8]
 80040d4:	4ba9      	ldr	r3, [pc, #676]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e0:	49a6      	ldr	r1, [pc, #664]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d010      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040f2:	4ba2      	ldr	r3, [pc, #648]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040f8:	4aa0      	ldr	r2, [pc, #640]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004102:	4b9e      	ldr	r3, [pc, #632]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004104:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	499b      	ldr	r1, [pc, #620]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004120:	4b96      	ldr	r3, [pc, #600]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800412e:	4993      	ldr	r1, [pc, #588]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004142:	4b8e      	ldr	r3, [pc, #568]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004148:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004150:	498a      	ldr	r1, [pc, #552]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00a      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004164:	4b85      	ldr	r3, [pc, #532]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004172:	4982      	ldr	r1, [pc, #520]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004186:	4b7d      	ldr	r3, [pc, #500]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004194:	4979      	ldr	r1, [pc, #484]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041a8:	4b74      	ldr	r3, [pc, #464]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f023 0203 	bic.w	r2, r3, #3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	4971      	ldr	r1, [pc, #452]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041ca:	4b6c      	ldr	r3, [pc, #432]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d0:	f023 020c 	bic.w	r2, r3, #12
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d8:	4968      	ldr	r1, [pc, #416]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041ec:	4b63      	ldr	r3, [pc, #396]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	4960      	ldr	r1, [pc, #384]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800420e:	4b5b      	ldr	r3, [pc, #364]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004214:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421c:	4957      	ldr	r1, [pc, #348]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004230:	4b52      	ldr	r3, [pc, #328]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004236:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423e:	494f      	ldr	r1, [pc, #316]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004252:	4b4a      	ldr	r3, [pc, #296]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004260:	4946      	ldr	r1, [pc, #280]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00a      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004274:	4b41      	ldr	r3, [pc, #260]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	493e      	ldr	r1, [pc, #248]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004296:	4b39      	ldr	r3, [pc, #228]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a4:	4935      	ldr	r1, [pc, #212]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00a      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042b8:	4b30      	ldr	r3, [pc, #192]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042c6:	492d      	ldr	r1, [pc, #180]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d011      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042da:	4b28      	ldr	r3, [pc, #160]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042e8:	4924      	ldr	r1, [pc, #144]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042f8:	d101      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80042fa:	2301      	movs	r3, #1
 80042fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800431a:	4b18      	ldr	r3, [pc, #96]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004328:	4914      	ldr	r1, [pc, #80]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800433c:	4b0f      	ldr	r3, [pc, #60]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800434c:	490b      	ldr	r1, [pc, #44]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00f      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004360:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004370:	4902      	ldr	r1, [pc, #8]	; (800437c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004378:	e002      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800437a:	bf00      	nop
 800437c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800438c:	4b8a      	ldr	r3, [pc, #552]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800438e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004392:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439c:	4986      	ldr	r1, [pc, #536]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00b      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043b0:	4b81      	ldr	r3, [pc, #516]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c0:	497d      	ldr	r1, [pc, #500]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d006      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 80d6 	beq.w	8004588 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80043dc:	4b76      	ldr	r3, [pc, #472]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a75      	ldr	r2, [pc, #468]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e8:	f7fd fbc6 	bl	8001b78 <HAL_GetTick>
 80043ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043f0:	f7fd fbc2 	bl	8001b78 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	; 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e195      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004402:	4b6d      	ldr	r3, [pc, #436]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d021      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11d      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004422:	4b65      	ldr	r3, [pc, #404]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004430:	4b61      	ldr	r3, [pc, #388]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004436:	0e1b      	lsrs	r3, r3, #24
 8004438:	f003 030f 	and.w	r3, r3, #15
 800443c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	019a      	lsls	r2, r3, #6
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	041b      	lsls	r3, r3, #16
 8004448:	431a      	orrs	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	071b      	lsls	r3, r3, #28
 8004456:	4958      	ldr	r1, [pc, #352]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004472:	d00a      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02e      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004488:	d129      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800448a:	4b4b      	ldr	r3, [pc, #300]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004498:	4b47      	ldr	r3, [pc, #284]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800449e:	0f1b      	lsrs	r3, r3, #28
 80044a0:	f003 0307 	and.w	r3, r3, #7
 80044a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	019a      	lsls	r2, r3, #6
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	061b      	lsls	r3, r3, #24
 80044b8:	431a      	orrs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	071b      	lsls	r3, r3, #28
 80044be:	493e      	ldr	r1, [pc, #248]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80044c6:	4b3c      	ldr	r3, [pc, #240]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044cc:	f023 021f 	bic.w	r2, r3, #31
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	3b01      	subs	r3, #1
 80044d6:	4938      	ldr	r1, [pc, #224]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01d      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80044ea:	4b33      	ldr	r3, [pc, #204]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044f0:	0e1b      	lsrs	r3, r3, #24
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80044f8:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044fe:	0f1b      	lsrs	r3, r3, #28
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	019a      	lsls	r2, r3, #6
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	431a      	orrs	r2, r3
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	061b      	lsls	r3, r3, #24
 8004518:	431a      	orrs	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	071b      	lsls	r3, r3, #28
 800451e:	4926      	ldr	r1, [pc, #152]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d011      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	019a      	lsls	r2, r3, #6
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	061b      	lsls	r3, r3, #24
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	071b      	lsls	r3, r3, #28
 800454e:	491a      	ldr	r1, [pc, #104]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004562:	f7fd fb09 	bl	8001b78 <HAL_GetTick>
 8004566:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004568:	e008      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800456a:	f7fd fb05 	bl	8001b78 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b64      	cmp	r3, #100	; 0x64
 8004576:	d901      	bls.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e0d8      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800457c:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0f0      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b01      	cmp	r3, #1
 800458c:	f040 80ce 	bne.w	800472c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004590:	4b09      	ldr	r3, [pc, #36]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a08      	ldr	r2, [pc, #32]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800459a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459c:	f7fd faec 	bl	8001b78 <HAL_GetTick>
 80045a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045a2:	e00b      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80045a4:	f7fd fae8 	bl	8001b78 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d904      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e0bb      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80045b6:	bf00      	nop
 80045b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80045bc:	4b5e      	ldr	r3, [pc, #376]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c8:	d0ec      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02e      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d12a      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045f2:	4b51      	ldr	r3, [pc, #324]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	0c1b      	lsrs	r3, r3, #16
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004600:	4b4d      	ldr	r3, [pc, #308]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	0f1b      	lsrs	r3, r3, #28
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	019a      	lsls	r2, r3, #6
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	041b      	lsls	r3, r3, #16
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	061b      	lsls	r3, r3, #24
 8004620:	431a      	orrs	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	071b      	lsls	r3, r3, #28
 8004626:	4944      	ldr	r1, [pc, #272]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800462e:	4b42      	ldr	r3, [pc, #264]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004634:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463c:	3b01      	subs	r3, #1
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	493d      	ldr	r1, [pc, #244]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d022      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004658:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800465c:	d11d      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800465e:	4b36      	ldr	r3, [pc, #216]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	0e1b      	lsrs	r3, r3, #24
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800466c:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	0f1b      	lsrs	r3, r3, #28
 8004674:	f003 0307 	and.w	r3, r3, #7
 8004678:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	019a      	lsls	r2, r3, #6
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	041b      	lsls	r3, r3, #16
 8004686:	431a      	orrs	r2, r3
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	061b      	lsls	r3, r3, #24
 800468c:	431a      	orrs	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	071b      	lsls	r3, r3, #28
 8004692:	4929      	ldr	r1, [pc, #164]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004694:	4313      	orrs	r3, r2
 8004696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0308 	and.w	r3, r3, #8
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d028      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80046a6:	4b24      	ldr	r3, [pc, #144]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ac:	0e1b      	lsrs	r3, r3, #24
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046b4:	4b20      	ldr	r3, [pc, #128]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	0c1b      	lsrs	r3, r3, #16
 80046bc:	f003 0303 	and.w	r3, r3, #3
 80046c0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	019a      	lsls	r2, r3, #6
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	431a      	orrs	r2, r3
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	061b      	lsls	r3, r3, #24
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	071b      	lsls	r3, r3, #28
 80046da:	4917      	ldr	r1, [pc, #92]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80046e2:	4b15      	ldr	r3, [pc, #84]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f0:	4911      	ldr	r1, [pc, #68]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80046f8:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a0e      	ldr	r2, [pc, #56]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004702:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004704:	f7fd fa38 	bl	8001b78 <HAL_GetTick>
 8004708:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800470c:	f7fd fa34 	bl	8001b78 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b64      	cmp	r3, #100	; 0x64
 8004718:	d901      	bls.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e007      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004726:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800472a:	d1ef      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3720      	adds	r7, #32
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800

0800473c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800475a:	f040 80a3 	bne.w	80048a4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 800475e:	4ba8      	ldr	r3, [pc, #672]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004764:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800476c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004774:	f000 808a 	beq.w	800488c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800477e:	f200 8093 	bhi.w	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004788:	d07d      	beq.n	8004886 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004790:	f200 808a 	bhi.w	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d004      	beq.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a0:	d039      	beq.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80047a2:	e081      	b.n	80048a8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80047a4:	4b96      	ldr	r3, [pc, #600]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d108      	bne.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047b0:	4b93      	ldr	r3, [pc, #588]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b8:	4a92      	ldr	r2, [pc, #584]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80047ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	e007      	b.n	80047d2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80047c2:	4b8f      	ldr	r3, [pc, #572]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047ca:	4a8f      	ldr	r2, [pc, #572]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80047d2:	4b8b      	ldr	r3, [pc, #556]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	0e1b      	lsrs	r3, r3, #24
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80047e0:	4b87      	ldr	r3, [pc, #540]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	099b      	lsrs	r3, r3, #6
 80047e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	fb03 f202 	mul.w	r2, r3, r2
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80047fa:	4b81      	ldr	r3, [pc, #516]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80047fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 031f 	and.w	r3, r3, #31
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004812:	617b      	str	r3, [r7, #20]
        break;
 8004814:	e049      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004816:	4b7a      	ldr	r3, [pc, #488]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d108      	bne.n	8004834 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004822:	4b77      	ldr	r3, [pc, #476]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800482a:	4a76      	ldr	r2, [pc, #472]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	e007      	b.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004834:	4b72      	ldr	r3, [pc, #456]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483c:	4a72      	ldr	r2, [pc, #456]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004844:	4b6e      	ldr	r3, [pc, #440]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484a:	0e1b      	lsrs	r3, r3, #24
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8004852:	4b6b      	ldr	r3, [pc, #428]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004858:	099b      	lsrs	r3, r3, #6
 800485a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	fb03 f202 	mul.w	r2, r3, r2
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800486c:	4b64      	ldr	r3, [pc, #400]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800486e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004872:	f003 031f 	and.w	r3, r3, #31
 8004876:	3301      	adds	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004882:	617b      	str	r3, [r7, #20]
        break;
 8004884:	e011      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004886:	4b61      	ldr	r3, [pc, #388]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8004888:	617b      	str	r3, [r7, #20]
        break;
 800488a:	e00e      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800488c:	4b5c      	ldr	r3, [pc, #368]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d102      	bne.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8004898:	4b5a      	ldr	r3, [pc, #360]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800489a:	617b      	str	r3, [r7, #20]
        break;
 800489c:	e005      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 800489e:	4b5a      	ldr	r3, [pc, #360]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80048a0:	617b      	str	r3, [r7, #20]
        break;
 80048a2:	e002      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 80048a4:	bf00      	nop
 80048a6:	e000      	b.n	80048aa <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 80048a8:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b0:	f040 80a3 	bne.w	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 80048b4:	4b52      	ldr	r3, [pc, #328]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ba:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80048c2:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048ca:	f000 808a 	beq.w	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80048d4:	f200 809c 	bhi.w	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048de:	d07d      	beq.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048e6:	f200 8093 	bhi.w	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f6:	d039      	beq.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80048f8:	e08a      	b.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80048fa:	4b41      	ldr	r3, [pc, #260]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d108      	bne.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004906:	4b3e      	ldr	r3, [pc, #248]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800490e:	4a3d      	ldr	r2, [pc, #244]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	e007      	b.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004918:	4b39      	ldr	r3, [pc, #228]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004920:	4a39      	ldr	r2, [pc, #228]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004928:	4b35      	ldr	r3, [pc, #212]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	0e1b      	lsrs	r3, r3, #24
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8004936:	4b32      	ldr	r3, [pc, #200]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493c:	099b      	lsrs	r3, r3, #6
 800493e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	fb03 f202 	mul.w	r2, r3, r2
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004950:	4b2b      	ldr	r3, [pc, #172]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	3301      	adds	r3, #1
 800495e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	617b      	str	r3, [r7, #20]
        break;
 800496a:	e052      	b.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800496c:	4b24      	ldr	r3, [pc, #144]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d108      	bne.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004978:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004980:	4a20      	ldr	r2, [pc, #128]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8004982:	fbb2 f3f3 	udiv	r3, r2, r3
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	e007      	b.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800498a:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004992:	4a1d      	ldr	r2, [pc, #116]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800499a:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800499c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049a0:	0e1b      	lsrs	r3, r3, #24
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80049a8:	4b15      	ldr	r3, [pc, #84]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	fb03 f202 	mul.w	r2, r3, r2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80049c2:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	3301      	adds	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d8:	617b      	str	r3, [r7, #20]
        break;
 80049da:	e01a      	b.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80049de:	617b      	str	r3, [r7, #20]
        break;
 80049e0:	e017      	b.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80049e2:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 80049ee:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80049f0:	617b      	str	r3, [r7, #20]
        break;
 80049f2:	e00e      	b.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 80049f4:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80049f6:	617b      	str	r3, [r7, #20]
        break;
 80049f8:	e00b      	b.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 80049fa:	bf00      	nop
 80049fc:	e009      	b.n	8004a12 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800
 8004a04:	00f42400 	.word	0x00f42400
 8004a08:	017d7840 	.word	0x017d7840
 8004a0c:	00bb8000 	.word	0x00bb8000
        break;
 8004a10:	bf00      	nop

  return frequency;
 8004a12:	697b      	ldr	r3, [r7, #20]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e071      	b.n	8004b1a <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	7f5b      	ldrb	r3, [r3, #29]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d105      	bne.n	8004a4c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc fc2a 	bl	80012a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d053      	beq.n	8004b08 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	22ca      	movs	r2, #202	; 0xca
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2253      	movs	r2, #83	; 0x53
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f99f 	bl	8004db4 <RTC_EnterInitMode>
 8004a76:	4603      	mov	r3, r0
 8004a78:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d12a      	bne.n	8004ad6 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6899      	ldr	r1, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <HAL_RTC_Init+0x104>)
 8004a8c:	400b      	ands	r3, r1
 8004a8e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6899      	ldr	r1, [r3, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68d2      	ldr	r2, [r2, #12]
 8004ab6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6919      	ldr	r1, [r3, #16]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	041a      	lsls	r2, r3, #16
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f9a8 	bl	8004e22 <RTC_ExitInitMode>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d110      	bne.n	8004afe <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0208 	bic.w	r2, r2, #8
 8004aea:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699a      	ldr	r2, [r3, #24]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	22ff      	movs	r2, #255	; 0xff
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
 8004b06:	e001      	b.n	8004b0c <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	ff8fffbf 	.word	0xff8fffbf

08004b28 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b28:	b590      	push	{r4, r7, lr}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	7f1b      	ldrb	r3, [r3, #28]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_RTC_SetTime+0x1c>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e085      	b.n	8004c50 <HAL_RTC_SetTime+0x128>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d126      	bne.n	8004ba4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d102      	bne.n	8004b6a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2200      	movs	r2, #0
 8004b68:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f97c 	bl	8004e6c <RTC_ByteToBcd2>
 8004b74:	4603      	mov	r3, r0
 8004b76:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 f975 	bl	8004e6c <RTC_ByteToBcd2>
 8004b82:	4603      	mov	r3, r0
 8004b84:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b86:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	789b      	ldrb	r3, [r3, #2]
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 f96d 	bl	8004e6c <RTC_ByteToBcd2>
 8004b92:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004b94:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	78db      	ldrb	r3, [r3, #3]
 8004b9c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e018      	b.n	8004bd6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d102      	bne.n	8004bb8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	785b      	ldrb	r3, [r3, #1]
 8004bc2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004bc4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004bc6:	68ba      	ldr	r2, [r7, #8]
 8004bc8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004bca:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	78db      	ldrb	r3, [r3, #3]
 8004bd0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	22ca      	movs	r2, #202	; 0xca
 8004bdc:	625a      	str	r2, [r3, #36]	; 0x24
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2253      	movs	r2, #83	; 0x53
 8004be4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f8e4 	bl	8004db4 <RTC_EnterInitMode>
 8004bec:	4603      	mov	r3, r0
 8004bee:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004bf0:	7cfb      	ldrb	r3, [r7, #19]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11e      	bne.n	8004c34 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	6979      	ldr	r1, [r7, #20]
 8004bfc:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <HAL_RTC_SetTime+0x130>)
 8004bfe:	400b      	ands	r3, r1
 8004c00:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6899      	ldr	r1, [r3, #8]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	431a      	orrs	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f8f9 	bl	8004e22 <RTC_ExitInitMode>
 8004c30:	4603      	mov	r3, r0
 8004c32:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d102      	bne.n	8004c40 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	771a      	strb	r2, [r3, #28]

  return status;
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd90      	pop	{r4, r7, pc}
 8004c58:	007f7f7f 	.word	0x007f7f7f

08004c5c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	7f1b      	ldrb	r3, [r3, #28]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_RTC_SetDate+0x1c>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e06f      	b.n	8004d58 <HAL_RTC_SetDate+0xfc>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2202      	movs	r2, #2
 8004c82:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10e      	bne.n	8004ca8 <HAL_RTC_SetDate+0x4c>
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	785b      	ldrb	r3, [r3, #1]
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d008      	beq.n	8004ca8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	785b      	ldrb	r3, [r3, #1]
 8004c9a:	f023 0310 	bic.w	r3, r3, #16
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	330a      	adds	r3, #10
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d11c      	bne.n	8004ce8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	78db      	ldrb	r3, [r3, #3]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f8da 	bl	8004e6c <RTC_ByteToBcd2>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	785b      	ldrb	r3, [r3, #1]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f000 f8d3 	bl	8004e6c <RTC_ByteToBcd2>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004cca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	789b      	ldrb	r3, [r3, #2]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 f8cb 	bl	8004e6c <RTC_ByteToBcd2>
 8004cd6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cd8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	e00e      	b.n	8004d06 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	78db      	ldrb	r3, [r3, #3]
 8004cec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	785b      	ldrb	r3, [r3, #1]
 8004cf2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004cf4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004cfa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004d02:	4313      	orrs	r3, r2
 8004d04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	22ca      	movs	r2, #202	; 0xca
 8004d0c:	625a      	str	r2, [r3, #36]	; 0x24
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2253      	movs	r2, #83	; 0x53
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f84c 	bl	8004db4 <RTC_EnterInitMode>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	6979      	ldr	r1, [r7, #20]
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <HAL_RTC_SetDate+0x104>)
 8004d2e:	400b      	ands	r3, r1
 8004d30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f000 f875 	bl	8004e22 <RTC_ExitInitMode>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004d3c:	7cfb      	ldrb	r3, [r7, #19]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d102      	bne.n	8004d48 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2201      	movs	r2, #1
 8004d46:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	22ff      	movs	r2, #255	; 0xff
 8004d4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	771a      	strb	r2, [r3, #28]

  return status;
 8004d56:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd90      	pop	{r4, r7, pc}
 8004d60:	00ffff3f 	.word	0x00ffff3f

08004d64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d7e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d80:	f7fc fefa 	bl	8001b78 <HAL_GetTick>
 8004d84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d86:	e009      	b.n	8004d9c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d88:	f7fc fef6 	bl	8001b78 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d96:	d901      	bls.n	8004d9c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e007      	b.n	8004dac <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0ee      	beq.n	8004d88 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d122      	bne.n	8004e18 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004de0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004de2:	f7fc fec9 	bl	8001b78 <HAL_GetTick>
 8004de6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004de8:	e00c      	b.n	8004e04 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004dea:	f7fc fec5 	bl	8001b78 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004df8:	d904      	bls.n	8004e04 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2204      	movs	r2, #4
 8004dfe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <RTC_EnterInitMode+0x64>
 8004e12:	7bfb      	ldrb	r3, [r7, #15]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d1e8      	bne.n	8004dea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e3c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ff89 	bl	8004d64 <HAL_RTC_WaitForSynchro>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d004      	beq.n	8004e62 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	4603      	mov	r3, r0
 8004e74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004e7a:	e005      	b.n	8004e88 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	3b0a      	subs	r3, #10
 8004e86:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004e88:	79fb      	ldrb	r3, [r7, #7]
 8004e8a:	2b09      	cmp	r3, #9
 8004e8c:	d8f6      	bhi.n	8004e7c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	011b      	lsls	r3, r3, #4
 8004e94:	b2da      	uxtb	r2, r3
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	b2db      	uxtb	r3, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	3350      	adds	r3, #80	; 0x50
 8004ebe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	601a      	str	r2, [r3, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	371c      	adds	r7, #28
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 31)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3350      	adds	r3, #80	; 0x50
 8004ef0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4413      	add	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e156      	b.n	80051d8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7fc fa3a 	bl	80013b8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f95b 	bl	8005208 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d00c      	beq.n	8004f74 <HAL_SAI_Init+0x68>
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d80d      	bhi.n	8004f7a <HAL_SAI_Init+0x6e>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_SAI_Init+0x5c>
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d003      	beq.n	8004f6e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8004f66:	e008      	b.n	8004f7a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61fb      	str	r3, [r7, #28]
      break;
 8004f6c:	e006      	b.n	8004f7c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004f6e:	2310      	movs	r3, #16
 8004f70:	61fb      	str	r3, [r7, #28]
      break;
 8004f72:	e003      	b.n	8004f7c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004f74:	2320      	movs	r3, #32
 8004f76:	61fb      	str	r3, [r7, #28]
      break;
 8004f78:	e000      	b.n	8004f7c <HAL_SAI_Init+0x70>
      break;
 8004f7a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d81e      	bhi.n	8004fc2 <HAL_SAI_Init+0xb6>
 8004f84:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <HAL_SAI_Init+0x80>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004f9d 	.word	0x08004f9d
 8004f90:	08004fa3 	.word	0x08004fa3
 8004f94:	08004fab 	.word	0x08004fab
 8004f98:	08004fb3 	.word	0x08004fb3
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
    }
    break;
 8004fa0:	e010      	b.n	8004fc4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fa6:	617b      	str	r3, [r7, #20]
    }
    break;
 8004fa8:	e00c      	b.n	8004fc4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fae:	617b      	str	r3, [r7, #20]
    }
    break;
 8004fb0:	e008      	b.n	8004fc4 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004fb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004fb6:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	61fb      	str	r3, [r7, #28]
    }
    break;
 8004fc0:	e000      	b.n	8004fc4 <HAL_SAI_Init+0xb8>
    default:
      break;
 8004fc2:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a85      	ldr	r2, [pc, #532]	; (80051e0 <HAL_SAI_Init+0x2d4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d004      	beq.n	8004fd8 <HAL_SAI_Init+0xcc>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a84      	ldr	r2, [pc, #528]	; (80051e4 <HAL_SAI_Init+0x2d8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d103      	bne.n	8004fe0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8004fd8:	4a83      	ldr	r2, [pc, #524]	; (80051e8 <HAL_SAI_Init+0x2dc>)
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	6013      	str	r3, [r2, #0]
 8004fde:	e002      	b.n	8004fe6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004fe0:	4a82      	ldr	r2, [pc, #520]	; (80051ec <HAL_SAI_Init+0x2e0>)
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d04c      	beq.n	8005088 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a7a      	ldr	r2, [pc, #488]	; (80051e0 <HAL_SAI_Init+0x2d4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d004      	beq.n	8005006 <HAL_SAI_Init+0xfa>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a78      	ldr	r2, [pc, #480]	; (80051e4 <HAL_SAI_Init+0x2d8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d104      	bne.n	8005010 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005006:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800500a:	f7ff fb97 	bl	800473c <HAL_RCCEx_GetPeriphCLKFreq>
 800500e:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a76      	ldr	r2, [pc, #472]	; (80051f0 <HAL_SAI_Init+0x2e4>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d004      	beq.n	8005024 <HAL_SAI_Init+0x118>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a75      	ldr	r2, [pc, #468]	; (80051f4 <HAL_SAI_Init+0x2e8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d104      	bne.n	800502e <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005024:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8005028:	f7ff fb88 	bl	800473c <HAL_RCCEx_GetPeriphCLKFreq>
 800502c:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	4613      	mov	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	4413      	add	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	461a      	mov	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	025b      	lsls	r3, r3, #9
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4a6b      	ldr	r2, [pc, #428]	; (80051f8 <HAL_SAI_Init+0x2ec>)
 800504a:	fba2 2303 	umull	r2, r3, r2, r3
 800504e:	08da      	lsrs	r2, r3, #3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8005054:	68f9      	ldr	r1, [r7, #12]
 8005056:	4b68      	ldr	r3, [pc, #416]	; (80051f8 <HAL_SAI_Init+0x2ec>)
 8005058:	fba3 2301 	umull	r2, r3, r3, r1
 800505c:	08da      	lsrs	r2, r3, #3
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	1aca      	subs	r2, r1, r3
 8005068:	2a08      	cmp	r2, #8
 800506a:	d904      	bls.n	8005076 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	2b04      	cmp	r3, #4
 800507c:	d104      	bne.n	8005088 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	085a      	lsrs	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_SAI_Init+0x18c>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	2b02      	cmp	r3, #2
 8005096:	d109      	bne.n	80050ac <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509c:	2b01      	cmp	r3, #1
 800509e:	d101      	bne.n	80050a4 <HAL_SAI_Init+0x198>
 80050a0:	2300      	movs	r3, #0
 80050a2:	e001      	b.n	80050a8 <HAL_SAI_Init+0x19c>
 80050a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	e008      	b.n	80050be <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d102      	bne.n	80050ba <HAL_SAI_Init+0x1ae>
 80050b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050b8:	e000      	b.n	80050bc <HAL_SAI_Init+0x1b0>
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6819      	ldr	r1, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	4b4c      	ldr	r3, [pc, #304]	; (80051fc <HAL_SAI_Init+0x2f0>)
 80050ca:	400b      	ands	r3, r1
 80050cc:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	6819      	ldr	r1, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80050e2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	431a      	orrs	r2, r3
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80050f6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005102:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a1b      	ldr	r3, [r3, #32]
 8005108:	051b      	lsls	r3, r3, #20
 800510a:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b38      	ldr	r3, [pc, #224]	; (8005200 <HAL_SAI_Init+0x2f4>)
 8005120:	400b      	ands	r3, r1
 8005122:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6859      	ldr	r1, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	699a      	ldr	r2, [r3, #24]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	431a      	orrs	r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005138:	431a      	orrs	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	430a      	orrs	r2, r1
 8005140:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6899      	ldr	r1, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b2d      	ldr	r3, [pc, #180]	; (8005204 <HAL_SAI_Init+0x2f8>)
 800514e:	400b      	ands	r3, r1
 8005150:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6899      	ldr	r1, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8005162:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005168:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800516e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005174:	3b01      	subs	r3, #1
 8005176:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005178:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68d9      	ldr	r1, [r3, #12]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005190:	400b      	ands	r3, r1
 8005192:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68d9      	ldr	r1, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b0:	3b01      	subs	r3, #1
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40015804 	.word	0x40015804
 80051e4:	40015824 	.word	0x40015824
 80051e8:	40015800 	.word	0x40015800
 80051ec:	40015c00 	.word	0x40015c00
 80051f0:	40015c04 	.word	0x40015c04
 80051f4:	40015c24 	.word	0x40015c24
 80051f8:	cccccccd 	.word	0xcccccccd
 80051fc:	ff05c010 	.word	0xff05c010
 8005200:	ffff1ff0 	.word	0xffff1ff0
 8005204:	fff88000 	.word	0xfff88000

08005208 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005210:	4b17      	ldr	r3, [pc, #92]	; (8005270 <SAI_Disable+0x68>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a17      	ldr	r2, [pc, #92]	; (8005274 <SAI_Disable+0x6c>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	0b1b      	lsrs	r3, r3, #12
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005232:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	60fa      	str	r2, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005244:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	72fb      	strb	r3, [r7, #11]
      break;
 8005252:	e006      	b.n	8005262 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e8      	bne.n	8005234 <SAI_Disable+0x2c>

  return status;
 8005262:	7afb      	ldrb	r3, [r7, #11]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20000000 	.word	0x20000000
 8005274:	95cbec1b 	.word	0x95cbec1b

08005278 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e022      	b.n	80052d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d105      	bne.n	80052a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7fc f957 	bl	8001550 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2203      	movs	r2, #3
 80052a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f814 	bl	80052d8 <HAL_SD_InitCard>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e00a      	b.n	80052d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80052d8:	b5b0      	push	{r4, r5, r7, lr}
 80052da:	b08e      	sub	sp, #56	; 0x38
 80052dc:	af04      	add	r7, sp, #16
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80052e8:	2300      	movs	r3, #0
 80052ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80052f4:	2376      	movs	r3, #118	; 0x76
 80052f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681d      	ldr	r5, [r3, #0]
 80052fc:	466c      	mov	r4, sp
 80052fe:	f107 0314 	add.w	r3, r7, #20
 8005302:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800530a:	f107 0308 	add.w	r3, r7, #8
 800530e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005310:	4628      	mov	r0, r5
 8005312:	f001 ff45 	bl	80071a0 <SDMMC_Init>
 8005316:	4603      	mov	r3, r0
 8005318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800531c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e059      	b.n	80053dc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005336:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f001 ff79 	bl	8007234 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005350:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005352:	2002      	movs	r0, #2
 8005354:	f7fc fc1c 	bl	8001b90 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fff3 	bl	8006344 <SD_PowerON>
 800535e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e02e      	b.n	80053dc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 ff12 	bl	80061a8 <SD_InitCard>
 8005384:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00b      	beq.n	80053a4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e01b      	b.n	80053dc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80053ac:	4618      	mov	r0, r3
 80053ae:	f001 ffd3 	bl	8007358 <SDMMC_CmdBlockLength>
 80053b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00f      	beq.n	80053da <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a09      	ldr	r2, [pc, #36]	; (80053e4 <HAL_SD_InitCard+0x10c>)
 80053c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3728      	adds	r7, #40	; 0x28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bdb0      	pop	{r4, r5, r7, pc}
 80053e4:	004005ff 	.word	0x004005ff

080053e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08c      	sub	sp, #48	; 0x30
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d107      	bne.n	8005410 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0c3      	b.n	8005598 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	f040 80bc 	bne.w	8005596 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	441a      	add	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542e:	429a      	cmp	r2, r3
 8005430:	d907      	bls.n	8005442 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005436:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e0aa      	b.n	8005598 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2203      	movs	r2, #3
 8005446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2200      	movs	r2, #0
 8005450:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	4a4e      	ldr	r2, [pc, #312]	; (80055a0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	4a4d      	ldr	r2, [pc, #308]	; (80055a4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005470:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005476:	2200      	movs	r2, #0
 8005478:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	2200      	movs	r2, #0
 8005480:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	3380      	adds	r3, #128	; 0x80
 80054a8:	4619      	mov	r1, r3
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	025b      	lsls	r3, r3, #9
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	f7fd fb49 	bl	8002b48 <HAL_DMA_Start_IT>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d017      	beq.n	80054ec <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80054ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a35      	ldr	r2, [pc, #212]	; (80055a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e055      	b.n	8005598 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0208 	orr.w	r2, r2, #8
 80054fa:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005500:	2b01      	cmp	r3, #1
 8005502:	d002      	beq.n	800550a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8005504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005506:	025b      	lsls	r3, r3, #9
 8005508:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800550a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800550e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	025b      	lsls	r3, r3, #9
 8005514:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005516:	2390      	movs	r3, #144	; 0x90
 8005518:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800551a:	2302      	movs	r3, #2
 800551c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800551e:	2300      	movs	r3, #0
 8005520:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005522:	2301      	movs	r3, #1
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f107 0210 	add.w	r2, r7, #16
 800552e:	4611      	mov	r1, r2
 8005530:	4618      	mov	r0, r3
 8005532:	f001 fee5 	bl	8007300 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d90a      	bls.n	8005552 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2282      	movs	r2, #130	; 0x82
 8005540:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005548:	4618      	mov	r0, r3
 800554a:	f001 ff49 	bl	80073e0 <SDMMC_CmdReadMultiBlock>
 800554e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005550:	e009      	b.n	8005566 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2281      	movs	r2, #129	; 0x81
 8005556:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800555e:	4618      	mov	r0, r3
 8005560:	f001 ff1c 	bl	800739c <SDMMC_CmdReadSingleBlock>
 8005564:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d012      	beq.n	8005592 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a0d      	ldr	r2, [pc, #52]	; (80055a8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8005572:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	431a      	orrs	r2, r3
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e002      	b.n	8005598 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	e000      	b.n	8005598 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005596:	2302      	movs	r3, #2
  }
}
 8005598:	4618      	mov	r0, r3
 800559a:	3730      	adds	r7, #48	; 0x30
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	08005fb7 	.word	0x08005fb7
 80055a4:	08006029 	.word	0x08006029
 80055a8:	004005ff 	.word	0x004005ff

080055ac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08c      	sub	sp, #48	; 0x30
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d107      	bne.n	80055d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e0c6      	b.n	8005762 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b01      	cmp	r3, #1
 80055de:	f040 80bf 	bne.w	8005760 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80055e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	441a      	add	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d907      	bls.n	8005606 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e0ad      	b.n	8005762 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2203      	movs	r2, #3
 800560a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2200      	movs	r2, #0
 8005614:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 021a 	orr.w	r2, r2, #26
 8005624:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562a:	4a50      	ldr	r2, [pc, #320]	; (800576c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800562c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005632:	4a4f      	ldr	r2, [pc, #316]	; (8005770 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005634:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800563a:	2200      	movs	r2, #0
 800563c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005642:	2b01      	cmp	r3, #1
 8005644:	d002      	beq.n	800564c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	025b      	lsls	r3, r3, #9
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d90a      	bls.n	8005668 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	22a0      	movs	r2, #160	; 0xa0
 8005656:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800565e:	4618      	mov	r0, r3
 8005660:	f001 ff02 	bl	8007468 <SDMMC_CmdWriteMultiBlock>
 8005664:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005666:	e009      	b.n	800567c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2290      	movs	r2, #144	; 0x90
 800566c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005674:	4618      	mov	r0, r3
 8005676:	f001 fed5 	bl	8007424 <SDMMC_CmdWriteSingleBlock>
 800567a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d012      	beq.n	80056a8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a3b      	ldr	r2, [pc, #236]	; (8005774 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800568e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005690:	431a      	orrs	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e05c      	b.n	8005762 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f042 0208 	orr.w	r2, r2, #8
 80056b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056bc:	2240      	movs	r2, #64	; 0x40
 80056be:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3380      	adds	r3, #128	; 0x80
 80056e8:	461a      	mov	r2, r3
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	025b      	lsls	r3, r3, #9
 80056ee:	089b      	lsrs	r3, r3, #2
 80056f0:	f7fd fa2a 	bl	8002b48 <HAL_DMA_Start_IT>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01a      	beq.n	8005730 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 021a 	bic.w	r2, r2, #26
 8005708:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a19      	ldr	r2, [pc, #100]	; (8005774 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005710:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e018      	b.n	8005762 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005734:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	025b      	lsls	r3, r3, #9
 800573a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800573c:	2390      	movs	r3, #144	; 0x90
 800573e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005744:	2300      	movs	r3, #0
 8005746:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8005748:	2301      	movs	r3, #1
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f107 0210 	add.w	r2, r7, #16
 8005754:	4611      	mov	r1, r2
 8005756:	4618      	mov	r0, r3
 8005758:	f001 fdd2 	bl	8007300 <SDMMC_ConfigData>

      return HAL_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	e000      	b.n	8005762 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8005760:	2302      	movs	r3, #2
  }
}
 8005762:	4618      	mov	r0, r3
 8005764:	3730      	adds	r7, #48	; 0x30
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	08005f8d 	.word	0x08005f8d
 8005770:	08006029 	.word	0x08006029
 8005774:	004005ff 	.word	0x004005ff

08005778 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d008      	beq.n	80057a6 <HAL_SD_IRQHandler+0x2e>
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 ffef 	bl	8006782 <SD_Read_IT>
 80057a4:	e15a      	b.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 808d 	beq.w	80058d0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057be:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	4b9a      	ldr	r3, [pc, #616]	; (8005a34 <HAL_SD_IRQHandler+0x2bc>)
 80057cc:	400b      	ands	r3, r1
 80057ce:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 0308 	and.w	r3, r3, #8
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d039      	beq.n	800585e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d104      	bne.n	80057fe <HAL_SD_IRQHandler+0x86>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0320 	and.w	r3, r3, #32
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d011      	beq.n	8005822 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f001 fe52 	bl	80074ac <SDMMC_CmdStopTransfer>
 8005808:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d008      	beq.n	8005822 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f921 	bl	8005a64 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f240 523a 	movw	r2, #1338	; 0x53a
 800582a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d104      	bne.n	800584e <HAL_SD_IRQHandler+0xd6>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f002 fac2 	bl	8007dd8 <HAL_SD_RxCpltCallback>
 8005854:	e102      	b.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f002 fab4 	bl	8007dc4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800585c:	e0fe      	b.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80f9 	beq.w	8005a5c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b00      	cmp	r3, #0
 8005872:	d011      	beq.n	8005898 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f001 fe17 	bl	80074ac <SDMMC_CmdStopTransfer>
 800587e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d008      	beq.n	8005898 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f8e6 	bl	8005a64 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f040 80dc 	bne.w	8005a5c <HAL_SD_IRQHandler+0x2e4>
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 0302 	and.w	r3, r3, #2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f040 80d6 	bne.w	8005a5c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f022 0208 	bic.w	r2, r2, #8
 80058be:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f002 fa7b 	bl	8007dc4 <HAL_SD_TxCpltCallback>
}
 80058ce:	e0c5      	b.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d008      	beq.n	80058f0 <HAL_SD_IRQHandler+0x178>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 ff9b 	bl	8006824 <SD_Write_IT>
 80058ee:	e0b5      	b.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 80ae 	beq.w	8005a5c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	f043 0202 	orr.w	r2, r3, #2
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	f043 0208 	orr.w	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	f043 0220 	orr.w	r2, r3, #32
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	f043 0210 	orr.w	r2, r3, #16
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005980:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fd90 	bl	80074ac <SDMMC_CmdStopTransfer>
 800598c:	4602      	mov	r2, r0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00a      	beq.n	80059b8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f857 	bl	8005a64 <HAL_SD_ErrorCallback>
}
 80059b6:	e051      	b.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d04c      	beq.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f003 0310 	and.w	r3, r3, #16
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d104      	bne.n	80059d6 <HAL_SD_IRQHandler+0x25e>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f003 0320 	and.w	r3, r3, #32
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d011      	beq.n	80059fa <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <HAL_SD_IRQHandler+0x2c0>)
 80059dc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fd f910 	bl	8002c08 <HAL_DMA_Abort_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d036      	beq.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fb6a 	bl	80060cc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80059f8:	e030      	b.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d104      	bne.n	8005a0e <HAL_SD_IRQHandler+0x296>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d018      	beq.n	8005a40 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a12:	4a0a      	ldr	r2, [pc, #40]	; (8005a3c <HAL_SD_IRQHandler+0x2c4>)
 8005a14:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f7fd f8f4 	bl	8002c08 <HAL_DMA_Abort_IT>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01a      	beq.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fb85 	bl	800613a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005a30:	e014      	b.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
 8005a32:	bf00      	nop
 8005a34:	ffff3ec5 	.word	0xffff3ec5
 8005a38:	080060cd 	.word	0x080060cd
 8005a3c:	0800613b 	.word	0x0800613b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f002 f9ab 	bl	8007db0 <HAL_SD_AbortCallback>
}
 8005a5a:	e7ff      	b.n	8005a5c <HAL_SD_IRQHandler+0x2e4>
 8005a5c:	bf00      	nop
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a86:	0f9b      	lsrs	r3, r3, #30
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a92:	0e9b      	lsrs	r3, r3, #26
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f003 030f 	and.w	r3, r3, #15
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005aa4:	0e1b      	lsrs	r3, r3, #24
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab6:	0c1b      	lsrs	r3, r3, #16
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ad8:	0d1b      	lsrs	r3, r3, #20
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	f003 030f 	and.w	r3, r3, #15
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005af6:	0bdb      	lsrs	r3, r3, #15
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	b2da      	uxtb	r2, r3
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b08:	0b9b      	lsrs	r3, r3, #14
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b1a:	0b5b      	lsrs	r3, r3, #13
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b2c:	0b1b      	lsrs	r3, r3, #12
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d163      	bne.n	8005c10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b4c:	009a      	lsls	r2, r3, #2
 8005b4e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b52:	4013      	ands	r3, r2
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b58:	0f92      	lsrs	r2, r2, #30
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b64:	0edb      	lsrs	r3, r3, #27
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b76:	0e1b      	lsrs	r3, r3, #24
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b88:	0d5b      	lsrs	r3, r3, #21
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	f003 0307 	and.w	r3, r3, #7
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b9a:	0c9b      	lsrs	r3, r3, #18
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bac:	0bdb      	lsrs	r3, r3, #15
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	7e1b      	ldrb	r3, [r3, #24]
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	3302      	adds	r3, #2
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005bda:	fb03 f202 	mul.w	r2, r3, r2
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	7a1b      	ldrb	r3, [r3, #8]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f003 030f 	and.w	r3, r3, #15
 8005bec:	2201      	movs	r2, #1
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005bfc:	0a52      	lsrs	r2, r2, #9
 8005bfe:	fb03 f202 	mul.w	r2, r3, r2
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c0c:	661a      	str	r2, [r3, #96]	; 0x60
 8005c0e:	e031      	b.n	8005c74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d11d      	bne.n	8005c54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c1c:	041b      	lsls	r3, r3, #16
 8005c1e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c26:	0c1b      	lsrs	r3, r3, #16
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	3301      	adds	r3, #1
 8005c34:	029a      	lsls	r2, r3, #10
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c48:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	661a      	str	r2, [r3, #96]	; 0x60
 8005c52:	e00f      	b.n	8005c74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a58      	ldr	r2, [pc, #352]	; (8005dbc <HAL_SD_GetCardCSD+0x344>)
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e09d      	b.n	8005db0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c78:	0b9b      	lsrs	r3, r3, #14
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c8a:	09db      	lsrs	r3, r3, #7
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cac:	0fdb      	lsrs	r3, r3, #31
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	0f5b      	lsrs	r3, r3, #29
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f003 0303 	and.w	r3, r3, #3
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cca:	0e9b      	lsrs	r3, r3, #26
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cdc:	0d9b      	lsrs	r3, r3, #22
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cee:	0d5b      	lsrs	r3, r3, #21
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	0c1b      	lsrs	r3, r3, #16
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	0bdb      	lsrs	r3, r3, #15
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	0b9b      	lsrs	r3, r3, #14
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	0b5b      	lsrs	r3, r3, #13
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	0b1b      	lsrs	r3, r3, #12
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6e:	0a9b      	lsrs	r3, r3, #10
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f003 0303 	and.w	r3, r3, #3
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d82:	0a1b      	lsrs	r3, r3, #8
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	004005ff 	.word	0x004005ff

08005dc0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005e18:	b5b0      	push	{r4, r5, r7, lr}
 8005e1a:	b08e      	sub	sp, #56	; 0x38
 8005e1c:	af04      	add	r7, sp, #16
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d02e      	beq.n	8005e96 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e3e:	d106      	bne.n	8005e4e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e4c:	e029      	b.n	8005ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e54:	d10a      	bne.n	8005e6c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fb2a 	bl	80064b0 <SD_WideBus_Enable>
 8005e5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
 8005e6a:	e01a      	b.n	8005ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10a      	bne.n	8005e88 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fb67 	bl	8006546 <SD_WideBus_Disable>
 8005e78:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
 8005e86:	e00c      	b.n	8005ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	639a      	str	r2, [r3, #56]	; 0x38
 8005e94:	e005      	b.n	8005ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a26      	ldr	r2, [pc, #152]	; (8005f48 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005eb0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ec0:	e01f      	b.n	8005f02 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	695b      	ldr	r3, [r3, #20]
 8005edc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	699b      	ldr	r3, [r3, #24]
 8005ee2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681d      	ldr	r5, [r3, #0]
 8005ee8:	466c      	mov	r4, sp
 8005eea:	f107 0314 	add.w	r3, r7, #20
 8005eee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005ef6:	f107 0308 	add.w	r3, r7, #8
 8005efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005efc:	4628      	mov	r0, r5
 8005efe:	f001 f94f 	bl	80071a0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 fa24 	bl	8007358 <SDMMC_CmdBlockLength>
 8005f10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00c      	beq.n	8005f32 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005f1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	431a      	orrs	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3728      	adds	r7, #40	; 0x28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bdb0      	pop	{r4, r5, r7, pc}
 8005f46:	bf00      	nop
 8005f48:	004005ff 	.word	0x004005ff

08005f4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa7e 	bl	8006460 <SD_SendStatus>
 8005f64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	0a5b      	lsrs	r3, r3, #9
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005f82:	693b      	ldr	r3, [r7, #16]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	2b82      	cmp	r3, #130	; 0x82
 8005fca:	d111      	bne.n	8005ff0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 fa6b 	bl	80074ac <SDMMC_CmdStopTransfer>
 8005fd6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d008      	beq.n	8005ff0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff fd3a 	bl	8005a64 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0208 	bic.w	r2, r2, #8
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f240 523a 	movw	r2, #1338	; 0x53a
 8006008:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f001 fedd 	bl	8007dd8 <HAL_SD_RxCpltCallback>
#endif
}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fc ff92 	bl	8002f60 <HAL_DMA_GetError>
 800603c:	4603      	mov	r3, r0
 800603e:	2b02      	cmp	r3, #2
 8006040:	d03e      	beq.n	80060c0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006048:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006050:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d002      	beq.n	800605e <SD_DMAError+0x36>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d12d      	bne.n	80060ba <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <SD_DMAError+0xa0>)
 8006064:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006074:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006082:	6978      	ldr	r0, [r7, #20]
 8006084:	f7ff ff62 	bl	8005f4c <HAL_SD_GetCardState>
 8006088:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b06      	cmp	r3, #6
 800608e:	d002      	beq.n	8006096 <SD_DMAError+0x6e>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b05      	cmp	r3, #5
 8006094:	d10a      	bne.n	80060ac <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fa06 	bl	80074ac <SDMMC_CmdStopTransfer>
 80060a0:	4602      	mov	r2, r0
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	431a      	orrs	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80060ba:	6978      	ldr	r0, [r7, #20]
 80060bc:	f7ff fcd2 	bl	8005a64 <HAL_SD_ErrorCallback>
#endif
  }
}
 80060c0:	bf00      	nop
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	004005ff 	.word	0x004005ff

080060cc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f240 523a 	movw	r2, #1338	; 0x53a
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff ff31 	bl	8005f4c <HAL_SD_GetCardState>
 80060ea:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b06      	cmp	r3, #6
 80060fe:	d002      	beq.n	8006106 <SD_DMATxAbort+0x3a>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b05      	cmp	r3, #5
 8006104:	d10a      	bne.n	800611c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f001 f9ce 	bl	80074ac <SDMMC_CmdStopTransfer>
 8006110:	4602      	mov	r2, r0
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	431a      	orrs	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f001 fe43 	bl	8007db0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800612a:	e002      	b.n	8006132 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff fc99 	bl	8005a64 <HAL_SD_ErrorCallback>
}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006150:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff fefa 	bl	8005f4c <HAL_SD_GetCardState>
 8006158:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b06      	cmp	r3, #6
 800616c:	d002      	beq.n	8006174 <SD_DMARxAbort+0x3a>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b05      	cmp	r3, #5
 8006172:	d10a      	bne.n	800618a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4618      	mov	r0, r3
 800617a:	f001 f997 	bl	80074ac <SDMMC_CmdStopTransfer>
 800617e:	4602      	mov	r2, r0
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	431a      	orrs	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f001 fe0c 	bl	8007db0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006198:	e002      	b.n	80061a0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fc62 	bl	8005a64 <HAL_SD_ErrorCallback>
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061a8:	b5b0      	push	{r4, r5, r7, lr}
 80061aa:	b094      	sub	sp, #80	; 0x50
 80061ac:	af04      	add	r7, sp, #16
 80061ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80061b0:	2301      	movs	r3, #1
 80061b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 f849 	bl	8007250 <SDMMC_GetPowerState>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061c8:	e0b8      	b.n	800633c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d02f      	beq.n	8006232 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fa73 	bl	80076c2 <SDMMC_CmdSendCID>
 80061dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <SD_InitCard+0x40>
    {
      return errorstate;
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	e0a9      	b.n	800633c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 f873 	bl	80072da <SDMMC_GetResponse>
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2104      	movs	r1, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f001 f86a 	bl	80072da <SDMMC_GetResponse>
 8006206:	4602      	mov	r2, r0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2108      	movs	r1, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f001 f861 	bl	80072da <SDMMC_GetResponse>
 8006218:	4602      	mov	r2, r0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	210c      	movs	r1, #12
 8006224:	4618      	mov	r0, r3
 8006226:	f001 f858 	bl	80072da <SDMMC_GetResponse>
 800622a:	4602      	mov	r2, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006236:	2b03      	cmp	r3, #3
 8006238:	d00d      	beq.n	8006256 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f107 020e 	add.w	r2, r7, #14
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f001 fa79 	bl	800773c <SDMMC_CmdSetRelAdd>
 800624a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800624c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <SD_InitCard+0xae>
    {
      return errorstate;
 8006252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006254:	e072      	b.n	800633c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625a:	2b03      	cmp	r3, #3
 800625c:	d036      	beq.n	80062cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800625e:	89fb      	ldrh	r3, [r7, #14]
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f001 fa43 	bl	80076fe <SDMMC_CmdSendCSD>
 8006278:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800627a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006282:	e05b      	b.n	800633c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f001 f825 	bl	80072da <SDMMC_GetResponse>
 8006290:	4602      	mov	r2, r0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2104      	movs	r1, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f001 f81c 	bl	80072da <SDMMC_GetResponse>
 80062a2:	4602      	mov	r2, r0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2108      	movs	r1, #8
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 f813 	bl	80072da <SDMMC_GetResponse>
 80062b4:	4602      	mov	r2, r0
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	210c      	movs	r1, #12
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 f80a 	bl	80072da <SDMMC_GetResponse>
 80062c6:	4602      	mov	r2, r0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2104      	movs	r1, #4
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 f801 	bl	80072da <SDMMC_GetResponse>
 80062d8:	4603      	mov	r3, r0
 80062da:	0d1a      	lsrs	r2, r3, #20
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80062e0:	f107 0310 	add.w	r3, r7, #16
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff fbc6 	bl	8005a78 <HAL_SD_GetCardCSD>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062f6:	e021      	b.n	800633c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6819      	ldr	r1, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	2200      	movs	r2, #0
 8006304:	461c      	mov	r4, r3
 8006306:	4615      	mov	r5, r2
 8006308:	4622      	mov	r2, r4
 800630a:	462b      	mov	r3, r5
 800630c:	4608      	mov	r0, r1
 800630e:	f001 f8ef 	bl	80074f0 <SDMMC_CmdSelDesel>
 8006312:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <SD_InitCard+0x176>
  {
    return errorstate;
 800631a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631c:	e00e      	b.n	800633c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681d      	ldr	r5, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	466c      	mov	r4, sp
 8006326:	f103 0210 	add.w	r2, r3, #16
 800632a:	ca07      	ldmia	r2, {r0, r1, r2}
 800632c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006330:	3304      	adds	r3, #4
 8006332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006334:	4628      	mov	r0, r5
 8006336:	f000 ff33 	bl	80071a0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3740      	adds	r7, #64	; 0x40
 8006340:	46bd      	mov	sp, r7
 8006342:	bdb0      	pop	{r4, r5, r7, pc}

08006344 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f001 f8ea 	bl	8007536 <SDMMC_CmdGoIdleState>
 8006362:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <SD_PowerON+0x2a>
  {
    return errorstate;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	e072      	b.n	8006454 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f001 f8fd 	bl	8007572 <SDMMC_CmdOperCond>
 8006378:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00d      	beq.n	800639c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f001 f8d3 	bl	8007536 <SDMMC_CmdGoIdleState>
 8006390:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e05b      	b.n	8006454 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d137      	bne.n	800641a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 f8fd 	bl	80075b0 <SDMMC_CmdAppCommand>
 80063b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d02d      	beq.n	800641a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063c2:	e047      	b.n	8006454 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 f8f0 	bl	80075b0 <SDMMC_CmdAppCommand>
 80063d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <SD_PowerON+0x98>
    {
      return errorstate;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	e03b      	b.n	8006454 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	491e      	ldr	r1, [pc, #120]	; (800645c <SD_PowerON+0x118>)
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 f906 	bl	80075f4 <SDMMC_CmdAppOperCommand>
 80063e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063f4:	e02e      	b.n	8006454 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 ff6c 	bl	80072da <SDMMC_GetResponse>
 8006402:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	0fdb      	lsrs	r3, r3, #31
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <SD_PowerON+0xcc>
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <SD_PowerON+0xce>
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]

    count++;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	3301      	adds	r3, #1
 8006418:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006420:	4293      	cmp	r3, r2
 8006422:	d802      	bhi.n	800642a <SD_PowerON+0xe6>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0cc      	beq.n	80063c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006430:	4293      	cmp	r3, r2
 8006432:	d902      	bls.n	800643a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006438:	e00c      	b.n	8006454 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	645a      	str	r2, [r3, #68]	; 0x44
 800644a:	e002      	b.n	8006452 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	c1100000 	.word	0xc1100000

08006460 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006470:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006474:	e018      	b.n	80064a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f001 f97b 	bl	800777e <SDMMC_CmdSendStatus>
 8006488:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	e009      	b.n	80064a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f000 ff1d 	bl	80072da <SDMMC_GetResponse>
 80064a0:	4602      	mov	r2, r0
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 ff07 	bl	80072da <SDMMC_GetResponse>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064d6:	d102      	bne.n	80064de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064dc:	e02f      	b.n	800653e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064de:	f107 030c 	add.w	r3, r7, #12
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f879 	bl	80065dc <SD_FindSCR>
 80064ea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	e023      	b.n	800653e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01c      	beq.n	800653a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006508:	041b      	lsls	r3, r3, #16
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f001 f84f 	bl	80075b0 <SDMMC_CmdAppCommand>
 8006512:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	e00f      	b.n	800653e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2102      	movs	r1, #2
 8006524:	4618      	mov	r0, r3
 8006526:	f001 f889 	bl	800763c <SDMMC_CmdBusWidth>
 800652a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	e003      	b.n	800653e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006536:	2300      	movs	r3, #0
 8006538:	e001      	b.n	800653e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800653a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	2300      	movs	r3, #0
 8006554:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f000 febc 	bl	80072da <SDMMC_GetResponse>
 8006562:	4603      	mov	r3, r0
 8006564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800656c:	d102      	bne.n	8006574 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800656e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006572:	e02f      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006574:	f107 030c 	add.w	r3, r7, #12
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f82e 	bl	80065dc <SD_FindSCR>
 8006580:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	e023      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01c      	beq.n	80065d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659e:	041b      	lsls	r3, r3, #16
 80065a0:	4619      	mov	r1, r3
 80065a2:	4610      	mov	r0, r2
 80065a4:	f001 f804 	bl	80075b0 <SDMMC_CmdAppCommand>
 80065a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	e00f      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2100      	movs	r1, #0
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 f83e 	bl	800763c <SDMMC_CmdBusWidth>
 80065c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	e003      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80065cc:	2300      	movs	r3, #0
 80065ce:	e001      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80065d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b08f      	sub	sp, #60	; 0x3c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80065e6:	f7fb fac7 	bl	8001b78 <HAL_GetTick>
 80065ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80065f0:	2300      	movs	r3, #0
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2108      	movs	r1, #8
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fea8 	bl	8007358 <SDMMC_CmdBlockLength>
 8006608:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	e0b2      	b.n	800677a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f000 ffc5 	bl	80075b0 <SDMMC_CmdAppCommand>
 8006626:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <SD_FindSCR+0x56>
  {
    return errorstate;
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	e0a3      	b.n	800677a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006636:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006638:	2308      	movs	r3, #8
 800663a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800663c:	2330      	movs	r3, #48	; 0x30
 800663e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006640:	2302      	movs	r3, #2
 8006642:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006644:	2300      	movs	r3, #0
 8006646:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006648:	2301      	movs	r3, #1
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f107 0210 	add.w	r2, r7, #16
 8006654:	4611      	mov	r1, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f000 fe52 	bl	8007300 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4618      	mov	r0, r3
 8006662:	f001 f80d 	bl	8007680 <SDMMC_CmdSendSCR>
 8006666:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02a      	beq.n	80066c4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	e083      	b.n	800677a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00f      	beq.n	80066a0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	f107 0208 	add.w	r2, r7, #8
 800668c:	18d4      	adds	r4, r2, r3
 800668e:	4608      	mov	r0, r1
 8006690:	f000 fdb2 	bl	80071f8 <SDMMC_ReadFIFO>
 8006694:	4603      	mov	r3, r0
 8006696:	6023      	str	r3, [r4, #0]
      index++;
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	3301      	adds	r3, #1
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
 800669e:	e006      	b.n	80066ae <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d012      	beq.n	80066d4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80066ae:	f7fb fa63 	bl	8001b78 <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066bc:	d102      	bne.n	80066c4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80066be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066c2:	e05a      	b.n	800677a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ca:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0cf      	beq.n	8006672 <SD_FindSCR+0x96>
 80066d2:	e000      	b.n	80066d6 <SD_FindSCR+0xfa>
      break;
 80066d4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2208      	movs	r2, #8
 80066ea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80066ec:	2308      	movs	r3, #8
 80066ee:	e044      	b.n	800677a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2202      	movs	r2, #2
 8006704:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006706:	2302      	movs	r3, #2
 8006708:	e037      	b.n	800677a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006710:	f003 0320 	and.w	r3, r3, #32
 8006714:	2b00      	cmp	r3, #0
 8006716:	d005      	beq.n	8006724 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2220      	movs	r2, #32
 800671e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006720:	2320      	movs	r3, #32
 8006722:	e02a      	b.n	800677a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f240 523a 	movw	r2, #1338	; 0x53a
 800672c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	061a      	lsls	r2, r3, #24
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	021b      	lsls	r3, r3, #8
 8006736:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800673a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006744:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	0e1b      	lsrs	r3, r3, #24
 800674a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800674e:	601a      	str	r2, [r3, #0]
    scr++;
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	3304      	adds	r3, #4
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	061a      	lsls	r2, r3, #24
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006762:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800676c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	0e1b      	lsrs	r3, r3, #24
 8006772:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	373c      	adds	r7, #60	; 0x3c
 800677e:	46bd      	mov	sp, r7
 8006780:	bd90      	pop	{r4, r7, pc}

08006782 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b086      	sub	sp, #24
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d03f      	beq.n	800681c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800679c:	2300      	movs	r3, #0
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e033      	b.n	800680a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f000 fd26 	bl	80071f8 <SDMMC_ReadFIFO>
 80067ac:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3301      	adds	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	3b01      	subs	r3, #1
 80067c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	b2da      	uxtb	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	0c1b      	lsrs	r3, r3, #16
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3301      	adds	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	0e1b      	lsrs	r3, r3, #24
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3b01      	subs	r3, #1
 8006802:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3301      	adds	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2b07      	cmp	r3, #7
 800680e:	d9c8      	bls.n	80067a2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	693a      	ldr	r2, [r7, #16]
 800681a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800681c:	bf00      	nop
 800681e:	3718      	adds	r7, #24
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d043      	beq.n	80068c6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e037      	b.n	80068b4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	60bb      	str	r3, [r7, #8]
      tmp++;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	3b01      	subs	r3, #1
 8006854:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	021a      	lsls	r2, r3, #8
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4313      	orrs	r3, r2
 8006860:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	3b01      	subs	r3, #1
 800686c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	041a      	lsls	r2, r3, #16
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	4313      	orrs	r3, r2
 8006878:	60bb      	str	r3, [r7, #8]
      tmp++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3301      	adds	r3, #1
 800687e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	3b01      	subs	r3, #1
 8006884:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	061a      	lsls	r2, r3, #24
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4313      	orrs	r3, r2
 8006890:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3301      	adds	r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3b01      	subs	r3, #1
 800689c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f107 0208 	add.w	r2, r7, #8
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fcb2 	bl	8007212 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	3301      	adds	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2b07      	cmp	r3, #7
 80068b8:	d9c4      	bls.n	8006844 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68fa      	ldr	r2, [r7, #12]
 80068be:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80068c6:	bf00      	nop
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e040      	b.n	8006962 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7fb f845 	bl	8001980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2224      	movs	r2, #36	; 0x24
 80068fa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0201 	bic.w	r2, r2, #1
 800690a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f82d 	bl	800696c <UART_SetConfig>
 8006912:	4603      	mov	r3, r0
 8006914:	2b01      	cmp	r3, #1
 8006916:	d101      	bne.n	800691c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e022      	b.n	8006962 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fa85 	bl	8006e34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006938:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	689a      	ldr	r2, [r3, #8]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006948:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f042 0201 	orr.w	r2, r2, #1
 8006958:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fb0c 	bl	8006f78 <UART_CheckIdleState>
 8006960:	4603      	mov	r3, r0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689a      	ldr	r2, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	431a      	orrs	r2, r3
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4ba6      	ldr	r3, [pc, #664]	; (8006c30 <UART_SetConfig+0x2c4>)
 8006998:	4013      	ands	r3, r2
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	6979      	ldr	r1, [r7, #20]
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68da      	ldr	r2, [r3, #12]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	430a      	orrs	r2, r1
 80069dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a94      	ldr	r2, [pc, #592]	; (8006c34 <UART_SetConfig+0x2c8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d120      	bne.n	8006a2a <UART_SetConfig+0xbe>
 80069e8:	4b93      	ldr	r3, [pc, #588]	; (8006c38 <UART_SetConfig+0x2cc>)
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d816      	bhi.n	8006a24 <UART_SetConfig+0xb8>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <UART_SetConfig+0x90>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a0d 	.word	0x08006a0d
 8006a00:	08006a19 	.word	0x08006a19
 8006a04:	08006a13 	.word	0x08006a13
 8006a08:	08006a1f 	.word	0x08006a1f
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e150      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006a12:	2302      	movs	r3, #2
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e14d      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e14a      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006a1e:	2308      	movs	r3, #8
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	e147      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006a24:	2310      	movs	r3, #16
 8006a26:	77fb      	strb	r3, [r7, #31]
 8006a28:	e144      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a83      	ldr	r2, [pc, #524]	; (8006c3c <UART_SetConfig+0x2d0>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d132      	bne.n	8006a9a <UART_SetConfig+0x12e>
 8006a34:	4b80      	ldr	r3, [pc, #512]	; (8006c38 <UART_SetConfig+0x2cc>)
 8006a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3a:	f003 030c 	and.w	r3, r3, #12
 8006a3e:	2b0c      	cmp	r3, #12
 8006a40:	d828      	bhi.n	8006a94 <UART_SetConfig+0x128>
 8006a42:	a201      	add	r2, pc, #4	; (adr r2, 8006a48 <UART_SetConfig+0xdc>)
 8006a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a48:	08006a7d 	.word	0x08006a7d
 8006a4c:	08006a95 	.word	0x08006a95
 8006a50:	08006a95 	.word	0x08006a95
 8006a54:	08006a95 	.word	0x08006a95
 8006a58:	08006a89 	.word	0x08006a89
 8006a5c:	08006a95 	.word	0x08006a95
 8006a60:	08006a95 	.word	0x08006a95
 8006a64:	08006a95 	.word	0x08006a95
 8006a68:	08006a83 	.word	0x08006a83
 8006a6c:	08006a95 	.word	0x08006a95
 8006a70:	08006a95 	.word	0x08006a95
 8006a74:	08006a95 	.word	0x08006a95
 8006a78:	08006a8f 	.word	0x08006a8f
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	77fb      	strb	r3, [r7, #31]
 8006a80:	e118      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006a82:	2302      	movs	r3, #2
 8006a84:	77fb      	strb	r3, [r7, #31]
 8006a86:	e115      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006a88:	2304      	movs	r3, #4
 8006a8a:	77fb      	strb	r3, [r7, #31]
 8006a8c:	e112      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006a8e:	2308      	movs	r3, #8
 8006a90:	77fb      	strb	r3, [r7, #31]
 8006a92:	e10f      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006a94:	2310      	movs	r3, #16
 8006a96:	77fb      	strb	r3, [r7, #31]
 8006a98:	e10c      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a68      	ldr	r2, [pc, #416]	; (8006c40 <UART_SetConfig+0x2d4>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d120      	bne.n	8006ae6 <UART_SetConfig+0x17a>
 8006aa4:	4b64      	ldr	r3, [pc, #400]	; (8006c38 <UART_SetConfig+0x2cc>)
 8006aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aaa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006aae:	2b30      	cmp	r3, #48	; 0x30
 8006ab0:	d013      	beq.n	8006ada <UART_SetConfig+0x16e>
 8006ab2:	2b30      	cmp	r3, #48	; 0x30
 8006ab4:	d814      	bhi.n	8006ae0 <UART_SetConfig+0x174>
 8006ab6:	2b20      	cmp	r3, #32
 8006ab8:	d009      	beq.n	8006ace <UART_SetConfig+0x162>
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d810      	bhi.n	8006ae0 <UART_SetConfig+0x174>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d002      	beq.n	8006ac8 <UART_SetConfig+0x15c>
 8006ac2:	2b10      	cmp	r3, #16
 8006ac4:	d006      	beq.n	8006ad4 <UART_SetConfig+0x168>
 8006ac6:	e00b      	b.n	8006ae0 <UART_SetConfig+0x174>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e0f2      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	77fb      	strb	r3, [r7, #31]
 8006ad2:	e0ef      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	77fb      	strb	r3, [r7, #31]
 8006ad8:	e0ec      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006ada:	2308      	movs	r3, #8
 8006adc:	77fb      	strb	r3, [r7, #31]
 8006ade:	e0e9      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006ae0:	2310      	movs	r3, #16
 8006ae2:	77fb      	strb	r3, [r7, #31]
 8006ae4:	e0e6      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a56      	ldr	r2, [pc, #344]	; (8006c44 <UART_SetConfig+0x2d8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d120      	bne.n	8006b32 <UART_SetConfig+0x1c6>
 8006af0:	4b51      	ldr	r3, [pc, #324]	; (8006c38 <UART_SetConfig+0x2cc>)
 8006af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006afa:	2bc0      	cmp	r3, #192	; 0xc0
 8006afc:	d013      	beq.n	8006b26 <UART_SetConfig+0x1ba>
 8006afe:	2bc0      	cmp	r3, #192	; 0xc0
 8006b00:	d814      	bhi.n	8006b2c <UART_SetConfig+0x1c0>
 8006b02:	2b80      	cmp	r3, #128	; 0x80
 8006b04:	d009      	beq.n	8006b1a <UART_SetConfig+0x1ae>
 8006b06:	2b80      	cmp	r3, #128	; 0x80
 8006b08:	d810      	bhi.n	8006b2c <UART_SetConfig+0x1c0>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <UART_SetConfig+0x1a8>
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d006      	beq.n	8006b20 <UART_SetConfig+0x1b4>
 8006b12:	e00b      	b.n	8006b2c <UART_SetConfig+0x1c0>
 8006b14:	2300      	movs	r3, #0
 8006b16:	77fb      	strb	r3, [r7, #31]
 8006b18:	e0cc      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	e0c9      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006b20:	2304      	movs	r3, #4
 8006b22:	77fb      	strb	r3, [r7, #31]
 8006b24:	e0c6      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006b26:	2308      	movs	r3, #8
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e0c3      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006b2c:	2310      	movs	r3, #16
 8006b2e:	77fb      	strb	r3, [r7, #31]
 8006b30:	e0c0      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a44      	ldr	r2, [pc, #272]	; (8006c48 <UART_SetConfig+0x2dc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d125      	bne.n	8006b88 <UART_SetConfig+0x21c>
 8006b3c:	4b3e      	ldr	r3, [pc, #248]	; (8006c38 <UART_SetConfig+0x2cc>)
 8006b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b4a:	d017      	beq.n	8006b7c <UART_SetConfig+0x210>
 8006b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b50:	d817      	bhi.n	8006b82 <UART_SetConfig+0x216>
 8006b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b56:	d00b      	beq.n	8006b70 <UART_SetConfig+0x204>
 8006b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5c:	d811      	bhi.n	8006b82 <UART_SetConfig+0x216>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <UART_SetConfig+0x1fe>
 8006b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b66:	d006      	beq.n	8006b76 <UART_SetConfig+0x20a>
 8006b68:	e00b      	b.n	8006b82 <UART_SetConfig+0x216>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	77fb      	strb	r3, [r7, #31]
 8006b6e:	e0a1      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006b70:	2302      	movs	r3, #2
 8006b72:	77fb      	strb	r3, [r7, #31]
 8006b74:	e09e      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006b76:	2304      	movs	r3, #4
 8006b78:	77fb      	strb	r3, [r7, #31]
 8006b7a:	e09b      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e098      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006b82:	2310      	movs	r3, #16
 8006b84:	77fb      	strb	r3, [r7, #31]
 8006b86:	e095      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a2f      	ldr	r2, [pc, #188]	; (8006c4c <UART_SetConfig+0x2e0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d125      	bne.n	8006bde <UART_SetConfig+0x272>
 8006b92:	4b29      	ldr	r3, [pc, #164]	; (8006c38 <UART_SetConfig+0x2cc>)
 8006b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba0:	d017      	beq.n	8006bd2 <UART_SetConfig+0x266>
 8006ba2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba6:	d817      	bhi.n	8006bd8 <UART_SetConfig+0x26c>
 8006ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bac:	d00b      	beq.n	8006bc6 <UART_SetConfig+0x25a>
 8006bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb2:	d811      	bhi.n	8006bd8 <UART_SetConfig+0x26c>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <UART_SetConfig+0x254>
 8006bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bbc:	d006      	beq.n	8006bcc <UART_SetConfig+0x260>
 8006bbe:	e00b      	b.n	8006bd8 <UART_SetConfig+0x26c>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	77fb      	strb	r3, [r7, #31]
 8006bc4:	e076      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e073      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e070      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e06d      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e06a      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1b      	ldr	r2, [pc, #108]	; (8006c50 <UART_SetConfig+0x2e4>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d138      	bne.n	8006c5a <UART_SetConfig+0x2ee>
 8006be8:	4b13      	ldr	r3, [pc, #76]	; (8006c38 <UART_SetConfig+0x2cc>)
 8006bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006bf2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bf6:	d017      	beq.n	8006c28 <UART_SetConfig+0x2bc>
 8006bf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006bfc:	d82a      	bhi.n	8006c54 <UART_SetConfig+0x2e8>
 8006bfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c02:	d00b      	beq.n	8006c1c <UART_SetConfig+0x2b0>
 8006c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c08:	d824      	bhi.n	8006c54 <UART_SetConfig+0x2e8>
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <UART_SetConfig+0x2aa>
 8006c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c12:	d006      	beq.n	8006c22 <UART_SetConfig+0x2b6>
 8006c14:	e01e      	b.n	8006c54 <UART_SetConfig+0x2e8>
 8006c16:	2300      	movs	r3, #0
 8006c18:	77fb      	strb	r3, [r7, #31]
 8006c1a:	e04b      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	77fb      	strb	r3, [r7, #31]
 8006c20:	e048      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006c22:	2304      	movs	r3, #4
 8006c24:	77fb      	strb	r3, [r7, #31]
 8006c26:	e045      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006c28:	2308      	movs	r3, #8
 8006c2a:	77fb      	strb	r3, [r7, #31]
 8006c2c:	e042      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006c2e:	bf00      	nop
 8006c30:	efff69f3 	.word	0xefff69f3
 8006c34:	40011000 	.word	0x40011000
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	40004400 	.word	0x40004400
 8006c40:	40004800 	.word	0x40004800
 8006c44:	40004c00 	.word	0x40004c00
 8006c48:	40005000 	.word	0x40005000
 8006c4c:	40011400 	.word	0x40011400
 8006c50:	40007800 	.word	0x40007800
 8006c54:	2310      	movs	r3, #16
 8006c56:	77fb      	strb	r3, [r7, #31]
 8006c58:	e02c      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a72      	ldr	r2, [pc, #456]	; (8006e28 <UART_SetConfig+0x4bc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d125      	bne.n	8006cb0 <UART_SetConfig+0x344>
 8006c64:	4b71      	ldr	r3, [pc, #452]	; (8006e2c <UART_SetConfig+0x4c0>)
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006c6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c72:	d017      	beq.n	8006ca4 <UART_SetConfig+0x338>
 8006c74:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006c78:	d817      	bhi.n	8006caa <UART_SetConfig+0x33e>
 8006c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7e:	d00b      	beq.n	8006c98 <UART_SetConfig+0x32c>
 8006c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c84:	d811      	bhi.n	8006caa <UART_SetConfig+0x33e>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <UART_SetConfig+0x326>
 8006c8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c8e:	d006      	beq.n	8006c9e <UART_SetConfig+0x332>
 8006c90:	e00b      	b.n	8006caa <UART_SetConfig+0x33e>
 8006c92:	2300      	movs	r3, #0
 8006c94:	77fb      	strb	r3, [r7, #31]
 8006c96:	e00d      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	77fb      	strb	r3, [r7, #31]
 8006c9c:	e00a      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006c9e:	2304      	movs	r3, #4
 8006ca0:	77fb      	strb	r3, [r7, #31]
 8006ca2:	e007      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006ca4:	2308      	movs	r3, #8
 8006ca6:	77fb      	strb	r3, [r7, #31]
 8006ca8:	e004      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006caa:	2310      	movs	r3, #16
 8006cac:	77fb      	strb	r3, [r7, #31]
 8006cae:	e001      	b.n	8006cb4 <UART_SetConfig+0x348>
 8006cb0:	2310      	movs	r3, #16
 8006cb2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cbc:	d15b      	bne.n	8006d76 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006cbe:	7ffb      	ldrb	r3, [r7, #31]
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d828      	bhi.n	8006d16 <UART_SetConfig+0x3aa>
 8006cc4:	a201      	add	r2, pc, #4	; (adr r2, 8006ccc <UART_SetConfig+0x360>)
 8006cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cca:	bf00      	nop
 8006ccc:	08006cf1 	.word	0x08006cf1
 8006cd0:	08006cf9 	.word	0x08006cf9
 8006cd4:	08006d01 	.word	0x08006d01
 8006cd8:	08006d17 	.word	0x08006d17
 8006cdc:	08006d07 	.word	0x08006d07
 8006ce0:	08006d17 	.word	0x08006d17
 8006ce4:	08006d17 	.word	0x08006d17
 8006ce8:	08006d17 	.word	0x08006d17
 8006cec:	08006d0f 	.word	0x08006d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cf0:	f7fd f8d4 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8006cf4:	61b8      	str	r0, [r7, #24]
        break;
 8006cf6:	e013      	b.n	8006d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf8:	f7fd f8e4 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 8006cfc:	61b8      	str	r0, [r7, #24]
        break;
 8006cfe:	e00f      	b.n	8006d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d00:	4b4b      	ldr	r3, [pc, #300]	; (8006e30 <UART_SetConfig+0x4c4>)
 8006d02:	61bb      	str	r3, [r7, #24]
        break;
 8006d04:	e00c      	b.n	8006d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d06:	f7fc fff7 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8006d0a:	61b8      	str	r0, [r7, #24]
        break;
 8006d0c:	e008      	b.n	8006d20 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d12:	61bb      	str	r3, [r7, #24]
        break;
 8006d14:	e004      	b.n	8006d20 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006d16:	2300      	movs	r3, #0
 8006d18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	77bb      	strb	r3, [r7, #30]
        break;
 8006d1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d074      	beq.n	8006e10 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	005a      	lsls	r2, r3, #1
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	085b      	lsrs	r3, r3, #1
 8006d30:	441a      	add	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2b0f      	cmp	r3, #15
 8006d40:	d916      	bls.n	8006d70 <UART_SetConfig+0x404>
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d48:	d212      	bcs.n	8006d70 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f023 030f 	bic.w	r3, r3, #15
 8006d52:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	085b      	lsrs	r3, r3, #1
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f003 0307 	and.w	r3, r3, #7
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	89fb      	ldrh	r3, [r7, #14]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	89fa      	ldrh	r2, [r7, #14]
 8006d6c:	60da      	str	r2, [r3, #12]
 8006d6e:	e04f      	b.n	8006e10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	77bb      	strb	r3, [r7, #30]
 8006d74:	e04c      	b.n	8006e10 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d76:	7ffb      	ldrb	r3, [r7, #31]
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d828      	bhi.n	8006dce <UART_SetConfig+0x462>
 8006d7c:	a201      	add	r2, pc, #4	; (adr r2, 8006d84 <UART_SetConfig+0x418>)
 8006d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d82:	bf00      	nop
 8006d84:	08006da9 	.word	0x08006da9
 8006d88:	08006db1 	.word	0x08006db1
 8006d8c:	08006db9 	.word	0x08006db9
 8006d90:	08006dcf 	.word	0x08006dcf
 8006d94:	08006dbf 	.word	0x08006dbf
 8006d98:	08006dcf 	.word	0x08006dcf
 8006d9c:	08006dcf 	.word	0x08006dcf
 8006da0:	08006dcf 	.word	0x08006dcf
 8006da4:	08006dc7 	.word	0x08006dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006da8:	f7fd f878 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8006dac:	61b8      	str	r0, [r7, #24]
        break;
 8006dae:	e013      	b.n	8006dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006db0:	f7fd f888 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 8006db4:	61b8      	str	r0, [r7, #24]
        break;
 8006db6:	e00f      	b.n	8006dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006db8:	4b1d      	ldr	r3, [pc, #116]	; (8006e30 <UART_SetConfig+0x4c4>)
 8006dba:	61bb      	str	r3, [r7, #24]
        break;
 8006dbc:	e00c      	b.n	8006dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dbe:	f7fc ff9b 	bl	8003cf8 <HAL_RCC_GetSysClockFreq>
 8006dc2:	61b8      	str	r0, [r7, #24]
        break;
 8006dc4:	e008      	b.n	8006dd8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dca:	61bb      	str	r3, [r7, #24]
        break;
 8006dcc:	e004      	b.n	8006dd8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	77bb      	strb	r3, [r7, #30]
        break;
 8006dd6:	bf00      	nop
    }

    if (pclk != 0U)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d018      	beq.n	8006e10 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	085a      	lsrs	r2, r3, #1
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	441a      	add	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	2b0f      	cmp	r3, #15
 8006df6:	d909      	bls.n	8006e0c <UART_SetConfig+0x4a0>
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dfe:	d205      	bcs.n	8006e0c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	60da      	str	r2, [r3, #12]
 8006e0a:	e001      	b.n	8006e10 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006e1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3720      	adds	r7, #32
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40007c00 	.word	0x40007c00
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	00f42400 	.word	0x00f42400

08006e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	f003 0301 	and.w	r3, r3, #1
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00a      	beq.n	8006e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00a      	beq.n	8006e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	430a      	orrs	r2, r1
 8006e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	f003 0304 	and.w	r3, r3, #4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00a      	beq.n	8006ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	430a      	orrs	r2, r1
 8006ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00a      	beq.n	8006f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	430a      	orrs	r2, r1
 8006f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01a      	beq.n	8006f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f32:	d10a      	bne.n	8006f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d00a      	beq.n	8006f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	605a      	str	r2, [r3, #4]
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af02      	add	r7, sp, #8
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006f88:	f7fa fdf6 	bl	8001b78 <HAL_GetTick>
 8006f8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0308 	and.w	r3, r3, #8
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d10e      	bne.n	8006fba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f831 	bl	8007012 <UART_WaitOnFlagUntilTimeout>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d001      	beq.n	8006fba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e027      	b.n	800700a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f003 0304 	and.w	r3, r3, #4
 8006fc4:	2b04      	cmp	r3, #4
 8006fc6:	d10e      	bne.n	8006fe6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f81b 	bl	8007012 <UART_WaitOnFlagUntilTimeout>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e011      	b.n	800700a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b09c      	sub	sp, #112	; 0x70
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	603b      	str	r3, [r7, #0]
 800701e:	4613      	mov	r3, r2
 8007020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007022:	e0a7      	b.n	8007174 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800702a:	f000 80a3 	beq.w	8007174 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702e:	f7fa fda3 	bl	8001b78 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800703a:	429a      	cmp	r2, r3
 800703c:	d302      	bcc.n	8007044 <UART_WaitOnFlagUntilTimeout+0x32>
 800703e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007040:	2b00      	cmp	r3, #0
 8007042:	d13f      	bne.n	80070c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704c:	e853 3f00 	ldrex	r3, [r3]
 8007050:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007054:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007058:	667b      	str	r3, [r7, #100]	; 0x64
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007062:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007064:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007068:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800706a:	e841 2300 	strex	r3, r2, [r1]
 800706e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1e6      	bne.n	8007044 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3308      	adds	r3, #8
 800707c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	f023 0301 	bic.w	r3, r3, #1
 800708c:	663b      	str	r3, [r7, #96]	; 0x60
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3308      	adds	r3, #8
 8007094:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007096:	64ba      	str	r2, [r7, #72]	; 0x48
 8007098:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800709c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800709e:	e841 2300 	strex	r3, r2, [r1]
 80070a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80070a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e5      	bne.n	8007076 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2220      	movs	r2, #32
 80070ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80070c0:	2303      	movs	r3, #3
 80070c2:	e068      	b.n	8007196 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d050      	beq.n	8007174 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e0:	d148      	bne.n	8007174 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f4:	e853 3f00 	ldrex	r3, [r3]
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007100:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800710a:	637b      	str	r3, [r7, #52]	; 0x34
 800710c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007110:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e6      	bne.n	80070ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	613b      	str	r3, [r7, #16]
   return(result);
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f023 0301 	bic.w	r3, r3, #1
 8007134:	66bb      	str	r3, [r7, #104]	; 0x68
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3308      	adds	r3, #8
 800713c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800713e:	623a      	str	r2, [r7, #32]
 8007140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007142:	69f9      	ldr	r1, [r7, #28]
 8007144:	6a3a      	ldr	r2, [r7, #32]
 8007146:	e841 2300 	strex	r3, r2, [r1]
 800714a:	61bb      	str	r3, [r7, #24]
   return(result);
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d1e5      	bne.n	800711e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2220      	movs	r2, #32
 8007156:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2220      	movs	r2, #32
 800715c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e010      	b.n	8007196 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69da      	ldr	r2, [r3, #28]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	4013      	ands	r3, r2
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	429a      	cmp	r2, r3
 8007182:	bf0c      	ite	eq
 8007184:	2301      	moveq	r3, #1
 8007186:	2300      	movne	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	461a      	mov	r2, r3
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	429a      	cmp	r2, r3
 8007190:	f43f af48 	beq.w	8007024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3770      	adds	r7, #112	; 0x70
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80071a0:	b084      	sub	sp, #16
 80071a2:	b480      	push	{r7}
 80071a4:	b085      	sub	sp, #20
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	f107 001c 	add.w	r0, r7, #28
 80071ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80071b6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80071b8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80071ba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80071be:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80071c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80071c2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80071c6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80071ca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <SDMMC_Init+0x54>)
 80071d8:	4013      	ands	r3, r2
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	431a      	orrs	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	b004      	add	sp, #16
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	ffff8100 	.word	0xffff8100

080071f8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007206:	4618      	mov	r0, r3
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2203      	movs	r2, #3
 8007240:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0303 	and.w	r3, r3, #3
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800728a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007290:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007296:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	4b06      	ldr	r3, [pc, #24]	; (80072bc <SDMMC_SendCommand+0x50>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	431a      	orrs	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3714      	adds	r7, #20
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	fffff000 	.word	0xfffff000

080072c0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	b2db      	uxtb	r3, r3
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80072da:	b480      	push	{r7}
 80072dc:	b085      	sub	sp, #20
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3314      	adds	r3, #20
 80072e8:	461a      	mov	r2, r3
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	4413      	add	r3, r2
 80072ee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
}  
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8007300:	b480      	push	{r7}
 8007302:	b085      	sub	sp, #20
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685a      	ldr	r2, [r3, #4]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007326:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800732c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007332:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800734a:	2300      	movs	r3, #0

}
 800734c:	4618      	mov	r0, r3
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b088      	sub	sp, #32
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007366:	2310      	movs	r3, #16
 8007368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007372:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007376:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007378:	f107 0308 	add.w	r3, r7, #8
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff ff74 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007384:	f241 3288 	movw	r2, #5000	; 0x1388
 8007388:	2110      	movs	r1, #16
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa1a 	bl	80077c4 <SDMMC_GetCmdResp1>
 8007390:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007392:	69fb      	ldr	r3, [r7, #28]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3720      	adds	r7, #32
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80073aa:	2311      	movs	r3, #17
 80073ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073ae:	2340      	movs	r3, #64	; 0x40
 80073b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073bc:	f107 0308 	add.w	r3, r7, #8
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7ff ff52 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80073c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073cc:	2111      	movs	r1, #17
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f9f8 	bl	80077c4 <SDMMC_GetCmdResp1>
 80073d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073d6:	69fb      	ldr	r3, [r7, #28]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3720      	adds	r7, #32
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b088      	sub	sp, #32
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80073ee:	2312      	movs	r3, #18
 80073f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073f2:	2340      	movs	r3, #64	; 0x40
 80073f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073f6:	2300      	movs	r3, #0
 80073f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007400:	f107 0308 	add.w	r3, r7, #8
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff ff30 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800740c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007410:	2112      	movs	r1, #18
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f9d6 	bl	80077c4 <SDMMC_GetCmdResp1>
 8007418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800741a:	69fb      	ldr	r3, [r7, #28]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007432:	2318      	movs	r3, #24
 8007434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007436:	2340      	movs	r3, #64	; 0x40
 8007438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800743a:	2300      	movs	r3, #0
 800743c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800743e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007444:	f107 0308 	add.w	r3, r7, #8
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7ff ff0e 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007450:	f241 3288 	movw	r2, #5000	; 0x1388
 8007454:	2118      	movs	r1, #24
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f9b4 	bl	80077c4 <SDMMC_GetCmdResp1>
 800745c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800745e:	69fb      	ldr	r3, [r7, #28]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3720      	adds	r7, #32
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b088      	sub	sp, #32
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007476:	2319      	movs	r3, #25
 8007478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800747a:	2340      	movs	r3, #64	; 0x40
 800747c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800747e:	2300      	movs	r3, #0
 8007480:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007482:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007486:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007488:	f107 0308 	add.w	r3, r7, #8
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff feec 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007494:	f241 3288 	movw	r2, #5000	; 0x1388
 8007498:	2119      	movs	r1, #25
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f992 	bl	80077c4 <SDMMC_GetCmdResp1>
 80074a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074a2:	69fb      	ldr	r3, [r7, #28]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3720      	adds	r7, #32
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80074b8:	230c      	movs	r3, #12
 80074ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074bc:	2340      	movs	r3, #64	; 0x40
 80074be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074ca:	f107 0308 	add.w	r3, r7, #8
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7ff fecb 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80074d6:	4a05      	ldr	r2, [pc, #20]	; (80074ec <SDMMC_CmdStopTransfer+0x40>)
 80074d8:	210c      	movs	r1, #12
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f972 	bl	80077c4 <SDMMC_GetCmdResp1>
 80074e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074e2:	69fb      	ldr	r3, [r7, #28]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3720      	adds	r7, #32
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	05f5e100 	.word	0x05f5e100

080074f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	; 0x28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007500:	2307      	movs	r3, #7
 8007502:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007504:	2340      	movs	r3, #64	; 0x40
 8007506:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007508:	2300      	movs	r3, #0
 800750a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800750c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007510:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007512:	f107 0310 	add.w	r3, r7, #16
 8007516:	4619      	mov	r1, r3
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f7ff fea7 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800751e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007522:	2107      	movs	r1, #7
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 f94d 	bl	80077c4 <SDMMC_GetCmdResp1>
 800752a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800752e:	4618      	mov	r0, r3
 8007530:	3728      	adds	r7, #40	; 0x28
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b088      	sub	sp, #32
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007542:	2300      	movs	r3, #0
 8007544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007546:	2300      	movs	r3, #0
 8007548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800754e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007552:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007554:	f107 0308 	add.w	r3, r7, #8
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fe86 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fb67 	bl	8007c34 <SDMMC_GetCmdError>
 8007566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007568:	69fb      	ldr	r3, [r7, #28]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3720      	adds	r7, #32
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b088      	sub	sp, #32
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800757a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800757e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007580:	2308      	movs	r3, #8
 8007582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007584:	2340      	movs	r3, #64	; 0x40
 8007586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800758c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007590:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007592:	f107 0308 	add.w	r3, r7, #8
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff fe67 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fafa 	bl	8007b98 <SDMMC_GetCmdResp7>
 80075a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075a6:	69fb      	ldr	r3, [r7, #28]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3720      	adds	r7, #32
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80075be:	2337      	movs	r3, #55	; 0x37
 80075c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075c2:	2340      	movs	r3, #64	; 0x40
 80075c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075d0:	f107 0308 	add.w	r3, r7, #8
 80075d4:	4619      	mov	r1, r3
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff fe48 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80075dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80075e0:	2137      	movs	r1, #55	; 0x37
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f8ee 	bl	80077c4 <SDMMC_GetCmdResp1>
 80075e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075ea:	69fb      	ldr	r3, [r7, #28]
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3720      	adds	r7, #32
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b088      	sub	sp, #32
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	4b0d      	ldr	r3, [pc, #52]	; (8007638 <SDMMC_CmdAppOperCommand+0x44>)
 8007602:	4313      	orrs	r3, r2
 8007604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007606:	2329      	movs	r3, #41	; 0x29
 8007608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800760a:	2340      	movs	r3, #64	; 0x40
 800760c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800760e:	2300      	movs	r3, #0
 8007610:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007616:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007618:	f107 0308 	add.w	r3, r7, #8
 800761c:	4619      	mov	r1, r3
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7ff fe24 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fa03 	bl	8007a30 <SDMMC_GetCmdResp3>
 800762a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800762c:	69fb      	ldr	r3, [r7, #28]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3720      	adds	r7, #32
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	80100000 	.word	0x80100000

0800763c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b088      	sub	sp, #32
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800764a:	2306      	movs	r3, #6
 800764c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800764e:	2340      	movs	r3, #64	; 0x40
 8007650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007656:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800765a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800765c:	f107 0308 	add.w	r3, r7, #8
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f7ff fe02 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007668:	f241 3288 	movw	r2, #5000	; 0x1388
 800766c:	2106      	movs	r1, #6
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f000 f8a8 	bl	80077c4 <SDMMC_GetCmdResp1>
 8007674:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007676:	69fb      	ldr	r3, [r7, #28]
}
 8007678:	4618      	mov	r0, r3
 800767a:	3720      	adds	r7, #32
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800768c:	2333      	movs	r3, #51	; 0x33
 800768e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007690:	2340      	movs	r3, #64	; 0x40
 8007692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007694:	2300      	movs	r3, #0
 8007696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800769c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800769e:	f107 0308 	add.w	r3, r7, #8
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff fde1 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80076aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ae:	2133      	movs	r1, #51	; 0x33
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f887 	bl	80077c4 <SDMMC_GetCmdResp1>
 80076b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076b8:	69fb      	ldr	r3, [r7, #28]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3720      	adds	r7, #32
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b088      	sub	sp, #32
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80076ca:	2300      	movs	r3, #0
 80076cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80076ce:	2302      	movs	r3, #2
 80076d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80076d2:	23c0      	movs	r3, #192	; 0xc0
 80076d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076e0:	f107 0308 	add.w	r3, r7, #8
 80076e4:	4619      	mov	r1, r3
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7ff fdc0 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 f957 	bl	80079a0 <SDMMC_GetCmdResp2>
 80076f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80076f4:	69fb      	ldr	r3, [r7, #28]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3720      	adds	r7, #32
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b088      	sub	sp, #32
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800770c:	2309      	movs	r3, #9
 800770e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007710:	23c0      	movs	r3, #192	; 0xc0
 8007712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800771c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800771e:	f107 0308 	add.w	r3, r7, #8
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f7ff fda1 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f938 	bl	80079a0 <SDMMC_GetCmdResp2>
 8007730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007732:	69fb      	ldr	r3, [r7, #28]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3720      	adds	r7, #32
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800774a:	2303      	movs	r3, #3
 800774c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800774e:	2340      	movs	r3, #64	; 0x40
 8007750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800775a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800775c:	f107 0308 	add.w	r3, r7, #8
 8007760:	4619      	mov	r1, r3
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff fd82 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007768:	683a      	ldr	r2, [r7, #0]
 800776a:	2103      	movs	r1, #3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 f99d 	bl	8007aac <SDMMC_GetCmdResp6>
 8007772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007774:	69fb      	ldr	r3, [r7, #28]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3720      	adds	r7, #32
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b088      	sub	sp, #32
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800778c:	230d      	movs	r3, #13
 800778e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007790:	2340      	movs	r3, #64	; 0x40
 8007792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007794:	2300      	movs	r3, #0
 8007796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800779c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800779e:	f107 0308 	add.w	r3, r7, #8
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f7ff fd61 	bl	800726c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80077aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80077ae:	210d      	movs	r1, #13
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f807 	bl	80077c4 <SDMMC_GetCmdResp1>
 80077b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80077b8:	69fb      	ldr	r3, [r7, #28]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3720      	adds	r7, #32
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
	...

080077c4 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	460b      	mov	r3, r1
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80077d2:	4b70      	ldr	r3, [pc, #448]	; (8007994 <SDMMC_GetCmdResp1+0x1d0>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a70      	ldr	r2, [pc, #448]	; (8007998 <SDMMC_GetCmdResp1+0x1d4>)
 80077d8:	fba2 2303 	umull	r2, r3, r2, r3
 80077dc:	0a5a      	lsrs	r2, r3, #9
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	fb02 f303 	mul.w	r3, r2, r3
 80077e4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	1e5a      	subs	r2, r3, #1
 80077ea:	61fa      	str	r2, [r7, #28]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80077f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80077f4:	e0c9      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0ef      	beq.n	80077e6 <SDMMC_GetCmdResp1+0x22>
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1ea      	bne.n	80077e6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007814:	f003 0304 	and.w	r3, r3, #4
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2204      	movs	r2, #4
 8007820:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007822:	2304      	movs	r3, #4
 8007824:	e0b1      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	2b00      	cmp	r3, #0
 8007830:	d004      	beq.n	800783c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007838:	2301      	movs	r3, #1
 800783a:	e0a6      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	22c5      	movs	r2, #197	; 0xc5
 8007840:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f7ff fd3c 	bl	80072c0 <SDMMC_GetCommandResponse>
 8007848:	4603      	mov	r3, r0
 800784a:	461a      	mov	r2, r3
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	4293      	cmp	r3, r2
 8007850:	d001      	beq.n	8007856 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007852:	2301      	movs	r3, #1
 8007854:	e099      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007856:	2100      	movs	r1, #0
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f7ff fd3e 	bl	80072da <SDMMC_GetResponse>
 800785e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	4b4e      	ldr	r3, [pc, #312]	; (800799c <SDMMC_GetCmdResp1+0x1d8>)
 8007864:	4013      	ands	r3, r2
 8007866:	2b00      	cmp	r3, #0
 8007868:	d101      	bne.n	800786e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800786a:	2300      	movs	r3, #0
 800786c:	e08d      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	da02      	bge.n	800787a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007874:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007878:	e087      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007884:	2340      	movs	r3, #64	; 0x40
 8007886:	e080      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007892:	2380      	movs	r3, #128	; 0x80
 8007894:	e079      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80078a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078a4:	e071      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80078b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b4:	e069      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d002      	beq.n	80078c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80078c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078c4:	e061      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d002      	beq.n	80078d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80078d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80078d4:	e059      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80078e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078e4:	e051      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80078f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078f4:	e049      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d002      	beq.n	8007906 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007900:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007904:	e041      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007910:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007914:	e039      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d002      	beq.n	8007926 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007924:	e031      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007930:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007934:	e029      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007940:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007944:	e021      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007950:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007954:	e019      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007960:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007964:	e011      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007970:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007974:	e009      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f003 0308 	and.w	r3, r3, #8
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007980:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007984:	e001      	b.n	800798a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007986:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800798a:	4618      	mov	r0, r3
 800798c:	3720      	adds	r7, #32
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20000000 	.word	0x20000000
 8007998:	10624dd3 	.word	0x10624dd3
 800799c:	fdffe008 	.word	0xfdffe008

080079a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079a8:	4b1f      	ldr	r3, [pc, #124]	; (8007a28 <SDMMC_GetCmdResp2+0x88>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a1f      	ldr	r2, [pc, #124]	; (8007a2c <SDMMC_GetCmdResp2+0x8c>)
 80079ae:	fba2 2303 	umull	r2, r3, r2, r3
 80079b2:	0a5b      	lsrs	r3, r3, #9
 80079b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b8:	fb02 f303 	mul.w	r3, r2, r3
 80079bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1e5a      	subs	r2, r3, #1
 80079c2:	60fa      	str	r2, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d102      	bne.n	80079ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80079cc:	e026      	b.n	8007a1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d0ef      	beq.n	80079be <SDMMC_GetCmdResp2+0x1e>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1ea      	bne.n	80079be <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2204      	movs	r2, #4
 80079f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079fa:	2304      	movs	r3, #4
 80079fc:	e00e      	b.n	8007a1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e003      	b.n	8007a1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	22c5      	movs	r2, #197	; 0xc5
 8007a18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	20000000 	.word	0x20000000
 8007a2c:	10624dd3 	.word	0x10624dd3

08007a30 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a38:	4b1a      	ldr	r3, [pc, #104]	; (8007aa4 <SDMMC_GetCmdResp3+0x74>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1a      	ldr	r2, [pc, #104]	; (8007aa8 <SDMMC_GetCmdResp3+0x78>)
 8007a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a42:	0a5b      	lsrs	r3, r3, #9
 8007a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a48:	fb02 f303 	mul.w	r3, r2, r3
 8007a4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1e5a      	subs	r2, r3, #1
 8007a52:	60fa      	str	r2, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d102      	bne.n	8007a5e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007a5c:	e01b      	b.n	8007a96 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0ef      	beq.n	8007a4e <SDMMC_GetCmdResp3+0x1e>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1ea      	bne.n	8007a4e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7c:	f003 0304 	and.w	r3, r3, #4
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d004      	beq.n	8007a8e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2204      	movs	r2, #4
 8007a88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a8a:	2304      	movs	r3, #4
 8007a8c:	e003      	b.n	8007a96 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	22c5      	movs	r2, #197	; 0xc5
 8007a92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000000 	.word	0x20000000
 8007aa8:	10624dd3 	.word	0x10624dd3

08007aac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	607a      	str	r2, [r7, #4]
 8007ab8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007aba:	4b35      	ldr	r3, [pc, #212]	; (8007b90 <SDMMC_GetCmdResp6+0xe4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a35      	ldr	r2, [pc, #212]	; (8007b94 <SDMMC_GetCmdResp6+0xe8>)
 8007ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac4:	0a5b      	lsrs	r3, r3, #9
 8007ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aca:	fb02 f303 	mul.w	r3, r2, r3
 8007ace:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	1e5a      	subs	r2, r3, #1
 8007ad4:	61fa      	str	r2, [r7, #28]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d102      	bne.n	8007ae0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ada:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ade:	e052      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ae4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0ef      	beq.n	8007ad0 <SDMMC_GetCmdResp6+0x24>
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1ea      	bne.n	8007ad0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007afe:	f003 0304 	and.w	r3, r3, #4
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d004      	beq.n	8007b10 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2204      	movs	r2, #4
 8007b0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	e03a      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d004      	beq.n	8007b26 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e02f      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f7ff fbca 	bl	80072c0 <SDMMC_GetCommandResponse>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	461a      	mov	r2, r3
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d001      	beq.n	8007b3a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e025      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	22c5      	movs	r2, #197	; 0xc5
 8007b3e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007b40:	2100      	movs	r1, #0
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7ff fbc9 	bl	80072da <SDMMC_GetResponse>
 8007b48:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d106      	bne.n	8007b62 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	0c1b      	lsrs	r3, r3, #16
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	e011      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d002      	beq.n	8007b72 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007b70:	e009      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d002      	beq.n	8007b82 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b80:	e001      	b.n	8007b86 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000000 	.word	0x20000000
 8007b94:	10624dd3 	.word	0x10624dd3

08007b98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007ba0:	4b22      	ldr	r3, [pc, #136]	; (8007c2c <SDMMC_GetCmdResp7+0x94>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a22      	ldr	r2, [pc, #136]	; (8007c30 <SDMMC_GetCmdResp7+0x98>)
 8007ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8007baa:	0a5b      	lsrs	r3, r3, #9
 8007bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb0:	fb02 f303 	mul.w	r3, r2, r3
 8007bb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	1e5a      	subs	r2, r3, #1
 8007bba:	60fa      	str	r2, [r7, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d102      	bne.n	8007bc6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007bc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bc4:	e02c      	b.n	8007c20 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0ef      	beq.n	8007bb6 <SDMMC_GetCmdResp7+0x1e>
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1ea      	bne.n	8007bb6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2204      	movs	r2, #4
 8007bf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007bf2:	2304      	movs	r3, #4
 8007bf4:	e014      	b.n	8007c20 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d004      	beq.n	8007c0c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e009      	b.n	8007c20 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2240      	movs	r2, #64	; 0x40
 8007c1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007c1e:	2300      	movs	r3, #0
  
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	20000000 	.word	0x20000000
 8007c30:	10624dd3 	.word	0x10624dd3

08007c34 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007c3c:	4b11      	ldr	r3, [pc, #68]	; (8007c84 <SDMMC_GetCmdError+0x50>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a11      	ldr	r2, [pc, #68]	; (8007c88 <SDMMC_GetCmdError+0x54>)
 8007c42:	fba2 2303 	umull	r2, r3, r2, r3
 8007c46:	0a5b      	lsrs	r3, r3, #9
 8007c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4c:	fb02 f303 	mul.w	r3, r2, r3
 8007c50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1e5a      	subs	r2, r3, #1
 8007c56:	60fa      	str	r2, [r7, #12]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d102      	bne.n	8007c62 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c60:	e009      	b.n	8007c76 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0f1      	beq.n	8007c52 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	22c5      	movs	r2, #197	; 0xc5
 8007c72:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	20000000 	.word	0x20000000
 8007c88:	10624dd3 	.word	0x10624dd3

08007c8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007c90:	4904      	ldr	r1, [pc, #16]	; (8007ca4 <MX_FATFS_Init+0x18>)
 8007c92:	4805      	ldr	r0, [pc, #20]	; (8007ca8 <MX_FATFS_Init+0x1c>)
 8007c94:	f002 fbd2 	bl	800a43c <FATFS_LinkDriver>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	4b03      	ldr	r3, [pc, #12]	; (8007cac <MX_FATFS_Init+0x20>)
 8007c9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007ca0:	bf00      	nop
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	2000198c 	.word	0x2000198c
 8007ca8:	0800f93c 	.word	0x0800f93c
 8007cac:	20001988 	.word	0x20001988

08007cb0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007cb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007cca:	f000 f896 	bl	8007dfa <BSP_SD_IsDetected>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d001      	beq.n	8007cd8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	e012      	b.n	8007cfe <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8007cd8:	480b      	ldr	r0, [pc, #44]	; (8007d08 <BSP_SD_Init+0x48>)
 8007cda:	f7fd facd 	bl	8005278 <HAL_SD_Init>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d109      	bne.n	8007cfc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8007ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007cec:	4806      	ldr	r0, [pc, #24]	; (8007d08 <BSP_SD_Init+0x48>)
 8007cee:	f7fe f893 	bl	8005e18 <HAL_SD_ConfigWideBusOperation>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20001790 	.word	0x20001790

08007d0c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	60f8      	str	r0, [r7, #12]
 8007d14:	60b9      	str	r1, [r7, #8]
 8007d16:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	68f9      	ldr	r1, [r7, #12]
 8007d22:	4806      	ldr	r0, [pc, #24]	; (8007d3c <BSP_SD_ReadBlocks_DMA+0x30>)
 8007d24:	f7fd fb60 	bl	80053e8 <HAL_SD_ReadBlocks_DMA>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20001790 	.word	0x20001790

08007d40 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	68f9      	ldr	r1, [r7, #12]
 8007d56:	4806      	ldr	r0, [pc, #24]	; (8007d70 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007d58:	f7fd fc28 	bl	80055ac <HAL_SD_WriteBlocks_DMA>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	20001790 	.word	0x20001790

08007d74 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007d78:	4805      	ldr	r0, [pc, #20]	; (8007d90 <BSP_SD_GetCardState+0x1c>)
 8007d7a:	f7fe f8e7 	bl	8005f4c <HAL_SD_GetCardState>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b04      	cmp	r3, #4
 8007d82:	bf14      	ite	ne
 8007d84:	2301      	movne	r3, #1
 8007d86:	2300      	moveq	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20001790 	.word	0x20001790

08007d94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8007d9c:	6879      	ldr	r1, [r7, #4]
 8007d9e:	4803      	ldr	r0, [pc, #12]	; (8007dac <BSP_SD_GetCardInfo+0x18>)
 8007da0:	f7fe f80e 	bl	8005dc0 <HAL_SD_GetCardInfo>
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20001790 	.word	0x20001790

08007db0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007db8:	f000 f818 	bl	8007dec <BSP_SD_AbortCallback>
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007dcc:	f000 f9a8 	bl	8008120 <BSP_SD_WriteCpltCallback>
}
 8007dd0:	bf00      	nop
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007de0:	f000 f9aa 	bl	8008138 <BSP_SD_ReadCpltCallback>
}
 8007de4:	bf00      	nop
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007dec:	b480      	push	{r7}
 8007dee:	af00      	add	r7, sp, #0

}
 8007df0:	bf00      	nop
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007e00:	2301      	movs	r3, #1
 8007e02:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007e04:	f000 f80c 	bl	8007e20 <BSP_PlatformIsDetected>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	b2db      	uxtb	r3, r3
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007e26:	2301      	movs	r3, #1
 8007e28:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8007e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e2e:	4806      	ldr	r0, [pc, #24]	; (8007e48 <BSP_PlatformIsDetected+0x28>)
 8007e30:	f7fb fb2e 	bl	8003490 <HAL_GPIO_ReadPin>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	40020400 	.word	0x40020400

08007e4c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8007e54:	f7f9 fe90 	bl	8001b78 <HAL_GetTick>
 8007e58:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8007e5a:	e006      	b.n	8007e6a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e5c:	f7ff ff8a 	bl	8007d74 <BSP_SD_GetCardState>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007e66:	2300      	movs	r3, #0
 8007e68:	e009      	b.n	8007e7e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8007e6a:	f7f9 fe85 	bl	8001b78 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d8f0      	bhi.n	8007e5c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007e7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
	...

08007e88 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007e92:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <SD_CheckStatus+0x38>)
 8007e94:	2201      	movs	r2, #1
 8007e96:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007e98:	f7ff ff6c 	bl	8007d74 <BSP_SD_GetCardState>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d107      	bne.n	8007eb2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007ea2:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <SD_CheckStatus+0x38>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f023 0301 	bic.w	r3, r3, #1
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	4b04      	ldr	r3, [pc, #16]	; (8007ec0 <SD_CheckStatus+0x38>)
 8007eb0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007eb2:	4b03      	ldr	r3, [pc, #12]	; (8007ec0 <SD_CheckStatus+0x38>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	b2db      	uxtb	r3, r3
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}
 8007ec0:	20000009 	.word	0x20000009

08007ec4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007ece:	f7ff fef7 	bl	8007cc0 <BSP_SD_Init>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d107      	bne.n	8007ee8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7ff ffd4 	bl	8007e88 <SD_CheckStatus>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <SD_initialize+0x34>)
 8007ee6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007ee8:	4b03      	ldr	r3, [pc, #12]	; (8007ef8 <SD_initialize+0x34>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	b2db      	uxtb	r3, r3
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3708      	adds	r7, #8
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	20000009 	.word	0x20000009

08007efc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7ff ffbd 	bl	8007e88 <SD_CheckStatus>
 8007f0e:	4603      	mov	r3, r0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	607a      	str	r2, [r7, #4]
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	4603      	mov	r3, r0
 8007f26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007f2c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007f30:	f7ff ff8c 	bl	8007e4c <SD_CheckStatusWithTimeout>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	da01      	bge.n	8007f3e <SD_read+0x26>
  {
    return res;
 8007f3a:	7dfb      	ldrb	r3, [r7, #23]
 8007f3c:	e03b      	b.n	8007fb6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	6879      	ldr	r1, [r7, #4]
 8007f42:	68b8      	ldr	r0, [r7, #8]
 8007f44:	f7ff fee2 	bl	8007d0c <BSP_SD_ReadBlocks_DMA>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d132      	bne.n	8007fb4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8007f4e:	4b1c      	ldr	r3, [pc, #112]	; (8007fc0 <SD_read+0xa8>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007f54:	f7f9 fe10 	bl	8001b78 <HAL_GetTick>
 8007f58:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007f5a:	bf00      	nop
 8007f5c:	4b18      	ldr	r3, [pc, #96]	; (8007fc0 <SD_read+0xa8>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d108      	bne.n	8007f76 <SD_read+0x5e>
 8007f64:	f7f9 fe08 	bl	8001b78 <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	f247 522f 	movw	r2, #29999	; 0x752f
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d9f2      	bls.n	8007f5c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8007f76:	4b12      	ldr	r3, [pc, #72]	; (8007fc0 <SD_read+0xa8>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	75fb      	strb	r3, [r7, #23]
 8007f82:	e017      	b.n	8007fb4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8007f84:	4b0e      	ldr	r3, [pc, #56]	; (8007fc0 <SD_read+0xa8>)
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007f8a:	f7f9 fdf5 	bl	8001b78 <HAL_GetTick>
 8007f8e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007f90:	e007      	b.n	8007fa2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007f92:	f7ff feef 	bl	8007d74 <BSP_SD_GetCardState>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d102      	bne.n	8007fa2 <SD_read+0x8a>
          {
            res = RES_OK;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8007fa0:	e008      	b.n	8007fb4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8007fa2:	f7f9 fde9 	bl	8001b78 <HAL_GetTick>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	f247 522f 	movw	r2, #29999	; 0x752f
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d9ee      	bls.n	8007f92 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8007fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20001df4 	.word	0x20001df4

08007fc4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007fd8:	4b24      	ldr	r3, [pc, #144]	; (800806c <SD_write+0xa8>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007fde:	f247 5030 	movw	r0, #30000	; 0x7530
 8007fe2:	f7ff ff33 	bl	8007e4c <SD_CheckStatusWithTimeout>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	da01      	bge.n	8007ff0 <SD_write+0x2c>
  {
    return res;
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	e038      	b.n	8008062 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	6879      	ldr	r1, [r7, #4]
 8007ff4:	68b8      	ldr	r0, [r7, #8]
 8007ff6:	f7ff fea3 	bl	8007d40 <BSP_SD_WriteBlocks_DMA>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d12f      	bne.n	8008060 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8008000:	f7f9 fdba 	bl	8001b78 <HAL_GetTick>
 8008004:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8008006:	bf00      	nop
 8008008:	4b18      	ldr	r3, [pc, #96]	; (800806c <SD_write+0xa8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d108      	bne.n	8008022 <SD_write+0x5e>
 8008010:	f7f9 fdb2 	bl	8001b78 <HAL_GetTick>
 8008014:	4602      	mov	r2, r0
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	1ad3      	subs	r3, r2, r3
 800801a:	f247 522f 	movw	r2, #29999	; 0x752f
 800801e:	4293      	cmp	r3, r2
 8008020:	d9f2      	bls.n	8008008 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8008022:	4b12      	ldr	r3, [pc, #72]	; (800806c <SD_write+0xa8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d102      	bne.n	8008030 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	75fb      	strb	r3, [r7, #23]
 800802e:	e017      	b.n	8008060 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8008030:	4b0e      	ldr	r3, [pc, #56]	; (800806c <SD_write+0xa8>)
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8008036:	f7f9 fd9f 	bl	8001b78 <HAL_GetTick>
 800803a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800803c:	e007      	b.n	800804e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800803e:	f7ff fe99 	bl	8007d74 <BSP_SD_GetCardState>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d102      	bne.n	800804e <SD_write+0x8a>
          {
            res = RES_OK;
 8008048:	2300      	movs	r3, #0
 800804a:	75fb      	strb	r3, [r7, #23]
            break;
 800804c:	e008      	b.n	8008060 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800804e:	f7f9 fd93 	bl	8001b78 <HAL_GetTick>
 8008052:	4602      	mov	r2, r0
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	f247 522f 	movw	r2, #29999	; 0x752f
 800805c:	4293      	cmp	r3, r2
 800805e:	d9ee      	bls.n	800803e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8008060:	7dfb      	ldrb	r3, [r7, #23]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20001df0 	.word	0x20001df0

08008070 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b08c      	sub	sp, #48	; 0x30
 8008074:	af00      	add	r7, sp, #0
 8008076:	4603      	mov	r3, r0
 8008078:	603a      	str	r2, [r7, #0]
 800807a:	71fb      	strb	r3, [r7, #7]
 800807c:	460b      	mov	r3, r1
 800807e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008086:	4b25      	ldr	r3, [pc, #148]	; (800811c <SD_ioctl+0xac>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <SD_ioctl+0x28>
 8008094:	2303      	movs	r3, #3
 8008096:	e03c      	b.n	8008112 <SD_ioctl+0xa2>

  switch (cmd)
 8008098:	79bb      	ldrb	r3, [r7, #6]
 800809a:	2b03      	cmp	r3, #3
 800809c:	d834      	bhi.n	8008108 <SD_ioctl+0x98>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <SD_ioctl+0x34>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	080080b5 	.word	0x080080b5
 80080a8:	080080bd 	.word	0x080080bd
 80080ac:	080080d5 	.word	0x080080d5
 80080b0:	080080ef 	.word	0x080080ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080ba:	e028      	b.n	800810e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80080bc:	f107 030c 	add.w	r3, r7, #12
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7ff fe67 	bl	8007d94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80080c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080d2:	e01c      	b.n	800810e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80080d4:	f107 030c 	add.w	r3, r7, #12
 80080d8:	4618      	mov	r0, r3
 80080da:	f7ff fe5b 	bl	8007d94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80080de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80080e6:	2300      	movs	r3, #0
 80080e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80080ec:	e00f      	b.n	800810e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80080ee:	f107 030c 	add.w	r3, r7, #12
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff fe4e 	bl	8007d94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80080f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fa:	0a5a      	lsrs	r2, r3, #9
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008106:	e002      	b.n	800810e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8008108:	2304      	movs	r3, #4
 800810a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800810e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008112:	4618      	mov	r0, r3
 8008114:	3730      	adds	r7, #48	; 0x30
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20000009 	.word	0x20000009

08008120 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8008120:	b480      	push	{r7}
 8008122:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8008124:	4b03      	ldr	r3, [pc, #12]	; (8008134 <BSP_SD_WriteCpltCallback+0x14>)
 8008126:	2201      	movs	r2, #1
 8008128:	601a      	str	r2, [r3, #0]
}
 800812a:	bf00      	nop
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr
 8008134:	20001df0 	.word	0x20001df0

08008138 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008138:	b480      	push	{r7}
 800813a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800813c:	4b03      	ldr	r3, [pc, #12]	; (800814c <BSP_SD_ReadCpltCallback+0x14>)
 800813e:	2201      	movs	r2, #1
 8008140:	601a      	str	r2, [r3, #0]
}
 8008142:	bf00      	nop
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	20001df4 	.word	0x20001df4

08008150 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b084      	sub	sp, #16
 8008154:	af00      	add	r7, sp, #0
 8008156:	4603      	mov	r3, r0
 8008158:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800815a:	79fb      	ldrb	r3, [r7, #7]
 800815c:	4a08      	ldr	r2, [pc, #32]	; (8008180 <disk_status+0x30>)
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	4413      	add	r3, r2
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	79fa      	ldrb	r2, [r7, #7]
 8008168:	4905      	ldr	r1, [pc, #20]	; (8008180 <disk_status+0x30>)
 800816a:	440a      	add	r2, r1
 800816c:	7a12      	ldrb	r2, [r2, #8]
 800816e:	4610      	mov	r0, r2
 8008170:	4798      	blx	r3
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008176:	7bfb      	ldrb	r3, [r7, #15]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3710      	adds	r7, #16
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20001e20 	.word	0x20001e20

08008184 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800818e:	2300      	movs	r3, #0
 8008190:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008192:	79fb      	ldrb	r3, [r7, #7]
 8008194:	4a0d      	ldr	r2, [pc, #52]	; (80081cc <disk_initialize+0x48>)
 8008196:	5cd3      	ldrb	r3, [r2, r3]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d111      	bne.n	80081c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800819c:	79fb      	ldrb	r3, [r7, #7]
 800819e:	4a0b      	ldr	r2, [pc, #44]	; (80081cc <disk_initialize+0x48>)
 80081a0:	2101      	movs	r1, #1
 80081a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	4a09      	ldr	r2, [pc, #36]	; (80081cc <disk_initialize+0x48>)
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	79fa      	ldrb	r2, [r7, #7]
 80081b2:	4906      	ldr	r1, [pc, #24]	; (80081cc <disk_initialize+0x48>)
 80081b4:	440a      	add	r2, r1
 80081b6:	7a12      	ldrb	r2, [r2, #8]
 80081b8:	4610      	mov	r0, r2
 80081ba:	4798      	blx	r3
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20001e20 	.word	0x20001e20

080081d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80081d0:	b590      	push	{r4, r7, lr}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60b9      	str	r1, [r7, #8]
 80081d8:	607a      	str	r2, [r7, #4]
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	4603      	mov	r3, r0
 80081de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
 80081e2:	4a0a      	ldr	r2, [pc, #40]	; (800820c <disk_read+0x3c>)
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	689c      	ldr	r4, [r3, #8]
 80081ec:	7bfb      	ldrb	r3, [r7, #15]
 80081ee:	4a07      	ldr	r2, [pc, #28]	; (800820c <disk_read+0x3c>)
 80081f0:	4413      	add	r3, r2
 80081f2:	7a18      	ldrb	r0, [r3, #8]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	68b9      	ldr	r1, [r7, #8]
 80081fa:	47a0      	blx	r4
 80081fc:	4603      	mov	r3, r0
 80081fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8008200:	7dfb      	ldrb	r3, [r7, #23]
}
 8008202:	4618      	mov	r0, r3
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	bd90      	pop	{r4, r7, pc}
 800820a:	bf00      	nop
 800820c:	20001e20 	.word	0x20001e20

08008210 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b087      	sub	sp, #28
 8008214:	af00      	add	r7, sp, #0
 8008216:	60b9      	str	r1, [r7, #8]
 8008218:	607a      	str	r2, [r7, #4]
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	4603      	mov	r3, r0
 800821e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	4a0a      	ldr	r2, [pc, #40]	; (800824c <disk_write+0x3c>)
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	4413      	add	r3, r2
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	68dc      	ldr	r4, [r3, #12]
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	4a07      	ldr	r2, [pc, #28]	; (800824c <disk_write+0x3c>)
 8008230:	4413      	add	r3, r2
 8008232:	7a18      	ldrb	r0, [r3, #8]
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	47a0      	blx	r4
 800823c:	4603      	mov	r3, r0
 800823e:	75fb      	strb	r3, [r7, #23]
  return res;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
}
 8008242:	4618      	mov	r0, r3
 8008244:	371c      	adds	r7, #28
 8008246:	46bd      	mov	sp, r7
 8008248:	bd90      	pop	{r4, r7, pc}
 800824a:	bf00      	nop
 800824c:	20001e20 	.word	0x20001e20

08008250 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	4603      	mov	r3, r0
 8008258:	603a      	str	r2, [r7, #0]
 800825a:	71fb      	strb	r3, [r7, #7]
 800825c:	460b      	mov	r3, r1
 800825e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	4a09      	ldr	r2, [pc, #36]	; (8008288 <disk_ioctl+0x38>)
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	4413      	add	r3, r2
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	79fa      	ldrb	r2, [r7, #7]
 800826e:	4906      	ldr	r1, [pc, #24]	; (8008288 <disk_ioctl+0x38>)
 8008270:	440a      	add	r2, r1
 8008272:	7a10      	ldrb	r0, [r2, #8]
 8008274:	79b9      	ldrb	r1, [r7, #6]
 8008276:	683a      	ldr	r2, [r7, #0]
 8008278:	4798      	blx	r3
 800827a:	4603      	mov	r3, r0
 800827c:	73fb      	strb	r3, [r7, #15]
  return res;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	20001e20 	.word	0x20001e20

0800828c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3301      	adds	r3, #1
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800829c:	89fb      	ldrh	r3, [r7, #14]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	b21a      	sxth	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	b21b      	sxth	r3, r3
 80082a8:	4313      	orrs	r3, r2
 80082aa:	b21b      	sxth	r3, r3
 80082ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80082ae:	89fb      	ldrh	r3, [r7, #14]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80082bc:	b480      	push	{r7}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3303      	adds	r3, #3
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	3202      	adds	r2, #2
 80082d4:	7812      	ldrb	r2, [r2, #0]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	021b      	lsls	r3, r3, #8
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	3201      	adds	r2, #1
 80082e2:	7812      	ldrb	r2, [r2, #0]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	021b      	lsls	r3, r3, #8
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	7812      	ldrb	r2, [r2, #0]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80082f4:	68fb      	ldr	r3, [r7, #12]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	460b      	mov	r3, r1
 800830c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	887a      	ldrh	r2, [r7, #2]
 8008316:	b2d2      	uxtb	r2, r2
 8008318:	701a      	strb	r2, [r3, #0]
 800831a:	887b      	ldrh	r3, [r7, #2]
 800831c:	0a1b      	lsrs	r3, r3, #8
 800831e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	607a      	str	r2, [r7, #4]
 8008326:	887a      	ldrh	r2, [r7, #2]
 8008328:	b2d2      	uxtb	r2, r2
 800832a:	701a      	strb	r2, [r3, #0]
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	683a      	ldr	r2, [r7, #0]
 800834a:	b2d2      	uxtb	r2, r2
 800834c:	701a      	strb	r2, [r3, #0]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	0a1b      	lsrs	r3, r3, #8
 8008352:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	607a      	str	r2, [r7, #4]
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	b2d2      	uxtb	r2, r2
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	0a1b      	lsrs	r3, r3, #8
 8008364:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	b2d2      	uxtb	r2, r2
 8008370:	701a      	strb	r2, [r3, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	0a1b      	lsrs	r3, r3, #8
 8008376:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	607a      	str	r2, [r7, #4]
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	b2d2      	uxtb	r2, r2
 8008382:	701a      	strb	r2, [r3, #0]
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008390:	b480      	push	{r7}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00d      	beq.n	80083c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80083aa:	693a      	ldr	r2, [r7, #16]
 80083ac:	1c53      	adds	r3, r2, #1
 80083ae:	613b      	str	r3, [r7, #16]
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	1c59      	adds	r1, r3, #1
 80083b4:	6179      	str	r1, [r7, #20]
 80083b6:	7812      	ldrb	r2, [r2, #0]
 80083b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3b01      	subs	r3, #1
 80083be:	607b      	str	r3, [r7, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1f1      	bne.n	80083aa <mem_cpy+0x1a>
	}
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80083d2:	b480      	push	{r7}
 80083d4:	b087      	sub	sp, #28
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	60f8      	str	r0, [r7, #12]
 80083da:	60b9      	str	r1, [r7, #8]
 80083dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	1c5a      	adds	r2, r3, #1
 80083e6:	617a      	str	r2, [r7, #20]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	b2d2      	uxtb	r2, r2
 80083ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	607b      	str	r3, [r7, #4]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1f3      	bne.n	80083e2 <mem_set+0x10>
}
 80083fa:	bf00      	nop
 80083fc:	bf00      	nop
 80083fe:	371c      	adds	r7, #28
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008408:	b480      	push	{r7}
 800840a:	b089      	sub	sp, #36	; 0x24
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	61fb      	str	r3, [r7, #28]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800841c:	2300      	movs	r3, #0
 800841e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	1c5a      	adds	r2, r3, #1
 8008424:	61fa      	str	r2, [r7, #28]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	4619      	mov	r1, r3
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	61ba      	str	r2, [r7, #24]
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	1acb      	subs	r3, r1, r3
 8008434:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	3b01      	subs	r3, #1
 800843a:	607b      	str	r3, [r7, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <mem_cmp+0x40>
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0eb      	beq.n	8008420 <mem_cmp+0x18>

	return r;
 8008448:	697b      	ldr	r3, [r7, #20]
}
 800844a:	4618      	mov	r0, r3
 800844c:	3724      	adds	r7, #36	; 0x24
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
 800845e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008460:	e002      	b.n	8008468 <chk_chr+0x12>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	3301      	adds	r3, #1
 8008466:	607b      	str	r3, [r7, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d005      	beq.n	800847c <chk_chr+0x26>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	461a      	mov	r2, r3
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	4293      	cmp	r3, r2
 800847a:	d1f2      	bne.n	8008462 <chk_chr+0xc>
	return *str;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	781b      	ldrb	r3, [r3, #0]
}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008496:	2300      	movs	r3, #0
 8008498:	60bb      	str	r3, [r7, #8]
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	e029      	b.n	80084f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80084a0:	4a27      	ldr	r2, [pc, #156]	; (8008540 <chk_lock+0xb4>)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	011b      	lsls	r3, r3, #4
 80084a6:	4413      	add	r3, r2
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d01d      	beq.n	80084ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80084ae:	4a24      	ldr	r2, [pc, #144]	; (8008540 <chk_lock+0xb4>)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	4413      	add	r3, r2
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d116      	bne.n	80084ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80084c0:	4a1f      	ldr	r2, [pc, #124]	; (8008540 <chk_lock+0xb4>)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	011b      	lsls	r3, r3, #4
 80084c6:	4413      	add	r3, r2
 80084c8:	3304      	adds	r3, #4
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d10c      	bne.n	80084ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80084d4:	4a1a      	ldr	r2, [pc, #104]	; (8008540 <chk_lock+0xb4>)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	4413      	add	r3, r2
 80084dc:	3308      	adds	r3, #8
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d102      	bne.n	80084ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80084e8:	e007      	b.n	80084fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80084ea:	2301      	movs	r3, #1
 80084ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3301      	adds	r3, #1
 80084f2:	60fb      	str	r3, [r7, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d9d2      	bls.n	80084a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d109      	bne.n	8008514 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d102      	bne.n	800850c <chk_lock+0x80>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b02      	cmp	r3, #2
 800850a:	d101      	bne.n	8008510 <chk_lock+0x84>
 800850c:	2300      	movs	r3, #0
 800850e:	e010      	b.n	8008532 <chk_lock+0xa6>
 8008510:	2312      	movs	r3, #18
 8008512:	e00e      	b.n	8008532 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d108      	bne.n	800852c <chk_lock+0xa0>
 800851a:	4a09      	ldr	r2, [pc, #36]	; (8008540 <chk_lock+0xb4>)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	011b      	lsls	r3, r3, #4
 8008520:	4413      	add	r3, r2
 8008522:	330c      	adds	r3, #12
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852a:	d101      	bne.n	8008530 <chk_lock+0xa4>
 800852c:	2310      	movs	r3, #16
 800852e:	e000      	b.n	8008532 <chk_lock+0xa6>
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	20001e00 	.word	0x20001e00

08008544 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800854a:	2300      	movs	r3, #0
 800854c:	607b      	str	r3, [r7, #4]
 800854e:	e002      	b.n	8008556 <enq_lock+0x12>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3301      	adds	r3, #1
 8008554:	607b      	str	r3, [r7, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d806      	bhi.n	800856a <enq_lock+0x26>
 800855c:	4a09      	ldr	r2, [pc, #36]	; (8008584 <enq_lock+0x40>)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	011b      	lsls	r3, r3, #4
 8008562:	4413      	add	r3, r2
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1f2      	bne.n	8008550 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b02      	cmp	r3, #2
 800856e:	bf14      	ite	ne
 8008570:	2301      	movne	r3, #1
 8008572:	2300      	moveq	r3, #0
 8008574:	b2db      	uxtb	r3, r3
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	20001e00 	.word	0x20001e00

08008588 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008592:	2300      	movs	r3, #0
 8008594:	60fb      	str	r3, [r7, #12]
 8008596:	e01f      	b.n	80085d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008598:	4a41      	ldr	r2, [pc, #260]	; (80086a0 <inc_lock+0x118>)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	011b      	lsls	r3, r3, #4
 800859e:	4413      	add	r3, r2
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d113      	bne.n	80085d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80085aa:	4a3d      	ldr	r2, [pc, #244]	; (80086a0 <inc_lock+0x118>)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	4413      	add	r3, r2
 80085b2:	3304      	adds	r3, #4
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d109      	bne.n	80085d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80085be:	4a38      	ldr	r2, [pc, #224]	; (80086a0 <inc_lock+0x118>)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	011b      	lsls	r3, r3, #4
 80085c4:	4413      	add	r3, r2
 80085c6:	3308      	adds	r3, #8
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d006      	beq.n	80085e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	3301      	adds	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d9dc      	bls.n	8008598 <inc_lock+0x10>
 80085de:	e000      	b.n	80085e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80085e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d132      	bne.n	800864e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80085e8:	2300      	movs	r3, #0
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	e002      	b.n	80085f4 <inc_lock+0x6c>
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	3301      	adds	r3, #1
 80085f2:	60fb      	str	r3, [r7, #12]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d806      	bhi.n	8008608 <inc_lock+0x80>
 80085fa:	4a29      	ldr	r2, [pc, #164]	; (80086a0 <inc_lock+0x118>)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	011b      	lsls	r3, r3, #4
 8008600:	4413      	add	r3, r2
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1f2      	bne.n	80085ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b02      	cmp	r3, #2
 800860c:	d101      	bne.n	8008612 <inc_lock+0x8a>
 800860e:	2300      	movs	r3, #0
 8008610:	e040      	b.n	8008694 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4922      	ldr	r1, [pc, #136]	; (80086a0 <inc_lock+0x118>)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	011b      	lsls	r3, r3, #4
 800861c:	440b      	add	r3, r1
 800861e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	491e      	ldr	r1, [pc, #120]	; (80086a0 <inc_lock+0x118>)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	011b      	lsls	r3, r3, #4
 800862a:	440b      	add	r3, r1
 800862c:	3304      	adds	r3, #4
 800862e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	695a      	ldr	r2, [r3, #20]
 8008634:	491a      	ldr	r1, [pc, #104]	; (80086a0 <inc_lock+0x118>)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	440b      	add	r3, r1
 800863c:	3308      	adds	r3, #8
 800863e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008640:	4a17      	ldr	r2, [pc, #92]	; (80086a0 <inc_lock+0x118>)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	011b      	lsls	r3, r3, #4
 8008646:	4413      	add	r3, r2
 8008648:	330c      	adds	r3, #12
 800864a:	2200      	movs	r2, #0
 800864c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <inc_lock+0xe0>
 8008654:	4a12      	ldr	r2, [pc, #72]	; (80086a0 <inc_lock+0x118>)
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	4413      	add	r3, r2
 800865c:	330c      	adds	r3, #12
 800865e:	881b      	ldrh	r3, [r3, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <inc_lock+0xe0>
 8008664:	2300      	movs	r3, #0
 8008666:	e015      	b.n	8008694 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d108      	bne.n	8008680 <inc_lock+0xf8>
 800866e:	4a0c      	ldr	r2, [pc, #48]	; (80086a0 <inc_lock+0x118>)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	4413      	add	r3, r2
 8008676:	330c      	adds	r3, #12
 8008678:	881b      	ldrh	r3, [r3, #0]
 800867a:	3301      	adds	r3, #1
 800867c:	b29a      	uxth	r2, r3
 800867e:	e001      	b.n	8008684 <inc_lock+0xfc>
 8008680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008684:	4906      	ldr	r1, [pc, #24]	; (80086a0 <inc_lock+0x118>)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	011b      	lsls	r3, r3, #4
 800868a:	440b      	add	r3, r1
 800868c:	330c      	adds	r3, #12
 800868e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3301      	adds	r3, #1
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	20001e00 	.word	0x20001e00

080086a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	607b      	str	r3, [r7, #4]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d825      	bhi.n	8008704 <dec_lock+0x60>
		n = Files[i].ctr;
 80086b8:	4a17      	ldr	r2, [pc, #92]	; (8008718 <dec_lock+0x74>)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	011b      	lsls	r3, r3, #4
 80086be:	4413      	add	r3, r2
 80086c0:	330c      	adds	r3, #12
 80086c2:	881b      	ldrh	r3, [r3, #0]
 80086c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80086c6:	89fb      	ldrh	r3, [r7, #14]
 80086c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086cc:	d101      	bne.n	80086d2 <dec_lock+0x2e>
 80086ce:	2300      	movs	r3, #0
 80086d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80086d2:	89fb      	ldrh	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <dec_lock+0x3a>
 80086d8:	89fb      	ldrh	r3, [r7, #14]
 80086da:	3b01      	subs	r3, #1
 80086dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80086de:	4a0e      	ldr	r2, [pc, #56]	; (8008718 <dec_lock+0x74>)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	011b      	lsls	r3, r3, #4
 80086e4:	4413      	add	r3, r2
 80086e6:	330c      	adds	r3, #12
 80086e8:	89fa      	ldrh	r2, [r7, #14]
 80086ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80086ec:	89fb      	ldrh	r3, [r7, #14]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d105      	bne.n	80086fe <dec_lock+0x5a>
 80086f2:	4a09      	ldr	r2, [pc, #36]	; (8008718 <dec_lock+0x74>)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	011b      	lsls	r3, r3, #4
 80086f8:	4413      	add	r3, r2
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	737b      	strb	r3, [r7, #13]
 8008702:	e001      	b.n	8008708 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008704:	2302      	movs	r3, #2
 8008706:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008708:	7b7b      	ldrb	r3, [r7, #13]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	20001e00 	.word	0x20001e00

0800871c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	e010      	b.n	800874c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800872a:	4a0d      	ldr	r2, [pc, #52]	; (8008760 <clear_lock+0x44>)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	4413      	add	r3, r2
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	429a      	cmp	r2, r3
 8008738:	d105      	bne.n	8008746 <clear_lock+0x2a>
 800873a:	4a09      	ldr	r2, [pc, #36]	; (8008760 <clear_lock+0x44>)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	011b      	lsls	r3, r3, #4
 8008740:	4413      	add	r3, r2
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3301      	adds	r3, #1
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d9eb      	bls.n	800872a <clear_lock+0xe>
	}
}
 8008752:	bf00      	nop
 8008754:	bf00      	nop
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	20001e00 	.word	0x20001e00

08008764 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	78db      	ldrb	r3, [r3, #3]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d034      	beq.n	80087e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	7858      	ldrb	r0, [r3, #1]
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008788:	2301      	movs	r3, #1
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	f7ff fd40 	bl	8008210 <disk_write>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <sync_window+0x38>
			res = FR_DISK_ERR;
 8008796:	2301      	movs	r3, #1
 8008798:	73fb      	strb	r3, [r7, #15]
 800879a:	e022      	b.n	80087e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	1ad2      	subs	r2, r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d217      	bcs.n	80087e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	789b      	ldrb	r3, [r3, #2]
 80087b6:	613b      	str	r3, [r7, #16]
 80087b8:	e010      	b.n	80087dc <sync_window+0x78>
					wsect += fs->fsize;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	4413      	add	r3, r2
 80087c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	7858      	ldrb	r0, [r3, #1]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087ce:	2301      	movs	r3, #1
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	f7ff fd1d 	bl	8008210 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	3b01      	subs	r3, #1
 80087da:	613b      	str	r3, [r7, #16]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d8eb      	bhi.n	80087ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d01b      	beq.n	800883c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f7ff ffad 	bl	8008764 <sync_window>
 800880a:	4603      	mov	r3, r0
 800880c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800880e:	7bfb      	ldrb	r3, [r7, #15]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d113      	bne.n	800883c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	7858      	ldrb	r0, [r3, #1]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800881e:	2301      	movs	r3, #1
 8008820:	683a      	ldr	r2, [r7, #0]
 8008822:	f7ff fcd5 	bl	80081d0 <disk_read>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d004      	beq.n	8008836 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800882c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008830:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008832:	2301      	movs	r3, #1
 8008834:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
	...

08008848 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f7ff ff87 	bl	8008764 <sync_window>
 8008856:	4603      	mov	r3, r0
 8008858:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d158      	bne.n	8008912 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	2b03      	cmp	r3, #3
 8008866:	d148      	bne.n	80088fa <sync_fs+0xb2>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	791b      	ldrb	r3, [r3, #4]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d144      	bne.n	80088fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3330      	adds	r3, #48	; 0x30
 8008874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008878:	2100      	movs	r1, #0
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff fda9 	bl	80083d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	3330      	adds	r3, #48	; 0x30
 8008884:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008888:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff fd38 	bl	8008302 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	3330      	adds	r3, #48	; 0x30
 8008896:	4921      	ldr	r1, [pc, #132]	; (800891c <sync_fs+0xd4>)
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff fd4d 	bl	8008338 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	3330      	adds	r3, #48	; 0x30
 80088a2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80088a6:	491e      	ldr	r1, [pc, #120]	; (8008920 <sync_fs+0xd8>)
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff fd45 	bl	8008338 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3330      	adds	r3, #48	; 0x30
 80088b2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	4619      	mov	r1, r3
 80088bc:	4610      	mov	r0, r2
 80088be:	f7ff fd3b 	bl	8008338 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3330      	adds	r3, #48	; 0x30
 80088c6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	4619      	mov	r1, r3
 80088d0:	4610      	mov	r0, r2
 80088d2:	f7ff fd31 	bl	8008338 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	69db      	ldr	r3, [r3, #28]
 80088da:	1c5a      	adds	r2, r3, #1
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	7858      	ldrb	r0, [r3, #1]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ee:	2301      	movs	r3, #1
 80088f0:	f7ff fc8e 	bl	8008210 <disk_write>
			fs->fsi_flag = 0;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	785b      	ldrb	r3, [r3, #1]
 80088fe:	2200      	movs	r2, #0
 8008900:	2100      	movs	r1, #0
 8008902:	4618      	mov	r0, r3
 8008904:	f7ff fca4 	bl	8008250 <disk_ioctl>
 8008908:	4603      	mov	r3, r0
 800890a:	2b00      	cmp	r3, #0
 800890c:	d001      	beq.n	8008912 <sync_fs+0xca>
 800890e:	2301      	movs	r3, #1
 8008910:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008912:	7bfb      	ldrb	r3, [r7, #15]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	41615252 	.word	0x41615252
 8008920:	61417272 	.word	0x61417272

08008924 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	3b02      	subs	r3, #2
 8008932:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	3b02      	subs	r3, #2
 800893a:	683a      	ldr	r2, [r7, #0]
 800893c:	429a      	cmp	r2, r3
 800893e:	d301      	bcc.n	8008944 <clust2sect+0x20>
 8008940:	2300      	movs	r3, #0
 8008942:	e008      	b.n	8008956 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	895b      	ldrh	r3, [r3, #10]
 8008948:	461a      	mov	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	fb03 f202 	mul.w	r2, r3, r2
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008954:	4413      	add	r3, r2
}
 8008956:	4618      	mov	r0, r3
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b086      	sub	sp, #24
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
 800896a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d904      	bls.n	8008982 <get_fat+0x20>
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	429a      	cmp	r2, r3
 8008980:	d302      	bcc.n	8008988 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008982:	2301      	movs	r3, #1
 8008984:	617b      	str	r3, [r7, #20]
 8008986:	e08f      	b.n	8008aa8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800898c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	2b03      	cmp	r3, #3
 8008994:	d062      	beq.n	8008a5c <get_fat+0xfa>
 8008996:	2b03      	cmp	r3, #3
 8008998:	dc7c      	bgt.n	8008a94 <get_fat+0x132>
 800899a:	2b01      	cmp	r3, #1
 800899c:	d002      	beq.n	80089a4 <get_fat+0x42>
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d042      	beq.n	8008a28 <get_fat+0xc6>
 80089a2:	e077      	b.n	8008a94 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	60fb      	str	r3, [r7, #12]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	085b      	lsrs	r3, r3, #1
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	6a1a      	ldr	r2, [r3, #32]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	0a5b      	lsrs	r3, r3, #9
 80089ba:	4413      	add	r3, r2
 80089bc:	4619      	mov	r1, r3
 80089be:	6938      	ldr	r0, [r7, #16]
 80089c0:	f7ff ff14 	bl	80087ec <move_window>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d167      	bne.n	8008a9a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	1c5a      	adds	r2, r3, #1
 80089ce:	60fa      	str	r2, [r7, #12]
 80089d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	4413      	add	r3, r2
 80089d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	6a1a      	ldr	r2, [r3, #32]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	0a5b      	lsrs	r3, r3, #9
 80089e6:	4413      	add	r3, r2
 80089e8:	4619      	mov	r1, r3
 80089ea:	6938      	ldr	r0, [r7, #16]
 80089ec:	f7ff fefe 	bl	80087ec <move_window>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d153      	bne.n	8008a9e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4413      	add	r3, r2
 8008a00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a04:	021b      	lsls	r3, r3, #8
 8008a06:	461a      	mov	r2, r3
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d002      	beq.n	8008a1e <get_fat+0xbc>
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	091b      	lsrs	r3, r3, #4
 8008a1c:	e002      	b.n	8008a24 <get_fat+0xc2>
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a24:	617b      	str	r3, [r7, #20]
			break;
 8008a26:	e03f      	b.n	8008aa8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	6a1a      	ldr	r2, [r3, #32]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	0a1b      	lsrs	r3, r3, #8
 8008a30:	4413      	add	r3, r2
 8008a32:	4619      	mov	r1, r3
 8008a34:	6938      	ldr	r0, [r7, #16]
 8008a36:	f7ff fed9 	bl	80087ec <move_window>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d130      	bne.n	8008aa2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	005b      	lsls	r3, r3, #1
 8008a4a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008a4e:	4413      	add	r3, r2
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7ff fc1b 	bl	800828c <ld_word>
 8008a56:	4603      	mov	r3, r0
 8008a58:	617b      	str	r3, [r7, #20]
			break;
 8008a5a:	e025      	b.n	8008aa8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	6a1a      	ldr	r2, [r3, #32]
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	09db      	lsrs	r3, r3, #7
 8008a64:	4413      	add	r3, r2
 8008a66:	4619      	mov	r1, r3
 8008a68:	6938      	ldr	r0, [r7, #16]
 8008a6a:	f7ff febf 	bl	80087ec <move_window>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d118      	bne.n	8008aa6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008a82:	4413      	add	r3, r2
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7ff fc19 	bl	80082bc <ld_dword>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008a90:	617b      	str	r3, [r7, #20]
			break;
 8008a92:	e009      	b.n	8008aa8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8008a94:	2301      	movs	r3, #1
 8008a96:	617b      	str	r3, [r7, #20]
 8008a98:	e006      	b.n	8008aa8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a9a:	bf00      	nop
 8008a9c:	e004      	b.n	8008aa8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008a9e:	bf00      	nop
 8008aa0:	e002      	b.n	8008aa8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008aa2:	bf00      	nop
 8008aa4:	e000      	b.n	8008aa8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008aa6:	bf00      	nop
		}
	}

	return val;
 8008aa8:	697b      	ldr	r3, [r7, #20]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8008ab2:	b590      	push	{r4, r7, lr}
 8008ab4:	b089      	sub	sp, #36	; 0x24
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	60f8      	str	r0, [r7, #12]
 8008aba:	60b9      	str	r1, [r7, #8]
 8008abc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8008abe:	2302      	movs	r3, #2
 8008ac0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	f240 80d2 	bls.w	8008c6e <put_fat+0x1bc>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	f080 80cc 	bcs.w	8008c6e <put_fat+0x1bc>
		switch (fs->fs_type) {
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	f000 8096 	beq.w	8008c0c <put_fat+0x15a>
 8008ae0:	2b03      	cmp	r3, #3
 8008ae2:	f300 80cd 	bgt.w	8008c80 <put_fat+0x1ce>
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d002      	beq.n	8008af0 <put_fat+0x3e>
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d06e      	beq.n	8008bcc <put_fat+0x11a>
 8008aee:	e0c7      	b.n	8008c80 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	61bb      	str	r3, [r7, #24]
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	085b      	lsrs	r3, r3, #1
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	4413      	add	r3, r2
 8008afc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6a1a      	ldr	r2, [r3, #32]
 8008b02:	69bb      	ldr	r3, [r7, #24]
 8008b04:	0a5b      	lsrs	r3, r3, #9
 8008b06:	4413      	add	r3, r2
 8008b08:	4619      	mov	r1, r3
 8008b0a:	68f8      	ldr	r0, [r7, #12]
 8008b0c:	f7ff fe6e 	bl	80087ec <move_window>
 8008b10:	4603      	mov	r3, r0
 8008b12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b14:	7ffb      	ldrb	r3, [r7, #31]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f040 80ab 	bne.w	8008c72 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	1c59      	adds	r1, r3, #1
 8008b26:	61b9      	str	r1, [r7, #24]
 8008b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2c:	4413      	add	r3, r2
 8008b2e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00d      	beq.n	8008b56 <put_fat+0xa4>
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	b25b      	sxtb	r3, r3
 8008b40:	f003 030f 	and.w	r3, r3, #15
 8008b44:	b25a      	sxtb	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	011b      	lsls	r3, r3, #4
 8008b4c:	b25b      	sxtb	r3, r3
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	b25b      	sxtb	r3, r3
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	e001      	b.n	8008b5a <put_fat+0xa8>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2201      	movs	r2, #1
 8008b62:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	6a1a      	ldr	r2, [r3, #32]
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	0a5b      	lsrs	r3, r3, #9
 8008b6c:	4413      	add	r3, r2
 8008b6e:	4619      	mov	r1, r3
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f7ff fe3b 	bl	80087ec <move_window>
 8008b76:	4603      	mov	r3, r0
 8008b78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008b7a:	7ffb      	ldrb	r3, [r7, #31]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d17a      	bne.n	8008c76 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b8c:	4413      	add	r3, r2
 8008b8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <put_fat+0xf0>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	091b      	lsrs	r3, r3, #4
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	e00e      	b.n	8008bc0 <put_fat+0x10e>
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	b25b      	sxtb	r3, r3
 8008ba8:	f023 030f 	bic.w	r3, r3, #15
 8008bac:	b25a      	sxtb	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	0a1b      	lsrs	r3, r3, #8
 8008bb2:	b25b      	sxtb	r3, r3
 8008bb4:	f003 030f 	and.w	r3, r3, #15
 8008bb8:	b25b      	sxtb	r3, r3
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	b25b      	sxtb	r3, r3
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	70da      	strb	r2, [r3, #3]
			break;
 8008bca:	e059      	b.n	8008c80 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	6a1a      	ldr	r2, [r3, #32]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	0a1b      	lsrs	r3, r3, #8
 8008bd4:	4413      	add	r3, r2
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f7ff fe07 	bl	80087ec <move_window>
 8008bde:	4603      	mov	r3, r0
 8008be0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008be2:	7ffb      	ldrb	r3, [r7, #31]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d148      	bne.n	8008c7a <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008bf6:	4413      	add	r3, r2
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	b292      	uxth	r2, r2
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fb7f 	bl	8008302 <st_word>
			fs->wflag = 1;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2201      	movs	r2, #1
 8008c08:	70da      	strb	r2, [r3, #3]
			break;
 8008c0a:	e039      	b.n	8008c80 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6a1a      	ldr	r2, [r3, #32]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	09db      	lsrs	r3, r3, #7
 8008c14:	4413      	add	r3, r2
 8008c16:	4619      	mov	r1, r3
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff fde7 	bl	80087ec <move_window>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008c22:	7ffb      	ldrb	r3, [r7, #31]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d12a      	bne.n	8008c7e <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c3c:	4413      	add	r3, r2
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff fb3c 	bl	80082bc <ld_dword>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008c4a:	4323      	orrs	r3, r4
 8008c4c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008c5c:	4413      	add	r3, r2
 8008c5e:	6879      	ldr	r1, [r7, #4]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7ff fb69 	bl	8008338 <st_dword>
			fs->wflag = 1;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	70da      	strb	r2, [r3, #3]
			break;
 8008c6c:	e008      	b.n	8008c80 <put_fat+0x1ce>
		}
	}
 8008c6e:	bf00      	nop
 8008c70:	e006      	b.n	8008c80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c72:	bf00      	nop
 8008c74:	e004      	b.n	8008c80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c76:	bf00      	nop
 8008c78:	e002      	b.n	8008c80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c7a:	bf00      	nop
 8008c7c:	e000      	b.n	8008c80 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8008c7e:	bf00      	nop
	return res;
 8008c80:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3724      	adds	r7, #36	; 0x24
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd90      	pop	{r4, r7, pc}

08008c8a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b088      	sub	sp, #32
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	60f8      	str	r0, [r7, #12]
 8008c92:	60b9      	str	r1, [r7, #8]
 8008c94:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008c96:	2300      	movs	r3, #0
 8008c98:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d904      	bls.n	8008cb0 <remove_chain+0x26>
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	68ba      	ldr	r2, [r7, #8]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d301      	bcc.n	8008cb4 <remove_chain+0x2a>
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	e04b      	b.n	8008d4c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00c      	beq.n	8008cd4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008cba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	69b8      	ldr	r0, [r7, #24]
 8008cc2:	f7ff fef6 	bl	8008ab2 <put_fat>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008cca:	7ffb      	ldrb	r3, [r7, #31]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <remove_chain+0x4a>
 8008cd0:	7ffb      	ldrb	r3, [r7, #31]
 8008cd2:	e03b      	b.n	8008d4c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008cd4:	68b9      	ldr	r1, [r7, #8]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff fe43 	bl	8008962 <get_fat>
 8008cdc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d031      	beq.n	8008d48 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d101      	bne.n	8008cee <remove_chain+0x64>
 8008cea:	2302      	movs	r3, #2
 8008cec:	e02e      	b.n	8008d4c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cf4:	d101      	bne.n	8008cfa <remove_chain+0x70>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e028      	b.n	8008d4c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	69b8      	ldr	r0, [r7, #24]
 8008d00:	f7ff fed7 	bl	8008ab2 <put_fat>
 8008d04:	4603      	mov	r3, r0
 8008d06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008d08:	7ffb      	ldrb	r3, [r7, #31]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <remove_chain+0x88>
 8008d0e:	7ffb      	ldrb	r3, [r7, #31]
 8008d10:	e01c      	b.n	8008d4c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	691a      	ldr	r2, [r3, #16]
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	3b02      	subs	r3, #2
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d20b      	bcs.n	8008d38 <remove_chain+0xae>
			fs->free_clst++;
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	1c5a      	adds	r2, r3, #1
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	791b      	ldrb	r3, [r3, #4]
 8008d2e:	f043 0301 	orr.w	r3, r3, #1
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d3c6      	bcc.n	8008cd4 <remove_chain+0x4a>
 8008d46:	e000      	b.n	8008d4a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008d48:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008d4a:	2300      	movs	r3, #0
}
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	3720      	adds	r7, #32
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10d      	bne.n	8008d86 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d004      	beq.n	8008d80 <create_chain+0x2c>
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d31b      	bcc.n	8008db8 <create_chain+0x64>
 8008d80:	2301      	movs	r3, #1
 8008d82:	61bb      	str	r3, [r7, #24]
 8008d84:	e018      	b.n	8008db8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008d86:	6839      	ldr	r1, [r7, #0]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff fdea 	bl	8008962 <get_fat>
 8008d8e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d801      	bhi.n	8008d9a <create_chain+0x46>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e070      	b.n	8008e7c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008da0:	d101      	bne.n	8008da6 <create_chain+0x52>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	e06a      	b.n	8008e7c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d201      	bcs.n	8008db4 <create_chain+0x60>
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	e063      	b.n	8008e7c <create_chain+0x128>
		scl = clst;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d307      	bcc.n	8008ddc <create_chain+0x88>
				ncl = 2;
 8008dcc:	2302      	movs	r3, #2
 8008dce:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008dd0:	69fa      	ldr	r2, [r7, #28]
 8008dd2:	69bb      	ldr	r3, [r7, #24]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d901      	bls.n	8008ddc <create_chain+0x88>
 8008dd8:	2300      	movs	r3, #0
 8008dda:	e04f      	b.n	8008e7c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008ddc:	69f9      	ldr	r1, [r7, #28]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f7ff fdbf 	bl	8008962 <get_fat>
 8008de4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00e      	beq.n	8008e0a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d003      	beq.n	8008dfa <create_chain+0xa6>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008df8:	d101      	bne.n	8008dfe <create_chain+0xaa>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	e03e      	b.n	8008e7c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008dfe:	69fa      	ldr	r2, [r7, #28]
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d1da      	bne.n	8008dbc <create_chain+0x68>
 8008e06:	2300      	movs	r3, #0
 8008e08:	e038      	b.n	8008e7c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008e0a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e10:	69f9      	ldr	r1, [r7, #28]
 8008e12:	6938      	ldr	r0, [r7, #16]
 8008e14:	f7ff fe4d 	bl	8008ab2 <put_fat>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008e1c:	7dfb      	ldrb	r3, [r7, #23]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d109      	bne.n	8008e36 <create_chain+0xe2>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d006      	beq.n	8008e36 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008e28:	69fa      	ldr	r2, [r7, #28]
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6938      	ldr	r0, [r7, #16]
 8008e2e:	f7ff fe40 	bl	8008ab2 <put_fat>
 8008e32:	4603      	mov	r3, r0
 8008e34:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008e36:	7dfb      	ldrb	r3, [r7, #23]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d116      	bne.n	8008e6a <create_chain+0x116>
		fs->last_clst = ncl;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	691a      	ldr	r2, [r3, #16]
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	3b02      	subs	r3, #2
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d804      	bhi.n	8008e5a <create_chain+0x106>
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	1e5a      	subs	r2, r3, #1
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	791b      	ldrb	r3, [r3, #4]
 8008e5e:	f043 0301 	orr.w	r3, r3, #1
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	711a      	strb	r2, [r3, #4]
 8008e68:	e007      	b.n	8008e7a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d102      	bne.n	8008e76 <create_chain+0x122>
 8008e70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e74:	e000      	b.n	8008e78 <create_chain+0x124>
 8008e76:	2301      	movs	r3, #1
 8008e78:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008e7a:	69fb      	ldr	r3, [r7, #28]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3720      	adds	r7, #32
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e98:	3304      	adds	r3, #4
 8008e9a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	0a5b      	lsrs	r3, r3, #9
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	8952      	ldrh	r2, [r2, #10]
 8008ea4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ea8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	1d1a      	adds	r2, r3, #4
 8008eae:	613a      	str	r2, [r7, #16]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d101      	bne.n	8008ebe <clmt_clust+0x3a>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	e010      	b.n	8008ee0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d307      	bcc.n	8008ed6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	617b      	str	r3, [r7, #20]
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	3304      	adds	r3, #4
 8008ed2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008ed4:	e7e9      	b.n	8008eaa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008ed6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	4413      	add	r3, r2
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	371c      	adds	r7, #28
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f02:	d204      	bcs.n	8008f0e <dir_sdi+0x22>
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	f003 031f 	and.w	r3, r3, #31
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d001      	beq.n	8008f12 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008f0e:	2302      	movs	r3, #2
 8008f10:	e063      	b.n	8008fda <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d106      	bne.n	8008f32 <dir_sdi+0x46>
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d902      	bls.n	8008f32 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10c      	bne.n	8008f52 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	095b      	lsrs	r3, r3, #5
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	8912      	ldrh	r2, [r2, #8]
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d301      	bcc.n	8008f48 <dir_sdi+0x5c>
 8008f44:	2302      	movs	r3, #2
 8008f46:	e048      	b.n	8008fda <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	61da      	str	r2, [r3, #28]
 8008f50:	e029      	b.n	8008fa6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	895b      	ldrh	r3, [r3, #10]
 8008f56:	025b      	lsls	r3, r3, #9
 8008f58:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f5a:	e019      	b.n	8008f90 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6979      	ldr	r1, [r7, #20]
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff fcfe 	bl	8008962 <get_fat>
 8008f66:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f6e:	d101      	bne.n	8008f74 <dir_sdi+0x88>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e032      	b.n	8008fda <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d904      	bls.n	8008f84 <dir_sdi+0x98>
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d301      	bcc.n	8008f88 <dir_sdi+0x9c>
 8008f84:	2302      	movs	r3, #2
 8008f86:	e028      	b.n	8008fda <dir_sdi+0xee>
			ofs -= csz;
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d2e1      	bcs.n	8008f5c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8008f98:	6979      	ldr	r1, [r7, #20]
 8008f9a:	6938      	ldr	r0, [r7, #16]
 8008f9c:	f7ff fcc2 	bl	8008924 <clust2sect>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	69db      	ldr	r3, [r3, #28]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <dir_sdi+0xcc>
 8008fb4:	2302      	movs	r3, #2
 8008fb6:	e010      	b.n	8008fda <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	69da      	ldr	r2, [r3, #28]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	0a5b      	lsrs	r3, r3, #9
 8008fc0:	441a      	add	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd2:	441a      	add	r2, r3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008fd8:	2300      	movs	r3, #0
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b086      	sub	sp, #24
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	3320      	adds	r3, #32
 8008ff8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <dir_next+0x28>
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009008:	d301      	bcc.n	800900e <dir_next+0x2c>
 800900a:	2304      	movs	r3, #4
 800900c:	e0aa      	b.n	8009164 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009014:	2b00      	cmp	r3, #0
 8009016:	f040 8098 	bne.w	800914a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	69db      	ldr	r3, [r3, #28]
 800901e:	1c5a      	adds	r2, r3, #1
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10b      	bne.n	8009044 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	095b      	lsrs	r3, r3, #5
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	8912      	ldrh	r2, [r2, #8]
 8009034:	4293      	cmp	r3, r2
 8009036:	f0c0 8088 	bcc.w	800914a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	61da      	str	r2, [r3, #28]
 8009040:	2304      	movs	r3, #4
 8009042:	e08f      	b.n	8009164 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	0a5b      	lsrs	r3, r3, #9
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	8952      	ldrh	r2, [r2, #10]
 800904c:	3a01      	subs	r2, #1
 800904e:	4013      	ands	r3, r2
 8009050:	2b00      	cmp	r3, #0
 8009052:	d17a      	bne.n	800914a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	4619      	mov	r1, r3
 800905c:	4610      	mov	r0, r2
 800905e:	f7ff fc80 	bl	8008962 <get_fat>
 8009062:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d801      	bhi.n	800906e <dir_next+0x8c>
 800906a:	2302      	movs	r3, #2
 800906c:	e07a      	b.n	8009164 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009074:	d101      	bne.n	800907a <dir_next+0x98>
 8009076:	2301      	movs	r3, #1
 8009078:	e074      	b.n	8009164 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	429a      	cmp	r2, r3
 8009082:	d358      	bcc.n	8009136 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d104      	bne.n	8009094 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	61da      	str	r2, [r3, #28]
 8009090:	2304      	movs	r3, #4
 8009092:	e067      	b.n	8009164 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	4619      	mov	r1, r3
 800909c:	4610      	mov	r0, r2
 800909e:	f7ff fe59 	bl	8008d54 <create_chain>
 80090a2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <dir_next+0xcc>
 80090aa:	2307      	movs	r3, #7
 80090ac:	e05a      	b.n	8009164 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <dir_next+0xd6>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e055      	b.n	8009164 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090be:	d101      	bne.n	80090c4 <dir_next+0xe2>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e04f      	b.n	8009164 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f7ff fb4d 	bl	8008764 <sync_window>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <dir_next+0xf2>
 80090d0:	2301      	movs	r3, #1
 80090d2:	e047      	b.n	8009164 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	3330      	adds	r3, #48	; 0x30
 80090d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090dc:	2100      	movs	r1, #0
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff f977 	bl	80083d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80090e4:	2300      	movs	r3, #0
 80090e6:	613b      	str	r3, [r7, #16]
 80090e8:	6979      	ldr	r1, [r7, #20]
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff fc1a 	bl	8008924 <clust2sect>
 80090f0:	4602      	mov	r2, r0
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80090f6:	e012      	b.n	800911e <dir_next+0x13c>
						fs->wflag = 1;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2201      	movs	r2, #1
 80090fc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f7ff fb30 	bl	8008764 <sync_window>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <dir_next+0x12c>
 800910a:	2301      	movs	r3, #1
 800910c:	e02a      	b.n	8009164 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	3301      	adds	r3, #1
 8009112:	613b      	str	r3, [r7, #16]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	62da      	str	r2, [r3, #44]	; 0x2c
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	895b      	ldrh	r3, [r3, #10]
 8009122:	461a      	mov	r2, r3
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	4293      	cmp	r3, r2
 8009128:	d3e6      	bcc.n	80090f8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	1ad2      	subs	r2, r2, r3
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800913c:	6979      	ldr	r1, [r7, #20]
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff fbf0 	bl	8008924 <clust2sect>
 8009144:	4602      	mov	r2, r0
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800915c:	441a      	add	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3718      	adds	r7, #24
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800917c:	2100      	movs	r1, #0
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f7ff feb4 	bl	8008eec <dir_sdi>
 8009184:	4603      	mov	r3, r0
 8009186:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009188:	7dfb      	ldrb	r3, [r7, #23]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d12b      	bne.n	80091e6 <dir_alloc+0x7a>
		n = 0;
 800918e:	2300      	movs	r3, #0
 8009190:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4619      	mov	r1, r3
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7ff fb27 	bl	80087ec <move_window>
 800919e:	4603      	mov	r3, r0
 80091a0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80091a2:	7dfb      	ldrb	r3, [r7, #23]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d11d      	bne.n	80091e4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6a1b      	ldr	r3, [r3, #32]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	2be5      	cmp	r3, #229	; 0xe5
 80091b0:	d004      	beq.n	80091bc <dir_alloc+0x50>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a1b      	ldr	r3, [r3, #32]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d107      	bne.n	80091cc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	3301      	adds	r3, #1
 80091c0:	613b      	str	r3, [r7, #16]
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d102      	bne.n	80091d0 <dir_alloc+0x64>
 80091ca:	e00c      	b.n	80091e6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80091cc:	2300      	movs	r3, #0
 80091ce:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80091d0:	2101      	movs	r1, #1
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7ff ff05 	bl	8008fe2 <dir_next>
 80091d8:	4603      	mov	r3, r0
 80091da:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0d7      	beq.n	8009192 <dir_alloc+0x26>
 80091e2:	e000      	b.n	80091e6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80091e4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	2b04      	cmp	r3, #4
 80091ea:	d101      	bne.n	80091f0 <dir_alloc+0x84>
 80091ec:	2307      	movs	r3, #7
 80091ee:	75fb      	strb	r3, [r7, #23]
	return res;
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}

080091fa <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80091fa:	b580      	push	{r7, lr}
 80091fc:	b084      	sub	sp, #16
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]
 8009202:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	331a      	adds	r3, #26
 8009208:	4618      	mov	r0, r3
 800920a:	f7ff f83f 	bl	800828c <ld_word>
 800920e:	4603      	mov	r3, r0
 8009210:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b03      	cmp	r3, #3
 8009218:	d109      	bne.n	800922e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	3314      	adds	r3, #20
 800921e:	4618      	mov	r0, r3
 8009220:	f7ff f834 	bl	800828c <ld_word>
 8009224:	4603      	mov	r3, r0
 8009226:	041b      	lsls	r3, r3, #16
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	4313      	orrs	r3, r2
 800922c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800922e:	68fb      	ldr	r3, [r7, #12]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b084      	sub	sp, #16
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	331a      	adds	r3, #26
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	b292      	uxth	r2, r2
 800924c:	4611      	mov	r1, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f7ff f857 	bl	8008302 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	2b03      	cmp	r3, #3
 800925a:	d109      	bne.n	8009270 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	f103 0214 	add.w	r2, r3, #20
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	0c1b      	lsrs	r3, r3, #16
 8009266:	b29b      	uxth	r3, r3
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f7ff f849 	bl	8008302 <st_word>
	}
}
 8009270:	bf00      	nop
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009286:	2100      	movs	r1, #0
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7ff fe2f 	bl	8008eec <dir_sdi>
 800928e:	4603      	mov	r3, r0
 8009290:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009292:	7dfb      	ldrb	r3, [r7, #23]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d001      	beq.n	800929c <dir_find+0x24>
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	e03e      	b.n	800931a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	69db      	ldr	r3, [r3, #28]
 80092a0:	4619      	mov	r1, r3
 80092a2:	6938      	ldr	r0, [r7, #16]
 80092a4:	f7ff faa2 	bl	80087ec <move_window>
 80092a8:	4603      	mov	r3, r0
 80092aa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80092ac:	7dfb      	ldrb	r3, [r7, #23]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d12f      	bne.n	8009312 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80092ba:	7bfb      	ldrb	r3, [r7, #15]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d102      	bne.n	80092c6 <dir_find+0x4e>
 80092c0:	2304      	movs	r3, #4
 80092c2:	75fb      	strb	r3, [r7, #23]
 80092c4:	e028      	b.n	8009318 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	330b      	adds	r3, #11
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a1b      	ldr	r3, [r3, #32]
 80092dc:	330b      	adds	r3, #11
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	f003 0308 	and.w	r3, r3, #8
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d10a      	bne.n	80092fe <dir_find+0x86>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a18      	ldr	r0, [r3, #32]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	3324      	adds	r3, #36	; 0x24
 80092f0:	220b      	movs	r2, #11
 80092f2:	4619      	mov	r1, r3
 80092f4:	f7ff f888 	bl	8008408 <mem_cmp>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00b      	beq.n	8009316 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80092fe:	2100      	movs	r1, #0
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f7ff fe6e 	bl	8008fe2 <dir_next>
 8009306:	4603      	mov	r3, r0
 8009308:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800930a:	7dfb      	ldrb	r3, [r7, #23]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d0c5      	beq.n	800929c <dir_find+0x24>
 8009310:	e002      	b.n	8009318 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009312:	bf00      	nop
 8009314:	e000      	b.n	8009318 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009316:	bf00      	nop

	return res;
 8009318:	7dfb      	ldrb	r3, [r7, #23]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3718      	adds	r7, #24
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}

08009322 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009322:	b580      	push	{r7, lr}
 8009324:	b084      	sub	sp, #16
 8009326:	af00      	add	r7, sp, #0
 8009328:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009330:	2101      	movs	r1, #1
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f7ff ff1a 	bl	800916c <dir_alloc>
 8009338:	4603      	mov	r3, r0
 800933a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800933c:	7bfb      	ldrb	r3, [r7, #15]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d11c      	bne.n	800937c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	69db      	ldr	r3, [r3, #28]
 8009346:	4619      	mov	r1, r3
 8009348:	68b8      	ldr	r0, [r7, #8]
 800934a:	f7ff fa4f 	bl	80087ec <move_window>
 800934e:	4603      	mov	r3, r0
 8009350:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d111      	bne.n	800937c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a1b      	ldr	r3, [r3, #32]
 800935c:	2220      	movs	r2, #32
 800935e:	2100      	movs	r1, #0
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff f836 	bl	80083d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a18      	ldr	r0, [r3, #32]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3324      	adds	r3, #36	; 0x24
 800936e:	220b      	movs	r2, #11
 8009370:	4619      	mov	r1, r3
 8009372:	f7ff f80d 	bl	8008390 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	2201      	movs	r2, #1
 800937a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800937c:	7bfb      	ldrb	r3, [r7, #15]
}
 800937e:	4618      	mov	r0, r3
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
	...

08009388 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b088      	sub	sp, #32
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3324      	adds	r3, #36	; 0x24
 800939c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800939e:	220b      	movs	r2, #11
 80093a0:	2120      	movs	r1, #32
 80093a2:	68b8      	ldr	r0, [r7, #8]
 80093a4:	f7ff f815 	bl	80083d2 <mem_set>
	si = i = 0; ni = 8;
 80093a8:	2300      	movs	r3, #0
 80093aa:	613b      	str	r3, [r7, #16]
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	61fb      	str	r3, [r7, #28]
 80093b0:	2308      	movs	r3, #8
 80093b2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	61fa      	str	r2, [r7, #28]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	4413      	add	r3, r2
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80093c2:	7efb      	ldrb	r3, [r7, #27]
 80093c4:	2b20      	cmp	r3, #32
 80093c6:	d94e      	bls.n	8009466 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80093c8:	7efb      	ldrb	r3, [r7, #27]
 80093ca:	2b2f      	cmp	r3, #47	; 0x2f
 80093cc:	d006      	beq.n	80093dc <create_name+0x54>
 80093ce:	7efb      	ldrb	r3, [r7, #27]
 80093d0:	2b5c      	cmp	r3, #92	; 0x5c
 80093d2:	d110      	bne.n	80093f6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80093d4:	e002      	b.n	80093dc <create_name+0x54>
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	3301      	adds	r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	4413      	add	r3, r2
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	2b2f      	cmp	r3, #47	; 0x2f
 80093e6:	d0f6      	beq.n	80093d6 <create_name+0x4e>
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	69fb      	ldr	r3, [r7, #28]
 80093ec:	4413      	add	r3, r2
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b5c      	cmp	r3, #92	; 0x5c
 80093f2:	d0f0      	beq.n	80093d6 <create_name+0x4e>
			break;
 80093f4:	e038      	b.n	8009468 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80093f6:	7efb      	ldrb	r3, [r7, #27]
 80093f8:	2b2e      	cmp	r3, #46	; 0x2e
 80093fa:	d003      	beq.n	8009404 <create_name+0x7c>
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	429a      	cmp	r2, r3
 8009402:	d30c      	bcc.n	800941e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	2b0b      	cmp	r3, #11
 8009408:	d002      	beq.n	8009410 <create_name+0x88>
 800940a:	7efb      	ldrb	r3, [r7, #27]
 800940c:	2b2e      	cmp	r3, #46	; 0x2e
 800940e:	d001      	beq.n	8009414 <create_name+0x8c>
 8009410:	2306      	movs	r3, #6
 8009412:	e044      	b.n	800949e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009414:	2308      	movs	r3, #8
 8009416:	613b      	str	r3, [r7, #16]
 8009418:	230b      	movs	r3, #11
 800941a:	617b      	str	r3, [r7, #20]
			continue;
 800941c:	e022      	b.n	8009464 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800941e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009422:	2b00      	cmp	r3, #0
 8009424:	da04      	bge.n	8009430 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009426:	7efb      	ldrb	r3, [r7, #27]
 8009428:	3b80      	subs	r3, #128	; 0x80
 800942a:	4a1f      	ldr	r2, [pc, #124]	; (80094a8 <create_name+0x120>)
 800942c:	5cd3      	ldrb	r3, [r2, r3]
 800942e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009430:	7efb      	ldrb	r3, [r7, #27]
 8009432:	4619      	mov	r1, r3
 8009434:	481d      	ldr	r0, [pc, #116]	; (80094ac <create_name+0x124>)
 8009436:	f7ff f80e 	bl	8008456 <chk_chr>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <create_name+0xbc>
 8009440:	2306      	movs	r3, #6
 8009442:	e02c      	b.n	800949e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009444:	7efb      	ldrb	r3, [r7, #27]
 8009446:	2b60      	cmp	r3, #96	; 0x60
 8009448:	d905      	bls.n	8009456 <create_name+0xce>
 800944a:	7efb      	ldrb	r3, [r7, #27]
 800944c:	2b7a      	cmp	r3, #122	; 0x7a
 800944e:	d802      	bhi.n	8009456 <create_name+0xce>
 8009450:	7efb      	ldrb	r3, [r7, #27]
 8009452:	3b20      	subs	r3, #32
 8009454:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	613a      	str	r2, [r7, #16]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	4413      	add	r3, r2
 8009460:	7efa      	ldrb	r2, [r7, #27]
 8009462:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009464:	e7a6      	b.n	80093b4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009466:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	69fb      	ldr	r3, [r7, #28]
 800946c:	441a      	add	r2, r3
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d101      	bne.n	800947c <create_name+0xf4>
 8009478:	2306      	movs	r3, #6
 800947a:	e010      	b.n	800949e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2be5      	cmp	r3, #229	; 0xe5
 8009482:	d102      	bne.n	800948a <create_name+0x102>
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	2205      	movs	r2, #5
 8009488:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800948a:	7efb      	ldrb	r3, [r7, #27]
 800948c:	2b20      	cmp	r3, #32
 800948e:	d801      	bhi.n	8009494 <create_name+0x10c>
 8009490:	2204      	movs	r2, #4
 8009492:	e000      	b.n	8009496 <create_name+0x10e>
 8009494:	2200      	movs	r2, #0
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	330b      	adds	r3, #11
 800949a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800949c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3720      	adds	r7, #32
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	0800f950 	.word	0x0800f950
 80094ac:	0800f870 	.word	0x0800f870

080094b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
 80094b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80094c4:	e002      	b.n	80094cc <follow_path+0x1c>
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	3301      	adds	r3, #1
 80094ca:	603b      	str	r3, [r7, #0]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	2b2f      	cmp	r3, #47	; 0x2f
 80094d2:	d0f8      	beq.n	80094c6 <follow_path+0x16>
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	2b5c      	cmp	r3, #92	; 0x5c
 80094da:	d0f4      	beq.n	80094c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2200      	movs	r2, #0
 80094e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	2b1f      	cmp	r3, #31
 80094e8:	d80a      	bhi.n	8009500 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2280      	movs	r2, #128	; 0x80
 80094ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80094f2:	2100      	movs	r1, #0
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff fcf9 	bl	8008eec <dir_sdi>
 80094fa:	4603      	mov	r3, r0
 80094fc:	75fb      	strb	r3, [r7, #23]
 80094fe:	e043      	b.n	8009588 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009500:	463b      	mov	r3, r7
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff ff3f 	bl	8009388 <create_name>
 800950a:	4603      	mov	r3, r0
 800950c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d134      	bne.n	800957e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f7ff feaf 	bl	8009278 <dir_find>
 800951a:	4603      	mov	r3, r0
 800951c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009524:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009526:	7dfb      	ldrb	r3, [r7, #23]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	2b04      	cmp	r3, #4
 8009530:	d127      	bne.n	8009582 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009532:	7afb      	ldrb	r3, [r7, #11]
 8009534:	f003 0304 	and.w	r3, r3, #4
 8009538:	2b00      	cmp	r3, #0
 800953a:	d122      	bne.n	8009582 <follow_path+0xd2>
 800953c:	2305      	movs	r3, #5
 800953e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009540:	e01f      	b.n	8009582 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009542:	7afb      	ldrb	r3, [r7, #11]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d11c      	bne.n	8009586 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	799b      	ldrb	r3, [r3, #6]
 8009550:	f003 0310 	and.w	r3, r3, #16
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009558:	2305      	movs	r3, #5
 800955a:	75fb      	strb	r3, [r7, #23]
 800955c:	e014      	b.n	8009588 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800956c:	4413      	add	r3, r2
 800956e:	4619      	mov	r1, r3
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f7ff fe42 	bl	80091fa <ld_clust>
 8009576:	4602      	mov	r2, r0
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800957c:	e7c0      	b.n	8009500 <follow_path+0x50>
			if (res != FR_OK) break;
 800957e:	bf00      	nop
 8009580:	e002      	b.n	8009588 <follow_path+0xd8>
				break;
 8009582:	bf00      	nop
 8009584:	e000      	b.n	8009588 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009586:	bf00      	nop
			}
		}
	}

	return res;
 8009588:	7dfb      	ldrb	r3, [r7, #23]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009592:	b480      	push	{r7}
 8009594:	b087      	sub	sp, #28
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800959a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800959e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d031      	beq.n	800960c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	617b      	str	r3, [r7, #20]
 80095ae:	e002      	b.n	80095b6 <get_ldnumber+0x24>
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	3301      	adds	r3, #1
 80095b4:	617b      	str	r3, [r7, #20]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	d903      	bls.n	80095c6 <get_ldnumber+0x34>
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b3a      	cmp	r3, #58	; 0x3a
 80095c4:	d1f4      	bne.n	80095b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	781b      	ldrb	r3, [r3, #0]
 80095ca:	2b3a      	cmp	r3, #58	; 0x3a
 80095cc:	d11c      	bne.n	8009608 <get_ldnumber+0x76>
			tp = *path;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	1c5a      	adds	r2, r3, #1
 80095d8:	60fa      	str	r2, [r7, #12]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	3b30      	subs	r3, #48	; 0x30
 80095de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	2b09      	cmp	r3, #9
 80095e4:	d80e      	bhi.n	8009604 <get_ldnumber+0x72>
 80095e6:	68fa      	ldr	r2, [r7, #12]
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d10a      	bne.n	8009604 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d107      	bne.n	8009604 <get_ldnumber+0x72>
					vol = (int)i;
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	3301      	adds	r3, #1
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	e002      	b.n	800960e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009608:	2300      	movs	r3, #0
 800960a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800960c:	693b      	ldr	r3, [r7, #16]
}
 800960e:	4618      	mov	r0, r3
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
	...

0800961c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	70da      	strb	r2, [r3, #3]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009632:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009634:	6839      	ldr	r1, [r7, #0]
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f7ff f8d8 	bl	80087ec <move_window>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <check_fs+0x2a>
 8009642:	2304      	movs	r3, #4
 8009644:	e038      	b.n	80096b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3330      	adds	r3, #48	; 0x30
 800964a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800964e:	4618      	mov	r0, r3
 8009650:	f7fe fe1c 	bl	800828c <ld_word>
 8009654:	4603      	mov	r3, r0
 8009656:	461a      	mov	r2, r3
 8009658:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800965c:	429a      	cmp	r2, r3
 800965e:	d001      	beq.n	8009664 <check_fs+0x48>
 8009660:	2303      	movs	r3, #3
 8009662:	e029      	b.n	80096b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800966a:	2be9      	cmp	r3, #233	; 0xe9
 800966c:	d009      	beq.n	8009682 <check_fs+0x66>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009674:	2beb      	cmp	r3, #235	; 0xeb
 8009676:	d11e      	bne.n	80096b6 <check_fs+0x9a>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800967e:	2b90      	cmp	r3, #144	; 0x90
 8009680:	d119      	bne.n	80096b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	3330      	adds	r3, #48	; 0x30
 8009686:	3336      	adds	r3, #54	; 0x36
 8009688:	4618      	mov	r0, r3
 800968a:	f7fe fe17 	bl	80082bc <ld_dword>
 800968e:	4603      	mov	r3, r0
 8009690:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009694:	4a0a      	ldr	r2, [pc, #40]	; (80096c0 <check_fs+0xa4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d101      	bne.n	800969e <check_fs+0x82>
 800969a:	2300      	movs	r3, #0
 800969c:	e00c      	b.n	80096b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	3330      	adds	r3, #48	; 0x30
 80096a2:	3352      	adds	r3, #82	; 0x52
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7fe fe09 	bl	80082bc <ld_dword>
 80096aa:	4603      	mov	r3, r0
 80096ac:	4a05      	ldr	r2, [pc, #20]	; (80096c4 <check_fs+0xa8>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d101      	bne.n	80096b6 <check_fs+0x9a>
 80096b2:	2300      	movs	r3, #0
 80096b4:	e000      	b.n	80096b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80096b6:	2302      	movs	r3, #2
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	00544146 	.word	0x00544146
 80096c4:	33544146 	.word	0x33544146

080096c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b096      	sub	sp, #88	; 0x58
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	4613      	mov	r3, r2
 80096d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff ff58 	bl	8009592 <get_ldnumber>
 80096e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80096e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	da01      	bge.n	80096ee <find_volume+0x26>
 80096ea:	230b      	movs	r3, #11
 80096ec:	e22d      	b.n	8009b4a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80096ee:	4aa1      	ldr	r2, [pc, #644]	; (8009974 <find_volume+0x2ac>)
 80096f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80096f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <find_volume+0x3a>
 80096fe:	230c      	movs	r3, #12
 8009700:	e223      	b.n	8009b4a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009706:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	f023 0301 	bic.w	r3, r3, #1
 800970e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d01a      	beq.n	800974e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971a:	785b      	ldrb	r3, [r3, #1]
 800971c:	4618      	mov	r0, r3
 800971e:	f7fe fd17 	bl	8008150 <disk_status>
 8009722:	4603      	mov	r3, r0
 8009724:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009728:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800972c:	f003 0301 	and.w	r3, r3, #1
 8009730:	2b00      	cmp	r3, #0
 8009732:	d10c      	bne.n	800974e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009734:	79fb      	ldrb	r3, [r7, #7]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d007      	beq.n	800974a <find_volume+0x82>
 800973a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800973e:	f003 0304 	and.w	r3, r3, #4
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009746:	230a      	movs	r3, #10
 8009748:	e1ff      	b.n	8009b4a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800974a:	2300      	movs	r3, #0
 800974c:	e1fd      	b.n	8009b4a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	2200      	movs	r2, #0
 8009752:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009756:	b2da      	uxtb	r2, r3
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800975c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975e:	785b      	ldrb	r3, [r3, #1]
 8009760:	4618      	mov	r0, r3
 8009762:	f7fe fd0f 	bl	8008184 <disk_initialize>
 8009766:	4603      	mov	r3, r0
 8009768:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800976c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	2b00      	cmp	r3, #0
 8009776:	d001      	beq.n	800977c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009778:	2303      	movs	r3, #3
 800977a:	e1e6      	b.n	8009b4a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d007      	beq.n	8009792 <find_volume+0xca>
 8009782:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009786:	f003 0304 	and.w	r3, r3, #4
 800978a:	2b00      	cmp	r3, #0
 800978c:	d001      	beq.n	8009792 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800978e:	230a      	movs	r3, #10
 8009790:	e1db      	b.n	8009b4a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009796:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009798:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800979a:	f7ff ff3f 	bl	800961c <check_fs>
 800979e:	4603      	mov	r3, r0
 80097a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80097a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d149      	bne.n	8009840 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80097ac:	2300      	movs	r3, #0
 80097ae:	643b      	str	r3, [r7, #64]	; 0x40
 80097b0:	e01e      	b.n	80097f0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80097b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80097b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ba:	011b      	lsls	r3, r3, #4
 80097bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80097c0:	4413      	add	r3, r2
 80097c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80097c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c6:	3304      	adds	r3, #4
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d006      	beq.n	80097dc <find_volume+0x114>
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	3308      	adds	r3, #8
 80097d2:	4618      	mov	r0, r3
 80097d4:	f7fe fd72 	bl	80082bc <ld_dword>
 80097d8:	4602      	mov	r2, r0
 80097da:	e000      	b.n	80097de <find_volume+0x116>
 80097dc:	2200      	movs	r2, #0
 80097de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	3358      	adds	r3, #88	; 0x58
 80097e4:	443b      	add	r3, r7
 80097e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80097ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ec:	3301      	adds	r3, #1
 80097ee:	643b      	str	r3, [r7, #64]	; 0x40
 80097f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d9dd      	bls.n	80097b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80097f6:	2300      	movs	r3, #0
 80097f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80097fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <find_volume+0x13e>
 8009800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009802:	3b01      	subs	r3, #1
 8009804:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	3358      	adds	r3, #88	; 0x58
 800980c:	443b      	add	r3, r7
 800980e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009812:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009816:	2b00      	cmp	r3, #0
 8009818:	d005      	beq.n	8009826 <find_volume+0x15e>
 800981a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800981c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800981e:	f7ff fefd 	bl	800961c <check_fs>
 8009822:	4603      	mov	r3, r0
 8009824:	e000      	b.n	8009828 <find_volume+0x160>
 8009826:	2303      	movs	r3, #3
 8009828:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800982c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009830:	2b01      	cmp	r3, #1
 8009832:	d905      	bls.n	8009840 <find_volume+0x178>
 8009834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009836:	3301      	adds	r3, #1
 8009838:	643b      	str	r3, [r7, #64]	; 0x40
 800983a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800983c:	2b03      	cmp	r3, #3
 800983e:	d9e2      	bls.n	8009806 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009844:	2b04      	cmp	r3, #4
 8009846:	d101      	bne.n	800984c <find_volume+0x184>
 8009848:	2301      	movs	r3, #1
 800984a:	e17e      	b.n	8009b4a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800984c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009850:	2b01      	cmp	r3, #1
 8009852:	d901      	bls.n	8009858 <find_volume+0x190>
 8009854:	230d      	movs	r3, #13
 8009856:	e178      	b.n	8009b4a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985a:	3330      	adds	r3, #48	; 0x30
 800985c:	330b      	adds	r3, #11
 800985e:	4618      	mov	r0, r3
 8009860:	f7fe fd14 	bl	800828c <ld_word>
 8009864:	4603      	mov	r3, r0
 8009866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800986a:	d001      	beq.n	8009870 <find_volume+0x1a8>
 800986c:	230d      	movs	r3, #13
 800986e:	e16c      	b.n	8009b4a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009872:	3330      	adds	r3, #48	; 0x30
 8009874:	3316      	adds	r3, #22
 8009876:	4618      	mov	r0, r3
 8009878:	f7fe fd08 	bl	800828c <ld_word>
 800987c:	4603      	mov	r3, r0
 800987e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009882:	2b00      	cmp	r3, #0
 8009884:	d106      	bne.n	8009894 <find_volume+0x1cc>
 8009886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009888:	3330      	adds	r3, #48	; 0x30
 800988a:	3324      	adds	r3, #36	; 0x24
 800988c:	4618      	mov	r0, r3
 800988e:	f7fe fd15 	bl	80082bc <ld_dword>
 8009892:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009898:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800989a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80098a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a6:	789b      	ldrb	r3, [r3, #2]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d005      	beq.n	80098b8 <find_volume+0x1f0>
 80098ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ae:	789b      	ldrb	r3, [r3, #2]
 80098b0:	2b02      	cmp	r3, #2
 80098b2:	d001      	beq.n	80098b8 <find_volume+0x1f0>
 80098b4:	230d      	movs	r3, #13
 80098b6:	e148      	b.n	8009b4a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	789b      	ldrb	r3, [r3, #2]
 80098bc:	461a      	mov	r2, r3
 80098be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c0:	fb02 f303 	mul.w	r3, r2, r3
 80098c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80098c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80098d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d4:	895b      	ldrh	r3, [r3, #10]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d008      	beq.n	80098ec <find_volume+0x224>
 80098da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098dc:	895b      	ldrh	r3, [r3, #10]
 80098de:	461a      	mov	r2, r3
 80098e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098e2:	895b      	ldrh	r3, [r3, #10]
 80098e4:	3b01      	subs	r3, #1
 80098e6:	4013      	ands	r3, r2
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d001      	beq.n	80098f0 <find_volume+0x228>
 80098ec:	230d      	movs	r3, #13
 80098ee:	e12c      	b.n	8009b4a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80098f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f2:	3330      	adds	r3, #48	; 0x30
 80098f4:	3311      	adds	r3, #17
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fe fcc8 	bl	800828c <ld_word>
 80098fc:	4603      	mov	r3, r0
 80098fe:	461a      	mov	r2, r3
 8009900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009902:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009906:	891b      	ldrh	r3, [r3, #8]
 8009908:	f003 030f 	and.w	r3, r3, #15
 800990c:	b29b      	uxth	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <find_volume+0x24e>
 8009912:	230d      	movs	r3, #13
 8009914:	e119      	b.n	8009b4a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009918:	3330      	adds	r3, #48	; 0x30
 800991a:	3313      	adds	r3, #19
 800991c:	4618      	mov	r0, r3
 800991e:	f7fe fcb5 	bl	800828c <ld_word>
 8009922:	4603      	mov	r3, r0
 8009924:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009928:	2b00      	cmp	r3, #0
 800992a:	d106      	bne.n	800993a <find_volume+0x272>
 800992c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992e:	3330      	adds	r3, #48	; 0x30
 8009930:	3320      	adds	r3, #32
 8009932:	4618      	mov	r0, r3
 8009934:	f7fe fcc2 	bl	80082bc <ld_dword>
 8009938:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	3330      	adds	r3, #48	; 0x30
 800993e:	330e      	adds	r3, #14
 8009940:	4618      	mov	r0, r3
 8009942:	f7fe fca3 	bl	800828c <ld_word>
 8009946:	4603      	mov	r3, r0
 8009948:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800994a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800994c:	2b00      	cmp	r3, #0
 800994e:	d101      	bne.n	8009954 <find_volume+0x28c>
 8009950:	230d      	movs	r3, #13
 8009952:	e0fa      	b.n	8009b4a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009954:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009958:	4413      	add	r3, r2
 800995a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800995c:	8912      	ldrh	r2, [r2, #8]
 800995e:	0912      	lsrs	r2, r2, #4
 8009960:	b292      	uxth	r2, r2
 8009962:	4413      	add	r3, r2
 8009964:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009966:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996a:	429a      	cmp	r2, r3
 800996c:	d204      	bcs.n	8009978 <find_volume+0x2b0>
 800996e:	230d      	movs	r3, #13
 8009970:	e0eb      	b.n	8009b4a <find_volume+0x482>
 8009972:	bf00      	nop
 8009974:	20001df8 	.word	0x20001df8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8009978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800997a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009980:	8952      	ldrh	r2, [r2, #10]
 8009982:	fbb3 f3f2 	udiv	r3, r3, r2
 8009986:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	2b00      	cmp	r3, #0
 800998c:	d101      	bne.n	8009992 <find_volume+0x2ca>
 800998e:	230d      	movs	r3, #13
 8009990:	e0db      	b.n	8009b4a <find_volume+0x482>
		fmt = FS_FAT32;
 8009992:	2303      	movs	r3, #3
 8009994:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800999e:	4293      	cmp	r3, r2
 80099a0:	d802      	bhi.n	80099a8 <find_volume+0x2e0>
 80099a2:	2302      	movs	r3, #2
 80099a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80099a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099aa:	f640 72f5 	movw	r2, #4085	; 0xff5
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d802      	bhi.n	80099b8 <find_volume+0x2f0>
 80099b2:	2301      	movs	r3, #1
 80099b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	1c9a      	adds	r2, r3, #2
 80099bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099be:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80099c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099c4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80099c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80099c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ca:	441a      	add	r2, r3
 80099cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ce:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80099d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	441a      	add	r2, r3
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80099da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80099de:	2b03      	cmp	r3, #3
 80099e0:	d11e      	bne.n	8009a20 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80099e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e4:	3330      	adds	r3, #48	; 0x30
 80099e6:	332a      	adds	r3, #42	; 0x2a
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7fe fc4f 	bl	800828c <ld_word>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <find_volume+0x330>
 80099f4:	230d      	movs	r3, #13
 80099f6:	e0a8      	b.n	8009b4a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80099f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fa:	891b      	ldrh	r3, [r3, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d001      	beq.n	8009a04 <find_volume+0x33c>
 8009a00:	230d      	movs	r3, #13
 8009a02:	e0a2      	b.n	8009b4a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a06:	3330      	adds	r3, #48	; 0x30
 8009a08:	332c      	adds	r3, #44	; 0x2c
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f7fe fc56 	bl	80082bc <ld_dword>
 8009a10:	4602      	mov	r2, r0
 8009a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a14:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	647b      	str	r3, [r7, #68]	; 0x44
 8009a1e:	e01f      	b.n	8009a60 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a22:	891b      	ldrh	r3, [r3, #8]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d101      	bne.n	8009a2c <find_volume+0x364>
 8009a28:	230d      	movs	r3, #13
 8009a2a:	e08e      	b.n	8009b4a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a2e:	6a1a      	ldr	r2, [r3, #32]
 8009a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a32:	441a      	add	r2, r3
 8009a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a36:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009a38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d103      	bne.n	8009a48 <find_volume+0x380>
 8009a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	e00a      	b.n	8009a5e <find_volume+0x396>
 8009a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4a:	695a      	ldr	r2, [r3, #20]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	4413      	add	r3, r2
 8009a52:	085a      	lsrs	r2, r3, #1
 8009a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009a5e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a62:	699a      	ldr	r2, [r3, #24]
 8009a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a66:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009a6a:	0a5b      	lsrs	r3, r3, #9
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d201      	bcs.n	8009a74 <find_volume+0x3ac>
 8009a70:	230d      	movs	r3, #13
 8009a72:	e06a      	b.n	8009b4a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a7a:	611a      	str	r2, [r3, #16]
 8009a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7e:	691a      	ldr	r2, [r3, #16]
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8009a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a86:	2280      	movs	r2, #128	; 0x80
 8009a88:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009a8a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009a8e:	2b03      	cmp	r3, #3
 8009a90:	d149      	bne.n	8009b26 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a94:	3330      	adds	r3, #48	; 0x30
 8009a96:	3330      	adds	r3, #48	; 0x30
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe fbf7 	bl	800828c <ld_word>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d140      	bne.n	8009b26 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009aac:	f7fe fe9e 	bl	80087ec <move_window>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d137      	bne.n	8009b26 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab8:	2200      	movs	r2, #0
 8009aba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	3330      	adds	r3, #48	; 0x30
 8009ac0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fe fbe1 	bl	800828c <ld_word>
 8009aca:	4603      	mov	r3, r0
 8009acc:	461a      	mov	r2, r3
 8009ace:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d127      	bne.n	8009b26 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	3330      	adds	r3, #48	; 0x30
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe fbee 	bl	80082bc <ld_dword>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	4a1c      	ldr	r2, [pc, #112]	; (8009b54 <find_volume+0x48c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d11e      	bne.n	8009b26 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	3330      	adds	r3, #48	; 0x30
 8009aec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe fbe3 	bl	80082bc <ld_dword>
 8009af6:	4603      	mov	r3, r0
 8009af8:	4a17      	ldr	r2, [pc, #92]	; (8009b58 <find_volume+0x490>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d113      	bne.n	8009b26 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b00:	3330      	adds	r3, #48	; 0x30
 8009b02:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe fbd8 	bl	80082bc <ld_dword>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b10:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b14:	3330      	adds	r3, #48	; 0x30
 8009b16:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe fbce 	bl	80082bc <ld_dword>
 8009b20:	4602      	mov	r2, r0
 8009b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b24:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b28:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009b2c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009b2e:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <find_volume+0x494>)
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	3301      	adds	r3, #1
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <find_volume+0x494>)
 8009b38:	801a      	strh	r2, [r3, #0]
 8009b3a:	4b08      	ldr	r3, [pc, #32]	; (8009b5c <find_volume+0x494>)
 8009b3c:	881a      	ldrh	r2, [r3, #0]
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009b42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b44:	f7fe fdea 	bl	800871c <clear_lock>
#endif
	return FR_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3758      	adds	r7, #88	; 0x58
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	41615252 	.word	0x41615252
 8009b58:	61417272 	.word	0x61417272
 8009b5c:	20001dfc 	.word	0x20001dfc

08009b60 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009b6a:	2309      	movs	r3, #9
 8009b6c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d01c      	beq.n	8009bae <validate+0x4e>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d018      	beq.n	8009bae <validate+0x4e>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d013      	beq.n	8009bae <validate+0x4e>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	889a      	ldrh	r2, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	88db      	ldrh	r3, [r3, #6]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d10c      	bne.n	8009bae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	785b      	ldrb	r3, [r3, #1]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fad8 	bl	8008150 <disk_status>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d101      	bne.n	8009bae <validate+0x4e>
			res = FR_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d102      	bne.n	8009bba <validate+0x5a>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	e000      	b.n	8009bbc <validate+0x5c>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	6013      	str	r3, [r2, #0]
	return res;
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3710      	adds	r7, #16
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
	...

08009bcc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b088      	sub	sp, #32
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009bde:	f107 0310 	add.w	r3, r7, #16
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7ff fcd5 	bl	8009592 <get_ldnumber>
 8009be8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	da01      	bge.n	8009bf4 <f_mount+0x28>
 8009bf0:	230b      	movs	r3, #11
 8009bf2:	e02b      	b.n	8009c4c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009bf4:	4a17      	ldr	r2, [pc, #92]	; (8009c54 <f_mount+0x88>)
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bfc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d005      	beq.n	8009c10 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009c04:	69b8      	ldr	r0, [r7, #24]
 8009c06:	f7fe fd89 	bl	800871c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	490d      	ldr	r1, [pc, #52]	; (8009c54 <f_mount+0x88>)
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <f_mount+0x66>
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d001      	beq.n	8009c36 <f_mount+0x6a>
 8009c32:	2300      	movs	r3, #0
 8009c34:	e00a      	b.n	8009c4c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009c36:	f107 010c 	add.w	r1, r7, #12
 8009c3a:	f107 0308 	add.w	r3, r7, #8
 8009c3e:	2200      	movs	r2, #0
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7ff fd41 	bl	80096c8 <find_volume>
 8009c46:	4603      	mov	r3, r0
 8009c48:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3720      	adds	r7, #32
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	20001df8 	.word	0x20001df8

08009c58 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b098      	sub	sp, #96	; 0x60
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	4613      	mov	r3, r2
 8009c64:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <f_open+0x18>
 8009c6c:	2309      	movs	r3, #9
 8009c6e:	e1ad      	b.n	8009fcc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c76:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009c78:	79fa      	ldrb	r2, [r7, #7]
 8009c7a:	f107 0110 	add.w	r1, r7, #16
 8009c7e:	f107 0308 	add.w	r3, r7, #8
 8009c82:	4618      	mov	r0, r3
 8009c84:	f7ff fd20 	bl	80096c8 <find_volume>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f040 8191 	bne.w	8009fba <f_open+0x362>
		dj.obj.fs = fs;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	f107 0314 	add.w	r3, r7, #20
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7ff fc03 	bl	80094b0 <follow_path>
 8009caa:	4603      	mov	r3, r0
 8009cac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d11a      	bne.n	8009cee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009cb8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cbc:	b25b      	sxtb	r3, r3
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da03      	bge.n	8009cca <f_open+0x72>
				res = FR_INVALID_NAME;
 8009cc2:	2306      	movs	r3, #6
 8009cc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009cc8:	e011      	b.n	8009cee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009cca:	79fb      	ldrb	r3, [r7, #7]
 8009ccc:	f023 0301 	bic.w	r3, r3, #1
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	bf14      	ite	ne
 8009cd4:	2301      	movne	r3, #1
 8009cd6:	2300      	moveq	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f107 0314 	add.w	r3, r7, #20
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe fbd2 	bl	800848c <chk_lock>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009cee:	79fb      	ldrb	r3, [r7, #7]
 8009cf0:	f003 031c 	and.w	r3, r3, #28
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d07f      	beq.n	8009df8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009cf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d017      	beq.n	8009d30 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009d00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d04:	2b04      	cmp	r3, #4
 8009d06:	d10e      	bne.n	8009d26 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009d08:	f7fe fc1c 	bl	8008544 <enq_lock>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d006      	beq.n	8009d20 <f_open+0xc8>
 8009d12:	f107 0314 	add.w	r3, r7, #20
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7ff fb03 	bl	8009322 <dir_register>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	e000      	b.n	8009d22 <f_open+0xca>
 8009d20:	2312      	movs	r3, #18
 8009d22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	f043 0308 	orr.w	r3, r3, #8
 8009d2c:	71fb      	strb	r3, [r7, #7]
 8009d2e:	e010      	b.n	8009d52 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009d30:	7ebb      	ldrb	r3, [r7, #26]
 8009d32:	f003 0311 	and.w	r3, r3, #17
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <f_open+0xea>
					res = FR_DENIED;
 8009d3a:	2307      	movs	r3, #7
 8009d3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009d40:	e007      	b.n	8009d52 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009d42:	79fb      	ldrb	r3, [r7, #7]
 8009d44:	f003 0304 	and.w	r3, r3, #4
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <f_open+0xfa>
 8009d4c:	2308      	movs	r3, #8
 8009d4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009d52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d168      	bne.n	8009e2c <f_open+0x1d4>
 8009d5a:	79fb      	ldrb	r3, [r7, #7]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d063      	beq.n	8009e2c <f_open+0x1d4>
				dw = GET_FATTIME();
 8009d64:	f7fd ffa4 	bl	8007cb0 <get_fattime>
 8009d68:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d6c:	330e      	adds	r3, #14
 8009d6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fe fae1 	bl	8008338 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d78:	3316      	adds	r3, #22
 8009d7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fe fadb 	bl	8008338 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d84:	330b      	adds	r3, #11
 8009d86:	2220      	movs	r2, #32
 8009d88:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d8e:	4611      	mov	r1, r2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7ff fa32 	bl	80091fa <ld_clust>
 8009d96:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff fa4a 	bl	8009238 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009da6:	331c      	adds	r3, #28
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe fac4 	bl	8008338 <st_dword>
					fs->wflag = 1;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	2201      	movs	r2, #1
 8009db4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d037      	beq.n	8009e2c <f_open+0x1d4>
						dw = fs->winsect;
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009dc2:	f107 0314 	add.w	r3, r7, #20
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f7fe ff5d 	bl	8008c8a <remove_chain>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009dd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d126      	bne.n	8009e2c <f_open+0x1d4>
							res = move_window(fs, dw);
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fe fd02 	bl	80087ec <move_window>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009df2:	3a01      	subs	r2, #1
 8009df4:	60da      	str	r2, [r3, #12]
 8009df6:	e019      	b.n	8009e2c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009df8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d115      	bne.n	8009e2c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009e00:	7ebb      	ldrb	r3, [r7, #26]
 8009e02:	f003 0310 	and.w	r3, r3, #16
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d003      	beq.n	8009e12 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009e0a:	2304      	movs	r3, #4
 8009e0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009e10:	e00c      	b.n	8009e2c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009e12:	79fb      	ldrb	r3, [r7, #7]
 8009e14:	f003 0302 	and.w	r3, r3, #2
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d007      	beq.n	8009e2c <f_open+0x1d4>
 8009e1c:	7ebb      	ldrb	r3, [r7, #26]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d002      	beq.n	8009e2c <f_open+0x1d4>
						res = FR_DENIED;
 8009e26:	2307      	movs	r3, #7
 8009e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d128      	bne.n	8009e86 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009e34:	79fb      	ldrb	r3, [r7, #7]
 8009e36:	f003 0308 	and.w	r3, r3, #8
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d003      	beq.n	8009e46 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009e3e:	79fb      	ldrb	r3, [r7, #7]
 8009e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e44:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	f023 0301 	bic.w	r3, r3, #1
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	bf14      	ite	ne
 8009e5e:	2301      	movne	r3, #1
 8009e60:	2300      	moveq	r3, #0
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	461a      	mov	r2, r3
 8009e66:	f107 0314 	add.w	r3, r7, #20
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fe fb8b 	bl	8008588 <inc_lock>
 8009e72:	4602      	mov	r2, r0
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d102      	bne.n	8009e86 <f_open+0x22e>
 8009e80:	2302      	movs	r3, #2
 8009e82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009e86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f040 8095 	bne.w	8009fba <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e94:	4611      	mov	r1, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff f9af 	bl	80091fa <ld_clust>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ea4:	331c      	adds	r3, #28
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe fa08 	bl	80082bc <ld_dword>
 8009eac:	4602      	mov	r2, r0
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	88da      	ldrh	r2, [r3, #6]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	79fa      	ldrb	r2, [r7, #7]
 8009eca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2200      	movs	r2, #0
 8009edc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	3330      	adds	r3, #48	; 0x30
 8009ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fe fa72 	bl	80083d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009eee:	79fb      	ldrb	r3, [r7, #7]
 8009ef0:	f003 0320 	and.w	r3, r3, #32
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d060      	beq.n	8009fba <f_open+0x362>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d05c      	beq.n	8009fba <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	68da      	ldr	r2, [r3, #12]
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	895b      	ldrh	r3, [r3, #10]
 8009f0c:	025b      	lsls	r3, r3, #9
 8009f0e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f1c:	e016      	b.n	8009f4c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fe fd1d 	bl	8008962 <get_fat>
 8009f28:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009f2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d802      	bhi.n	8009f36 <f_open+0x2de>
 8009f30:	2302      	movs	r3, #2
 8009f32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f3c:	d102      	bne.n	8009f44 <f_open+0x2ec>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009f44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d103      	bne.n	8009f5c <f_open+0x304>
 8009f54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d8e0      	bhi.n	8009f1e <f_open+0x2c6>
				}
				fp->clust = clst;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f60:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009f62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d127      	bne.n	8009fba <f_open+0x362>
 8009f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d022      	beq.n	8009fba <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7fe fcd3 	bl	8008924 <clust2sect>
 8009f7e:	6478      	str	r0, [r7, #68]	; 0x44
 8009f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d103      	bne.n	8009f8e <f_open+0x336>
						res = FR_INT_ERR;
 8009f86:	2302      	movs	r3, #2
 8009f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009f8c:	e015      	b.n	8009fba <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f90:	0a5a      	lsrs	r2, r3, #9
 8009f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f94:	441a      	add	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	7858      	ldrb	r0, [r3, #1]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6a1a      	ldr	r2, [r3, #32]
 8009fa8:	2301      	movs	r3, #1
 8009faa:	f7fe f911 	bl	80081d0 <disk_read>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <f_open+0x362>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009fba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d002      	beq.n	8009fc8 <f_open+0x370>
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3760      	adds	r7, #96	; 0x60
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08e      	sub	sp, #56	; 0x38
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f107 0214 	add.w	r2, r7, #20
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f7ff fdb3 	bl	8009b60 <validate>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a000:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a004:	2b00      	cmp	r3, #0
 800a006:	d107      	bne.n	800a018 <f_read+0x44>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	7d5b      	ldrb	r3, [r3, #21]
 800a00c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a010:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a014:	2b00      	cmp	r3, #0
 800a016:	d002      	beq.n	800a01e <f_read+0x4a>
 800a018:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a01c:	e115      	b.n	800a24a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	7d1b      	ldrb	r3, [r3, #20]
 800a022:	f003 0301 	and.w	r3, r3, #1
 800a026:	2b00      	cmp	r3, #0
 800a028:	d101      	bne.n	800a02e <f_read+0x5a>
 800a02a:	2307      	movs	r3, #7
 800a02c:	e10d      	b.n	800a24a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	68da      	ldr	r2, [r3, #12]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	699b      	ldr	r3, [r3, #24]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	429a      	cmp	r2, r3
 800a040:	f240 80fe 	bls.w	800a240 <f_read+0x26c>
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a048:	e0fa      	b.n	800a240 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a052:	2b00      	cmp	r3, #0
 800a054:	f040 80c6 	bne.w	800a1e4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	699b      	ldr	r3, [r3, #24]
 800a05c:	0a5b      	lsrs	r3, r3, #9
 800a05e:	697a      	ldr	r2, [r7, #20]
 800a060:	8952      	ldrh	r2, [r2, #10]
 800a062:	3a01      	subs	r2, #1
 800a064:	4013      	ands	r3, r2
 800a066:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d12f      	bne.n	800a0ce <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d103      	bne.n	800a07e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	633b      	str	r3, [r7, #48]	; 0x30
 800a07c:	e013      	b.n	800a0a6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a082:	2b00      	cmp	r3, #0
 800a084:	d007      	beq.n	800a096 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	699b      	ldr	r3, [r3, #24]
 800a08a:	4619      	mov	r1, r3
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f7fe fef9 	bl	8008e84 <clmt_clust>
 800a092:	6338      	str	r0, [r7, #48]	; 0x30
 800a094:	e007      	b.n	800a0a6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	4619      	mov	r1, r3
 800a09e:	4610      	mov	r0, r2
 800a0a0:	f7fe fc5f 	bl	8008962 <get_fat>
 800a0a4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d804      	bhi.n	800a0b6 <f_read+0xe2>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2202      	movs	r2, #2
 800a0b0:	755a      	strb	r2, [r3, #21]
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	e0c9      	b.n	800a24a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0bc:	d104      	bne.n	800a0c8 <f_read+0xf4>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	755a      	strb	r2, [r3, #21]
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e0c0      	b.n	800a24a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0cc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a0ce:	697a      	ldr	r2, [r7, #20]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	f7fe fc24 	bl	8008924 <clust2sect>
 800a0dc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d104      	bne.n	800a0ee <f_read+0x11a>
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	755a      	strb	r2, [r3, #21]
 800a0ea:	2302      	movs	r3, #2
 800a0ec:	e0ad      	b.n	800a24a <f_read+0x276>
			sect += csect;
 800a0ee:	69ba      	ldr	r2, [r7, #24]
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	0a5b      	lsrs	r3, r3, #9
 800a0fa:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d039      	beq.n	800a176 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a102:	69fa      	ldr	r2, [r7, #28]
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	4413      	add	r3, r2
 800a108:	697a      	ldr	r2, [r7, #20]
 800a10a:	8952      	ldrh	r2, [r2, #10]
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d905      	bls.n	800a11c <f_read+0x148>
					cc = fs->csize - csect;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	895b      	ldrh	r3, [r3, #10]
 800a114:	461a      	mov	r2, r3
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	1ad3      	subs	r3, r2, r3
 800a11a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	7858      	ldrb	r0, [r3, #1]
 800a120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a122:	69ba      	ldr	r2, [r7, #24]
 800a124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a126:	f7fe f853 	bl	80081d0 <disk_read>
 800a12a:	4603      	mov	r3, r0
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d004      	beq.n	800a13a <f_read+0x166>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2201      	movs	r2, #1
 800a134:	755a      	strb	r2, [r3, #21]
 800a136:	2301      	movs	r3, #1
 800a138:	e087      	b.n	800a24a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	7d1b      	ldrb	r3, [r3, #20]
 800a13e:	b25b      	sxtb	r3, r3
 800a140:	2b00      	cmp	r3, #0
 800a142:	da14      	bge.n	800a16e <f_read+0x19a>
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6a1a      	ldr	r2, [r3, #32]
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a14e:	429a      	cmp	r2, r3
 800a150:	d90d      	bls.n	800a16e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6a1a      	ldr	r2, [r3, #32]
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	025b      	lsls	r3, r3, #9
 800a15c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a15e:	18d0      	adds	r0, r2, r3
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	3330      	adds	r3, #48	; 0x30
 800a164:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a168:	4619      	mov	r1, r3
 800a16a:	f7fe f911 	bl	8008390 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a170:	025b      	lsls	r3, r3, #9
 800a172:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800a174:	e050      	b.n	800a218 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6a1b      	ldr	r3, [r3, #32]
 800a17a:	69ba      	ldr	r2, [r7, #24]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d02e      	beq.n	800a1de <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	7d1b      	ldrb	r3, [r3, #20]
 800a184:	b25b      	sxtb	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	da18      	bge.n	800a1bc <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	7858      	ldrb	r0, [r3, #1]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6a1a      	ldr	r2, [r3, #32]
 800a198:	2301      	movs	r3, #1
 800a19a:	f7fe f839 	bl	8008210 <disk_write>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d004      	beq.n	800a1ae <f_read+0x1da>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	755a      	strb	r2, [r3, #21]
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e04d      	b.n	800a24a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	7d1b      	ldrb	r3, [r3, #20]
 800a1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1b6:	b2da      	uxtb	r2, r3
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	7858      	ldrb	r0, [r3, #1]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	69ba      	ldr	r2, [r7, #24]
 800a1ca:	f7fe f801 	bl	80081d0 <disk_read>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d004      	beq.n	800a1de <f_read+0x20a>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	755a      	strb	r2, [r3, #21]
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e035      	b.n	800a24a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1ec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a1f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a1f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d901      	bls.n	800a1fe <f_read+0x22a>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a20c:	4413      	add	r3, r2
 800a20e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a210:	4619      	mov	r1, r3
 800a212:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a214:	f7fe f8bc 	bl	8008390 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21c:	4413      	add	r3, r2
 800a21e:	627b      	str	r3, [r7, #36]	; 0x24
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	699a      	ldr	r2, [r3, #24]
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a226:	441a      	add	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	619a      	str	r2, [r3, #24]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a232:	441a      	add	r2, r3
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	601a      	str	r2, [r3, #0]
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	f47f af01 	bne.w	800a04a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3738      	adds	r7, #56	; 0x38
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}

0800a252 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a252:	b580      	push	{r7, lr}
 800a254:	b086      	sub	sp, #24
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f107 0208 	add.w	r2, r7, #8
 800a260:	4611      	mov	r1, r2
 800a262:	4618      	mov	r0, r3
 800a264:	f7ff fc7c 	bl	8009b60 <validate>
 800a268:	4603      	mov	r3, r0
 800a26a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d168      	bne.n	800a344 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	7d1b      	ldrb	r3, [r3, #20]
 800a276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d062      	beq.n	800a344 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	7d1b      	ldrb	r3, [r3, #20]
 800a282:	b25b      	sxtb	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	da15      	bge.n	800a2b4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	7858      	ldrb	r0, [r3, #1]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a1a      	ldr	r2, [r3, #32]
 800a296:	2301      	movs	r3, #1
 800a298:	f7fd ffba 	bl	8008210 <disk_write>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <f_sync+0x54>
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e04f      	b.n	800a346 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	7d1b      	ldrb	r3, [r3, #20]
 800a2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a2ae:	b2da      	uxtb	r2, r3
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a2b4:	f7fd fcfc 	bl	8007cb0 <get_fattime>
 800a2b8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f7fe fa92 	bl	80087ec <move_window>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d138      	bne.n	800a344 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	330b      	adds	r3, #11
 800a2dc:	781a      	ldrb	r2, [r3, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	330b      	adds	r3, #11
 800a2e2:	f042 0220 	orr.w	r2, r2, #32
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6818      	ldr	r0, [r3, #0]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	68f9      	ldr	r1, [r7, #12]
 800a2f6:	f7fe ff9f 	bl	8009238 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f103 021c 	add.w	r2, r3, #28
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	4619      	mov	r1, r3
 800a306:	4610      	mov	r0, r2
 800a308:	f7fe f816 	bl	8008338 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	3316      	adds	r3, #22
 800a310:	6939      	ldr	r1, [r7, #16]
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe f810 	bl	8008338 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	3312      	adds	r3, #18
 800a31c:	2100      	movs	r1, #0
 800a31e:	4618      	mov	r0, r3
 800a320:	f7fd ffef 	bl	8008302 <st_word>
					fs->wflag = 1;
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2201      	movs	r2, #1
 800a328:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7fe fa8b 	bl	8008848 <sync_fs>
 800a332:	4603      	mov	r3, r0
 800a334:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	7d1b      	ldrb	r3, [r3, #20]
 800a33a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a33e:	b2da      	uxtb	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a344:	7dfb      	ldrb	r3, [r7, #23]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3718      	adds	r7, #24
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7ff ff7b 	bl	800a252 <f_sync>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a360:	7bfb      	ldrb	r3, [r7, #15]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d118      	bne.n	800a398 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f107 0208 	add.w	r2, r7, #8
 800a36c:	4611      	mov	r1, r2
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff fbf6 	bl	8009b60 <validate>
 800a374:	4603      	mov	r3, r0
 800a376:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a378:	7bfb      	ldrb	r3, [r7, #15]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d10c      	bne.n	800a398 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	4618      	mov	r0, r3
 800a384:	f7fe f98e 	bl	80086a4 <dec_lock>
 800a388:	4603      	mov	r3, r0
 800a38a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d102      	bne.n	800a398 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a398:	7bfb      	ldrb	r3, [r7, #15]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a3ba:	4b1f      	ldr	r3, [pc, #124]	; (800a438 <FATFS_LinkDriverEx+0x94>)
 800a3bc:	7a5b      	ldrb	r3, [r3, #9]
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d131      	bne.n	800a428 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a3c4:	4b1c      	ldr	r3, [pc, #112]	; (800a438 <FATFS_LinkDriverEx+0x94>)
 800a3c6:	7a5b      	ldrb	r3, [r3, #9]
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	4b1a      	ldr	r3, [pc, #104]	; (800a438 <FATFS_LinkDriverEx+0x94>)
 800a3ce:	2100      	movs	r1, #0
 800a3d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a3d2:	4b19      	ldr	r3, [pc, #100]	; (800a438 <FATFS_LinkDriverEx+0x94>)
 800a3d4:	7a5b      	ldrb	r3, [r3, #9]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	4a17      	ldr	r2, [pc, #92]	; (800a438 <FATFS_LinkDriverEx+0x94>)
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	68fa      	ldr	r2, [r7, #12]
 800a3e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a3e2:	4b15      	ldr	r3, [pc, #84]	; (800a438 <FATFS_LinkDriverEx+0x94>)
 800a3e4:	7a5b      	ldrb	r3, [r3, #9]
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	4b13      	ldr	r3, [pc, #76]	; (800a438 <FATFS_LinkDriverEx+0x94>)
 800a3ec:	4413      	add	r3, r2
 800a3ee:	79fa      	ldrb	r2, [r7, #7]
 800a3f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a3f2:	4b11      	ldr	r3, [pc, #68]	; (800a438 <FATFS_LinkDriverEx+0x94>)
 800a3f4:	7a5b      	ldrb	r3, [r3, #9]
 800a3f6:	b2db      	uxtb	r3, r3
 800a3f8:	1c5a      	adds	r2, r3, #1
 800a3fa:	b2d1      	uxtb	r1, r2
 800a3fc:	4a0e      	ldr	r2, [pc, #56]	; (800a438 <FATFS_LinkDriverEx+0x94>)
 800a3fe:	7251      	strb	r1, [r2, #9]
 800a400:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a402:	7dbb      	ldrb	r3, [r7, #22]
 800a404:	3330      	adds	r3, #48	; 0x30
 800a406:	b2da      	uxtb	r2, r3
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	3301      	adds	r3, #1
 800a410:	223a      	movs	r2, #58	; 0x3a
 800a412:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	3302      	adds	r3, #2
 800a418:	222f      	movs	r2, #47	; 0x2f
 800a41a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	3303      	adds	r3, #3
 800a420:	2200      	movs	r2, #0
 800a422:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a428:	7dfb      	ldrb	r3, [r7, #23]
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	371c      	adds	r7, #28
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20001e20 	.word	0x20001e20

0800a43c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a446:	2200      	movs	r2, #0
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff ffaa 	bl	800a3a4 <FATFS_LinkDriverEx>
 800a450:	4603      	mov	r3, r0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3708      	adds	r7, #8
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
	...

0800a45c <phase_1_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_phase_1_activations_map, 1, params)) {
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	2101      	movs	r1, #1
 800a46a:	485e      	ldr	r0, [pc, #376]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a46c:	f000 feba 	bl	800b1e4 <ai_platform_get_activations_map>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 80ac 	beq.w	800a5d0 <phase_1_configure_activations+0x174>
    /* Updating activations (byte) offsets */
    
    serving_default_conv2d_3_input0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800a478:	4b5a      	ldr	r3, [pc, #360]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	4b5a      	ldr	r3, [pc, #360]	; (800a5e8 <phase_1_configure_activations+0x18c>)
 800a47e:	4413      	add	r3, r2
 800a480:	4a5a      	ldr	r2, [pc, #360]	; (800a5ec <phase_1_configure_activations+0x190>)
 800a482:	6093      	str	r3, [r2, #8]
    serving_default_conv2d_3_input0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 245888);
 800a484:	4b57      	ldr	r3, [pc, #348]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	4b57      	ldr	r3, [pc, #348]	; (800a5e8 <phase_1_configure_activations+0x18c>)
 800a48a:	4413      	add	r3, r2
 800a48c:	4a57      	ldr	r2, [pc, #348]	; (800a5ec <phase_1_configure_activations+0x190>)
 800a48e:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a490:	4b54      	ldr	r3, [pc, #336]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a56      	ldr	r2, [pc, #344]	; (800a5f0 <phase_1_configure_activations+0x194>)
 800a496:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a498:	4b52      	ldr	r3, [pc, #328]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a54      	ldr	r2, [pc, #336]	; (800a5f0 <phase_1_configure_activations+0x194>)
 800a49e:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a4a0:	4b50      	ldr	r3, [pc, #320]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a53      	ldr	r2, [pc, #332]	; (800a5f4 <phase_1_configure_activations+0x198>)
 800a4a6:	6093      	str	r3, [r2, #8]
    eltwise_2_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a4a8:	4b4e      	ldr	r3, [pc, #312]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4a51      	ldr	r2, [pc, #324]	; (800a5f4 <phase_1_configure_activations+0x198>)
 800a4ae:	60d3      	str	r3, [r2, #12]
    
    pool_3_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a4b0:	4b4c      	ldr	r3, [pc, #304]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a50      	ldr	r2, [pc, #320]	; (800a5f8 <phase_1_configure_activations+0x19c>)
 800a4b6:	6093      	str	r3, [r2, #8]
    pool_3_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a4b8:	4b4a      	ldr	r3, [pc, #296]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a4e      	ldr	r2, [pc, #312]	; (800a5f8 <phase_1_configure_activations+0x19c>)
 800a4be:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800a4c0:	4b48      	ldr	r3, [pc, #288]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a4c8:	4a4c      	ldr	r2, [pc, #304]	; (800a5fc <phase_1_configure_activations+0x1a0>)
 800a4ca:	6093      	str	r3, [r2, #8]
    eltwise_5_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 65536);
 800a4cc:	4b45      	ldr	r3, [pc, #276]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a4d4:	4a49      	ldr	r2, [pc, #292]	; (800a5fc <phase_1_configure_activations+0x1a0>)
 800a4d6:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a4d8:	4b42      	ldr	r3, [pc, #264]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a4e0:	4a47      	ldr	r2, [pc, #284]	; (800a600 <phase_1_configure_activations+0x1a4>)
 800a4e2:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a4e4:	4b3f      	ldr	r3, [pc, #252]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a4ec:	4a44      	ldr	r2, [pc, #272]	; (800a600 <phase_1_configure_activations+0x1a4>)
 800a4ee:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a4f0:	4b3c      	ldr	r3, [pc, #240]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a43      	ldr	r2, [pc, #268]	; (800a604 <phase_1_configure_activations+0x1a8>)
 800a4f6:	6093      	str	r3, [r2, #8]
    eltwise_8_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a4f8:	4b3a      	ldr	r3, [pc, #232]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a41      	ldr	r2, [pc, #260]	; (800a604 <phase_1_configure_activations+0x1a8>)
 800a4fe:	60d3      	str	r3, [r2, #12]
    
    pool_9_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a500:	4b38      	ldr	r3, [pc, #224]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a508:	4a3f      	ldr	r2, [pc, #252]	; (800a608 <phase_1_configure_activations+0x1ac>)
 800a50a:	6093      	str	r3, [r2, #8]
    pool_9_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 131072);
 800a50c:	4b35      	ldr	r3, [pc, #212]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800a514:	4a3c      	ldr	r2, [pc, #240]	; (800a608 <phase_1_configure_activations+0x1ac>)
 800a516:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a518:	4b32      	ldr	r3, [pc, #200]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a3b      	ldr	r2, [pc, #236]	; (800a60c <phase_1_configure_activations+0x1b0>)
 800a51e:	6093      	str	r3, [r2, #8]
    eltwise_11_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a520:	4b30      	ldr	r3, [pc, #192]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a39      	ldr	r2, [pc, #228]	; (800a60c <phase_1_configure_activations+0x1b0>)
 800a526:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800a528:	4b2e      	ldr	r3, [pc, #184]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a530:	4a37      	ldr	r2, [pc, #220]	; (800a610 <phase_1_configure_activations+0x1b4>)
 800a532:	6093      	str	r3, [r2, #8]
    conv2d_12_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 32768);
 800a534:	4b2b      	ldr	r3, [pc, #172]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a53c:	4a34      	ldr	r2, [pc, #208]	; (800a610 <phase_1_configure_activations+0x1b4>)
 800a53e:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800a540:	4b28      	ldr	r3, [pc, #160]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800a548:	4a32      	ldr	r2, [pc, #200]	; (800a614 <phase_1_configure_activations+0x1b8>)
 800a54a:	6093      	str	r3, [r2, #8]
    eltwise_14_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 98304);
 800a54c:	4b25      	ldr	r3, [pc, #148]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 800a554:	4a2f      	ldr	r2, [pc, #188]	; (800a614 <phase_1_configure_activations+0x1b8>)
 800a556:	60d3      	str	r3, [r2, #12]
    
    pool_15_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a558:	4b22      	ldr	r3, [pc, #136]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a2e      	ldr	r2, [pc, #184]	; (800a618 <phase_1_configure_activations+0x1bc>)
 800a55e:	6093      	str	r3, [r2, #8]
    pool_15_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a560:	4b20      	ldr	r3, [pc, #128]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a2c      	ldr	r2, [pc, #176]	; (800a618 <phase_1_configure_activations+0x1bc>)
 800a566:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800a568:	4b1e      	ldr	r3, [pc, #120]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a570:	4a2a      	ldr	r2, [pc, #168]	; (800a61c <phase_1_configure_activations+0x1c0>)
 800a572:	6093      	str	r3, [r2, #8]
    eltwise_17_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 16384);
 800a574:	4b1b      	ldr	r3, [pc, #108]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800a57c:	4a27      	ldr	r2, [pc, #156]	; (800a61c <phase_1_configure_activations+0x1c0>)
 800a57e:	60d3      	str	r3, [r2, #12]
    
    dense_19_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a580:	4b18      	ldr	r3, [pc, #96]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a26      	ldr	r2, [pc, #152]	; (800a620 <phase_1_configure_activations+0x1c4>)
 800a586:	6093      	str	r3, [r2, #8]
    dense_19_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a588:	4b16      	ldr	r3, [pc, #88]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a24      	ldr	r2, [pc, #144]	; (800a620 <phase_1_configure_activations+0x1c4>)
 800a58e:	60d3      	str	r3, [r2, #12]
    
    nl_19_nl_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800a590:	4b14      	ldr	r3, [pc, #80]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a598:	4a22      	ldr	r2, [pc, #136]	; (800a624 <phase_1_configure_activations+0x1c8>)
 800a59a:	6093      	str	r3, [r2, #8]
    nl_19_nl_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 1024);
 800a59c:	4b11      	ldr	r3, [pc, #68]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5a4:	4a1f      	ldr	r2, [pc, #124]	; (800a624 <phase_1_configure_activations+0x1c8>)
 800a5a6:	60d3      	str	r3, [r2, #12]
    
    dense_20_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a5a8:	4b0e      	ldr	r3, [pc, #56]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a1e      	ldr	r2, [pc, #120]	; (800a628 <phase_1_configure_activations+0x1cc>)
 800a5ae:	6093      	str	r3, [r2, #8]
    dense_20_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 0);
 800a5b0:	4b0c      	ldr	r3, [pc, #48]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a1c      	ldr	r2, [pc, #112]	; (800a628 <phase_1_configure_activations+0x1cc>)
 800a5b6:	60d3      	str	r3, [r2, #12]
    
    nl_21_output_array.data = AI_PTR(g_phase_1_activations_map[0] + 40);
 800a5b8:	4b0a      	ldr	r3, [pc, #40]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	3328      	adds	r3, #40	; 0x28
 800a5be:	4a1b      	ldr	r2, [pc, #108]	; (800a62c <phase_1_configure_activations+0x1d0>)
 800a5c0:	6093      	str	r3, [r2, #8]
    nl_21_output_array.data_start = AI_PTR(g_phase_1_activations_map[0] + 40);
 800a5c2:	4b08      	ldr	r3, [pc, #32]	; (800a5e4 <phase_1_configure_activations+0x188>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3328      	adds	r3, #40	; 0x28
 800a5c8:	4a18      	ldr	r2, [pc, #96]	; (800a62c <phase_1_configure_activations+0x1d0>)
 800a5ca:	60d3      	str	r3, [r2, #12]
    
    return true;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e005      	b.n	800a5dc <phase_1_configure_activations+0x180>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800a5d0:	2213      	movs	r2, #19
 800a5d2:	2130      	movs	r1, #48	; 0x30
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 ff69 	bl	800b4ac <ai_platform_network_set_error>
  return false;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3708      	adds	r7, #8
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20001e2c 	.word	0x20001e2c
 800a5e8:	0003c080 	.word	0x0003c080
 800a5ec:	200000dc 	.word	0x200000dc
 800a5f0:	200000ec 	.word	0x200000ec
 800a5f4:	2000010c 	.word	0x2000010c
 800a5f8:	2000011c 	.word	0x2000011c
 800a5fc:	2000012c 	.word	0x2000012c
 800a600:	2000013c 	.word	0x2000013c
 800a604:	2000014c 	.word	0x2000014c
 800a608:	2000015c 	.word	0x2000015c
 800a60c:	2000016c 	.word	0x2000016c
 800a610:	2000017c 	.word	0x2000017c
 800a614:	2000018c 	.word	0x2000018c
 800a618:	2000019c 	.word	0x2000019c
 800a61c:	200001ac 	.word	0x200001ac
 800a620:	200001bc 	.word	0x200001bc
 800a624:	200001cc 	.word	0x200001cc
 800a628:	200001dc 	.word	0x200001dc
 800a62c:	200001ec 	.word	0x200001ec

0800a630 <phase_1_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool phase_1_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_phase_1_weights_map, 1, params)) {
 800a63a:	683a      	ldr	r2, [r7, #0]
 800a63c:	2101      	movs	r1, #1
 800a63e:	4892      	ldr	r0, [pc, #584]	; (800a888 <phase_1_configure_weights+0x258>)
 800a640:	f000 fd78 	bl	800b134 <ai_platform_get_weights_map>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	f000 81c4 	beq.w	800a9d4 <phase_1_configure_weights+0x3a4>
    /* Updating weights (byte) offsets */
    
    eltwise_8_scale_array.format |= AI_FMT_FLAG_CONST;
 800a64c:	4b8f      	ldr	r3, [pc, #572]	; (800a88c <phase_1_configure_weights+0x25c>)
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a654:	4a8d      	ldr	r2, [pc, #564]	; (800a88c <phase_1_configure_weights+0x25c>)
 800a656:	6013      	str	r3, [r2, #0]
    eltwise_8_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 0);
 800a658:	4b8b      	ldr	r3, [pc, #556]	; (800a888 <phase_1_configure_weights+0x258>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a8b      	ldr	r2, [pc, #556]	; (800a88c <phase_1_configure_weights+0x25c>)
 800a65e:	6093      	str	r3, [r2, #8]
    eltwise_8_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 0);
 800a660:	4b89      	ldr	r3, [pc, #548]	; (800a888 <phase_1_configure_weights+0x258>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a89      	ldr	r2, [pc, #548]	; (800a88c <phase_1_configure_weights+0x25c>)
 800a666:	60d3      	str	r3, [r2, #12]
    
    eltwise_8_bias_array.format |= AI_FMT_FLAG_CONST;
 800a668:	4b89      	ldr	r3, [pc, #548]	; (800a890 <phase_1_configure_weights+0x260>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a670:	4a87      	ldr	r2, [pc, #540]	; (800a890 <phase_1_configure_weights+0x260>)
 800a672:	6013      	str	r3, [r2, #0]
    eltwise_8_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 256);
 800a674:	4b84      	ldr	r3, [pc, #528]	; (800a888 <phase_1_configure_weights+0x258>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a67c:	4a84      	ldr	r2, [pc, #528]	; (800a890 <phase_1_configure_weights+0x260>)
 800a67e:	6093      	str	r3, [r2, #8]
    eltwise_8_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 256);
 800a680:	4b81      	ldr	r3, [pc, #516]	; (800a888 <phase_1_configure_weights+0x258>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a688:	4a81      	ldr	r2, [pc, #516]	; (800a890 <phase_1_configure_weights+0x260>)
 800a68a:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_scale_array.format |= AI_FMT_FLAG_CONST;
 800a68c:	4b81      	ldr	r3, [pc, #516]	; (800a894 <phase_1_configure_weights+0x264>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a694:	4a7f      	ldr	r2, [pc, #508]	; (800a894 <phase_1_configure_weights+0x264>)
 800a696:	6013      	str	r3, [r2, #0]
    eltwise_11_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 512);
 800a698:	4b7b      	ldr	r3, [pc, #492]	; (800a888 <phase_1_configure_weights+0x258>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a6a0:	4a7c      	ldr	r2, [pc, #496]	; (800a894 <phase_1_configure_weights+0x264>)
 800a6a2:	6093      	str	r3, [r2, #8]
    eltwise_11_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 512);
 800a6a4:	4b78      	ldr	r3, [pc, #480]	; (800a888 <phase_1_configure_weights+0x258>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a6ac:	4a79      	ldr	r2, [pc, #484]	; (800a894 <phase_1_configure_weights+0x264>)
 800a6ae:	60d3      	str	r3, [r2, #12]
    
    eltwise_11_bias_array.format |= AI_FMT_FLAG_CONST;
 800a6b0:	4b79      	ldr	r3, [pc, #484]	; (800a898 <phase_1_configure_weights+0x268>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6b8:	4a77      	ldr	r2, [pc, #476]	; (800a898 <phase_1_configure_weights+0x268>)
 800a6ba:	6013      	str	r3, [r2, #0]
    eltwise_11_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 768);
 800a6bc:	4b72      	ldr	r3, [pc, #456]	; (800a888 <phase_1_configure_weights+0x258>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a6c4:	4a74      	ldr	r2, [pc, #464]	; (800a898 <phase_1_configure_weights+0x268>)
 800a6c6:	6093      	str	r3, [r2, #8]
    eltwise_11_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 768);
 800a6c8:	4b6f      	ldr	r3, [pc, #444]	; (800a888 <phase_1_configure_weights+0x258>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800a6d0:	4a71      	ldr	r2, [pc, #452]	; (800a898 <phase_1_configure_weights+0x268>)
 800a6d2:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_weights_array.format |= AI_FMT_FLAG_CONST;
 800a6d4:	4b71      	ldr	r3, [pc, #452]	; (800a89c <phase_1_configure_weights+0x26c>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6dc:	4a6f      	ldr	r2, [pc, #444]	; (800a89c <phase_1_configure_weights+0x26c>)
 800a6de:	6013      	str	r3, [r2, #0]
    conv2d_12_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800a6e0:	4b69      	ldr	r3, [pc, #420]	; (800a888 <phase_1_configure_weights+0x258>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6e8:	4a6c      	ldr	r2, [pc, #432]	; (800a89c <phase_1_configure_weights+0x26c>)
 800a6ea:	6093      	str	r3, [r2, #8]
    conv2d_12_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1024);
 800a6ec:	4b66      	ldr	r3, [pc, #408]	; (800a888 <phase_1_configure_weights+0x258>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a6f4:	4a69      	ldr	r2, [pc, #420]	; (800a89c <phase_1_configure_weights+0x26c>)
 800a6f6:	60d3      	str	r3, [r2, #12]
    
    conv2d_12_bias_array.format |= AI_FMT_FLAG_CONST;
 800a6f8:	4b69      	ldr	r3, [pc, #420]	; (800a8a0 <phase_1_configure_weights+0x270>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a700:	4a67      	ldr	r2, [pc, #412]	; (800a8a0 <phase_1_configure_weights+0x270>)
 800a702:	6013      	str	r3, [r2, #0]
    conv2d_12_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800a704:	4b60      	ldr	r3, [pc, #384]	; (800a888 <phase_1_configure_weights+0x258>)
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	4b66      	ldr	r3, [pc, #408]	; (800a8a4 <phase_1_configure_weights+0x274>)
 800a70a:	4413      	add	r3, r2
 800a70c:	4a64      	ldr	r2, [pc, #400]	; (800a8a0 <phase_1_configure_weights+0x270>)
 800a70e:	6093      	str	r3, [r2, #8]
    conv2d_12_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 295936);
 800a710:	4b5d      	ldr	r3, [pc, #372]	; (800a888 <phase_1_configure_weights+0x258>)
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	4b63      	ldr	r3, [pc, #396]	; (800a8a4 <phase_1_configure_weights+0x274>)
 800a716:	4413      	add	r3, r2
 800a718:	4a61      	ldr	r2, [pc, #388]	; (800a8a0 <phase_1_configure_weights+0x270>)
 800a71a:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_scale_array.format |= AI_FMT_FLAG_CONST;
 800a71c:	4b62      	ldr	r3, [pc, #392]	; (800a8a8 <phase_1_configure_weights+0x278>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a724:	4a60      	ldr	r2, [pc, #384]	; (800a8a8 <phase_1_configure_weights+0x278>)
 800a726:	6013      	str	r3, [r2, #0]
    eltwise_14_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800a728:	4b57      	ldr	r3, [pc, #348]	; (800a888 <phase_1_configure_weights+0x258>)
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	4b5f      	ldr	r3, [pc, #380]	; (800a8ac <phase_1_configure_weights+0x27c>)
 800a72e:	4413      	add	r3, r2
 800a730:	4a5d      	ldr	r2, [pc, #372]	; (800a8a8 <phase_1_configure_weights+0x278>)
 800a732:	6093      	str	r3, [r2, #8]
    eltwise_14_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296448);
 800a734:	4b54      	ldr	r3, [pc, #336]	; (800a888 <phase_1_configure_weights+0x258>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	4b5c      	ldr	r3, [pc, #368]	; (800a8ac <phase_1_configure_weights+0x27c>)
 800a73a:	4413      	add	r3, r2
 800a73c:	4a5a      	ldr	r2, [pc, #360]	; (800a8a8 <phase_1_configure_weights+0x278>)
 800a73e:	60d3      	str	r3, [r2, #12]
    
    eltwise_14_bias_array.format |= AI_FMT_FLAG_CONST;
 800a740:	4b5b      	ldr	r3, [pc, #364]	; (800a8b0 <phase_1_configure_weights+0x280>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a748:	4a59      	ldr	r2, [pc, #356]	; (800a8b0 <phase_1_configure_weights+0x280>)
 800a74a:	6013      	str	r3, [r2, #0]
    eltwise_14_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800a74c:	4b4e      	ldr	r3, [pc, #312]	; (800a888 <phase_1_configure_weights+0x258>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800a754:	4a56      	ldr	r2, [pc, #344]	; (800a8b0 <phase_1_configure_weights+0x280>)
 800a756:	6093      	str	r3, [r2, #8]
    eltwise_14_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 296960);
 800a758:	4b4b      	ldr	r3, [pc, #300]	; (800a888 <phase_1_configure_weights+0x258>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f503 2391 	add.w	r3, r3, #296960	; 0x48800
 800a760:	4a53      	ldr	r2, [pc, #332]	; (800a8b0 <phase_1_configure_weights+0x280>)
 800a762:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_scale_array.format |= AI_FMT_FLAG_CONST;
 800a764:	4b53      	ldr	r3, [pc, #332]	; (800a8b4 <phase_1_configure_weights+0x284>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a76c:	4a51      	ldr	r2, [pc, #324]	; (800a8b4 <phase_1_configure_weights+0x284>)
 800a76e:	6013      	str	r3, [r2, #0]
    eltwise_17_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800a770:	4b45      	ldr	r3, [pc, #276]	; (800a888 <phase_1_configure_weights+0x258>)
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	4b50      	ldr	r3, [pc, #320]	; (800a8b8 <phase_1_configure_weights+0x288>)
 800a776:	4413      	add	r3, r2
 800a778:	4a4e      	ldr	r2, [pc, #312]	; (800a8b4 <phase_1_configure_weights+0x284>)
 800a77a:	6093      	str	r3, [r2, #8]
    eltwise_17_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297472);
 800a77c:	4b42      	ldr	r3, [pc, #264]	; (800a888 <phase_1_configure_weights+0x258>)
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	4b4d      	ldr	r3, [pc, #308]	; (800a8b8 <phase_1_configure_weights+0x288>)
 800a782:	4413      	add	r3, r2
 800a784:	4a4b      	ldr	r2, [pc, #300]	; (800a8b4 <phase_1_configure_weights+0x284>)
 800a786:	60d3      	str	r3, [r2, #12]
    
    eltwise_17_bias_array.format |= AI_FMT_FLAG_CONST;
 800a788:	4b4c      	ldr	r3, [pc, #304]	; (800a8bc <phase_1_configure_weights+0x28c>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a790:	4a4a      	ldr	r2, [pc, #296]	; (800a8bc <phase_1_configure_weights+0x28c>)
 800a792:	6013      	str	r3, [r2, #0]
    eltwise_17_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800a794:	4b3c      	ldr	r3, [pc, #240]	; (800a888 <phase_1_configure_weights+0x258>)
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	4b49      	ldr	r3, [pc, #292]	; (800a8c0 <phase_1_configure_weights+0x290>)
 800a79a:	4413      	add	r3, r2
 800a79c:	4a47      	ldr	r2, [pc, #284]	; (800a8bc <phase_1_configure_weights+0x28c>)
 800a79e:	6093      	str	r3, [r2, #8]
    eltwise_17_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 297984);
 800a7a0:	4b39      	ldr	r3, [pc, #228]	; (800a888 <phase_1_configure_weights+0x258>)
 800a7a2:	681a      	ldr	r2, [r3, #0]
 800a7a4:	4b46      	ldr	r3, [pc, #280]	; (800a8c0 <phase_1_configure_weights+0x290>)
 800a7a6:	4413      	add	r3, r2
 800a7a8:	4a44      	ldr	r2, [pc, #272]	; (800a8bc <phase_1_configure_weights+0x28c>)
 800a7aa:	60d3      	str	r3, [r2, #12]
    
    dense_19_weights_array.format |= AI_FMT_FLAG_CONST;
 800a7ac:	4b45      	ldr	r3, [pc, #276]	; (800a8c4 <phase_1_configure_weights+0x294>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7b4:	4a43      	ldr	r2, [pc, #268]	; (800a8c4 <phase_1_configure_weights+0x294>)
 800a7b6:	6013      	str	r3, [r2, #0]
    dense_19_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 299520);
 800a7b8:	4b33      	ldr	r3, [pc, #204]	; (800a888 <phase_1_configure_weights+0x258>)
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	4b42      	ldr	r3, [pc, #264]	; (800a8c8 <phase_1_configure_weights+0x298>)
 800a7be:	4413      	add	r3, r2
 800a7c0:	4a40      	ldr	r2, [pc, #256]	; (800a8c4 <phase_1_configure_weights+0x294>)
 800a7c2:	6093      	str	r3, [r2, #8]
    dense_19_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 298496);
 800a7c4:	4b30      	ldr	r3, [pc, #192]	; (800a888 <phase_1_configure_weights+0x258>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	4b40      	ldr	r3, [pc, #256]	; (800a8cc <phase_1_configure_weights+0x29c>)
 800a7ca:	4413      	add	r3, r2
 800a7cc:	4a3d      	ldr	r2, [pc, #244]	; (800a8c4 <phase_1_configure_weights+0x294>)
 800a7ce:	60d3      	str	r3, [r2, #12]
    
    dense_19_bias_array.format |= AI_FMT_FLAG_CONST;
 800a7d0:	4b3f      	ldr	r3, [pc, #252]	; (800a8d0 <phase_1_configure_weights+0x2a0>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7d8:	4a3d      	ldr	r2, [pc, #244]	; (800a8d0 <phase_1_configure_weights+0x2a0>)
 800a7da:	6013      	str	r3, [r2, #0]
    dense_19_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800a7dc:	4b2a      	ldr	r3, [pc, #168]	; (800a888 <phase_1_configure_weights+0x258>)
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	4b3c      	ldr	r3, [pc, #240]	; (800a8d4 <phase_1_configure_weights+0x2a4>)
 800a7e2:	4413      	add	r3, r2
 800a7e4:	4a3a      	ldr	r2, [pc, #232]	; (800a8d0 <phase_1_configure_weights+0x2a0>)
 800a7e6:	6093      	str	r3, [r2, #8]
    dense_19_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1348096);
 800a7e8:	4b27      	ldr	r3, [pc, #156]	; (800a888 <phase_1_configure_weights+0x258>)
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	4b39      	ldr	r3, [pc, #228]	; (800a8d4 <phase_1_configure_weights+0x2a4>)
 800a7ee:	4413      	add	r3, r2
 800a7f0:	4a37      	ldr	r2, [pc, #220]	; (800a8d0 <phase_1_configure_weights+0x2a0>)
 800a7f2:	60d3      	str	r3, [r2, #12]
    
    dense_20_weights_array.format |= AI_FMT_FLAG_CONST;
 800a7f4:	4b38      	ldr	r3, [pc, #224]	; (800a8d8 <phase_1_configure_weights+0x2a8>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7fc:	4a36      	ldr	r2, [pc, #216]	; (800a8d8 <phase_1_configure_weights+0x2a8>)
 800a7fe:	6013      	str	r3, [r2, #0]
    dense_20_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800a800:	4b21      	ldr	r3, [pc, #132]	; (800a888 <phase_1_configure_weights+0x258>)
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	4b35      	ldr	r3, [pc, #212]	; (800a8dc <phase_1_configure_weights+0x2ac>)
 800a806:	4413      	add	r3, r2
 800a808:	4a33      	ldr	r2, [pc, #204]	; (800a8d8 <phase_1_configure_weights+0x2a8>)
 800a80a:	6093      	str	r3, [r2, #8]
    dense_20_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1349120);
 800a80c:	4b1e      	ldr	r3, [pc, #120]	; (800a888 <phase_1_configure_weights+0x258>)
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	4b32      	ldr	r3, [pc, #200]	; (800a8dc <phase_1_configure_weights+0x2ac>)
 800a812:	4413      	add	r3, r2
 800a814:	4a30      	ldr	r2, [pc, #192]	; (800a8d8 <phase_1_configure_weights+0x2a8>)
 800a816:	60d3      	str	r3, [r2, #12]
    
    dense_20_bias_array.format |= AI_FMT_FLAG_CONST;
 800a818:	4b31      	ldr	r3, [pc, #196]	; (800a8e0 <phase_1_configure_weights+0x2b0>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a820:	4a2f      	ldr	r2, [pc, #188]	; (800a8e0 <phase_1_configure_weights+0x2b0>)
 800a822:	6013      	str	r3, [r2, #0]
    dense_20_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800a824:	4b18      	ldr	r3, [pc, #96]	; (800a888 <phase_1_configure_weights+0x258>)
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	4b2e      	ldr	r3, [pc, #184]	; (800a8e4 <phase_1_configure_weights+0x2b4>)
 800a82a:	4413      	add	r3, r2
 800a82c:	4a2c      	ldr	r2, [pc, #176]	; (800a8e0 <phase_1_configure_weights+0x2b0>)
 800a82e:	6093      	str	r3, [r2, #8]
    dense_20_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359360);
 800a830:	4b15      	ldr	r3, [pc, #84]	; (800a888 <phase_1_configure_weights+0x258>)
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	4b2b      	ldr	r3, [pc, #172]	; (800a8e4 <phase_1_configure_weights+0x2b4>)
 800a836:	4413      	add	r3, r2
 800a838:	4a29      	ldr	r2, [pc, #164]	; (800a8e0 <phase_1_configure_weights+0x2b0>)
 800a83a:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800a83c:	4b2a      	ldr	r3, [pc, #168]	; (800a8e8 <phase_1_configure_weights+0x2b8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a844:	4a28      	ldr	r2, [pc, #160]	; (800a8e8 <phase_1_configure_weights+0x2b8>)
 800a846:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800a848:	4b0f      	ldr	r3, [pc, #60]	; (800a888 <phase_1_configure_weights+0x258>)
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	4b27      	ldr	r3, [pc, #156]	; (800a8ec <phase_1_configure_weights+0x2bc>)
 800a84e:	4413      	add	r3, r2
 800a850:	4a25      	ldr	r2, [pc, #148]	; (800a8e8 <phase_1_configure_weights+0x2b8>)
 800a852:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1359400);
 800a854:	4b0c      	ldr	r3, [pc, #48]	; (800a888 <phase_1_configure_weights+0x258>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	4b24      	ldr	r3, [pc, #144]	; (800a8ec <phase_1_configure_weights+0x2bc>)
 800a85a:	4413      	add	r3, r2
 800a85c:	4a22      	ldr	r2, [pc, #136]	; (800a8e8 <phase_1_configure_weights+0x2b8>)
 800a85e:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800a860:	4b23      	ldr	r3, [pc, #140]	; (800a8f0 <phase_1_configure_weights+0x2c0>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a868:	4a21      	ldr	r2, [pc, #132]	; (800a8f0 <phase_1_configure_weights+0x2c0>)
 800a86a:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800a86c:	4b06      	ldr	r3, [pc, #24]	; (800a888 <phase_1_configure_weights+0x258>)
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	4b20      	ldr	r3, [pc, #128]	; (800a8f4 <phase_1_configure_weights+0x2c4>)
 800a872:	4413      	add	r3, r2
 800a874:	4a1e      	ldr	r2, [pc, #120]	; (800a8f0 <phase_1_configure_weights+0x2c0>)
 800a876:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360552);
 800a878:	4b03      	ldr	r3, [pc, #12]	; (800a888 <phase_1_configure_weights+0x258>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	4b1d      	ldr	r3, [pc, #116]	; (800a8f4 <phase_1_configure_weights+0x2c4>)
 800a87e:	4413      	add	r3, r2
 800a880:	4a1b      	ldr	r2, [pc, #108]	; (800a8f0 <phase_1_configure_weights+0x2c0>)
 800a882:	60d3      	str	r3, [r2, #12]
 800a884:	e038      	b.n	800a8f8 <phase_1_configure_weights+0x2c8>
 800a886:	bf00      	nop
 800a888:	20001e30 	.word	0x20001e30
 800a88c:	2000000c 	.word	0x2000000c
 800a890:	2000001c 	.word	0x2000001c
 800a894:	2000002c 	.word	0x2000002c
 800a898:	2000003c 	.word	0x2000003c
 800a89c:	2000004c 	.word	0x2000004c
 800a8a0:	2000005c 	.word	0x2000005c
 800a8a4:	00048400 	.word	0x00048400
 800a8a8:	2000006c 	.word	0x2000006c
 800a8ac:	00048600 	.word	0x00048600
 800a8b0:	2000007c 	.word	0x2000007c
 800a8b4:	2000008c 	.word	0x2000008c
 800a8b8:	00048a00 	.word	0x00048a00
 800a8bc:	2000009c 	.word	0x2000009c
 800a8c0:	00048c00 	.word	0x00048c00
 800a8c4:	200000ac 	.word	0x200000ac
 800a8c8:	00049200 	.word	0x00049200
 800a8cc:	00048e00 	.word	0x00048e00
 800a8d0:	200000bc 	.word	0x200000bc
 800a8d4:	00149200 	.word	0x00149200
 800a8d8:	200000cc 	.word	0x200000cc
 800a8dc:	00149600 	.word	0x00149600
 800a8e0:	200000fc 	.word	0x200000fc
 800a8e4:	0014be00 	.word	0x0014be00
 800a8e8:	200001fc 	.word	0x200001fc
 800a8ec:	0014be28 	.word	0x0014be28
 800a8f0:	2000020c 	.word	0x2000020c
 800a8f4:	0014c2a8 	.word	0x0014c2a8
    
    eltwise_2_scale_array.format |= AI_FMT_FLAG_CONST;
 800a8f8:	4b3b      	ldr	r3, [pc, #236]	; (800a9e8 <phase_1_configure_weights+0x3b8>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a900:	4a39      	ldr	r2, [pc, #228]	; (800a9e8 <phase_1_configure_weights+0x3b8>)
 800a902:	6013      	str	r3, [r2, #0]
    eltwise_2_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800a904:	4b39      	ldr	r3, [pc, #228]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	4b39      	ldr	r3, [pc, #228]	; (800a9f0 <phase_1_configure_weights+0x3c0>)
 800a90a:	4413      	add	r3, r2
 800a90c:	4a36      	ldr	r2, [pc, #216]	; (800a9e8 <phase_1_configure_weights+0x3b8>)
 800a90e:	6093      	str	r3, [r2, #8]
    eltwise_2_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360680);
 800a910:	4b36      	ldr	r3, [pc, #216]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	4b36      	ldr	r3, [pc, #216]	; (800a9f0 <phase_1_configure_weights+0x3c0>)
 800a916:	4413      	add	r3, r2
 800a918:	4a33      	ldr	r2, [pc, #204]	; (800a9e8 <phase_1_configure_weights+0x3b8>)
 800a91a:	60d3      	str	r3, [r2, #12]
    
    eltwise_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800a91c:	4b35      	ldr	r3, [pc, #212]	; (800a9f4 <phase_1_configure_weights+0x3c4>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a924:	4a33      	ldr	r2, [pc, #204]	; (800a9f4 <phase_1_configure_weights+0x3c4>)
 800a926:	6013      	str	r3, [r2, #0]
    eltwise_2_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800a928:	4b30      	ldr	r3, [pc, #192]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	4b32      	ldr	r3, [pc, #200]	; (800a9f8 <phase_1_configure_weights+0x3c8>)
 800a92e:	4413      	add	r3, r2
 800a930:	4a30      	ldr	r2, [pc, #192]	; (800a9f4 <phase_1_configure_weights+0x3c4>)
 800a932:	6093      	str	r3, [r2, #8]
    eltwise_2_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360808);
 800a934:	4b2d      	ldr	r3, [pc, #180]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	4b2f      	ldr	r3, [pc, #188]	; (800a9f8 <phase_1_configure_weights+0x3c8>)
 800a93a:	4413      	add	r3, r2
 800a93c:	4a2d      	ldr	r2, [pc, #180]	; (800a9f4 <phase_1_configure_weights+0x3c4>)
 800a93e:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_scale_array.format |= AI_FMT_FLAG_CONST;
 800a940:	4b2e      	ldr	r3, [pc, #184]	; (800a9fc <phase_1_configure_weights+0x3cc>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a948:	4a2c      	ldr	r2, [pc, #176]	; (800a9fc <phase_1_configure_weights+0x3cc>)
 800a94a:	6013      	str	r3, [r2, #0]
    eltwise_5_scale_array.data = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800a94c:	4b27      	ldr	r3, [pc, #156]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	4b2b      	ldr	r3, [pc, #172]	; (800aa00 <phase_1_configure_weights+0x3d0>)
 800a952:	4413      	add	r3, r2
 800a954:	4a29      	ldr	r2, [pc, #164]	; (800a9fc <phase_1_configure_weights+0x3cc>)
 800a956:	6093      	str	r3, [r2, #8]
    eltwise_5_scale_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1360936);
 800a958:	4b24      	ldr	r3, [pc, #144]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	4b28      	ldr	r3, [pc, #160]	; (800aa00 <phase_1_configure_weights+0x3d0>)
 800a95e:	4413      	add	r3, r2
 800a960:	4a26      	ldr	r2, [pc, #152]	; (800a9fc <phase_1_configure_weights+0x3cc>)
 800a962:	60d3      	str	r3, [r2, #12]
    
    eltwise_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800a964:	4b27      	ldr	r3, [pc, #156]	; (800aa04 <phase_1_configure_weights+0x3d4>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a96c:	4a25      	ldr	r2, [pc, #148]	; (800aa04 <phase_1_configure_weights+0x3d4>)
 800a96e:	6013      	str	r3, [r2, #0]
    eltwise_5_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800a970:	4b1e      	ldr	r3, [pc, #120]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	4b24      	ldr	r3, [pc, #144]	; (800aa08 <phase_1_configure_weights+0x3d8>)
 800a976:	4413      	add	r3, r2
 800a978:	4a22      	ldr	r2, [pc, #136]	; (800aa04 <phase_1_configure_weights+0x3d4>)
 800a97a:	6093      	str	r3, [r2, #8]
    eltwise_5_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361064);
 800a97c:	4b1b      	ldr	r3, [pc, #108]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	4b21      	ldr	r3, [pc, #132]	; (800aa08 <phase_1_configure_weights+0x3d8>)
 800a982:	4413      	add	r3, r2
 800a984:	4a1f      	ldr	r2, [pc, #124]	; (800aa04 <phase_1_configure_weights+0x3d4>)
 800a986:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800a988:	4b20      	ldr	r3, [pc, #128]	; (800aa0c <phase_1_configure_weights+0x3dc>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a990:	4a1e      	ldr	r2, [pc, #120]	; (800aa0c <phase_1_configure_weights+0x3dc>)
 800a992:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800a994:	4b15      	ldr	r3, [pc, #84]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	4b1d      	ldr	r3, [pc, #116]	; (800aa10 <phase_1_configure_weights+0x3e0>)
 800a99a:	4413      	add	r3, r2
 800a99c:	4a1b      	ldr	r2, [pc, #108]	; (800aa0c <phase_1_configure_weights+0x3dc>)
 800a99e:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1361192);
 800a9a0:	4b12      	ldr	r3, [pc, #72]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a9a2:	681a      	ldr	r2, [r3, #0]
 800a9a4:	4b1a      	ldr	r3, [pc, #104]	; (800aa10 <phase_1_configure_weights+0x3e0>)
 800a9a6:	4413      	add	r3, r2
 800a9a8:	4a18      	ldr	r2, [pc, #96]	; (800aa0c <phase_1_configure_weights+0x3dc>)
 800a9aa:	60d3      	str	r3, [r2, #12]
    
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800a9ac:	4b19      	ldr	r3, [pc, #100]	; (800aa14 <phase_1_configure_weights+0x3e4>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9b4:	4a17      	ldr	r2, [pc, #92]	; (800aa14 <phase_1_configure_weights+0x3e4>)
 800a9b6:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800a9b8:	4b0c      	ldr	r3, [pc, #48]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	4b16      	ldr	r3, [pc, #88]	; (800aa18 <phase_1_configure_weights+0x3e8>)
 800a9be:	4413      	add	r3, r2
 800a9c0:	4a14      	ldr	r2, [pc, #80]	; (800aa14 <phase_1_configure_weights+0x3e4>)
 800a9c2:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(g_phase_1_weights_map[0] + 1434920);
 800a9c4:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <phase_1_configure_weights+0x3bc>)
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	4b13      	ldr	r3, [pc, #76]	; (800aa18 <phase_1_configure_weights+0x3e8>)
 800a9ca:	4413      	add	r3, r2
 800a9cc:	4a11      	ldr	r2, [pc, #68]	; (800aa14 <phase_1_configure_weights+0x3e4>)
 800a9ce:	60d3      	str	r3, [r2, #12]
    
    return true;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e005      	b.n	800a9e0 <phase_1_configure_weights+0x3b0>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800a9d4:	2212      	movs	r2, #18
 800a9d6:	2130      	movs	r1, #48	; 0x30
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 fd67 	bl	800b4ac <ai_platform_network_set_error>
  return false;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}
 800a9e8:	2000021c 	.word	0x2000021c
 800a9ec:	20001e30 	.word	0x20001e30
 800a9f0:	0014c328 	.word	0x0014c328
 800a9f4:	2000022c 	.word	0x2000022c
 800a9f8:	0014c3a8 	.word	0x0014c3a8
 800a9fc:	2000023c 	.word	0x2000023c
 800aa00:	0014c428 	.word	0x0014c428
 800aa04:	2000024c 	.word	0x2000024c
 800aa08:	0014c4a8 	.word	0x0014c4a8
 800aa0c:	2000025c 	.word	0x2000025c
 800aa10:	0014c528 	.word	0x0014c528
 800aa14:	2000026c 	.word	0x2000026c
 800aa18:	0015e528 	.word	0x0015e528

0800aa1c <ai_phase_1_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_phase_1_get_error(ai_handle network)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fc35 	bl	800b294 <ai_platform_network_get_error>
 800aa2a:	4603      	mov	r3, r0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <ai_phase_1_create>:

AI_API_ENTRY
ai_error ai_phase_1_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af02      	add	r7, sp, #8
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800aa3e:	2300      	movs	r3, #0
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	2305      	movs	r3, #5
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	2301      	movs	r3, #1
 800aa48:	4a04      	ldr	r2, [pc, #16]	; (800aa5c <ai_phase_1_create+0x28>)
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f001 f847 	bl	800bae0 <ai_platform_network_create>
 800aa52:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	20001308 	.word	0x20001308

0800aa60 <ai_phase_1_inputs_get>:
    return err;
}

AI_API_ENTRY
ai_buffer* ai_phase_1_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d104      	bne.n	800aa7a <ai_phase_1_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800aa70:	4b06      	ldr	r3, [pc, #24]	; (800aa8c <ai_phase_1_inputs_get+0x2c>)
 800aa72:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a06      	ldr	r2, [pc, #24]	; (800aa90 <ai_phase_1_inputs_get+0x30>)
 800aa78:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fd1b 	bl	800b4b8 <ai_platform_inputs_get>
 800aa82:	4603      	mov	r3, r0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	20001308 	.word	0x20001308
 800aa90:	a1c00100 	.word	0xa1c00100

0800aa94 <ai_phase_1_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_phase_1_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d104      	bne.n	800aaae <ai_phase_1_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800aaa4:	4b06      	ldr	r3, [pc, #24]	; (800aac0 <ai_phase_1_outputs_get+0x2c>)
 800aaa6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a06      	ldr	r2, [pc, #24]	; (800aac4 <ai_phase_1_outputs_get+0x30>)
 800aaac:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fe8d 	bl	800b7d0 <ai_platform_outputs_get>
 800aab6:	4603      	mov	r3, r0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20001308 	.word	0x20001308
 800aac4:	a1c00100 	.word	0xa1c00100

0800aac8 <ai_phase_1_init>:
}

AI_API_ENTRY
ai_bool ai_phase_1_init(
  ai_handle network, const ai_network_params* params)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800aad2:	6839      	ldr	r1, [r7, #0]
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f001 f9dd 	bl	800be94 <ai_platform_network_init>
 800aada:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d101      	bne.n	800aae6 <ai_phase_1_init+0x1e>
 800aae2:	2300      	movs	r3, #0
 800aae4:	e028      	b.n	800ab38 <ai_phase_1_init+0x70>

  ai_bool ok = true;
 800aae6:	2301      	movs	r3, #1
 800aae8:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_weights(net_ctx, params);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f7ff fd9f 	bl	800a630 <phase_1_configure_weights>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	7afb      	ldrb	r3, [r7, #11]
 800aaf8:	4013      	ands	r3, r2
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bf14      	ite	ne
 800aafe:	2301      	movne	r3, #1
 800ab00:	2300      	moveq	r3, #0
 800ab02:	72fb      	strb	r3, [r7, #11]
  ok &= phase_1_configure_activations(net_ctx, params);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f7ff fca8 	bl	800a45c <phase_1_configure_activations>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	461a      	mov	r2, r3
 800ab10:	7afb      	ldrb	r3, [r7, #11]
 800ab12:	4013      	ands	r3, r2
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bf14      	ite	ne
 800ab18:	2301      	movne	r3, #1
 800ab1a:	2300      	moveq	r3, #0
 800ab1c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f001 fb54 	bl	800c1cc <ai_platform_network_post_init>
 800ab24:	4603      	mov	r3, r0
 800ab26:	461a      	mov	r2, r3
 800ab28:	7afb      	ldrb	r3, [r7, #11]
 800ab2a:	4013      	ands	r3, r2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	bf14      	ite	ne
 800ab30:	2301      	movne	r3, #1
 800ab32:	2300      	moveq	r3, #0
 800ab34:	72fb      	strb	r3, [r7, #11]

  return ok;
 800ab36:	7afb      	ldrb	r3, [r7, #11]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <ai_phase_1_run>:


AI_API_ENTRY
ai_i32 ai_phase_1_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	68b9      	ldr	r1, [r7, #8]
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f001 fc65 	bl	800c420 <ai_platform_network_process>
 800ab56:	4603      	mov	r3, r0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <ai_phase_1_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_activations_buffer_get(const ai_handle ptr)
{
 800ab60:	b4b0      	push	{r4, r5, r7}
 800ab62:	b08f      	sub	sp, #60	; 0x3c
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800ab6a:	4b15      	ldr	r3, [pc, #84]	; (800abc0 <ai_phase_1_data_activations_buffer_get+0x60>)
 800ab6c:	61fb      	str	r3, [r7, #28]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	623b      	str	r3, [r7, #32]
 800ab72:	2300      	movs	r3, #0
 800ab74:	627b      	str	r3, [r7, #36]	; 0x24
 800ab76:	2300      	movs	r3, #0
 800ab78:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab7a:	4b12      	ldr	r3, [pc, #72]	; (800abc4 <ai_phase_1_data_activations_buffer_get+0x64>)
 800ab7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab7e:	2301      	movs	r3, #1
 800ab80:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	2204      	movs	r2, #4
 800ab88:	f362 231f 	bfi	r3, r2, #8, #24
 800ab8c:	633b      	str	r3, [r7, #48]	; 0x30
 800ab8e:	4b0e      	ldr	r3, [pc, #56]	; (800abc8 <ai_phase_1_data_activations_buffer_get+0x68>)
 800ab90:	f107 040c 	add.w	r4, r7, #12
 800ab94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ab96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ab9a:	f107 030c 	add.w	r3, r7, #12
 800ab9e:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_ACTIVATIONS_SIZE, 1, AI_PHASE_1_DATA_ACTIVATIONS_COUNT),
    AI_PHASE_1_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	461d      	mov	r5, r3
 800aba4:	f107 041c 	add.w	r4, r7, #28
 800aba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800abac:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800abb0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	373c      	adds	r7, #60	; 0x3c
 800abb8:	46bd      	mov	sp, r7
 800abba:	bcb0      	pop	{r4, r5, r7}
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	00040440 	.word	0x00040440
 800abc4:	00043e80 	.word	0x00043e80
 800abc8:	0800f8b4 	.word	0x0800f8b4

0800abcc <ai_phase_1_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_phase_1_data_weights_buffer_get(const ai_handle ptr)
{
 800abcc:	b4b0      	push	{r4, r5, r7}
 800abce:	b08f      	sub	sp, #60	; 0x3c
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 800abd6:	4b15      	ldr	r3, [pc, #84]	; (800ac2c <ai_phase_1_data_weights_buffer_get+0x60>)
 800abd8:	61fb      	str	r3, [r7, #28]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	623b      	str	r3, [r7, #32]
 800abde:	2300      	movs	r3, #0
 800abe0:	627b      	str	r3, [r7, #36]	; 0x24
 800abe2:	2300      	movs	r3, #0
 800abe4:	62bb      	str	r3, [r7, #40]	; 0x28
 800abe6:	4b12      	ldr	r3, [pc, #72]	; (800ac30 <ai_phase_1_data_weights_buffer_get+0x64>)
 800abe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abea:	2301      	movs	r3, #1
 800abec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800abf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf2:	2204      	movs	r2, #4
 800abf4:	f362 231f 	bfi	r3, r2, #8, #24
 800abf8:	633b      	str	r3, [r7, #48]	; 0x30
 800abfa:	4b0e      	ldr	r3, [pc, #56]	; (800ac34 <ai_phase_1_data_weights_buffer_get+0x68>)
 800abfc:	f107 040c 	add.w	r4, r7, #12
 800ac00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ac02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ac06:	f107 030c 	add.w	r3, r7, #12
 800ac0a:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_PHASE_1_DATA_WEIGHTS_SIZE, 1, AI_PHASE_1_DATA_WEIGHTS_COUNT),
    AI_PHASE_1_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	461d      	mov	r5, r3
 800ac10:	f107 041c 	add.w	r4, r7, #28
 800ac14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac18:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800ac1c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	373c      	adds	r7, #60	; 0x3c
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bcb0      	pop	{r4, r5, r7}
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	40040440 	.word	0x40040440
 800ac30:	0015e628 	.word	0x0015e628
 800ac34:	0800f8c4 	.word	0x0800f8c4

0800ac38 <ai_phase_1_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_phase_1_data_weights_get(void)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_phase_1_weights_table);
 800ac3c:	4b02      	ldr	r3, [pc, #8]	; (800ac48 <ai_phase_1_data_weights_get+0x10>)

}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr
 800ac48:	200013ac 	.word	0x200013ac

0800ac4c <modelSetup>:

char word_list[WORD_LIST_SIZE][10];


int modelSetup()
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	af00      	add	r7, sp, #0
	sprintf((char*)&word_list[YES]   ,"yes");
 800ac50:	4915      	ldr	r1, [pc, #84]	; (800aca8 <modelSetup+0x5c>)
 800ac52:	4816      	ldr	r0, [pc, #88]	; (800acac <modelSetup+0x60>)
 800ac54:	f004 f8ea 	bl	800ee2c <siprintf>
	sprintf((char*)&word_list[NO]    ,"no");
 800ac58:	4915      	ldr	r1, [pc, #84]	; (800acb0 <modelSetup+0x64>)
 800ac5a:	4816      	ldr	r0, [pc, #88]	; (800acb4 <modelSetup+0x68>)
 800ac5c:	f004 f8e6 	bl	800ee2c <siprintf>
	sprintf((char*)&word_list[UP]    ,"up");
 800ac60:	4915      	ldr	r1, [pc, #84]	; (800acb8 <modelSetup+0x6c>)
 800ac62:	4816      	ldr	r0, [pc, #88]	; (800acbc <modelSetup+0x70>)
 800ac64:	f004 f8e2 	bl	800ee2c <siprintf>
	sprintf((char*)&word_list[DOWN]  ,"down");
 800ac68:	4915      	ldr	r1, [pc, #84]	; (800acc0 <modelSetup+0x74>)
 800ac6a:	4816      	ldr	r0, [pc, #88]	; (800acc4 <modelSetup+0x78>)
 800ac6c:	f004 f8de 	bl	800ee2c <siprintf>
	sprintf((char*)&word_list[RIGHT] ,"right");
 800ac70:	4915      	ldr	r1, [pc, #84]	; (800acc8 <modelSetup+0x7c>)
 800ac72:	4816      	ldr	r0, [pc, #88]	; (800accc <modelSetup+0x80>)
 800ac74:	f004 f8da 	bl	800ee2c <siprintf>
	sprintf((char*)&word_list[LEFT]  ,"left");
 800ac78:	4915      	ldr	r1, [pc, #84]	; (800acd0 <modelSetup+0x84>)
 800ac7a:	4816      	ldr	r0, [pc, #88]	; (800acd4 <modelSetup+0x88>)
 800ac7c:	f004 f8d6 	bl	800ee2c <siprintf>
	sprintf((char*)&word_list[STOP]  ,"stop");
 800ac80:	4915      	ldr	r1, [pc, #84]	; (800acd8 <modelSetup+0x8c>)
 800ac82:	4816      	ldr	r0, [pc, #88]	; (800acdc <modelSetup+0x90>)
 800ac84:	f004 f8d2 	bl	800ee2c <siprintf>
	sprintf((char*)&word_list[GO]    ,"go");
 800ac88:	4915      	ldr	r1, [pc, #84]	; (800ace0 <modelSetup+0x94>)
 800ac8a:	4816      	ldr	r0, [pc, #88]	; (800ace4 <modelSetup+0x98>)
 800ac8c:	f004 f8ce 	bl	800ee2c <siprintf>
	sprintf((char*)&word_list[ON]    ,"on");
 800ac90:	4915      	ldr	r1, [pc, #84]	; (800ace8 <modelSetup+0x9c>)
 800ac92:	4816      	ldr	r0, [pc, #88]	; (800acec <modelSetup+0xa0>)
 800ac94:	f004 f8ca 	bl	800ee2c <siprintf>
	sprintf((char*)&word_list[OFF]   ,"off");
 800ac98:	4915      	ldr	r1, [pc, #84]	; (800acf0 <modelSetup+0xa4>)
 800ac9a:	4816      	ldr	r0, [pc, #88]	; (800acf4 <modelSetup+0xa8>)
 800ac9c:	f004 f8c6 	bl	800ee2c <siprintf>


	  return AI_OK;
 800aca0:	2300      	movs	r3, #0


}
 800aca2:	4618      	mov	r0, r3
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	0800f8e4 	.word	0x0800f8e4
 800acac:	20001f20 	.word	0x20001f20
 800acb0:	0800f8e8 	.word	0x0800f8e8
 800acb4:	20001f2a 	.word	0x20001f2a
 800acb8:	0800f8ec 	.word	0x0800f8ec
 800acbc:	20001f34 	.word	0x20001f34
 800acc0:	0800f8f0 	.word	0x0800f8f0
 800acc4:	20001f3e 	.word	0x20001f3e
 800acc8:	0800f8f8 	.word	0x0800f8f8
 800accc:	20001f48 	.word	0x20001f48
 800acd0:	0800f900 	.word	0x0800f900
 800acd4:	20001f52 	.word	0x20001f52
 800acd8:	0800f908 	.word	0x0800f908
 800acdc:	20001f5c 	.word	0x20001f5c
 800ace0:	0800f910 	.word	0x0800f910
 800ace4:	20001f66 	.word	0x20001f66
 800ace8:	0800f914 	.word	0x0800f914
 800acec:	20001f70 	.word	0x20001f70
 800acf0:	0800f918 	.word	0x0800f918
 800acf4:	20001f7a 	.word	0x20001f7a

0800acf8 <modelRun>:

ModelOutput modelRun(float* input)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	f5ad 2d97 	sub.w	sp, sp, #309248	; 0x4b800
 800acfe:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800ad08:	f6a3 5334 	subw	r3, r3, #3380	; 0xd34
 800ad0c:	6018      	str	r0, [r3, #0]

	ai_error ai_err;
	  AI_ALIGNED(4) ai_u8 activations[AI_PHASE_1_DATA_ACTIVATIONS_SIZE];
	  // Set working memory and get weights/biases from model
	  ai_network_params ai_params = {
		AI_PHASE_1_DATA_WEIGHTS(ai_phase_1_data_weights_get()),
 800ad0e:	f7ff ff93 	bl	800ac38 <ai_phase_1_data_weights_get>
 800ad12:	4602      	mov	r2, r0
 800ad14:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800ad18:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 800ad1c:	4611      	mov	r1, r2
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff ff54 	bl	800abcc <ai_phase_1_data_weights_buffer_get>
		AI_PHASE_1_DATA_ACTIVATIONS(activations)
 800ad24:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800ad28:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 800ad2c:	f103 021c 	add.w	r2, r3, #28
 800ad30:	4b81      	ldr	r3, [pc, #516]	; (800af38 <modelRun+0x240>)
 800ad32:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800ad36:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800ad3a:	443b      	add	r3, r7
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	4610      	mov	r0, r2
 800ad40:	f7ff ff0e 	bl	800ab60 <ai_phase_1_data_activations_buffer_get>
	  };

	  // Create instance of neural network
	  ai_err = ai_phase_1_create(&phase_1, AI_PHASE_1_DATA_CONFIG);
 800ad44:	4b7d      	ldr	r3, [pc, #500]	; (800af3c <modelRun+0x244>)
 800ad46:	443b      	add	r3, r7
 800ad48:	2100      	movs	r1, #0
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f7ff fe72 	bl	800aa34 <ai_phase_1_create>
 800ad50:	4602      	mov	r2, r0
 800ad52:	4b7b      	ldr	r3, [pc, #492]	; (800af40 <modelRun+0x248>)
 800ad54:	443b      	add	r3, r7
 800ad56:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800ad5a:	601a      	str	r2, [r3, #0]
	  if (ai_err.type != AI_ERROR_NONE)
 800ad5c:	4b78      	ldr	r3, [pc, #480]	; (800af40 <modelRun+0x248>)
 800ad5e:	443b      	add	r3, r7
 800ad60:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d001      	beq.n	800ad6e <modelRun+0x76>
	  {
		return 2;
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	e0dd      	b.n	800af2a <modelRun+0x232>
	  }

		// Initialize neural network
		if (!ai_phase_1_init(phase_1, &ai_params))
 800ad6e:	4b73      	ldr	r3, [pc, #460]	; (800af3c <modelRun+0x244>)
 800ad70:	443b      	add	r3, r7
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	4b73      	ldr	r3, [pc, #460]	; (800af44 <modelRun+0x24c>)
 800ad76:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800ad7a:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800ad7e:	443b      	add	r3, r7
 800ad80:	4619      	mov	r1, r3
 800ad82:	4610      	mov	r0, r2
 800ad84:	f7ff fea0 	bl	800aac8 <ai_phase_1_init>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	f083 0301 	eor.w	r3, r3, #1
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <modelRun+0xa0>
		{
		  return 1;
 800ad94:	2301      	movs	r3, #1
 800ad96:	e0c8      	b.n	800af2a <modelRun+0x232>
		}
		// Initialize wrapper structs that hold pointers to data and info about the
		  // data (tensor height, width, channels)
		  ai_input  = ai_phase_1_inputs_get(phase_1, 0);
 800ad98:	4b68      	ldr	r3, [pc, #416]	; (800af3c <modelRun+0x244>)
 800ad9a:	443b      	add	r3, r7
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2100      	movs	r1, #0
 800ada0:	4618      	mov	r0, r3
 800ada2:	f7ff fe5d 	bl	800aa60 <ai_phase_1_inputs_get>
 800ada6:	4b68      	ldr	r3, [pc, #416]	; (800af48 <modelRun+0x250>)
 800ada8:	443b      	add	r3, r7
 800adaa:	6018      	str	r0, [r3, #0]

		  ai_output = AI_PHASE_1_OUT;
 800adac:	2100      	movs	r1, #0
 800adae:	2000      	movs	r0, #0
 800adb0:	f7ff fe70 	bl	800aa94 <ai_phase_1_outputs_get>
 800adb4:	4b65      	ldr	r3, [pc, #404]	; (800af4c <modelRun+0x254>)
 800adb6:	443b      	add	r3, r7
 800adb8:	6018      	str	r0, [r3, #0]


		  // Set pointers wrapper structs to our data buffers
		  //ai_input[0].n_batches = 1;
		  ai_input[0].data = AI_HANDLE_PTR(in_data);
 800adba:	4b63      	ldr	r3, [pc, #396]	; (800af48 <modelRun+0x250>)
 800adbc:	443b      	add	r3, r7
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	4b63      	ldr	r3, [pc, #396]	; (800af50 <modelRun+0x258>)
 800adc2:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800adc6:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800adca:	443b      	add	r3, r7
 800adcc:	6053      	str	r3, [r2, #4]
		  //ai_output[0].n_batches = 1;
		  ai_output[0].data = AI_HANDLE_PTR(out_data);
 800adce:	4b5f      	ldr	r3, [pc, #380]	; (800af4c <modelRun+0x254>)
 800add0:	443b      	add	r3, r7
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	4b5f      	ldr	r3, [pc, #380]	; (800af54 <modelRun+0x25c>)
 800add6:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800adda:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800adde:	443b      	add	r3, r7
 800ade0:	6053      	str	r3, [r2, #4]
	float y_val[10];
	// Fill input buffer (use test value)
	for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800ade2:	2300      	movs	r3, #0
 800ade4:	4a5c      	ldr	r2, [pc, #368]	; (800af58 <modelRun+0x260>)
 800ade6:	443a      	add	r2, r7
 800ade8:	6013      	str	r3, [r2, #0]
 800adea:	e01d      	b.n	800ae28 <modelRun+0x130>
	{
		((ai_float *)in_data)[i] = (ai_float)input[i];
 800adec:	4b5a      	ldr	r3, [pc, #360]	; (800af58 <modelRun+0x260>)
 800adee:	443b      	add	r3, r7
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	f607 5238 	addw	r2, r7, #3384	; 0xd38
 800adf8:	f6a2 5234 	subw	r2, r2, #3380	; 0xd34
 800adfc:	6812      	ldr	r2, [r2, #0]
 800adfe:	441a      	add	r2, r3
 800ae00:	4b55      	ldr	r3, [pc, #340]	; (800af58 <modelRun+0x260>)
 800ae02:	443b      	add	r3, r7
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	0099      	lsls	r1, r3, #2
 800ae08:	4b51      	ldr	r3, [pc, #324]	; (800af50 <modelRun+0x258>)
 800ae0a:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800ae0e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800ae12:	443b      	add	r3, r7
 800ae14:	440b      	add	r3, r1
 800ae16:	6812      	ldr	r2, [r2, #0]
 800ae18:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < AI_PHASE_1_IN_1_SIZE; i++)
 800ae1a:	4b4f      	ldr	r3, [pc, #316]	; (800af58 <modelRun+0x260>)
 800ae1c:	443b      	add	r3, r7
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	3301      	adds	r3, #1
 800ae22:	4a4d      	ldr	r2, [pc, #308]	; (800af58 <modelRun+0x260>)
 800ae24:	443a      	add	r2, r7
 800ae26:	6013      	str	r3, [r2, #0]
 800ae28:	4b4b      	ldr	r3, [pc, #300]	; (800af58 <modelRun+0x260>)
 800ae2a:	443b      	add	r3, r7
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f5b3 5ffc 	cmp.w	r3, #8064	; 0x1f80
 800ae32:	d3db      	bcc.n	800adec <modelRun+0xf4>
	}


	// Perform inference
	nbatch = ai_phase_1_run(phase_1, &ai_input[0], &ai_output[0]);
 800ae34:	4b41      	ldr	r3, [pc, #260]	; (800af3c <modelRun+0x244>)
 800ae36:	443b      	add	r3, r7
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a44      	ldr	r2, [pc, #272]	; (800af4c <modelRun+0x254>)
 800ae3c:	443a      	add	r2, r7
 800ae3e:	6812      	ldr	r2, [r2, #0]
 800ae40:	4941      	ldr	r1, [pc, #260]	; (800af48 <modelRun+0x250>)
 800ae42:	4439      	add	r1, r7
 800ae44:	6809      	ldr	r1, [r1, #0]
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7ff fe7a 	bl	800ab40 <ai_phase_1_run>
 800ae4c:	4b43      	ldr	r3, [pc, #268]	; (800af5c <modelRun+0x264>)
 800ae4e:	443b      	add	r3, r7
 800ae50:	6018      	str	r0, [r3, #0]
	if (nbatch != 1) {
 800ae52:	4b42      	ldr	r3, [pc, #264]	; (800af5c <modelRun+0x264>)
 800ae54:	443b      	add	r3, r7
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d00b      	beq.n	800ae74 <modelRun+0x17c>
		ai_err =  ai_phase_1_get_error(phase_1);
 800ae5c:	4b37      	ldr	r3, [pc, #220]	; (800af3c <modelRun+0x244>)
 800ae5e:	443b      	add	r3, r7
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7ff fdda 	bl	800aa1c <ai_phase_1_get_error>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	4b35      	ldr	r3, [pc, #212]	; (800af40 <modelRun+0x248>)
 800ae6c:	443b      	add	r3, r7
 800ae6e:	f6a3 634c 	subw	r3, r3, #3660	; 0xe4c
 800ae72:	601a      	str	r2, [r3, #0]
	}
	float max = 0;
 800ae74:	f04f 0300 	mov.w	r3, #0
 800ae78:	4a39      	ldr	r2, [pc, #228]	; (800af60 <modelRun+0x268>)
 800ae7a:	443a      	add	r2, r7
 800ae7c:	6013      	str	r3, [r2, #0]
	int max_ind = 0;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4a38      	ldr	r2, [pc, #224]	; (800af64 <modelRun+0x26c>)
 800ae82:	443a      	add	r2, r7
 800ae84:	6013      	str	r3, [r2, #0]
	for (int i =0; i<10; i++)
 800ae86:	2300      	movs	r3, #0
 800ae88:	4a37      	ldr	r2, [pc, #220]	; (800af68 <modelRun+0x270>)
 800ae8a:	443a      	add	r2, r7
 800ae8c:	6013      	str	r3, [r2, #0]
 800ae8e:	e043      	b.n	800af18 <modelRun+0x220>
	{
		// Read output (predicted y) of neural network
		y_val[i] = ((float *)out_data)[i];
 800ae90:	4b35      	ldr	r3, [pc, #212]	; (800af68 <modelRun+0x270>)
 800ae92:	443b      	add	r3, r7
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	009a      	lsls	r2, r3, #2
 800ae98:	4b2e      	ldr	r3, [pc, #184]	; (800af54 <modelRun+0x25c>)
 800ae9a:	f503 2397 	add.w	r3, r3, #309248	; 0x4b800
 800ae9e:	f503 63a7 	add.w	r3, r3, #1336	; 0x538
 800aea2:	443b      	add	r3, r7
 800aea4:	4413      	add	r3, r2
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800aeac:	f6a3 512c 	subw	r1, r3, #3372	; 0xd2c
 800aeb0:	4b2d      	ldr	r3, [pc, #180]	; (800af68 <modelRun+0x270>)
 800aeb2:	443b      	add	r3, r7
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	009b      	lsls	r3, r3, #2
 800aeb8:	440b      	add	r3, r1
 800aeba:	601a      	str	r2, [r3, #0]
		if (y_val[i]>max)
 800aebc:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800aec0:	f6a3 522c 	subw	r2, r3, #3372	; 0xd2c
 800aec4:	4b28      	ldr	r3, [pc, #160]	; (800af68 <modelRun+0x270>)
 800aec6:	443b      	add	r3, r7
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	edd3 7a00 	vldr	s15, [r3]
 800aed2:	4b23      	ldr	r3, [pc, #140]	; (800af60 <modelRun+0x268>)
 800aed4:	443b      	add	r3, r7
 800aed6:	ed93 7a00 	vldr	s14, [r3]
 800aeda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800aede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aee2:	d512      	bpl.n	800af0a <modelRun+0x212>
		{
			max_ind = i;
 800aee4:	4b20      	ldr	r3, [pc, #128]	; (800af68 <modelRun+0x270>)
 800aee6:	443b      	add	r3, r7
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a1e      	ldr	r2, [pc, #120]	; (800af64 <modelRun+0x26c>)
 800aeec:	443a      	add	r2, r7
 800aeee:	6013      	str	r3, [r2, #0]
			max  = y_val[i];
 800aef0:	f607 5338 	addw	r3, r7, #3384	; 0xd38
 800aef4:	f6a3 522c 	subw	r2, r3, #3372	; 0xd2c
 800aef8:	4b1b      	ldr	r3, [pc, #108]	; (800af68 <modelRun+0x270>)
 800aefa:	443b      	add	r3, r7
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4413      	add	r3, r2
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a16      	ldr	r2, [pc, #88]	; (800af60 <modelRun+0x268>)
 800af06:	443a      	add	r2, r7
 800af08:	6013      	str	r3, [r2, #0]
	for (int i =0; i<10; i++)
 800af0a:	4b17      	ldr	r3, [pc, #92]	; (800af68 <modelRun+0x270>)
 800af0c:	443b      	add	r3, r7
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3301      	adds	r3, #1
 800af12:	4a15      	ldr	r2, [pc, #84]	; (800af68 <modelRun+0x270>)
 800af14:	443a      	add	r2, r7
 800af16:	6013      	str	r3, [r2, #0]
 800af18:	4b13      	ldr	r3, [pc, #76]	; (800af68 <modelRun+0x270>)
 800af1a:	443b      	add	r3, r7
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b09      	cmp	r3, #9
 800af20:	ddb6      	ble.n	800ae90 <modelRun+0x198>
		}
	}

	return max_ind;
 800af22:	4b10      	ldr	r3, [pc, #64]	; (800af64 <modelRun+0x26c>)
 800af24:	443b      	add	r3, r7
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	b2db      	uxtb	r3, r3

}
 800af2a:	4618      	mov	r0, r3
 800af2c:	f507 2797 	add.w	r7, r7, #309248	; 0x4b800
 800af30:	f507 67a7 	add.w	r7, r7, #1336	; 0x538
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	fffb4334 	.word	0xfffb4334
 800af3c:	0004bd18 	.word	0x0004bd18
 800af40:	00044d38 	.word	0x00044d38
 800af44:	fffb42fc 	.word	0xfffb42fc
 800af48:	0004bd24 	.word	0x0004bd24
 800af4c:	0004bd20 	.word	0x0004bd20
 800af50:	ffff81e0 	.word	0xffff81e0
 800af54:	ffff81b8 	.word	0xffff81b8
 800af58:	0004bd34 	.word	0x0004bd34
 800af5c:	0004bd1c 	.word	0x0004bd1c
 800af60:	0004bd30 	.word	0x0004bd30
 800af64:	0004bd2c 	.word	0x0004bd2c
 800af68:	0004bd28 	.word	0x0004bd28

0800af6c <SDInit>:


uint8_t rtext[_MAX_SS];/* File read buffer */

int SDInit()
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	af00      	add	r7, sp, #0
	if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800af70:	2200      	movs	r2, #0
 800af72:	4906      	ldr	r1, [pc, #24]	; (800af8c <SDInit+0x20>)
 800af74:	4806      	ldr	r0, [pc, #24]	; (800af90 <SDInit+0x24>)
 800af76:	f7fe fe29 	bl	8009bcc <f_mount>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d001      	beq.n	800af84 <SDInit+0x18>
	      {
	          Error_Handler();
 800af80:	f7f6 f91c 	bl	80011bc <Error_Handler>
	          if(val != FR_OK)
	          {
	        	  return -1;
	          }
	      }
	return 0;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	2000198c 	.word	0x2000198c
 800af90:	20001990 	.word	0x20001990

0800af94 <openFile>:
		  return -1;
	  }
	  return 0;
}
int openFile(char* file_name)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
	//Open file for writing (Create). sets the name given by the string
	  int var = f_open(&SDFile, file_name, FA_OPEN_EXISTING | FA_READ);
 800af9c:	2201      	movs	r2, #1
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	4807      	ldr	r0, [pc, #28]	; (800afc0 <openFile+0x2c>)
 800afa2:	f7fe fe59 	bl	8009c58 <f_open>
 800afa6:	4603      	mov	r3, r0
 800afa8:	60fb      	str	r3, [r7, #12]
	  if(var != FR_OK)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d002      	beq.n	800afb6 <openFile+0x22>
	  {
		  return -1;
 800afb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afb4:	e000      	b.n	800afb8 <openFile+0x24>
	  }
	  return 0;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	20001bc0 	.word	0x20001bc0

0800afc4 <readFile>:
	uint32_t byteswritten;
	f_write(&SDFile, text, size, (void *)&byteswritten);
	return byteswritten;
}
int readFile(char*buffer , int size)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
	uint32_t bytesread;
	int err;
	f_read(&SDFile, buffer, size, (void *)&bytesread);
 800afce:	683a      	ldr	r2, [r7, #0]
 800afd0:	f107 030c 	add.w	r3, r7, #12
 800afd4:	6879      	ldr	r1, [r7, #4]
 800afd6:	4804      	ldr	r0, [pc, #16]	; (800afe8 <readFile+0x24>)
 800afd8:	f7fe fffc 	bl	8009fd4 <f_read>
	return bytesread;
 800afdc:	68fb      	ldr	r3, [r7, #12]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
 800afe6:	bf00      	nop
 800afe8:	20001bc0 	.word	0x20001bc0

0800afec <SDclose>:
int SDclose()
{
 800afec:	b580      	push	{r7, lr}
 800afee:	af00      	add	r7, sp, #0
	f_close(&SDFile);
 800aff0:	4802      	ldr	r0, [pc, #8]	; (800affc <SDclose+0x10>)
 800aff2:	f7ff f9ac 	bl	800a34e <f_close>
	return 0;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20001bc0 	.word	0x20001bc0

0800b000 <HAL_GPIO_EXTI_Callback>:

#include "user_gpio.h"

extern click;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13) {
 800b00a:	88fb      	ldrh	r3, [r7, #6]
 800b00c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b010:	d103      	bne.n	800b01a <HAL_GPIO_EXTI_Callback+0x1a>
	  click = 1;
 800b012:	4b05      	ldr	r3, [pc, #20]	; (800b028 <HAL_GPIO_EXTI_Callback+0x28>)
 800b014:	2201      	movs	r2, #1
 800b016:	601a      	str	r2, [r3, #0]
  } else {
      __NOP();
  }
}
 800b018:	e000      	b.n	800b01c <HAL_GPIO_EXTI_Callback+0x1c>
      __NOP();
 800b01a:	bf00      	nop
}
 800b01c:	bf00      	nop
 800b01e:	370c      	adds	r7, #12
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr
 800b028:	20001684 	.word	0x20001684

0800b02c <ledsShowValue>:

void ledsShowValue(int value)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
	 HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, !((value)&0x1));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	bf0c      	ite	eq
 800b03e:	2301      	moveq	r3, #1
 800b040:	2300      	movne	r3, #0
 800b042:	b2db      	uxtb	r3, r3
 800b044:	461a      	mov	r2, r3
 800b046:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b04a:	4817      	ldr	r0, [pc, #92]	; (800b0a8 <ledsShowValue+0x7c>)
 800b04c:	f7f8 fa38 	bl	80034c0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, !((value>>1)&0x1));
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f003 0302 	and.w	r3, r3, #2
 800b056:	2b00      	cmp	r3, #0
 800b058:	bf0c      	ite	eq
 800b05a:	2301      	moveq	r3, #1
 800b05c:	2300      	movne	r3, #0
 800b05e:	b2db      	uxtb	r3, r3
 800b060:	461a      	mov	r2, r3
 800b062:	2101      	movs	r1, #1
 800b064:	4811      	ldr	r0, [pc, #68]	; (800b0ac <ledsShowValue+0x80>)
 800b066:	f7f8 fa2b 	bl	80034c0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, !((value>>2)&0x1));
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	f003 0304 	and.w	r3, r3, #4
 800b070:	2b00      	cmp	r3, #0
 800b072:	bf0c      	ite	eq
 800b074:	2301      	moveq	r3, #1
 800b076:	2300      	movne	r3, #0
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	461a      	mov	r2, r3
 800b07c:	2102      	movs	r1, #2
 800b07e:	480b      	ldr	r0, [pc, #44]	; (800b0ac <ledsShowValue+0x80>)
 800b080:	f7f8 fa1e 	bl	80034c0 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, !((value>>3)&0x1));
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f003 0308 	and.w	r3, r3, #8
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	bf0c      	ite	eq
 800b08e:	2301      	moveq	r3, #1
 800b090:	2300      	movne	r3, #0
 800b092:	b2db      	uxtb	r3, r3
 800b094:	461a      	mov	r2, r3
 800b096:	2108      	movs	r1, #8
 800b098:	4804      	ldr	r0, [pc, #16]	; (800b0ac <ledsShowValue+0x80>)
 800b09a:	f7f8 fa11 	bl	80034c0 <HAL_GPIO_WritePin>
}
 800b09e:	bf00      	nop
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	40022000 	.word	0x40022000
 800b0ac:	40022400 	.word	0x40022400

0800b0b0 <ai_buffer_get_size>:
 800b0b0:	b368      	cbz	r0, 800b10e <ai_buffer_get_size+0x5e>
 800b0b2:	4b17      	ldr	r3, [pc, #92]	; (800b110 <ai_buffer_get_size+0x60>)
 800b0b4:	4a17      	ldr	r2, [pc, #92]	; (800b114 <ai_buffer_get_size+0x64>)
 800b0b6:	b410      	push	{r4}
 800b0b8:	6804      	ldr	r4, [r0, #0]
 800b0ba:	4023      	ands	r3, r4
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d123      	bne.n	800b108 <ai_buffer_get_size+0x58>
 800b0c0:	b311      	cbz	r1, 800b108 <ai_buffer_get_size+0x58>
 800b0c2:	6984      	ldr	r4, [r0, #24]
 800b0c4:	6862      	ldr	r2, [r4, #4]
 800b0c6:	321f      	adds	r2, #31
 800b0c8:	f022 021f 	bic.w	r2, r2, #31
 800b0cc:	7d03      	ldrb	r3, [r0, #20]
 800b0ce:	6941      	ldr	r1, [r0, #20]
 800b0d0:	f1a3 0301 	sub.w	r3, r3, #1
 800b0d4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800b0d8:	fab3 f383 	clz	r3, r3
 800b0dc:	095b      	lsrs	r3, r3, #5
 800b0de:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 800b0e2:	da0c      	bge.n	800b0fe <ai_buffer_get_size+0x4e>
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	d103      	bne.n	800b0f0 <ai_buffer_get_size+0x40>
 800b0e8:	2802      	cmp	r0, #2
 800b0ea:	f04f 0302 	mov.w	r3, #2
 800b0ee:	d006      	beq.n	800b0fe <ai_buffer_get_size+0x4e>
 800b0f0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	4298      	cmp	r0, r3
 800b0f8:	fb01 f202 	mul.w	r2, r1, r2
 800b0fc:	d1f2      	bne.n	800b0e4 <ai_buffer_get_size+0x34>
 800b0fe:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 800b102:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b106:	4770      	bx	lr
 800b108:	6984      	ldr	r4, [r0, #24]
 800b10a:	6862      	ldr	r2, [r4, #4]
 800b10c:	e7de      	b.n	800b0cc <ai_buffer_get_size+0x1c>
 800b10e:	4770      	bx	lr
 800b110:	017fffff 	.word	0x017fffff
 800b114:	000400c0 	.word	0x000400c0

0800b118 <ai_buffer_array_sane>:
 800b118:	b138      	cbz	r0, 800b12a <ai_buffer_array_sane+0x12>
 800b11a:	6843      	ldr	r3, [r0, #4]
 800b11c:	b123      	cbz	r3, 800b128 <ai_buffer_array_sane+0x10>
 800b11e:	8840      	ldrh	r0, [r0, #2]
 800b120:	3800      	subs	r0, #0
 800b122:	bf18      	it	ne
 800b124:	2001      	movne	r0, #1
 800b126:	4770      	bx	lr
 800b128:	4618      	mov	r0, r3
 800b12a:	4770      	bx	lr

0800b12c <_ai_platform_acquire_crc>:
 800b12c:	2001      	movs	r0, #1
 800b12e:	4770      	bx	lr

0800b130 <_ai_platform_release_crc>:
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop

0800b134 <ai_platform_get_weights_map>:
 800b134:	2900      	cmp	r1, #0
 800b136:	bf18      	it	ne
 800b138:	2800      	cmpne	r0, #0
 800b13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b13c:	bf0c      	ite	eq
 800b13e:	2401      	moveq	r4, #1
 800b140:	2400      	movne	r4, #0
 800b142:	2a00      	cmp	r2, #0
 800b144:	bf08      	it	eq
 800b146:	f044 0401 	orreq.w	r4, r4, #1
 800b14a:	b114      	cbz	r4, 800b152 <ai_platform_get_weights_map+0x1e>
 800b14c:	2400      	movs	r4, #0
 800b14e:	4620      	mov	r0, r4
 800b150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b152:	4616      	mov	r6, r2
 800b154:	4b22      	ldr	r3, [pc, #136]	; (800b1e0 <ai_platform_get_weights_map+0xac>)
 800b156:	6812      	ldr	r2, [r2, #0]
 800b158:	4605      	mov	r5, r0
 800b15a:	460f      	mov	r7, r1
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d022      	beq.n	800b1a6 <ai_platform_get_weights_map+0x72>
 800b160:	6870      	ldr	r0, [r6, #4]
 800b162:	2800      	cmp	r0, #0
 800b164:	d0f2      	beq.n	800b14c <ai_platform_get_weights_map+0x18>
 800b166:	6806      	ldr	r6, [r0, #0]
 800b168:	429e      	cmp	r6, r3
 800b16a:	d006      	beq.n	800b17a <ai_platform_get_weights_map+0x46>
 800b16c:	f1a1 0401 	sub.w	r4, r1, #1
 800b170:	6028      	str	r0, [r5, #0]
 800b172:	fab4 f484 	clz	r4, r4
 800b176:	0964      	lsrs	r4, r4, #5
 800b178:	e7e9      	b.n	800b14e <ai_platform_get_weights_map+0x1a>
 800b17a:	3d04      	subs	r5, #4
 800b17c:	4602      	mov	r2, r0
 800b17e:	4621      	mov	r1, r4
 800b180:	e000      	b.n	800b184 <ai_platform_get_weights_map+0x50>
 800b182:	4619      	mov	r1, r3
 800b184:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800b188:	42b3      	cmp	r3, r6
 800b18a:	d025      	beq.n	800b1d8 <ai_platform_get_weights_map+0xa4>
 800b18c:	f845 3f04 	str.w	r3, [r5, #4]!
 800b190:	1c4b      	adds	r3, r1, #1
 800b192:	429f      	cmp	r7, r3
 800b194:	d8f5      	bhi.n	800b182 <ai_platform_get_weights_map+0x4e>
 800b196:	d1da      	bne.n	800b14e <ai_platform_get_weights_map+0x1a>
 800b198:	3102      	adds	r1, #2
 800b19a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800b19e:	42b3      	cmp	r3, r6
 800b1a0:	d1d5      	bne.n	800b14e <ai_platform_get_weights_map+0x1a>
 800b1a2:	2401      	movs	r4, #1
 800b1a4:	e7d3      	b.n	800b14e <ai_platform_get_weights_map+0x1a>
 800b1a6:	1d30      	adds	r0, r6, #4
 800b1a8:	f7ff ffb6 	bl	800b118 <ai_buffer_array_sane>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d0cd      	beq.n	800b14c <ai_platform_get_weights_map+0x18>
 800b1b0:	88f3      	ldrh	r3, [r6, #6]
 800b1b2:	429f      	cmp	r7, r3
 800b1b4:	d1ca      	bne.n	800b14c <ai_platform_get_weights_map+0x18>
 800b1b6:	3d04      	subs	r5, #4
 800b1b8:	4622      	mov	r2, r4
 800b1ba:	68b3      	ldr	r3, [r6, #8]
 800b1bc:	4423      	add	r3, r4
 800b1be:	341c      	adds	r4, #28
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	b123      	cbz	r3, 800b1ce <ai_platform_get_weights_map+0x9a>
 800b1c4:	3201      	adds	r2, #1
 800b1c6:	f845 3f04 	str.w	r3, [r5, #4]!
 800b1ca:	4297      	cmp	r7, r2
 800b1cc:	d8f5      	bhi.n	800b1ba <ai_platform_get_weights_map+0x86>
 800b1ce:	1abc      	subs	r4, r7, r2
 800b1d0:	fab4 f484 	clz	r4, r4
 800b1d4:	0964      	lsrs	r4, r4, #5
 800b1d6:	e7ba      	b.n	800b14e <ai_platform_get_weights_map+0x1a>
 800b1d8:	428f      	cmp	r7, r1
 800b1da:	d1b8      	bne.n	800b14e <ai_platform_get_weights_map+0x1a>
 800b1dc:	e7e1      	b.n	800b1a2 <ai_platform_get_weights_map+0x6e>
 800b1de:	bf00      	nop
 800b1e0:	a1facade 	.word	0xa1facade

0800b1e4 <ai_platform_get_activations_map>:
 800b1e4:	2900      	cmp	r1, #0
 800b1e6:	bf18      	it	ne
 800b1e8:	2800      	cmpne	r0, #0
 800b1ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ec:	bf0c      	ite	eq
 800b1ee:	2401      	moveq	r4, #1
 800b1f0:	2400      	movne	r4, #0
 800b1f2:	2a00      	cmp	r2, #0
 800b1f4:	bf08      	it	eq
 800b1f6:	f044 0401 	orreq.w	r4, r4, #1
 800b1fa:	b114      	cbz	r4, 800b202 <ai_platform_get_activations_map+0x1e>
 800b1fc:	2400      	movs	r4, #0
 800b1fe:	4620      	mov	r0, r4
 800b200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b202:	4616      	mov	r6, r2
 800b204:	4b22      	ldr	r3, [pc, #136]	; (800b290 <ai_platform_get_activations_map+0xac>)
 800b206:	6812      	ldr	r2, [r2, #0]
 800b208:	4605      	mov	r5, r0
 800b20a:	460f      	mov	r7, r1
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d022      	beq.n	800b256 <ai_platform_get_activations_map+0x72>
 800b210:	6a30      	ldr	r0, [r6, #32]
 800b212:	2800      	cmp	r0, #0
 800b214:	d0f2      	beq.n	800b1fc <ai_platform_get_activations_map+0x18>
 800b216:	6806      	ldr	r6, [r0, #0]
 800b218:	429e      	cmp	r6, r3
 800b21a:	d006      	beq.n	800b22a <ai_platform_get_activations_map+0x46>
 800b21c:	f1a1 0401 	sub.w	r4, r1, #1
 800b220:	6028      	str	r0, [r5, #0]
 800b222:	fab4 f484 	clz	r4, r4
 800b226:	0964      	lsrs	r4, r4, #5
 800b228:	e7e9      	b.n	800b1fe <ai_platform_get_activations_map+0x1a>
 800b22a:	3d04      	subs	r5, #4
 800b22c:	4602      	mov	r2, r0
 800b22e:	4621      	mov	r1, r4
 800b230:	e000      	b.n	800b234 <ai_platform_get_activations_map+0x50>
 800b232:	4619      	mov	r1, r3
 800b234:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800b238:	42b3      	cmp	r3, r6
 800b23a:	d026      	beq.n	800b28a <ai_platform_get_activations_map+0xa6>
 800b23c:	f845 3f04 	str.w	r3, [r5, #4]!
 800b240:	1c4b      	adds	r3, r1, #1
 800b242:	429f      	cmp	r7, r3
 800b244:	d8f5      	bhi.n	800b232 <ai_platform_get_activations_map+0x4e>
 800b246:	d1da      	bne.n	800b1fe <ai_platform_get_activations_map+0x1a>
 800b248:	3102      	adds	r1, #2
 800b24a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800b24e:	42b3      	cmp	r3, r6
 800b250:	d1d5      	bne.n	800b1fe <ai_platform_get_activations_map+0x1a>
 800b252:	2401      	movs	r4, #1
 800b254:	e7d3      	b.n	800b1fe <ai_platform_get_activations_map+0x1a>
 800b256:	f106 000c 	add.w	r0, r6, #12
 800b25a:	f7ff ff5d 	bl	800b118 <ai_buffer_array_sane>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d0cc      	beq.n	800b1fc <ai_platform_get_activations_map+0x18>
 800b262:	89f3      	ldrh	r3, [r6, #14]
 800b264:	429f      	cmp	r7, r3
 800b266:	d1c9      	bne.n	800b1fc <ai_platform_get_activations_map+0x18>
 800b268:	3d04      	subs	r5, #4
 800b26a:	4622      	mov	r2, r4
 800b26c:	6933      	ldr	r3, [r6, #16]
 800b26e:	4423      	add	r3, r4
 800b270:	341c      	adds	r4, #28
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	b123      	cbz	r3, 800b280 <ai_platform_get_activations_map+0x9c>
 800b276:	3201      	adds	r2, #1
 800b278:	f845 3f04 	str.w	r3, [r5, #4]!
 800b27c:	4297      	cmp	r7, r2
 800b27e:	d8f5      	bhi.n	800b26c <ai_platform_get_activations_map+0x88>
 800b280:	1abc      	subs	r4, r7, r2
 800b282:	fab4 f484 	clz	r4, r4
 800b286:	0964      	lsrs	r4, r4, #5
 800b288:	e7b9      	b.n	800b1fe <ai_platform_get_activations_map+0x1a>
 800b28a:	428f      	cmp	r7, r1
 800b28c:	d1b7      	bne.n	800b1fe <ai_platform_get_activations_map+0x1a>
 800b28e:	e7e0      	b.n	800b252 <ai_platform_get_activations_map+0x6e>
 800b290:	a1facade 	.word	0xa1facade

0800b294 <ai_platform_network_get_error>:
 800b294:	b510      	push	{r4, lr}
 800b296:	2800      	cmp	r0, #0
 800b298:	d03f      	beq.n	800b31a <ai_platform_network_get_error+0x86>
 800b29a:	4b7d      	ldr	r3, [pc, #500]	; (800b490 <ai_platform_network_get_error+0x1fc>)
 800b29c:	4604      	mov	r4, r0
 800b29e:	6802      	ldr	r2, [r0, #0]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d13a      	bne.n	800b31a <ai_platform_network_get_error+0x86>
 800b2a4:	f7ff ff42 	bl	800b12c <_ai_platform_acquire_crc>
 800b2a8:	4b7a      	ldr	r3, [pc, #488]	; (800b494 <ai_platform_network_get_error+0x200>)
 800b2aa:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2b4:	189a      	adds	r2, r3, r2
 800b2b6:	2a01      	cmp	r2, #1
 800b2b8:	f240 8086 	bls.w	800b3c8 <ai_platform_network_get_error+0x134>
 800b2bc:	f240 4249 	movw	r2, #1097	; 0x449
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	f000 8081 	beq.w	800b3c8 <ai_platform_network_get_error+0x134>
 800b2c6:	4a74      	ldr	r2, [pc, #464]	; (800b498 <ai_platform_network_get_error+0x204>)
 800b2c8:	6813      	ldr	r3, [r2, #0]
 800b2ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2ce:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b2d2:	f000 8087 	beq.w	800b3e4 <ai_platform_network_get_error+0x150>
 800b2d6:	6813      	ldr	r3, [r2, #0]
 800b2d8:	f240 4183 	movw	r1, #1155	; 0x483
 800b2dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2e0:	428b      	cmp	r3, r1
 800b2e2:	f000 80a9 	beq.w	800b438 <ai_platform_network_get_error+0x1a4>
 800b2e6:	6813      	ldr	r3, [r2, #0]
 800b2e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2ec:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b2f0:	f000 80c0 	beq.w	800b474 <ai_platform_network_get_error+0x1e0>
 800b2f4:	6813      	ldr	r3, [r2, #0]
 800b2f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f040 8082 	bne.w	800b404 <ai_platform_network_get_error+0x170>
 800b300:	4a66      	ldr	r2, [pc, #408]	; (800b49c <ai_platform_network_get_error+0x208>)
 800b302:	2301      	movs	r3, #1
 800b304:	6093      	str	r3, [r2, #8]
 800b306:	6893      	ldr	r3, [r2, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1fc      	bne.n	800b306 <ai_platform_network_get_error+0x72>
 800b30c:	4964      	ldr	r1, [pc, #400]	; (800b4a0 <ai_platform_network_get_error+0x20c>)
 800b30e:	4b65      	ldr	r3, [pc, #404]	; (800b4a4 <ai_platform_network_get_error+0x210>)
 800b310:	6011      	str	r1, [r2, #0]
 800b312:	6812      	ldr	r2, [r2, #0]
 800b314:	429a      	cmp	r2, r3
 800b316:	d075      	beq.n	800b404 <ai_platform_network_get_error+0x170>
 800b318:	e7fe      	b.n	800b318 <ai_platform_network_get_error+0x84>
 800b31a:	f7ff ff07 	bl	800b12c <_ai_platform_acquire_crc>
 800b31e:	4b5d      	ldr	r3, [pc, #372]	; (800b494 <ai_platform_network_get_error+0x200>)
 800b320:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b32a:	185a      	adds	r2, r3, r1
 800b32c:	2a01      	cmp	r2, #1
 800b32e:	d929      	bls.n	800b384 <ai_platform_network_get_error+0xf0>
 800b330:	f240 4249 	movw	r2, #1097	; 0x449
 800b334:	4293      	cmp	r3, r2
 800b336:	d025      	beq.n	800b384 <ai_platform_network_get_error+0xf0>
 800b338:	4a57      	ldr	r2, [pc, #348]	; (800b498 <ai_platform_network_get_error+0x204>)
 800b33a:	6813      	ldr	r3, [r2, #0]
 800b33c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b340:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b344:	d02b      	beq.n	800b39e <ai_platform_network_get_error+0x10a>
 800b346:	6813      	ldr	r3, [r2, #0]
 800b348:	f240 4183 	movw	r1, #1155	; 0x483
 800b34c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b350:	428b      	cmp	r3, r1
 800b352:	d060      	beq.n	800b416 <ai_platform_network_get_error+0x182>
 800b354:	6813      	ldr	r3, [r2, #0]
 800b356:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b35a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b35e:	d07c      	beq.n	800b45a <ai_platform_network_get_error+0x1c6>
 800b360:	6813      	ldr	r3, [r2, #0]
 800b362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b366:	2b00      	cmp	r3, #0
 800b368:	d129      	bne.n	800b3be <ai_platform_network_get_error+0x12a>
 800b36a:	4a4c      	ldr	r2, [pc, #304]	; (800b49c <ai_platform_network_get_error+0x208>)
 800b36c:	2301      	movs	r3, #1
 800b36e:	6093      	str	r3, [r2, #8]
 800b370:	6893      	ldr	r3, [r2, #8]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1fc      	bne.n	800b370 <ai_platform_network_get_error+0xdc>
 800b376:	494a      	ldr	r1, [pc, #296]	; (800b4a0 <ai_platform_network_get_error+0x20c>)
 800b378:	4b4a      	ldr	r3, [pc, #296]	; (800b4a4 <ai_platform_network_get_error+0x210>)
 800b37a:	6011      	str	r1, [r2, #0]
 800b37c:	6812      	ldr	r2, [r2, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d01d      	beq.n	800b3be <ai_platform_network_get_error+0x12a>
 800b382:	e7fe      	b.n	800b382 <ai_platform_network_get_error+0xee>
 800b384:	4a45      	ldr	r2, [pc, #276]	; (800b49c <ai_platform_network_get_error+0x208>)
 800b386:	2301      	movs	r3, #1
 800b388:	6093      	str	r3, [r2, #8]
 800b38a:	6893      	ldr	r3, [r2, #8]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1fc      	bne.n	800b38a <ai_platform_network_get_error+0xf6>
 800b390:	4943      	ldr	r1, [pc, #268]	; (800b4a0 <ai_platform_network_get_error+0x20c>)
 800b392:	4b44      	ldr	r3, [pc, #272]	; (800b4a4 <ai_platform_network_get_error+0x210>)
 800b394:	6011      	str	r1, [r2, #0]
 800b396:	6812      	ldr	r2, [r2, #0]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d010      	beq.n	800b3be <ai_platform_network_get_error+0x12a>
 800b39c:	e7fe      	b.n	800b39c <ai_platform_network_get_error+0x108>
 800b39e:	4a42      	ldr	r2, [pc, #264]	; (800b4a8 <ai_platform_network_get_error+0x214>)
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b3a6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1fb      	bne.n	800b3a6 <ai_platform_network_get_error+0x112>
 800b3ae:	493c      	ldr	r1, [pc, #240]	; (800b4a0 <ai_platform_network_get_error+0x20c>)
 800b3b0:	4b3c      	ldr	r3, [pc, #240]	; (800b4a4 <ai_platform_network_get_error+0x210>)
 800b3b2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b3b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d111      	bne.n	800b3e2 <ai_platform_network_get_error+0x14e>
 800b3be:	f7ff feb7 	bl	800b130 <_ai_platform_release_crc>
 800b3c2:	f241 0010 	movw	r0, #4112	; 0x1010
 800b3c6:	bd10      	pop	{r4, pc}
 800b3c8:	4a34      	ldr	r2, [pc, #208]	; (800b49c <ai_platform_network_get_error+0x208>)
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	6093      	str	r3, [r2, #8]
 800b3ce:	6893      	ldr	r3, [r2, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1fc      	bne.n	800b3ce <ai_platform_network_get_error+0x13a>
 800b3d4:	4932      	ldr	r1, [pc, #200]	; (800b4a0 <ai_platform_network_get_error+0x20c>)
 800b3d6:	4b33      	ldr	r3, [pc, #204]	; (800b4a4 <ai_platform_network_get_error+0x210>)
 800b3d8:	6011      	str	r1, [r2, #0]
 800b3da:	6812      	ldr	r2, [r2, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d011      	beq.n	800b404 <ai_platform_network_get_error+0x170>
 800b3e0:	e7fe      	b.n	800b3e0 <ai_platform_network_get_error+0x14c>
 800b3e2:	e7fe      	b.n	800b3e2 <ai_platform_network_get_error+0x14e>
 800b3e4:	4a30      	ldr	r2, [pc, #192]	; (800b4a8 <ai_platform_network_get_error+0x214>)
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b3ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1fb      	bne.n	800b3ec <ai_platform_network_get_error+0x158>
 800b3f4:	492a      	ldr	r1, [pc, #168]	; (800b4a0 <ai_platform_network_get_error+0x20c>)
 800b3f6:	4b2b      	ldr	r3, [pc, #172]	; (800b4a4 <ai_platform_network_get_error+0x210>)
 800b3f8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b3fc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b400:	429a      	cmp	r2, r3
 800b402:	d107      	bne.n	800b414 <ai_platform_network_get_error+0x180>
 800b404:	f7ff fe94 	bl	800b130 <_ai_platform_release_crc>
 800b408:	f104 0010 	add.w	r0, r4, #16
 800b40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b410:	f001 bae6 	b.w	800c9e0 <core_get_error>
 800b414:	e7fe      	b.n	800b414 <ai_platform_network_get_error+0x180>
 800b416:	4a24      	ldr	r2, [pc, #144]	; (800b4a8 <ai_platform_network_get_error+0x214>)
 800b418:	2301      	movs	r3, #1
 800b41a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b41e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1fb      	bne.n	800b41e <ai_platform_network_get_error+0x18a>
 800b426:	491e      	ldr	r1, [pc, #120]	; (800b4a0 <ai_platform_network_get_error+0x20c>)
 800b428:	4b1e      	ldr	r3, [pc, #120]	; (800b4a4 <ai_platform_network_get_error+0x210>)
 800b42a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b42e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b432:	429a      	cmp	r2, r3
 800b434:	d0c3      	beq.n	800b3be <ai_platform_network_get_error+0x12a>
 800b436:	e7fe      	b.n	800b436 <ai_platform_network_get_error+0x1a2>
 800b438:	4a1b      	ldr	r2, [pc, #108]	; (800b4a8 <ai_platform_network_get_error+0x214>)
 800b43a:	2301      	movs	r3, #1
 800b43c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b440:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1fb      	bne.n	800b440 <ai_platform_network_get_error+0x1ac>
 800b448:	4915      	ldr	r1, [pc, #84]	; (800b4a0 <ai_platform_network_get_error+0x20c>)
 800b44a:	4b16      	ldr	r3, [pc, #88]	; (800b4a4 <ai_platform_network_get_error+0x210>)
 800b44c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b450:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b454:	429a      	cmp	r2, r3
 800b456:	d0d5      	beq.n	800b404 <ai_platform_network_get_error+0x170>
 800b458:	e7fe      	b.n	800b458 <ai_platform_network_get_error+0x1c4>
 800b45a:	4a10      	ldr	r2, [pc, #64]	; (800b49c <ai_platform_network_get_error+0x208>)
 800b45c:	2301      	movs	r3, #1
 800b45e:	6093      	str	r3, [r2, #8]
 800b460:	6893      	ldr	r3, [r2, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1fc      	bne.n	800b460 <ai_platform_network_get_error+0x1cc>
 800b466:	490e      	ldr	r1, [pc, #56]	; (800b4a0 <ai_platform_network_get_error+0x20c>)
 800b468:	4b0e      	ldr	r3, [pc, #56]	; (800b4a4 <ai_platform_network_get_error+0x210>)
 800b46a:	6011      	str	r1, [r2, #0]
 800b46c:	6812      	ldr	r2, [r2, #0]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d0a5      	beq.n	800b3be <ai_platform_network_get_error+0x12a>
 800b472:	e7fe      	b.n	800b472 <ai_platform_network_get_error+0x1de>
 800b474:	4a09      	ldr	r2, [pc, #36]	; (800b49c <ai_platform_network_get_error+0x208>)
 800b476:	2301      	movs	r3, #1
 800b478:	6093      	str	r3, [r2, #8]
 800b47a:	6893      	ldr	r3, [r2, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d1fc      	bne.n	800b47a <ai_platform_network_get_error+0x1e6>
 800b480:	4907      	ldr	r1, [pc, #28]	; (800b4a0 <ai_platform_network_get_error+0x20c>)
 800b482:	4b08      	ldr	r3, [pc, #32]	; (800b4a4 <ai_platform_network_get_error+0x210>)
 800b484:	6011      	str	r1, [r2, #0]
 800b486:	6812      	ldr	r2, [r2, #0]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d0bb      	beq.n	800b404 <ai_platform_network_get_error+0x170>
 800b48c:	e7fe      	b.n	800b48c <ai_platform_network_get_error+0x1f8>
 800b48e:	bf00      	nop
 800b490:	a1c00100 	.word	0xa1c00100
 800b494:	e0042000 	.word	0xe0042000
 800b498:	5c001000 	.word	0x5c001000
 800b49c:	40023000 	.word	0x40023000
 800b4a0:	f407a5c2 	.word	0xf407a5c2
 800b4a4:	b5e8b5cd 	.word	0xb5e8b5cd
 800b4a8:	58024000 	.word	0x58024000

0800b4ac <ai_platform_network_set_error>:
 800b4ac:	b110      	cbz	r0, 800b4b4 <ai_platform_network_set_error+0x8>
 800b4ae:	3010      	adds	r0, #16
 800b4b0:	f001 ba9c 	b.w	800c9ec <core_set_error>
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop

0800b4b8 <ai_platform_inputs_get>:
 800b4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4bc:	b085      	sub	sp, #20
 800b4be:	9102      	str	r1, [sp, #8]
 800b4c0:	2800      	cmp	r0, #0
 800b4c2:	f000 8093 	beq.w	800b5ec <ai_platform_inputs_get+0x134>
 800b4c6:	4baa      	ldr	r3, [pc, #680]	; (800b770 <ai_platform_inputs_get+0x2b8>)
 800b4c8:	4681      	mov	r9, r0
 800b4ca:	6802      	ldr	r2, [r0, #0]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	f040 808d 	bne.w	800b5ec <ai_platform_inputs_get+0x134>
 800b4d2:	f7ff fe2b 	bl	800b12c <_ai_platform_acquire_crc>
 800b4d6:	4ba7      	ldr	r3, [pc, #668]	; (800b774 <ai_platform_inputs_get+0x2bc>)
 800b4d8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4e2:	189a      	adds	r2, r3, r2
 800b4e4:	2a01      	cmp	r2, #1
 800b4e6:	f240 80da 	bls.w	800b69e <ai_platform_inputs_get+0x1e6>
 800b4ea:	f240 4249 	movw	r2, #1097	; 0x449
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	f000 80d5 	beq.w	800b69e <ai_platform_inputs_get+0x1e6>
 800b4f4:	4aa0      	ldr	r2, [pc, #640]	; (800b778 <ai_platform_inputs_get+0x2c0>)
 800b4f6:	6813      	ldr	r3, [r2, #0]
 800b4f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4fc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b500:	f000 80dc 	beq.w	800b6bc <ai_platform_inputs_get+0x204>
 800b504:	6813      	ldr	r3, [r2, #0]
 800b506:	f240 4183 	movw	r1, #1155	; 0x483
 800b50a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b50e:	428b      	cmp	r3, r1
 800b510:	f000 810e 	beq.w	800b730 <ai_platform_inputs_get+0x278>
 800b514:	6813      	ldr	r3, [r2, #0]
 800b516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b51a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b51e:	f000 8143 	beq.w	800b7a8 <ai_platform_inputs_get+0x2f0>
 800b522:	6813      	ldr	r3, [r2, #0]
 800b524:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f000 8113 	beq.w	800b754 <ai_platform_inputs_get+0x29c>
 800b52e:	f7ff fdff 	bl	800b130 <_ai_platform_release_crc>
 800b532:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800b536:	2b00      	cmp	r3, #0
 800b538:	f000 80d2 	beq.w	800b6e0 <ai_platform_inputs_get+0x228>
 800b53c:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800b540:	f1ba 0f00 	cmp.w	sl, #0
 800b544:	f000 80cc 	beq.w	800b6e0 <ai_platform_inputs_get+0x228>
 800b548:	2100      	movs	r1, #0
 800b54a:	f8cd 900c 	str.w	r9, [sp, #12]
 800b54e:	460d      	mov	r5, r1
 800b550:	4689      	mov	r9, r1
 800b552:	e016      	b.n	800b582 <ai_platform_inputs_get+0xca>
 800b554:	9a01      	ldr	r2, [sp, #4]
 800b556:	2301      	movs	r3, #1
 800b558:	f848 3002 	str.w	r3, [r8, r2]
 800b55c:	69b2      	ldr	r2, [r6, #24]
 800b55e:	f04f 0301 	mov.w	r3, #1
 800b562:	6856      	ldr	r6, [r2, #4]
 800b564:	3501      	adds	r5, #1
 800b566:	f109 091c 	add.w	r9, r9, #28
 800b56a:	7523      	strb	r3, [r4, #20]
 800b56c:	2300      	movs	r3, #0
 800b56e:	6962      	ldr	r2, [r4, #20]
 800b570:	60a7      	str	r7, [r4, #8]
 800b572:	f36b 221f 	bfi	r2, fp, #8, #24
 800b576:	6126      	str	r6, [r4, #16]
 800b578:	61a1      	str	r1, [r4, #24]
 800b57a:	60e3      	str	r3, [r4, #12]
 800b57c:	6162      	str	r2, [r4, #20]
 800b57e:	e9c4 0c00 	strd	r0, ip, [r4]
 800b582:	f8ba 3000 	ldrh.w	r3, [sl]
 800b586:	b2ac      	uxth	r4, r5
 800b588:	42ab      	cmp	r3, r5
 800b58a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800b58e:	9301      	str	r3, [sp, #4]
 800b590:	f240 80b5 	bls.w	800b6fe <ai_platform_inputs_get+0x246>
 800b594:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f000 80b0 	beq.w	800b6fe <ai_platform_inputs_get+0x246>
 800b59e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b5a2:	2e00      	cmp	r6, #0
 800b5a4:	f000 80ab 	beq.w	800b6fe <ai_platform_inputs_get+0x246>
 800b5a8:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b5ac:	69b2      	ldr	r2, [r6, #24]
 800b5ae:	68f1      	ldr	r1, [r6, #12]
 800b5b0:	6810      	ldr	r0, [r2, #0]
 800b5b2:	9100      	str	r1, [sp, #0]
 800b5b4:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800b5b8:	68b3      	ldr	r3, [r6, #8]
 800b5ba:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800b5be:	444c      	add	r4, r9
 800b5c0:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800b5c4:	f003 fa5e 	bl	800ea84 <ai_array_to_buffer_fmt>
 800b5c8:	69b2      	ldr	r2, [r6, #24]
 800b5ca:	9900      	ldr	r1, [sp, #0]
 800b5cc:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b5d0:	2f00      	cmp	r7, #0
 800b5d2:	d0c4      	beq.n	800b55e <ai_platform_inputs_get+0xa6>
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800b5da:	6832      	ldr	r2, [r6, #0]
 800b5dc:	607a      	str	r2, [r7, #4]
 800b5de:	b112      	cbz	r2, 800b5e6 <ai_platform_inputs_get+0x12e>
 800b5e0:	8852      	ldrh	r2, [r2, #2]
 800b5e2:	2a00      	cmp	r2, #0
 800b5e4:	d1b6      	bne.n	800b554 <ai_platform_inputs_get+0x9c>
 800b5e6:	69b2      	ldr	r2, [r6, #24]
 800b5e8:	2700      	movs	r7, #0
 800b5ea:	e7b8      	b.n	800b55e <ai_platform_inputs_get+0xa6>
 800b5ec:	f7ff fd9e 	bl	800b12c <_ai_platform_acquire_crc>
 800b5f0:	4b60      	ldr	r3, [pc, #384]	; (800b774 <ai_platform_inputs_get+0x2bc>)
 800b5f2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5fc:	185a      	adds	r2, r3, r1
 800b5fe:	2a01      	cmp	r2, #1
 800b600:	d92a      	bls.n	800b658 <ai_platform_inputs_get+0x1a0>
 800b602:	f240 4249 	movw	r2, #1097	; 0x449
 800b606:	4293      	cmp	r3, r2
 800b608:	d026      	beq.n	800b658 <ai_platform_inputs_get+0x1a0>
 800b60a:	4a5b      	ldr	r2, [pc, #364]	; (800b778 <ai_platform_inputs_get+0x2c0>)
 800b60c:	6813      	ldr	r3, [r2, #0]
 800b60e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b612:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b616:	d02c      	beq.n	800b672 <ai_platform_inputs_get+0x1ba>
 800b618:	6813      	ldr	r3, [r2, #0]
 800b61a:	f240 4183 	movw	r1, #1155	; 0x483
 800b61e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b622:	428b      	cmp	r3, r1
 800b624:	d073      	beq.n	800b70e <ai_platform_inputs_get+0x256>
 800b626:	6813      	ldr	r3, [r2, #0]
 800b628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b62c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b630:	f000 80ac 	beq.w	800b78c <ai_platform_inputs_get+0x2d4>
 800b634:	6813      	ldr	r3, [r2, #0]
 800b636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d129      	bne.n	800b692 <ai_platform_inputs_get+0x1da>
 800b63e:	4a4f      	ldr	r2, [pc, #316]	; (800b77c <ai_platform_inputs_get+0x2c4>)
 800b640:	2301      	movs	r3, #1
 800b642:	6093      	str	r3, [r2, #8]
 800b644:	6893      	ldr	r3, [r2, #8]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1fc      	bne.n	800b644 <ai_platform_inputs_get+0x18c>
 800b64a:	494d      	ldr	r1, [pc, #308]	; (800b780 <ai_platform_inputs_get+0x2c8>)
 800b64c:	4b4d      	ldr	r3, [pc, #308]	; (800b784 <ai_platform_inputs_get+0x2cc>)
 800b64e:	6011      	str	r1, [r2, #0]
 800b650:	6812      	ldr	r2, [r2, #0]
 800b652:	429a      	cmp	r2, r3
 800b654:	d01d      	beq.n	800b692 <ai_platform_inputs_get+0x1da>
 800b656:	e7fe      	b.n	800b656 <ai_platform_inputs_get+0x19e>
 800b658:	4a48      	ldr	r2, [pc, #288]	; (800b77c <ai_platform_inputs_get+0x2c4>)
 800b65a:	2301      	movs	r3, #1
 800b65c:	6093      	str	r3, [r2, #8]
 800b65e:	6893      	ldr	r3, [r2, #8]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d1fc      	bne.n	800b65e <ai_platform_inputs_get+0x1a6>
 800b664:	4946      	ldr	r1, [pc, #280]	; (800b780 <ai_platform_inputs_get+0x2c8>)
 800b666:	4b47      	ldr	r3, [pc, #284]	; (800b784 <ai_platform_inputs_get+0x2cc>)
 800b668:	6011      	str	r1, [r2, #0]
 800b66a:	6812      	ldr	r2, [r2, #0]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d010      	beq.n	800b692 <ai_platform_inputs_get+0x1da>
 800b670:	e7fe      	b.n	800b670 <ai_platform_inputs_get+0x1b8>
 800b672:	4a45      	ldr	r2, [pc, #276]	; (800b788 <ai_platform_inputs_get+0x2d0>)
 800b674:	2301      	movs	r3, #1
 800b676:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b67a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d1fb      	bne.n	800b67a <ai_platform_inputs_get+0x1c2>
 800b682:	493f      	ldr	r1, [pc, #252]	; (800b780 <ai_platform_inputs_get+0x2c8>)
 800b684:	4b3f      	ldr	r3, [pc, #252]	; (800b784 <ai_platform_inputs_get+0x2cc>)
 800b686:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b68a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b68e:	429a      	cmp	r2, r3
 800b690:	d113      	bne.n	800b6ba <ai_platform_inputs_get+0x202>
 800b692:	f7ff fd4d 	bl	800b130 <_ai_platform_release_crc>
 800b696:	2000      	movs	r0, #0
 800b698:	b005      	add	sp, #20
 800b69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b69e:	4a37      	ldr	r2, [pc, #220]	; (800b77c <ai_platform_inputs_get+0x2c4>)
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	6093      	str	r3, [r2, #8]
 800b6a4:	6893      	ldr	r3, [r2, #8]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d1fc      	bne.n	800b6a4 <ai_platform_inputs_get+0x1ec>
 800b6aa:	4b35      	ldr	r3, [pc, #212]	; (800b780 <ai_platform_inputs_get+0x2c8>)
 800b6ac:	6013      	str	r3, [r2, #0]
 800b6ae:	4b35      	ldr	r3, [pc, #212]	; (800b784 <ai_platform_inputs_get+0x2cc>)
 800b6b0:	6812      	ldr	r2, [r2, #0]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	f43f af3b 	beq.w	800b52e <ai_platform_inputs_get+0x76>
 800b6b8:	e7fe      	b.n	800b6b8 <ai_platform_inputs_get+0x200>
 800b6ba:	e7fe      	b.n	800b6ba <ai_platform_inputs_get+0x202>
 800b6bc:	4a32      	ldr	r2, [pc, #200]	; (800b788 <ai_platform_inputs_get+0x2d0>)
 800b6be:	2301      	movs	r3, #1
 800b6c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b6c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1fb      	bne.n	800b6c4 <ai_platform_inputs_get+0x20c>
 800b6cc:	4b2c      	ldr	r3, [pc, #176]	; (800b780 <ai_platform_inputs_get+0x2c8>)
 800b6ce:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b6d2:	4b2c      	ldr	r3, [pc, #176]	; (800b784 <ai_platform_inputs_get+0x2cc>)
 800b6d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	f43f af28 	beq.w	800b52e <ai_platform_inputs_get+0x76>
 800b6de:	e7fe      	b.n	800b6de <ai_platform_inputs_get+0x226>
 800b6e0:	2400      	movs	r4, #0
 800b6e2:	2218      	movs	r2, #24
 800b6e4:	2111      	movs	r1, #17
 800b6e6:	f109 0010 	add.w	r0, r9, #16
 800b6ea:	f001 f97f 	bl	800c9ec <core_set_error>
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	9b02      	ldr	r3, [sp, #8]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d0d0      	beq.n	800b698 <ai_platform_inputs_get+0x1e0>
 800b6f6:	801c      	strh	r4, [r3, #0]
 800b6f8:	b005      	add	sp, #20
 800b6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fe:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b702:	2c00      	cmp	r4, #0
 800b704:	d0ec      	beq.n	800b6e0 <ai_platform_inputs_get+0x228>
 800b706:	f8da 3008 	ldr.w	r3, [sl, #8]
 800b70a:	6858      	ldr	r0, [r3, #4]
 800b70c:	e7f0      	b.n	800b6f0 <ai_platform_inputs_get+0x238>
 800b70e:	4a1e      	ldr	r2, [pc, #120]	; (800b788 <ai_platform_inputs_get+0x2d0>)
 800b710:	2301      	movs	r3, #1
 800b712:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b716:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1fb      	bne.n	800b716 <ai_platform_inputs_get+0x25e>
 800b71e:	4918      	ldr	r1, [pc, #96]	; (800b780 <ai_platform_inputs_get+0x2c8>)
 800b720:	4b18      	ldr	r3, [pc, #96]	; (800b784 <ai_platform_inputs_get+0x2cc>)
 800b722:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b726:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d0b1      	beq.n	800b692 <ai_platform_inputs_get+0x1da>
 800b72e:	e7fe      	b.n	800b72e <ai_platform_inputs_get+0x276>
 800b730:	4a15      	ldr	r2, [pc, #84]	; (800b788 <ai_platform_inputs_get+0x2d0>)
 800b732:	2301      	movs	r3, #1
 800b734:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b738:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1fb      	bne.n	800b738 <ai_platform_inputs_get+0x280>
 800b740:	4b0f      	ldr	r3, [pc, #60]	; (800b780 <ai_platform_inputs_get+0x2c8>)
 800b742:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b746:	4b0f      	ldr	r3, [pc, #60]	; (800b784 <ai_platform_inputs_get+0x2cc>)
 800b748:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b74c:	429a      	cmp	r2, r3
 800b74e:	f43f aeee 	beq.w	800b52e <ai_platform_inputs_get+0x76>
 800b752:	e7fe      	b.n	800b752 <ai_platform_inputs_get+0x29a>
 800b754:	4a09      	ldr	r2, [pc, #36]	; (800b77c <ai_platform_inputs_get+0x2c4>)
 800b756:	2301      	movs	r3, #1
 800b758:	6093      	str	r3, [r2, #8]
 800b75a:	6893      	ldr	r3, [r2, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d1fc      	bne.n	800b75a <ai_platform_inputs_get+0x2a2>
 800b760:	4b07      	ldr	r3, [pc, #28]	; (800b780 <ai_platform_inputs_get+0x2c8>)
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	4b07      	ldr	r3, [pc, #28]	; (800b784 <ai_platform_inputs_get+0x2cc>)
 800b766:	6812      	ldr	r2, [r2, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	f43f aee0 	beq.w	800b52e <ai_platform_inputs_get+0x76>
 800b76e:	e7fe      	b.n	800b76e <ai_platform_inputs_get+0x2b6>
 800b770:	a1c00100 	.word	0xa1c00100
 800b774:	e0042000 	.word	0xe0042000
 800b778:	5c001000 	.word	0x5c001000
 800b77c:	40023000 	.word	0x40023000
 800b780:	f407a5c2 	.word	0xf407a5c2
 800b784:	b5e8b5cd 	.word	0xb5e8b5cd
 800b788:	58024000 	.word	0x58024000
 800b78c:	4a0d      	ldr	r2, [pc, #52]	; (800b7c4 <ai_platform_inputs_get+0x30c>)
 800b78e:	2301      	movs	r3, #1
 800b790:	6093      	str	r3, [r2, #8]
 800b792:	6893      	ldr	r3, [r2, #8]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d1fc      	bne.n	800b792 <ai_platform_inputs_get+0x2da>
 800b798:	490b      	ldr	r1, [pc, #44]	; (800b7c8 <ai_platform_inputs_get+0x310>)
 800b79a:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <ai_platform_inputs_get+0x314>)
 800b79c:	6011      	str	r1, [r2, #0]
 800b79e:	6812      	ldr	r2, [r2, #0]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	f43f af76 	beq.w	800b692 <ai_platform_inputs_get+0x1da>
 800b7a6:	e7fe      	b.n	800b7a6 <ai_platform_inputs_get+0x2ee>
 800b7a8:	4a06      	ldr	r2, [pc, #24]	; (800b7c4 <ai_platform_inputs_get+0x30c>)
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	6093      	str	r3, [r2, #8]
 800b7ae:	6893      	ldr	r3, [r2, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d1fc      	bne.n	800b7ae <ai_platform_inputs_get+0x2f6>
 800b7b4:	4b04      	ldr	r3, [pc, #16]	; (800b7c8 <ai_platform_inputs_get+0x310>)
 800b7b6:	6013      	str	r3, [r2, #0]
 800b7b8:	4b04      	ldr	r3, [pc, #16]	; (800b7cc <ai_platform_inputs_get+0x314>)
 800b7ba:	6812      	ldr	r2, [r2, #0]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	f43f aeb6 	beq.w	800b52e <ai_platform_inputs_get+0x76>
 800b7c2:	e7fe      	b.n	800b7c2 <ai_platform_inputs_get+0x30a>
 800b7c4:	40023000 	.word	0x40023000
 800b7c8:	f407a5c2 	.word	0xf407a5c2
 800b7cc:	b5e8b5cd 	.word	0xb5e8b5cd

0800b7d0 <ai_platform_outputs_get>:
 800b7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d4:	b085      	sub	sp, #20
 800b7d6:	9102      	str	r1, [sp, #8]
 800b7d8:	2800      	cmp	r0, #0
 800b7da:	f000 808f 	beq.w	800b8fc <ai_platform_outputs_get+0x12c>
 800b7de:	4ba8      	ldr	r3, [pc, #672]	; (800ba80 <ai_platform_outputs_get+0x2b0>)
 800b7e0:	4681      	mov	r9, r0
 800b7e2:	6802      	ldr	r2, [r0, #0]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	f040 8089 	bne.w	800b8fc <ai_platform_outputs_get+0x12c>
 800b7ea:	f7ff fc9f 	bl	800b12c <_ai_platform_acquire_crc>
 800b7ee:	4ba5      	ldr	r3, [pc, #660]	; (800ba84 <ai_platform_outputs_get+0x2b4>)
 800b7f0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7fa:	189a      	adds	r2, r3, r2
 800b7fc:	2a01      	cmp	r2, #1
 800b7fe:	f240 80d6 	bls.w	800b9ae <ai_platform_outputs_get+0x1de>
 800b802:	f240 4249 	movw	r2, #1097	; 0x449
 800b806:	4293      	cmp	r3, r2
 800b808:	f000 80d1 	beq.w	800b9ae <ai_platform_outputs_get+0x1de>
 800b80c:	4a9e      	ldr	r2, [pc, #632]	; (800ba88 <ai_platform_outputs_get+0x2b8>)
 800b80e:	6813      	ldr	r3, [r2, #0]
 800b810:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b814:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b818:	f000 80d8 	beq.w	800b9cc <ai_platform_outputs_get+0x1fc>
 800b81c:	6813      	ldr	r3, [r2, #0]
 800b81e:	f240 4183 	movw	r1, #1155	; 0x483
 800b822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b826:	428b      	cmp	r3, r1
 800b828:	f000 8109 	beq.w	800ba3e <ai_platform_outputs_get+0x26e>
 800b82c:	6813      	ldr	r3, [r2, #0]
 800b82e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b832:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b836:	f000 813f 	beq.w	800bab8 <ai_platform_outputs_get+0x2e8>
 800b83a:	6813      	ldr	r3, [r2, #0]
 800b83c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 810e 	beq.w	800ba62 <ai_platform_outputs_get+0x292>
 800b846:	f7ff fc73 	bl	800b130 <_ai_platform_release_crc>
 800b84a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 800b84e:	2b01      	cmp	r3, #1
 800b850:	f240 80db 	bls.w	800ba0a <ai_platform_outputs_get+0x23a>
 800b854:	2100      	movs	r1, #0
 800b856:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800b85a:	f8cd 900c 	str.w	r9, [sp, #12]
 800b85e:	460d      	mov	r5, r1
 800b860:	4689      	mov	r9, r1
 800b862:	e016      	b.n	800b892 <ai_platform_outputs_get+0xc2>
 800b864:	9a01      	ldr	r2, [sp, #4]
 800b866:	2301      	movs	r3, #1
 800b868:	f848 3002 	str.w	r3, [r8, r2]
 800b86c:	69b2      	ldr	r2, [r6, #24]
 800b86e:	f04f 0301 	mov.w	r3, #1
 800b872:	6856      	ldr	r6, [r2, #4]
 800b874:	3501      	adds	r5, #1
 800b876:	f109 091c 	add.w	r9, r9, #28
 800b87a:	7523      	strb	r3, [r4, #20]
 800b87c:	2300      	movs	r3, #0
 800b87e:	6962      	ldr	r2, [r4, #20]
 800b880:	60a7      	str	r7, [r4, #8]
 800b882:	f36b 221f 	bfi	r2, fp, #8, #24
 800b886:	6126      	str	r6, [r4, #16]
 800b888:	61a1      	str	r1, [r4, #24]
 800b88a:	60e3      	str	r3, [r4, #12]
 800b88c:	6162      	str	r2, [r4, #20]
 800b88e:	e9c4 0c00 	strd	r0, ip, [r4]
 800b892:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800b896:	b2ac      	uxth	r4, r5
 800b898:	42ab      	cmp	r3, r5
 800b89a:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 800b89e:	9301      	str	r3, [sp, #4]
 800b8a0:	f240 80a6 	bls.w	800b9f0 <ai_platform_outputs_get+0x220>
 800b8a4:	f8da 3010 	ldr.w	r3, [sl, #16]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 80a1 	beq.w	800b9f0 <ai_platform_outputs_get+0x220>
 800b8ae:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800b8b2:	2e00      	cmp	r6, #0
 800b8b4:	f000 809c 	beq.w	800b9f0 <ai_platform_outputs_get+0x220>
 800b8b8:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b8bc:	69b2      	ldr	r2, [r6, #24]
 800b8be:	68f1      	ldr	r1, [r6, #12]
 800b8c0:	6810      	ldr	r0, [r2, #0]
 800b8c2:	9100      	str	r1, [sp, #0]
 800b8c4:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 800b8c8:	68b3      	ldr	r3, [r6, #8]
 800b8ca:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 800b8ce:	444c      	add	r4, r9
 800b8d0:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800b8d4:	f003 f8d6 	bl	800ea84 <ai_array_to_buffer_fmt>
 800b8d8:	69b2      	ldr	r2, [r6, #24]
 800b8da:	9900      	ldr	r1, [sp, #0]
 800b8dc:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800b8e0:	2f00      	cmp	r7, #0
 800b8e2:	d0c4      	beq.n	800b86e <ai_platform_outputs_get+0x9e>
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 800b8ea:	6832      	ldr	r2, [r6, #0]
 800b8ec:	607a      	str	r2, [r7, #4]
 800b8ee:	b112      	cbz	r2, 800b8f6 <ai_platform_outputs_get+0x126>
 800b8f0:	8852      	ldrh	r2, [r2, #2]
 800b8f2:	2a00      	cmp	r2, #0
 800b8f4:	d1b6      	bne.n	800b864 <ai_platform_outputs_get+0x94>
 800b8f6:	69b2      	ldr	r2, [r6, #24]
 800b8f8:	2700      	movs	r7, #0
 800b8fa:	e7b8      	b.n	800b86e <ai_platform_outputs_get+0x9e>
 800b8fc:	f7ff fc16 	bl	800b12c <_ai_platform_acquire_crc>
 800b900:	4b60      	ldr	r3, [pc, #384]	; (800ba84 <ai_platform_outputs_get+0x2b4>)
 800b902:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b90c:	185a      	adds	r2, r3, r1
 800b90e:	2a01      	cmp	r2, #1
 800b910:	d92a      	bls.n	800b968 <ai_platform_outputs_get+0x198>
 800b912:	f240 4249 	movw	r2, #1097	; 0x449
 800b916:	4293      	cmp	r3, r2
 800b918:	d026      	beq.n	800b968 <ai_platform_outputs_get+0x198>
 800b91a:	4a5b      	ldr	r2, [pc, #364]	; (800ba88 <ai_platform_outputs_get+0x2b8>)
 800b91c:	6813      	ldr	r3, [r2, #0]
 800b91e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b922:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800b926:	d02c      	beq.n	800b982 <ai_platform_outputs_get+0x1b2>
 800b928:	6813      	ldr	r3, [r2, #0]
 800b92a:	f240 4183 	movw	r1, #1155	; 0x483
 800b92e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b932:	428b      	cmp	r3, r1
 800b934:	d072      	beq.n	800ba1c <ai_platform_outputs_get+0x24c>
 800b936:	6813      	ldr	r3, [r2, #0]
 800b938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b93c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800b940:	f000 80ac 	beq.w	800ba9c <ai_platform_outputs_get+0x2cc>
 800b944:	6813      	ldr	r3, [r2, #0]
 800b946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d129      	bne.n	800b9a2 <ai_platform_outputs_get+0x1d2>
 800b94e:	4a4f      	ldr	r2, [pc, #316]	; (800ba8c <ai_platform_outputs_get+0x2bc>)
 800b950:	2301      	movs	r3, #1
 800b952:	6093      	str	r3, [r2, #8]
 800b954:	6893      	ldr	r3, [r2, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1fc      	bne.n	800b954 <ai_platform_outputs_get+0x184>
 800b95a:	494d      	ldr	r1, [pc, #308]	; (800ba90 <ai_platform_outputs_get+0x2c0>)
 800b95c:	4b4d      	ldr	r3, [pc, #308]	; (800ba94 <ai_platform_outputs_get+0x2c4>)
 800b95e:	6011      	str	r1, [r2, #0]
 800b960:	6812      	ldr	r2, [r2, #0]
 800b962:	429a      	cmp	r2, r3
 800b964:	d01d      	beq.n	800b9a2 <ai_platform_outputs_get+0x1d2>
 800b966:	e7fe      	b.n	800b966 <ai_platform_outputs_get+0x196>
 800b968:	4a48      	ldr	r2, [pc, #288]	; (800ba8c <ai_platform_outputs_get+0x2bc>)
 800b96a:	2301      	movs	r3, #1
 800b96c:	6093      	str	r3, [r2, #8]
 800b96e:	6893      	ldr	r3, [r2, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1fc      	bne.n	800b96e <ai_platform_outputs_get+0x19e>
 800b974:	4946      	ldr	r1, [pc, #280]	; (800ba90 <ai_platform_outputs_get+0x2c0>)
 800b976:	4b47      	ldr	r3, [pc, #284]	; (800ba94 <ai_platform_outputs_get+0x2c4>)
 800b978:	6011      	str	r1, [r2, #0]
 800b97a:	6812      	ldr	r2, [r2, #0]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d010      	beq.n	800b9a2 <ai_platform_outputs_get+0x1d2>
 800b980:	e7fe      	b.n	800b980 <ai_platform_outputs_get+0x1b0>
 800b982:	4a45      	ldr	r2, [pc, #276]	; (800ba98 <ai_platform_outputs_get+0x2c8>)
 800b984:	2301      	movs	r3, #1
 800b986:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b98a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1fb      	bne.n	800b98a <ai_platform_outputs_get+0x1ba>
 800b992:	493f      	ldr	r1, [pc, #252]	; (800ba90 <ai_platform_outputs_get+0x2c0>)
 800b994:	4b3f      	ldr	r3, [pc, #252]	; (800ba94 <ai_platform_outputs_get+0x2c4>)
 800b996:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800b99a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d113      	bne.n	800b9ca <ai_platform_outputs_get+0x1fa>
 800b9a2:	f7ff fbc5 	bl	800b130 <_ai_platform_release_crc>
 800b9a6:	2000      	movs	r0, #0
 800b9a8:	b005      	add	sp, #20
 800b9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ae:	4a37      	ldr	r2, [pc, #220]	; (800ba8c <ai_platform_outputs_get+0x2bc>)
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	6093      	str	r3, [r2, #8]
 800b9b4:	6893      	ldr	r3, [r2, #8]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1fc      	bne.n	800b9b4 <ai_platform_outputs_get+0x1e4>
 800b9ba:	4b35      	ldr	r3, [pc, #212]	; (800ba90 <ai_platform_outputs_get+0x2c0>)
 800b9bc:	6013      	str	r3, [r2, #0]
 800b9be:	4b35      	ldr	r3, [pc, #212]	; (800ba94 <ai_platform_outputs_get+0x2c4>)
 800b9c0:	6812      	ldr	r2, [r2, #0]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	f43f af3f 	beq.w	800b846 <ai_platform_outputs_get+0x76>
 800b9c8:	e7fe      	b.n	800b9c8 <ai_platform_outputs_get+0x1f8>
 800b9ca:	e7fe      	b.n	800b9ca <ai_platform_outputs_get+0x1fa>
 800b9cc:	4a32      	ldr	r2, [pc, #200]	; (800ba98 <ai_platform_outputs_get+0x2c8>)
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800b9d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1fb      	bne.n	800b9d4 <ai_platform_outputs_get+0x204>
 800b9dc:	4b2c      	ldr	r3, [pc, #176]	; (800ba90 <ai_platform_outputs_get+0x2c0>)
 800b9de:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800b9e2:	4b2c      	ldr	r3, [pc, #176]	; (800ba94 <ai_platform_outputs_get+0x2c4>)
 800b9e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	f43f af2c 	beq.w	800b846 <ai_platform_outputs_get+0x76>
 800b9ee:	e7fe      	b.n	800b9ee <ai_platform_outputs_get+0x21e>
 800b9f0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b9f4:	b14c      	cbz	r4, 800ba0a <ai_platform_outputs_get+0x23a>
 800b9f6:	f8da 3014 	ldr.w	r3, [sl, #20]
 800b9fa:	6858      	ldr	r0, [r3, #4]
 800b9fc:	9b02      	ldr	r3, [sp, #8]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d0d2      	beq.n	800b9a8 <ai_platform_outputs_get+0x1d8>
 800ba02:	801c      	strh	r4, [r3, #0]
 800ba04:	b005      	add	sp, #20
 800ba06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0a:	2400      	movs	r4, #0
 800ba0c:	2218      	movs	r2, #24
 800ba0e:	2111      	movs	r1, #17
 800ba10:	f109 0010 	add.w	r0, r9, #16
 800ba14:	f000 ffea 	bl	800c9ec <core_set_error>
 800ba18:	4620      	mov	r0, r4
 800ba1a:	e7ef      	b.n	800b9fc <ai_platform_outputs_get+0x22c>
 800ba1c:	4a1e      	ldr	r2, [pc, #120]	; (800ba98 <ai_platform_outputs_get+0x2c8>)
 800ba1e:	2301      	movs	r3, #1
 800ba20:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ba24:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1fb      	bne.n	800ba24 <ai_platform_outputs_get+0x254>
 800ba2c:	4918      	ldr	r1, [pc, #96]	; (800ba90 <ai_platform_outputs_get+0x2c0>)
 800ba2e:	4b19      	ldr	r3, [pc, #100]	; (800ba94 <ai_platform_outputs_get+0x2c4>)
 800ba30:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800ba34:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d0b2      	beq.n	800b9a2 <ai_platform_outputs_get+0x1d2>
 800ba3c:	e7fe      	b.n	800ba3c <ai_platform_outputs_get+0x26c>
 800ba3e:	4a16      	ldr	r2, [pc, #88]	; (800ba98 <ai_platform_outputs_get+0x2c8>)
 800ba40:	2301      	movs	r3, #1
 800ba42:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ba46:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1fb      	bne.n	800ba46 <ai_platform_outputs_get+0x276>
 800ba4e:	4b10      	ldr	r3, [pc, #64]	; (800ba90 <ai_platform_outputs_get+0x2c0>)
 800ba50:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ba54:	4b0f      	ldr	r3, [pc, #60]	; (800ba94 <ai_platform_outputs_get+0x2c4>)
 800ba56:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	f43f aef3 	beq.w	800b846 <ai_platform_outputs_get+0x76>
 800ba60:	e7fe      	b.n	800ba60 <ai_platform_outputs_get+0x290>
 800ba62:	4a0a      	ldr	r2, [pc, #40]	; (800ba8c <ai_platform_outputs_get+0x2bc>)
 800ba64:	2301      	movs	r3, #1
 800ba66:	6093      	str	r3, [r2, #8]
 800ba68:	6893      	ldr	r3, [r2, #8]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1fc      	bne.n	800ba68 <ai_platform_outputs_get+0x298>
 800ba6e:	4b08      	ldr	r3, [pc, #32]	; (800ba90 <ai_platform_outputs_get+0x2c0>)
 800ba70:	6013      	str	r3, [r2, #0]
 800ba72:	4b08      	ldr	r3, [pc, #32]	; (800ba94 <ai_platform_outputs_get+0x2c4>)
 800ba74:	6812      	ldr	r2, [r2, #0]
 800ba76:	429a      	cmp	r2, r3
 800ba78:	f43f aee5 	beq.w	800b846 <ai_platform_outputs_get+0x76>
 800ba7c:	e7fe      	b.n	800ba7c <ai_platform_outputs_get+0x2ac>
 800ba7e:	bf00      	nop
 800ba80:	a1c00100 	.word	0xa1c00100
 800ba84:	e0042000 	.word	0xe0042000
 800ba88:	5c001000 	.word	0x5c001000
 800ba8c:	40023000 	.word	0x40023000
 800ba90:	f407a5c2 	.word	0xf407a5c2
 800ba94:	b5e8b5cd 	.word	0xb5e8b5cd
 800ba98:	58024000 	.word	0x58024000
 800ba9c:	4a0d      	ldr	r2, [pc, #52]	; (800bad4 <ai_platform_outputs_get+0x304>)
 800ba9e:	2301      	movs	r3, #1
 800baa0:	6093      	str	r3, [r2, #8]
 800baa2:	6893      	ldr	r3, [r2, #8]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1fc      	bne.n	800baa2 <ai_platform_outputs_get+0x2d2>
 800baa8:	490b      	ldr	r1, [pc, #44]	; (800bad8 <ai_platform_outputs_get+0x308>)
 800baaa:	4b0c      	ldr	r3, [pc, #48]	; (800badc <ai_platform_outputs_get+0x30c>)
 800baac:	6011      	str	r1, [r2, #0]
 800baae:	6812      	ldr	r2, [r2, #0]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	f43f af76 	beq.w	800b9a2 <ai_platform_outputs_get+0x1d2>
 800bab6:	e7fe      	b.n	800bab6 <ai_platform_outputs_get+0x2e6>
 800bab8:	4a06      	ldr	r2, [pc, #24]	; (800bad4 <ai_platform_outputs_get+0x304>)
 800baba:	2301      	movs	r3, #1
 800babc:	6093      	str	r3, [r2, #8]
 800babe:	6893      	ldr	r3, [r2, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d1fc      	bne.n	800babe <ai_platform_outputs_get+0x2ee>
 800bac4:	4b04      	ldr	r3, [pc, #16]	; (800bad8 <ai_platform_outputs_get+0x308>)
 800bac6:	6013      	str	r3, [r2, #0]
 800bac8:	4b04      	ldr	r3, [pc, #16]	; (800badc <ai_platform_outputs_get+0x30c>)
 800baca:	6812      	ldr	r2, [r2, #0]
 800bacc:	429a      	cmp	r2, r3
 800bace:	f43f aeba 	beq.w	800b846 <ai_platform_outputs_get+0x76>
 800bad2:	e7fe      	b.n	800bad2 <ai_platform_outputs_get+0x302>
 800bad4:	40023000 	.word	0x40023000
 800bad8:	f407a5c2 	.word	0xf407a5c2
 800badc:	b5e8b5cd 	.word	0xb5e8b5cd

0800bae0 <ai_platform_network_create>:
 800bae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bae4:	b083      	sub	sp, #12
 800bae6:	4604      	mov	r4, r0
 800bae8:	4615      	mov	r5, r2
 800baea:	461e      	mov	r6, r3
 800baec:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800baf0:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800baf4:	f7ff fb1a 	bl	800b12c <_ai_platform_acquire_crc>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	f000 80bd 	beq.w	800bc78 <ai_platform_network_create+0x198>
 800bafe:	4ba5      	ldr	r3, [pc, #660]	; (800bd94 <ai_platform_network_create+0x2b4>)
 800bb00:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800bb04:	4601      	mov	r1, r0
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb0c:	eb03 020c 	add.w	r2, r3, ip
 800bb10:	2a01      	cmp	r2, #1
 800bb12:	f240 80a8 	bls.w	800bc66 <ai_platform_network_create+0x186>
 800bb16:	f240 4249 	movw	r2, #1097	; 0x449
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	f000 80a3 	beq.w	800bc66 <ai_platform_network_create+0x186>
 800bb20:	4a9d      	ldr	r2, [pc, #628]	; (800bd98 <ai_platform_network_create+0x2b8>)
 800bb22:	6813      	ldr	r3, [r2, #0]
 800bb24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb28:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bb2c:	f000 80b9 	beq.w	800bca2 <ai_platform_network_create+0x1c2>
 800bb30:	6813      	ldr	r3, [r2, #0]
 800bb32:	f240 4c83 	movw	ip, #1155	; 0x483
 800bb36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb3a:	4563      	cmp	r3, ip
 800bb3c:	f000 80a1 	beq.w	800bc82 <ai_platform_network_create+0x1a2>
 800bb40:	6813      	ldr	r3, [r2, #0]
 800bb42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb46:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bb4a:	f000 8153 	beq.w	800bdf4 <ai_platform_network_create+0x314>
 800bb4e:	6813      	ldr	r3, [r2, #0]
 800bb50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f040 808d 	bne.w	800bc74 <ai_platform_network_create+0x194>
 800bb5a:	4a90      	ldr	r2, [pc, #576]	; (800bd9c <ai_platform_network_create+0x2bc>)
 800bb5c:	2318      	movs	r3, #24
 800bb5e:	6093      	str	r3, [r2, #8]
 800bb60:	6893      	ldr	r3, [r2, #8]
 800bb62:	2b18      	cmp	r3, #24
 800bb64:	f040 8086 	bne.w	800bc74 <ai_platform_network_create+0x194>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	6093      	str	r3, [r2, #8]
 800bb6c:	6893      	ldr	r3, [r2, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1fc      	bne.n	800bb6c <ai_platform_network_create+0x8c>
 800bb72:	4608      	mov	r0, r1
 800bb74:	f7ff fadc 	bl	800b130 <_ai_platform_release_crc>
 800bb78:	f7ff fad8 	bl	800b12c <_ai_platform_acquire_crc>
 800bb7c:	4b85      	ldr	r3, [pc, #532]	; (800bd94 <ai_platform_network_create+0x2b4>)
 800bb7e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb88:	189a      	adds	r2, r3, r2
 800bb8a:	2a01      	cmp	r2, #1
 800bb8c:	f240 809f 	bls.w	800bcce <ai_platform_network_create+0x1ee>
 800bb90:	f240 4249 	movw	r2, #1097	; 0x449
 800bb94:	4293      	cmp	r3, r2
 800bb96:	f000 809a 	beq.w	800bcce <ai_platform_network_create+0x1ee>
 800bb9a:	4a7f      	ldr	r2, [pc, #508]	; (800bd98 <ai_platform_network_create+0x2b8>)
 800bb9c:	6813      	ldr	r3, [r2, #0]
 800bb9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bba2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bba6:	f000 80a0 	beq.w	800bcea <ai_platform_network_create+0x20a>
 800bbaa:	6813      	ldr	r3, [r2, #0]
 800bbac:	f240 4183 	movw	r1, #1155	; 0x483
 800bbb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbb4:	428b      	cmp	r3, r1
 800bbb6:	f000 80bf 	beq.w	800bd38 <ai_platform_network_create+0x258>
 800bbba:	6813      	ldr	r3, [r2, #0]
 800bbbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbc0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bbc4:	f000 8123 	beq.w	800be0e <ai_platform_network_create+0x32e>
 800bbc8:	6813      	ldr	r3, [r2, #0]
 800bbca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80c4 	beq.w	800bd5c <ai_platform_network_create+0x27c>
 800bbd4:	f7ff faac 	bl	800b130 <_ai_platform_release_crc>
 800bbd8:	2c00      	cmp	r4, #0
 800bbda:	f000 80aa 	beq.w	800bd32 <ai_platform_network_create+0x252>
 800bbde:	4b70      	ldr	r3, [pc, #448]	; (800bda0 <ai_platform_network_create+0x2c0>)
 800bbe0:	602b      	str	r3, [r5, #0]
 800bbe2:	6025      	str	r5, [r4, #0]
 800bbe4:	f000 fefa 	bl	800c9dc <core_init>
 800bbe8:	2800      	cmp	r0, #0
 800bbea:	f000 8090 	beq.w	800bd0e <ai_platform_network_create+0x22e>
 800bbee:	f7ff fa9d 	bl	800b12c <_ai_platform_acquire_crc>
 800bbf2:	4b68      	ldr	r3, [pc, #416]	; (800bd94 <ai_platform_network_create+0x2b4>)
 800bbf4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbfe:	185a      	adds	r2, r3, r1
 800bc00:	2a01      	cmp	r2, #1
 800bc02:	f240 80b9 	bls.w	800bd78 <ai_platform_network_create+0x298>
 800bc06:	f240 4249 	movw	r2, #1097	; 0x449
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	f000 80b4 	beq.w	800bd78 <ai_platform_network_create+0x298>
 800bc10:	4a61      	ldr	r2, [pc, #388]	; (800bd98 <ai_platform_network_create+0x2b8>)
 800bc12:	6813      	ldr	r3, [r2, #0]
 800bc14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc18:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bc1c:	f000 80c8 	beq.w	800bdb0 <ai_platform_network_create+0x2d0>
 800bc20:	6813      	ldr	r3, [r2, #0]
 800bc22:	f240 4183 	movw	r1, #1155	; 0x483
 800bc26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc2a:	428b      	cmp	r3, r1
 800bc2c:	f000 8107 	beq.w	800be3e <ai_platform_network_create+0x35e>
 800bc30:	6813      	ldr	r3, [r2, #0]
 800bc32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc36:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bc3a:	f000 8111 	beq.w	800be60 <ai_platform_network_create+0x380>
 800bc3e:	6813      	ldr	r3, [r2, #0]
 800bc40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	f040 80c3 	bne.w	800bdd0 <ai_platform_network_create+0x2f0>
 800bc4a:	4b54      	ldr	r3, [pc, #336]	; (800bd9c <ai_platform_network_create+0x2bc>)
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	609a      	str	r2, [r3, #8]
 800bc50:	689a      	ldr	r2, [r3, #8]
 800bc52:	2a00      	cmp	r2, #0
 800bc54:	d1fc      	bne.n	800bc50 <ai_platform_network_create+0x170>
 800bc56:	4a53      	ldr	r2, [pc, #332]	; (800bda4 <ai_platform_network_create+0x2c4>)
 800bc58:	601a      	str	r2, [r3, #0]
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	4b52      	ldr	r3, [pc, #328]	; (800bda8 <ai_platform_network_create+0x2c8>)
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	f000 80b6 	beq.w	800bdd0 <ai_platform_network_create+0x2f0>
 800bc64:	e7fe      	b.n	800bc64 <ai_platform_network_create+0x184>
 800bc66:	4b4d      	ldr	r3, [pc, #308]	; (800bd9c <ai_platform_network_create+0x2bc>)
 800bc68:	2218      	movs	r2, #24
 800bc6a:	609a      	str	r2, [r3, #8]
 800bc6c:	689a      	ldr	r2, [r3, #8]
 800bc6e:	2a18      	cmp	r2, #24
 800bc70:	d027      	beq.n	800bcc2 <ai_platform_network_create+0x1e2>
 800bc72:	4608      	mov	r0, r1
 800bc74:	f7ff fa5c 	bl	800b130 <_ai_platform_release_crc>
 800bc78:	f244 1033 	movw	r0, #16691	; 0x4133
 800bc7c:	b003      	add	sp, #12
 800bc7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc82:	4a4a      	ldr	r2, [pc, #296]	; (800bdac <ai_platform_network_create+0x2cc>)
 800bc84:	2318      	movs	r3, #24
 800bc86:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bc8a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bc8e:	2b18      	cmp	r3, #24
 800bc90:	d1f0      	bne.n	800bc74 <ai_platform_network_create+0x194>
 800bc92:	2301      	movs	r3, #1
 800bc94:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bc98:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1fb      	bne.n	800bc98 <ai_platform_network_create+0x1b8>
 800bca0:	e767      	b.n	800bb72 <ai_platform_network_create+0x92>
 800bca2:	4a42      	ldr	r2, [pc, #264]	; (800bdac <ai_platform_network_create+0x2cc>)
 800bca4:	2318      	movs	r3, #24
 800bca6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bcaa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bcae:	2b18      	cmp	r3, #24
 800bcb0:	d1e0      	bne.n	800bc74 <ai_platform_network_create+0x194>
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bcb8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1fb      	bne.n	800bcb8 <ai_platform_network_create+0x1d8>
 800bcc0:	e757      	b.n	800bb72 <ai_platform_network_create+0x92>
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	609a      	str	r2, [r3, #8]
 800bcc6:	689a      	ldr	r2, [r3, #8]
 800bcc8:	2a00      	cmp	r2, #0
 800bcca:	d1fc      	bne.n	800bcc6 <ai_platform_network_create+0x1e6>
 800bccc:	e751      	b.n	800bb72 <ai_platform_network_create+0x92>
 800bcce:	4a33      	ldr	r2, [pc, #204]	; (800bd9c <ai_platform_network_create+0x2bc>)
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	6093      	str	r3, [r2, #8]
 800bcd4:	6891      	ldr	r1, [r2, #8]
 800bcd6:	2900      	cmp	r1, #0
 800bcd8:	d1fc      	bne.n	800bcd4 <ai_platform_network_create+0x1f4>
 800bcda:	4b32      	ldr	r3, [pc, #200]	; (800bda4 <ai_platform_network_create+0x2c4>)
 800bcdc:	6013      	str	r3, [r2, #0]
 800bcde:	4b32      	ldr	r3, [pc, #200]	; (800bda8 <ai_platform_network_create+0x2c8>)
 800bce0:	6812      	ldr	r2, [r2, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	f43f af76 	beq.w	800bbd4 <ai_platform_network_create+0xf4>
 800bce8:	e7fe      	b.n	800bce8 <ai_platform_network_create+0x208>
 800bcea:	4a30      	ldr	r2, [pc, #192]	; (800bdac <ai_platform_network_create+0x2cc>)
 800bcec:	2301      	movs	r3, #1
 800bcee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bcf2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1fb      	bne.n	800bcf2 <ai_platform_network_create+0x212>
 800bcfa:	4b2a      	ldr	r3, [pc, #168]	; (800bda4 <ai_platform_network_create+0x2c4>)
 800bcfc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bd00:	4b29      	ldr	r3, [pc, #164]	; (800bda8 <ai_platform_network_create+0x2c8>)
 800bd02:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bd06:	429a      	cmp	r2, r3
 800bd08:	f43f af64 	beq.w	800bbd4 <ai_platform_network_create+0xf4>
 800bd0c:	e7fe      	b.n	800bd0c <ai_platform_network_create+0x22c>
 800bd0e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800bd12:	2300      	movs	r3, #0
 800bd14:	6023      	str	r3, [r4, #0]
 800bd16:	2410      	movs	r4, #16
 800bd18:	4642      	mov	r2, r8
 800bd1a:	4639      	mov	r1, r7
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f002 fe95 	bl	800ea4c <ai_version_get>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2000      	movs	r0, #0
 800bd26:	64ab      	str	r3, [r5, #72]	; 0x48
 800bd28:	f369 0007 	bfi	r0, r9, #0, #8
 800bd2c:	f364 201f 	bfi	r0, r4, #8, #24
 800bd30:	e7a4      	b.n	800bc7c <ai_platform_network_create+0x19c>
 800bd32:	f241 0010 	movw	r0, #4112	; 0x1010
 800bd36:	e7a1      	b.n	800bc7c <ai_platform_network_create+0x19c>
 800bd38:	4a1c      	ldr	r2, [pc, #112]	; (800bdac <ai_platform_network_create+0x2cc>)
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bd40:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1fb      	bne.n	800bd40 <ai_platform_network_create+0x260>
 800bd48:	4b16      	ldr	r3, [pc, #88]	; (800bda4 <ai_platform_network_create+0x2c4>)
 800bd4a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bd4e:	4b16      	ldr	r3, [pc, #88]	; (800bda8 <ai_platform_network_create+0x2c8>)
 800bd50:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bd54:	429a      	cmp	r2, r3
 800bd56:	f43f af3d 	beq.w	800bbd4 <ai_platform_network_create+0xf4>
 800bd5a:	e7fe      	b.n	800bd5a <ai_platform_network_create+0x27a>
 800bd5c:	4a0f      	ldr	r2, [pc, #60]	; (800bd9c <ai_platform_network_create+0x2bc>)
 800bd5e:	2301      	movs	r3, #1
 800bd60:	6093      	str	r3, [r2, #8]
 800bd62:	6893      	ldr	r3, [r2, #8]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1fc      	bne.n	800bd62 <ai_platform_network_create+0x282>
 800bd68:	4b0e      	ldr	r3, [pc, #56]	; (800bda4 <ai_platform_network_create+0x2c4>)
 800bd6a:	6013      	str	r3, [r2, #0]
 800bd6c:	4b0e      	ldr	r3, [pc, #56]	; (800bda8 <ai_platform_network_create+0x2c8>)
 800bd6e:	6812      	ldr	r2, [r2, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	f43f af2f 	beq.w	800bbd4 <ai_platform_network_create+0xf4>
 800bd76:	e7fe      	b.n	800bd76 <ai_platform_network_create+0x296>
 800bd78:	4a08      	ldr	r2, [pc, #32]	; (800bd9c <ai_platform_network_create+0x2bc>)
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	6093      	str	r3, [r2, #8]
 800bd7e:	6893      	ldr	r3, [r2, #8]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1fc      	bne.n	800bd7e <ai_platform_network_create+0x29e>
 800bd84:	4b07      	ldr	r3, [pc, #28]	; (800bda4 <ai_platform_network_create+0x2c4>)
 800bd86:	6013      	str	r3, [r2, #0]
 800bd88:	4b07      	ldr	r3, [pc, #28]	; (800bda8 <ai_platform_network_create+0x2c8>)
 800bd8a:	6812      	ldr	r2, [r2, #0]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d01f      	beq.n	800bdd0 <ai_platform_network_create+0x2f0>
 800bd90:	e7fe      	b.n	800bd90 <ai_platform_network_create+0x2b0>
 800bd92:	bf00      	nop
 800bd94:	e0042000 	.word	0xe0042000
 800bd98:	5c001000 	.word	0x5c001000
 800bd9c:	40023000 	.word	0x40023000
 800bda0:	a1c00100 	.word	0xa1c00100
 800bda4:	f407a5c2 	.word	0xf407a5c2
 800bda8:	b5e8b5cd 	.word	0xb5e8b5cd
 800bdac:	58024000 	.word	0x58024000
 800bdb0:	4a33      	ldr	r2, [pc, #204]	; (800be80 <ai_platform_network_create+0x3a0>)
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bdb8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1fb      	bne.n	800bdb8 <ai_platform_network_create+0x2d8>
 800bdc0:	4b30      	ldr	r3, [pc, #192]	; (800be84 <ai_platform_network_create+0x3a4>)
 800bdc2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800bdc6:	4b30      	ldr	r3, [pc, #192]	; (800be88 <ai_platform_network_create+0x3a8>)
 800bdc8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d12c      	bne.n	800be2a <ai_platform_network_create+0x34a>
 800bdd0:	f7ff f9ae 	bl	800b130 <_ai_platform_release_crc>
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f002 fe37 	bl	800ea4c <ai_version_get>
 800bdde:	4681      	mov	r9, r0
 800bde0:	2200      	movs	r2, #0
 800bde2:	2105      	movs	r1, #5
 800bde4:	2001      	movs	r0, #1
 800bde6:	f002 fe31 	bl	800ea4c <ai_version_get>
 800bdea:	4581      	cmp	r9, r0
 800bdec:	d01e      	beq.n	800be2c <ai_platform_network_create+0x34c>
 800bdee:	f04f 0901 	mov.w	r9, #1
 800bdf2:	e78e      	b.n	800bd12 <ai_platform_network_create+0x232>
 800bdf4:	4b25      	ldr	r3, [pc, #148]	; (800be8c <ai_platform_network_create+0x3ac>)
 800bdf6:	2218      	movs	r2, #24
 800bdf8:	609a      	str	r2, [r3, #8]
 800bdfa:	689a      	ldr	r2, [r3, #8]
 800bdfc:	2a18      	cmp	r2, #24
 800bdfe:	f47f af39 	bne.w	800bc74 <ai_platform_network_create+0x194>
 800be02:	2201      	movs	r2, #1
 800be04:	609a      	str	r2, [r3, #8]
 800be06:	689a      	ldr	r2, [r3, #8]
 800be08:	2a00      	cmp	r2, #0
 800be0a:	d1fc      	bne.n	800be06 <ai_platform_network_create+0x326>
 800be0c:	e6b1      	b.n	800bb72 <ai_platform_network_create+0x92>
 800be0e:	4a1f      	ldr	r2, [pc, #124]	; (800be8c <ai_platform_network_create+0x3ac>)
 800be10:	2301      	movs	r3, #1
 800be12:	6093      	str	r3, [r2, #8]
 800be14:	6893      	ldr	r3, [r2, #8]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1fc      	bne.n	800be14 <ai_platform_network_create+0x334>
 800be1a:	4b1a      	ldr	r3, [pc, #104]	; (800be84 <ai_platform_network_create+0x3a4>)
 800be1c:	6013      	str	r3, [r2, #0]
 800be1e:	4b1a      	ldr	r3, [pc, #104]	; (800be88 <ai_platform_network_create+0x3a8>)
 800be20:	6812      	ldr	r2, [r2, #0]
 800be22:	429a      	cmp	r2, r3
 800be24:	f43f aed6 	beq.w	800bbd4 <ai_platform_network_create+0xf4>
 800be28:	e7fe      	b.n	800be28 <ai_platform_network_create+0x348>
 800be2a:	e7fe      	b.n	800be2a <ai_platform_network_create+0x34a>
 800be2c:	4b18      	ldr	r3, [pc, #96]	; (800be90 <ai_platform_network_create+0x3b0>)
 800be2e:	a801      	add	r0, sp, #4
 800be30:	9301      	str	r3, [sp, #4]
 800be32:	f002 fc51 	bl	800e6d8 <ai_check_custom_types>
 800be36:	b300      	cbz	r0, 800be7a <ai_platform_network_create+0x39a>
 800be38:	2400      	movs	r4, #0
 800be3a:	46a1      	mov	r9, r4
 800be3c:	e76c      	b.n	800bd18 <ai_platform_network_create+0x238>
 800be3e:	4b10      	ldr	r3, [pc, #64]	; (800be80 <ai_platform_network_create+0x3a0>)
 800be40:	2201      	movs	r2, #1
 800be42:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800be46:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800be4a:	2a00      	cmp	r2, #0
 800be4c:	d1fb      	bne.n	800be46 <ai_platform_network_create+0x366>
 800be4e:	4a0d      	ldr	r2, [pc, #52]	; (800be84 <ai_platform_network_create+0x3a4>)
 800be50:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800be54:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800be58:	4b0b      	ldr	r3, [pc, #44]	; (800be88 <ai_platform_network_create+0x3a8>)
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d0b8      	beq.n	800bdd0 <ai_platform_network_create+0x2f0>
 800be5e:	e7fe      	b.n	800be5e <ai_platform_network_create+0x37e>
 800be60:	4b0a      	ldr	r3, [pc, #40]	; (800be8c <ai_platform_network_create+0x3ac>)
 800be62:	2201      	movs	r2, #1
 800be64:	609a      	str	r2, [r3, #8]
 800be66:	689a      	ldr	r2, [r3, #8]
 800be68:	2a00      	cmp	r2, #0
 800be6a:	d1fc      	bne.n	800be66 <ai_platform_network_create+0x386>
 800be6c:	4a05      	ldr	r2, [pc, #20]	; (800be84 <ai_platform_network_create+0x3a4>)
 800be6e:	601a      	str	r2, [r3, #0]
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	4b05      	ldr	r3, [pc, #20]	; (800be88 <ai_platform_network_create+0x3a8>)
 800be74:	429a      	cmp	r2, r3
 800be76:	d0ab      	beq.n	800bdd0 <ai_platform_network_create+0x2f0>
 800be78:	e7fe      	b.n	800be78 <ai_platform_network_create+0x398>
 800be7a:	f04f 0902 	mov.w	r9, #2
 800be7e:	e748      	b.n	800bd12 <ai_platform_network_create+0x232>
 800be80:	58024000 	.word	0x58024000
 800be84:	f407a5c2 	.word	0xf407a5c2
 800be88:	b5e8b5cd 	.word	0xb5e8b5cd
 800be8c:	40023000 	.word	0x40023000
 800be90:	84048403 	.word	0x84048403

0800be94 <ai_platform_network_init>:
 800be94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be98:	2800      	cmp	r0, #0
 800be9a:	d052      	beq.n	800bf42 <ai_platform_network_init+0xae>
 800be9c:	4bab      	ldr	r3, [pc, #684]	; (800c14c <ai_platform_network_init+0x2b8>)
 800be9e:	4604      	mov	r4, r0
 800bea0:	6802      	ldr	r2, [r0, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d14d      	bne.n	800bf42 <ai_platform_network_init+0xae>
 800bea6:	460d      	mov	r5, r1
 800bea8:	f7ff f940 	bl	800b12c <_ai_platform_acquire_crc>
 800beac:	4ba8      	ldr	r3, [pc, #672]	; (800c150 <ai_platform_network_init+0x2bc>)
 800beae:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800beb8:	189a      	adds	r2, r3, r2
 800beba:	2a01      	cmp	r2, #1
 800bebc:	f240 809b 	bls.w	800bff6 <ai_platform_network_init+0x162>
 800bec0:	f240 4249 	movw	r2, #1097	; 0x449
 800bec4:	4293      	cmp	r3, r2
 800bec6:	f000 8096 	beq.w	800bff6 <ai_platform_network_init+0x162>
 800beca:	4aa2      	ldr	r2, [pc, #648]	; (800c154 <ai_platform_network_init+0x2c0>)
 800becc:	6813      	ldr	r3, [r2, #0]
 800bece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bed2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bed6:	f000 809d 	beq.w	800c014 <ai_platform_network_init+0x180>
 800beda:	6813      	ldr	r3, [r2, #0]
 800bedc:	f240 4183 	movw	r1, #1155	; 0x483
 800bee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bee4:	428b      	cmp	r3, r1
 800bee6:	f000 80e4 	beq.w	800c0b2 <ai_platform_network_init+0x21e>
 800beea:	6813      	ldr	r3, [r2, #0]
 800beec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bef0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bef4:	f000 811b 	beq.w	800c12e <ai_platform_network_init+0x29a>
 800bef8:	6813      	ldr	r3, [r2, #0]
 800befa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800befe:	2b00      	cmp	r3, #0
 800bf00:	f000 80f9 	beq.w	800c0f6 <ai_platform_network_init+0x262>
 800bf04:	f7ff f914 	bl	800b130 <_ai_platform_release_crc>
 800bf08:	2d00      	cmp	r5, #0
 800bf0a:	f000 8147 	beq.w	800c19c <ai_platform_network_init+0x308>
 800bf0e:	4b92      	ldr	r3, [pc, #584]	; (800c158 <ai_platform_network_init+0x2c4>)
 800bf10:	682a      	ldr	r2, [r5, #0]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	f040 8090 	bne.w	800c038 <ai_platform_network_init+0x1a4>
 800bf18:	692b      	ldr	r3, [r5, #16]
 800bf1a:	89ae      	ldrh	r6, [r5, #12]
 800bf1c:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 800bf20:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800bf24:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf26:	e9c4 1207 	strd	r1, r2, [r4, #28]
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	84a6      	strh	r6, [r4, #36]	; 0x24
 800bf2e:	4626      	mov	r6, r4
 800bf30:	4620      	mov	r0, r4
 800bf32:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800bf36:	60e3      	str	r3, [r4, #12]
 800bf38:	f002 fbf6 	bl	800e728 <ai_layers_init_all>
 800bf3c:	4630      	mov	r0, r6
 800bf3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf42:	f7ff f8f3 	bl	800b12c <_ai_platform_acquire_crc>
 800bf46:	4b82      	ldr	r3, [pc, #520]	; (800c150 <ai_platform_network_init+0x2bc>)
 800bf48:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf52:	185a      	adds	r2, r3, r1
 800bf54:	2a01      	cmp	r2, #1
 800bf56:	d92b      	bls.n	800bfb0 <ai_platform_network_init+0x11c>
 800bf58:	f240 4249 	movw	r2, #1097	; 0x449
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d027      	beq.n	800bfb0 <ai_platform_network_init+0x11c>
 800bf60:	4a7c      	ldr	r2, [pc, #496]	; (800c154 <ai_platform_network_init+0x2c0>)
 800bf62:	6813      	ldr	r3, [r2, #0]
 800bf64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf68:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800bf6c:	d02d      	beq.n	800bfca <ai_platform_network_init+0x136>
 800bf6e:	6813      	ldr	r3, [r2, #0]
 800bf70:	f240 4183 	movw	r1, #1155	; 0x483
 800bf74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf78:	428b      	cmp	r3, r1
 800bf7a:	f000 8089 	beq.w	800c090 <ai_platform_network_init+0x1fc>
 800bf7e:	6813      	ldr	r3, [r2, #0]
 800bf80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf84:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800bf88:	f000 80c3 	beq.w	800c112 <ai_platform_network_init+0x27e>
 800bf8c:	6813      	ldr	r3, [r2, #0]
 800bf8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d129      	bne.n	800bfea <ai_platform_network_init+0x156>
 800bf96:	4a71      	ldr	r2, [pc, #452]	; (800c15c <ai_platform_network_init+0x2c8>)
 800bf98:	2301      	movs	r3, #1
 800bf9a:	6093      	str	r3, [r2, #8]
 800bf9c:	6893      	ldr	r3, [r2, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1fc      	bne.n	800bf9c <ai_platform_network_init+0x108>
 800bfa2:	496f      	ldr	r1, [pc, #444]	; (800c160 <ai_platform_network_init+0x2cc>)
 800bfa4:	4b6f      	ldr	r3, [pc, #444]	; (800c164 <ai_platform_network_init+0x2d0>)
 800bfa6:	6011      	str	r1, [r2, #0]
 800bfa8:	6812      	ldr	r2, [r2, #0]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d01d      	beq.n	800bfea <ai_platform_network_init+0x156>
 800bfae:	e7fe      	b.n	800bfae <ai_platform_network_init+0x11a>
 800bfb0:	4a6a      	ldr	r2, [pc, #424]	; (800c15c <ai_platform_network_init+0x2c8>)
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	6093      	str	r3, [r2, #8]
 800bfb6:	6893      	ldr	r3, [r2, #8]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1fc      	bne.n	800bfb6 <ai_platform_network_init+0x122>
 800bfbc:	4968      	ldr	r1, [pc, #416]	; (800c160 <ai_platform_network_init+0x2cc>)
 800bfbe:	4b69      	ldr	r3, [pc, #420]	; (800c164 <ai_platform_network_init+0x2d0>)
 800bfc0:	6011      	str	r1, [r2, #0]
 800bfc2:	6812      	ldr	r2, [r2, #0]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d010      	beq.n	800bfea <ai_platform_network_init+0x156>
 800bfc8:	e7fe      	b.n	800bfc8 <ai_platform_network_init+0x134>
 800bfca:	4a67      	ldr	r2, [pc, #412]	; (800c168 <ai_platform_network_init+0x2d4>)
 800bfcc:	2301      	movs	r3, #1
 800bfce:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800bfd2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d1fb      	bne.n	800bfd2 <ai_platform_network_init+0x13e>
 800bfda:	4961      	ldr	r1, [pc, #388]	; (800c160 <ai_platform_network_init+0x2cc>)
 800bfdc:	4b61      	ldr	r3, [pc, #388]	; (800c164 <ai_platform_network_init+0x2d0>)
 800bfde:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800bfe2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d113      	bne.n	800c012 <ai_platform_network_init+0x17e>
 800bfea:	2600      	movs	r6, #0
 800bfec:	f7ff f8a0 	bl	800b130 <_ai_platform_release_crc>
 800bff0:	4630      	mov	r0, r6
 800bff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bff6:	4a59      	ldr	r2, [pc, #356]	; (800c15c <ai_platform_network_init+0x2c8>)
 800bff8:	2301      	movs	r3, #1
 800bffa:	6093      	str	r3, [r2, #8]
 800bffc:	6893      	ldr	r3, [r2, #8]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d1fc      	bne.n	800bffc <ai_platform_network_init+0x168>
 800c002:	4b57      	ldr	r3, [pc, #348]	; (800c160 <ai_platform_network_init+0x2cc>)
 800c004:	6013      	str	r3, [r2, #0]
 800c006:	4b57      	ldr	r3, [pc, #348]	; (800c164 <ai_platform_network_init+0x2d0>)
 800c008:	6812      	ldr	r2, [r2, #0]
 800c00a:	429a      	cmp	r2, r3
 800c00c:	f43f af7a 	beq.w	800bf04 <ai_platform_network_init+0x70>
 800c010:	e7fe      	b.n	800c010 <ai_platform_network_init+0x17c>
 800c012:	e7fe      	b.n	800c012 <ai_platform_network_init+0x17e>
 800c014:	4a54      	ldr	r2, [pc, #336]	; (800c168 <ai_platform_network_init+0x2d4>)
 800c016:	2301      	movs	r3, #1
 800c018:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c01c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1fb      	bne.n	800c01c <ai_platform_network_init+0x188>
 800c024:	4b4e      	ldr	r3, [pc, #312]	; (800c160 <ai_platform_network_init+0x2cc>)
 800c026:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c02a:	4b4e      	ldr	r3, [pc, #312]	; (800c164 <ai_platform_network_init+0x2d0>)
 800c02c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c030:	429a      	cmp	r2, r3
 800c032:	f43f af67 	beq.w	800bf04 <ai_platform_network_init+0x70>
 800c036:	e7fe      	b.n	800c036 <ai_platform_network_init+0x1a2>
 800c038:	2101      	movs	r1, #1
 800c03a:	4628      	mov	r0, r5
 800c03c:	f105 081c 	add.w	r8, r5, #28
 800c040:	686e      	ldr	r6, [r5, #4]
 800c042:	f7ff f835 	bl	800b0b0 <ai_buffer_get_size>
 800c046:	4607      	mov	r7, r0
 800c048:	2101      	movs	r1, #1
 800c04a:	4640      	mov	r0, r8
 800c04c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800c050:	f7ff f82e 	bl	800b0b0 <ai_buffer_get_size>
 800c054:	2f00      	cmp	r7, #0
 800c056:	d13e      	bne.n	800c0d6 <ai_platform_network_init+0x242>
 800c058:	2800      	cmp	r0, #0
 800c05a:	f000 808e 	beq.w	800c17a <ai_platform_network_init+0x2e6>
 800c05e:	f1b9 0f00 	cmp.w	r9, #0
 800c062:	f000 8094 	beq.w	800c18e <ai_platform_network_init+0x2fa>
 800c066:	f04f 0c01 	mov.w	ip, #1
 800c06a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800c06c:	2600      	movs	r6, #0
 800c06e:	83e7      	strh	r7, [r4, #30]
 800c070:	4563      	cmp	r3, ip
 800c072:	83a6      	strh	r6, [r4, #28]
 800c074:	d37a      	bcc.n	800c16c <ai_platform_network_init+0x2d8>
 800c076:	f1bc 0f00 	cmp.w	ip, #0
 800c07a:	f000 809c 	beq.w	800c1b6 <ai_platform_network_init+0x322>
 800c07e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800c080:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800c084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c086:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800c08a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c08e:	e74c      	b.n	800bf2a <ai_platform_network_init+0x96>
 800c090:	4a35      	ldr	r2, [pc, #212]	; (800c168 <ai_platform_network_init+0x2d4>)
 800c092:	2301      	movs	r3, #1
 800c094:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c098:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1fb      	bne.n	800c098 <ai_platform_network_init+0x204>
 800c0a0:	492f      	ldr	r1, [pc, #188]	; (800c160 <ai_platform_network_init+0x2cc>)
 800c0a2:	4b30      	ldr	r3, [pc, #192]	; (800c164 <ai_platform_network_init+0x2d0>)
 800c0a4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c0a8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c0ac:	429a      	cmp	r2, r3
 800c0ae:	d09c      	beq.n	800bfea <ai_platform_network_init+0x156>
 800c0b0:	e7fe      	b.n	800c0b0 <ai_platform_network_init+0x21c>
 800c0b2:	4a2d      	ldr	r2, [pc, #180]	; (800c168 <ai_platform_network_init+0x2d4>)
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c0ba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d1fb      	bne.n	800c0ba <ai_platform_network_init+0x226>
 800c0c2:	4b27      	ldr	r3, [pc, #156]	; (800c160 <ai_platform_network_init+0x2cc>)
 800c0c4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c0c8:	4b26      	ldr	r3, [pc, #152]	; (800c164 <ai_platform_network_init+0x2d0>)
 800c0ca:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	f43f af18 	beq.w	800bf04 <ai_platform_network_init+0x70>
 800c0d4:	e7fe      	b.n	800c0d4 <ai_platform_network_init+0x240>
 800c0d6:	2800      	cmp	r0, #0
 800c0d8:	d153      	bne.n	800c182 <ai_platform_network_init+0x2ee>
 800c0da:	4680      	mov	r8, r0
 800c0dc:	4684      	mov	ip, r0
 800c0de:	2e00      	cmp	r6, #0
 800c0e0:	d063      	beq.n	800c1aa <ai_platform_network_init+0x316>
 800c0e2:	8be6      	ldrh	r6, [r4, #30]
 800c0e4:	2e00      	cmp	r6, #0
 800c0e6:	d168      	bne.n	800c1ba <ai_platform_network_init+0x326>
 800c0e8:	2212      	movs	r2, #18
 800c0ea:	2116      	movs	r1, #22
 800c0ec:	f104 0010 	add.w	r0, r4, #16
 800c0f0:	f000 fc7c 	bl	800c9ec <core_set_error>
 800c0f4:	e77c      	b.n	800bff0 <ai_platform_network_init+0x15c>
 800c0f6:	4a19      	ldr	r2, [pc, #100]	; (800c15c <ai_platform_network_init+0x2c8>)
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	6093      	str	r3, [r2, #8]
 800c0fc:	6893      	ldr	r3, [r2, #8]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1fc      	bne.n	800c0fc <ai_platform_network_init+0x268>
 800c102:	4b17      	ldr	r3, [pc, #92]	; (800c160 <ai_platform_network_init+0x2cc>)
 800c104:	6013      	str	r3, [r2, #0]
 800c106:	4b17      	ldr	r3, [pc, #92]	; (800c164 <ai_platform_network_init+0x2d0>)
 800c108:	6812      	ldr	r2, [r2, #0]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	f43f aefa 	beq.w	800bf04 <ai_platform_network_init+0x70>
 800c110:	e7fe      	b.n	800c110 <ai_platform_network_init+0x27c>
 800c112:	4a12      	ldr	r2, [pc, #72]	; (800c15c <ai_platform_network_init+0x2c8>)
 800c114:	2301      	movs	r3, #1
 800c116:	6093      	str	r3, [r2, #8]
 800c118:	6893      	ldr	r3, [r2, #8]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1fc      	bne.n	800c118 <ai_platform_network_init+0x284>
 800c11e:	4910      	ldr	r1, [pc, #64]	; (800c160 <ai_platform_network_init+0x2cc>)
 800c120:	4b10      	ldr	r3, [pc, #64]	; (800c164 <ai_platform_network_init+0x2d0>)
 800c122:	6011      	str	r1, [r2, #0]
 800c124:	6812      	ldr	r2, [r2, #0]
 800c126:	429a      	cmp	r2, r3
 800c128:	f43f af5f 	beq.w	800bfea <ai_platform_network_init+0x156>
 800c12c:	e7fe      	b.n	800c12c <ai_platform_network_init+0x298>
 800c12e:	4a0b      	ldr	r2, [pc, #44]	; (800c15c <ai_platform_network_init+0x2c8>)
 800c130:	2301      	movs	r3, #1
 800c132:	6093      	str	r3, [r2, #8]
 800c134:	6893      	ldr	r3, [r2, #8]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1fc      	bne.n	800c134 <ai_platform_network_init+0x2a0>
 800c13a:	4b09      	ldr	r3, [pc, #36]	; (800c160 <ai_platform_network_init+0x2cc>)
 800c13c:	6013      	str	r3, [r2, #0]
 800c13e:	4b09      	ldr	r3, [pc, #36]	; (800c164 <ai_platform_network_init+0x2d0>)
 800c140:	6812      	ldr	r2, [r2, #0]
 800c142:	429a      	cmp	r2, r3
 800c144:	f43f aede 	beq.w	800bf04 <ai_platform_network_init+0x70>
 800c148:	e7fe      	b.n	800c148 <ai_platform_network_init+0x2b4>
 800c14a:	bf00      	nop
 800c14c:	a1c00100 	.word	0xa1c00100
 800c150:	e0042000 	.word	0xe0042000
 800c154:	5c001000 	.word	0x5c001000
 800c158:	a1facade 	.word	0xa1facade
 800c15c:	40023000 	.word	0x40023000
 800c160:	f407a5c2 	.word	0xf407a5c2
 800c164:	b5e8b5cd 	.word	0xb5e8b5cd
 800c168:	58024000 	.word	0x58024000
 800c16c:	2213      	movs	r2, #19
 800c16e:	2116      	movs	r1, #22
 800c170:	f104 0010 	add.w	r0, r4, #16
 800c174:	f000 fc3a 	bl	800c9ec <core_set_error>
 800c178:	e73a      	b.n	800bff0 <ai_platform_network_init+0x15c>
 800c17a:	4607      	mov	r7, r0
 800c17c:	4680      	mov	r8, r0
 800c17e:	4684      	mov	ip, r0
 800c180:	e773      	b.n	800c06a <ai_platform_network_init+0x1d6>
 800c182:	f1b9 0f00 	cmp.w	r9, #0
 800c186:	d002      	beq.n	800c18e <ai_platform_network_init+0x2fa>
 800c188:	f04f 0c01 	mov.w	ip, #1
 800c18c:	e7a7      	b.n	800c0de <ai_platform_network_init+0x24a>
 800c18e:	2110      	movs	r1, #16
 800c190:	2213      	movs	r2, #19
 800c192:	2600      	movs	r6, #0
 800c194:	1860      	adds	r0, r4, r1
 800c196:	f000 fc29 	bl	800c9ec <core_set_error>
 800c19a:	e729      	b.n	800bff0 <ai_platform_network_init+0x15c>
 800c19c:	2110      	movs	r1, #16
 800c19e:	2211      	movs	r2, #17
 800c1a0:	462e      	mov	r6, r5
 800c1a2:	1860      	adds	r0, r4, r1
 800c1a4:	f000 fc22 	bl	800c9ec <core_set_error>
 800c1a8:	e722      	b.n	800bff0 <ai_platform_network_init+0x15c>
 800c1aa:	2110      	movs	r1, #16
 800c1ac:	2212      	movs	r2, #18
 800c1ae:	1860      	adds	r0, r4, r1
 800c1b0:	f000 fc1c 	bl	800c9ec <core_set_error>
 800c1b4:	e71c      	b.n	800bff0 <ai_platform_network_init+0x15c>
 800c1b6:	4666      	mov	r6, ip
 800c1b8:	e6b7      	b.n	800bf2a <ai_platform_network_init+0x96>
 800c1ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c1bc:	6a26      	ldr	r6, [r4, #32]
 800c1be:	2701      	movs	r7, #1
 800c1c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c1c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c1c6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800c1ca:	e74e      	b.n	800c06a <ai_platform_network_init+0x1d6>

0800c1cc <ai_platform_network_post_init>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d04e      	beq.n	800c270 <ai_platform_network_post_init+0xa4>
 800c1d2:	4b8c      	ldr	r3, [pc, #560]	; (800c404 <ai_platform_network_post_init+0x238>)
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	6802      	ldr	r2, [r0, #0]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d149      	bne.n	800c270 <ai_platform_network_post_init+0xa4>
 800c1dc:	f7fe ffa6 	bl	800b12c <_ai_platform_acquire_crc>
 800c1e0:	4b89      	ldr	r3, [pc, #548]	; (800c408 <ai_platform_network_post_init+0x23c>)
 800c1e2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c1ec:	189a      	adds	r2, r3, r2
 800c1ee:	2a01      	cmp	r2, #1
 800c1f0:	f240 8095 	bls.w	800c31e <ai_platform_network_post_init+0x152>
 800c1f4:	f240 4249 	movw	r2, #1097	; 0x449
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	f000 8090 	beq.w	800c31e <ai_platform_network_post_init+0x152>
 800c1fe:	4a83      	ldr	r2, [pc, #524]	; (800c40c <ai_platform_network_post_init+0x240>)
 800c200:	6813      	ldr	r3, [r2, #0]
 800c202:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c206:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c20a:	f000 8096 	beq.w	800c33a <ai_platform_network_post_init+0x16e>
 800c20e:	6813      	ldr	r3, [r2, #0]
 800c210:	f240 4183 	movw	r1, #1155	; 0x483
 800c214:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c218:	428b      	cmp	r3, r1
 800c21a:	f000 80b8 	beq.w	800c38e <ai_platform_network_post_init+0x1c2>
 800c21e:	6813      	ldr	r3, [r2, #0]
 800c220:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c224:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c228:	f000 80de 	beq.w	800c3e8 <ai_platform_network_post_init+0x21c>
 800c22c:	6813      	ldr	r3, [r2, #0]
 800c22e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c232:	2b00      	cmp	r3, #0
 800c234:	f000 80bd 	beq.w	800c3b2 <ai_platform_network_post_init+0x1e6>
 800c238:	f7fe ff7a 	bl	800b130 <_ai_platform_release_crc>
 800c23c:	68e3      	ldr	r3, [r4, #12]
 800c23e:	f013 0502 	ands.w	r5, r3, #2
 800c242:	f000 808c 	beq.w	800c35e <ai_platform_network_post_init+0x192>
 800c246:	4620      	mov	r0, r4
 800c248:	f002 fa7c 	bl	800e744 <ai_layers_post_init_all>
 800c24c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c24e:	b16b      	cbz	r3, 800c26c <ai_platform_network_post_init+0xa0>
 800c250:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800c252:	e007      	b.n	800c264 <ai_platform_network_post_init+0x98>
 800c254:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800c258:	4798      	blx	r3
 800c25a:	692b      	ldr	r3, [r5, #16]
 800c25c:	b133      	cbz	r3, 800c26c <ai_platform_network_post_init+0xa0>
 800c25e:	42ab      	cmp	r3, r5
 800c260:	461d      	mov	r5, r3
 800c262:	d003      	beq.n	800c26c <ai_platform_network_post_init+0xa0>
 800c264:	4629      	mov	r1, r5
 800c266:	2000      	movs	r0, #0
 800c268:	2d00      	cmp	r5, #0
 800c26a:	d1f3      	bne.n	800c254 <ai_platform_network_post_init+0x88>
 800c26c:	2001      	movs	r0, #1
 800c26e:	bd38      	pop	{r3, r4, r5, pc}
 800c270:	f7fe ff5c 	bl	800b12c <_ai_platform_acquire_crc>
 800c274:	4b64      	ldr	r3, [pc, #400]	; (800c408 <ai_platform_network_post_init+0x23c>)
 800c276:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c280:	185a      	adds	r2, r3, r1
 800c282:	2a01      	cmp	r2, #1
 800c284:	d92a      	bls.n	800c2dc <ai_platform_network_post_init+0x110>
 800c286:	f240 4249 	movw	r2, #1097	; 0x449
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d026      	beq.n	800c2dc <ai_platform_network_post_init+0x110>
 800c28e:	4a5f      	ldr	r2, [pc, #380]	; (800c40c <ai_platform_network_post_init+0x240>)
 800c290:	6813      	ldr	r3, [r2, #0]
 800c292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c296:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c29a:	d02c      	beq.n	800c2f6 <ai_platform_network_post_init+0x12a>
 800c29c:	6813      	ldr	r3, [r2, #0]
 800c29e:	f240 4183 	movw	r1, #1155	; 0x483
 800c2a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c2a6:	428b      	cmp	r3, r1
 800c2a8:	d060      	beq.n	800c36c <ai_platform_network_post_init+0x1a0>
 800c2aa:	6813      	ldr	r3, [r2, #0]
 800c2ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c2b0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c2b4:	f000 808b 	beq.w	800c3ce <ai_platform_network_post_init+0x202>
 800c2b8:	6813      	ldr	r3, [r2, #0]
 800c2ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d129      	bne.n	800c316 <ai_platform_network_post_init+0x14a>
 800c2c2:	4a53      	ldr	r2, [pc, #332]	; (800c410 <ai_platform_network_post_init+0x244>)
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	6093      	str	r3, [r2, #8]
 800c2c8:	6893      	ldr	r3, [r2, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d1fc      	bne.n	800c2c8 <ai_platform_network_post_init+0xfc>
 800c2ce:	4951      	ldr	r1, [pc, #324]	; (800c414 <ai_platform_network_post_init+0x248>)
 800c2d0:	4b51      	ldr	r3, [pc, #324]	; (800c418 <ai_platform_network_post_init+0x24c>)
 800c2d2:	6011      	str	r1, [r2, #0]
 800c2d4:	6812      	ldr	r2, [r2, #0]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d01d      	beq.n	800c316 <ai_platform_network_post_init+0x14a>
 800c2da:	e7fe      	b.n	800c2da <ai_platform_network_post_init+0x10e>
 800c2dc:	4a4c      	ldr	r2, [pc, #304]	; (800c410 <ai_platform_network_post_init+0x244>)
 800c2de:	2301      	movs	r3, #1
 800c2e0:	6093      	str	r3, [r2, #8]
 800c2e2:	6893      	ldr	r3, [r2, #8]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1fc      	bne.n	800c2e2 <ai_platform_network_post_init+0x116>
 800c2e8:	494a      	ldr	r1, [pc, #296]	; (800c414 <ai_platform_network_post_init+0x248>)
 800c2ea:	4b4b      	ldr	r3, [pc, #300]	; (800c418 <ai_platform_network_post_init+0x24c>)
 800c2ec:	6011      	str	r1, [r2, #0]
 800c2ee:	6812      	ldr	r2, [r2, #0]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d010      	beq.n	800c316 <ai_platform_network_post_init+0x14a>
 800c2f4:	e7fe      	b.n	800c2f4 <ai_platform_network_post_init+0x128>
 800c2f6:	4a49      	ldr	r2, [pc, #292]	; (800c41c <ai_platform_network_post_init+0x250>)
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c2fe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1fb      	bne.n	800c2fe <ai_platform_network_post_init+0x132>
 800c306:	4943      	ldr	r1, [pc, #268]	; (800c414 <ai_platform_network_post_init+0x248>)
 800c308:	4b43      	ldr	r3, [pc, #268]	; (800c418 <ai_platform_network_post_init+0x24c>)
 800c30a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c30e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c312:	429a      	cmp	r2, r3
 800c314:	d110      	bne.n	800c338 <ai_platform_network_post_init+0x16c>
 800c316:	f7fe ff0b 	bl	800b130 <_ai_platform_release_crc>
 800c31a:	2000      	movs	r0, #0
 800c31c:	bd38      	pop	{r3, r4, r5, pc}
 800c31e:	4a3c      	ldr	r2, [pc, #240]	; (800c410 <ai_platform_network_post_init+0x244>)
 800c320:	2301      	movs	r3, #1
 800c322:	6093      	str	r3, [r2, #8]
 800c324:	6893      	ldr	r3, [r2, #8]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d1fc      	bne.n	800c324 <ai_platform_network_post_init+0x158>
 800c32a:	493a      	ldr	r1, [pc, #232]	; (800c414 <ai_platform_network_post_init+0x248>)
 800c32c:	4b3a      	ldr	r3, [pc, #232]	; (800c418 <ai_platform_network_post_init+0x24c>)
 800c32e:	6011      	str	r1, [r2, #0]
 800c330:	6812      	ldr	r2, [r2, #0]
 800c332:	429a      	cmp	r2, r3
 800c334:	d080      	beq.n	800c238 <ai_platform_network_post_init+0x6c>
 800c336:	e7fe      	b.n	800c336 <ai_platform_network_post_init+0x16a>
 800c338:	e7fe      	b.n	800c338 <ai_platform_network_post_init+0x16c>
 800c33a:	4a38      	ldr	r2, [pc, #224]	; (800c41c <ai_platform_network_post_init+0x250>)
 800c33c:	2301      	movs	r3, #1
 800c33e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c342:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1fb      	bne.n	800c342 <ai_platform_network_post_init+0x176>
 800c34a:	4932      	ldr	r1, [pc, #200]	; (800c414 <ai_platform_network_post_init+0x248>)
 800c34c:	4b32      	ldr	r3, [pc, #200]	; (800c418 <ai_platform_network_post_init+0x24c>)
 800c34e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c352:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c356:	429a      	cmp	r2, r3
 800c358:	f43f af6e 	beq.w	800c238 <ai_platform_network_post_init+0x6c>
 800c35c:	e7fe      	b.n	800c35c <ai_platform_network_post_init+0x190>
 800c35e:	2210      	movs	r2, #16
 800c360:	2111      	movs	r1, #17
 800c362:	18a0      	adds	r0, r4, r2
 800c364:	f000 fb42 	bl	800c9ec <core_set_error>
 800c368:	4628      	mov	r0, r5
 800c36a:	bd38      	pop	{r3, r4, r5, pc}
 800c36c:	4a2b      	ldr	r2, [pc, #172]	; (800c41c <ai_platform_network_post_init+0x250>)
 800c36e:	2301      	movs	r3, #1
 800c370:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c374:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1fb      	bne.n	800c374 <ai_platform_network_post_init+0x1a8>
 800c37c:	4925      	ldr	r1, [pc, #148]	; (800c414 <ai_platform_network_post_init+0x248>)
 800c37e:	4b26      	ldr	r3, [pc, #152]	; (800c418 <ai_platform_network_post_init+0x24c>)
 800c380:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c384:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c388:	429a      	cmp	r2, r3
 800c38a:	d0c4      	beq.n	800c316 <ai_platform_network_post_init+0x14a>
 800c38c:	e7fe      	b.n	800c38c <ai_platform_network_post_init+0x1c0>
 800c38e:	4a23      	ldr	r2, [pc, #140]	; (800c41c <ai_platform_network_post_init+0x250>)
 800c390:	2301      	movs	r3, #1
 800c392:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c396:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1fb      	bne.n	800c396 <ai_platform_network_post_init+0x1ca>
 800c39e:	491d      	ldr	r1, [pc, #116]	; (800c414 <ai_platform_network_post_init+0x248>)
 800c3a0:	4b1d      	ldr	r3, [pc, #116]	; (800c418 <ai_platform_network_post_init+0x24c>)
 800c3a2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800c3a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	f43f af44 	beq.w	800c238 <ai_platform_network_post_init+0x6c>
 800c3b0:	e7fe      	b.n	800c3b0 <ai_platform_network_post_init+0x1e4>
 800c3b2:	4a17      	ldr	r2, [pc, #92]	; (800c410 <ai_platform_network_post_init+0x244>)
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	6093      	str	r3, [r2, #8]
 800c3b8:	6893      	ldr	r3, [r2, #8]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1fc      	bne.n	800c3b8 <ai_platform_network_post_init+0x1ec>
 800c3be:	4915      	ldr	r1, [pc, #84]	; (800c414 <ai_platform_network_post_init+0x248>)
 800c3c0:	4b15      	ldr	r3, [pc, #84]	; (800c418 <ai_platform_network_post_init+0x24c>)
 800c3c2:	6011      	str	r1, [r2, #0]
 800c3c4:	6812      	ldr	r2, [r2, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	f43f af36 	beq.w	800c238 <ai_platform_network_post_init+0x6c>
 800c3cc:	e7fe      	b.n	800c3cc <ai_platform_network_post_init+0x200>
 800c3ce:	4a10      	ldr	r2, [pc, #64]	; (800c410 <ai_platform_network_post_init+0x244>)
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	6093      	str	r3, [r2, #8]
 800c3d4:	6893      	ldr	r3, [r2, #8]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d1fc      	bne.n	800c3d4 <ai_platform_network_post_init+0x208>
 800c3da:	490e      	ldr	r1, [pc, #56]	; (800c414 <ai_platform_network_post_init+0x248>)
 800c3dc:	4b0e      	ldr	r3, [pc, #56]	; (800c418 <ai_platform_network_post_init+0x24c>)
 800c3de:	6011      	str	r1, [r2, #0]
 800c3e0:	6812      	ldr	r2, [r2, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d097      	beq.n	800c316 <ai_platform_network_post_init+0x14a>
 800c3e6:	e7fe      	b.n	800c3e6 <ai_platform_network_post_init+0x21a>
 800c3e8:	4a09      	ldr	r2, [pc, #36]	; (800c410 <ai_platform_network_post_init+0x244>)
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	6093      	str	r3, [r2, #8]
 800c3ee:	6893      	ldr	r3, [r2, #8]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d1fc      	bne.n	800c3ee <ai_platform_network_post_init+0x222>
 800c3f4:	4907      	ldr	r1, [pc, #28]	; (800c414 <ai_platform_network_post_init+0x248>)
 800c3f6:	4b08      	ldr	r3, [pc, #32]	; (800c418 <ai_platform_network_post_init+0x24c>)
 800c3f8:	6011      	str	r1, [r2, #0]
 800c3fa:	6812      	ldr	r2, [r2, #0]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	f43f af1b 	beq.w	800c238 <ai_platform_network_post_init+0x6c>
 800c402:	e7fe      	b.n	800c402 <ai_platform_network_post_init+0x236>
 800c404:	a1c00100 	.word	0xa1c00100
 800c408:	e0042000 	.word	0xe0042000
 800c40c:	5c001000 	.word	0x5c001000
 800c410:	40023000 	.word	0x40023000
 800c414:	f407a5c2 	.word	0xf407a5c2
 800c418:	b5e8b5cd 	.word	0xb5e8b5cd
 800c41c:	58024000 	.word	0x58024000

0800c420 <ai_platform_network_process>:
 800c420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c424:	b085      	sub	sp, #20
 800c426:	460e      	mov	r6, r1
 800c428:	4605      	mov	r5, r0
 800c42a:	9201      	str	r2, [sp, #4]
 800c42c:	b120      	cbz	r0, 800c438 <ai_platform_network_process+0x18>
 800c42e:	4b24      	ldr	r3, [pc, #144]	; (800c4c0 <ai_platform_network_process+0xa0>)
 800c430:	6802      	ldr	r2, [r0, #0]
 800c432:	429a      	cmp	r2, r3
 800c434:	bf18      	it	ne
 800c436:	2500      	movne	r5, #0
 800c438:	f7fe fe78 	bl	800b12c <_ai_platform_acquire_crc>
 800c43c:	4b21      	ldr	r3, [pc, #132]	; (800c4c4 <ai_platform_network_process+0xa4>)
 800c43e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c448:	185a      	adds	r2, r3, r1
 800c44a:	2a01      	cmp	r2, #1
 800c44c:	d92b      	bls.n	800c4a6 <ai_platform_network_process+0x86>
 800c44e:	f240 4249 	movw	r2, #1097	; 0x449
 800c452:	4293      	cmp	r3, r2
 800c454:	d027      	beq.n	800c4a6 <ai_platform_network_process+0x86>
 800c456:	4a1c      	ldr	r2, [pc, #112]	; (800c4c8 <ai_platform_network_process+0xa8>)
 800c458:	6813      	ldr	r3, [r2, #0]
 800c45a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c45e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800c462:	d039      	beq.n	800c4d8 <ai_platform_network_process+0xb8>
 800c464:	6813      	ldr	r3, [r2, #0]
 800c466:	f240 4183 	movw	r1, #1155	; 0x483
 800c46a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c46e:	428b      	cmp	r3, r1
 800c470:	f000 819c 	beq.w	800c7ac <ai_platform_network_process+0x38c>
 800c474:	6813      	ldr	r3, [r2, #0]
 800c476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c47a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800c47e:	f000 8179 	beq.w	800c774 <ai_platform_network_process+0x354>
 800c482:	6813      	ldr	r3, [r2, #0]
 800c484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d136      	bne.n	800c4fa <ai_platform_network_process+0xda>
 800c48c:	4a0f      	ldr	r2, [pc, #60]	; (800c4cc <ai_platform_network_process+0xac>)
 800c48e:	2301      	movs	r3, #1
 800c490:	6093      	str	r3, [r2, #8]
 800c492:	6893      	ldr	r3, [r2, #8]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d1fc      	bne.n	800c492 <ai_platform_network_process+0x72>
 800c498:	4b0d      	ldr	r3, [pc, #52]	; (800c4d0 <ai_platform_network_process+0xb0>)
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	4b0d      	ldr	r3, [pc, #52]	; (800c4d4 <ai_platform_network_process+0xb4>)
 800c49e:	6812      	ldr	r2, [r2, #0]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d02a      	beq.n	800c4fa <ai_platform_network_process+0xda>
 800c4a4:	e7fe      	b.n	800c4a4 <ai_platform_network_process+0x84>
 800c4a6:	4a09      	ldr	r2, [pc, #36]	; (800c4cc <ai_platform_network_process+0xac>)
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	6093      	str	r3, [r2, #8]
 800c4ac:	6893      	ldr	r3, [r2, #8]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d1fc      	bne.n	800c4ac <ai_platform_network_process+0x8c>
 800c4b2:	4b07      	ldr	r3, [pc, #28]	; (800c4d0 <ai_platform_network_process+0xb0>)
 800c4b4:	6013      	str	r3, [r2, #0]
 800c4b6:	4b07      	ldr	r3, [pc, #28]	; (800c4d4 <ai_platform_network_process+0xb4>)
 800c4b8:	6812      	ldr	r2, [r2, #0]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d01d      	beq.n	800c4fa <ai_platform_network_process+0xda>
 800c4be:	e7fe      	b.n	800c4be <ai_platform_network_process+0x9e>
 800c4c0:	a1c00100 	.word	0xa1c00100
 800c4c4:	e0042000 	.word	0xe0042000
 800c4c8:	5c001000 	.word	0x5c001000
 800c4cc:	40023000 	.word	0x40023000
 800c4d0:	f407a5c2 	.word	0xf407a5c2
 800c4d4:	b5e8b5cd 	.word	0xb5e8b5cd
 800c4d8:	4ab0      	ldr	r2, [pc, #704]	; (800c79c <ai_platform_network_process+0x37c>)
 800c4da:	2301      	movs	r3, #1
 800c4dc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c4e0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d1fb      	bne.n	800c4e0 <ai_platform_network_process+0xc0>
 800c4e8:	4bad      	ldr	r3, [pc, #692]	; (800c7a0 <ai_platform_network_process+0x380>)
 800c4ea:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c4ee:	4bad      	ldr	r3, [pc, #692]	; (800c7a4 <ai_platform_network_process+0x384>)
 800c4f0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	f040 812b 	bne.w	800c750 <ai_platform_network_process+0x330>
 800c4fa:	f7fe fe19 	bl	800b130 <_ai_platform_release_crc>
 800c4fe:	2d00      	cmp	r5, #0
 800c500:	f000 8172 	beq.w	800c7e8 <ai_platform_network_process+0x3c8>
 800c504:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800c506:	2b00      	cmp	r3, #0
 800c508:	f000 8123 	beq.w	800c752 <ai_platform_network_process+0x332>
 800c50c:	68eb      	ldr	r3, [r5, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800c514:	f003 0303 	and.w	r3, r3, #3
 800c518:	616a      	str	r2, [r5, #20]
 800c51a:	2b03      	cmp	r3, #3
 800c51c:	f040 811f 	bne.w	800c75e <ai_platform_network_process+0x33e>
 800c520:	2e00      	cmp	r6, #0
 800c522:	f000 8156 	beq.w	800c7d2 <ai_platform_network_process+0x3b2>
 800c526:	fab8 f788 	clz	r7, r8
 800c52a:	097f      	lsrs	r7, r7, #5
 800c52c:	f1b8 0f00 	cmp.w	r8, #0
 800c530:	f000 814f 	beq.w	800c7d2 <ai_platform_network_process+0x3b2>
 800c534:	f8b8 3000 	ldrh.w	r3, [r8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f000 814a 	beq.w	800c7d2 <ai_platform_network_process+0x3b2>
 800c53e:	69b3      	ldr	r3, [r6, #24]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800c546:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d072      	beq.n	800c634 <ai_platform_network_process+0x214>
 800c54e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800c552:	2c00      	cmp	r4, #0
 800c554:	d06e      	beq.n	800c634 <ai_platform_network_process+0x214>
 800c556:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c55a:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800c55e:	f8d3 a000 	ldr.w	sl, [r3]
 800c562:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800c566:	f000 8133 	beq.w	800c7d0 <ai_platform_network_process+0x3b0>
 800c56a:	69a3      	ldr	r3, [r4, #24]
 800c56c:	2101      	movs	r1, #1
 800c56e:	4630      	mov	r0, r6
 800c570:	685d      	ldr	r5, [r3, #4]
 800c572:	f7fe fd9d 	bl	800b0b0 <ai_buffer_get_size>
 800c576:	4285      	cmp	r5, r0
 800c578:	f0c0 8138 	bcc.w	800c7ec <ai_platform_network_process+0x3cc>
 800c57c:	68e0      	ldr	r0, [r4, #12]
 800c57e:	69b1      	ldr	r1, [r6, #24]
 800c580:	68c2      	ldr	r2, [r0, #12]
 800c582:	68cb      	ldr	r3, [r1, #12]
 800c584:	429a      	cmp	r2, r3
 800c586:	f040 8131 	bne.w	800c7ec <ai_platform_network_process+0x3cc>
 800c58a:	6882      	ldr	r2, [r0, #8]
 800c58c:	688b      	ldr	r3, [r1, #8]
 800c58e:	429a      	cmp	r2, r3
 800c590:	f040 812c 	bne.w	800c7ec <ai_platform_network_process+0x3cc>
 800c594:	6842      	ldr	r2, [r0, #4]
 800c596:	684b      	ldr	r3, [r1, #4]
 800c598:	429a      	cmp	r2, r3
 800c59a:	f040 8127 	bne.w	800c7ec <ai_platform_network_process+0x3cc>
 800c59e:	69a3      	ldr	r3, [r4, #24]
 800c5a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5a4:	f002 fb02 	bl	800ebac <ai_array_get_data_byte_size>
 800c5a8:	4605      	mov	r5, r0
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f002 fa54 	bl	800ea58 <get_tensor_byte_size>
 800c5b0:	4285      	cmp	r5, r0
 800c5b2:	f0c0 811b 	bcc.w	800c7ec <ai_platform_network_process+0x3cc>
 800c5b6:	69a3      	ldr	r3, [r4, #24]
 800c5b8:	6818      	ldr	r0, [r3, #0]
 800c5ba:	f002 fa63 	bl	800ea84 <ai_array_to_buffer_fmt>
 800c5be:	6833      	ldr	r3, [r6, #0]
 800c5c0:	4058      	eors	r0, r3
 800c5c2:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800c5c6:	f040 81ca 	bne.w	800c95e <ai_platform_network_process+0x53e>
 800c5ca:	6873      	ldr	r3, [r6, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 81bd 	beq.w	800c94c <ai_platform_network_process+0x52c>
 800c5d2:	69b3      	ldr	r3, [r6, #24]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f000 81ca 	beq.w	800c970 <ai_platform_network_process+0x550>
 800c5dc:	9a02      	ldr	r2, [sp, #8]
 800c5de:	4620      	mov	r0, r4
 800c5e0:	3701      	adds	r7, #1
 800c5e2:	361c      	adds	r6, #28
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	bf38      	it	cc
 800c5e8:	461a      	movcc	r2, r3
 800c5ea:	9202      	str	r2, [sp, #8]
 800c5ec:	f002 fa34 	bl	800ea58 <get_tensor_byte_size>
 800c5f0:	f8c9 0008 	str.w	r0, [r9, #8]
 800c5f4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	fb00 f303 	mul.w	r3, r0, r3
 800c5fe:	f8c9 300c 	str.w	r3, [r9, #12]
 800c602:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800c606:	440b      	add	r3, r1
 800c608:	f8c9 1004 	str.w	r1, [r9, #4]
 800c60c:	f84a 300b 	str.w	r3, [sl, fp]
 800c610:	69a0      	ldr	r0, [r4, #24]
 800c612:	6803      	ldr	r3, [r0, #0]
 800c614:	009a      	lsls	r2, r3, #2
 800c616:	f100 80bb 	bmi.w	800c790 <ai_platform_network_process+0x370>
 800c61a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c61e:	1a9b      	subs	r3, r3, r2
 800c620:	4419      	add	r1, r3
 800c622:	6081      	str	r1, [r0, #8]
 800c624:	69a3      	ldr	r3, [r4, #24]
 800c626:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800c62a:	60da      	str	r2, [r3, #12]
 800c62c:	f8b8 3000 	ldrh.w	r3, [r8]
 800c630:	42bb      	cmp	r3, r7
 800c632:	d888      	bhi.n	800c546 <ai_platform_network_process+0x126>
 800c634:	9d03      	ldr	r5, [sp, #12]
 800c636:	9b01      	ldr	r3, [sp, #4]
 800c638:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	f000 81a1 	beq.w	800c982 <ai_platform_network_process+0x562>
 800c640:	2a01      	cmp	r2, #1
 800c642:	f240 817b 	bls.w	800c93c <ai_platform_network_process+0x51c>
 800c646:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800c64a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f000 8174 	beq.w	800c93c <ai_platform_network_process+0x51c>
 800c654:	9e01      	ldr	r6, [sp, #4]
 800c656:	2700      	movs	r7, #0
 800c658:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f000 80d3 	beq.w	800c808 <ai_platform_network_process+0x3e8>
 800c662:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800c666:	2c00      	cmp	r4, #0
 800c668:	f000 80ce 	beq.w	800c808 <ai_platform_network_process+0x3e8>
 800c66c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c670:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800c674:	f8d3 8000 	ldr.w	r8, [r3]
 800c678:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800c67c:	f000 819f 	beq.w	800c9be <ai_platform_network_process+0x59e>
 800c680:	69a3      	ldr	r3, [r4, #24]
 800c682:	2101      	movs	r1, #1
 800c684:	4630      	mov	r0, r6
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	9301      	str	r3, [sp, #4]
 800c68a:	f7fe fd11 	bl	800b0b0 <ai_buffer_get_size>
 800c68e:	9b01      	ldr	r3, [sp, #4]
 800c690:	4283      	cmp	r3, r0
 800c692:	f0c0 8153 	bcc.w	800c93c <ai_platform_network_process+0x51c>
 800c696:	68e0      	ldr	r0, [r4, #12]
 800c698:	69b1      	ldr	r1, [r6, #24]
 800c69a:	68c2      	ldr	r2, [r0, #12]
 800c69c:	68cb      	ldr	r3, [r1, #12]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	f040 814c 	bne.w	800c93c <ai_platform_network_process+0x51c>
 800c6a4:	6882      	ldr	r2, [r0, #8]
 800c6a6:	688b      	ldr	r3, [r1, #8]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	f040 8147 	bne.w	800c93c <ai_platform_network_process+0x51c>
 800c6ae:	6842      	ldr	r2, [r0, #4]
 800c6b0:	684b      	ldr	r3, [r1, #4]
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	f040 8142 	bne.w	800c93c <ai_platform_network_process+0x51c>
 800c6b8:	69a3      	ldr	r3, [r4, #24]
 800c6ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6be:	f002 fa75 	bl	800ebac <ai_array_get_data_byte_size>
 800c6c2:	9001      	str	r0, [sp, #4]
 800c6c4:	4620      	mov	r0, r4
 800c6c6:	f002 f9c7 	bl	800ea58 <get_tensor_byte_size>
 800c6ca:	9b01      	ldr	r3, [sp, #4]
 800c6cc:	4283      	cmp	r3, r0
 800c6ce:	f0c0 8135 	bcc.w	800c93c <ai_platform_network_process+0x51c>
 800c6d2:	69a3      	ldr	r3, [r4, #24]
 800c6d4:	6818      	ldr	r0, [r3, #0]
 800c6d6:	f002 f9d5 	bl	800ea84 <ai_array_to_buffer_fmt>
 800c6da:	6833      	ldr	r3, [r6, #0]
 800c6dc:	4058      	eors	r0, r3
 800c6de:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800c6e2:	f040 815c 	bne.w	800c99e <ai_platform_network_process+0x57e>
 800c6e6:	6873      	ldr	r3, [r6, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	f000 8150 	beq.w	800c98e <ai_platform_network_process+0x56e>
 800c6ee:	69b3      	ldr	r3, [r6, #24]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f000 815b 	beq.w	800c9ae <ai_platform_network_process+0x58e>
 800c6f8:	9a02      	ldr	r2, [sp, #8]
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	3701      	adds	r7, #1
 800c6fe:	361c      	adds	r6, #28
 800c700:	429a      	cmp	r2, r3
 800c702:	bf38      	it	cc
 800c704:	461a      	movcc	r2, r3
 800c706:	9202      	str	r2, [sp, #8]
 800c708:	f002 f9a6 	bl	800ea58 <get_tensor_byte_size>
 800c70c:	f8ca 0008 	str.w	r0, [sl, #8]
 800c710:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	fb00 f303 	mul.w	r3, r0, r3
 800c71a:	f8ca 300c 	str.w	r3, [sl, #12]
 800c71e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800c722:	440b      	add	r3, r1
 800c724:	f8ca 1004 	str.w	r1, [sl, #4]
 800c728:	f848 300b 	str.w	r3, [r8, fp]
 800c72c:	69a0      	ldr	r0, [r4, #24]
 800c72e:	6803      	ldr	r3, [r0, #0]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	d464      	bmi.n	800c7fe <ai_platform_network_process+0x3de>
 800c734:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800c738:	1a9b      	subs	r3, r3, r2
 800c73a:	4419      	add	r1, r3
 800c73c:	6081      	str	r1, [r0, #8]
 800c73e:	69a3      	ldr	r3, [r4, #24]
 800c740:	f8da 2004 	ldr.w	r2, [sl, #4]
 800c744:	60da      	str	r2, [r3, #12]
 800c746:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c74a:	429f      	cmp	r7, r3
 800c74c:	d384      	bcc.n	800c658 <ai_platform_network_process+0x238>
 800c74e:	e05b      	b.n	800c808 <ai_platform_network_process+0x3e8>
 800c750:	e7fe      	b.n	800c750 <ai_platform_network_process+0x330>
 800c752:	68ea      	ldr	r2, [r5, #12]
 800c754:	616b      	str	r3, [r5, #20]
 800c756:	f002 0203 	and.w	r2, r2, #3
 800c75a:	2a03      	cmp	r2, #3
 800c75c:	d039      	beq.n	800c7d2 <ai_platform_network_process+0x3b2>
 800c75e:	2230      	movs	r2, #48	; 0x30
 800c760:	2111      	movs	r1, #17
 800c762:	f105 0010 	add.w	r0, r5, #16
 800c766:	2400      	movs	r4, #0
 800c768:	f000 f940 	bl	800c9ec <core_set_error>
 800c76c:	4620      	mov	r0, r4
 800c76e:	b005      	add	sp, #20
 800c770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c774:	4a0c      	ldr	r2, [pc, #48]	; (800c7a8 <ai_platform_network_process+0x388>)
 800c776:	2301      	movs	r3, #1
 800c778:	6093      	str	r3, [r2, #8]
 800c77a:	6893      	ldr	r3, [r2, #8]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1fc      	bne.n	800c77a <ai_platform_network_process+0x35a>
 800c780:	4b07      	ldr	r3, [pc, #28]	; (800c7a0 <ai_platform_network_process+0x380>)
 800c782:	6013      	str	r3, [r2, #0]
 800c784:	4b07      	ldr	r3, [pc, #28]	; (800c7a4 <ai_platform_network_process+0x384>)
 800c786:	6812      	ldr	r2, [r2, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	f43f aeb6 	beq.w	800c4fa <ai_platform_network_process+0xda>
 800c78e:	e7fe      	b.n	800c78e <ai_platform_network_process+0x36e>
 800c790:	f8b8 3000 	ldrh.w	r3, [r8]
 800c794:	429f      	cmp	r7, r3
 800c796:	f4ff aed6 	bcc.w	800c546 <ai_platform_network_process+0x126>
 800c79a:	e74b      	b.n	800c634 <ai_platform_network_process+0x214>
 800c79c:	58024000 	.word	0x58024000
 800c7a0:	f407a5c2 	.word	0xf407a5c2
 800c7a4:	b5e8b5cd 	.word	0xb5e8b5cd
 800c7a8:	40023000 	.word	0x40023000
 800c7ac:	4a88      	ldr	r2, [pc, #544]	; (800c9d0 <ai_platform_network_process+0x5b0>)
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800c7b4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1fb      	bne.n	800c7b4 <ai_platform_network_process+0x394>
 800c7bc:	4b85      	ldr	r3, [pc, #532]	; (800c9d4 <ai_platform_network_process+0x5b4>)
 800c7be:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800c7c2:	4b85      	ldr	r3, [pc, #532]	; (800c9d8 <ai_platform_network_process+0x5b8>)
 800c7c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	f43f ae96 	beq.w	800c4fa <ai_platform_network_process+0xda>
 800c7ce:	e7fe      	b.n	800c7ce <ai_platform_network_process+0x3ae>
 800c7d0:	9d03      	ldr	r5, [sp, #12]
 800c7d2:	2400      	movs	r4, #0
 800c7d4:	2217      	movs	r2, #23
 800c7d6:	2112      	movs	r1, #18
 800c7d8:	f105 0010 	add.w	r0, r5, #16
 800c7dc:	f000 f906 	bl	800c9ec <core_set_error>
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	b005      	add	sp, #20
 800c7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e8:	462c      	mov	r4, r5
 800c7ea:	e7bf      	b.n	800c76c <ai_platform_network_process+0x34c>
 800c7ec:	9d03      	ldr	r5, [sp, #12]
 800c7ee:	2218      	movs	r2, #24
 800c7f0:	2112      	movs	r1, #18
 800c7f2:	2400      	movs	r4, #0
 800c7f4:	f105 0010 	add.w	r0, r5, #16
 800c7f8:	f000 f8f8 	bl	800c9ec <core_set_error>
 800c7fc:	e7b6      	b.n	800c76c <ai_platform_network_process+0x34c>
 800c7fe:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800c802:	429f      	cmp	r7, r3
 800c804:	f4ff af28 	bcc.w	800c658 <ai_platform_network_process+0x238>
 800c808:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c80c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800c80e:	82ab      	strh	r3, [r5, #20]
 800c810:	2a00      	cmp	r2, #0
 800c812:	f040 808d 	bne.w	800c930 <ai_platform_network_process+0x510>
 800c816:	4616      	mov	r6, r2
 800c818:	4617      	mov	r7, r2
 800c81a:	8aec      	ldrh	r4, [r5, #22]
 800c81c:	429c      	cmp	r4, r3
 800c81e:	d2a5      	bcs.n	800c76c <ai_platform_network_process+0x34c>
 800c820:	46ab      	mov	fp, r5
 800c822:	2e00      	cmp	r6, #0
 800c824:	d030      	beq.n	800c888 <ai_platform_network_process+0x468>
 800c826:	f04f 0800 	mov.w	r8, #0
 800c82a:	e014      	b.n	800c856 <ai_platform_network_process+0x436>
 800c82c:	6882      	ldr	r2, [r0, #8]
 800c82e:	68c5      	ldr	r5, [r0, #12]
 800c830:	6863      	ldr	r3, [r4, #4]
 800c832:	1b52      	subs	r2, r2, r5
 800c834:	4413      	add	r3, r2
 800c836:	6083      	str	r3, [r0, #8]
 800c838:	698b      	ldr	r3, [r1, #24]
 800c83a:	6862      	ldr	r2, [r4, #4]
 800c83c:	60da      	str	r2, [r3, #12]
 800c83e:	f859 200a 	ldr.w	r2, [r9, sl]
 800c842:	f108 0801 	add.w	r8, r8, #1
 800c846:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800c84a:	440b      	add	r3, r1
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d301      	bcc.n	800c854 <ai_platform_network_process+0x434>
 800c850:	68e3      	ldr	r3, [r4, #12]
 800c852:	1ad3      	subs	r3, r2, r3
 800c854:	6063      	str	r3, [r4, #4]
 800c856:	8833      	ldrh	r3, [r6, #0]
 800c858:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800c85c:	4543      	cmp	r3, r8
 800c85e:	d913      	bls.n	800c888 <ai_platform_network_process+0x468>
 800c860:	6873      	ldr	r3, [r6, #4]
 800c862:	b18b      	cbz	r3, 800c888 <ai_platform_network_process+0x468>
 800c864:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800c868:	b171      	cbz	r1, 800c888 <ai_platform_network_process+0x468>
 800c86a:	6988      	ldr	r0, [r1, #24]
 800c86c:	68b2      	ldr	r2, [r6, #8]
 800c86e:	6803      	ldr	r3, [r0, #0]
 800c870:	f8d2 9000 	ldr.w	r9, [r2]
 800c874:	009d      	lsls	r5, r3, #2
 800c876:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800c87a:	d5d7      	bpl.n	800c82c <ai_platform_network_process+0x40c>
 800c87c:	6880      	ldr	r0, [r0, #8]
 800c87e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800c882:	f002 f9cd 	bl	800ec20 <memcpy>
 800c886:	e7da      	b.n	800c83e <ai_platform_network_process+0x41e>
 800c888:	4658      	mov	r0, fp
 800c88a:	f001 ff6f 	bl	800e76c <ai_layers_forward_all>
 800c88e:	2f00      	cmp	r7, #0
 800c890:	d03f      	beq.n	800c912 <ai_platform_network_process+0x4f2>
 800c892:	2400      	movs	r4, #0
 800c894:	e016      	b.n	800c8c4 <ai_platform_network_process+0x4a4>
 800c896:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800c89a:	f859 100a 	ldr.w	r1, [r9, sl]
 800c89e:	4413      	add	r3, r2
 800c8a0:	428b      	cmp	r3, r1
 800c8a2:	d302      	bcc.n	800c8aa <ai_platform_network_process+0x48a>
 800c8a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8a8:	1acb      	subs	r3, r1, r3
 800c8aa:	f8c8 3004 	str.w	r3, [r8, #4]
 800c8ae:	6981      	ldr	r1, [r0, #24]
 800c8b0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800c8b4:	1b52      	subs	r2, r2, r5
 800c8b6:	4413      	add	r3, r2
 800c8b8:	608b      	str	r3, [r1, #8]
 800c8ba:	6983      	ldr	r3, [r0, #24]
 800c8bc:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800c8c0:	60da      	str	r2, [r3, #12]
 800c8c2:	3401      	adds	r4, #1
 800c8c4:	883b      	ldrh	r3, [r7, #0]
 800c8c6:	42a3      	cmp	r3, r4
 800c8c8:	d923      	bls.n	800c912 <ai_platform_network_process+0x4f2>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	b30b      	cbz	r3, 800c912 <ai_platform_network_process+0x4f2>
 800c8ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800c8d2:	b1f0      	cbz	r0, 800c912 <ai_platform_network_process+0x4f2>
 800c8d4:	68ba      	ldr	r2, [r7, #8]
 800c8d6:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800c8da:	6983      	ldr	r3, [r0, #24]
 800c8dc:	f8d2 9000 	ldr.w	r9, [r2]
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800c8e6:	0092      	lsls	r2, r2, #2
 800c8e8:	d5d5      	bpl.n	800c896 <ai_platform_network_process+0x476>
 800c8ea:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800c8ee:	6899      	ldr	r1, [r3, #8]
 800c8f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c8f4:	f002 f994 	bl	800ec20 <memcpy>
 800c8f8:	f859 200a 	ldr.w	r2, [r9, sl]
 800c8fc:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800c900:	440b      	add	r3, r1
 800c902:	4293      	cmp	r3, r2
 800c904:	d302      	bcc.n	800c90c <ai_platform_network_process+0x4ec>
 800c906:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	f8c8 3004 	str.w	r3, [r8, #4]
 800c910:	e7d7      	b.n	800c8c2 <ai_platform_network_process+0x4a2>
 800c912:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800c916:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800c91a:	3401      	adds	r4, #1
 800c91c:	b2a4      	uxth	r4, r4
 800c91e:	42a3      	cmp	r3, r4
 800c920:	f8ab 4016 	strh.w	r4, [fp, #22]
 800c924:	f63f af7d 	bhi.w	800c822 <ai_platform_network_process+0x402>
 800c928:	4620      	mov	r0, r4
 800c92a:	b005      	add	sp, #20
 800c92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c930:	2a01      	cmp	r2, #1
 800c932:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800c934:	d029      	beq.n	800c98a <ai_platform_network_process+0x56a>
 800c936:	f106 070c 	add.w	r7, r6, #12
 800c93a:	e76e      	b.n	800c81a <ai_platform_network_process+0x3fa>
 800c93c:	2218      	movs	r2, #24
 800c93e:	2113      	movs	r1, #19
 800c940:	f105 0010 	add.w	r0, r5, #16
 800c944:	2400      	movs	r4, #0
 800c946:	f000 f851 	bl	800c9ec <core_set_error>
 800c94a:	e70f      	b.n	800c76c <ai_platform_network_process+0x34c>
 800c94c:	9d03      	ldr	r5, [sp, #12]
 800c94e:	4604      	mov	r4, r0
 800c950:	2217      	movs	r2, #23
 800c952:	2112      	movs	r1, #18
 800c954:	f105 0010 	add.w	r0, r5, #16
 800c958:	f000 f848 	bl	800c9ec <core_set_error>
 800c95c:	e706      	b.n	800c76c <ai_platform_network_process+0x34c>
 800c95e:	9d03      	ldr	r5, [sp, #12]
 800c960:	2219      	movs	r2, #25
 800c962:	2112      	movs	r1, #18
 800c964:	2400      	movs	r4, #0
 800c966:	f105 0010 	add.w	r0, r5, #16
 800c96a:	f000 f83f 	bl	800c9ec <core_set_error>
 800c96e:	e6fd      	b.n	800c76c <ai_platform_network_process+0x34c>
 800c970:	9d03      	ldr	r5, [sp, #12]
 800c972:	4604      	mov	r4, r0
 800c974:	2221      	movs	r2, #33	; 0x21
 800c976:	2112      	movs	r1, #18
 800c978:	f105 0010 	add.w	r0, r5, #16
 800c97c:	f000 f836 	bl	800c9ec <core_set_error>
 800c980:	e6f4      	b.n	800c76c <ai_platform_network_process+0x34c>
 800c982:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800c986:	82ab      	strh	r3, [r5, #20]
 800c988:	e742      	b.n	800c810 <ai_platform_network_process+0x3f0>
 800c98a:	2700      	movs	r7, #0
 800c98c:	e745      	b.n	800c81a <ai_platform_network_process+0x3fa>
 800c98e:	4604      	mov	r4, r0
 800c990:	2217      	movs	r2, #23
 800c992:	2113      	movs	r1, #19
 800c994:	f105 0010 	add.w	r0, r5, #16
 800c998:	f000 f828 	bl	800c9ec <core_set_error>
 800c99c:	e6e6      	b.n	800c76c <ai_platform_network_process+0x34c>
 800c99e:	2219      	movs	r2, #25
 800c9a0:	2113      	movs	r1, #19
 800c9a2:	f105 0010 	add.w	r0, r5, #16
 800c9a6:	2400      	movs	r4, #0
 800c9a8:	f000 f820 	bl	800c9ec <core_set_error>
 800c9ac:	e6de      	b.n	800c76c <ai_platform_network_process+0x34c>
 800c9ae:	4604      	mov	r4, r0
 800c9b0:	2221      	movs	r2, #33	; 0x21
 800c9b2:	2113      	movs	r1, #19
 800c9b4:	f105 0010 	add.w	r0, r5, #16
 800c9b8:	f000 f818 	bl	800c9ec <core_set_error>
 800c9bc:	e6d6      	b.n	800c76c <ai_platform_network_process+0x34c>
 800c9be:	2217      	movs	r2, #23
 800c9c0:	2113      	movs	r1, #19
 800c9c2:	f105 0010 	add.w	r0, r5, #16
 800c9c6:	4654      	mov	r4, sl
 800c9c8:	f000 f810 	bl	800c9ec <core_set_error>
 800c9cc:	e6ce      	b.n	800c76c <ai_platform_network_process+0x34c>
 800c9ce:	bf00      	nop
 800c9d0:	58024000 	.word	0x58024000
 800c9d4:	f407a5c2 	.word	0xf407a5c2
 800c9d8:	b5e8b5cd 	.word	0xb5e8b5cd

0800c9dc <core_init>:
 800c9dc:	2001      	movs	r0, #1
 800c9de:	4770      	bx	lr

0800c9e0 <core_get_error>:
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	6800      	ldr	r0, [r0, #0]
 800c9e6:	601a      	str	r2, [r3, #0]
 800c9e8:	4770      	bx	lr
 800c9ea:	bf00      	nop

0800c9ec <core_set_error>:
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	7800      	ldrb	r0, [r0, #0]
 800c9f0:	b108      	cbz	r0, 800c9f6 <core_set_error+0xa>
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	4770      	bx	lr
 800c9f6:	7019      	strb	r1, [r3, #0]
 800c9f8:	2001      	movs	r0, #1
 800c9fa:	6819      	ldr	r1, [r3, #0]
 800c9fc:	f362 211f 	bfi	r1, r2, #8, #24
 800ca00:	6019      	str	r1, [r3, #0]
 800ca02:	4770      	bx	lr

0800ca04 <func_dummy>:
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop

0800ca08 <ai_conv2d_stripe_f32.constprop.0>:
 800ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0c:	ed2d 8b0e 	vpush	{d8-d14}
 800ca10:	b09d      	sub	sp, #116	; 0x74
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	f8d7 90ec 	ldr.w	r9, [r7, #236]	; 0xec
 800ca18:	66f8      	str	r0, [r7, #108]	; 0x6c
 800ca1a:	f1b9 0f01 	cmp.w	r9, #1
 800ca1e:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800ca22:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800ca26:	f8d7 c0fc 	ldr.w	ip, [r7, #252]	; 0xfc
 800ca2a:	f9b7 e104 	ldrsh.w	lr, [r7, #260]	; 0x104
 800ca2e:	6579      	str	r1, [r7, #84]	; 0x54
 800ca30:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 800ca34:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800ca38:	f9b7 2108 	ldrsh.w	r2, [r7, #264]	; 0x108
 800ca3c:	663b      	str	r3, [r7, #96]	; 0x60
 800ca3e:	e9d7 303c 	ldrd	r3, r0, [r7, #240]	; 0xf0
 800ca42:	f000 812f 	beq.w	800cca4 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 800ca46:	45b1      	cmp	r9, r6
 800ca48:	f000 8278 	beq.w	800cf3c <ai_conv2d_stripe_f32.constprop.0+0x534>
 800ca4c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800ca50:	2900      	cmp	r1, #0
 800ca52:	f000 8114 	beq.w	800cc7e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800ca56:	eba0 0803 	sub.w	r8, r0, r3
 800ca5a:	1898      	adds	r0, r3, r2
 800ca5c:	eddf 6a90 	vldr	s13, [pc, #576]	; 800cca0 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800ca60:	3801      	subs	r0, #1
 800ca62:	fb93 f1f2 	sdiv	r1, r3, r2
 800ca66:	fb90 f0f2 	sdiv	r0, r0, r2
 800ca6a:	fb02 3111 	mls	r1, r2, r1, r3
 800ca6e:	eba2 0a01 	sub.w	sl, r2, r1
 800ca72:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800ca76:	fb01 f100 	mul.w	r1, r1, r0
 800ca7a:	fb9a f0f2 	sdiv	r0, sl, r2
 800ca7e:	fb02 a010 	mls	r0, r2, r0, sl
 800ca82:	62b9      	str	r1, [r7, #40]	; 0x28
 800ca84:	4403      	add	r3, r0
 800ca86:	eba8 0100 	sub.w	r1, r8, r0
 800ca8a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800ca8e:	4463      	add	r3, ip
 800ca90:	4411      	add	r1, r2
 800ca92:	fb00 f303 	mul.w	r3, r0, r3
 800ca96:	3901      	subs	r1, #1
 800ca98:	fbb6 f4f9 	udiv	r4, r6, r9
 800ca9c:	623b      	str	r3, [r7, #32]
 800ca9e:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800caa2:	fb00 f302 	mul.w	r3, r0, r2
 800caa6:	f8c7 a014 	str.w	sl, [r7, #20]
 800caaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800caac:	fb0e f306 	mul.w	r3, lr, r6
 800cab0:	1b1b      	subs	r3, r3, r4
 800cab2:	fb91 fbf2 	sdiv	fp, r1, r2
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	eba5 020b 	sub.w	r2, r5, fp
 800cabc:	00b1      	lsls	r1, r6, #2
 800cabe:	46dc      	mov	ip, fp
 800cac0:	64bb      	str	r3, [r7, #72]	; 0x48
 800cac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cac6:	61f9      	str	r1, [r7, #28]
 800cac8:	fb04 f303 	mul.w	r3, r4, r3
 800cacc:	fb02 f303 	mul.w	r3, r2, r3
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	627b      	str	r3, [r7, #36]	; 0x24
 800cad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cad8:	fbb3 f3f9 	udiv	r3, r3, r9
 800cadc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	633b      	str	r3, [r7, #48]	; 0x30
 800cae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800caea:	f1c3 0800 	rsb	r8, r3, #0
 800caee:	ebae 0303 	sub.w	r3, lr, r3
 800caf2:	65bb      	str	r3, [r7, #88]	; 0x58
 800caf4:	2300      	movs	r3, #0
 800caf6:	653b      	str	r3, [r7, #80]	; 0x50
 800caf8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f2c0 80c4 	blt.w	800cc8a <ai_conv2d_stripe_f32.constprop.0+0x282>
 800cb02:	2000      	movs	r0, #0
 800cb04:	4673      	mov	r3, lr
 800cb06:	4672      	mov	r2, lr
 800cb08:	4601      	mov	r1, r0
 800cb0a:	3b01      	subs	r3, #1
 800cb0c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800cb0e:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 800cb12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb16:	fb93 f3fe 	sdiv	r3, r3, lr
 800cb1a:	4423      	add	r3, r4
 800cb1c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800cb1e:	fb0a 4303 	mla	r3, sl, r3, r4
 800cb22:	fb92 f4fe 	sdiv	r4, r2, lr
 800cb26:	fb0e 2214 	mls	r2, lr, r4, r2
 800cb2a:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800cb2e:	4444      	add	r4, r8
 800cb30:	42ac      	cmp	r4, r5
 800cb32:	bf94      	ite	ls
 800cb34:	ebc1 0104 	rsbls	r1, r1, r4
 800cb38:	ebc1 0105 	rsbhi	r1, r1, r5
 800cb3c:	6a3c      	ldr	r4, [r7, #32]
 800cb3e:	1a89      	subs	r1, r1, r2
 800cb40:	4471      	add	r1, lr
 800cb42:	3901      	subs	r1, #1
 800cb44:	fb91 f6fe 	sdiv	r6, r1, lr
 800cb48:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800cb4c:	4421      	add	r1, r4
 800cb4e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800cb50:	4401      	add	r1, r0
 800cb52:	69f8      	ldr	r0, [r7, #28]
 800cb54:	4411      	add	r1, r2
 800cb56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb58:	fb00 2201 	mla	r2, r0, r1, r2
 800cb5c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cb5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cb60:	460a      	mov	r2, r1
 800cb62:	2900      	cmp	r1, #0
 800cb64:	bf08      	it	eq
 800cb66:	4622      	moveq	r2, r4
 800cb68:	42a2      	cmp	r2, r4
 800cb6a:	637a      	str	r2, [r7, #52]	; 0x34
 800cb6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb6e:	fe06 7a87 	vseleq.f32	s14, s13, s14
 800cb72:	fb0e 2116 	mls	r1, lr, r6, r2
 800cb76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cb7a:	1b92      	subs	r2, r2, r6
 800cb7c:	f1b9 0f00 	cmp.w	r9, #0
 800cb80:	d066      	beq.n	800cc50 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800cb82:	fb0a f202 	mul.w	r2, sl, r2
 800cb86:	fb00 f101 	mul.w	r1, r0, r1
 800cb8a:	643a      	str	r2, [r7, #64]	; 0x40
 800cb8c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800cb90:	6479      	str	r1, [r7, #68]	; 0x44
 800cb92:	4591      	cmp	r9, r2
 800cb94:	d85c      	bhi.n	800cc50 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800cb96:	2500      	movs	r5, #0
 800cb98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb9a:	46ab      	mov	fp, r5
 800cb9c:	3a01      	subs	r2, #1
 800cb9e:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800cba2:	61ba      	str	r2, [r7, #24]
 800cba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cba6:	f04f 0800 	mov.w	r8, #0
 800cbaa:	f8c7 b008 	str.w	fp, [r7, #8]
 800cbae:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800cbb2:	63ba      	str	r2, [r7, #56]	; 0x38
 800cbb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cbb6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800cbba:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cbbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbbe:	f1bc 0f00 	cmp.w	ip, #0
 800cbc2:	ecf2 7a01 	vldmia	r2!, {s15}
 800cbc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cbca:	63ba      	str	r2, [r7, #56]	; 0x38
 800cbcc:	dd21      	ble.n	800cc12 <ai_conv2d_stripe_f32.constprop.0+0x20a>
 800cbce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	2e00      	cmp	r6, #0
 800cbd4:	dd16      	ble.n	800cc04 <ai_conv2d_stripe_f32.constprop.0+0x1fc>
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	eb02 040a 	add.w	r4, r2, sl
 800cbdc:	4294      	cmp	r4, r2
 800cbde:	d90c      	bls.n	800cbfa <ai_conv2d_stripe_f32.constprop.0+0x1f2>
 800cbe0:	4696      	mov	lr, r2
 800cbe2:	469b      	mov	fp, r3
 800cbe4:	ecbe 6a01 	vldmia	lr!, {s12}
 800cbe8:	ecfb 5a01 	vldmia	fp!, {s11}
 800cbec:	4574      	cmp	r4, lr
 800cbee:	eee5 7a86 	vfma.f32	s15, s11, s12
 800cbf2:	d8f7      	bhi.n	800cbe4 <ai_conv2d_stripe_f32.constprop.0+0x1dc>
 800cbf4:	697c      	ldr	r4, [r7, #20]
 800cbf6:	4423      	add	r3, r4
 800cbf8:	4422      	add	r2, r4
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800cbfe:	4286      	cmp	r6, r0
 800cc00:	4422      	add	r2, r4
 800cc02:	d1e9      	bne.n	800cbd8 <ai_conv2d_stripe_f32.constprop.0+0x1d0>
 800cc04:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800cc06:	3101      	adds	r1, #1
 800cc08:	4402      	add	r2, r0
 800cc0a:	458c      	cmp	ip, r1
 800cc0c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cc0e:	4403      	add	r3, r0
 800cc10:	d1df      	bne.n	800cbd2 <ai_conv2d_stripe_f32.constprop.0+0x1ca>
 800cc12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc14:	f108 0801 	add.w	r8, r8, #1
 800cc18:	ece2 7a01 	vstmia	r2!, {s15}
 800cc1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cc1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc20:	4413      	add	r3, r2
 800cc22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc24:	4542      	cmp	r2, r8
 800cc26:	d8c9      	bhi.n	800cbbc <ai_conv2d_stripe_f32.constprop.0+0x1b4>
 800cc28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cc2a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800cc2e:	4452      	add	r2, sl
 800cc30:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800cc34:	f10b 0b01 	add.w	fp, fp, #1
 800cc38:	65fa      	str	r2, [r7, #92]	; 0x5c
 800cc3a:	69ba      	ldr	r2, [r7, #24]
 800cc3c:	4589      	cmp	r9, r1
 800cc3e:	bf88      	it	hi
 800cc40:	2200      	movhi	r2, #0
 800cc42:	45d9      	cmp	r9, fp
 800cc44:	f102 0201 	add.w	r2, r2, #1
 800cc48:	4415      	add	r5, r2
 800cc4a:	d1ab      	bne.n	800cba4 <ai_conv2d_stripe_f32.constprop.0+0x19c>
 800cc4c:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 800cc50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cc52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cc54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc56:	440a      	add	r2, r1
 800cc58:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cc60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cc62:	653b      	str	r3, [r7, #80]	; 0x50
 800cc64:	4411      	add	r1, r2
 800cc66:	eba8 0802 	sub.w	r8, r8, r2
 800cc6a:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800cc6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cc70:	1a8a      	subs	r2, r1, r2
 800cc72:	65ba      	str	r2, [r7, #88]	; 0x58
 800cc74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	f47f af3d 	bne.w	800caf8 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 800cc7e:	3774      	adds	r7, #116	; 0x74
 800cc80:	46bd      	mov	sp, r7
 800cc82:	ecbd 8b0e 	vpop	{d8-d14}
 800cc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc8a:	fb98 f2fe 	sdiv	r2, r8, lr
 800cc8e:	fb0e 8212 	mls	r2, lr, r2, r8
 800cc92:	4641      	mov	r1, r8
 800cc94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc96:	4640      	mov	r0, r8
 800cc98:	ebae 0202 	sub.w	r2, lr, r2
 800cc9c:	e735      	b.n	800cb0a <ai_conv2d_stripe_f32.constprop.0+0x102>
 800cc9e:	bf00      	nop
 800cca0:	00000000 	.word	0x00000000
 800cca4:	fb0e f102 	mul.w	r1, lr, r2
 800cca8:	2901      	cmp	r1, #1
 800ccaa:	f47f aecf 	bne.w	800ca4c <ai_conv2d_stripe_f32.constprop.0+0x44>
 800ccae:	1ac2      	subs	r2, r0, r3
 800ccb0:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800ccb4:	00b0      	lsls	r0, r6, #2
 800ccb6:	eb0c 0103 	add.w	r1, ip, r3
 800ccba:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ccbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ccbe:	63b8      	str	r0, [r7, #56]	; 0x38
 800ccc0:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800ccc4:	fb00 f004 	mul.w	r0, r0, r4
 800ccc8:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800ccca:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800ccce:	fb00 4101 	mla	r1, r0, r1, r4
 800ccd2:	65b9      	str	r1, [r7, #88]	; 0x58
 800ccd4:	f080 8263 	bcs.w	800d19e <ai_conv2d_stripe_f32.constprop.0+0x796>
 800ccd8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800ccdc:	2a00      	cmp	r2, #0
 800ccde:	d0ce      	beq.n	800cc7e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800cce0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cce4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800cce8:	fb05 f202 	mul.w	r2, r5, r2
 800ccec:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 800cca0 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800ccf0:	fb00 f303 	mul.w	r3, r0, r3
 800ccf4:	64bb      	str	r3, [r7, #72]	; 0x48
 800ccf6:	fb06 f302 	mul.w	r3, r6, r2
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	643b      	str	r3, [r7, #64]	; 0x40
 800ccfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd00:	fb03 f306 	mul.w	r3, r3, r6
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	627b      	str	r3, [r7, #36]	; 0x24
 800cd08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd0c:	fb03 f306 	mul.w	r3, r3, r6
 800cd10:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800cd14:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd22:	2300      	movs	r3, #0
 800cd24:	653b      	str	r3, [r7, #80]	; 0x50
 800cd26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	f000 8104 	beq.w	800cf36 <ai_conv2d_stripe_f32.constprop.0+0x52e>
 800cd2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd30:	ecf3 6a01 	vldmia	r3!, {s13}
 800cd34:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 80e8 	beq.w	800cf10 <ai_conv2d_stripe_f32.constprop.0+0x508>
 800cd40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cd44:	f04f 0b00 	mov.w	fp, #0
 800cd48:	f8d7 90f8 	ldr.w	r9, [r7, #248]	; 0xf8
 800cd4c:	425d      	negs	r5, r3
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	657b      	str	r3, [r7, #84]	; 0x54
 800cd52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd54:	647b      	str	r3, [r7, #68]	; 0x44
 800cd56:	f1b9 0f00 	cmp.w	r9, #0
 800cd5a:	f2c0 8219 	blt.w	800d190 <ai_conv2d_stripe_f32.constprop.0+0x788>
 800cd5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cd60:	2300      	movs	r3, #0
 800cd62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd64:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800cd66:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800cd68:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800cd6c:	fb02 0c06 	mla	ip, r2, r6, r0
 800cd70:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800cd74:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cd78:	4428      	add	r0, r5
 800cd7a:	42a0      	cmp	r0, r4
 800cd7c:	bf94      	ite	ls
 800cd7e:	ebc3 0300 	rsbls	r3, r3, r0
 800cd82:	ebc3 0304 	rsbhi	r3, r3, r4
 800cd86:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800cd8a:	1ac4      	subs	r4, r0, r3
 800cd8c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800cd90:	1ac0      	subs	r0, r0, r3
 800cd92:	fb02 f303 	mul.w	r3, r2, r3
 800cd96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd98:	2a00      	cmp	r2, #0
 800cd9a:	f340 81f6 	ble.w	800d18a <ai_conv2d_stripe_f32.constprop.0+0x782>
 800cd9e:	fb06 f204 	mul.w	r2, r6, r4
 800cda2:	f023 040f 	bic.w	r4, r3, #15
 800cda6:	eeb0 7a66 	vmov.f32	s14, s13
 800cdaa:	637a      	str	r2, [r7, #52]	; 0x34
 800cdac:	fb06 f200 	mul.w	r2, r6, r0
 800cdb0:	1e60      	subs	r0, r4, #1
 800cdb2:	2600      	movs	r6, #0
 800cdb4:	0900      	lsrs	r0, r0, #4
 800cdb6:	633a      	str	r2, [r7, #48]	; 0x30
 800cdb8:	3001      	adds	r0, #1
 800cdba:	0102      	lsls	r2, r0, #4
 800cdbc:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800cdc0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cdc2:	4662      	mov	r2, ip
 800cdc4:	2c00      	cmp	r4, #0
 800cdc6:	f340 81e8 	ble.w	800d19a <ai_conv2d_stripe_f32.constprop.0+0x792>
 800cdca:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800cdce:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800cdd2:	f04f 0800 	mov.w	r8, #0
 800cdd6:	ed50 5a0f 	vldr	s11, [r0, #-60]	; 0xffffffc4
 800cdda:	f108 0810 	add.w	r8, r8, #16
 800cdde:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800cde2:	3040      	adds	r0, #64	; 0x40
 800cde4:	ed5c 3a10 	vldr	s7, [ip, #-64]	; 0xffffffc0
 800cde8:	45a0      	cmp	r8, r4
 800cdea:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800cdee:	ed10 4a20 	vldr	s8, [r0, #-128]	; 0xffffff80
 800cdf2:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 800cdf6:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800cdfa:	ed10 5a1e 	vldr	s10, [r0, #-120]	; 0xffffff88
 800cdfe:	eee3 7a84 	vfma.f32	s15, s7, s8
 800ce02:	ed50 5a1d 	vldr	s11, [r0, #-116]	; 0xffffff8c
 800ce06:	ed1c ea1d 	vldr	s28, [ip, #-116]	; 0xffffff8c
 800ce0a:	ed5c da1c 	vldr	s27, [ip, #-112]	; 0xffffff90
 800ce0e:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800ce12:	ed5c ca1b 	vldr	s25, [ip, #-108]	; 0xffffff94
 800ce16:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800ce1a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ce1e:	ed5c ba1a 	vldr	s23, [ip, #-104]	; 0xffffff98
 800ce22:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800ce26:	ed5c aa19 	vldr	s21, [ip, #-100]	; 0xffffff9c
 800ce2a:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800ce2e:	ed5c 9a18 	vldr	s19, [ip, #-96]	; 0xffffffa0
 800ce32:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800ce36:	eeee 7a25 	vfma.f32	s15, s28, s11
 800ce3a:	ed5c 8a17 	vldr	s17, [ip, #-92]	; 0xffffffa4
 800ce3e:	ed10 8a17 	vldr	s16, [r0, #-92]	; 0xffffffa4
 800ce42:	ed1c 0a16 	vldr	s0, [ip, #-88]	; 0xffffffa8
 800ce46:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800ce4a:	ed1c 1a15 	vldr	s2, [ip, #-84]	; 0xffffffac
 800ce4e:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 800ce52:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800ce56:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 800ce5a:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 800ce5e:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 800ce62:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800ce66:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 800ce6a:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 800ce6e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800ce72:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 800ce76:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 800ce7a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800ce7e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800ce82:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ce86:	eee8 7a88 	vfma.f32	s15, s17, s16
 800ce8a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800ce8e:	eee1 7a21 	vfma.f32	s15, s2, s3
 800ce92:	eee2 7a22 	vfma.f32	s15, s4, s5
 800ce96:	eee3 7a23 	vfma.f32	s15, s6, s7
 800ce9a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ce9e:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cea6:	db96      	blt.n	800cdd6 <ai_conv2d_stripe_f32.constprop.0+0x3ce>
 800cea8:	4471      	add	r1, lr
 800ceaa:	4472      	add	r2, lr
 800ceac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ceae:	4283      	cmp	r3, r0
 800ceb0:	dd11      	ble.n	800ced6 <ai_conv2d_stripe_f32.constprop.0+0x4ce>
 800ceb2:	4684      	mov	ip, r0
 800ceb4:	468a      	mov	sl, r1
 800ceb6:	4690      	mov	r8, r2
 800ceb8:	f10c 0c01 	add.w	ip, ip, #1
 800cebc:	ecf8 5a01 	vldmia	r8!, {s11}
 800cec0:	ecfa 7a01 	vldmia	sl!, {s15}
 800cec4:	4563      	cmp	r3, ip
 800cec6:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ceca:	d1f5      	bne.n	800ceb8 <ai_conv2d_stripe_f32.constprop.0+0x4b0>
 800cecc:	1a18      	subs	r0, r3, r0
 800cece:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800ced2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800ced6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ced8:	3601      	adds	r6, #1
 800ceda:	4401      	add	r1, r0
 800cedc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cede:	4402      	add	r2, r0
 800cee0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800cee2:	42b0      	cmp	r0, r6
 800cee4:	f47f af6e 	bne.w	800cdc4 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 800cee8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceea:	f10b 0b01 	add.w	fp, fp, #1
 800ceee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cef2:	ed83 7a00 	vstr	s14, [r3]
 800cef6:	440b      	add	r3, r1
 800cef8:	4491      	add	r9, r2
 800cefa:	1aad      	subs	r5, r5, r2
 800cefc:	647b      	str	r3, [r7, #68]	; 0x44
 800cefe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf02:	4413      	add	r3, r2
 800cf04:	657b      	str	r3, [r7, #84]	; 0x54
 800cf06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf0a:	455b      	cmp	r3, fp
 800cf0c:	f47f af23 	bne.w	800cd56 <ai_conv2d_stripe_f32.constprop.0+0x34e>
 800cf10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cf12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf16:	440a      	add	r2, r1
 800cf18:	3301      	adds	r3, #1
 800cf1a:	66ba      	str	r2, [r7, #104]	; 0x68
 800cf1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf1e:	653b      	str	r3, [r7, #80]	; 0x50
 800cf20:	3204      	adds	r2, #4
 800cf22:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cf24:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800cf28:	429a      	cmp	r2, r3
 800cf2a:	f43f aea8 	beq.w	800cc7e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800cf2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f47f aefc 	bne.w	800cd2e <ai_conv2d_stripe_f32.constprop.0+0x326>
 800cf36:	eef0 6a46 	vmov.f32	s13, s12
 800cf3a:	e6fc      	b.n	800cd36 <ai_conv2d_stripe_f32.constprop.0+0x32e>
 800cf3c:	fb0e f102 	mul.w	r1, lr, r2
 800cf40:	2901      	cmp	r1, #1
 800cf42:	f47f ad83 	bne.w	800ca4c <ai_conv2d_stripe_f32.constprop.0+0x44>
 800cf46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf4a:	2a00      	cmp	r2, #0
 800cf4c:	f43f ae97 	beq.w	800cc7e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800cf50:	eb0c 0203 	add.w	r2, ip, r3
 800cf54:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800cf58:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800cf5c:	ed5f 3ab0 	vldr	s7, [pc, #-704]	; 800cca0 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800cf60:	fb01 f202 	mul.w	r2, r1, r2
 800cf64:	1ac1      	subs	r1, r0, r3
 800cf66:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800cf6a:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800cf6e:	61fa      	str	r2, [r7, #28]
 800cf70:	1a1a      	subs	r2, r3, r0
 800cf72:	64f9      	str	r1, [r7, #76]	; 0x4c
 800cf74:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 800cf78:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800cf7c:	442a      	add	r2, r5
 800cf7e:	fb03 f301 	mul.w	r3, r3, r1
 800cf82:	fb01 f202 	mul.w	r2, r1, r2
 800cf86:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf88:	0093      	lsls	r3, r2, #2
 800cf8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf90:	fbb3 f3f6 	udiv	r3, r3, r6
 800cf94:	61bb      	str	r3, [r7, #24]
 800cf96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfa2:	f1c3 0b00 	rsb	fp, r3, #0
 800cfa6:	00f3      	lsls	r3, r6, #3
 800cfa8:	623b      	str	r3, [r7, #32]
 800cfaa:	2300      	movs	r3, #0
 800cfac:	653b      	str	r3, [r7, #80]	; 0x50
 800cfae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f2c0 80e3 	blt.w	800d17e <ai_conv2d_stripe_f32.constprop.0+0x776>
 800cfb8:	2500      	movs	r5, #0
 800cfba:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800cfbc:	462b      	mov	r3, r5
 800cfbe:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800cfc2:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800cfc6:	445a      	add	r2, fp
 800cfc8:	69fc      	ldr	r4, [r7, #28]
 800cfca:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800cfcc:	4282      	cmp	r2, r0
 800cfce:	bf28      	it	cs
 800cfd0:	4602      	movcs	r2, r0
 800cfd2:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800cfd6:	1ad2      	subs	r2, r2, r3
 800cfd8:	1904      	adds	r4, r0, r4
 800cfda:	2e00      	cmp	r6, #0
 800cfdc:	f000 8228 	beq.w	800d430 <ai_conv2d_stripe_f32.constprop.0+0xa28>
 800cfe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfe2:	647e      	str	r6, [r7, #68]	; 0x44
 800cfe4:	429e      	cmp	r6, r3
 800cfe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cfe8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800cfec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cff0:	fe03 3aa2 	vseleq.f32	s6, s7, s5
 800cff4:	1a98      	subs	r0, r3, r2
 800cff6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800cffa:	fb03 f000 	mul.w	r0, r3, r0
 800cffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d002:	1a9b      	subs	r3, r3, r2
 800d004:	442c      	add	r4, r5
 800d006:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800d008:	fb08 5e04 	mla	lr, r8, r4, r5
 800d00c:	eb0e 0408 	add.w	r4, lr, r8
 800d010:	45a6      	cmp	lr, r4
 800d012:	62bc      	str	r4, [r7, #40]	; 0x28
 800d014:	f080 809a 	bcs.w	800d14c <ai_conv2d_stripe_f32.constprop.0+0x744>
 800d018:	0080      	lsls	r0, r0, #2
 800d01a:	009b      	lsls	r3, r3, #2
 800d01c:	6378      	str	r0, [r7, #52]	; 0x34
 800d01e:	633b      	str	r3, [r7, #48]	; 0x30
 800d020:	f022 0303 	bic.w	r3, r2, #3
 800d024:	e9d7 0434 	ldrd	r0, r4, [r7, #208]	; 0xd0
 800d028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d02a:	42a0      	cmp	r0, r4
 800d02c:	f200 808e 	bhi.w	800d14c <ai_conv2d_stripe_f32.constprop.0+0x744>
 800d030:	1e58      	subs	r0, r3, #1
 800d032:	f04f 0900 	mov.w	r9, #0
 800d036:	0880      	lsrs	r0, r0, #2
 800d038:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	fb00 a00a 	mla	r0, r0, sl, sl
 800d042:	6138      	str	r0, [r7, #16]
 800d044:	0118      	lsls	r0, r3, #4
 800d046:	009b      	lsls	r3, r3, #2
 800d048:	6178      	str	r0, [r7, #20]
 800d04a:	e9c7 b302 	strd	fp, r3, [r7, #8]
 800d04e:	69bb      	ldr	r3, [r7, #24]
 800d050:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d052:	4499      	add	r9, r3
 800d054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d056:	181c      	adds	r4, r3, r0
 800d058:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d05c:	65bc      	str	r4, [r7, #88]	; 0x58
 800d05e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800d060:	627b      	str	r3, [r7, #36]	; 0x24
 800d062:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800d066:	1820      	adds	r0, r4, r0
 800d068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d06a:	6438      	str	r0, [r7, #64]	; 0x40
 800d06c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d06e:	ecb3 7a01 	vldmia	r3!, {s14}
 800d072:	65bb      	str	r3, [r7, #88]	; 0x58
 800d074:	ee27 7a03 	vmul.f32	s14, s14, s6
 800d078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	dd55      	ble.n	800d12a <ai_conv2d_stripe_f32.constprop.0+0x722>
 800d07e:	4675      	mov	r5, lr
 800d080:	f04f 0b00 	mov.w	fp, #0
 800d084:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d086:	2b00      	cmp	r3, #0
 800d088:	f340 81d0 	ble.w	800d42c <ai_conv2d_stripe_f32.constprop.0+0xa24>
 800d08c:	6a38      	ldr	r0, [r7, #32]
 800d08e:	f101 0310 	add.w	r3, r1, #16
 800d092:	2600      	movs	r6, #0
 800d094:	607a      	str	r2, [r7, #4]
 800d096:	182c      	adds	r4, r5, r0
 800d098:	4628      	mov	r0, r5
 800d09a:	eb00 0c08 	add.w	ip, r0, r8
 800d09e:	ed13 4a03 	vldr	s8, [r3, #-12]
 800d0a2:	ed53 4a04 	vldr	s9, [r3, #-16]
 800d0a6:	3604      	adds	r6, #4
 800d0a8:	eddc 7a00 	vldr	s15, [ip]
 800d0ac:	eb04 0c08 	add.w	ip, r4, r8
 800d0b0:	ed90 5a00 	vldr	s10, [r0]
 800d0b4:	3310      	adds	r3, #16
 800d0b6:	ee67 7a84 	vmul.f32	s15, s15, s8
 800d0ba:	edd4 6a00 	vldr	s13, [r4]
 800d0be:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 800d0c2:	4450      	add	r0, sl
 800d0c4:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800d0c8:	4454      	add	r4, sl
 800d0ca:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d0ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0d0:	4296      	cmp	r6, r2
 800d0d2:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800d0d6:	eddc 6a00 	vldr	s13, [ip]
 800d0da:	eee6 7a26 	vfma.f32	s15, s12, s13
 800d0de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d0e2:	dbda      	blt.n	800d09a <ai_conv2d_stripe_f32.constprop.0+0x692>
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	441d      	add	r5, r3
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	68fc      	ldr	r4, [r7, #12]
 800d0ee:	4419      	add	r1, r3
 800d0f0:	42a2      	cmp	r2, r4
 800d0f2:	dd11      	ble.n	800d118 <ai_conv2d_stripe_f32.constprop.0+0x710>
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	462b      	mov	r3, r5
 800d0f8:	460e      	mov	r6, r1
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	edd3 7a00 	vldr	s15, [r3]
 800d100:	ecf6 6a01 	vldmia	r6!, {s13}
 800d104:	4443      	add	r3, r8
 800d106:	4290      	cmp	r0, r2
 800d108:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d10c:	d1f5      	bne.n	800d0fa <ai_conv2d_stripe_f32.constprop.0+0x6f2>
 800d10e:	1b14      	subs	r4, r2, r4
 800d110:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d114:	fb04 5508 	mla	r5, r4, r8, r5
 800d118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11a:	f10b 0b01 	add.w	fp, fp, #1
 800d11e:	441d      	add	r5, r3
 800d120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d122:	4419      	add	r1, r3
 800d124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d126:	459b      	cmp	fp, r3
 800d128:	d1ac      	bne.n	800d084 <ai_conv2d_stripe_f32.constprop.0+0x67c>
 800d12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d12c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d12e:	eca3 7a01 	vstmia	r3!, {s14}
 800d132:	643b      	str	r3, [r7, #64]	; 0x40
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d136:	4419      	add	r1, r3
 800d138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13a:	4283      	cmp	r3, r0
 800d13c:	d196      	bne.n	800d06c <ai_conv2d_stripe_f32.constprop.0+0x664>
 800d13e:	f10e 0e04 	add.w	lr, lr, #4
 800d142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d144:	459e      	cmp	lr, r3
 800d146:	d382      	bcc.n	800d04e <ai_conv2d_stripe_f32.constprop.0+0x646>
 800d148:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800d14c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d14e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d152:	440a      	add	r2, r1
 800d154:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800d156:	3301      	adds	r3, #1
 800d158:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d15a:	ebab 0b01 	sub.w	fp, fp, r1
 800d15e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800d162:	653b      	str	r3, [r7, #80]	; 0x50
 800d164:	440a      	add	r2, r1
 800d166:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800d16a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d16e:	429a      	cmp	r2, r3
 800d170:	f43f ad85 	beq.w	800cc7e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800d174:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d178:	2b00      	cmp	r3, #0
 800d17a:	f6bf af1d 	bge.w	800cfb8 <ai_conv2d_stripe_f32.constprop.0+0x5b0>
 800d17e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d180:	465b      	mov	r3, fp
 800d182:	465d      	mov	r5, fp
 800d184:	eb02 010b 	add.w	r1, r2, fp
 800d188:	e719      	b.n	800cfbe <ai_conv2d_stripe_f32.constprop.0+0x5b6>
 800d18a:	eeb0 7a66 	vmov.f32	s14, s13
 800d18e:	e6ab      	b.n	800cee8 <ai_conv2d_stripe_f32.constprop.0+0x4e0>
 800d190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d192:	462b      	mov	r3, r5
 800d194:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d196:	442a      	add	r2, r5
 800d198:	e5e4      	b.n	800cd64 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 800d19a:	2000      	movs	r0, #0
 800d19c:	e687      	b.n	800ceae <ai_conv2d_stripe_f32.constprop.0+0x4a6>
 800d19e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d1a2:	4669      	mov	r1, sp
 800d1a4:	fb05 f202 	mul.w	r2, r5, r2
 800d1a8:	ee0e 1a90 	vmov	s29, r1
 800d1ac:	fb06 f202 	mul.w	r2, r6, r2
 800d1b0:	0095      	lsls	r5, r2, #2
 800d1b2:	637a      	str	r2, [r7, #52]	; 0x34
 800d1b4:	1dea      	adds	r2, r5, #7
 800d1b6:	f022 0207 	bic.w	r2, r2, #7
 800d1ba:	ebad 0d02 	sub.w	sp, sp, r2
 800d1be:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d1c2:	46e9      	mov	r9, sp
 800d1c4:	2a00      	cmp	r2, #0
 800d1c6:	f000 812d 	beq.w	800d424 <ai_conv2d_stripe_f32.constprop.0+0xa1c>
 800d1ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d1ce:	46ca      	mov	sl, r9
 800d1d0:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 800d470 <ai_conv2d_stripe_f32.constprop.0+0xa68>
 800d1d4:	46a9      	mov	r9, r5
 800d1d6:	fb02 f303 	mul.w	r3, r2, r3
 800d1da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1dc:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800d1e0:	647b      	str	r3, [r7, #68]	; 0x44
 800d1e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1e4:	fb03 f306 	mul.w	r3, r3, r6
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	623b      	str	r3, [r7, #32]
 800d1ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d1f0:	fb03 f306 	mul.w	r3, r3, r6
 800d1f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d1f8:	627b      	str	r3, [r7, #36]	; 0x24
 800d1fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d202:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d204:	64bb      	str	r3, [r7, #72]	; 0x48
 800d206:	2300      	movs	r3, #0
 800d208:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d20c:	b123      	cbz	r3, 800d218 <ai_conv2d_stripe_f32.constprop.0+0x810>
 800d20e:	464a      	mov	r2, r9
 800d210:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d212:	4650      	mov	r0, sl
 800d214:	f001 fd04 	bl	800ec20 <memcpy>
 800d218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f000 811c 	beq.w	800d458 <ai_conv2d_stripe_f32.constprop.0+0xa50>
 800d220:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d222:	ecf3 6a01 	vldmia	r3!, {s13}
 800d226:	64bb      	str	r3, [r7, #72]	; 0x48
 800d228:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f000 80eb 	beq.w	800d408 <ai_conv2d_stripe_f32.constprop.0+0xa00>
 800d232:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d236:	f8c7 901c 	str.w	r9, [r7, #28]
 800d23a:	425d      	negs	r5, r3
 800d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d23e:	653b      	str	r3, [r7, #80]	; 0x50
 800d240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d242:	643b      	str	r3, [r7, #64]	; 0x40
 800d244:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d248:	657b      	str	r3, [r7, #84]	; 0x54
 800d24a:	2300      	movs	r3, #0
 800d24c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d24e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d250:	2b00      	cmp	r3, #0
 800d252:	f2c0 8107 	blt.w	800d464 <ai_conv2d_stripe_f32.constprop.0+0xa5c>
 800d256:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d258:	2300      	movs	r3, #0
 800d25a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d25c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800d260:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 800d264:	4428      	add	r0, r5
 800d266:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d268:	42b0      	cmp	r0, r6
 800d26a:	bf94      	ite	ls
 800d26c:	ebc3 0300 	rsbls	r3, r3, r0
 800d270:	ebc3 0306 	rsbhi	r3, r3, r6
 800d274:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800d278:	fb02 a204 	mla	r2, r2, r4, sl
 800d27c:	eba0 0c03 	sub.w	ip, r0, r3
 800d280:	1af0      	subs	r0, r6, r3
 800d282:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800d286:	fb06 f303 	mul.w	r3, r6, r3
 800d28a:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 800d28c:	2e00      	cmp	r6, #0
 800d28e:	f340 80e6 	ble.w	800d45e <ai_conv2d_stripe_f32.constprop.0+0xa56>
 800d292:	fb04 f000 	mul.w	r0, r4, r0
 800d296:	eeb0 7a66 	vmov.f32	s14, s13
 800d29a:	fb04 fc0c 	mul.w	ip, r4, ip
 800d29e:	f023 040f 	bic.w	r4, r3, #15
 800d2a2:	6338      	str	r0, [r7, #48]	; 0x30
 800d2a4:	2600      	movs	r6, #0
 800d2a6:	1e60      	subs	r0, r4, #1
 800d2a8:	0900      	lsrs	r0, r0, #4
 800d2aa:	3001      	adds	r0, #1
 800d2ac:	ea4f 1880 	mov.w	r8, r0, lsl #6
 800d2b0:	0100      	lsls	r0, r0, #4
 800d2b2:	62b8      	str	r0, [r7, #40]	; 0x28
 800d2b4:	2c00      	cmp	r4, #0
 800d2b6:	f340 80cd 	ble.w	800d454 <ai_conv2d_stripe_f32.constprop.0+0xa4c>
 800d2ba:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 800d2be:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800d2c2:	f04f 0900 	mov.w	r9, #0
 800d2c6:	ed10 6a0f 	vldr	s12, [r0, #-60]	; 0xffffffc4
 800d2ca:	f109 0910 	add.w	r9, r9, #16
 800d2ce:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 800d2d2:	3040      	adds	r0, #64	; 0x40
 800d2d4:	ed1e 4a10 	vldr	s8, [lr, #-64]	; 0xffffffc0
 800d2d8:	45a1      	cmp	r9, r4
 800d2da:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d2de:	ed50 4a20 	vldr	s9, [r0, #-128]	; 0xffffff80
 800d2e2:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 800d2e6:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800d2ea:	ed50 5a1e 	vldr	s11, [r0, #-120]	; 0xffffff88
 800d2ee:	eee4 7a24 	vfma.f32	s15, s8, s9
 800d2f2:	ed10 6a1d 	vldr	s12, [r0, #-116]	; 0xffffff8c
 800d2f6:	ed1e ea1d 	vldr	s28, [lr, #-116]	; 0xffffff8c
 800d2fa:	ed5e da1c 	vldr	s27, [lr, #-112]	; 0xffffff90
 800d2fe:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800d302:	ed5e ca1b 	vldr	s25, [lr, #-108]	; 0xffffff94
 800d306:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800d30a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800d30e:	ed5e ba1a 	vldr	s23, [lr, #-104]	; 0xffffff98
 800d312:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800d316:	ed5e aa19 	vldr	s21, [lr, #-100]	; 0xffffff9c
 800d31a:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800d31e:	ed5e 9a18 	vldr	s19, [lr, #-96]	; 0xffffffa0
 800d322:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800d326:	eeee 7a06 	vfma.f32	s15, s28, s12
 800d32a:	ed5e 8a17 	vldr	s17, [lr, #-92]	; 0xffffffa4
 800d32e:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 800d332:	ed5e 0a16 	vldr	s1, [lr, #-88]	; 0xffffffa8
 800d336:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 800d33a:	ed5e 1a15 	vldr	s3, [lr, #-84]	; 0xffffffac
 800d33e:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800d342:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800d346:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 800d34a:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800d34e:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 800d352:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800d356:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 800d35a:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800d35e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800d362:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 800d366:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800d36a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800d36e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800d372:	eee9 7a89 	vfma.f32	s15, s19, s18
 800d376:	eee8 7a80 	vfma.f32	s15, s17, s0
 800d37a:	eee0 7a81 	vfma.f32	s15, s1, s2
 800d37e:	eee1 7a82 	vfma.f32	s15, s3, s4
 800d382:	eee2 7a83 	vfma.f32	s15, s5, s6
 800d386:	eee3 7a84 	vfma.f32	s15, s7, s8
 800d38a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800d38e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800d392:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d396:	db96      	blt.n	800d2c6 <ai_conv2d_stripe_f32.constprop.0+0x8be>
 800d398:	4441      	add	r1, r8
 800d39a:	4442      	add	r2, r8
 800d39c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d39e:	4283      	cmp	r3, r0
 800d3a0:	dd11      	ble.n	800d3c6 <ai_conv2d_stripe_f32.constprop.0+0x9be>
 800d3a2:	4686      	mov	lr, r0
 800d3a4:	468b      	mov	fp, r1
 800d3a6:	4691      	mov	r9, r2
 800d3a8:	f10e 0e01 	add.w	lr, lr, #1
 800d3ac:	ecb9 6a01 	vldmia	r9!, {s12}
 800d3b0:	ecfb 7a01 	vldmia	fp!, {s15}
 800d3b4:	4573      	cmp	r3, lr
 800d3b6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d3ba:	d1f5      	bne.n	800d3a8 <ai_conv2d_stripe_f32.constprop.0+0x9a0>
 800d3bc:	1a18      	subs	r0, r3, r0
 800d3be:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800d3c2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800d3c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3c8:	3601      	adds	r6, #1
 800d3ca:	4461      	add	r1, ip
 800d3cc:	4402      	add	r2, r0
 800d3ce:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d3d0:	42b0      	cmp	r0, r6
 800d3d2:	f47f af6f 	bne.w	800d2b4 <ai_conv2d_stripe_f32.constprop.0+0x8ac>
 800d3d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d3d8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800d3da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d3dc:	4401      	add	r1, r0
 800d3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3e0:	ed82 7a00 	vstr	s14, [r2]
 800d3e4:	1a2d      	subs	r5, r5, r0
 800d3e6:	6579      	str	r1, [r7, #84]	; 0x54
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3ee:	440a      	add	r2, r1
 800d3f0:	6a39      	ldr	r1, [r7, #32]
 800d3f2:	643a      	str	r2, [r7, #64]	; 0x40
 800d3f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3f6:	440a      	add	r2, r1
 800d3f8:	653a      	str	r2, [r7, #80]	; 0x50
 800d3fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d3fe:	429a      	cmp	r2, r3
 800d400:	f47f af25 	bne.w	800d24e <ai_conv2d_stripe_f32.constprop.0+0x846>
 800d404:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800d408:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d40a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d40c:	444a      	add	r2, r9
 800d40e:	3301      	adds	r3, #1
 800d410:	66ba      	str	r2, [r7, #104]	; 0x68
 800d412:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d414:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d416:	3204      	adds	r2, #4
 800d418:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d41a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800d41e:	429a      	cmp	r2, r3
 800d420:	f47f aef3 	bne.w	800d20a <ai_conv2d_stripe_f32.constprop.0+0x802>
 800d424:	ee1e 3a90 	vmov	r3, s29
 800d428:	469d      	mov	sp, r3
 800d42a:	e428      	b.n	800cc7e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800d42c:	2400      	movs	r4, #0
 800d42e:	e65f      	b.n	800d0f0 <ai_conv2d_stripe_f32.constprop.0+0x6e8>
 800d430:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d432:	eeb0 3a63 	vmov.f32	s6, s7
 800d436:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800d43a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d43c:	647b      	str	r3, [r7, #68]	; 0x44
 800d43e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d442:	1a98      	subs	r0, r3, r2
 800d444:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d448:	fb03 f000 	mul.w	r0, r3, r0
 800d44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d450:	1a9b      	subs	r3, r3, r2
 800d452:	e5d7      	b.n	800d004 <ai_conv2d_stripe_f32.constprop.0+0x5fc>
 800d454:	2000      	movs	r0, #0
 800d456:	e7a2      	b.n	800d39e <ai_conv2d_stripe_f32.constprop.0+0x996>
 800d458:	eef0 6a48 	vmov.f32	s13, s16
 800d45c:	e6e4      	b.n	800d228 <ai_conv2d_stripe_f32.constprop.0+0x820>
 800d45e:	eeb0 7a66 	vmov.f32	s14, s13
 800d462:	e7b8      	b.n	800d3d6 <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800d464:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d466:	462b      	mov	r3, r5
 800d468:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d46a:	442a      	add	r2, r5
 800d46c:	e6f6      	b.n	800d25c <ai_conv2d_stripe_f32.constprop.0+0x854>
 800d46e:	bf00      	nop
 800d470:	00000000 	.word	0x00000000

0800d474 <ai_dict_decompress_f32>:
 800d474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d478:	9d08      	ldr	r5, [sp, #32]
 800d47a:	2b04      	cmp	r3, #4
 800d47c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800d480:	d00e      	beq.n	800d4a0 <ai_dict_decompress_f32+0x2c>
 800d482:	2b08      	cmp	r3, #8
 800d484:	d10a      	bne.n	800d49c <ai_dict_decompress_f32+0x28>
 800d486:	42a8      	cmp	r0, r5
 800d488:	d208      	bcs.n	800d49c <ai_dict_decompress_f32+0x28>
 800d48a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d48e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f840 3b04 	str.w	r3, [r0], #4
 800d498:	4285      	cmp	r5, r0
 800d49a:	d8f6      	bhi.n	800d48a <ai_dict_decompress_f32+0x16>
 800d49c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4a0:	9b07      	ldr	r3, [sp, #28]
 800d4a2:	085e      	lsrs	r6, r3, #1
 800d4a4:	f003 0701 	and.w	r7, r3, #1
 800d4a8:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800d4ac:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800d4b0:	42a8      	cmp	r0, r5
 800d4b2:	d2f3      	bcs.n	800d49c <ai_dict_decompress_f32+0x28>
 800d4b4:	b33e      	cbz	r6, 800d506 <ai_dict_decompress_f32+0x92>
 800d4b6:	f100 0e08 	add.w	lr, r0, #8
 800d4ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800d4be:	eb01 0408 	add.w	r4, r1, r8
 800d4c2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d4c6:	f10e 0e08 	add.w	lr, lr, #8
 800d4ca:	091b      	lsrs	r3, r3, #4
 800d4cc:	4564      	cmp	r4, ip
 800d4ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f84e 3c10 	str.w	r3, [lr, #-16]
 800d4d8:	f89c 3000 	ldrb.w	r3, [ip]
 800d4dc:	f003 030f 	and.w	r3, r3, #15
 800d4e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800d4ea:	d1ea      	bne.n	800d4c2 <ai_dict_decompress_f32+0x4e>
 800d4ec:	4431      	add	r1, r6
 800d4ee:	4448      	add	r0, r9
 800d4f0:	2f00      	cmp	r7, #0
 800d4f2:	d0dd      	beq.n	800d4b0 <ai_dict_decompress_f32+0x3c>
 800d4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4f8:	091b      	lsrs	r3, r3, #4
 800d4fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f840 3b04 	str.w	r3, [r0], #4
 800d504:	e7d4      	b.n	800d4b0 <ai_dict_decompress_f32+0x3c>
 800d506:	2f00      	cmp	r7, #0
 800d508:	d1f4      	bne.n	800d4f4 <ai_dict_decompress_f32+0x80>
 800d50a:	42a8      	cmp	r0, r5
 800d50c:	d3fd      	bcc.n	800d50a <ai_dict_decompress_f32+0x96>
 800d50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d512:	bf00      	nop

0800d514 <forward_conv2d>:
 800d514:	6982      	ldr	r2, [r0, #24]
 800d516:	8813      	ldrh	r3, [r2, #0]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f000 810f 	beq.w	800d73c <forward_conv2d+0x228>
 800d51e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d522:	ed2d 8b04 	vpush	{d8-d9}
 800d526:	6852      	ldr	r2, [r2, #4]
 800d528:	b0a9      	sub	sp, #164	; 0xa4
 800d52a:	4604      	mov	r4, r0
 800d52c:	6851      	ldr	r1, [r2, #4]
 800d52e:	b101      	cbz	r1, 800d532 <forward_conv2d+0x1e>
 800d530:	6809      	ldr	r1, [r1, #0]
 800d532:	2b01      	cmp	r3, #1
 800d534:	f000 8152 	beq.w	800d7dc <forward_conv2d+0x2c8>
 800d538:	6915      	ldr	r5, [r2, #16]
 800d53a:	b105      	cbz	r5, 800d53e <forward_conv2d+0x2a>
 800d53c:	682d      	ldr	r5, [r5, #0]
 800d53e:	2b02      	cmp	r3, #2
 800d540:	f000 80fe 	beq.w	800d740 <forward_conv2d+0x22c>
 800d544:	69d3      	ldr	r3, [r2, #28]
 800d546:	8b12      	ldrh	r2, [r2, #24]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	f000 8138 	beq.w	800d7be <forward_conv2d+0x2aa>
 800d54e:	2a01      	cmp	r2, #1
 800d550:	681e      	ldr	r6, [r3, #0]
 800d552:	f240 813a 	bls.w	800d7ca <forward_conv2d+0x2b6>
 800d556:	685a      	ldr	r2, [r3, #4]
 800d558:	ee08 2a10 	vmov	s16, r2
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	68ca      	ldr	r2, [r1, #12]
 800d560:	6989      	ldr	r1, [r1, #24]
 800d562:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800d566:	6889      	ldr	r1, [r1, #8]
 800d568:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800d56a:	ee09 1a10 	vmov	s18, r1
 800d56e:	6851      	ldr	r1, [r2, #4]
 800d570:	f8d6 e00c 	ldr.w	lr, [r6, #12]
 800d574:	911b      	str	r1, [sp, #108]	; 0x6c
 800d576:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d57a:	69b7      	ldr	r7, [r6, #24]
 800d57c:	9118      	str	r1, [sp, #96]	; 0x60
 800d57e:	68d1      	ldr	r1, [r2, #12]
 800d580:	6892      	ldr	r2, [r2, #8]
 800d582:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800d586:	9223      	str	r2, [sp, #140]	; 0x8c
 800d588:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800d58a:	f8dc a008 	ldr.w	sl, [ip, #8]
 800d58e:	9224      	str	r2, [sp, #144]	; 0x90
 800d590:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d592:	f8d4 b034 	ldr.w	fp, [r4, #52]	; 0x34
 800d596:	9217      	str	r2, [sp, #92]	; 0x5c
 800d598:	6802      	ldr	r2, [r0, #0]
 800d59a:	9122      	str	r1, [sp, #136]	; 0x88
 800d59c:	9211      	str	r2, [sp, #68]	; 0x44
 800d59e:	6842      	ldr	r2, [r0, #4]
 800d5a0:	921e      	str	r2, [sp, #120]	; 0x78
 800d5a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d5a4:	9210      	str	r2, [sp, #64]	; 0x40
 800d5a6:	f8de 2008 	ldr.w	r2, [lr, #8]
 800d5aa:	9219      	str	r2, [sp, #100]	; 0x64
 800d5ac:	f8de 2004 	ldr.w	r2, [lr, #4]
 800d5b0:	921a      	str	r2, [sp, #104]	; 0x68
 800d5b2:	69e2      	ldr	r2, [r4, #28]
 800d5b4:	9225      	str	r2, [sp, #148]	; 0x94
 800d5b6:	68ba      	ldr	r2, [r7, #8]
 800d5b8:	ee08 2a90 	vmov	s17, r2
 800d5bc:	ee18 2a10 	vmov	r2, s16
 800d5c0:	b11a      	cbz	r2, 800d5ca <forward_conv2d+0xb6>
 800d5c2:	6992      	ldr	r2, [r2, #24]
 800d5c4:	6892      	ldr	r2, [r2, #8]
 800d5c6:	ee08 2a10 	vmov	s16, r2
 800d5ca:	69aa      	ldr	r2, [r5, #24]
 800d5cc:	f8d4 8020 	ldr.w	r8, [r4, #32]
 800d5d0:	6892      	ldr	r2, [r2, #8]
 800d5d2:	9216      	str	r2, [sp, #88]	; 0x58
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f000 80df 	beq.w	800d798 <forward_conv2d+0x284>
 800d5da:	699a      	ldr	r2, [r3, #24]
 800d5dc:	2a00      	cmp	r2, #0
 800d5de:	f000 80e4 	beq.w	800d7aa <forward_conv2d+0x296>
 800d5e2:	695b      	ldr	r3, [r3, #20]
 800d5e4:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	e9d2 0100 	ldrd	r0, r1, [r2]
 800d5ee:	9327      	str	r3, [sp, #156]	; 0x9c
 800d5f0:	f001 fab4 	bl	800eb5c <ai_array_get_byte_size>
 800d5f4:	69b7      	ldr	r7, [r6, #24]
 800d5f6:	9013      	str	r0, [sp, #76]	; 0x4c
 800d5f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d5fa:	9312      	str	r3, [sp, #72]	; 0x48
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	f000 80c8 	beq.w	800d792 <forward_conv2d+0x27e>
 800d602:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800d604:	fa1f f28b 	uxth.w	r2, fp
 800d608:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 800d60c:	1e71      	subs	r1, r6, #1
 800d60e:	3a01      	subs	r2, #1
 800d610:	3b01      	subs	r3, #1
 800d612:	6838      	ldr	r0, [r7, #0]
 800d614:	fb01 6202 	mla	r2, r1, r2, r6
 800d618:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d61a:	921c      	str	r2, [sp, #112]	; 0x70
 800d61c:	1e4a      	subs	r2, r1, #1
 800d61e:	fb02 1303 	mla	r3, r2, r3, r1
 800d622:	931d      	str	r3, [sp, #116]	; 0x74
 800d624:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800d628:	2b04      	cmp	r3, #4
 800d62a:	f000 808c 	beq.w	800d746 <forward_conv2d+0x232>
 800d62e:	2b08      	cmp	r3, #8
 800d630:	f000 8089 	beq.w	800d746 <forward_conv2d+0x232>
 800d634:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 800d638:	9315      	str	r3, [sp, #84]	; 0x54
 800d63a:	425b      	negs	r3, r3
 800d63c:	9314      	str	r3, [sp, #80]	; 0x50
 800d63e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d640:	2b00      	cmp	r3, #0
 800d642:	d076      	beq.n	800d732 <forward_conv2d+0x21e>
 800d644:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800d648:	4644      	mov	r4, r8
 800d64a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 800d64e:	425b      	negs	r3, r3
 800d650:	921e      	str	r2, [sp, #120]	; 0x78
 800d652:	fa0f f28b 	sxth.w	r2, fp
 800d656:	9321      	str	r3, [sp, #132]	; 0x84
 800d658:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800d65c:	2300      	movs	r3, #0
 800d65e:	921f      	str	r2, [sp, #124]	; 0x7c
 800d660:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 800d664:	9317      	str	r3, [sp, #92]	; 0x5c
 800d666:	fb0a f30b 	mul.w	r3, sl, fp
 800d66a:	9220      	str	r2, [sp, #128]	; 0x80
 800d66c:	9326      	str	r3, [sp, #152]	; 0x98
 800d66e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d670:	ee19 1a10 	vmov	r1, s18
 800d674:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d676:	920e      	str	r2, [sp, #56]	; 0x38
 800d678:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800d67e:	920d      	str	r2, [sp, #52]	; 0x34
 800d680:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d682:	4638      	mov	r0, r7
 800d684:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800d688:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d68a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d68c:	930a      	str	r3, [sp, #40]	; 0x28
 800d68e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d690:	9307      	str	r3, [sp, #28]
 800d692:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800d694:	9306      	str	r3, [sp, #24]
 800d696:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d698:	9305      	str	r3, [sp, #20]
 800d69a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d69c:	e9cd a303 	strd	sl, r3, [sp, #12]
 800d6a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d6a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d6a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d6a8:	9300      	str	r3, [sp, #0]
 800d6aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d6ac:	4413      	add	r3, r2
 800d6ae:	bfa8      	it	ge
 800d6b0:	2200      	movge	r2, #0
 800d6b2:	9208      	str	r2, [sp, #32]
 800d6b4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	bf28      	it	cs
 800d6ba:	4613      	movcs	r3, r2
 800d6bc:	ee18 2a90 	vmov	r2, s17
 800d6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c2:	ee18 3a10 	vmov	r3, s16
 800d6c6:	f7ff f99f 	bl	800ca08 <ai_conv2d_stripe_f32.constprop.0>
 800d6ca:	f1ba 0f00 	cmp.w	sl, #0
 800d6ce:	d020      	beq.n	800d712 <forward_conv2d+0x1fe>
 800d6d0:	2600      	movs	r6, #0
 800d6d2:	464a      	mov	r2, r9
 800d6d4:	f8dd 909c 	ldr.w	r9, [sp, #156]	; 0x9c
 800d6d8:	9610      	str	r6, [sp, #64]	; 0x40
 800d6da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d6dc:	4629      	mov	r1, r5
 800d6de:	4628      	mov	r0, r5
 800d6e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	9211      	str	r2, [sp, #68]	; 0x44
 800d6e6:	9310      	str	r3, [sp, #64]	; 0x40
 800d6e8:	69ab      	ldr	r3, [r5, #24]
 800d6ea:	609f      	str	r7, [r3, #8]
 800d6ec:	4623      	mov	r3, r4
 800d6ee:	444c      	add	r4, r9
 800d6f0:	47b0      	blx	r6
 800d6f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d6f4:	445f      	add	r7, fp
 800d6f6:	eba4 0308 	sub.w	r3, r4, r8
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	bfa8      	it	ge
 800d6fe:	4644      	movge	r4, r8
 800d700:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d702:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d704:	459a      	cmp	sl, r3
 800d706:	d1e8      	bne.n	800d6da <forward_conv2d+0x1c6>
 800d708:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d70a:	4691      	mov	r9, r2
 800d70c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d70e:	4413      	add	r3, r2
 800d710:	9316      	str	r3, [sp, #88]	; 0x58
 800d712:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d714:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d716:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800d718:	4413      	add	r3, r2
 800d71a:	3101      	adds	r1, #1
 800d71c:	9314      	str	r3, [sp, #80]	; 0x50
 800d71e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d720:	9117      	str	r1, [sp, #92]	; 0x5c
 800d722:	1a9b      	subs	r3, r3, r2
 800d724:	9315      	str	r3, [sp, #84]	; 0x54
 800d726:	69ab      	ldr	r3, [r5, #24]
 800d728:	68da      	ldr	r2, [r3, #12]
 800d72a:	609a      	str	r2, [r3, #8]
 800d72c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d72e:	428b      	cmp	r3, r1
 800d730:	d19d      	bne.n	800d66e <forward_conv2d+0x15a>
 800d732:	b029      	add	sp, #164	; 0xa4
 800d734:	ecbd 8b04 	vpop	{d8-d9}
 800d738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	deff      	udf	#255	; 0xff
 800d740:	2300      	movs	r3, #0
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	deff      	udf	#255	; 0xff
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	2a00      	cmp	r2, #0
 800d74a:	f43f af73 	beq.w	800d634 <forward_conv2d+0x120>
 800d74e:	69a3      	ldr	r3, [r4, #24]
 800d750:	8819      	ldrh	r1, [r3, #0]
 800d752:	2903      	cmp	r1, #3
 800d754:	d945      	bls.n	800d7e2 <forward_conv2d+0x2ce>
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d039      	beq.n	800d7d2 <forward_conv2d+0x2be>
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d036      	beq.n	800d7d2 <forward_conv2d+0x2be>
 800d764:	699c      	ldr	r4, [r3, #24]
 800d766:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800d76a:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800d76e:	68b9      	ldr	r1, [r7, #8]
 800d770:	4103      	asrs	r3, r0
 800d772:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d776:	b29b      	uxth	r3, r3
 800d778:	9401      	str	r4, [sp, #4]
 800d77a:	ee18 4a90 	vmov	r4, s17
 800d77e:	2800      	cmp	r0, #0
 800d780:	bf18      	it	ne
 800d782:	4604      	movne	r4, r0
 800d784:	ee08 4a90 	vmov	s17, r4
 800d788:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 800d78a:	9400      	str	r4, [sp, #0]
 800d78c:	f7ff fe72 	bl	800d474 <ai_dict_decompress_f32>
 800d790:	e750      	b.n	800d634 <forward_conv2d+0x120>
 800d792:	4b15      	ldr	r3, [pc, #84]	; (800d7e8 <forward_conv2d+0x2d4>)
 800d794:	9312      	str	r3, [sp, #72]	; 0x48
 800d796:	e734      	b.n	800d602 <forward_conv2d+0xee>
 800d798:	f1b8 0f00 	cmp.w	r8, #0
 800d79c:	d00b      	beq.n	800d7b6 <forward_conv2d+0x2a2>
 800d79e:	9327      	str	r3, [sp, #156]	; 0x9c
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800d7a6:	9313      	str	r3, [sp, #76]	; 0x4c
 800d7a8:	e726      	b.n	800d5f8 <forward_conv2d+0xe4>
 800d7aa:	f1b8 0f00 	cmp.w	r8, #0
 800d7ae:	d001      	beq.n	800d7b4 <forward_conv2d+0x2a0>
 800d7b0:	f8d8 8008 	ldr.w	r8, [r8, #8]
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	9327      	str	r3, [sp, #156]	; 0x9c
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	9313      	str	r3, [sp, #76]	; 0x4c
 800d7bc:	e71c      	b.n	800d5f8 <forward_conv2d+0xe4>
 800d7be:	2a01      	cmp	r2, #1
 800d7c0:	d90a      	bls.n	800d7d8 <forward_conv2d+0x2c4>
 800d7c2:	ee08 3a10 	vmov	s16, r3
 800d7c6:	461e      	mov	r6, r3
 800d7c8:	e6c9      	b.n	800d55e <forward_conv2d+0x4a>
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	ee08 2a10 	vmov	s16, r2
 800d7d0:	e6c4      	b.n	800d55c <forward_conv2d+0x48>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	deff      	udf	#255	; 0xff
 800d7d8:	68db      	ldr	r3, [r3, #12]
 800d7da:	deff      	udf	#255	; 0xff
 800d7dc:	2300      	movs	r3, #0
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	deff      	udf	#255	; 0xff
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	685b      	ldr	r3, [r3, #4]
 800d7e6:	deff      	udf	#255	; 0xff
 800d7e8:	0800ca05 	.word	0x0800ca05

0800d7ec <forward_dense>:
 800d7ec:	6983      	ldr	r3, [r0, #24]
 800d7ee:	881a      	ldrh	r2, [r3, #0]
 800d7f0:	2a00      	cmp	r2, #0
 800d7f2:	f000 80f0 	beq.w	800d9d6 <forward_dense+0x1ea>
 800d7f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7fa:	ed2d 8b02 	vpush	{d8}
 800d7fe:	6858      	ldr	r0, [r3, #4]
 800d800:	b09b      	sub	sp, #108	; 0x6c
 800d802:	6845      	ldr	r5, [r0, #4]
 800d804:	b105      	cbz	r5, 800d808 <forward_dense+0x1c>
 800d806:	682d      	ldr	r5, [r5, #0]
 800d808:	2a01      	cmp	r2, #1
 800d80a:	f000 840a 	beq.w	800e022 <forward_dense+0x836>
 800d80e:	6906      	ldr	r6, [r0, #16]
 800d810:	b106      	cbz	r6, 800d814 <forward_dense+0x28>
 800d812:	6836      	ldr	r6, [r6, #0]
 800d814:	2a02      	cmp	r2, #2
 800d816:	f000 80e0 	beq.w	800d9da <forward_dense+0x1ee>
 800d81a:	69c3      	ldr	r3, [r0, #28]
 800d81c:	930d      	str	r3, [sp, #52]	; 0x34
 800d81e:	2b00      	cmp	r3, #0
 800d820:	f000 83f1 	beq.w	800e006 <forward_dense+0x81a>
 800d824:	4619      	mov	r1, r3
 800d826:	8b03      	ldrh	r3, [r0, #24]
 800d828:	6809      	ldr	r1, [r1, #0]
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	910f      	str	r1, [sp, #60]	; 0x3c
 800d82e:	f240 83ec 	bls.w	800e00a <forward_dense+0x81e>
 800d832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d834:	685b      	ldr	r3, [r3, #4]
 800d836:	930d      	str	r3, [sp, #52]	; 0x34
 800d838:	460b      	mov	r3, r1
 800d83a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800d83e:	2a03      	cmp	r2, #3
 800d840:	68eb      	ldr	r3, [r5, #12]
 800d842:	68f7      	ldr	r7, [r6, #12]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	687c      	ldr	r4, [r7, #4]
 800d848:	9317      	str	r3, [sp, #92]	; 0x5c
 800d84a:	f8d8 3000 	ldr.w	r3, [r8]
 800d84e:	4621      	mov	r1, r4
 800d850:	9419      	str	r4, [sp, #100]	; 0x64
 800d852:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800d856:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800d85a:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800d85e:	fb01 f404 	mul.w	r4, r1, r4
 800d862:	fa4e f10c 	asr.w	r1, lr, ip
 800d866:	9116      	str	r1, [sp, #88]	; 0x58
 800d868:	f000 83d8 	beq.w	800e01c <forward_dense+0x830>
 800d86c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d86e:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800d872:	2a00      	cmp	r2, #0
 800d874:	f000 83c2 	beq.w	800dffc <forward_dense+0x810>
 800d878:	6812      	ldr	r2, [r2, #0]
 800d87a:	2a00      	cmp	r2, #0
 800d87c:	f000 83be 	beq.w	800dffc <forward_dense+0x810>
 800d880:	2b04      	cmp	r3, #4
 800d882:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800d886:	f000 83a8 	beq.w	800dfda <forward_dense+0x7ee>
 800d88a:	2b08      	cmp	r3, #8
 800d88c:	f000 83a5 	beq.w	800dfda <forward_dense+0x7ee>
 800d890:	f04f 0a00 	mov.w	sl, #0
 800d894:	69ab      	ldr	r3, [r5, #24]
 800d896:	fb07 f404 	mul.w	r4, r7, r4
 800d89a:	69b2      	ldr	r2, [r6, #24]
 800d89c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800d8a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8a2:	6892      	ldr	r2, [r2, #8]
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800d8aa:	9206      	str	r2, [sp, #24]
 800d8ac:	685b      	ldr	r3, [r3, #4]
 800d8ae:	428a      	cmp	r2, r1
 800d8b0:	9110      	str	r1, [sp, #64]	; 0x40
 800d8b2:	9304      	str	r3, [sp, #16]
 800d8b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d8b6:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800d8ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8be:	900e      	str	r0, [sp, #56]	; 0x38
 800d8c0:	9303      	str	r3, [sp, #12]
 800d8c2:	f080 8380 	bcs.w	800dfc6 <forward_dense+0x7da>
 800d8c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d8c8:	4654      	mov	r4, sl
 800d8ca:	4bb9      	ldr	r3, [pc, #740]	; (800dbb0 <forward_dense+0x3c4>)
 800d8cc:	46ca      	mov	sl, r9
 800d8ce:	08d0      	lsrs	r0, r2, #3
 800d8d0:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 800dbb4 <forward_dense+0x3c8>
 800d8d4:	4413      	add	r3, r2
 800d8d6:	9009      	str	r0, [sp, #36]	; 0x24
 800d8d8:	0099      	lsls	r1, r3, #2
 800d8da:	f022 0301 	bic.w	r3, r2, #1
 800d8de:	f002 0201 	and.w	r2, r2, #1
 800d8e2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800d8e6:	9118      	str	r1, [sp, #96]	; 0x60
 800d8e8:	920a      	str	r2, [sp, #40]	; 0x28
 800d8ea:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800d8ee:	9305      	str	r3, [sp, #20]
 800d8f0:	f101 0320 	add.w	r3, r1, #32
 800d8f4:	9207      	str	r2, [sp, #28]
 800d8f6:	9311      	str	r3, [sp, #68]	; 0x44
 800d8f8:	444b      	add	r3, r9
 800d8fa:	469b      	mov	fp, r3
 800d8fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	689a      	ldr	r2, [r3, #8]
 800d904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d906:	b10b      	cbz	r3, 800d90c <forward_dense+0x120>
 800d908:	699b      	ldr	r3, [r3, #24]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	2c00      	cmp	r4, #0
 800d90e:	f000 834b 	beq.w	800dfa8 <forward_dense+0x7bc>
 800d912:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d914:	2904      	cmp	r1, #4
 800d916:	f000 826a 	beq.w	800ddee <forward_dense+0x602>
 800d91a:	9903      	ldr	r1, [sp, #12]
 800d91c:	9806      	ldr	r0, [sp, #24]
 800d91e:	4281      	cmp	r1, r0
 800d920:	f240 8356 	bls.w	800dfd0 <forward_dense+0x7e4>
 800d924:	4686      	mov	lr, r0
 800d926:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d928:	eb00 090a 	add.w	r9, r0, sl
 800d92c:	0941      	lsrs	r1, r0, #5
 800d92e:	f10a 0004 	add.w	r0, sl, #4
 800d932:	f8cd 9020 	str.w	r9, [sp, #32]
 800d936:	9012      	str	r0, [sp, #72]	; 0x48
 800d938:	1c48      	adds	r0, r1, #1
 800d93a:	00c9      	lsls	r1, r1, #3
 800d93c:	3110      	adds	r1, #16
 800d93e:	9115      	str	r1, [sp, #84]	; 0x54
 800d940:	00c1      	lsls	r1, r0, #3
 800d942:	9113      	str	r1, [sp, #76]	; 0x4c
 800d944:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 800d948:	9114      	str	r1, [sp, #80]	; 0x50
 800d94a:	f1a9 0104 	sub.w	r1, r9, #4
 800d94e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800d952:	910c      	str	r1, [sp, #48]	; 0x30
 800d954:	2b00      	cmp	r3, #0
 800d956:	f000 8128 	beq.w	800dbaa <forward_dense+0x3be>
 800d95a:	ecb3 5a01 	vldmia	r3!, {s10}
 800d95e:	f1b9 0f07 	cmp.w	r9, #7
 800d962:	d83d      	bhi.n	800d9e0 <forward_dense+0x1f4>
 800d964:	45da      	cmp	sl, fp
 800d966:	d211      	bcs.n	800d98c <forward_dense+0x1a0>
 800d968:	eddf 7a92 	vldr	s15, [pc, #584]	; 800dbb4 <forward_dense+0x3c8>
 800d96c:	4650      	mov	r0, sl
 800d96e:	4615      	mov	r5, r2
 800d970:	f815 1b01 	ldrb.w	r1, [r5], #1
 800d974:	ecb0 7a01 	vldmia	r0!, {s14}
 800d978:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800d97c:	4558      	cmp	r0, fp
 800d97e:	edd1 6a00 	vldr	s13, [r1]
 800d982:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d986:	d3f3      	bcc.n	800d970 <forward_dense+0x184>
 800d988:	ee35 5a27 	vadd.f32	s10, s10, s15
 800d98c:	9904      	ldr	r1, [sp, #16]
 800d98e:	ecae 5a01 	vstmia	lr!, {s10}
 800d992:	440a      	add	r2, r1
 800d994:	9903      	ldr	r1, [sp, #12]
 800d996:	458e      	cmp	lr, r1
 800d998:	d3dc      	bcc.n	800d954 <forward_dense+0x168>
 800d99a:	9a06      	ldr	r2, [sp, #24]
 800d99c:	1a8b      	subs	r3, r1, r2
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	f023 0303 	bic.w	r3, r3, #3
 800d9a4:	3304      	adds	r3, #4
 800d9a6:	18d3      	adds	r3, r2, r3
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	9306      	str	r3, [sp, #24]
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d9b2:	4413      	add	r3, r2
 800d9b4:	9a07      	ldr	r2, [sp, #28]
 800d9b6:	4281      	cmp	r1, r0
 800d9b8:	9303      	str	r3, [sp, #12]
 800d9ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d9bc:	441a      	add	r2, r3
 800d9be:	449b      	add	fp, r3
 800d9c0:	9207      	str	r2, [sp, #28]
 800d9c2:	9a05      	ldr	r2, [sp, #20]
 800d9c4:	441a      	add	r2, r3
 800d9c6:	9205      	str	r2, [sp, #20]
 800d9c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9ca:	4692      	mov	sl, r2
 800d9cc:	f080 82fb 	bcs.w	800dfc6 <forward_dense+0x7da>
 800d9d0:	441a      	add	r2, r3
 800d9d2:	920b      	str	r2, [sp, #44]	; 0x2c
 800d9d4:	e793      	b.n	800d8fe <forward_dense+0x112>
 800d9d6:	6853      	ldr	r3, [r2, #4]
 800d9d8:	deff      	udf	#255	; 0xff
 800d9da:	2300      	movs	r3, #0
 800d9dc:	685b      	ldr	r3, [r3, #4]
 800d9de:	deff      	udf	#255	; 0xff
 800d9e0:	f002 0103 	and.w	r1, r2, #3
 800d9e4:	2902      	cmp	r1, #2
 800d9e6:	f000 81e6 	beq.w	800ddb6 <forward_dense+0x5ca>
 800d9ea:	2903      	cmp	r1, #3
 800d9ec:	f000 80e4 	beq.w	800dbb8 <forward_dense+0x3cc>
 800d9f0:	2901      	cmp	r1, #1
 800d9f2:	f000 81ef 	beq.w	800ddd4 <forward_dense+0x5e8>
 800d9f6:	9908      	ldr	r1, [sp, #32]
 800d9f8:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800dbb4 <forward_dense+0x3c8>
 800d9fc:	458a      	cmp	sl, r1
 800d9fe:	f200 82e9 	bhi.w	800dfd4 <forward_dense+0x7e8>
 800da02:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800da04:	f102 0108 	add.w	r1, r2, #8
 800da08:	f10a 0020 	add.w	r0, sl, #32
 800da0c:	18ae      	adds	r6, r5, r2
 800da0e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800da12:	3108      	adds	r1, #8
 800da14:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800da18:	3020      	adds	r0, #32
 800da1a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da1e:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800da22:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800da26:	edd5 7a00 	vldr	s15, [r5]
 800da2a:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800da2e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800da32:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800da36:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da3a:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800da3e:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800da42:	edd5 2a00 	vldr	s5, [r5]
 800da46:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800da4a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800da4e:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800da52:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da56:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800da5a:	ed95 3a00 	vldr	s6, [r5]
 800da5e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800da62:	eee3 7a23 	vfma.f32	s15, s6, s7
 800da66:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da6a:	edd5 3a00 	vldr	s7, [r5]
 800da6e:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800da72:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da76:	eee3 7a84 	vfma.f32	s15, s7, s8
 800da7a:	ed95 4a00 	vldr	s8, [r5]
 800da7e:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800da82:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da86:	eee4 7a24 	vfma.f32	s15, s8, s9
 800da8a:	edd5 4a00 	vldr	s9, [r5]
 800da8e:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800da92:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800da96:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800da9a:	edd5 5a00 	vldr	s11, [r5]
 800da9e:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800daa2:	428e      	cmp	r6, r1
 800daa4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800daa8:	eee5 7a86 	vfma.f32	s15, s11, s12
 800daac:	ed95 6a00 	vldr	s12, [r5]
 800dab0:	eee6 7a26 	vfma.f32	s15, s12, s13
 800dab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dab8:	d1a9      	bne.n	800da0e <forward_dense+0x222>
 800daba:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dabc:	1850      	adds	r0, r2, r1
 800dabe:	9914      	ldr	r1, [sp, #80]	; 0x50
 800dac0:	4559      	cmp	r1, fp
 800dac2:	d26f      	bcs.n	800dba4 <forward_dense+0x3b8>
 800dac4:	7805      	ldrb	r5, [r0, #0]
 800dac6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800daca:	edd5 7a00 	vldr	s15, [r5]
 800dace:	460d      	mov	r5, r1
 800dad0:	ecf5 6a01 	vldmia	r5!, {s13}
 800dad4:	45ab      	cmp	fp, r5
 800dad6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dada:	d963      	bls.n	800dba4 <forward_dense+0x3b8>
 800dadc:	7845      	ldrb	r5, [r0, #1]
 800dade:	edd1 6a01 	vldr	s13, [r1, #4]
 800dae2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dae6:	edd5 7a00 	vldr	s15, [r5]
 800daea:	f101 0508 	add.w	r5, r1, #8
 800daee:	45ab      	cmp	fp, r5
 800daf0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800daf4:	d956      	bls.n	800dba4 <forward_dense+0x3b8>
 800daf6:	7885      	ldrb	r5, [r0, #2]
 800daf8:	edd1 6a02 	vldr	s13, [r1, #8]
 800dafc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db00:	edd5 7a00 	vldr	s15, [r5]
 800db04:	f101 050c 	add.w	r5, r1, #12
 800db08:	45ab      	cmp	fp, r5
 800db0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db0e:	d949      	bls.n	800dba4 <forward_dense+0x3b8>
 800db10:	78c5      	ldrb	r5, [r0, #3]
 800db12:	edd1 6a03 	vldr	s13, [r1, #12]
 800db16:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db1a:	edd5 7a00 	vldr	s15, [r5]
 800db1e:	f101 0510 	add.w	r5, r1, #16
 800db22:	45ab      	cmp	fp, r5
 800db24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db28:	d93c      	bls.n	800dba4 <forward_dense+0x3b8>
 800db2a:	7905      	ldrb	r5, [r0, #4]
 800db2c:	edd1 6a04 	vldr	s13, [r1, #16]
 800db30:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db34:	edd5 7a00 	vldr	s15, [r5]
 800db38:	f101 0514 	add.w	r5, r1, #20
 800db3c:	45ab      	cmp	fp, r5
 800db3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db42:	d92f      	bls.n	800dba4 <forward_dense+0x3b8>
 800db44:	7945      	ldrb	r5, [r0, #5]
 800db46:	edd1 6a05 	vldr	s13, [r1, #20]
 800db4a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db4e:	edd5 7a00 	vldr	s15, [r5]
 800db52:	f101 0518 	add.w	r5, r1, #24
 800db56:	45ab      	cmp	fp, r5
 800db58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db5c:	d922      	bls.n	800dba4 <forward_dense+0x3b8>
 800db5e:	7985      	ldrb	r5, [r0, #6]
 800db60:	edd1 6a06 	vldr	s13, [r1, #24]
 800db64:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db68:	edd5 7a00 	vldr	s15, [r5]
 800db6c:	f101 051c 	add.w	r5, r1, #28
 800db70:	45ab      	cmp	fp, r5
 800db72:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db76:	d915      	bls.n	800dba4 <forward_dense+0x3b8>
 800db78:	79c5      	ldrb	r5, [r0, #7]
 800db7a:	edd1 6a07 	vldr	s13, [r1, #28]
 800db7e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800db82:	edd5 7a00 	vldr	s15, [r5]
 800db86:	f101 0520 	add.w	r5, r1, #32
 800db8a:	45ab      	cmp	fp, r5
 800db8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800db90:	d908      	bls.n	800dba4 <forward_dense+0x3b8>
 800db92:	edd1 7a08 	vldr	s15, [r1, #32]
 800db96:	7a01      	ldrb	r1, [r0, #8]
 800db98:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800db9c:	edd1 6a00 	vldr	s13, [r1]
 800dba0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dba4:	ee35 5a07 	vadd.f32	s10, s10, s14
 800dba8:	e6f0      	b.n	800d98c <forward_dense+0x1a0>
 800dbaa:	ed9f 5a02 	vldr	s10, [pc, #8]	; 800dbb4 <forward_dense+0x3c8>
 800dbae:	e6d6      	b.n	800d95e <forward_dense+0x172>
 800dbb0:	3ffffff8 	.word	0x3ffffff8
 800dbb4:	00000000 	.word	0x00000000
 800dbb8:	eeb0 7a48 	vmov.f32	s14, s16
 800dbbc:	4650      	mov	r0, sl
 800dbbe:	4611      	mov	r1, r2
 800dbc0:	468c      	mov	ip, r1
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	f81c 5b01 	ldrb.w	r5, [ip], #1
 800dbc8:	ecf6 7a01 	vldmia	r6!, {s15}
 800dbcc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dbd0:	edd5 6a00 	vldr	s13, [r5]
 800dbd4:	9d08      	ldr	r5, [sp, #32]
 800dbd6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dbda:	42ae      	cmp	r6, r5
 800dbdc:	d866      	bhi.n	800dcac <forward_dense+0x4c0>
 800dbde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dbe0:	f101 0711 	add.w	r7, r1, #17
 800dbe4:	3109      	adds	r1, #9
 800dbe6:	eba5 0800 	sub.w	r8, r5, r0
 800dbea:	3024      	adds	r0, #36	; 0x24
 800dbec:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800dbf0:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800dbf4:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800dbf8:	3108      	adds	r1, #8
 800dbfa:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800dbfe:	3020      	adds	r0, #32
 800dc00:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc04:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800dc08:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800dc0c:	edd5 7a00 	vldr	s15, [r5]
 800dc10:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800dc14:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800dc18:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800dc1c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc20:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800dc24:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800dc28:	edd5 2a00 	vldr	s5, [r5]
 800dc2c:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800dc30:	eee2 7a83 	vfma.f32	s15, s5, s6
 800dc34:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800dc38:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc3c:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800dc40:	ed95 3a00 	vldr	s6, [r5]
 800dc44:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800dc48:	eee3 7a23 	vfma.f32	s15, s6, s7
 800dc4c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc50:	edd5 3a00 	vldr	s7, [r5]
 800dc54:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800dc58:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc5c:	eee3 7a84 	vfma.f32	s15, s7, s8
 800dc60:	ed95 4a00 	vldr	s8, [r5]
 800dc64:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800dc68:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc6c:	eee4 7a24 	vfma.f32	s15, s8, s9
 800dc70:	edd5 4a00 	vldr	s9, [r5]
 800dc74:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800dc78:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc7c:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800dc80:	edd5 5a00 	vldr	s11, [r5]
 800dc84:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800dc88:	428f      	cmp	r7, r1
 800dc8a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dc8e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800dc92:	ed95 6a00 	vldr	s12, [r5]
 800dc96:	eee6 7a26 	vfma.f32	s15, s12, s13
 800dc9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc9e:	d1a9      	bne.n	800dbf4 <forward_dense+0x408>
 800dca0:	f108 0801 	add.w	r8, r8, #1
 800dca4:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800dca8:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800dcac:	455e      	cmp	r6, fp
 800dcae:	f4bf af79 	bcs.w	800dba4 <forward_dense+0x3b8>
 800dcb2:	f89c 1000 	ldrb.w	r1, [ip]
 800dcb6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dcba:	edd1 7a00 	vldr	s15, [r1]
 800dcbe:	4631      	mov	r1, r6
 800dcc0:	ecf1 6a01 	vldmia	r1!, {s13}
 800dcc4:	458b      	cmp	fp, r1
 800dcc6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dcca:	f67f af6b 	bls.w	800dba4 <forward_dense+0x3b8>
 800dcce:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800dcd2:	edd6 6a01 	vldr	s13, [r6, #4]
 800dcd6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dcda:	edd1 7a00 	vldr	s15, [r1]
 800dcde:	f106 0108 	add.w	r1, r6, #8
 800dce2:	458b      	cmp	fp, r1
 800dce4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dce8:	f67f af5c 	bls.w	800dba4 <forward_dense+0x3b8>
 800dcec:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800dcf0:	edd6 6a02 	vldr	s13, [r6, #8]
 800dcf4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dcf8:	edd1 7a00 	vldr	s15, [r1]
 800dcfc:	f106 010c 	add.w	r1, r6, #12
 800dd00:	458b      	cmp	fp, r1
 800dd02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd06:	f67f af4d 	bls.w	800dba4 <forward_dense+0x3b8>
 800dd0a:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800dd0e:	edd6 6a03 	vldr	s13, [r6, #12]
 800dd12:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dd16:	edd1 7a00 	vldr	s15, [r1]
 800dd1a:	f106 0110 	add.w	r1, r6, #16
 800dd1e:	458b      	cmp	fp, r1
 800dd20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd24:	f67f af3e 	bls.w	800dba4 <forward_dense+0x3b8>
 800dd28:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800dd2c:	edd6 6a04 	vldr	s13, [r6, #16]
 800dd30:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dd34:	edd1 7a00 	vldr	s15, [r1]
 800dd38:	f106 0114 	add.w	r1, r6, #20
 800dd3c:	458b      	cmp	fp, r1
 800dd3e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd42:	f67f af2f 	bls.w	800dba4 <forward_dense+0x3b8>
 800dd46:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800dd4a:	edd6 6a05 	vldr	s13, [r6, #20]
 800dd4e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dd52:	edd1 7a00 	vldr	s15, [r1]
 800dd56:	f106 0118 	add.w	r1, r6, #24
 800dd5a:	458b      	cmp	fp, r1
 800dd5c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd60:	f67f af20 	bls.w	800dba4 <forward_dense+0x3b8>
 800dd64:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800dd68:	edd6 6a06 	vldr	s13, [r6, #24]
 800dd6c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dd70:	edd1 7a00 	vldr	s15, [r1]
 800dd74:	f106 011c 	add.w	r1, r6, #28
 800dd78:	458b      	cmp	fp, r1
 800dd7a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd7e:	f67f af11 	bls.w	800dba4 <forward_dense+0x3b8>
 800dd82:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800dd86:	edd6 6a07 	vldr	s13, [r6, #28]
 800dd8a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800dd8e:	edd1 7a00 	vldr	s15, [r1]
 800dd92:	f106 0120 	add.w	r1, r6, #32
 800dd96:	458b      	cmp	fp, r1
 800dd98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dd9c:	f67f af02 	bls.w	800dba4 <forward_dense+0x3b8>
 800dda0:	f89c 1008 	ldrb.w	r1, [ip, #8]
 800dda4:	edd6 7a08 	vldr	s15, [r6, #32]
 800dda8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800ddac:	edd1 6a00 	vldr	s13, [r1]
 800ddb0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ddb4:	e6f6      	b.n	800dba4 <forward_dense+0x3b8>
 800ddb6:	eeb0 7a48 	vmov.f32	s14, s16
 800ddba:	4650      	mov	r0, sl
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	f811 5b01 	ldrb.w	r5, [r1], #1
 800ddc2:	ecf0 7a01 	vldmia	r0!, {s15}
 800ddc6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800ddca:	edd5 6a00 	vldr	s13, [r5]
 800ddce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ddd2:	e6f5      	b.n	800dbc0 <forward_dense+0x3d4>
 800ddd4:	4611      	mov	r1, r2
 800ddd6:	edda 7a00 	vldr	s15, [sl]
 800ddda:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dddc:	f811 5b01 	ldrb.w	r5, [r1], #1
 800dde0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dde4:	ed95 7a00 	vldr	s14, [r5]
 800dde8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ddec:	e7e7      	b.n	800ddbe <forward_dense+0x5d2>
 800ddee:	9803      	ldr	r0, [sp, #12]
 800ddf0:	9906      	ldr	r1, [sp, #24]
 800ddf2:	4288      	cmp	r0, r1
 800ddf4:	f67f adda 	bls.w	800d9ac <forward_dense+0x1c0>
 800ddf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddfa:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800ddfe:	468b      	mov	fp, r1
 800de00:	f100 0c01 	add.w	ip, r0, #1
 800de04:	9805      	ldr	r0, [sp, #20]
 800de06:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800de0a:	3801      	subs	r0, #1
 800de0c:	9008      	str	r0, [sp, #32]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f000 80bf 	beq.w	800df92 <forward_dense+0x7a6>
 800de14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de16:	ecf3 2a01 	vldmia	r3!, {s5}
 800de1a:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800dbb4 <forward_dense+0x3c8>
 800de1e:	2900      	cmp	r1, #0
 800de20:	f000 80bf 	beq.w	800dfa2 <forward_dense+0x7b6>
 800de24:	1d10      	adds	r0, r2, #4
 800de26:	f10a 0120 	add.w	r1, sl, #32
 800de2a:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800de2e:	3004      	adds	r0, #4
 800de30:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800de34:	3120      	adds	r1, #32
 800de36:	f007 0e0f 	and.w	lr, r7, #15
 800de3a:	093f      	lsrs	r7, r7, #4
 800de3c:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 800de40:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800de44:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 800de48:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800de4c:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 800de50:	edde 7a00 	vldr	s15, [lr]
 800de54:	ed97 3a00 	vldr	s6, [r7]
 800de58:	0937      	lsrs	r7, r6, #4
 800de5a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800de5e:	f006 060f 	and.w	r6, r6, #15
 800de62:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800de66:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800de6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800de6e:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 800de72:	eee3 7a04 	vfma.f32	s15, s6, s8
 800de76:	ed97 3a00 	vldr	s6, [r7]
 800de7a:	ed96 4a00 	vldr	s8, [r6]
 800de7e:	092e      	lsrs	r6, r5, #4
 800de80:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800de84:	f005 050f 	and.w	r5, r5, #15
 800de88:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800de8c:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 800de90:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800de94:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800de98:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800de9c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800dea0:	eee4 7a05 	vfma.f32	s15, s8, s10
 800dea4:	ed96 4a00 	vldr	s8, [r6]
 800dea8:	ed95 5a00 	vldr	s10, [r5]
 800deac:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 800deb0:	4560      	cmp	r0, ip
 800deb2:	ea4f 1615 	mov.w	r6, r5, lsr #4
 800deb6:	f005 050f 	and.w	r5, r5, #15
 800deba:	eee4 7a24 	vfma.f32	s15, s8, s9
 800debe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800dec2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800dec6:	eee5 7a06 	vfma.f32	s15, s10, s12
 800deca:	ed96 5a00 	vldr	s10, [r6]
 800dece:	ed95 6a00 	vldr	s12, [r5]
 800ded2:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ded6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800deda:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dede:	d1a4      	bne.n	800de2a <forward_dense+0x63e>
 800dee0:	f1ac 0804 	sub.w	r8, ip, #4
 800dee4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800dee8:	9905      	ldr	r1, [sp, #20]
 800deea:	458e      	cmp	lr, r1
 800deec:	d229      	bcs.n	800df42 <forward_dense+0x756>
 800deee:	9908      	ldr	r1, [sp, #32]
 800def0:	f10e 0008 	add.w	r0, lr, #8
 800def4:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800def8:	eba1 070e 	sub.w	r7, r1, lr
 800defc:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 800df00:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800df04:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800df08:	3008      	adds	r0, #8
 800df0a:	ed50 5a03 	vldr	s11, [r0, #-12]
 800df0e:	f001 050f 	and.w	r5, r1, #15
 800df12:	0909      	lsrs	r1, r1, #4
 800df14:	ed50 6a04 	vldr	s13, [r0, #-16]
 800df18:	42b7      	cmp	r7, r6
 800df1a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800df1e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800df22:	edd5 7a00 	vldr	s15, [r5]
 800df26:	ed91 6a00 	vldr	s12, [r1]
 800df2a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800df2e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800df32:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df36:	d1e5      	bne.n	800df04 <forward_dense+0x718>
 800df38:	f109 0901 	add.w	r9, r9, #1
 800df3c:	44c8      	add	r8, r9
 800df3e:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800df42:	990a      	ldr	r1, [sp, #40]	; 0x28
 800df44:	b1c1      	cbz	r1, 800df78 <forward_dense+0x78c>
 800df46:	f898 1000 	ldrb.w	r1, [r8]
 800df4a:	edde 7a00 	vldr	s15, [lr]
 800df4e:	0909      	lsrs	r1, r1, #4
 800df50:	9804      	ldr	r0, [sp, #16]
 800df52:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800df56:	4402      	add	r2, r0
 800df58:	4484      	add	ip, r0
 800df5a:	edd1 6a00 	vldr	s13, [r1]
 800df5e:	9903      	ldr	r1, [sp, #12]
 800df60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800df64:	ee72 2a87 	vadd.f32	s5, s5, s14
 800df68:	eceb 2a01 	vstmia	fp!, {s5}
 800df6c:	4559      	cmp	r1, fp
 800df6e:	f63f af4e 	bhi.w	800de0e <forward_dense+0x622>
 800df72:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800df76:	e510      	b.n	800d99a <forward_dense+0x1ae>
 800df78:	9904      	ldr	r1, [sp, #16]
 800df7a:	ee32 7a87 	vadd.f32	s14, s5, s14
 800df7e:	440a      	add	r2, r1
 800df80:	448c      	add	ip, r1
 800df82:	9903      	ldr	r1, [sp, #12]
 800df84:	ecab 7a01 	vstmia	fp!, {s14}
 800df88:	458b      	cmp	fp, r1
 800df8a:	d2f2      	bcs.n	800df72 <forward_dense+0x786>
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f47f af41 	bne.w	800de14 <forward_dense+0x628>
 800df92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df94:	eef0 2a48 	vmov.f32	s5, s16
 800df98:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800e028 <forward_dense+0x83c>
 800df9c:	2900      	cmp	r1, #0
 800df9e:	f47f af41 	bne.w	800de24 <forward_dense+0x638>
 800dfa2:	46d6      	mov	lr, sl
 800dfa4:	4690      	mov	r8, r2
 800dfa6:	e79f      	b.n	800dee8 <forward_dense+0x6fc>
 800dfa8:	9819      	ldr	r0, [sp, #100]	; 0x64
 800dfaa:	4651      	mov	r1, sl
 800dfac:	9d06      	ldr	r5, [sp, #24]
 800dfae:	9001      	str	r0, [sp, #4]
 800dfb0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800dfb2:	9000      	str	r0, [sp, #0]
 800dfb4:	4628      	mov	r0, r5
 800dfb6:	f000 fc21 	bl	800e7fc <lite_dense_if32of32wf32>
 800dfba:	462b      	mov	r3, r5
 800dfbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dfbe:	4413      	add	r3, r2
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	9306      	str	r3, [sp, #24]
 800dfc4:	e4f2      	b.n	800d9ac <forward_dense+0x1c0>
 800dfc6:	b01b      	add	sp, #108	; 0x6c
 800dfc8:	ecbd 8b02 	vpop	{d8}
 800dfcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd0:	4601      	mov	r1, r0
 800dfd2:	e4eb      	b.n	800d9ac <forward_dense+0x1c0>
 800dfd4:	4651      	mov	r1, sl
 800dfd6:	4610      	mov	r0, r2
 800dfd8:	e572      	b.n	800dac0 <forward_dense+0x2d4>
 800dfda:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800dfde:	f1b9 0f00 	cmp.w	r9, #0
 800dfe2:	d016      	beq.n	800e012 <forward_dense+0x826>
 800dfe4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dfe8:	f000 fdb8 	bl	800eb5c <ai_array_get_byte_size>
 800dfec:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800dff0:	4602      	mov	r2, r0
 800dff2:	4641      	mov	r1, r8
 800dff4:	4650      	mov	r0, sl
 800dff6:	f000 fe13 	bl	800ec20 <memcpy>
 800dffa:	e44b      	b.n	800d894 <forward_dense+0xa8>
 800dffc:	2b04      	cmp	r3, #4
 800dffe:	d00a      	beq.n	800e016 <forward_dense+0x82a>
 800e000:	f04f 0900 	mov.w	r9, #0
 800e004:	e441      	b.n	800d88a <forward_dense+0x9e>
 800e006:	930f      	str	r3, [sp, #60]	; 0x3c
 800e008:	e417      	b.n	800d83a <forward_dense+0x4e>
 800e00a:	2300      	movs	r3, #0
 800e00c:	930d      	str	r3, [sp, #52]	; 0x34
 800e00e:	460b      	mov	r3, r1
 800e010:	e413      	b.n	800d83a <forward_dense+0x4e>
 800e012:	46c2      	mov	sl, r8
 800e014:	e43e      	b.n	800d894 <forward_dense+0xa8>
 800e016:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800e01a:	e43b      	b.n	800d894 <forward_dense+0xa8>
 800e01c:	2300      	movs	r3, #0
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	deff      	udf	#255	; 0xff
 800e022:	2300      	movs	r3, #0
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	deff      	udf	#255	; 0xff
 800e028:	00000000 	.word	0x00000000

0800e02c <forward_mp>:
 800e02c:	6983      	ldr	r3, [r0, #24]
 800e02e:	881a      	ldrh	r2, [r3, #0]
 800e030:	2a00      	cmp	r2, #0
 800e032:	f000 80bc 	beq.w	800e1ae <forward_mp+0x182>
 800e036:	6859      	ldr	r1, [r3, #4]
 800e038:	684b      	ldr	r3, [r1, #4]
 800e03a:	b103      	cbz	r3, 800e03e <forward_mp+0x12>
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2a01      	cmp	r2, #1
 800e040:	f000 80ba 	beq.w	800e1b8 <forward_mp+0x18c>
 800e044:	690a      	ldr	r2, [r1, #16]
 800e046:	2a00      	cmp	r2, #0
 800e048:	f000 80b9 	beq.w	800e1be <forward_mp+0x192>
 800e04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e050:	6811      	ldr	r1, [r2, #0]
 800e052:	b093      	sub	sp, #76	; 0x4c
 800e054:	68ca      	ldr	r2, [r1, #12]
 800e056:	6989      	ldr	r1, [r1, #24]
 800e058:	68d4      	ldr	r4, [r2, #12]
 800e05a:	6895      	ldr	r5, [r2, #8]
 800e05c:	688a      	ldr	r2, [r1, #8]
 800e05e:	68d9      	ldr	r1, [r3, #12]
 800e060:	699b      	ldr	r3, [r3, #24]
 800e062:	9200      	str	r2, [sp, #0]
 800e064:	689b      	ldr	r3, [r3, #8]
 800e066:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800e068:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800e06c:	930e      	str	r3, [sp, #56]	; 0x38
 800e06e:	9408      	str	r4, [sp, #32]
 800e070:	9504      	str	r5, [sp, #16]
 800e072:	e9d2 3600 	ldrd	r3, r6, [r2]
 800e076:	e9d1 7202 	ldrd	r7, r2, [r1, #8]
 800e07a:	69c1      	ldr	r1, [r0, #28]
 800e07c:	f1c3 0a00 	rsb	sl, r3, #0
 800e080:	960d      	str	r6, [sp, #52]	; 0x34
 800e082:	9109      	str	r1, [sp, #36]	; 0x24
 800e084:	6a01      	ldr	r1, [r0, #32]
 800e086:	9705      	str	r7, [sp, #20]
 800e088:	910a      	str	r1, [sp, #40]	; 0x28
 800e08a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800e08c:	910b      	str	r1, [sp, #44]	; 0x2c
 800e08e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e090:	910c      	str	r1, [sp, #48]	; 0x30
 800e092:	2c00      	cmp	r4, #0
 800e094:	f000 8088 	beq.w	800e1a8 <forward_mp+0x17c>
 800e098:	441a      	add	r2, r3
 800e09a:	9b05      	ldr	r3, [sp, #20]
 800e09c:	ea4f 0789 	mov.w	r7, r9, lsl #2
 800e0a0:	f04f 0b00 	mov.w	fp, #0
 800e0a4:	fb09 f303 	mul.w	r3, r9, r3
 800e0a8:	9201      	str	r2, [sp, #4]
 800e0aa:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800e0ae:	4273      	negs	r3, r6
 800e0b0:	9310      	str	r3, [sp, #64]	; 0x40
 800e0b2:	fb05 f307 	mul.w	r3, r5, r7
 800e0b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0ba:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800e0be:	9901      	ldr	r1, [sp, #4]
 800e0c0:	9307      	str	r3, [sp, #28]
 800e0c2:	428a      	cmp	r2, r1
 800e0c4:	bf94      	ite	ls
 800e0c6:	eb0a 0e02 	addls.w	lr, sl, r2
 800e0ca:	eb0a 0e01 	addhi.w	lr, sl, r1
 800e0ce:	9a04      	ldr	r2, [sp, #16]
 800e0d0:	2a00      	cmp	r2, #0
 800e0d2:	d05f      	beq.n	800e194 <forward_mp+0x168>
 800e0d4:	9a05      	ldr	r2, [sp, #20]
 800e0d6:	9d00      	ldr	r5, [sp, #0]
 800e0d8:	fb02 f303 	mul.w	r3, r2, r3
 800e0dc:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e0e0:	9303      	str	r3, [sp, #12]
 800e0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0e4:	18d3      	adds	r3, r2, r3
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	9302      	str	r3, [sp, #8]
 800e0ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e0ec:	9206      	str	r2, [sp, #24]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	469b      	mov	fp, r3
 800e0f2:	db5e      	blt.n	800e1b2 <forward_mp+0x186>
 800e0f4:	9a03      	ldr	r2, [sp, #12]
 800e0f6:	18d6      	adds	r6, r2, r3
 800e0f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0fa:	9902      	ldr	r1, [sp, #8]
 800e0fc:	fb06 2607 	mla	r6, r6, r7, r2
 800e100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e102:	428a      	cmp	r2, r1
 800e104:	bf94      	ite	ls
 800e106:	eb0b 0402 	addls.w	r4, fp, r2
 800e10a:	eb0b 0401 	addhi.w	r4, fp, r1
 800e10e:	1ae4      	subs	r4, r4, r3
 800e110:	f1b9 0f00 	cmp.w	r9, #0
 800e114:	d008      	beq.n	800e128 <forward_mp+0xfc>
 800e116:	4633      	mov	r3, r6
 800e118:	462a      	mov	r2, r5
 800e11a:	19b9      	adds	r1, r7, r6
 800e11c:	f853 0b04 	ldr.w	r0, [r3], #4
 800e120:	4299      	cmp	r1, r3
 800e122:	f842 0b04 	str.w	r0, [r2], #4
 800e126:	d1f9      	bne.n	800e11c <forward_mp+0xf0>
 800e128:	9b07      	ldr	r3, [sp, #28]
 800e12a:	459e      	cmp	lr, r3
 800e12c:	dd1f      	ble.n	800e16e <forward_mp+0x142>
 800e12e:	469c      	mov	ip, r3
 800e130:	fb07 6404 	mla	r4, r7, r4, r6
 800e134:	42a6      	cmp	r6, r4
 800e136:	d214      	bcs.n	800e162 <forward_mp+0x136>
 800e138:	f1b9 0f00 	cmp.w	r9, #0
 800e13c:	d011      	beq.n	800e162 <forward_mp+0x136>
 800e13e:	19f1      	adds	r1, r6, r7
 800e140:	4630      	mov	r0, r6
 800e142:	4602      	mov	r2, r0
 800e144:	462b      	mov	r3, r5
 800e146:	ecf2 7a01 	vldmia	r2!, {s15}
 800e14a:	ed93 7a00 	vldr	s14, [r3]
 800e14e:	428a      	cmp	r2, r1
 800e150:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e154:	ece3 7a01 	vstmia	r3!, {s15}
 800e158:	d1f5      	bne.n	800e146 <forward_mp+0x11a>
 800e15a:	4438      	add	r0, r7
 800e15c:	4439      	add	r1, r7
 800e15e:	42a0      	cmp	r0, r4
 800e160:	d3ef      	bcc.n	800e142 <forward_mp+0x116>
 800e162:	f10c 0c01 	add.w	ip, ip, #1
 800e166:	4446      	add	r6, r8
 800e168:	4444      	add	r4, r8
 800e16a:	45e6      	cmp	lr, ip
 800e16c:	d1e2      	bne.n	800e134 <forward_mp+0x108>
 800e16e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e170:	443d      	add	r5, r7
 800e172:	9802      	ldr	r0, [sp, #8]
 800e174:	9a06      	ldr	r2, [sp, #24]
 800e176:	eb01 030b 	add.w	r3, r1, fp
 800e17a:	1a41      	subs	r1, r0, r1
 800e17c:	3201      	adds	r2, #1
 800e17e:	9102      	str	r1, [sp, #8]
 800e180:	9904      	ldr	r1, [sp, #16]
 800e182:	9206      	str	r2, [sp, #24]
 800e184:	4291      	cmp	r1, r2
 800e186:	d1b2      	bne.n	800e0ee <forward_mp+0xc2>
 800e188:	9b00      	ldr	r3, [sp, #0]
 800e18a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e18c:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800e190:	4413      	add	r3, r2
 800e192:	9300      	str	r3, [sp, #0]
 800e194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e196:	f10b 0b01 	add.w	fp, fp, #1
 800e19a:	9a01      	ldr	r2, [sp, #4]
 800e19c:	449a      	add	sl, r3
 800e19e:	1ad3      	subs	r3, r2, r3
 800e1a0:	9301      	str	r3, [sp, #4]
 800e1a2:	9b08      	ldr	r3, [sp, #32]
 800e1a4:	455b      	cmp	r3, fp
 800e1a6:	d187      	bne.n	800e0b8 <forward_mp+0x8c>
 800e1a8:	b013      	add	sp, #76	; 0x4c
 800e1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ae:	6853      	ldr	r3, [r2, #4]
 800e1b0:	deff      	udf	#255	; 0xff
 800e1b2:	9e03      	ldr	r6, [sp, #12]
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	e79f      	b.n	800e0f8 <forward_mp+0xcc>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	685b      	ldr	r3, [r3, #4]
 800e1bc:	deff      	udf	#255	; 0xff
 800e1be:	68d3      	ldr	r3, [r2, #12]
 800e1c0:	deff      	udf	#255	; 0xff
 800e1c2:	bf00      	nop

0800e1c4 <nl_func_relu_array_f32>:
 800e1c4:	b410      	push	{r4}
 800e1c6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e1ca:	698c      	ldr	r4, [r1, #24]
 800e1cc:	6981      	ldr	r1, [r0, #24]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	68a0      	ldr	r0, [r4, #8]
 800e1d2:	6889      	ldr	r1, [r1, #8]
 800e1d4:	009a      	lsls	r2, r3, #2
 800e1d6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e1da:	4298      	cmp	r0, r3
 800e1dc:	d80f      	bhi.n	800e1fe <nl_func_relu_array_f32+0x3a>
 800e1de:	3204      	adds	r2, #4
 800e1e0:	3304      	adds	r3, #4
 800e1e2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800e204 <nl_func_relu_array_f32+0x40>
 800e1e6:	4411      	add	r1, r2
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	ed73 7a01 	vldmdb	r3!, {s15}
 800e1ee:	3a08      	subs	r2, #8
 800e1f0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e1f4:	ed61 7a01 	vstmdb	r1!, {s15}
 800e1f8:	68a0      	ldr	r0, [r4, #8]
 800e1fa:	4290      	cmp	r0, r2
 800e1fc:	d9f4      	bls.n	800e1e8 <nl_func_relu_array_f32+0x24>
 800e1fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e202:	4770      	bx	lr
 800e204:	00000000 	.word	0x00000000

0800e208 <forward_relu>:
 800e208:	6982      	ldr	r2, [r0, #24]
 800e20a:	8813      	ldrh	r3, [r2, #0]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d05b      	beq.n	800e2c8 <forward_relu+0xc0>
 800e210:	6851      	ldr	r1, [r2, #4]
 800e212:	684a      	ldr	r2, [r1, #4]
 800e214:	b102      	cbz	r2, 800e218 <forward_relu+0x10>
 800e216:	6812      	ldr	r2, [r2, #0]
 800e218:	2b01      	cmp	r3, #1
 800e21a:	f000 8123 	beq.w	800e464 <forward_relu+0x25c>
 800e21e:	b470      	push	{r4, r5, r6}
 800e220:	690b      	ldr	r3, [r1, #16]
 800e222:	b103      	cbz	r3, 800e226 <forward_relu+0x1e>
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	69c6      	ldr	r6, [r0, #28]
 800e228:	2e00      	cmp	r6, #0
 800e22a:	f000 809e 	beq.w	800e36a <forward_relu+0x162>
 800e22e:	6871      	ldr	r1, [r6, #4]
 800e230:	6998      	ldr	r0, [r3, #24]
 800e232:	2901      	cmp	r1, #1
 800e234:	f000 80c3 	beq.w	800e3be <forward_relu+0x1b6>
 800e238:	6893      	ldr	r3, [r2, #8]
 800e23a:	6991      	ldr	r1, [r2, #24]
 800e23c:	0a1b      	lsrs	r3, r3, #8
 800e23e:	6880      	ldr	r0, [r0, #8]
 800e240:	688d      	ldr	r5, [r1, #8]
 800e242:	f000 80f2 	beq.w	800e42a <forward_relu+0x222>
 800e246:	68d4      	ldr	r4, [r2, #12]
 800e248:	2201      	movs	r2, #1
 800e24a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e24e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e252:	42a3      	cmp	r3, r4
 800e254:	fb01 f202 	mul.w	r2, r1, r2
 800e258:	d1f9      	bne.n	800e24e <forward_relu+0x46>
 800e25a:	68b3      	ldr	r3, [r6, #8]
 800e25c:	ed93 7a02 	vldr	s14, [r3, #8]
 800e260:	edd3 6a00 	vldr	s13, [r3]
 800e264:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e268:	ed93 6a01 	vldr	s12, [r3, #4]
 800e26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e270:	d42c      	bmi.n	800e2cc <forward_relu+0xc4>
 800e272:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e276:	4413      	add	r3, r2
 800e278:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800e27c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e280:	4295      	cmp	r5, r2
 800e282:	d81f      	bhi.n	800e2c4 <forward_relu+0xbc>
 800e284:	3204      	adds	r2, #4
 800e286:	1d01      	adds	r1, r0, #4
 800e288:	e00d      	b.n	800e2a6 <forward_relu+0x9e>
 800e28a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e292:	db03      	blt.n	800e29c <forward_relu+0x94>
 800e294:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e298:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e29c:	3b08      	subs	r3, #8
 800e29e:	ed61 7a01 	vstmdb	r1!, {s15}
 800e2a2:	429d      	cmp	r5, r3
 800e2a4:	d80e      	bhi.n	800e2c4 <forward_relu+0xbc>
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	ed72 7a01 	vldmdb	r2!, {s15}
 800e2ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b4:	d9e9      	bls.n	800e28a <forward_relu+0x82>
 800e2b6:	3b08      	subs	r3, #8
 800e2b8:	eef0 7a47 	vmov.f32	s15, s14
 800e2bc:	429d      	cmp	r5, r3
 800e2be:	ed61 7a01 	vstmdb	r1!, {s15}
 800e2c2:	d9f0      	bls.n	800e2a6 <forward_relu+0x9e>
 800e2c4:	bc70      	pop	{r4, r5, r6}
 800e2c6:	4770      	bx	lr
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	deff      	udf	#255	; 0xff
 800e2cc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e2d0:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800e2d4:	4411      	add	r1, r2
 800e2d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2da:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800e2de:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800e2e2:	d11f      	bne.n	800e324 <forward_relu+0x11c>
 800e2e4:	429d      	cmp	r5, r3
 800e2e6:	d8ed      	bhi.n	800e2c4 <forward_relu+0xbc>
 800e2e8:	1b5d      	subs	r5, r3, r5
 800e2ea:	1d1a      	adds	r2, r3, #4
 800e2ec:	1d01      	adds	r1, r0, #4
 800e2ee:	2000      	movs	r0, #0
 800e2f0:	f025 0503 	bic.w	r5, r5, #3
 800e2f4:	1b5b      	subs	r3, r3, r5
 800e2f6:	ed72 7a01 	vldmdb	r2!, {s15}
 800e2fa:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e302:	dc0a      	bgt.n	800e31a <forward_relu+0x112>
 800e304:	429a      	cmp	r2, r3
 800e306:	f841 0d04 	str.w	r0, [r1, #-4]!
 800e30a:	d0db      	beq.n	800e2c4 <forward_relu+0xbc>
 800e30c:	ed72 7a01 	vldmdb	r2!, {s15}
 800e310:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e318:	ddf4      	ble.n	800e304 <forward_relu+0xfc>
 800e31a:	429a      	cmp	r2, r3
 800e31c:	ed61 7a01 	vstmdb	r1!, {s15}
 800e320:	d1e9      	bne.n	800e2f6 <forward_relu+0xee>
 800e322:	e7cf      	b.n	800e2c4 <forward_relu+0xbc>
 800e324:	429d      	cmp	r5, r3
 800e326:	d8cd      	bhi.n	800e2c4 <forward_relu+0xbc>
 800e328:	1b5d      	subs	r5, r3, r5
 800e32a:	1d1a      	adds	r2, r3, #4
 800e32c:	1d01      	adds	r1, r0, #4
 800e32e:	f025 0503 	bic.w	r5, r5, #3
 800e332:	1b5b      	subs	r3, r3, r5
 800e334:	ed72 7a01 	vldmdb	r2!, {s15}
 800e338:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e340:	db0e      	blt.n	800e360 <forward_relu+0x158>
 800e342:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e346:	4293      	cmp	r3, r2
 800e348:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e34c:	ed61 7a01 	vstmdb	r1!, {s15}
 800e350:	d0b8      	beq.n	800e2c4 <forward_relu+0xbc>
 800e352:	ed72 7a01 	vldmdb	r2!, {s15}
 800e356:	eef4 6ae7 	vcmpe.f32	s13, s15
 800e35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e35e:	daf0      	bge.n	800e342 <forward_relu+0x13a>
 800e360:	4293      	cmp	r3, r2
 800e362:	ed61 7a01 	vstmdb	r1!, {s15}
 800e366:	d1e5      	bne.n	800e334 <forward_relu+0x12c>
 800e368:	e7ac      	b.n	800e2c4 <forward_relu+0xbc>
 800e36a:	6999      	ldr	r1, [r3, #24]
 800e36c:	6893      	ldr	r3, [r2, #8]
 800e36e:	6990      	ldr	r0, [r2, #24]
 800e370:	0a1b      	lsrs	r3, r3, #8
 800e372:	6889      	ldr	r1, [r1, #8]
 800e374:	6884      	ldr	r4, [r0, #8]
 800e376:	d06e      	beq.n	800e456 <forward_relu+0x24e>
 800e378:	68d5      	ldr	r5, [r2, #12]
 800e37a:	2201      	movs	r2, #1
 800e37c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e380:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800e384:	429d      	cmp	r5, r3
 800e386:	fb00 f202 	mul.w	r2, r0, r2
 800e38a:	d1f9      	bne.n	800e380 <forward_relu+0x178>
 800e38c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800e390:	4413      	add	r3, r2
 800e392:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e396:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e39a:	4294      	cmp	r4, r2
 800e39c:	d892      	bhi.n	800e2c4 <forward_relu+0xbc>
 800e39e:	3204      	adds	r2, #4
 800e3a0:	3104      	adds	r1, #4
 800e3a2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800e46c <forward_relu+0x264>
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	ed72 7a01 	vldmdb	r2!, {s15}
 800e3ac:	3b08      	subs	r3, #8
 800e3ae:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800e3b2:	ed61 7a01 	vstmdb	r1!, {s15}
 800e3b6:	429c      	cmp	r4, r3
 800e3b8:	d9f5      	bls.n	800e3a6 <forward_relu+0x19e>
 800e3ba:	bc70      	pop	{r4, r5, r6}
 800e3bc:	4770      	bx	lr
 800e3be:	6993      	ldr	r3, [r2, #24]
 800e3c0:	6880      	ldr	r0, [r0, #8]
 800e3c2:	689c      	ldr	r4, [r3, #8]
 800e3c4:	6893      	ldr	r3, [r2, #8]
 800e3c6:	0a1b      	lsrs	r3, r3, #8
 800e3c8:	d047      	beq.n	800e45a <forward_relu+0x252>
 800e3ca:	68d5      	ldr	r5, [r2, #12]
 800e3cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e3d0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e3d4:	42ab      	cmp	r3, r5
 800e3d6:	fb02 f101 	mul.w	r1, r2, r1
 800e3da:	d1f9      	bne.n	800e3d0 <forward_relu+0x1c8>
 800e3dc:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800e3e0:	68b3      	ldr	r3, [r6, #8]
 800e3e2:	440a      	add	r2, r1
 800e3e4:	ed93 7a00 	vldr	s14, [r3]
 800e3e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e3ec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800e3f0:	429c      	cmp	r4, r3
 800e3f2:	f63f af67 	bhi.w	800e2c4 <forward_relu+0xbc>
 800e3f6:	1d02      	adds	r2, r0, #4
 800e3f8:	3304      	adds	r3, #4
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	ed53 7a01 	vldr	s15, [r3, #-4]
 800e400:	1f19      	subs	r1, r3, #4
 800e402:	3b08      	subs	r3, #8
 800e404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40c:	d406      	bmi.n	800e41c <forward_relu+0x214>
 800e40e:	429c      	cmp	r4, r3
 800e410:	f842 0d04 	str.w	r0, [r2, #-4]!
 800e414:	f63f af56 	bhi.w	800e2c4 <forward_relu+0xbc>
 800e418:	460b      	mov	r3, r1
 800e41a:	e7ef      	b.n	800e3fc <forward_relu+0x1f4>
 800e41c:	429c      	cmp	r4, r3
 800e41e:	ed62 7a01 	vstmdb	r2!, {s15}
 800e422:	f63f af4f 	bhi.w	800e2c4 <forward_relu+0xbc>
 800e426:	460b      	mov	r3, r1
 800e428:	e7e8      	b.n	800e3fc <forward_relu+0x1f4>
 800e42a:	68b3      	ldr	r3, [r6, #8]
 800e42c:	ed93 7a02 	vldr	s14, [r3, #8]
 800e430:	edd3 6a00 	vldr	s13, [r3]
 800e434:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e438:	ed93 6a01 	vldr	s12, [r3, #4]
 800e43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e440:	d401      	bmi.n	800e446 <forward_relu+0x23e>
 800e442:	462a      	mov	r2, r5
 800e444:	e71e      	b.n	800e284 <forward_relu+0x7c>
 800e446:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800e44a:	462b      	mov	r3, r5
 800e44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e450:	f47f af6a 	bne.w	800e328 <forward_relu+0x120>
 800e454:	e748      	b.n	800e2e8 <forward_relu+0xe0>
 800e456:	4622      	mov	r2, r4
 800e458:	e7a1      	b.n	800e39e <forward_relu+0x196>
 800e45a:	68b2      	ldr	r2, [r6, #8]
 800e45c:	4623      	mov	r3, r4
 800e45e:	ed92 7a00 	vldr	s14, [r2]
 800e462:	e7c8      	b.n	800e3f6 <forward_relu+0x1ee>
 800e464:	2300      	movs	r3, #0
 800e466:	685b      	ldr	r3, [r3, #4]
 800e468:	deff      	udf	#255	; 0xff
 800e46a:	bf00      	nop
 800e46c:	00000000 	.word	0x00000000

0800e470 <forward_sm>:
 800e470:	6982      	ldr	r2, [r0, #24]
 800e472:	8813      	ldrh	r3, [r2, #0]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d078      	beq.n	800e56a <forward_sm+0xfa>
 800e478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e47c:	ed2d 8b04 	vpush	{d8-d9}
 800e480:	6852      	ldr	r2, [r2, #4]
 800e482:	b085      	sub	sp, #20
 800e484:	6854      	ldr	r4, [r2, #4]
 800e486:	b104      	cbz	r4, 800e48a <forward_sm+0x1a>
 800e488:	6824      	ldr	r4, [r4, #0]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d072      	beq.n	800e574 <forward_sm+0x104>
 800e48e:	6913      	ldr	r3, [r2, #16]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d072      	beq.n	800e57a <forward_sm+0x10a>
 800e494:	681e      	ldr	r6, [r3, #0]
 800e496:	68a3      	ldr	r3, [r4, #8]
 800e498:	68e0      	ldr	r0, [r4, #12]
 800e49a:	68f2      	ldr	r2, [r6, #12]
 800e49c:	0a1b      	lsrs	r3, r3, #8
 800e49e:	6845      	ldr	r5, [r0, #4]
 800e4a0:	6857      	ldr	r7, [r2, #4]
 800e4a2:	d064      	beq.n	800e56e <forward_sm+0xfe>
 800e4a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e4a8:	2201      	movs	r2, #1
 800e4aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e4ae:	4298      	cmp	r0, r3
 800e4b0:	fb01 f202 	mul.w	r2, r1, r2
 800e4b4:	d1f9      	bne.n	800e4aa <forward_sm+0x3a>
 800e4b6:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800e4ba:	69a2      	ldr	r2, [r4, #24]
 800e4bc:	69b3      	ldr	r3, [r6, #24]
 800e4be:	6892      	ldr	r2, [r2, #8]
 800e4c0:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e4c4:	eb02 0309 	add.w	r3, r2, r9
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	9301      	str	r3, [sp, #4]
 800e4cc:	d248      	bcs.n	800e560 <forward_sm+0xf0>
 800e4ce:	00bb      	lsls	r3, r7, #2
 800e4d0:	2d01      	cmp	r5, #1
 800e4d2:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800e4d6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800e4da:	9303      	str	r3, [sp, #12]
 800e4dc:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800e4e0:	463e      	mov	r6, r7
 800e4e2:	ed92 8a00 	vldr	s16, [r2]
 800e4e6:	9302      	str	r3, [sp, #8]
 800e4e8:	d937      	bls.n	800e55a <forward_sm+0xea>
 800e4ea:	1d13      	adds	r3, r2, #4
 800e4ec:	ecf3 7a01 	vldmia	r3!, {s15}
 800e4f0:	429e      	cmp	r6, r3
 800e4f2:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800e4f6:	d1f9      	bne.n	800e4ec <forward_sm+0x7c>
 800e4f8:	4692      	mov	sl, r2
 800e4fa:	46c3      	mov	fp, r8
 800e4fc:	46c1      	mov	r9, r8
 800e4fe:	eddf 8a20 	vldr	s17, [pc, #128]	; 800e580 <forward_sm+0x110>
 800e502:	2400      	movs	r4, #0
 800e504:	ecba 0a01 	vldmia	sl!, {s0}
 800e508:	3401      	adds	r4, #1
 800e50a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800e50e:	f001 f823 	bl	800f558 <expf>
 800e512:	42a5      	cmp	r5, r4
 800e514:	ee78 8a80 	vadd.f32	s17, s17, s0
 800e518:	eca9 0a01 	vstmia	r9!, {s0}
 800e51c:	d8f2      	bhi.n	800e504 <forward_sm+0x94>
 800e51e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e526:	d00b      	beq.n	800e540 <forward_sm+0xd0>
 800e528:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800e52c:	2300      	movs	r3, #0
 800e52e:	eddb 7a00 	vldr	s15, [fp]
 800e532:	3301      	adds	r3, #1
 800e534:	429d      	cmp	r5, r3
 800e536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e53a:	eceb 7a01 	vstmia	fp!, {s15}
 800e53e:	d8f6      	bhi.n	800e52e <forward_sm+0xbe>
 800e540:	9b03      	ldr	r3, [sp, #12]
 800e542:	463a      	mov	r2, r7
 800e544:	9901      	ldr	r1, [sp, #4]
 800e546:	4498      	add	r8, r3
 800e548:	9b02      	ldr	r3, [sp, #8]
 800e54a:	42b9      	cmp	r1, r7
 800e54c:	441e      	add	r6, r3
 800e54e:	d907      	bls.n	800e560 <forward_sm+0xf0>
 800e550:	2d01      	cmp	r5, #1
 800e552:	441f      	add	r7, r3
 800e554:	ed92 8a00 	vldr	s16, [r2]
 800e558:	d8c7      	bhi.n	800e4ea <forward_sm+0x7a>
 800e55a:	2d00      	cmp	r5, #0
 800e55c:	d0f0      	beq.n	800e540 <forward_sm+0xd0>
 800e55e:	e7cb      	b.n	800e4f8 <forward_sm+0x88>
 800e560:	b005      	add	sp, #20
 800e562:	ecbd 8b04 	vpop	{d8-d9}
 800e566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	deff      	udf	#255	; 0xff
 800e56e:	f04f 0904 	mov.w	r9, #4
 800e572:	e7a2      	b.n	800e4ba <forward_sm+0x4a>
 800e574:	2300      	movs	r3, #0
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	deff      	udf	#255	; 0xff
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	deff      	udf	#255	; 0xff
 800e57e:	bf00      	nop
 800e580:	00000000 	.word	0x00000000

0800e584 <forward_bn>:
 800e584:	6982      	ldr	r2, [r0, #24]
 800e586:	8813      	ldrh	r3, [r2, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d055      	beq.n	800e638 <forward_bn+0xb4>
 800e58c:	6852      	ldr	r2, [r2, #4]
 800e58e:	6850      	ldr	r0, [r2, #4]
 800e590:	b100      	cbz	r0, 800e594 <forward_bn+0x10>
 800e592:	6800      	ldr	r0, [r0, #0]
 800e594:	2b01      	cmp	r3, #1
 800e596:	f000 809c 	beq.w	800e6d2 <forward_bn+0x14e>
 800e59a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e59e:	6915      	ldr	r5, [r2, #16]
 800e5a0:	b105      	cbz	r5, 800e5a4 <forward_bn+0x20>
 800e5a2:	682d      	ldr	r5, [r5, #0]
 800e5a4:	2b02      	cmp	r3, #2
 800e5a6:	d049      	beq.n	800e63c <forward_bn+0xb8>
 800e5a8:	69d1      	ldr	r1, [r2, #28]
 800e5aa:	2900      	cmp	r1, #0
 800e5ac:	d049      	beq.n	800e642 <forward_bn+0xbe>
 800e5ae:	8b13      	ldrh	r3, [r2, #24]
 800e5b0:	f8d1 c000 	ldr.w	ip, [r1]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d945      	bls.n	800e644 <forward_bn+0xc0>
 800e5b8:	6883      	ldr	r3, [r0, #8]
 800e5ba:	684f      	ldr	r7, [r1, #4]
 800e5bc:	0a1b      	lsrs	r3, r3, #8
 800e5be:	d06c      	beq.n	800e69a <forward_bn+0x116>
 800e5c0:	68c1      	ldr	r1, [r0, #12]
 800e5c2:	2401      	movs	r4, #1
 800e5c4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800e5c8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e5cc:	428b      	cmp	r3, r1
 800e5ce:	fb02 f404 	mul.w	r4, r2, r4
 800e5d2:	d1f9      	bne.n	800e5c8 <forward_bn+0x44>
 800e5d4:	69aa      	ldr	r2, [r5, #24]
 800e5d6:	6981      	ldr	r1, [r0, #24]
 800e5d8:	685d      	ldr	r5, [r3, #4]
 800e5da:	6888      	ldr	r0, [r1, #8]
 800e5dc:	6896      	ldr	r6, [r2, #8]
 800e5de:	b3b7      	cbz	r7, 800e64e <forward_bn+0xca>
 800e5e0:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800e5ea:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e5ee:	b30c      	cbz	r4, 800e634 <forward_bn+0xb0>
 800e5f0:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 800e5f4:	f04f 0e00 	mov.w	lr, #0
 800e5f8:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800e5fc:	00bf      	lsls	r7, r7, #2
 800e5fe:	ea4f 0a85 	mov.w	sl, r5, lsl #2
 800e602:	4672      	mov	r2, lr
 800e604:	44ae      	add	lr, r5
 800e606:	4596      	cmp	lr, r2
 800e608:	d911      	bls.n	800e62e <forward_bn+0xaa>
 800e60a:	eb07 030c 	add.w	r3, r7, ip
 800e60e:	4648      	mov	r0, r9
 800e610:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800e614:	4641      	mov	r1, r8
 800e616:	ecf3 6a01 	vldmia	r3!, {s13}
 800e61a:	ecb0 7a01 	vldmia	r0!, {s14}
 800e61e:	ecf1 7a01 	vldmia	r1!, {s15}
 800e622:	4563      	cmp	r3, ip
 800e624:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e628:	ece2 7a01 	vstmia	r2!, {s15}
 800e62c:	d1f3      	bne.n	800e616 <forward_bn+0x92>
 800e62e:	4574      	cmp	r4, lr
 800e630:	44d4      	add	ip, sl
 800e632:	d8e6      	bhi.n	800e602 <forward_bn+0x7e>
 800e634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	deff      	udf	#255	; 0xff
 800e63c:	2300      	movs	r3, #0
 800e63e:	685b      	ldr	r3, [r3, #4]
 800e640:	deff      	udf	#255	; 0xff
 800e642:	468c      	mov	ip, r1
 800e644:	6883      	ldr	r3, [r0, #8]
 800e646:	0a1b      	lsrs	r3, r3, #8
 800e648:	d037      	beq.n	800e6ba <forward_bn+0x136>
 800e64a:	2700      	movs	r7, #0
 800e64c:	e7b8      	b.n	800e5c0 <forward_bn+0x3c>
 800e64e:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800e652:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e656:	2c00      	cmp	r4, #0
 800e658:	d0ec      	beq.n	800e634 <forward_bn+0xb0>
 800e65a:	ebc5 7785 	rsb	r7, r5, r5, lsl #30
 800e65e:	46b6      	mov	lr, r6
 800e660:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800e664:	f04f 0c00 	mov.w	ip, #0
 800e668:	00bf      	lsls	r7, r7, #2
 800e66a:	00ae      	lsls	r6, r5, #2
 800e66c:	4663      	mov	r3, ip
 800e66e:	44ac      	add	ip, r5
 800e670:	4563      	cmp	r3, ip
 800e672:	d20c      	bcs.n	800e68e <forward_bn+0x10a>
 800e674:	19c3      	adds	r3, r0, r7
 800e676:	4641      	mov	r1, r8
 800e678:	4672      	mov	r2, lr
 800e67a:	ecf3 7a01 	vldmia	r3!, {s15}
 800e67e:	ecb1 7a01 	vldmia	r1!, {s14}
 800e682:	4298      	cmp	r0, r3
 800e684:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e688:	ece2 7a01 	vstmia	r2!, {s15}
 800e68c:	d1f5      	bne.n	800e67a <forward_bn+0xf6>
 800e68e:	4564      	cmp	r4, ip
 800e690:	44b6      	add	lr, r6
 800e692:	4430      	add	r0, r6
 800e694:	d8ea      	bhi.n	800e66c <forward_bn+0xe8>
 800e696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e69a:	68c1      	ldr	r1, [r0, #12]
 800e69c:	69ab      	ldr	r3, [r5, #24]
 800e69e:	6982      	ldr	r2, [r0, #24]
 800e6a0:	684d      	ldr	r5, [r1, #4]
 800e6a2:	6890      	ldr	r0, [r2, #8]
 800e6a4:	689e      	ldr	r6, [r3, #8]
 800e6a6:	b177      	cbz	r7, 800e6c6 <forward_bn+0x142>
 800e6a8:	f8dc 2018 	ldr.w	r2, [ip, #24]
 800e6ac:	2401      	movs	r4, #1
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800e6b4:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e6b8:	e79a      	b.n	800e5f0 <forward_bn+0x6c>
 800e6ba:	68c1      	ldr	r1, [r0, #12]
 800e6bc:	69ab      	ldr	r3, [r5, #24]
 800e6be:	6982      	ldr	r2, [r0, #24]
 800e6c0:	684d      	ldr	r5, [r1, #4]
 800e6c2:	6890      	ldr	r0, [r2, #8]
 800e6c4:	689e      	ldr	r6, [r3, #8]
 800e6c6:	f8dc 3018 	ldr.w	r3, [ip, #24]
 800e6ca:	2401      	movs	r4, #1
 800e6cc:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800e6d0:	e7c3      	b.n	800e65a <forward_bn+0xd6>
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	deff      	udf	#255	; 0xff

0800e6d8 <ai_check_custom_types>:
 800e6d8:	b082      	sub	sp, #8
 800e6da:	4b12      	ldr	r3, [pc, #72]	; (800e724 <ai_check_custom_types+0x4c>)
 800e6dc:	9301      	str	r3, [sp, #4]
 800e6de:	b118      	cbz	r0, 800e6e8 <ai_check_custom_types+0x10>
 800e6e0:	7803      	ldrb	r3, [r0, #0]
 800e6e2:	2b03      	cmp	r3, #3
 800e6e4:	d002      	beq.n	800e6ec <ai_check_custom_types+0x14>
 800e6e6:	2000      	movs	r0, #0
 800e6e8:	b002      	add	sp, #8
 800e6ea:	4770      	bx	lr
 800e6ec:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e6f0:	4293      	cmp	r3, r2
 800e6f2:	d004      	beq.n	800e6fe <ai_check_custom_types+0x26>
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	f080 0001 	eor.w	r0, r0, #1
 800e6fa:	b002      	add	sp, #8
 800e6fc:	4770      	bx	lr
 800e6fe:	7842      	ldrb	r2, [r0, #1]
 800e700:	3001      	adds	r0, #1
 800e702:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e706:	429a      	cmp	r2, r3
 800e708:	d1f4      	bne.n	800e6f4 <ai_check_custom_types+0x1c>
 800e70a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800e70e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e712:	429a      	cmp	r2, r3
 800e714:	d1ee      	bne.n	800e6f4 <ai_check_custom_types+0x1c>
 800e716:	7842      	ldrb	r2, [r0, #1]
 800e718:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d1e9      	bne.n	800e6f4 <ai_check_custom_types+0x1c>
 800e720:	2000      	movs	r0, #0
 800e722:	e7e8      	b.n	800e6f6 <ai_check_custom_types+0x1e>
 800e724:	84048403 	.word	0x84048403

0800e728 <ai_layers_init_all>:
 800e728:	2100      	movs	r1, #0
 800e72a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e72c:	b13b      	cbz	r3, 800e73e <ai_layers_init_all+0x16>
 800e72e:	691a      	ldr	r2, [r3, #16]
 800e730:	3101      	adds	r1, #1
 800e732:	60d8      	str	r0, [r3, #12]
 800e734:	429a      	cmp	r2, r3
 800e736:	4613      	mov	r3, r2
 800e738:	d001      	beq.n	800e73e <ai_layers_init_all+0x16>
 800e73a:	2a00      	cmp	r2, #0
 800e73c:	d1f6      	bne.n	800e72c <ai_layers_init_all+0x4>
 800e73e:	4608      	mov	r0, r1
 800e740:	4770      	bx	lr
 800e742:	bf00      	nop

0800e744 <ai_layers_post_init_all>:
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	2500      	movs	r5, #0
 800e748:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e74a:	b16c      	cbz	r4, 800e768 <ai_layers_post_init_all+0x24>
 800e74c:	6863      	ldr	r3, [r4, #4]
 800e74e:	07db      	lsls	r3, r3, #31
 800e750:	d504      	bpl.n	800e75c <ai_layers_post_init_all+0x18>
 800e752:	6a23      	ldr	r3, [r4, #32]
 800e754:	4620      	mov	r0, r4
 800e756:	b10b      	cbz	r3, 800e75c <ai_layers_post_init_all+0x18>
 800e758:	3501      	adds	r5, #1
 800e75a:	4798      	blx	r3
 800e75c:	6923      	ldr	r3, [r4, #16]
 800e75e:	42a3      	cmp	r3, r4
 800e760:	461c      	mov	r4, r3
 800e762:	d001      	beq.n	800e768 <ai_layers_post_init_all+0x24>
 800e764:	2b00      	cmp	r3, #0
 800e766:	d1f0      	bne.n	800e74a <ai_layers_post_init_all+0x6>
 800e768:	4628      	mov	r0, r5
 800e76a:	bd38      	pop	{r3, r4, r5, pc}

0800e76c <ai_layers_forward_all>:
 800e76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e770:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800e774:	4604      	mov	r4, r0
 800e776:	f1b8 0f00 	cmp.w	r8, #0
 800e77a:	d02a      	beq.n	800e7d2 <ai_layers_forward_all+0x66>
 800e77c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800e77e:	6381      	str	r1, [r0, #56]	; 0x38
 800e780:	b319      	cbz	r1, 800e7ca <ai_layers_forward_all+0x5e>
 800e782:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800e784:	2001      	movs	r0, #1
 800e786:	47c0      	blx	r8
 800e788:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e78a:	b1f6      	cbz	r6, 800e7ca <ai_layers_forward_all+0x5e>
 800e78c:	2700      	movs	r7, #0
 800e78e:	4631      	mov	r1, r6
 800e790:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e792:	2002      	movs	r0, #2
 800e794:	47c0      	blx	r8
 800e796:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800e798:	4628      	mov	r0, r5
 800e79a:	696b      	ldr	r3, [r5, #20]
 800e79c:	4798      	blx	r3
 800e79e:	692e      	ldr	r6, [r5, #16]
 800e7a0:	2003      	movs	r0, #3
 800e7a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e7a4:	42b5      	cmp	r5, r6
 800e7a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e7a8:	d007      	beq.n	800e7ba <ai_layers_forward_all+0x4e>
 800e7aa:	47c0      	blx	r8
 800e7ac:	3701      	adds	r7, #1
 800e7ae:	63a6      	str	r6, [r4, #56]	; 0x38
 800e7b0:	2e00      	cmp	r6, #0
 800e7b2:	d1ec      	bne.n	800e78e <ai_layers_forward_all+0x22>
 800e7b4:	4638      	mov	r0, r7
 800e7b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ba:	2003      	movs	r0, #3
 800e7bc:	3701      	adds	r7, #1
 800e7be:	47c0      	blx	r8
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	4638      	mov	r0, r7
 800e7c4:	63a3      	str	r3, [r4, #56]	; 0x38
 800e7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ca:	2700      	movs	r7, #0
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7d2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800e7d4:	6385      	str	r5, [r0, #56]	; 0x38
 800e7d6:	2d00      	cmp	r5, #0
 800e7d8:	d0f7      	beq.n	800e7ca <ai_layers_forward_all+0x5e>
 800e7da:	4647      	mov	r7, r8
 800e7dc:	696b      	ldr	r3, [r5, #20]
 800e7de:	4628      	mov	r0, r5
 800e7e0:	4798      	blx	r3
 800e7e2:	462b      	mov	r3, r5
 800e7e4:	692d      	ldr	r5, [r5, #16]
 800e7e6:	429d      	cmp	r5, r3
 800e7e8:	d004      	beq.n	800e7f4 <ai_layers_forward_all+0x88>
 800e7ea:	3701      	adds	r7, #1
 800e7ec:	63a5      	str	r5, [r4, #56]	; 0x38
 800e7ee:	2d00      	cmp	r5, #0
 800e7f0:	d1f4      	bne.n	800e7dc <ai_layers_forward_all+0x70>
 800e7f2:	e7df      	b.n	800e7b4 <ai_layers_forward_all+0x48>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	3701      	adds	r7, #1
 800e7f8:	63a3      	str	r3, [r4, #56]	; 0x38
 800e7fa:	e7db      	b.n	800e7b4 <ai_layers_forward_all+0x48>

0800e7fc <lite_dense_if32of32wf32>:
 800e7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e800:	ed2d 8b0c 	vpush	{d8-d13}
 800e804:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 800e808:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800e80c:	4287      	cmp	r7, r0
 800e80e:	f240 8105 	bls.w	800ea1c <lite_dense_if32of32wf32+0x220>
 800e812:	f1a6 0810 	sub.w	r8, r6, #16
 800e816:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800e81a:	4605      	mov	r5, r0
 800e81c:	f006 0b0f 	and.w	fp, r6, #15
 800e820:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800e824:	f108 0801 	add.w	r8, r8, #1
 800e828:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800e82c:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800e830:	2e0f      	cmp	r6, #15
 800e832:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800ea48 <lite_dense_if32of32wf32+0x24c>
 800e836:	f240 8102 	bls.w	800ea3e <lite_dense_if32of32wf32+0x242>
 800e83a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800e83e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800e842:	46b6      	mov	lr, r6
 800e844:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 800e848:	f1ae 0e10 	sub.w	lr, lr, #16
 800e84c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800e850:	3440      	adds	r4, #64	; 0x40
 800e852:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 800e856:	f1be 0f0f 	cmp.w	lr, #15
 800e85a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e85e:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 800e862:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800e866:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800e86a:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 800e86e:	eee4 7a85 	vfma.f32	s15, s9, s10
 800e872:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 800e876:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 800e87a:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 800e87e:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 800e882:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 800e886:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 800e88a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800e88e:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 800e892:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 800e896:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 800e89a:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 800e89e:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 800e8a2:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 800e8a6:	eeed 7a26 	vfma.f32	s15, s26, s13
 800e8aa:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 800e8ae:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 800e8b2:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 800e8b6:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 800e8ba:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 800e8be:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800e8c2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800e8c6:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800e8ca:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800e8ce:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800e8d2:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800e8d6:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800e8da:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800e8de:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800e8e2:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800e8e6:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800e8ea:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800e8ee:	eee9 7a89 	vfma.f32	s15, s19, s18
 800e8f2:	eee8 7a88 	vfma.f32	s15, s17, s16
 800e8f6:	eee0 7a20 	vfma.f32	s15, s0, s1
 800e8fa:	eee1 7a21 	vfma.f32	s15, s2, s3
 800e8fe:	eee2 7a22 	vfma.f32	s15, s4, s5
 800e902:	eee3 7a23 	vfma.f32	s15, s6, s7
 800e906:	eee4 7a24 	vfma.f32	s15, s8, s9
 800e90a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800e90e:	eee6 7a26 	vfma.f32	s15, s12, s13
 800e912:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e916:	d895      	bhi.n	800e844 <lite_dense_if32of32wf32+0x48>
 800e918:	eb02 0e0a 	add.w	lr, r2, sl
 800e91c:	465c      	mov	r4, fp
 800e91e:	46c4      	mov	ip, r8
 800e920:	2c00      	cmp	r4, #0
 800e922:	d075      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e924:	eddc 6a00 	vldr	s13, [ip]
 800e928:	2c01      	cmp	r4, #1
 800e92a:	edde 7a00 	vldr	s15, [lr]
 800e92e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e932:	d06d      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e934:	eddc 6a01 	vldr	s13, [ip, #4]
 800e938:	2c02      	cmp	r4, #2
 800e93a:	edde 7a01 	vldr	s15, [lr, #4]
 800e93e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e942:	d065      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e944:	eddc 6a02 	vldr	s13, [ip, #8]
 800e948:	2c03      	cmp	r4, #3
 800e94a:	edde 7a02 	vldr	s15, [lr, #8]
 800e94e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e952:	d05d      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e954:	eddc 6a03 	vldr	s13, [ip, #12]
 800e958:	2c04      	cmp	r4, #4
 800e95a:	edde 7a03 	vldr	s15, [lr, #12]
 800e95e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e962:	d055      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e964:	eddc 6a04 	vldr	s13, [ip, #16]
 800e968:	2c05      	cmp	r4, #5
 800e96a:	edde 7a04 	vldr	s15, [lr, #16]
 800e96e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e972:	d04d      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e974:	eddc 6a05 	vldr	s13, [ip, #20]
 800e978:	2c06      	cmp	r4, #6
 800e97a:	edde 7a05 	vldr	s15, [lr, #20]
 800e97e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e982:	d045      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e984:	eddc 6a06 	vldr	s13, [ip, #24]
 800e988:	2c07      	cmp	r4, #7
 800e98a:	edde 7a06 	vldr	s15, [lr, #24]
 800e98e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e992:	d03d      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e994:	eddc 6a07 	vldr	s13, [ip, #28]
 800e998:	2c08      	cmp	r4, #8
 800e99a:	edde 7a07 	vldr	s15, [lr, #28]
 800e99e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9a2:	d035      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e9a4:	eddc 6a08 	vldr	s13, [ip, #32]
 800e9a8:	2c09      	cmp	r4, #9
 800e9aa:	edde 7a08 	vldr	s15, [lr, #32]
 800e9ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9b2:	d02d      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e9b4:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800e9b8:	2c0a      	cmp	r4, #10
 800e9ba:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800e9be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9c2:	d025      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e9c4:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800e9c8:	2c0b      	cmp	r4, #11
 800e9ca:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800e9ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9d2:	d01d      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e9d4:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800e9d8:	2c0c      	cmp	r4, #12
 800e9da:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800e9de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9e2:	d015      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e9e4:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800e9e8:	3c0d      	subs	r4, #13
 800e9ea:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800e9ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e9f2:	d00d      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800e9f4:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800e9f8:	2c01      	cmp	r4, #1
 800e9fa:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800e9fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ea02:	d005      	beq.n	800ea10 <lite_dense_if32of32wf32+0x214>
 800ea04:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800ea08:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800ea0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ea10:	eca5 7a01 	vstmia	r5!, {s14}
 800ea14:	42af      	cmp	r7, r5
 800ea16:	444a      	add	r2, r9
 800ea18:	f63f af0a 	bhi.w	800e830 <lite_dense_if32of32wf32+0x34>
 800ea1c:	b15b      	cbz	r3, 800ea36 <lite_dense_if32of32wf32+0x23a>
 800ea1e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ea20:	b14a      	cbz	r2, 800ea36 <lite_dense_if32of32wf32+0x23a>
 800ea22:	edd0 7a00 	vldr	s15, [r0]
 800ea26:	ecb3 7a01 	vldmia	r3!, {s14}
 800ea2a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea2e:	ece0 7a01 	vstmia	r0!, {s15}
 800ea32:	4287      	cmp	r7, r0
 800ea34:	d1f5      	bne.n	800ea22 <lite_dense_if32of32wf32+0x226>
 800ea36:	ecbd 8b0c 	vpop	{d8-d13}
 800ea3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3e:	4634      	mov	r4, r6
 800ea40:	4696      	mov	lr, r2
 800ea42:	468c      	mov	ip, r1
 800ea44:	e76c      	b.n	800e920 <lite_dense_if32of32wf32+0x124>
 800ea46:	bf00      	nop
 800ea48:	00000000 	.word	0x00000000

0800ea4c <ai_version_get>:
 800ea4c:	0212      	lsls	r2, r2, #8
 800ea4e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800ea52:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 800ea56:	4770      	bx	lr

0800ea58 <get_tensor_byte_size>:
 800ea58:	b430      	push	{r4, r5}
 800ea5a:	6985      	ldr	r5, [r0, #24]
 800ea5c:	68c4      	ldr	r4, [r0, #12]
 800ea5e:	6941      	ldr	r1, [r0, #20]
 800ea60:	4b06      	ldr	r3, [pc, #24]	; (800ea7c <get_tensor_byte_size+0x24>)
 800ea62:	6828      	ldr	r0, [r5, #0]
 800ea64:	4a06      	ldr	r2, [pc, #24]	; (800ea80 <get_tensor_byte_size+0x28>)
 800ea66:	4003      	ands	r3, r0
 800ea68:	68c9      	ldr	r1, [r1, #12]
 800ea6a:	68e0      	ldr	r0, [r4, #12]
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	fb01 f000 	mul.w	r0, r1, r0
 800ea72:	d101      	bne.n	800ea78 <get_tensor_byte_size+0x20>
 800ea74:	3007      	adds	r0, #7
 800ea76:	08c0      	lsrs	r0, r0, #3
 800ea78:	bc30      	pop	{r4, r5}
 800ea7a:	4770      	bx	lr
 800ea7c:	017fffff 	.word	0x017fffff
 800ea80:	000400c0 	.word	0x000400c0

0800ea84 <ai_array_to_buffer_fmt>:
 800ea84:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800ea88:	2b02      	cmp	r3, #2
 800ea8a:	d050      	beq.n	800eb2e <ai_array_to_buffer_fmt+0xaa>
 800ea8c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 800ea90:	4b29      	ldr	r3, [pc, #164]	; (800eb38 <ai_array_to_buffer_fmt+0xb4>)
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d00b      	beq.n	800eaae <ai_array_to_buffer_fmt+0x2a>
 800ea96:	dc1c      	bgt.n	800ead2 <ai_array_to_buffer_fmt+0x4e>
 800ea98:	4b28      	ldr	r3, [pc, #160]	; (800eb3c <ai_array_to_buffer_fmt+0xb8>)
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d007      	beq.n	800eaae <ai_array_to_buffer_fmt+0x2a>
 800ea9e:	dd0b      	ble.n	800eab8 <ai_array_to_buffer_fmt+0x34>
 800eaa0:	4b27      	ldr	r3, [pc, #156]	; (800eb40 <ai_array_to_buffer_fmt+0xbc>)
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d003      	beq.n	800eaae <ai_array_to_buffer_fmt+0x2a>
 800eaa6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d131      	bne.n	800eb12 <ai_array_to_buffer_fmt+0x8e>
 800eaae:	4613      	mov	r3, r2
 800eab0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800eab4:	4318      	orrs	r0, r3
 800eab6:	4770      	bx	lr
 800eab8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d0f6      	beq.n	800eaae <ai_array_to_buffer_fmt+0x2a>
 800eac0:	dd2c      	ble.n	800eb1c <ai_array_to_buffer_fmt+0x98>
 800eac2:	4b20      	ldr	r3, [pc, #128]	; (800eb44 <ai_array_to_buffer_fmt+0xc0>)
 800eac4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800eac8:	429a      	cmp	r2, r3
 800eaca:	bf18      	it	ne
 800eacc:	2340      	movne	r3, #64	; 0x40
 800eace:	4318      	orrs	r0, r3
 800ead0:	4770      	bx	lr
 800ead2:	4b1d      	ldr	r3, [pc, #116]	; (800eb48 <ai_array_to_buffer_fmt+0xc4>)
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d0ea      	beq.n	800eaae <ai_array_to_buffer_fmt+0x2a>
 800ead8:	dd0e      	ble.n	800eaf8 <ai_array_to_buffer_fmt+0x74>
 800eada:	4b1c      	ldr	r3, [pc, #112]	; (800eb4c <ai_array_to_buffer_fmt+0xc8>)
 800eadc:	429a      	cmp	r2, r3
 800eade:	d0e6      	beq.n	800eaae <ai_array_to_buffer_fmt+0x2a>
 800eae0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d0e2      	beq.n	800eaae <ai_array_to_buffer_fmt+0x2a>
 800eae8:	4b19      	ldr	r3, [pc, #100]	; (800eb50 <ai_array_to_buffer_fmt+0xcc>)
 800eaea:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	bf18      	it	ne
 800eaf2:	2340      	movne	r3, #64	; 0x40
 800eaf4:	4318      	orrs	r0, r3
 800eaf6:	4770      	bx	lr
 800eaf8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d0d6      	beq.n	800eaae <ai_array_to_buffer_fmt+0x2a>
 800eb00:	3307      	adds	r3, #7
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d0d3      	beq.n	800eaae <ai_array_to_buffer_fmt+0x2a>
 800eb06:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	bf18      	it	ne
 800eb0e:	2340      	movne	r3, #64	; 0x40
 800eb10:	e7ce      	b.n	800eab0 <ai_array_to_buffer_fmt+0x2c>
 800eb12:	4b10      	ldr	r3, [pc, #64]	; (800eb54 <ai_array_to_buffer_fmt+0xd0>)
 800eb14:	429a      	cmp	r2, r3
 800eb16:	bf18      	it	ne
 800eb18:	2340      	movne	r3, #64	; 0x40
 800eb1a:	e7c9      	b.n	800eab0 <ai_array_to_buffer_fmt+0x2c>
 800eb1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d0c4      	beq.n	800eaae <ai_array_to_buffer_fmt+0x2a>
 800eb24:	3380      	adds	r3, #128	; 0x80
 800eb26:	429a      	cmp	r2, r3
 800eb28:	bf18      	it	ne
 800eb2a:	2340      	movne	r3, #64	; 0x40
 800eb2c:	e7c0      	b.n	800eab0 <ai_array_to_buffer_fmt+0x2c>
 800eb2e:	4b0a      	ldr	r3, [pc, #40]	; (800eb58 <ai_array_to_buffer_fmt+0xd4>)
 800eb30:	4003      	ands	r3, r0
 800eb32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800eb36:	e7bb      	b.n	800eab0 <ai_array_to_buffer_fmt+0x2c>
 800eb38:	00840040 	.word	0x00840040
 800eb3c:	00040840 	.word	0x00040840
 800eb40:	00041040 	.word	0x00041040
 800eb44:	00040447 	.word	0x00040447
 800eb48:	00840840 	.word	0x00840840
 800eb4c:	00841040 	.word	0x00841040
 800eb50:	0084084f 	.word	0x0084084f
 800eb54:	0004084f 	.word	0x0004084f
 800eb58:	00803fff 	.word	0x00803fff

0800eb5c <ai_array_get_byte_size>:
 800eb5c:	b319      	cbz	r1, 800eba6 <ai_array_get_byte_size+0x4a>
 800eb5e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800eb62:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800eb66:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800eb6a:	11c0      	asrs	r0, r0, #7
 800eb6c:	fb03 f101 	mul.w	r1, r3, r1
 800eb70:	2a04      	cmp	r2, #4
 800eb72:	f101 0107 	add.w	r1, r1, #7
 800eb76:	f021 0107 	bic.w	r1, r1, #7
 800eb7a:	fa21 f10c 	lsr.w	r1, r1, ip
 800eb7e:	d00b      	beq.n	800eb98 <ai_array_get_byte_size+0x3c>
 800eb80:	2a08      	cmp	r2, #8
 800eb82:	d002      	beq.n	800eb8a <ai_array_get_byte_size+0x2e>
 800eb84:	3107      	adds	r1, #7
 800eb86:	08c8      	lsrs	r0, r1, #3
 800eb88:	4770      	bx	lr
 800eb8a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800eb8e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800eb92:	3107      	adds	r1, #7
 800eb94:	08c8      	lsrs	r0, r1, #3
 800eb96:	4770      	bx	lr
 800eb98:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800eb9c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800eba0:	3107      	adds	r1, #7
 800eba2:	08c8      	lsrs	r0, r1, #3
 800eba4:	4770      	bx	lr
 800eba6:	4608      	mov	r0, r1
 800eba8:	4770      	bx	lr
 800ebaa:	bf00      	nop

0800ebac <ai_array_get_data_byte_size>:
 800ebac:	b161      	cbz	r1, 800ebc8 <ai_array_get_data_byte_size+0x1c>
 800ebae:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800ebb2:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800ebb6:	fb03 f101 	mul.w	r1, r3, r1
 800ebba:	1dc8      	adds	r0, r1, #7
 800ebbc:	f020 0007 	bic.w	r0, r0, #7
 800ebc0:	40d0      	lsrs	r0, r2
 800ebc2:	3007      	adds	r0, #7
 800ebc4:	08c0      	lsrs	r0, r0, #3
 800ebc6:	4770      	bx	lr
 800ebc8:	4608      	mov	r0, r1
 800ebca:	4770      	bx	lr

0800ebcc <__errno>:
 800ebcc:	4b01      	ldr	r3, [pc, #4]	; (800ebd4 <__errno+0x8>)
 800ebce:	6818      	ldr	r0, [r3, #0]
 800ebd0:	4770      	bx	lr
 800ebd2:	bf00      	nop
 800ebd4:	200013b8 	.word	0x200013b8

0800ebd8 <__libc_init_array>:
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	4d0d      	ldr	r5, [pc, #52]	; (800ec10 <__libc_init_array+0x38>)
 800ebdc:	4c0d      	ldr	r4, [pc, #52]	; (800ec14 <__libc_init_array+0x3c>)
 800ebde:	1b64      	subs	r4, r4, r5
 800ebe0:	10a4      	asrs	r4, r4, #2
 800ebe2:	2600      	movs	r6, #0
 800ebe4:	42a6      	cmp	r6, r4
 800ebe6:	d109      	bne.n	800ebfc <__libc_init_array+0x24>
 800ebe8:	4d0b      	ldr	r5, [pc, #44]	; (800ec18 <__libc_init_array+0x40>)
 800ebea:	4c0c      	ldr	r4, [pc, #48]	; (800ec1c <__libc_init_array+0x44>)
 800ebec:	f000 fd28 	bl	800f640 <_init>
 800ebf0:	1b64      	subs	r4, r4, r5
 800ebf2:	10a4      	asrs	r4, r4, #2
 800ebf4:	2600      	movs	r6, #0
 800ebf6:	42a6      	cmp	r6, r4
 800ebf8:	d105      	bne.n	800ec06 <__libc_init_array+0x2e>
 800ebfa:	bd70      	pop	{r4, r5, r6, pc}
 800ebfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec00:	4798      	blx	r3
 800ec02:	3601      	adds	r6, #1
 800ec04:	e7ee      	b.n	800ebe4 <__libc_init_array+0xc>
 800ec06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec0a:	4798      	blx	r3
 800ec0c:	3601      	adds	r6, #1
 800ec0e:	e7f2      	b.n	800ebf6 <__libc_init_array+0x1e>
 800ec10:	0816e210 	.word	0x0816e210
 800ec14:	0816e210 	.word	0x0816e210
 800ec18:	0816e210 	.word	0x0816e210
 800ec1c:	0816e214 	.word	0x0816e214

0800ec20 <memcpy>:
 800ec20:	440a      	add	r2, r1
 800ec22:	4291      	cmp	r1, r2
 800ec24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ec28:	d100      	bne.n	800ec2c <memcpy+0xc>
 800ec2a:	4770      	bx	lr
 800ec2c:	b510      	push	{r4, lr}
 800ec2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec36:	4291      	cmp	r1, r2
 800ec38:	d1f9      	bne.n	800ec2e <memcpy+0xe>
 800ec3a:	bd10      	pop	{r4, pc}

0800ec3c <memset>:
 800ec3c:	4402      	add	r2, r0
 800ec3e:	4603      	mov	r3, r0
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d100      	bne.n	800ec46 <memset+0xa>
 800ec44:	4770      	bx	lr
 800ec46:	f803 1b01 	strb.w	r1, [r3], #1
 800ec4a:	e7f9      	b.n	800ec40 <memset+0x4>

0800ec4c <_free_r>:
 800ec4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec4e:	2900      	cmp	r1, #0
 800ec50:	d044      	beq.n	800ecdc <_free_r+0x90>
 800ec52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec56:	9001      	str	r0, [sp, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	f1a1 0404 	sub.w	r4, r1, #4
 800ec5e:	bfb8      	it	lt
 800ec60:	18e4      	addlt	r4, r4, r3
 800ec62:	f000 f903 	bl	800ee6c <__malloc_lock>
 800ec66:	4a1e      	ldr	r2, [pc, #120]	; (800ece0 <_free_r+0x94>)
 800ec68:	9801      	ldr	r0, [sp, #4]
 800ec6a:	6813      	ldr	r3, [r2, #0]
 800ec6c:	b933      	cbnz	r3, 800ec7c <_free_r+0x30>
 800ec6e:	6063      	str	r3, [r4, #4]
 800ec70:	6014      	str	r4, [r2, #0]
 800ec72:	b003      	add	sp, #12
 800ec74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ec78:	f000 b8fe 	b.w	800ee78 <__malloc_unlock>
 800ec7c:	42a3      	cmp	r3, r4
 800ec7e:	d908      	bls.n	800ec92 <_free_r+0x46>
 800ec80:	6825      	ldr	r5, [r4, #0]
 800ec82:	1961      	adds	r1, r4, r5
 800ec84:	428b      	cmp	r3, r1
 800ec86:	bf01      	itttt	eq
 800ec88:	6819      	ldreq	r1, [r3, #0]
 800ec8a:	685b      	ldreq	r3, [r3, #4]
 800ec8c:	1949      	addeq	r1, r1, r5
 800ec8e:	6021      	streq	r1, [r4, #0]
 800ec90:	e7ed      	b.n	800ec6e <_free_r+0x22>
 800ec92:	461a      	mov	r2, r3
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	b10b      	cbz	r3, 800ec9c <_free_r+0x50>
 800ec98:	42a3      	cmp	r3, r4
 800ec9a:	d9fa      	bls.n	800ec92 <_free_r+0x46>
 800ec9c:	6811      	ldr	r1, [r2, #0]
 800ec9e:	1855      	adds	r5, r2, r1
 800eca0:	42a5      	cmp	r5, r4
 800eca2:	d10b      	bne.n	800ecbc <_free_r+0x70>
 800eca4:	6824      	ldr	r4, [r4, #0]
 800eca6:	4421      	add	r1, r4
 800eca8:	1854      	adds	r4, r2, r1
 800ecaa:	42a3      	cmp	r3, r4
 800ecac:	6011      	str	r1, [r2, #0]
 800ecae:	d1e0      	bne.n	800ec72 <_free_r+0x26>
 800ecb0:	681c      	ldr	r4, [r3, #0]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	6053      	str	r3, [r2, #4]
 800ecb6:	4421      	add	r1, r4
 800ecb8:	6011      	str	r1, [r2, #0]
 800ecba:	e7da      	b.n	800ec72 <_free_r+0x26>
 800ecbc:	d902      	bls.n	800ecc4 <_free_r+0x78>
 800ecbe:	230c      	movs	r3, #12
 800ecc0:	6003      	str	r3, [r0, #0]
 800ecc2:	e7d6      	b.n	800ec72 <_free_r+0x26>
 800ecc4:	6825      	ldr	r5, [r4, #0]
 800ecc6:	1961      	adds	r1, r4, r5
 800ecc8:	428b      	cmp	r3, r1
 800ecca:	bf04      	itt	eq
 800eccc:	6819      	ldreq	r1, [r3, #0]
 800ecce:	685b      	ldreq	r3, [r3, #4]
 800ecd0:	6063      	str	r3, [r4, #4]
 800ecd2:	bf04      	itt	eq
 800ecd4:	1949      	addeq	r1, r1, r5
 800ecd6:	6021      	streq	r1, [r4, #0]
 800ecd8:	6054      	str	r4, [r2, #4]
 800ecda:	e7ca      	b.n	800ec72 <_free_r+0x26>
 800ecdc:	b003      	add	sp, #12
 800ecde:	bd30      	pop	{r4, r5, pc}
 800ece0:	20001f2c 	.word	0x20001f2c

0800ece4 <sbrk_aligned>:
 800ece4:	b570      	push	{r4, r5, r6, lr}
 800ece6:	4e0e      	ldr	r6, [pc, #56]	; (800ed20 <sbrk_aligned+0x3c>)
 800ece8:	460c      	mov	r4, r1
 800ecea:	6831      	ldr	r1, [r6, #0]
 800ecec:	4605      	mov	r5, r0
 800ecee:	b911      	cbnz	r1, 800ecf6 <sbrk_aligned+0x12>
 800ecf0:	f000 f88c 	bl	800ee0c <_sbrk_r>
 800ecf4:	6030      	str	r0, [r6, #0]
 800ecf6:	4621      	mov	r1, r4
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	f000 f887 	bl	800ee0c <_sbrk_r>
 800ecfe:	1c43      	adds	r3, r0, #1
 800ed00:	d00a      	beq.n	800ed18 <sbrk_aligned+0x34>
 800ed02:	1cc4      	adds	r4, r0, #3
 800ed04:	f024 0403 	bic.w	r4, r4, #3
 800ed08:	42a0      	cmp	r0, r4
 800ed0a:	d007      	beq.n	800ed1c <sbrk_aligned+0x38>
 800ed0c:	1a21      	subs	r1, r4, r0
 800ed0e:	4628      	mov	r0, r5
 800ed10:	f000 f87c 	bl	800ee0c <_sbrk_r>
 800ed14:	3001      	adds	r0, #1
 800ed16:	d101      	bne.n	800ed1c <sbrk_aligned+0x38>
 800ed18:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	bd70      	pop	{r4, r5, r6, pc}
 800ed20:	20001f30 	.word	0x20001f30

0800ed24 <_malloc_r>:
 800ed24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed28:	1ccd      	adds	r5, r1, #3
 800ed2a:	f025 0503 	bic.w	r5, r5, #3
 800ed2e:	3508      	adds	r5, #8
 800ed30:	2d0c      	cmp	r5, #12
 800ed32:	bf38      	it	cc
 800ed34:	250c      	movcc	r5, #12
 800ed36:	2d00      	cmp	r5, #0
 800ed38:	4607      	mov	r7, r0
 800ed3a:	db01      	blt.n	800ed40 <_malloc_r+0x1c>
 800ed3c:	42a9      	cmp	r1, r5
 800ed3e:	d905      	bls.n	800ed4c <_malloc_r+0x28>
 800ed40:	230c      	movs	r3, #12
 800ed42:	603b      	str	r3, [r7, #0]
 800ed44:	2600      	movs	r6, #0
 800ed46:	4630      	mov	r0, r6
 800ed48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed4c:	4e2e      	ldr	r6, [pc, #184]	; (800ee08 <_malloc_r+0xe4>)
 800ed4e:	f000 f88d 	bl	800ee6c <__malloc_lock>
 800ed52:	6833      	ldr	r3, [r6, #0]
 800ed54:	461c      	mov	r4, r3
 800ed56:	bb34      	cbnz	r4, 800eda6 <_malloc_r+0x82>
 800ed58:	4629      	mov	r1, r5
 800ed5a:	4638      	mov	r0, r7
 800ed5c:	f7ff ffc2 	bl	800ece4 <sbrk_aligned>
 800ed60:	1c43      	adds	r3, r0, #1
 800ed62:	4604      	mov	r4, r0
 800ed64:	d14d      	bne.n	800ee02 <_malloc_r+0xde>
 800ed66:	6834      	ldr	r4, [r6, #0]
 800ed68:	4626      	mov	r6, r4
 800ed6a:	2e00      	cmp	r6, #0
 800ed6c:	d140      	bne.n	800edf0 <_malloc_r+0xcc>
 800ed6e:	6823      	ldr	r3, [r4, #0]
 800ed70:	4631      	mov	r1, r6
 800ed72:	4638      	mov	r0, r7
 800ed74:	eb04 0803 	add.w	r8, r4, r3
 800ed78:	f000 f848 	bl	800ee0c <_sbrk_r>
 800ed7c:	4580      	cmp	r8, r0
 800ed7e:	d13a      	bne.n	800edf6 <_malloc_r+0xd2>
 800ed80:	6821      	ldr	r1, [r4, #0]
 800ed82:	3503      	adds	r5, #3
 800ed84:	1a6d      	subs	r5, r5, r1
 800ed86:	f025 0503 	bic.w	r5, r5, #3
 800ed8a:	3508      	adds	r5, #8
 800ed8c:	2d0c      	cmp	r5, #12
 800ed8e:	bf38      	it	cc
 800ed90:	250c      	movcc	r5, #12
 800ed92:	4629      	mov	r1, r5
 800ed94:	4638      	mov	r0, r7
 800ed96:	f7ff ffa5 	bl	800ece4 <sbrk_aligned>
 800ed9a:	3001      	adds	r0, #1
 800ed9c:	d02b      	beq.n	800edf6 <_malloc_r+0xd2>
 800ed9e:	6823      	ldr	r3, [r4, #0]
 800eda0:	442b      	add	r3, r5
 800eda2:	6023      	str	r3, [r4, #0]
 800eda4:	e00e      	b.n	800edc4 <_malloc_r+0xa0>
 800eda6:	6822      	ldr	r2, [r4, #0]
 800eda8:	1b52      	subs	r2, r2, r5
 800edaa:	d41e      	bmi.n	800edea <_malloc_r+0xc6>
 800edac:	2a0b      	cmp	r2, #11
 800edae:	d916      	bls.n	800edde <_malloc_r+0xba>
 800edb0:	1961      	adds	r1, r4, r5
 800edb2:	42a3      	cmp	r3, r4
 800edb4:	6025      	str	r5, [r4, #0]
 800edb6:	bf18      	it	ne
 800edb8:	6059      	strne	r1, [r3, #4]
 800edba:	6863      	ldr	r3, [r4, #4]
 800edbc:	bf08      	it	eq
 800edbe:	6031      	streq	r1, [r6, #0]
 800edc0:	5162      	str	r2, [r4, r5]
 800edc2:	604b      	str	r3, [r1, #4]
 800edc4:	4638      	mov	r0, r7
 800edc6:	f104 060b 	add.w	r6, r4, #11
 800edca:	f000 f855 	bl	800ee78 <__malloc_unlock>
 800edce:	f026 0607 	bic.w	r6, r6, #7
 800edd2:	1d23      	adds	r3, r4, #4
 800edd4:	1af2      	subs	r2, r6, r3
 800edd6:	d0b6      	beq.n	800ed46 <_malloc_r+0x22>
 800edd8:	1b9b      	subs	r3, r3, r6
 800edda:	50a3      	str	r3, [r4, r2]
 800eddc:	e7b3      	b.n	800ed46 <_malloc_r+0x22>
 800edde:	6862      	ldr	r2, [r4, #4]
 800ede0:	42a3      	cmp	r3, r4
 800ede2:	bf0c      	ite	eq
 800ede4:	6032      	streq	r2, [r6, #0]
 800ede6:	605a      	strne	r2, [r3, #4]
 800ede8:	e7ec      	b.n	800edc4 <_malloc_r+0xa0>
 800edea:	4623      	mov	r3, r4
 800edec:	6864      	ldr	r4, [r4, #4]
 800edee:	e7b2      	b.n	800ed56 <_malloc_r+0x32>
 800edf0:	4634      	mov	r4, r6
 800edf2:	6876      	ldr	r6, [r6, #4]
 800edf4:	e7b9      	b.n	800ed6a <_malloc_r+0x46>
 800edf6:	230c      	movs	r3, #12
 800edf8:	603b      	str	r3, [r7, #0]
 800edfa:	4638      	mov	r0, r7
 800edfc:	f000 f83c 	bl	800ee78 <__malloc_unlock>
 800ee00:	e7a1      	b.n	800ed46 <_malloc_r+0x22>
 800ee02:	6025      	str	r5, [r4, #0]
 800ee04:	e7de      	b.n	800edc4 <_malloc_r+0xa0>
 800ee06:	bf00      	nop
 800ee08:	20001f2c 	.word	0x20001f2c

0800ee0c <_sbrk_r>:
 800ee0c:	b538      	push	{r3, r4, r5, lr}
 800ee0e:	4d06      	ldr	r5, [pc, #24]	; (800ee28 <_sbrk_r+0x1c>)
 800ee10:	2300      	movs	r3, #0
 800ee12:	4604      	mov	r4, r0
 800ee14:	4608      	mov	r0, r1
 800ee16:	602b      	str	r3, [r5, #0]
 800ee18:	f7f2 fd3a 	bl	8001890 <_sbrk>
 800ee1c:	1c43      	adds	r3, r0, #1
 800ee1e:	d102      	bne.n	800ee26 <_sbrk_r+0x1a>
 800ee20:	682b      	ldr	r3, [r5, #0]
 800ee22:	b103      	cbz	r3, 800ee26 <_sbrk_r+0x1a>
 800ee24:	6023      	str	r3, [r4, #0]
 800ee26:	bd38      	pop	{r3, r4, r5, pc}
 800ee28:	20001f34 	.word	0x20001f34

0800ee2c <siprintf>:
 800ee2c:	b40e      	push	{r1, r2, r3}
 800ee2e:	b500      	push	{lr}
 800ee30:	b09c      	sub	sp, #112	; 0x70
 800ee32:	ab1d      	add	r3, sp, #116	; 0x74
 800ee34:	9002      	str	r0, [sp, #8]
 800ee36:	9006      	str	r0, [sp, #24]
 800ee38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee3c:	4809      	ldr	r0, [pc, #36]	; (800ee64 <siprintf+0x38>)
 800ee3e:	9107      	str	r1, [sp, #28]
 800ee40:	9104      	str	r1, [sp, #16]
 800ee42:	4909      	ldr	r1, [pc, #36]	; (800ee68 <siprintf+0x3c>)
 800ee44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee48:	9105      	str	r1, [sp, #20]
 800ee4a:	6800      	ldr	r0, [r0, #0]
 800ee4c:	9301      	str	r3, [sp, #4]
 800ee4e:	a902      	add	r1, sp, #8
 800ee50:	f000 f8a2 	bl	800ef98 <_svfiprintf_r>
 800ee54:	9b02      	ldr	r3, [sp, #8]
 800ee56:	2200      	movs	r2, #0
 800ee58:	701a      	strb	r2, [r3, #0]
 800ee5a:	b01c      	add	sp, #112	; 0x70
 800ee5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee60:	b003      	add	sp, #12
 800ee62:	4770      	bx	lr
 800ee64:	200013b8 	.word	0x200013b8
 800ee68:	ffff0208 	.word	0xffff0208

0800ee6c <__malloc_lock>:
 800ee6c:	4801      	ldr	r0, [pc, #4]	; (800ee74 <__malloc_lock+0x8>)
 800ee6e:	f000 bb27 	b.w	800f4c0 <__retarget_lock_acquire_recursive>
 800ee72:	bf00      	nop
 800ee74:	20001f38 	.word	0x20001f38

0800ee78 <__malloc_unlock>:
 800ee78:	4801      	ldr	r0, [pc, #4]	; (800ee80 <__malloc_unlock+0x8>)
 800ee7a:	f000 bb22 	b.w	800f4c2 <__retarget_lock_release_recursive>
 800ee7e:	bf00      	nop
 800ee80:	20001f38 	.word	0x20001f38

0800ee84 <_realloc_r>:
 800ee84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee88:	4680      	mov	r8, r0
 800ee8a:	4614      	mov	r4, r2
 800ee8c:	460e      	mov	r6, r1
 800ee8e:	b921      	cbnz	r1, 800ee9a <_realloc_r+0x16>
 800ee90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee94:	4611      	mov	r1, r2
 800ee96:	f7ff bf45 	b.w	800ed24 <_malloc_r>
 800ee9a:	b92a      	cbnz	r2, 800eea8 <_realloc_r+0x24>
 800ee9c:	f7ff fed6 	bl	800ec4c <_free_r>
 800eea0:	4625      	mov	r5, r4
 800eea2:	4628      	mov	r0, r5
 800eea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eea8:	f000 fb26 	bl	800f4f8 <_malloc_usable_size_r>
 800eeac:	4284      	cmp	r4, r0
 800eeae:	4607      	mov	r7, r0
 800eeb0:	d802      	bhi.n	800eeb8 <_realloc_r+0x34>
 800eeb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eeb6:	d812      	bhi.n	800eede <_realloc_r+0x5a>
 800eeb8:	4621      	mov	r1, r4
 800eeba:	4640      	mov	r0, r8
 800eebc:	f7ff ff32 	bl	800ed24 <_malloc_r>
 800eec0:	4605      	mov	r5, r0
 800eec2:	2800      	cmp	r0, #0
 800eec4:	d0ed      	beq.n	800eea2 <_realloc_r+0x1e>
 800eec6:	42bc      	cmp	r4, r7
 800eec8:	4622      	mov	r2, r4
 800eeca:	4631      	mov	r1, r6
 800eecc:	bf28      	it	cs
 800eece:	463a      	movcs	r2, r7
 800eed0:	f7ff fea6 	bl	800ec20 <memcpy>
 800eed4:	4631      	mov	r1, r6
 800eed6:	4640      	mov	r0, r8
 800eed8:	f7ff feb8 	bl	800ec4c <_free_r>
 800eedc:	e7e1      	b.n	800eea2 <_realloc_r+0x1e>
 800eede:	4635      	mov	r5, r6
 800eee0:	e7df      	b.n	800eea2 <_realloc_r+0x1e>

0800eee2 <__ssputs_r>:
 800eee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eee6:	688e      	ldr	r6, [r1, #8]
 800eee8:	429e      	cmp	r6, r3
 800eeea:	4682      	mov	sl, r0
 800eeec:	460c      	mov	r4, r1
 800eeee:	4690      	mov	r8, r2
 800eef0:	461f      	mov	r7, r3
 800eef2:	d838      	bhi.n	800ef66 <__ssputs_r+0x84>
 800eef4:	898a      	ldrh	r2, [r1, #12]
 800eef6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eefa:	d032      	beq.n	800ef62 <__ssputs_r+0x80>
 800eefc:	6825      	ldr	r5, [r4, #0]
 800eefe:	6909      	ldr	r1, [r1, #16]
 800ef00:	eba5 0901 	sub.w	r9, r5, r1
 800ef04:	6965      	ldr	r5, [r4, #20]
 800ef06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef0e:	3301      	adds	r3, #1
 800ef10:	444b      	add	r3, r9
 800ef12:	106d      	asrs	r5, r5, #1
 800ef14:	429d      	cmp	r5, r3
 800ef16:	bf38      	it	cc
 800ef18:	461d      	movcc	r5, r3
 800ef1a:	0553      	lsls	r3, r2, #21
 800ef1c:	d531      	bpl.n	800ef82 <__ssputs_r+0xa0>
 800ef1e:	4629      	mov	r1, r5
 800ef20:	f7ff ff00 	bl	800ed24 <_malloc_r>
 800ef24:	4606      	mov	r6, r0
 800ef26:	b950      	cbnz	r0, 800ef3e <__ssputs_r+0x5c>
 800ef28:	230c      	movs	r3, #12
 800ef2a:	f8ca 3000 	str.w	r3, [sl]
 800ef2e:	89a3      	ldrh	r3, [r4, #12]
 800ef30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef34:	81a3      	strh	r3, [r4, #12]
 800ef36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef3e:	6921      	ldr	r1, [r4, #16]
 800ef40:	464a      	mov	r2, r9
 800ef42:	f7ff fe6d 	bl	800ec20 <memcpy>
 800ef46:	89a3      	ldrh	r3, [r4, #12]
 800ef48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ef4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef50:	81a3      	strh	r3, [r4, #12]
 800ef52:	6126      	str	r6, [r4, #16]
 800ef54:	6165      	str	r5, [r4, #20]
 800ef56:	444e      	add	r6, r9
 800ef58:	eba5 0509 	sub.w	r5, r5, r9
 800ef5c:	6026      	str	r6, [r4, #0]
 800ef5e:	60a5      	str	r5, [r4, #8]
 800ef60:	463e      	mov	r6, r7
 800ef62:	42be      	cmp	r6, r7
 800ef64:	d900      	bls.n	800ef68 <__ssputs_r+0x86>
 800ef66:	463e      	mov	r6, r7
 800ef68:	6820      	ldr	r0, [r4, #0]
 800ef6a:	4632      	mov	r2, r6
 800ef6c:	4641      	mov	r1, r8
 800ef6e:	f000 faa9 	bl	800f4c4 <memmove>
 800ef72:	68a3      	ldr	r3, [r4, #8]
 800ef74:	1b9b      	subs	r3, r3, r6
 800ef76:	60a3      	str	r3, [r4, #8]
 800ef78:	6823      	ldr	r3, [r4, #0]
 800ef7a:	4433      	add	r3, r6
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	2000      	movs	r0, #0
 800ef80:	e7db      	b.n	800ef3a <__ssputs_r+0x58>
 800ef82:	462a      	mov	r2, r5
 800ef84:	f7ff ff7e 	bl	800ee84 <_realloc_r>
 800ef88:	4606      	mov	r6, r0
 800ef8a:	2800      	cmp	r0, #0
 800ef8c:	d1e1      	bne.n	800ef52 <__ssputs_r+0x70>
 800ef8e:	6921      	ldr	r1, [r4, #16]
 800ef90:	4650      	mov	r0, sl
 800ef92:	f7ff fe5b 	bl	800ec4c <_free_r>
 800ef96:	e7c7      	b.n	800ef28 <__ssputs_r+0x46>

0800ef98 <_svfiprintf_r>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	4698      	mov	r8, r3
 800ef9e:	898b      	ldrh	r3, [r1, #12]
 800efa0:	061b      	lsls	r3, r3, #24
 800efa2:	b09d      	sub	sp, #116	; 0x74
 800efa4:	4607      	mov	r7, r0
 800efa6:	460d      	mov	r5, r1
 800efa8:	4614      	mov	r4, r2
 800efaa:	d50e      	bpl.n	800efca <_svfiprintf_r+0x32>
 800efac:	690b      	ldr	r3, [r1, #16]
 800efae:	b963      	cbnz	r3, 800efca <_svfiprintf_r+0x32>
 800efb0:	2140      	movs	r1, #64	; 0x40
 800efb2:	f7ff feb7 	bl	800ed24 <_malloc_r>
 800efb6:	6028      	str	r0, [r5, #0]
 800efb8:	6128      	str	r0, [r5, #16]
 800efba:	b920      	cbnz	r0, 800efc6 <_svfiprintf_r+0x2e>
 800efbc:	230c      	movs	r3, #12
 800efbe:	603b      	str	r3, [r7, #0]
 800efc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efc4:	e0d1      	b.n	800f16a <_svfiprintf_r+0x1d2>
 800efc6:	2340      	movs	r3, #64	; 0x40
 800efc8:	616b      	str	r3, [r5, #20]
 800efca:	2300      	movs	r3, #0
 800efcc:	9309      	str	r3, [sp, #36]	; 0x24
 800efce:	2320      	movs	r3, #32
 800efd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800efd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800efd8:	2330      	movs	r3, #48	; 0x30
 800efda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f184 <_svfiprintf_r+0x1ec>
 800efde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efe2:	f04f 0901 	mov.w	r9, #1
 800efe6:	4623      	mov	r3, r4
 800efe8:	469a      	mov	sl, r3
 800efea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800efee:	b10a      	cbz	r2, 800eff4 <_svfiprintf_r+0x5c>
 800eff0:	2a25      	cmp	r2, #37	; 0x25
 800eff2:	d1f9      	bne.n	800efe8 <_svfiprintf_r+0x50>
 800eff4:	ebba 0b04 	subs.w	fp, sl, r4
 800eff8:	d00b      	beq.n	800f012 <_svfiprintf_r+0x7a>
 800effa:	465b      	mov	r3, fp
 800effc:	4622      	mov	r2, r4
 800effe:	4629      	mov	r1, r5
 800f000:	4638      	mov	r0, r7
 800f002:	f7ff ff6e 	bl	800eee2 <__ssputs_r>
 800f006:	3001      	adds	r0, #1
 800f008:	f000 80aa 	beq.w	800f160 <_svfiprintf_r+0x1c8>
 800f00c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f00e:	445a      	add	r2, fp
 800f010:	9209      	str	r2, [sp, #36]	; 0x24
 800f012:	f89a 3000 	ldrb.w	r3, [sl]
 800f016:	2b00      	cmp	r3, #0
 800f018:	f000 80a2 	beq.w	800f160 <_svfiprintf_r+0x1c8>
 800f01c:	2300      	movs	r3, #0
 800f01e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f026:	f10a 0a01 	add.w	sl, sl, #1
 800f02a:	9304      	str	r3, [sp, #16]
 800f02c:	9307      	str	r3, [sp, #28]
 800f02e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f032:	931a      	str	r3, [sp, #104]	; 0x68
 800f034:	4654      	mov	r4, sl
 800f036:	2205      	movs	r2, #5
 800f038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f03c:	4851      	ldr	r0, [pc, #324]	; (800f184 <_svfiprintf_r+0x1ec>)
 800f03e:	f7f1 f8ff 	bl	8000240 <memchr>
 800f042:	9a04      	ldr	r2, [sp, #16]
 800f044:	b9d8      	cbnz	r0, 800f07e <_svfiprintf_r+0xe6>
 800f046:	06d0      	lsls	r0, r2, #27
 800f048:	bf44      	itt	mi
 800f04a:	2320      	movmi	r3, #32
 800f04c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f050:	0711      	lsls	r1, r2, #28
 800f052:	bf44      	itt	mi
 800f054:	232b      	movmi	r3, #43	; 0x2b
 800f056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f05a:	f89a 3000 	ldrb.w	r3, [sl]
 800f05e:	2b2a      	cmp	r3, #42	; 0x2a
 800f060:	d015      	beq.n	800f08e <_svfiprintf_r+0xf6>
 800f062:	9a07      	ldr	r2, [sp, #28]
 800f064:	4654      	mov	r4, sl
 800f066:	2000      	movs	r0, #0
 800f068:	f04f 0c0a 	mov.w	ip, #10
 800f06c:	4621      	mov	r1, r4
 800f06e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f072:	3b30      	subs	r3, #48	; 0x30
 800f074:	2b09      	cmp	r3, #9
 800f076:	d94e      	bls.n	800f116 <_svfiprintf_r+0x17e>
 800f078:	b1b0      	cbz	r0, 800f0a8 <_svfiprintf_r+0x110>
 800f07a:	9207      	str	r2, [sp, #28]
 800f07c:	e014      	b.n	800f0a8 <_svfiprintf_r+0x110>
 800f07e:	eba0 0308 	sub.w	r3, r0, r8
 800f082:	fa09 f303 	lsl.w	r3, r9, r3
 800f086:	4313      	orrs	r3, r2
 800f088:	9304      	str	r3, [sp, #16]
 800f08a:	46a2      	mov	sl, r4
 800f08c:	e7d2      	b.n	800f034 <_svfiprintf_r+0x9c>
 800f08e:	9b03      	ldr	r3, [sp, #12]
 800f090:	1d19      	adds	r1, r3, #4
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	9103      	str	r1, [sp, #12]
 800f096:	2b00      	cmp	r3, #0
 800f098:	bfbb      	ittet	lt
 800f09a:	425b      	neglt	r3, r3
 800f09c:	f042 0202 	orrlt.w	r2, r2, #2
 800f0a0:	9307      	strge	r3, [sp, #28]
 800f0a2:	9307      	strlt	r3, [sp, #28]
 800f0a4:	bfb8      	it	lt
 800f0a6:	9204      	strlt	r2, [sp, #16]
 800f0a8:	7823      	ldrb	r3, [r4, #0]
 800f0aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f0ac:	d10c      	bne.n	800f0c8 <_svfiprintf_r+0x130>
 800f0ae:	7863      	ldrb	r3, [r4, #1]
 800f0b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f0b2:	d135      	bne.n	800f120 <_svfiprintf_r+0x188>
 800f0b4:	9b03      	ldr	r3, [sp, #12]
 800f0b6:	1d1a      	adds	r2, r3, #4
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	9203      	str	r2, [sp, #12]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	bfb8      	it	lt
 800f0c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f0c4:	3402      	adds	r4, #2
 800f0c6:	9305      	str	r3, [sp, #20]
 800f0c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f194 <_svfiprintf_r+0x1fc>
 800f0cc:	7821      	ldrb	r1, [r4, #0]
 800f0ce:	2203      	movs	r2, #3
 800f0d0:	4650      	mov	r0, sl
 800f0d2:	f7f1 f8b5 	bl	8000240 <memchr>
 800f0d6:	b140      	cbz	r0, 800f0ea <_svfiprintf_r+0x152>
 800f0d8:	2340      	movs	r3, #64	; 0x40
 800f0da:	eba0 000a 	sub.w	r0, r0, sl
 800f0de:	fa03 f000 	lsl.w	r0, r3, r0
 800f0e2:	9b04      	ldr	r3, [sp, #16]
 800f0e4:	4303      	orrs	r3, r0
 800f0e6:	3401      	adds	r4, #1
 800f0e8:	9304      	str	r3, [sp, #16]
 800f0ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0ee:	4826      	ldr	r0, [pc, #152]	; (800f188 <_svfiprintf_r+0x1f0>)
 800f0f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0f4:	2206      	movs	r2, #6
 800f0f6:	f7f1 f8a3 	bl	8000240 <memchr>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d038      	beq.n	800f170 <_svfiprintf_r+0x1d8>
 800f0fe:	4b23      	ldr	r3, [pc, #140]	; (800f18c <_svfiprintf_r+0x1f4>)
 800f100:	bb1b      	cbnz	r3, 800f14a <_svfiprintf_r+0x1b2>
 800f102:	9b03      	ldr	r3, [sp, #12]
 800f104:	3307      	adds	r3, #7
 800f106:	f023 0307 	bic.w	r3, r3, #7
 800f10a:	3308      	adds	r3, #8
 800f10c:	9303      	str	r3, [sp, #12]
 800f10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f110:	4433      	add	r3, r6
 800f112:	9309      	str	r3, [sp, #36]	; 0x24
 800f114:	e767      	b.n	800efe6 <_svfiprintf_r+0x4e>
 800f116:	fb0c 3202 	mla	r2, ip, r2, r3
 800f11a:	460c      	mov	r4, r1
 800f11c:	2001      	movs	r0, #1
 800f11e:	e7a5      	b.n	800f06c <_svfiprintf_r+0xd4>
 800f120:	2300      	movs	r3, #0
 800f122:	3401      	adds	r4, #1
 800f124:	9305      	str	r3, [sp, #20]
 800f126:	4619      	mov	r1, r3
 800f128:	f04f 0c0a 	mov.w	ip, #10
 800f12c:	4620      	mov	r0, r4
 800f12e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f132:	3a30      	subs	r2, #48	; 0x30
 800f134:	2a09      	cmp	r2, #9
 800f136:	d903      	bls.n	800f140 <_svfiprintf_r+0x1a8>
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d0c5      	beq.n	800f0c8 <_svfiprintf_r+0x130>
 800f13c:	9105      	str	r1, [sp, #20]
 800f13e:	e7c3      	b.n	800f0c8 <_svfiprintf_r+0x130>
 800f140:	fb0c 2101 	mla	r1, ip, r1, r2
 800f144:	4604      	mov	r4, r0
 800f146:	2301      	movs	r3, #1
 800f148:	e7f0      	b.n	800f12c <_svfiprintf_r+0x194>
 800f14a:	ab03      	add	r3, sp, #12
 800f14c:	9300      	str	r3, [sp, #0]
 800f14e:	462a      	mov	r2, r5
 800f150:	4b0f      	ldr	r3, [pc, #60]	; (800f190 <_svfiprintf_r+0x1f8>)
 800f152:	a904      	add	r1, sp, #16
 800f154:	4638      	mov	r0, r7
 800f156:	f3af 8000 	nop.w
 800f15a:	1c42      	adds	r2, r0, #1
 800f15c:	4606      	mov	r6, r0
 800f15e:	d1d6      	bne.n	800f10e <_svfiprintf_r+0x176>
 800f160:	89ab      	ldrh	r3, [r5, #12]
 800f162:	065b      	lsls	r3, r3, #25
 800f164:	f53f af2c 	bmi.w	800efc0 <_svfiprintf_r+0x28>
 800f168:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f16a:	b01d      	add	sp, #116	; 0x74
 800f16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f170:	ab03      	add	r3, sp, #12
 800f172:	9300      	str	r3, [sp, #0]
 800f174:	462a      	mov	r2, r5
 800f176:	4b06      	ldr	r3, [pc, #24]	; (800f190 <_svfiprintf_r+0x1f8>)
 800f178:	a904      	add	r1, sp, #16
 800f17a:	4638      	mov	r0, r7
 800f17c:	f000 f87a 	bl	800f274 <_printf_i>
 800f180:	e7eb      	b.n	800f15a <_svfiprintf_r+0x1c2>
 800f182:	bf00      	nop
 800f184:	0816e088 	.word	0x0816e088
 800f188:	0816e092 	.word	0x0816e092
 800f18c:	00000000 	.word	0x00000000
 800f190:	0800eee3 	.word	0x0800eee3
 800f194:	0816e08e 	.word	0x0816e08e

0800f198 <_printf_common>:
 800f198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f19c:	4616      	mov	r6, r2
 800f19e:	4699      	mov	r9, r3
 800f1a0:	688a      	ldr	r2, [r1, #8]
 800f1a2:	690b      	ldr	r3, [r1, #16]
 800f1a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	bfb8      	it	lt
 800f1ac:	4613      	movlt	r3, r2
 800f1ae:	6033      	str	r3, [r6, #0]
 800f1b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f1b4:	4607      	mov	r7, r0
 800f1b6:	460c      	mov	r4, r1
 800f1b8:	b10a      	cbz	r2, 800f1be <_printf_common+0x26>
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	6033      	str	r3, [r6, #0]
 800f1be:	6823      	ldr	r3, [r4, #0]
 800f1c0:	0699      	lsls	r1, r3, #26
 800f1c2:	bf42      	ittt	mi
 800f1c4:	6833      	ldrmi	r3, [r6, #0]
 800f1c6:	3302      	addmi	r3, #2
 800f1c8:	6033      	strmi	r3, [r6, #0]
 800f1ca:	6825      	ldr	r5, [r4, #0]
 800f1cc:	f015 0506 	ands.w	r5, r5, #6
 800f1d0:	d106      	bne.n	800f1e0 <_printf_common+0x48>
 800f1d2:	f104 0a19 	add.w	sl, r4, #25
 800f1d6:	68e3      	ldr	r3, [r4, #12]
 800f1d8:	6832      	ldr	r2, [r6, #0]
 800f1da:	1a9b      	subs	r3, r3, r2
 800f1dc:	42ab      	cmp	r3, r5
 800f1de:	dc26      	bgt.n	800f22e <_printf_common+0x96>
 800f1e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f1e4:	1e13      	subs	r3, r2, #0
 800f1e6:	6822      	ldr	r2, [r4, #0]
 800f1e8:	bf18      	it	ne
 800f1ea:	2301      	movne	r3, #1
 800f1ec:	0692      	lsls	r2, r2, #26
 800f1ee:	d42b      	bmi.n	800f248 <_printf_common+0xb0>
 800f1f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f1f4:	4649      	mov	r1, r9
 800f1f6:	4638      	mov	r0, r7
 800f1f8:	47c0      	blx	r8
 800f1fa:	3001      	adds	r0, #1
 800f1fc:	d01e      	beq.n	800f23c <_printf_common+0xa4>
 800f1fe:	6823      	ldr	r3, [r4, #0]
 800f200:	68e5      	ldr	r5, [r4, #12]
 800f202:	6832      	ldr	r2, [r6, #0]
 800f204:	f003 0306 	and.w	r3, r3, #6
 800f208:	2b04      	cmp	r3, #4
 800f20a:	bf08      	it	eq
 800f20c:	1aad      	subeq	r5, r5, r2
 800f20e:	68a3      	ldr	r3, [r4, #8]
 800f210:	6922      	ldr	r2, [r4, #16]
 800f212:	bf0c      	ite	eq
 800f214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f218:	2500      	movne	r5, #0
 800f21a:	4293      	cmp	r3, r2
 800f21c:	bfc4      	itt	gt
 800f21e:	1a9b      	subgt	r3, r3, r2
 800f220:	18ed      	addgt	r5, r5, r3
 800f222:	2600      	movs	r6, #0
 800f224:	341a      	adds	r4, #26
 800f226:	42b5      	cmp	r5, r6
 800f228:	d11a      	bne.n	800f260 <_printf_common+0xc8>
 800f22a:	2000      	movs	r0, #0
 800f22c:	e008      	b.n	800f240 <_printf_common+0xa8>
 800f22e:	2301      	movs	r3, #1
 800f230:	4652      	mov	r2, sl
 800f232:	4649      	mov	r1, r9
 800f234:	4638      	mov	r0, r7
 800f236:	47c0      	blx	r8
 800f238:	3001      	adds	r0, #1
 800f23a:	d103      	bne.n	800f244 <_printf_common+0xac>
 800f23c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f244:	3501      	adds	r5, #1
 800f246:	e7c6      	b.n	800f1d6 <_printf_common+0x3e>
 800f248:	18e1      	adds	r1, r4, r3
 800f24a:	1c5a      	adds	r2, r3, #1
 800f24c:	2030      	movs	r0, #48	; 0x30
 800f24e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f252:	4422      	add	r2, r4
 800f254:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f258:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f25c:	3302      	adds	r3, #2
 800f25e:	e7c7      	b.n	800f1f0 <_printf_common+0x58>
 800f260:	2301      	movs	r3, #1
 800f262:	4622      	mov	r2, r4
 800f264:	4649      	mov	r1, r9
 800f266:	4638      	mov	r0, r7
 800f268:	47c0      	blx	r8
 800f26a:	3001      	adds	r0, #1
 800f26c:	d0e6      	beq.n	800f23c <_printf_common+0xa4>
 800f26e:	3601      	adds	r6, #1
 800f270:	e7d9      	b.n	800f226 <_printf_common+0x8e>
	...

0800f274 <_printf_i>:
 800f274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f278:	7e0f      	ldrb	r7, [r1, #24]
 800f27a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f27c:	2f78      	cmp	r7, #120	; 0x78
 800f27e:	4691      	mov	r9, r2
 800f280:	4680      	mov	r8, r0
 800f282:	460c      	mov	r4, r1
 800f284:	469a      	mov	sl, r3
 800f286:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f28a:	d807      	bhi.n	800f29c <_printf_i+0x28>
 800f28c:	2f62      	cmp	r7, #98	; 0x62
 800f28e:	d80a      	bhi.n	800f2a6 <_printf_i+0x32>
 800f290:	2f00      	cmp	r7, #0
 800f292:	f000 80d8 	beq.w	800f446 <_printf_i+0x1d2>
 800f296:	2f58      	cmp	r7, #88	; 0x58
 800f298:	f000 80a3 	beq.w	800f3e2 <_printf_i+0x16e>
 800f29c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f2a4:	e03a      	b.n	800f31c <_printf_i+0xa8>
 800f2a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f2aa:	2b15      	cmp	r3, #21
 800f2ac:	d8f6      	bhi.n	800f29c <_printf_i+0x28>
 800f2ae:	a101      	add	r1, pc, #4	; (adr r1, 800f2b4 <_printf_i+0x40>)
 800f2b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2b4:	0800f30d 	.word	0x0800f30d
 800f2b8:	0800f321 	.word	0x0800f321
 800f2bc:	0800f29d 	.word	0x0800f29d
 800f2c0:	0800f29d 	.word	0x0800f29d
 800f2c4:	0800f29d 	.word	0x0800f29d
 800f2c8:	0800f29d 	.word	0x0800f29d
 800f2cc:	0800f321 	.word	0x0800f321
 800f2d0:	0800f29d 	.word	0x0800f29d
 800f2d4:	0800f29d 	.word	0x0800f29d
 800f2d8:	0800f29d 	.word	0x0800f29d
 800f2dc:	0800f29d 	.word	0x0800f29d
 800f2e0:	0800f42d 	.word	0x0800f42d
 800f2e4:	0800f351 	.word	0x0800f351
 800f2e8:	0800f40f 	.word	0x0800f40f
 800f2ec:	0800f29d 	.word	0x0800f29d
 800f2f0:	0800f29d 	.word	0x0800f29d
 800f2f4:	0800f44f 	.word	0x0800f44f
 800f2f8:	0800f29d 	.word	0x0800f29d
 800f2fc:	0800f351 	.word	0x0800f351
 800f300:	0800f29d 	.word	0x0800f29d
 800f304:	0800f29d 	.word	0x0800f29d
 800f308:	0800f417 	.word	0x0800f417
 800f30c:	682b      	ldr	r3, [r5, #0]
 800f30e:	1d1a      	adds	r2, r3, #4
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	602a      	str	r2, [r5, #0]
 800f314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f31c:	2301      	movs	r3, #1
 800f31e:	e0a3      	b.n	800f468 <_printf_i+0x1f4>
 800f320:	6820      	ldr	r0, [r4, #0]
 800f322:	6829      	ldr	r1, [r5, #0]
 800f324:	0606      	lsls	r6, r0, #24
 800f326:	f101 0304 	add.w	r3, r1, #4
 800f32a:	d50a      	bpl.n	800f342 <_printf_i+0xce>
 800f32c:	680e      	ldr	r6, [r1, #0]
 800f32e:	602b      	str	r3, [r5, #0]
 800f330:	2e00      	cmp	r6, #0
 800f332:	da03      	bge.n	800f33c <_printf_i+0xc8>
 800f334:	232d      	movs	r3, #45	; 0x2d
 800f336:	4276      	negs	r6, r6
 800f338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f33c:	485e      	ldr	r0, [pc, #376]	; (800f4b8 <_printf_i+0x244>)
 800f33e:	230a      	movs	r3, #10
 800f340:	e019      	b.n	800f376 <_printf_i+0x102>
 800f342:	680e      	ldr	r6, [r1, #0]
 800f344:	602b      	str	r3, [r5, #0]
 800f346:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f34a:	bf18      	it	ne
 800f34c:	b236      	sxthne	r6, r6
 800f34e:	e7ef      	b.n	800f330 <_printf_i+0xbc>
 800f350:	682b      	ldr	r3, [r5, #0]
 800f352:	6820      	ldr	r0, [r4, #0]
 800f354:	1d19      	adds	r1, r3, #4
 800f356:	6029      	str	r1, [r5, #0]
 800f358:	0601      	lsls	r1, r0, #24
 800f35a:	d501      	bpl.n	800f360 <_printf_i+0xec>
 800f35c:	681e      	ldr	r6, [r3, #0]
 800f35e:	e002      	b.n	800f366 <_printf_i+0xf2>
 800f360:	0646      	lsls	r6, r0, #25
 800f362:	d5fb      	bpl.n	800f35c <_printf_i+0xe8>
 800f364:	881e      	ldrh	r6, [r3, #0]
 800f366:	4854      	ldr	r0, [pc, #336]	; (800f4b8 <_printf_i+0x244>)
 800f368:	2f6f      	cmp	r7, #111	; 0x6f
 800f36a:	bf0c      	ite	eq
 800f36c:	2308      	moveq	r3, #8
 800f36e:	230a      	movne	r3, #10
 800f370:	2100      	movs	r1, #0
 800f372:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f376:	6865      	ldr	r5, [r4, #4]
 800f378:	60a5      	str	r5, [r4, #8]
 800f37a:	2d00      	cmp	r5, #0
 800f37c:	bfa2      	ittt	ge
 800f37e:	6821      	ldrge	r1, [r4, #0]
 800f380:	f021 0104 	bicge.w	r1, r1, #4
 800f384:	6021      	strge	r1, [r4, #0]
 800f386:	b90e      	cbnz	r6, 800f38c <_printf_i+0x118>
 800f388:	2d00      	cmp	r5, #0
 800f38a:	d04d      	beq.n	800f428 <_printf_i+0x1b4>
 800f38c:	4615      	mov	r5, r2
 800f38e:	fbb6 f1f3 	udiv	r1, r6, r3
 800f392:	fb03 6711 	mls	r7, r3, r1, r6
 800f396:	5dc7      	ldrb	r7, [r0, r7]
 800f398:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f39c:	4637      	mov	r7, r6
 800f39e:	42bb      	cmp	r3, r7
 800f3a0:	460e      	mov	r6, r1
 800f3a2:	d9f4      	bls.n	800f38e <_printf_i+0x11a>
 800f3a4:	2b08      	cmp	r3, #8
 800f3a6:	d10b      	bne.n	800f3c0 <_printf_i+0x14c>
 800f3a8:	6823      	ldr	r3, [r4, #0]
 800f3aa:	07de      	lsls	r6, r3, #31
 800f3ac:	d508      	bpl.n	800f3c0 <_printf_i+0x14c>
 800f3ae:	6923      	ldr	r3, [r4, #16]
 800f3b0:	6861      	ldr	r1, [r4, #4]
 800f3b2:	4299      	cmp	r1, r3
 800f3b4:	bfde      	ittt	le
 800f3b6:	2330      	movle	r3, #48	; 0x30
 800f3b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f3bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f3c0:	1b52      	subs	r2, r2, r5
 800f3c2:	6122      	str	r2, [r4, #16]
 800f3c4:	f8cd a000 	str.w	sl, [sp]
 800f3c8:	464b      	mov	r3, r9
 800f3ca:	aa03      	add	r2, sp, #12
 800f3cc:	4621      	mov	r1, r4
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	f7ff fee2 	bl	800f198 <_printf_common>
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	d14c      	bne.n	800f472 <_printf_i+0x1fe>
 800f3d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f3dc:	b004      	add	sp, #16
 800f3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e2:	4835      	ldr	r0, [pc, #212]	; (800f4b8 <_printf_i+0x244>)
 800f3e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f3e8:	6829      	ldr	r1, [r5, #0]
 800f3ea:	6823      	ldr	r3, [r4, #0]
 800f3ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800f3f0:	6029      	str	r1, [r5, #0]
 800f3f2:	061d      	lsls	r5, r3, #24
 800f3f4:	d514      	bpl.n	800f420 <_printf_i+0x1ac>
 800f3f6:	07df      	lsls	r7, r3, #31
 800f3f8:	bf44      	itt	mi
 800f3fa:	f043 0320 	orrmi.w	r3, r3, #32
 800f3fe:	6023      	strmi	r3, [r4, #0]
 800f400:	b91e      	cbnz	r6, 800f40a <_printf_i+0x196>
 800f402:	6823      	ldr	r3, [r4, #0]
 800f404:	f023 0320 	bic.w	r3, r3, #32
 800f408:	6023      	str	r3, [r4, #0]
 800f40a:	2310      	movs	r3, #16
 800f40c:	e7b0      	b.n	800f370 <_printf_i+0xfc>
 800f40e:	6823      	ldr	r3, [r4, #0]
 800f410:	f043 0320 	orr.w	r3, r3, #32
 800f414:	6023      	str	r3, [r4, #0]
 800f416:	2378      	movs	r3, #120	; 0x78
 800f418:	4828      	ldr	r0, [pc, #160]	; (800f4bc <_printf_i+0x248>)
 800f41a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f41e:	e7e3      	b.n	800f3e8 <_printf_i+0x174>
 800f420:	0659      	lsls	r1, r3, #25
 800f422:	bf48      	it	mi
 800f424:	b2b6      	uxthmi	r6, r6
 800f426:	e7e6      	b.n	800f3f6 <_printf_i+0x182>
 800f428:	4615      	mov	r5, r2
 800f42a:	e7bb      	b.n	800f3a4 <_printf_i+0x130>
 800f42c:	682b      	ldr	r3, [r5, #0]
 800f42e:	6826      	ldr	r6, [r4, #0]
 800f430:	6961      	ldr	r1, [r4, #20]
 800f432:	1d18      	adds	r0, r3, #4
 800f434:	6028      	str	r0, [r5, #0]
 800f436:	0635      	lsls	r5, r6, #24
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	d501      	bpl.n	800f440 <_printf_i+0x1cc>
 800f43c:	6019      	str	r1, [r3, #0]
 800f43e:	e002      	b.n	800f446 <_printf_i+0x1d2>
 800f440:	0670      	lsls	r0, r6, #25
 800f442:	d5fb      	bpl.n	800f43c <_printf_i+0x1c8>
 800f444:	8019      	strh	r1, [r3, #0]
 800f446:	2300      	movs	r3, #0
 800f448:	6123      	str	r3, [r4, #16]
 800f44a:	4615      	mov	r5, r2
 800f44c:	e7ba      	b.n	800f3c4 <_printf_i+0x150>
 800f44e:	682b      	ldr	r3, [r5, #0]
 800f450:	1d1a      	adds	r2, r3, #4
 800f452:	602a      	str	r2, [r5, #0]
 800f454:	681d      	ldr	r5, [r3, #0]
 800f456:	6862      	ldr	r2, [r4, #4]
 800f458:	2100      	movs	r1, #0
 800f45a:	4628      	mov	r0, r5
 800f45c:	f7f0 fef0 	bl	8000240 <memchr>
 800f460:	b108      	cbz	r0, 800f466 <_printf_i+0x1f2>
 800f462:	1b40      	subs	r0, r0, r5
 800f464:	6060      	str	r0, [r4, #4]
 800f466:	6863      	ldr	r3, [r4, #4]
 800f468:	6123      	str	r3, [r4, #16]
 800f46a:	2300      	movs	r3, #0
 800f46c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f470:	e7a8      	b.n	800f3c4 <_printf_i+0x150>
 800f472:	6923      	ldr	r3, [r4, #16]
 800f474:	462a      	mov	r2, r5
 800f476:	4649      	mov	r1, r9
 800f478:	4640      	mov	r0, r8
 800f47a:	47d0      	blx	sl
 800f47c:	3001      	adds	r0, #1
 800f47e:	d0ab      	beq.n	800f3d8 <_printf_i+0x164>
 800f480:	6823      	ldr	r3, [r4, #0]
 800f482:	079b      	lsls	r3, r3, #30
 800f484:	d413      	bmi.n	800f4ae <_printf_i+0x23a>
 800f486:	68e0      	ldr	r0, [r4, #12]
 800f488:	9b03      	ldr	r3, [sp, #12]
 800f48a:	4298      	cmp	r0, r3
 800f48c:	bfb8      	it	lt
 800f48e:	4618      	movlt	r0, r3
 800f490:	e7a4      	b.n	800f3dc <_printf_i+0x168>
 800f492:	2301      	movs	r3, #1
 800f494:	4632      	mov	r2, r6
 800f496:	4649      	mov	r1, r9
 800f498:	4640      	mov	r0, r8
 800f49a:	47d0      	blx	sl
 800f49c:	3001      	adds	r0, #1
 800f49e:	d09b      	beq.n	800f3d8 <_printf_i+0x164>
 800f4a0:	3501      	adds	r5, #1
 800f4a2:	68e3      	ldr	r3, [r4, #12]
 800f4a4:	9903      	ldr	r1, [sp, #12]
 800f4a6:	1a5b      	subs	r3, r3, r1
 800f4a8:	42ab      	cmp	r3, r5
 800f4aa:	dcf2      	bgt.n	800f492 <_printf_i+0x21e>
 800f4ac:	e7eb      	b.n	800f486 <_printf_i+0x212>
 800f4ae:	2500      	movs	r5, #0
 800f4b0:	f104 0619 	add.w	r6, r4, #25
 800f4b4:	e7f5      	b.n	800f4a2 <_printf_i+0x22e>
 800f4b6:	bf00      	nop
 800f4b8:	0816e099 	.word	0x0816e099
 800f4bc:	0816e0aa 	.word	0x0816e0aa

0800f4c0 <__retarget_lock_acquire_recursive>:
 800f4c0:	4770      	bx	lr

0800f4c2 <__retarget_lock_release_recursive>:
 800f4c2:	4770      	bx	lr

0800f4c4 <memmove>:
 800f4c4:	4288      	cmp	r0, r1
 800f4c6:	b510      	push	{r4, lr}
 800f4c8:	eb01 0402 	add.w	r4, r1, r2
 800f4cc:	d902      	bls.n	800f4d4 <memmove+0x10>
 800f4ce:	4284      	cmp	r4, r0
 800f4d0:	4623      	mov	r3, r4
 800f4d2:	d807      	bhi.n	800f4e4 <memmove+0x20>
 800f4d4:	1e43      	subs	r3, r0, #1
 800f4d6:	42a1      	cmp	r1, r4
 800f4d8:	d008      	beq.n	800f4ec <memmove+0x28>
 800f4da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4de:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f4e2:	e7f8      	b.n	800f4d6 <memmove+0x12>
 800f4e4:	4402      	add	r2, r0
 800f4e6:	4601      	mov	r1, r0
 800f4e8:	428a      	cmp	r2, r1
 800f4ea:	d100      	bne.n	800f4ee <memmove+0x2a>
 800f4ec:	bd10      	pop	{r4, pc}
 800f4ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f4f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f4f6:	e7f7      	b.n	800f4e8 <memmove+0x24>

0800f4f8 <_malloc_usable_size_r>:
 800f4f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4fc:	1f18      	subs	r0, r3, #4
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	bfbc      	itt	lt
 800f502:	580b      	ldrlt	r3, [r1, r0]
 800f504:	18c0      	addlt	r0, r0, r3
 800f506:	4770      	bx	lr

0800f508 <with_errnof>:
 800f508:	b513      	push	{r0, r1, r4, lr}
 800f50a:	4604      	mov	r4, r0
 800f50c:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f510:	f7ff fb5c 	bl	800ebcc <__errno>
 800f514:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f518:	6004      	str	r4, [r0, #0]
 800f51a:	b002      	add	sp, #8
 800f51c:	bd10      	pop	{r4, pc}

0800f51e <xflowf>:
 800f51e:	b130      	cbz	r0, 800f52e <xflowf+0x10>
 800f520:	eef1 7a40 	vneg.f32	s15, s0
 800f524:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f528:	2022      	movs	r0, #34	; 0x22
 800f52a:	f7ff bfed 	b.w	800f508 <with_errnof>
 800f52e:	eef0 7a40 	vmov.f32	s15, s0
 800f532:	e7f7      	b.n	800f524 <xflowf+0x6>

0800f534 <__math_uflowf>:
 800f534:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f53c <__math_uflowf+0x8>
 800f538:	f7ff bff1 	b.w	800f51e <xflowf>
 800f53c:	10000000 	.word	0x10000000

0800f540 <__math_may_uflowf>:
 800f540:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f548 <__math_may_uflowf+0x8>
 800f544:	f7ff bfeb 	b.w	800f51e <xflowf>
 800f548:	1a200000 	.word	0x1a200000

0800f54c <__math_oflowf>:
 800f54c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f554 <__math_oflowf+0x8>
 800f550:	f7ff bfe5 	b.w	800f51e <xflowf>
 800f554:	70000000 	.word	0x70000000

0800f558 <expf>:
 800f558:	ee10 2a10 	vmov	r2, s0
 800f55c:	f240 412a 	movw	r1, #1066	; 0x42a
 800f560:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800f564:	428b      	cmp	r3, r1
 800f566:	b430      	push	{r4, r5}
 800f568:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f56c:	d92a      	bls.n	800f5c4 <expf+0x6c>
 800f56e:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800f572:	d058      	beq.n	800f626 <expf+0xce>
 800f574:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f578:	d303      	bcc.n	800f582 <expf+0x2a>
 800f57a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f57e:	bc30      	pop	{r4, r5}
 800f580:	4770      	bx	lr
 800f582:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800f62c <expf+0xd4>
 800f586:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58e:	dd03      	ble.n	800f598 <expf+0x40>
 800f590:	bc30      	pop	{r4, r5}
 800f592:	2000      	movs	r0, #0
 800f594:	f7ff bfda 	b.w	800f54c <__math_oflowf>
 800f598:	eddf 7a25 	vldr	s15, [pc, #148]	; 800f630 <expf+0xd8>
 800f59c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a4:	d503      	bpl.n	800f5ae <expf+0x56>
 800f5a6:	bc30      	pop	{r4, r5}
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	f7ff bfc3 	b.w	800f534 <__math_uflowf>
 800f5ae:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f634 <expf+0xdc>
 800f5b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800f5b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ba:	d503      	bpl.n	800f5c4 <expf+0x6c>
 800f5bc:	bc30      	pop	{r4, r5}
 800f5be:	2000      	movs	r0, #0
 800f5c0:	f7ff bfbe 	b.w	800f540 <__math_may_uflowf>
 800f5c4:	4b1c      	ldr	r3, [pc, #112]	; (800f638 <expf+0xe0>)
 800f5c6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f5ca:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800f5ce:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800f5d2:	eeb0 7b44 	vmov.f64	d7, d4
 800f5d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f5da:	ee17 0a10 	vmov	r0, s14
 800f5de:	ee37 7b44 	vsub.f64	d7, d7, d4
 800f5e2:	f000 021f 	and.w	r2, r0, #31
 800f5e6:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800f5ea:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800f5ee:	ee27 4b07 	vmul.f64	d4, d7, d7
 800f5f2:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800f5f6:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800f5fa:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f5fe:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800f602:	684d      	ldr	r5, [r1, #4]
 800f604:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800f608:	2100      	movs	r1, #0
 800f60a:	190a      	adds	r2, r1, r4
 800f60c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800f610:	eea5 0b07 	vfma.f64	d0, d5, d7
 800f614:	ec43 2b17 	vmov	d7, r2, r3
 800f618:	eea6 0b04 	vfma.f64	d0, d6, d4
 800f61c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800f620:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f624:	e7ab      	b.n	800f57e <expf+0x26>
 800f626:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800f63c <expf+0xe4>
 800f62a:	e7a8      	b.n	800f57e <expf+0x26>
 800f62c:	42b17217 	.word	0x42b17217
 800f630:	c2cff1b4 	.word	0xc2cff1b4
 800f634:	c2ce8ecf 	.word	0xc2ce8ecf
 800f638:	0816e0c0 	.word	0x0816e0c0
 800f63c:	00000000 	.word	0x00000000

0800f640 <_init>:
 800f640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f642:	bf00      	nop
 800f644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f646:	bc08      	pop	{r3}
 800f648:	469e      	mov	lr, r3
 800f64a:	4770      	bx	lr

0800f64c <_fini>:
 800f64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f64e:	bf00      	nop
 800f650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f652:	bc08      	pop	{r3}
 800f654:	469e      	mov	lr, r3
 800f656:	4770      	bx	lr
