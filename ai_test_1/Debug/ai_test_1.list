
ai_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9e4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00060128  0800fc00  0800fc00  0001fc00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806fd28  0806fd28  00081494  2**0
                  CONTENTS
  4 .ARM          00000008  0806fd28  0806fd28  0007fd28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806fd30  0806fd30  00081494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806fd30  0806fd30  0007fd30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806fd34  0806fd34  0007fd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001494  20000000  0806fd38  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007aac  200014a0  080711cc  000814a0  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20008f4c  080711cc  00088f4c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00081494  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b53e  00000000  00000000  000814c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008380  00000000  00000000  000bca00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001f8c3  00000000  00000000  000c4d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c10  00000000  00000000  000e4648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002ff8  00000000  00000000  000e6258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039f1b  00000000  00000000  000e9250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035352  00000000  00000000  0012316b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00144065  00000000  00000000  001584bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0029c522  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006450  00000000  00000000  0029c574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000b4  00000000  00000000  002a29c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000183  00000000  00000000  002a2a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200014a0 	.word	0x200014a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800fbcc 	.word	0x0800fbcc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200014a4 	.word	0x200014a4
 800023c:	0800fbcc 	.word	0x0800fbcc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_frsub>:
 80002f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__addsf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_fsub>:
 80002f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002fc <__addsf3>:
 80002fc:	0042      	lsls	r2, r0, #1
 80002fe:	bf1f      	itttt	ne
 8000300:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000304:	ea92 0f03 	teqne	r2, r3
 8000308:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800030c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000310:	d06a      	beq.n	80003e8 <__addsf3+0xec>
 8000312:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000316:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800031a:	bfc1      	itttt	gt
 800031c:	18d2      	addgt	r2, r2, r3
 800031e:	4041      	eorgt	r1, r0
 8000320:	4048      	eorgt	r0, r1
 8000322:	4041      	eorgt	r1, r0
 8000324:	bfb8      	it	lt
 8000326:	425b      	neglt	r3, r3
 8000328:	2b19      	cmp	r3, #25
 800032a:	bf88      	it	hi
 800032c:	4770      	bxhi	lr
 800032e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000332:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000336:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4240      	negne	r0, r0
 800033e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000342:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000346:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800034a:	bf18      	it	ne
 800034c:	4249      	negne	r1, r1
 800034e:	ea92 0f03 	teq	r2, r3
 8000352:	d03f      	beq.n	80003d4 <__addsf3+0xd8>
 8000354:	f1a2 0201 	sub.w	r2, r2, #1
 8000358:	fa41 fc03 	asr.w	ip, r1, r3
 800035c:	eb10 000c 	adds.w	r0, r0, ip
 8000360:	f1c3 0320 	rsb	r3, r3, #32
 8000364:	fa01 f103 	lsl.w	r1, r1, r3
 8000368:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800036c:	d502      	bpl.n	8000374 <__addsf3+0x78>
 800036e:	4249      	negs	r1, r1
 8000370:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000374:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000378:	d313      	bcc.n	80003a2 <__addsf3+0xa6>
 800037a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800037e:	d306      	bcc.n	800038e <__addsf3+0x92>
 8000380:	0840      	lsrs	r0, r0, #1
 8000382:	ea4f 0131 	mov.w	r1, r1, rrx
 8000386:	f102 0201 	add.w	r2, r2, #1
 800038a:	2afe      	cmp	r2, #254	; 0xfe
 800038c:	d251      	bcs.n	8000432 <__addsf3+0x136>
 800038e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000392:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000396:	bf08      	it	eq
 8000398:	f020 0001 	biceq.w	r0, r0, #1
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	4770      	bx	lr
 80003a2:	0049      	lsls	r1, r1, #1
 80003a4:	eb40 0000 	adc.w	r0, r0, r0
 80003a8:	3a01      	subs	r2, #1
 80003aa:	bf28      	it	cs
 80003ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003b0:	d2ed      	bcs.n	800038e <__addsf3+0x92>
 80003b2:	fab0 fc80 	clz	ip, r0
 80003b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003ba:	ebb2 020c 	subs.w	r2, r2, ip
 80003be:	fa00 f00c 	lsl.w	r0, r0, ip
 80003c2:	bfaa      	itet	ge
 80003c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003c8:	4252      	neglt	r2, r2
 80003ca:	4318      	orrge	r0, r3
 80003cc:	bfbc      	itt	lt
 80003ce:	40d0      	lsrlt	r0, r2
 80003d0:	4318      	orrlt	r0, r3
 80003d2:	4770      	bx	lr
 80003d4:	f092 0f00 	teq	r2, #0
 80003d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003dc:	bf06      	itte	eq
 80003de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003e2:	3201      	addeq	r2, #1
 80003e4:	3b01      	subne	r3, #1
 80003e6:	e7b5      	b.n	8000354 <__addsf3+0x58>
 80003e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003f0:	bf18      	it	ne
 80003f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003f6:	d021      	beq.n	800043c <__addsf3+0x140>
 80003f8:	ea92 0f03 	teq	r2, r3
 80003fc:	d004      	beq.n	8000408 <__addsf3+0x10c>
 80003fe:	f092 0f00 	teq	r2, #0
 8000402:	bf08      	it	eq
 8000404:	4608      	moveq	r0, r1
 8000406:	4770      	bx	lr
 8000408:	ea90 0f01 	teq	r0, r1
 800040c:	bf1c      	itt	ne
 800040e:	2000      	movne	r0, #0
 8000410:	4770      	bxne	lr
 8000412:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000416:	d104      	bne.n	8000422 <__addsf3+0x126>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	bf28      	it	cs
 800041c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000420:	4770      	bx	lr
 8000422:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000426:	bf3c      	itt	cc
 8000428:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800042c:	4770      	bxcc	lr
 800042e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000432:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000436:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800043a:	4770      	bx	lr
 800043c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000440:	bf16      	itet	ne
 8000442:	4608      	movne	r0, r1
 8000444:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000448:	4601      	movne	r1, r0
 800044a:	0242      	lsls	r2, r0, #9
 800044c:	bf06      	itte	eq
 800044e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000452:	ea90 0f01 	teqeq	r0, r1
 8000456:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800045a:	4770      	bx	lr

0800045c <__aeabi_ui2f>:
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e004      	b.n	800046c <__aeabi_i2f+0x8>
 8000462:	bf00      	nop

08000464 <__aeabi_i2f>:
 8000464:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000468:	bf48      	it	mi
 800046a:	4240      	negmi	r0, r0
 800046c:	ea5f 0c00 	movs.w	ip, r0
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000478:	4601      	mov	r1, r0
 800047a:	f04f 0000 	mov.w	r0, #0
 800047e:	e01c      	b.n	80004ba <__aeabi_l2f+0x2a>

08000480 <__aeabi_ul2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f04f 0300 	mov.w	r3, #0
 800048c:	e00a      	b.n	80004a4 <__aeabi_l2f+0x14>
 800048e:	bf00      	nop

08000490 <__aeabi_l2f>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800049c:	d502      	bpl.n	80004a4 <__aeabi_l2f+0x14>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	ea5f 0c01 	movs.w	ip, r1
 80004a8:	bf02      	ittt	eq
 80004aa:	4684      	moveq	ip, r0
 80004ac:	4601      	moveq	r1, r0
 80004ae:	2000      	moveq	r0, #0
 80004b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004b4:	bf08      	it	eq
 80004b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004be:	fabc f28c 	clz	r2, ip
 80004c2:	3a08      	subs	r2, #8
 80004c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004c8:	db10      	blt.n	80004ec <__aeabi_l2f+0x5c>
 80004ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80004ce:	4463      	add	r3, ip
 80004d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004d4:	f1c2 0220 	rsb	r2, r2, #32
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	fa20 f202 	lsr.w	r2, r0, r2
 80004e0:	eb43 0002 	adc.w	r0, r3, r2
 80004e4:	bf08      	it	eq
 80004e6:	f020 0001 	biceq.w	r0, r0, #1
 80004ea:	4770      	bx	lr
 80004ec:	f102 0220 	add.w	r2, r2, #32
 80004f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004f4:	f1c2 0220 	rsb	r2, r2, #32
 80004f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000500:	eb43 0002 	adc.w	r0, r3, r2
 8000504:	bf08      	it	eq
 8000506:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800050a:	4770      	bx	lr

0800050c <__aeabi_uldivmod>:
 800050c:	b953      	cbnz	r3, 8000524 <__aeabi_uldivmod+0x18>
 800050e:	b94a      	cbnz	r2, 8000524 <__aeabi_uldivmod+0x18>
 8000510:	2900      	cmp	r1, #0
 8000512:	bf08      	it	eq
 8000514:	2800      	cmpeq	r0, #0
 8000516:	bf1c      	itt	ne
 8000518:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800051c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000520:	f000 b996 	b.w	8000850 <__aeabi_idiv0>
 8000524:	f1ad 0c08 	sub.w	ip, sp, #8
 8000528:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800052c:	f000 f828 	bl	8000580 <__udivmoddi4>
 8000530:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000538:	b004      	add	sp, #16
 800053a:	4770      	bx	lr
 800053c:	0000      	movs	r0, r0
	...

08000540 <__aeabi_d2ulz>:
 8000540:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000570 <__aeabi_d2ulz+0x30>
 8000544:	ec41 0b17 	vmov	d7, r0, r1
 8000548:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000578 <__aeabi_d2ulz+0x38>
 800054c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000550:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000554:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000558:	eea4 7b45 	vfms.f64	d7, d4, d5
 800055c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000560:	ee16 1a10 	vmov	r1, s12
 8000564:	ee17 0a90 	vmov	r0, s15
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	f3af 8000 	nop.w
 8000570:	00000000 	.word	0x00000000
 8000574:	3df00000 	.word	0x3df00000
 8000578:	00000000 	.word	0x00000000
 800057c:	41f00000 	.word	0x41f00000

08000580 <__udivmoddi4>:
 8000580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000584:	9d08      	ldr	r5, [sp, #32]
 8000586:	4604      	mov	r4, r0
 8000588:	468e      	mov	lr, r1
 800058a:	2b00      	cmp	r3, #0
 800058c:	d14d      	bne.n	800062a <__udivmoddi4+0xaa>
 800058e:	428a      	cmp	r2, r1
 8000590:	4694      	mov	ip, r2
 8000592:	d969      	bls.n	8000668 <__udivmoddi4+0xe8>
 8000594:	fab2 f282 	clz	r2, r2
 8000598:	b152      	cbz	r2, 80005b0 <__udivmoddi4+0x30>
 800059a:	fa01 f302 	lsl.w	r3, r1, r2
 800059e:	f1c2 0120 	rsb	r1, r2, #32
 80005a2:	fa20 f101 	lsr.w	r1, r0, r1
 80005a6:	fa0c fc02 	lsl.w	ip, ip, r2
 80005aa:	ea41 0e03 	orr.w	lr, r1, r3
 80005ae:	4094      	lsls	r4, r2
 80005b0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005b4:	0c21      	lsrs	r1, r4, #16
 80005b6:	fbbe f6f8 	udiv	r6, lr, r8
 80005ba:	fa1f f78c 	uxth.w	r7, ip
 80005be:	fb08 e316 	mls	r3, r8, r6, lr
 80005c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80005c6:	fb06 f107 	mul.w	r1, r6, r7
 80005ca:	4299      	cmp	r1, r3
 80005cc:	d90a      	bls.n	80005e4 <__udivmoddi4+0x64>
 80005ce:	eb1c 0303 	adds.w	r3, ip, r3
 80005d2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80005d6:	f080 811f 	bcs.w	8000818 <__udivmoddi4+0x298>
 80005da:	4299      	cmp	r1, r3
 80005dc:	f240 811c 	bls.w	8000818 <__udivmoddi4+0x298>
 80005e0:	3e02      	subs	r6, #2
 80005e2:	4463      	add	r3, ip
 80005e4:	1a5b      	subs	r3, r3, r1
 80005e6:	b2a4      	uxth	r4, r4
 80005e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80005ec:	fb08 3310 	mls	r3, r8, r0, r3
 80005f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005f4:	fb00 f707 	mul.w	r7, r0, r7
 80005f8:	42a7      	cmp	r7, r4
 80005fa:	d90a      	bls.n	8000612 <__udivmoddi4+0x92>
 80005fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000600:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000604:	f080 810a 	bcs.w	800081c <__udivmoddi4+0x29c>
 8000608:	42a7      	cmp	r7, r4
 800060a:	f240 8107 	bls.w	800081c <__udivmoddi4+0x29c>
 800060e:	4464      	add	r4, ip
 8000610:	3802      	subs	r0, #2
 8000612:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000616:	1be4      	subs	r4, r4, r7
 8000618:	2600      	movs	r6, #0
 800061a:	b11d      	cbz	r5, 8000624 <__udivmoddi4+0xa4>
 800061c:	40d4      	lsrs	r4, r2
 800061e:	2300      	movs	r3, #0
 8000620:	e9c5 4300 	strd	r4, r3, [r5]
 8000624:	4631      	mov	r1, r6
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	428b      	cmp	r3, r1
 800062c:	d909      	bls.n	8000642 <__udivmoddi4+0xc2>
 800062e:	2d00      	cmp	r5, #0
 8000630:	f000 80ef 	beq.w	8000812 <__udivmoddi4+0x292>
 8000634:	2600      	movs	r6, #0
 8000636:	e9c5 0100 	strd	r0, r1, [r5]
 800063a:	4630      	mov	r0, r6
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	fab3 f683 	clz	r6, r3
 8000646:	2e00      	cmp	r6, #0
 8000648:	d14a      	bne.n	80006e0 <__udivmoddi4+0x160>
 800064a:	428b      	cmp	r3, r1
 800064c:	d302      	bcc.n	8000654 <__udivmoddi4+0xd4>
 800064e:	4282      	cmp	r2, r0
 8000650:	f200 80f9 	bhi.w	8000846 <__udivmoddi4+0x2c6>
 8000654:	1a84      	subs	r4, r0, r2
 8000656:	eb61 0303 	sbc.w	r3, r1, r3
 800065a:	2001      	movs	r0, #1
 800065c:	469e      	mov	lr, r3
 800065e:	2d00      	cmp	r5, #0
 8000660:	d0e0      	beq.n	8000624 <__udivmoddi4+0xa4>
 8000662:	e9c5 4e00 	strd	r4, lr, [r5]
 8000666:	e7dd      	b.n	8000624 <__udivmoddi4+0xa4>
 8000668:	b902      	cbnz	r2, 800066c <__udivmoddi4+0xec>
 800066a:	deff      	udf	#255	; 0xff
 800066c:	fab2 f282 	clz	r2, r2
 8000670:	2a00      	cmp	r2, #0
 8000672:	f040 8092 	bne.w	800079a <__udivmoddi4+0x21a>
 8000676:	eba1 010c 	sub.w	r1, r1, ip
 800067a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800067e:	fa1f fe8c 	uxth.w	lr, ip
 8000682:	2601      	movs	r6, #1
 8000684:	0c20      	lsrs	r0, r4, #16
 8000686:	fbb1 f3f7 	udiv	r3, r1, r7
 800068a:	fb07 1113 	mls	r1, r7, r3, r1
 800068e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000692:	fb0e f003 	mul.w	r0, lr, r3
 8000696:	4288      	cmp	r0, r1
 8000698:	d908      	bls.n	80006ac <__udivmoddi4+0x12c>
 800069a:	eb1c 0101 	adds.w	r1, ip, r1
 800069e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80006a2:	d202      	bcs.n	80006aa <__udivmoddi4+0x12a>
 80006a4:	4288      	cmp	r0, r1
 80006a6:	f200 80cb 	bhi.w	8000840 <__udivmoddi4+0x2c0>
 80006aa:	4643      	mov	r3, r8
 80006ac:	1a09      	subs	r1, r1, r0
 80006ae:	b2a4      	uxth	r4, r4
 80006b0:	fbb1 f0f7 	udiv	r0, r1, r7
 80006b4:	fb07 1110 	mls	r1, r7, r0, r1
 80006b8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80006bc:	fb0e fe00 	mul.w	lr, lr, r0
 80006c0:	45a6      	cmp	lr, r4
 80006c2:	d908      	bls.n	80006d6 <__udivmoddi4+0x156>
 80006c4:	eb1c 0404 	adds.w	r4, ip, r4
 80006c8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80006cc:	d202      	bcs.n	80006d4 <__udivmoddi4+0x154>
 80006ce:	45a6      	cmp	lr, r4
 80006d0:	f200 80bb 	bhi.w	800084a <__udivmoddi4+0x2ca>
 80006d4:	4608      	mov	r0, r1
 80006d6:	eba4 040e 	sub.w	r4, r4, lr
 80006da:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80006de:	e79c      	b.n	800061a <__udivmoddi4+0x9a>
 80006e0:	f1c6 0720 	rsb	r7, r6, #32
 80006e4:	40b3      	lsls	r3, r6
 80006e6:	fa22 fc07 	lsr.w	ip, r2, r7
 80006ea:	ea4c 0c03 	orr.w	ip, ip, r3
 80006ee:	fa20 f407 	lsr.w	r4, r0, r7
 80006f2:	fa01 f306 	lsl.w	r3, r1, r6
 80006f6:	431c      	orrs	r4, r3
 80006f8:	40f9      	lsrs	r1, r7
 80006fa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006fe:	fa00 f306 	lsl.w	r3, r0, r6
 8000702:	fbb1 f8f9 	udiv	r8, r1, r9
 8000706:	0c20      	lsrs	r0, r4, #16
 8000708:	fa1f fe8c 	uxth.w	lr, ip
 800070c:	fb09 1118 	mls	r1, r9, r8, r1
 8000710:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000714:	fb08 f00e 	mul.w	r0, r8, lr
 8000718:	4288      	cmp	r0, r1
 800071a:	fa02 f206 	lsl.w	r2, r2, r6
 800071e:	d90b      	bls.n	8000738 <__udivmoddi4+0x1b8>
 8000720:	eb1c 0101 	adds.w	r1, ip, r1
 8000724:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000728:	f080 8088 	bcs.w	800083c <__udivmoddi4+0x2bc>
 800072c:	4288      	cmp	r0, r1
 800072e:	f240 8085 	bls.w	800083c <__udivmoddi4+0x2bc>
 8000732:	f1a8 0802 	sub.w	r8, r8, #2
 8000736:	4461      	add	r1, ip
 8000738:	1a09      	subs	r1, r1, r0
 800073a:	b2a4      	uxth	r4, r4
 800073c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000740:	fb09 1110 	mls	r1, r9, r0, r1
 8000744:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000748:	fb00 fe0e 	mul.w	lr, r0, lr
 800074c:	458e      	cmp	lr, r1
 800074e:	d908      	bls.n	8000762 <__udivmoddi4+0x1e2>
 8000750:	eb1c 0101 	adds.w	r1, ip, r1
 8000754:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000758:	d26c      	bcs.n	8000834 <__udivmoddi4+0x2b4>
 800075a:	458e      	cmp	lr, r1
 800075c:	d96a      	bls.n	8000834 <__udivmoddi4+0x2b4>
 800075e:	3802      	subs	r0, #2
 8000760:	4461      	add	r1, ip
 8000762:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000766:	fba0 9402 	umull	r9, r4, r0, r2
 800076a:	eba1 010e 	sub.w	r1, r1, lr
 800076e:	42a1      	cmp	r1, r4
 8000770:	46c8      	mov	r8, r9
 8000772:	46a6      	mov	lr, r4
 8000774:	d356      	bcc.n	8000824 <__udivmoddi4+0x2a4>
 8000776:	d053      	beq.n	8000820 <__udivmoddi4+0x2a0>
 8000778:	b15d      	cbz	r5, 8000792 <__udivmoddi4+0x212>
 800077a:	ebb3 0208 	subs.w	r2, r3, r8
 800077e:	eb61 010e 	sbc.w	r1, r1, lr
 8000782:	fa01 f707 	lsl.w	r7, r1, r7
 8000786:	fa22 f306 	lsr.w	r3, r2, r6
 800078a:	40f1      	lsrs	r1, r6
 800078c:	431f      	orrs	r7, r3
 800078e:	e9c5 7100 	strd	r7, r1, [r5]
 8000792:	2600      	movs	r6, #0
 8000794:	4631      	mov	r1, r6
 8000796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800079a:	f1c2 0320 	rsb	r3, r2, #32
 800079e:	40d8      	lsrs	r0, r3
 80007a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80007a4:	fa21 f303 	lsr.w	r3, r1, r3
 80007a8:	4091      	lsls	r1, r2
 80007aa:	4301      	orrs	r1, r0
 80007ac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007b0:	fa1f fe8c 	uxth.w	lr, ip
 80007b4:	fbb3 f0f7 	udiv	r0, r3, r7
 80007b8:	fb07 3610 	mls	r6, r7, r0, r3
 80007bc:	0c0b      	lsrs	r3, r1, #16
 80007be:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80007c2:	fb00 f60e 	mul.w	r6, r0, lr
 80007c6:	429e      	cmp	r6, r3
 80007c8:	fa04 f402 	lsl.w	r4, r4, r2
 80007cc:	d908      	bls.n	80007e0 <__udivmoddi4+0x260>
 80007ce:	eb1c 0303 	adds.w	r3, ip, r3
 80007d2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80007d6:	d22f      	bcs.n	8000838 <__udivmoddi4+0x2b8>
 80007d8:	429e      	cmp	r6, r3
 80007da:	d92d      	bls.n	8000838 <__udivmoddi4+0x2b8>
 80007dc:	3802      	subs	r0, #2
 80007de:	4463      	add	r3, ip
 80007e0:	1b9b      	subs	r3, r3, r6
 80007e2:	b289      	uxth	r1, r1
 80007e4:	fbb3 f6f7 	udiv	r6, r3, r7
 80007e8:	fb07 3316 	mls	r3, r7, r6, r3
 80007ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007f0:	fb06 f30e 	mul.w	r3, r6, lr
 80007f4:	428b      	cmp	r3, r1
 80007f6:	d908      	bls.n	800080a <__udivmoddi4+0x28a>
 80007f8:	eb1c 0101 	adds.w	r1, ip, r1
 80007fc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000800:	d216      	bcs.n	8000830 <__udivmoddi4+0x2b0>
 8000802:	428b      	cmp	r3, r1
 8000804:	d914      	bls.n	8000830 <__udivmoddi4+0x2b0>
 8000806:	3e02      	subs	r6, #2
 8000808:	4461      	add	r1, ip
 800080a:	1ac9      	subs	r1, r1, r3
 800080c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000810:	e738      	b.n	8000684 <__udivmoddi4+0x104>
 8000812:	462e      	mov	r6, r5
 8000814:	4628      	mov	r0, r5
 8000816:	e705      	b.n	8000624 <__udivmoddi4+0xa4>
 8000818:	4606      	mov	r6, r0
 800081a:	e6e3      	b.n	80005e4 <__udivmoddi4+0x64>
 800081c:	4618      	mov	r0, r3
 800081e:	e6f8      	b.n	8000612 <__udivmoddi4+0x92>
 8000820:	454b      	cmp	r3, r9
 8000822:	d2a9      	bcs.n	8000778 <__udivmoddi4+0x1f8>
 8000824:	ebb9 0802 	subs.w	r8, r9, r2
 8000828:	eb64 0e0c 	sbc.w	lr, r4, ip
 800082c:	3801      	subs	r0, #1
 800082e:	e7a3      	b.n	8000778 <__udivmoddi4+0x1f8>
 8000830:	4646      	mov	r6, r8
 8000832:	e7ea      	b.n	800080a <__udivmoddi4+0x28a>
 8000834:	4620      	mov	r0, r4
 8000836:	e794      	b.n	8000762 <__udivmoddi4+0x1e2>
 8000838:	4640      	mov	r0, r8
 800083a:	e7d1      	b.n	80007e0 <__udivmoddi4+0x260>
 800083c:	46d0      	mov	r8, sl
 800083e:	e77b      	b.n	8000738 <__udivmoddi4+0x1b8>
 8000840:	3b02      	subs	r3, #2
 8000842:	4461      	add	r1, ip
 8000844:	e732      	b.n	80006ac <__udivmoddi4+0x12c>
 8000846:	4630      	mov	r0, r6
 8000848:	e709      	b.n	800065e <__udivmoddi4+0xde>
 800084a:	4464      	add	r4, ip
 800084c:	3802      	subs	r0, #2
 800084e:	e742      	b.n	80006d6 <__udivmoddi4+0x156>

08000850 <__aeabi_idiv0>:
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b510      	push	{r4, lr}
 8000856:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000858:	2234      	movs	r2, #52	; 0x34
 800085a:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085c:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	a807      	add	r0, sp, #28
 8000860:	f00c fc68 	bl	800d134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000864:	2214      	movs	r2, #20
 8000866:	2100      	movs	r1, #0
 8000868:	a802      	add	r0, sp, #8
 800086a:	f00c fc63 	bl	800d134 <memset>
  HAL_PWR_EnableBkUpAccess();
 800086e:	f002 fa83 	bl	8002d78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b22      	ldr	r3, [pc, #136]	; (80008fc <SystemClock_Config+0xa8>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000876:	2019      	movs	r0, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800087a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800087e:	641a      	str	r2, [r3, #64]	; 0x40
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <SystemClock_Config+0xac>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000896:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a4:	e9cd 1307 	strd	r1, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ac:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;
 80008b0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80008b4:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008b8:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008bc:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f002 fb16 	bl	8002ef0 <HAL_RCC_OscConfig>
 80008c4:	b108      	cbz	r0, 80008ca <SystemClock_Config+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <SystemClock_Config+0x74>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008ca:	f002 fa5d 	bl	8002d88 <HAL_PWREx_EnableOverDrive>
 80008ce:	b108      	cbz	r0, 80008d4 <SystemClock_Config+0x80>
 80008d0:	b672      	cpsid	i
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <SystemClock_Config+0x7e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d6:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008dc:	2107      	movs	r1, #7
 80008de:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008ec:	f002 fcf4 	bl	80032d8 <HAL_RCC_ClockConfig>
 80008f0:	b108      	cbz	r0, 80008f6 <SystemClock_Config+0xa2>
 80008f2:	b672      	cpsid	i
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <SystemClock_Config+0xa0>
}
 80008f6:	b014      	add	sp, #80	; 0x50
 80008f8:	bd10      	pop	{r4, pc}
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <PeriphCommonClock_Config>:
{
 8000904:	b500      	push	{lr}
 8000906:	b0a5      	sub	sp, #148	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000908:	228c      	movs	r2, #140	; 0x8c
 800090a:	2100      	movs	r1, #0
 800090c:	a801      	add	r0, sp, #4
 800090e:	f00c fc11 	bl	800d134 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000912:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8000916:	2002      	movs	r0, #2
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_SAI2
 8000918:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800091a:	23c0      	movs	r3, #192	; 0xc0
 800091c:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800091e:	2303      	movs	r3, #3
 8000920:	e9cd 3006 	strd	r3, r0, [sp, #24]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000924:	2301      	movs	r3, #1
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000926:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000928:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800092a:	f002 fd9b 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 800092e:	b108      	cbz	r0, 8000934 <PeriphCommonClock_Config+0x30>
 8000930:	b672      	cpsid	i
  while (1)
 8000932:	e7fe      	b.n	8000932 <PeriphCommonClock_Config+0x2e>
}
 8000934:	b025      	add	sp, #148	; 0x94
 8000936:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800093c <main>:
{
 800093c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8000940:	b0ad      	sub	sp, #180	; 0xb4
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000942:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000946:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800094a:	4ac5      	ldr	r2, [pc, #788]	; (8000c60 <main+0x324>)
 800094c:	2100      	movs	r1, #0
 800094e:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000952:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000956:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800095a:	6953      	ldr	r3, [r2, #20]
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000962:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000966:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800096a:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800096e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000972:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000976:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800097a:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800097e:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000982:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000984:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000988:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800098a:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800098e:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000990:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000994:	d2f9      	bcs.n	800098a <main+0x4e>
    } while(sets-- != 0U);
 8000996:	3b20      	subs	r3, #32
 8000998:	f113 0f20 	cmn.w	r3, #32
 800099c:	d1f2      	bne.n	8000984 <main+0x48>
 800099e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009a2:	6953      	ldr	r3, [r2, #20]
 80009a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80009ae:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80009b2:	f000 ffc1 	bl	8001938 <HAL_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2400      	movs	r4, #0
  SystemClock_Config();
 80009b8:	f7ff ff4c 	bl	8000854 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2502      	movs	r5, #2
  PeriphCommonClock_Config();
 80009be:	f7ff ffa1 	bl	8000904 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c2:	2214      	movs	r2, #20
 80009c4:	2100      	movs	r1, #0
 80009c6:	a81f      	add	r0, sp, #124	; 0x7c
 80009c8:	f00c fbb4 	bl	800d134 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009cc:	4ba5      	ldr	r3, [pc, #660]	; (8000c64 <main+0x328>)
  HAL_GPIO_WritePin(GPIOJ, MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 80009ce:	f243 010b 	movw	r1, #12299	; 0x300b
 80009d2:	48a5      	ldr	r0, [pc, #660]	; (8000c68 <main+0x32c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d6:	2603      	movs	r6, #3
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d8:	f04f 080b 	mov.w	r8, #11
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	f04f 0904 	mov.w	r9, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009e0:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009e4:	f44f 7a40 	mov.w	sl, #768	; 0x300
  GPIO_InitStruct.Pin = SD2_D3_Pin|SD2_D2_Pin;
 80009e8:	f04f 0b18 	mov.w	fp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ec:	2701      	movs	r7, #1
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ee:	631a      	str	r2, [r3, #48]	; 0x30
 80009f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f2:	f002 0210 	and.w	r2, r2, #16
 80009f6:	9202      	str	r2, [sp, #8]
 80009f8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a00:	631a      	str	r2, [r3, #48]	; 0x30
 8000a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a04:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000a08:	9203      	str	r2, [sp, #12]
 8000a0a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a0e:	f042 0202 	orr.w	r2, r2, #2
 8000a12:	631a      	str	r2, [r3, #48]	; 0x30
 8000a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a16:	f002 0202 	and.w	r2, r2, #2
 8000a1a:	9204      	str	r2, [sp, #16]
 8000a1c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a20:	f042 0208 	orr.w	r2, r2, #8
 8000a24:	631a      	str	r2, [r3, #48]	; 0x30
 8000a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a28:	f002 0208 	and.w	r2, r2, #8
 8000a2c:	9205      	str	r2, [sp, #20]
 8000a2e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a32:	f042 0204 	orr.w	r2, r2, #4
 8000a36:	631a      	str	r2, [r3, #48]	; 0x30
 8000a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a3a:	f002 0204 	and.w	r2, r2, #4
 8000a3e:	9206      	str	r2, [sp, #24]
 8000a40:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a44:	f042 0201 	orr.w	r2, r2, #1
 8000a48:	631a      	str	r2, [r3, #48]	; 0x30
 8000a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a4c:	f002 0201 	and.w	r2, r2, #1
 8000a50:	9207      	str	r2, [sp, #28]
 8000a52:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a5e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000a62:	9208      	str	r2, [sp, #32]
 8000a64:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a70:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000a74:	9209      	str	r2, [sp, #36]	; 0x24
 8000a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a82:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000a86:	920a      	str	r2, [sp, #40]	; 0x28
 8000a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8c:	f042 0220 	orr.w	r2, r2, #32
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
 8000a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a94:	f002 0220 	and.w	r2, r2, #32
 8000a98:	920b      	str	r2, [sp, #44]	; 0x2c
 8000a9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000aa2:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOJ, MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 8000aa4:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aac:	930c      	str	r3, [sp, #48]	; 0x30
 8000aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOJ, MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 8000ab0:	f001 fc86 	bl	80023c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aba:	486c      	ldr	r0, [pc, #432]	; (8000c6c <main+0x330>)
 8000abc:	f001 fc80 	bl	80023c0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	a91f      	add	r1, sp, #124	; 0x7c
 8000ac2:	486b      	ldr	r0, [pc, #428]	; (8000c70 <main+0x334>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac4:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	e9cd 951f 	strd	r9, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	e9cd 4621 	strd	r4, r6, [sp, #132]	; 0x84
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f001 fb92 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 8000ad4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad8:	a91f      	add	r1, sp, #124	; 0x7c
 8000ada:	4866      	ldr	r0, [pc, #408]	; (8000c74 <main+0x338>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000adc:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	e9cd 4621 	strd	r4, r6, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ae8:	f001 fb86 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aec:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	a91f      	add	r1, sp, #124	; 0x7c
 8000af0:	4861      	ldr	r0, [pc, #388]	; (8000c78 <main+0x33c>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000af2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af6:	e9cd a31f 	strd	sl, r3, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	e9cd 4621 	strd	r4, r6, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f001 fb7b 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8000b02:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b04:	a91f      	add	r1, sp, #124	; 0x7c
 8000b06:	485c      	ldr	r0, [pc, #368]	; (8000c78 <main+0x33c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8000b08:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b0a:	f04f 0a0e 	mov.w	sl, #14
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	e9cd b51f 	strd	fp, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	e9cd 4621 	strd	r4, r6, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b16:	f001 fb6f 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD2_CMD_Pin|SD2_CLK_Pin;
 8000b1a:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1c:	a91f      	add	r1, sp, #124	; 0x7c
 8000b1e:	4857      	ldr	r0, [pc, #348]	; (8000c7c <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8000b20:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b28:	e9cd 4621 	strd	r4, r6, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b2c:	f001 fb64 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PAR_VSYNC_Pin;
 8000b30:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(PAR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b32:	a91f      	add	r1, sp, #124	; 0x7c
 8000b34:	4850      	ldr	r0, [pc, #320]	; (8000c78 <main+0x33c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b3a:	230d      	movs	r3, #13
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b40:	9323      	str	r3, [sp, #140]	; 0x8c
  HAL_GPIO_Init(PAR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f001 fb59 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	f243 030b 	movw	r3, #12299	; 0x300b
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b4a:	a91f      	add	r1, sp, #124	; 0x7c
 8000b4c:	4846      	ldr	r0, [pc, #280]	; (8000c68 <main+0x32c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000b56:	f001 fb4f 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5a:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8000b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(EXPANDER_INT_GPIO_Port, &GPIO_InitStruct);
 8000b62:	a91f      	add	r1, sp, #124	; 0x7c
 8000b64:	4841      	ldr	r0, [pc, #260]	; (8000c6c <main+0x330>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b68:	e9cd 321f 	strd	r3, r2, [sp, #124]	; 0x7c
  HAL_GPIO_Init(EXPANDER_INT_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f001 fb44 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8000b70:	23f8      	movs	r3, #248	; 0xf8
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b72:	a91f      	add	r1, sp, #124	; 0x7c
 8000b74:	4842      	ldr	r0, [pc, #264]	; (8000c80 <main+0x344>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b76:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b82:	f001 fb39 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SD2_D1_Pin;
 8000b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(SD2_D1_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	a91f      	add	r1, sp, #124	; 0x7c
 8000b8c:	4839      	ldr	r0, [pc, #228]	; (8000c74 <main+0x338>)
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8000b8e:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	e9cd 4621 	strd	r4, r6, [sp, #132]	; 0x84
  HAL_GPIO_Init(SD2_D1_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f001 fb2d 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_B2_Pin|LCD_B3_Pin|LCD_R5_Pin|LCD_R6_Pin;
 8000b9e:	f24c 0330 	movw	r3, #49200	; 0xc030
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ba2:	a91f      	add	r1, sp, #124	; 0x7c
 8000ba4:	4830      	ldr	r0, [pc, #192]	; (8000c68 <main+0x32c>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ba6:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000bb2:	f001 fb21 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PAR_D5_Pin;
 8000bb6:	2308      	movs	r3, #8
  HAL_GPIO_Init(PAR_D5_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	a91f      	add	r1, sp, #124	; 0x7c
 8000bba:	4830      	ldr	r0, [pc, #192]	; (8000c7c <main+0x340>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bc0:	230d      	movs	r3, #13
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000bc6:	9323      	str	r3, [sp, #140]	; 0x8c
  HAL_GPIO_Init(PAR_D5_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f001 fb16 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bcc:	f44f 1288 	mov.w	r2, #1114112	; 0x110000
 8000bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  HAL_GPIO_Init(TAMPER_WKUP_KEY_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	482b      	ldr	r0, [pc, #172]	; (8000c84 <main+0x348>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	9421      	str	r4, [sp, #132]	; 0x84
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd8:	e9cd 121f 	strd	r1, r2, [sp, #124]	; 0x7c
  HAL_GPIO_Init(TAMPER_WKUP_KEY_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	a91f      	add	r1, sp, #124	; 0x7c
 8000bde:	f001 fb0b 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin;
 8000be2:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000be6:	a91f      	add	r1, sp, #124	; 0x7c
 8000be8:	4820      	ldr	r0, [pc, #128]	; (8000c6c <main+0x330>)
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000bea:	f8cd a08c 	str.w	sl, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	e9cd 251f 	strd	r2, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bf6:	f001 faff 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MII_MCO_Pin;
 8000bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(MII_MCO_GPIO_Port, &GPIO_InitStruct);
 8000bfe:	a91f      	add	r1, sp, #124	; 0x7c
 8000c00:	4821      	ldr	r0, [pc, #132]	; (8000c88 <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c02:	9423      	str	r4, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  HAL_GPIO_Init(MII_MCO_GPIO_Port, &GPIO_InitStruct);
 8000c0c:	f001 faf4 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED0_Pin;
 8000c10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000c14:	a91f      	add	r1, sp, #124	; 0x7c
 8000c16:	4815      	ldr	r0, [pc, #84]	; (8000c6c <main+0x330>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	e9cd 271f 	strd	r2, r7, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f001 faea 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MII_TX_CLK_Pin|MII_TXD2_Pin|MII_RXD0_Pin|MII_RXD1_Pin;
 8000c24:	223c      	movs	r2, #60	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	a91f      	add	r1, sp, #124	; 0x7c
 8000c28:	4816      	ldr	r0, [pc, #88]	; (8000c84 <main+0x348>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2a:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	e9cd 251f 	strd	r2, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	e9cd 4621 	strd	r4, r6, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c36:	f001 fadf 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8000c3a:	2282      	movs	r2, #130	; 0x82
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	a91f      	add	r1, sp, #124	; 0x7c
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c40:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	e9cd 251f 	strd	r2, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c48:	e9cd 4621 	strd	r4, r6, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f001 fad4 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PAR_HSYNC_Pin|PAR_PCLK_Pin;
 8000c50:	2250      	movs	r2, #80	; 0x50
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c52:	230d      	movs	r3, #13
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c54:	a91f      	add	r1, sp, #124	; 0x7c
 8000c56:	480c      	ldr	r0, [pc, #48]	; (8000c88 <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c58:	9323      	str	r3, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	e9cd 251f 	strd	r2, r5, [sp, #124]	; 0x7c
 8000c5e:	e015      	b.n	8000c8c <main+0x350>
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40022400 	.word	0x40022400
 8000c6c:	40022000 	.word	0x40022000
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40021800 	.word	0x40021800
 8000c78:	40020400 	.word	0x40020400
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	40022800 	.word	0x40022800
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020000 	.word	0x40020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f001 fab2 	bl	80021f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 8000c94:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c96:	a91f      	add	r1, sp, #124	; 0x7c
 8000c98:	48a5      	ldr	r0, [pc, #660]	; (8000f30 <main+0x5f4>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9a:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	e9cd 351f 	strd	r3, r5, [sp, #124]	; 0x7c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca2:	e9cd 4621 	strd	r4, r6, [sp, #132]	; 0x84
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ca6:	f001 faa7 	bl	80021f8 <HAL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	2210      	movs	r2, #16
 8000cac:	4621      	mov	r1, r4
 8000cae:	a81f      	add	r0, sp, #124	; 0x7c
 8000cb0:	f00c fa40 	bl	800d134 <memset>
  hadc3.Instance = ADC3;
 8000cb4:	4d9f      	ldr	r5, [pc, #636]	; (8000f34 <main+0x5f8>)
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cb6:	4ba0      	ldr	r3, [pc, #640]	; (8000f38 <main+0x5fc>)
 8000cb8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cbc:	4628      	mov	r0, r5
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cbe:	60ac      	str	r4, [r5, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cc0:	612c      	str	r4, [r5, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000cc2:	61ac      	str	r4, [r5, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cc4:	f885 4020 	strb.w	r4, [r5, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc8:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cca:	60ec      	str	r4, [r5, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000ccc:	61ef      	str	r7, [r5, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000cce:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd2:	616f      	str	r7, [r5, #20]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cd4:	e9c5 3200 	strd	r3, r2, [r5]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd8:	4a98      	ldr	r2, [pc, #608]	; (8000f3c <main+0x600>)
 8000cda:	62aa      	str	r2, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000cdc:	f000 fe6e 	bl	80019bc <HAL_ADC_Init>
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	b108      	cbz	r0, 8000ce8 <main+0x3ac>
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <main+0x3aa>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ce8:	9021      	str	r0, [sp, #132]	; 0x84
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cea:	a91f      	add	r1, sp, #124	; 0x7c
 8000cec:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cee:	e9cd 371f 	strd	r3, r7, [sp, #124]	; 0x7c
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000cf2:	f000 ff09 	bl	8001b08 <HAL_ADC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b108      	cbz	r0, 8000cfe <main+0x3c2>
 8000cfa:	b672      	cpsid	i
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <main+0x3c0>
  hcrc.Instance = CRC;
 8000cfe:	4890      	ldr	r0, [pc, #576]	; (8000f40 <main+0x604>)
 8000d00:	4a90      	ldr	r2, [pc, #576]	; (8000f44 <main+0x608>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d02:	8083      	strh	r3, [r0, #4]
  hcrc.Instance = CRC;
 8000d04:	6002      	str	r2, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d06:	6207      	str	r7, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d08:	e9c0 3305 	strd	r3, r3, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d0c:	f001 f802 	bl	8001d14 <HAL_CRC_Init>
 8000d10:	4605      	mov	r5, r0
 8000d12:	b108      	cbz	r0, 8000d18 <main+0x3dc>
 8000d14:	b672      	cpsid	i
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <main+0x3da>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000d18:	4601      	mov	r1, r0
 8000d1a:	2224      	movs	r2, #36	; 0x24
  DSI_PLLInitTypeDef PLLInit = {0};
 8000d1c:	900f      	str	r0, [sp, #60]	; 0x3c
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000d1e:	a816      	add	r0, sp, #88	; 0x58
 8000d20:	f00c fa08 	bl	800d134 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000d24:	465a      	mov	r2, fp
 8000d26:	4629      	mov	r1, r5
 8000d28:	a810      	add	r0, sp, #64	; 0x40
 8000d2a:	f00c fa03 	bl	800d134 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000d2e:	4629      	mov	r1, r5
 8000d30:	2234      	movs	r2, #52	; 0x34
 8000d32:	a81f      	add	r0, sp, #124	; 0x7c
 8000d34:	f00c f9fe 	bl	800d134 <memset>
  hdsi.Instance = DSI;
 8000d38:	4c83      	ldr	r4, [pc, #524]	; (8000f48 <main+0x60c>)
 8000d3a:	4b84      	ldr	r3, [pc, #528]	; (8000f4c <main+0x610>)
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d3c:	a90d      	add	r1, sp, #52	; 0x34
 8000d3e:	4620      	mov	r0, r4
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000d40:	e9c4 3500 	strd	r3, r5, [r4]
  PLLInit.PLLNDIV = 20;
 8000d44:	2314      	movs	r3, #20
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000d46:	e9c4 9502 	strd	r9, r5, [r4, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000d4a:	e9cd 370d 	strd	r3, r7, [sp, #52]	; 0x34
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d4e:	f001 f8a1 	bl	8001e94 <HAL_DSI_Init>
 8000d52:	b108      	cbz	r0, 8000d58 <main+0x41c>
 8000d54:	b672      	cpsid	i
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <main+0x41a>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000d58:	e9cd 7016 	strd	r7, r0, [sp, #88]	; 0x58
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000d5c:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000d60:	e9cd 001a 	strd	r0, r0, [sp, #104]	; 0x68
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000d64:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
  HostTimeouts.BTATimeout = 0;
 8000d68:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000d6a:	a916      	add	r1, sp, #88	; 0x58
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f001 f9c7 	bl	8002100 <HAL_DSI_ConfigHostTimeouts>
 8000d72:	b108      	cbz	r0, 8000d78 <main+0x43c>
 8000d74:	b672      	cpsid	i
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <main+0x43a>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d78:	2321      	movs	r3, #33	; 0x21
 8000d7a:	f04f 0e1c 	mov.w	lr, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d7e:	f04f 080f 	mov.w	r8, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d82:	a910      	add	r1, sp, #64	; 0x40
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d84:	e9cd e310 	strd	lr, r3, [sp, #64]	; 0x40
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d88:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000d8a:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d8e:	4620      	mov	r0, r4
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d90:	e9cd 8312 	strd	r8, r3, [sp, #72]	; 0x48
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d94:	f001 f977 	bl	8002086 <HAL_DSI_ConfigPhyTimer>
 8000d98:	b108      	cbz	r0, 8000d9e <main+0x462>
 8000d9a:	b672      	cpsid	i
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <main+0x460>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d9e:	4649      	mov	r1, r9
 8000da0:	4620      	mov	r0, r4
 8000da2:	f001 f95f 	bl	8002064 <HAL_DSI_ConfigFlowControl>
 8000da6:	b108      	cbz	r0, 8000dac <main+0x470>
 8000da8:	b672      	cpsid	i
  while (1)
 8000daa:	e7fe      	b.n	8000daa <main+0x46e>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000dac:	f242 7110 	movw	r1, #10000	; 0x2710
 8000db0:	4620      	mov	r0, r4
 8000db2:	f001 fa0b 	bl	80021cc <HAL_DSI_SetLowPowerRXFilter>
 8000db6:	b108      	cbz	r0, 8000dbc <main+0x480>
 8000db8:	b672      	cpsid	i
  while (1)
 8000dba:	e7fe      	b.n	8000dba <main+0x47e>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4862      	ldr	r0, [pc, #392]	; (8000f48 <main+0x60c>)
 8000dc0:	f001 f806 	bl	8001dd0 <HAL_DSI_ConfigErrorMonitor>
 8000dc4:	b108      	cbz	r0, 8000dca <main+0x48e>
 8000dc6:	b672      	cpsid	i
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <main+0x48c>
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000dca:	a91f      	add	r1, sp, #124	; 0x7c
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000dcc:	902b      	str	r0, [sp, #172]	; 0xac
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000dce:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000dd2:	e9cd 0021 	strd	r0, r0, [sp, #132]	; 0x84
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000dd6:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000dda:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000dde:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000de2:	e9cd 0029 	strd	r0, r0, [sp, #164]	; 0xa4
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000de6:	4858      	ldr	r0, [pc, #352]	; (8000f48 <main+0x60c>)
 8000de8:	f001 f908 	bl	8001ffc <HAL_DSI_ConfigCommand>
 8000dec:	4601      	mov	r1, r0
 8000dee:	b108      	cbz	r0, 8000df4 <main+0x4b8>
 8000df0:	b672      	cpsid	i
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <main+0x4b6>
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000df4:	221c      	movs	r2, #28
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000df6:	901c      	str	r0, [sp, #112]	; 0x70
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000df8:	9001      	str	r0, [sp, #4]
 8000dfa:	a81f      	add	r0, sp, #124	; 0x7c
 8000dfc:	f00c f99a 	bl	800d134 <memset>
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8000e00:	f44f 4900 	mov.w	r9, #32768	; 0x8000
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 8000e04:	4852      	ldr	r0, [pc, #328]	; (8000f50 <main+0x614>)
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000e06:	2410      	movs	r4, #16
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000e08:	9901      	ldr	r1, [sp, #4]
  Timing.AddressSetupTime = 15;
 8000e0a:	250f      	movs	r5, #15
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000e0c:	f04f 4b20 	mov.w	fp, #2684354560	; 0xa0000000
 8000e10:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8000f70 <main+0x634>
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000e14:	2608      	movs	r6, #8
  Timing.DataSetupTime = 255;
 8000e16:	f04f 08ff 	mov.w	r8, #255	; 0xff
  Timing.DataLatency = 17;
 8000e1a:	2711      	movs	r7, #17
  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000e1c:	460a      	mov	r2, r1
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e1e:	6401      	str	r1, [r0, #64]	; 0x40
  Timing.CLKDivision = 16;
 8000e20:	941a      	str	r4, [sp, #104]	; 0x68
  Timing.DataLatency = 17;
 8000e22:	971b      	str	r7, [sp, #108]	; 0x6c
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000e24:	e9c0 1102 	strd	r1, r1, [r0, #8]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e28:	e9c0 1106 	strd	r1, r1, [r0, #24]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000e2c:	e9c0 1108 	strd	r1, r1, [r0, #32]
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000e30:	e9c0 110a 	strd	r1, r1, [r0, #40]	; 0x28
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000e34:	e9c0 910c 	strd	r9, r1, [r0, #48]	; 0x30
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e38:	e9c0 110e 	strd	r1, r1, [r0, #56]	; 0x38
  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000e3c:	a916      	add	r1, sp, #88	; 0x58
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000e3e:	e9c0 ba00 	strd	fp, sl, [r0]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000e42:	e9c0 6404 	strd	r6, r4, [r0, #16]
  Timing.AddressHoldTime = 15;
 8000e46:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
  Timing.BusTurnAroundDuration = 15;
 8000e4a:	e9cd 8518 	strd	r8, r5, [sp, #96]	; 0x60
  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 8000e4e:	f001 fe93 	bl	8002b78 <HAL_NOR_Init>
 8000e52:	4602      	mov	r2, r0
 8000e54:	b108      	cbz	r0, 8000e5a <main+0x51e>
 8000e56:	b672      	cpsid	i
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <main+0x51c>
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8000e5a:	483e      	ldr	r0, [pc, #248]	; (8000f54 <main+0x618>)
  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000e5c:	a916      	add	r1, sp, #88	; 0x58
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e5e:	921c      	str	r2, [sp, #112]	; 0x70
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e60:	6402      	str	r2, [r0, #64]	; 0x40
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000e62:	e9c0 ba00 	strd	fp, sl, [r0]
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 8000e66:	f04f 0a04 	mov.w	sl, #4
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000e6a:	e9c0 2404 	strd	r2, r4, [r0, #16]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000e6e:	e9c0 a202 	strd	sl, r2, [r0, #8]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e72:	e9c0 2206 	strd	r2, r2, [r0, #24]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000e76:	e9c0 2208 	strd	r2, r2, [r0, #32]
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000e7a:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000e7e:	e9c0 920c 	strd	r9, r2, [r0, #48]	; 0x30
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e82:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
  Timing.AddressHoldTime = 15;
 8000e86:	e9cd 5516 	strd	r5, r5, [sp, #88]	; 0x58
  Timing.BusTurnAroundDuration = 15;
 8000e8a:	e9cd 8518 	strd	r8, r5, [sp, #96]	; 0x60
  Timing.DataLatency = 17;
 8000e8e:	e9cd 471a 	strd	r4, r7, [sp, #104]	; 0x68
  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8000e92:	f002 ff5c 	bl	8003d4e <HAL_SRAM_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b108      	cbz	r0, 8000e9e <main+0x562>
 8000e9a:	b672      	cpsid	i
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <main+0x560>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e9e:	482e      	ldr	r0, [pc, #184]	; (8000f58 <main+0x61c>)
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ea0:	2540      	movs	r5, #64	; 0x40
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ea2:	4a2e      	ldr	r2, [pc, #184]	; (8000f5c <main+0x620>)
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ea4:	a91f      	add	r1, sp, #124	; 0x7c
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ea6:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.RCDDelay = 16;
 8000ea8:	9425      	str	r4, [sp, #148]	; 0x94
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000eaa:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000eae:	2220      	movs	r2, #32
 8000eb0:	e9c0 2504 	strd	r2, r5, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000eb4:	2280      	movs	r2, #128	; 0x80
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000eb6:	e9c0 3602 	strd	r3, r6, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000eba:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ebe:	e9c0 3308 	strd	r3, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000ec2:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
  SdramTiming.RowCycleDelay = 16;
 8000ec6:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
  SdramTiming.RPDelay = 16;
 8000eca:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ece:	f002 fee7 	bl	8003ca0 <HAL_SDRAM_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	b108      	cbz	r0, 8000eda <main+0x59e>
 8000ed6:	b672      	cpsid	i
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <main+0x59c>
  hqspi.Instance = QUADSPI;
 8000eda:	4821      	ldr	r0, [pc, #132]	; (8000f60 <main+0x624>)
  hqspi.Init.ClockPrescaler = 1;
 8000edc:	2701      	movs	r7, #1
 8000ede:	4a21      	ldr	r2, [pc, #132]	; (8000f64 <main+0x628>)
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000ee0:	f04f 0c1a 	mov.w	ip, #26
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ee4:	6203      	str	r3, [r0, #32]
  hqspi.Init.ClockPrescaler = 1;
 8000ee6:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000eea:	f44f 62a0 	mov.w	r2, #1280	; 0x500
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000eee:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000ef2:	e9c0 a402 	strd	sl, r4, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8000ef6:	e9c0 c204 	strd	ip, r2, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000efa:	f001 ffa5 	bl	8002e48 <HAL_QSPI_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	b108      	cbz	r0, 8000f06 <main+0x5ca>
 8000f02:	b672      	cpsid	i
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <main+0x5c8>
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f06:	4818      	ldr	r0, [pc, #96]	; (8000f68 <main+0x62c>)
 8000f08:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <main+0x630>)
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000f0a:	6103      	str	r3, [r0, #16]
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000f0c:	6002      	str	r2, [r0, #0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000f0e:	f64b 3280 	movw	r2, #48000	; 0xbb80
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f12:	6183      	str	r3, [r0, #24]
  hsai_BlockA1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8000f14:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000f18:	61c2      	str	r2, [r0, #28]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f1a:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f1e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000f22:	f002 fddd 	bl	8003ae0 <HAL_SAI_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	b320      	cbz	r0, 8000f74 <main+0x638>
 8000f2a:	b672      	cpsid	i
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <main+0x5f0>
 8000f2e:	bf00      	nop
 8000f30:	40021c00 	.word	0x40021c00
 8000f34:	200014bc 	.word	0x200014bc
 8000f38:	40012200 	.word	0x40012200
 8000f3c:	0f000001 	.word	0x0f000001
 8000f40:	20001504 	.word	0x20001504
 8000f44:	40023000 	.word	0x40023000
 8000f48:	20001528 	.word	0x20001528
 8000f4c:	40016c00 	.word	0x40016c00
 8000f50:	200017c4 	.word	0x200017c4
 8000f54:	200023f4 	.word	0x200023f4
 8000f58:	20002374 	.word	0x20002374
 8000f5c:	a0000140 	.word	0xa0000140
 8000f60:	20002220 	.word	0x20002220
 8000f64:	a0001000 	.word	0xa0001000
 8000f68:	2000226c 	.word	0x2000226c
 8000f6c:	40015804 	.word	0x40015804
 8000f70:	a0000104 	.word	0xa0000104
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f74:	483d      	ldr	r0, [pc, #244]	; (800106c <main+0x730>)
 8000f76:	4a3e      	ldr	r2, [pc, #248]	; (8001070 <main+0x734>)
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000f78:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000f7a:	6002      	str	r2, [r0, #0]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f7c:	4a3d      	ldr	r2, [pc, #244]	; (8001074 <main+0x738>)
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000f7e:	6043      	str	r3, [r0, #4]
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000f80:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000f82:	6083      	str	r3, [r0, #8]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000f84:	6183      	str	r3, [r0, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000f86:	61c2      	str	r2, [r0, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000f88:	60c3      	str	r3, [r0, #12]
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000f8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000f8c:	6603      	str	r3, [r0, #96]	; 0x60
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000f8e:	e9c0 530d 	strd	r5, r3, [r0, #52]	; 0x34
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000f96:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000f9a:	e9c0 6710 	strd	r6, r7, [r0, #64]	; 0x40
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000f9e:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000fa2:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000fa6:	e9c0 3716 	strd	r3, r7, [r0, #88]	; 0x58
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000faa:	f002 fd99 	bl	8003ae0 <HAL_SAI_Init>
 8000fae:	b108      	cbz	r0, 8000fb4 <main+0x678>
 8000fb0:	b672      	cpsid	i
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <main+0x676>
  hmmc1.Instance = SDMMC1;
 8000fb4:	4c30      	ldr	r4, [pc, #192]	; (8001078 <main+0x73c>)
 8000fb6:	4b31      	ldr	r3, [pc, #196]	; (800107c <main+0x740>)
  hmmc1.Init.ClockDiv = 0;
 8000fb8:	61a0      	str	r0, [r4, #24]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000fba:	e9c4 3000 	strd	r3, r0, [r4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000fbe:	e9c4 0002 	strd	r0, r0, [r4, #8]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000fc2:	e9c4 0004 	strd	r0, r0, [r4, #16]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f001 fd76 	bl	8002ab8 <HAL_MMC_Init>
 8000fcc:	b108      	cbz	r0, 8000fd2 <main+0x696>
 8000fce:	b672      	cpsid	i
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <main+0x694>
  if (HAL_MMC_ConfigWideBusOperation(&hmmc1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000fd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f001 fcb0 	bl	800293c <HAL_MMC_ConfigWideBusOperation>
 8000fdc:	b108      	cbz	r0, 8000fe2 <main+0x6a6>
 8000fde:	b672      	cpsid	i
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <main+0x6a4>
  hspdif.Instance = SPDIFRX;
 8000fe2:	4827      	ldr	r0, [pc, #156]	; (8001080 <main+0x744>)
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 8000fe4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe8:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 8000fec:	e9c0 5300 	strd	r5, r3, [r0]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000ff0:	2300      	movs	r3, #0
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000ff2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000ffa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000ffe:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8001002:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8001004:	f002 fe6c 	bl	8003ce0 <HAL_SPDIFRX_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	b108      	cbz	r0, 8001010 <main+0x6d4>
 800100c:	b672      	cpsid	i
  while (1)
 800100e:	e7fe      	b.n	800100e <main+0x6d2>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001010:	481c      	ldr	r0, [pc, #112]	; (8001084 <main+0x748>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001012:	2206      	movs	r2, #6
 8001014:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 8001018:	e9c0 4200 	strd	r4, r2, [r0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800101c:	2202      	movs	r2, #2
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800101e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001022:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001026:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800102a:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800102e:	f001 fe07 	bl	8002c40 <HAL_PCD_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	b108      	cbz	r0, 800103a <main+0x6fe>
 8001036:	b672      	cpsid	i
  while (1)
 8001038:	e7fe      	b.n	8001038 <main+0x6fc>
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800103a:	4813      	ldr	r0, [pc, #76]	; (8001088 <main+0x74c>)
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800103c:	2209      	movs	r2, #9
 800103e:	4913      	ldr	r1, [pc, #76]	; (800108c <main+0x750>)
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001040:	6343      	str	r3, [r0, #52]	; 0x34
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001042:	e9c0 1200 	strd	r1, r2, [r0]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001046:	2201      	movs	r2, #1
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001048:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800104c:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001050:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001054:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001058:	f001 fdf2 	bl	8002c40 <HAL_PCD_Init>
 800105c:	b108      	cbz	r0, 8001062 <main+0x726>
 800105e:	b672      	cpsid	i
  while (1)
 8001060:	e7fe      	b.n	8001060 <main+0x724>
  MX_X_CUBE_AI_Init();
 8001062:	f005 fa21 	bl	80064a8 <MX_X_CUBE_AI_Init>
  MX_X_CUBE_AI_Process();
 8001066:	f005 fa26 	bl	80064b6 <MX_X_CUBE_AI_Process>
  while (1)
 800106a:	e7fc      	b.n	8001066 <main+0x72a>
 800106c:	200022f0 	.word	0x200022f0
 8001070:	40015c24 	.word	0x40015c24
 8001074:	0002ee00 	.word	0x0002ee00
 8001078:	20001544 	.word	0x20001544
 800107c:	40012c00 	.word	0x40012c00
 8001080:	200023a8 	.word	0x200023a8
 8001084:	20001810 	.word	0x20001810
 8001088:	20001d18 	.word	0x20001d18
 800108c:	40040000 	.word	0x40040000

08001090 <MX_USART1_UART_Init>:
{
 8001090:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8001094:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001098:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <MX_USART1_UART_Init+0x34>)
 800109a:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a0:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010a6:	6103      	str	r3, [r0, #16]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a8:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ae:	e9c0 3307 	strd	r3, r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b2:	f003 f964 	bl	800437e <HAL_UART_Init>
 80010b6:	b108      	cbz	r0, 80010bc <MX_USART1_UART_Init+0x2c>
 80010b8:	b672      	cpsid	i
  while (1)
 80010ba:	e7fe      	b.n	80010ba <MX_USART1_UART_Init+0x2a>
}
 80010bc:	bd08      	pop	{r3, pc}
 80010be:	bf00      	nop
 80010c0:	20002440 	.word	0x20002440
 80010c4:	40011000 	.word	0x40011000

080010c8 <Error_Handler>:
 80010c8:	b672      	cpsid	i
  while (1)
 80010ca:	e7fe      	b.n	80010ca <Error_Handler+0x2>

080010cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80010cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80010ce:	2300      	movs	r3, #0
static void HAL_FMC_MspInit(void){
 80010d0:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80010d2:	9303      	str	r3, [sp, #12]
  if (FMC_Initialized) {
 80010d4:	4b30      	ldr	r3, [pc, #192]	; (8001198 <HAL_FMC_MspInit+0xcc>)
 80010d6:	681d      	ldr	r5, [r3, #0]
 80010d8:	2d00      	cmp	r5, #0
 80010da:	d15a      	bne.n	8001192 <HAL_FMC_MspInit+0xc6>
    return;
  }
  FMC_Initialized = 1;
 80010dc:	2201      	movs	r2, #1
  */
  GPIO_InitStruct.Pin = A20_Pin|A19_Pin|FMC_NBL1_Pin|FMC_NBL0_Pin
                          |A21_Pin|D5_Pin|D6_Pin|D8_Pin
                          |D11_Pin|D4_Pin|D7_Pin|D9_Pin
                          |D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2602      	movs	r6, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010e0:	2403      	movs	r4, #3
 80010e2:	270c      	movs	r7, #12
  FMC_Initialized = 1;
 80010e4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e6:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80010e8:	4b2c      	ldr	r3, [pc, #176]	; (800119c <HAL_FMC_MspInit+0xd0>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ea:	482d      	ldr	r0, [pc, #180]	; (80011a0 <HAL_FMC_MspInit+0xd4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80010ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010ee:	f042 0201 	orr.w	r2, r2, #1
 80010f2:	639a      	str	r2, [r3, #56]	; 0x38
 80010f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	f64f 73bb 	movw	r3, #65467	; 0xffbb
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001102:	e9cd 4704 	strd	r4, r7, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	e9cd 3601 	strd	r3, r6, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800110a:	f001 f875 	bl	80021f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|NAND_INT_Pin|FMC_NE3_Pin
 800110e:	f248 13ff 	movw	r3, #33279	; 0x81ff
                          |A15_Pin|A14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001112:	a901      	add	r1, sp, #4
 8001114:	4823      	ldr	r0, [pc, #140]	; (80011a4 <HAL_FMC_MspInit+0xd8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001116:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	e9cd 3601 	strd	r3, r6, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111c:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001120:	f001 f86a 	bl	80021f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|FMC_NWE_Pin|D3_Pin|FMC_NOE_Pin
 8001124:	f64f 7333 	movw	r3, #65331	; 0xff33
                          |D13_Pin|A17_Pin|A18_Pin|A16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001128:	a901      	add	r1, sp, #4
 800112a:	481f      	ldr	r0, [pc, #124]	; (80011a8 <HAL_FMC_MspInit+0xdc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800112c:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	e9cd 3601 	strd	r3, r6, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001136:	f001 f85f 	bl	80021f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 800113a:	f240 63ff 	movw	r3, #1791	; 0x6ff
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800113e:	a901      	add	r1, sp, #4
 8001140:	481a      	ldr	r0, [pc, #104]	; (80011ac <HAL_FMC_MspInit+0xe0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001142:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	e9cd 3601 	strd	r3, r6, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800114c:	f001 f854 	bl	80021f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001150:	f64f 033f 	movw	r3, #63551	; 0xf83f
                          |A7_Pin|A8_Pin|SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001154:	a901      	add	r1, sp, #4
 8001156:	4816      	ldr	r0, [pc, #88]	; (80011b0 <HAL_FMC_MspInit+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001158:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	e9cd 3601 	strd	r3, r6, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001162:	f001 f849 	bl	80021f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNWE_Pin
 8001166:	f64f 732c 	movw	r3, #65324	; 0xff2c
                          |D19_Pin|D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800116a:	a901      	add	r1, sp, #4
 800116c:	4811      	ldr	r0, [pc, #68]	; (80011b4 <HAL_FMC_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800116e:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	e9cd 3601 	strd	r3, r6, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	e9cd 5403 	strd	r5, r4, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001178:	f001 f83e 	bl	80021f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE1_Pin|FMC_NWAIT_Pin;
 800117c:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117e:	a901      	add	r1, sp, #4
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <HAL_FMC_MspInit+0xec>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001182:	e9cd 3601 	strd	r3, r6, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8001186:	2309      	movs	r3, #9
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	e9cd 5403 	strd	r5, r4, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 800118c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800118e:	f001 f833 	bl	80021f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001192:	b007      	add	sp, #28
 8001194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001196:	bf00      	nop
 8001198:	200024c8 	.word	0x200024c8
 800119c:	40023800 	.word	0x40023800
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40020c00 	.word	0x40020c00
 80011ac:	40022000 	.word	0x40022000
 80011b0:	40021400 	.word	0x40021400
 80011b4:	40021c00 	.word	0x40021c00
 80011b8:	40020800 	.word	0x40020800

080011bc <HAL_MspInit>:
  __HAL_RCC_PWR_CLK_ENABLE();
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_MspInit+0x2c>)
{
 80011be:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011c6:	641a      	str	r2, [r3, #64]	; 0x40
 80011c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ca:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80011ce:	9200      	str	r2, [sp, #0]
 80011d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
 80011da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	9b01      	ldr	r3, [sp, #4]
}
 80011e4:	b002      	add	sp, #8
 80011e6:	4770      	bx	lr
 80011e8:	40023800 	.word	0x40023800

080011ec <HAL_ADC_MspInit>:
{
 80011ec:	b510      	push	{r4, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	2214      	movs	r2, #20
 80011f4:	2100      	movs	r1, #0
 80011f6:	a803      	add	r0, sp, #12
 80011f8:	f00b ff9c 	bl	800d134 <memset>
  if(hadc->Instance==ADC3)
 80011fc:	6822      	ldr	r2, [r4, #0]
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_ADC_MspInit+0x58>)
 8001200:	429a      	cmp	r2, r3
 8001202:	d11c      	bne.n	800123e <HAL_ADC_MspInit+0x52>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001204:	f503 338b 	add.w	r3, r3, #71168	; 0x11600
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8001208:	a903      	add	r1, sp, #12
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 800120c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800120e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001212:	645a      	str	r2, [r3, #68]	; 0x44
 8001214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001216:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800121a:	9201      	str	r2, [sp, #4]
 800121c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800121e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001220:	f042 0220 	orr.w	r2, r2, #32
 8001224:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	f003 0320 	and.w	r3, r3, #32
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001234:	2303      	movs	r3, #3
 8001236:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 800123a:	f000 ffdd 	bl	80021f8 <HAL_GPIO_Init>
}
 800123e:	b008      	add	sp, #32
 8001240:	bd10      	pop	{r4, pc}
 8001242:	bf00      	nop
 8001244:	40012200 	.word	0x40012200
 8001248:	40021400 	.word	0x40021400

0800124c <HAL_CRC_MspInit>:
  if(hcrc->Instance==CRC)
 800124c:	6802      	ldr	r2, [r0, #0]
{
 800124e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <HAL_CRC_MspInit+0x28>)
 8001252:	429a      	cmp	r2, r3
 8001254:	d10b      	bne.n	800126e <HAL_CRC_MspInit+0x22>
    __HAL_RCC_CRC_CLK_ENABLE();
 8001256:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800125a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800125e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001262:	631a      	str	r2, [r3, #48]	; 0x30
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	9b01      	ldr	r3, [sp, #4]
}
 800126e:	b002      	add	sp, #8
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023000 	.word	0x40023000

08001278 <HAL_DSI_MspInit>:
{
 8001278:	b510      	push	{r4, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	2214      	movs	r2, #20
 8001280:	2100      	movs	r1, #0
 8001282:	a803      	add	r0, sp, #12
 8001284:	f00b ff56 	bl	800d134 <memset>
  if(hdsi->Instance==DSI)
 8001288:	6822      	ldr	r2, [r4, #0]
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <HAL_DSI_MspInit+0x58>)
 800128c:	429a      	cmp	r2, r3
 800128e:	d11d      	bne.n	80012cc <HAL_DSI_MspInit+0x54>
    __HAL_RCC_DSI_CLK_ENABLE();
 8001290:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8001294:	a903      	add	r1, sp, #12
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <HAL_DSI_MspInit+0x5c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800129a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800129e:	645a      	str	r2, [r3, #68]	; 0x44
 80012a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012a2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80012a6:	9201      	str	r2, [sp, #4]
 80012a8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012b0:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80012c4:	230d      	movs	r3, #13
 80012c6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f000 ff96 	bl	80021f8 <HAL_GPIO_Init>
}
 80012cc:	b008      	add	sp, #32
 80012ce:	bd10      	pop	{r4, pc}
 80012d0:	40016c00 	.word	0x40016c00
 80012d4:	40022400 	.word	0x40022400

080012d8 <HAL_QSPI_MspInit>:
{
 80012d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012dc:	b088      	sub	sp, #32
 80012de:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	2214      	movs	r2, #20
 80012e2:	2100      	movs	r1, #0
 80012e4:	a803      	add	r0, sp, #12
 80012e6:	f00b ff25 	bl	800d134 <memset>
  if(hqspi->Instance==QUADSPI)
 80012ea:	6822      	ldr	r2, [r4, #0]
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_QSPI_MspInit+0xb8>)
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d14a      	bne.n	8001388 <HAL_QSPI_MspInit+0xb0>
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <HAL_QSPI_MspInit+0xbc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012f6:	2403      	movs	r4, #3
 80012f8:	f04f 080a 	mov.w	r8, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 80012fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80012fe:	a903      	add	r1, sp, #12
 8001300:	4825      	ldr	r0, [pc, #148]	; (8001398 <HAL_QSPI_MspInit+0xc0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2600      	movs	r6, #0
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001304:	f042 0202 	orr.w	r2, r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001308:	2709      	movs	r7, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
 800130c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800130e:	f002 0202 	and.w	r2, r2, #2
 8001312:	9200      	str	r2, [sp, #0]
 8001314:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001318:	f042 0202 	orr.w	r2, r2, #2
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
 800131e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001320:	f002 0202 	and.w	r2, r2, #2
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001328:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800132a:	f042 0220 	orr.w	r2, r2, #32
 800132e:	631a      	str	r2, [r3, #48]	; 0x30
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	2340      	movs	r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800133c:	e9cd 4806 	strd	r4, r8, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001340:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001344:	f000 ff58 	bl	80021f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin;
 8001348:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800134a:	a903      	add	r1, sp, #12
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <HAL_QSPI_MspInit+0xc4>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800134e:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	e9cd 6405 	strd	r6, r4, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001358:	f000 ff4e 	bl	80021f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800135c:	f44f 7340 	mov.w	r3, #768	; 0x300
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001360:	a903      	add	r1, sp, #12
 8001362:	480e      	ldr	r0, [pc, #56]	; (800139c <HAL_QSPI_MspInit+0xc4>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001364:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	e9cd 6405 	strd	r6, r4, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001370:	f000 ff42 	bl	80021f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8001374:	2304      	movs	r3, #4
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001376:	a903      	add	r1, sp, #12
 8001378:	4807      	ldr	r0, [pc, #28]	; (8001398 <HAL_QSPI_MspInit+0xc0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800137a:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	e9cd 6405 	strd	r6, r4, [sp, #20]
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001384:	f000 ff38 	bl	80021f8 <HAL_GPIO_Init>
}
 8001388:	b008      	add	sp, #32
 800138a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800138e:	bf00      	nop
 8001390:	a0001000 	.word	0xa0001000
 8001394:	40023800 	.word	0x40023800
 8001398:	40020400 	.word	0x40020400
 800139c:	40021400 	.word	0x40021400

080013a0 <HAL_MMC_MspInit>:
{
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b0ad      	sub	sp, #180	; 0xb4
 80013a4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	2214      	movs	r2, #20
 80013a8:	2100      	movs	r1, #0
 80013aa:	a803      	add	r0, sp, #12
 80013ac:	f00b fec2 	bl	800d134 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	2290      	movs	r2, #144	; 0x90
 80013b2:	2100      	movs	r1, #0
 80013b4:	a808      	add	r0, sp, #32
 80013b6:	f00b febd 	bl	800d134 <memset>
  if(hmmc->Instance==SDMMC1)
 80013ba:	6822      	ldr	r2, [r4, #0]
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <HAL_MMC_MspInit+0xa8>)
 80013be:	429a      	cmp	r2, r3
 80013c0:	d13f      	bne.n	8001442 <HAL_MMC_MspInit+0xa2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80013c2:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c6:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80013c8:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ca:	f002 f84b 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 80013ce:	b108      	cbz	r0, 80013d4 <HAL_MMC_MspInit+0x34>
      Error_Handler();
 80013d0:	f7ff fe7a 	bl	80010c8 <Error_Handler>
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013d4:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_MMC_MspInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013d6:	240c      	movs	r4, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2600      	movs	r6, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	eb0d 0104 	add.w	r1, sp, r4
 80013e4:	481a      	ldr	r0, [pc, #104]	; (8001450 <HAL_MMC_MspInit+0xb0>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ea:	645a      	str	r2, [r3, #68]	; 0x44
 80013ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80013f2:	9200      	str	r2, [sp, #0]
 80013f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	f042 0204 	orr.w	r2, r2, #4
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
 80013fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001400:	f002 0204 	and.w	r2, r2, #4
 8001404:	9201      	str	r2, [sp, #4]
 8001406:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140a:	f042 0208 	orr.w	r2, r2, #8
 800140e:	631a      	str	r2, [r3, #48]	; 0x30
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001412:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	9302      	str	r3, [sp, #8]
 800141a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	e9cd 3703 	strd	r3, r7, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	f000 fee6 	bl	80021f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SD1_CMD_Pin;
 800142c:	2304      	movs	r3, #4
    HAL_GPIO_Init(SD1_CMD_GPIO_Port, &GPIO_InitStruct);
 800142e:	eb0d 0104 	add.w	r1, sp, r4
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <HAL_MMC_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001434:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	e9cd 3703 	strd	r3, r7, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	e9cd 6505 	strd	r6, r5, [sp, #20]
    HAL_GPIO_Init(SD1_CMD_GPIO_Port, &GPIO_InitStruct);
 800143e:	f000 fedb 	bl	80021f8 <HAL_GPIO_Init>
}
 8001442:	b02d      	add	sp, #180	; 0xb4
 8001444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001446:	bf00      	nop
 8001448:	40012c00 	.word	0x40012c00
 800144c:	40023800 	.word	0x40023800
 8001450:	40020800 	.word	0x40020800
 8001454:	40020c00 	.word	0x40020c00

08001458 <HAL_SPDIFRX_MspInit>:
{
 8001458:	b510      	push	{r4, lr}
 800145a:	b0ac      	sub	sp, #176	; 0xb0
 800145c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	2214      	movs	r2, #20
 8001460:	2100      	movs	r1, #0
 8001462:	a803      	add	r0, sp, #12
 8001464:	f00b fe66 	bl	800d134 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001468:	2290      	movs	r2, #144	; 0x90
 800146a:	2100      	movs	r1, #0
 800146c:	a808      	add	r0, sp, #32
 800146e:	f00b fe61 	bl	800d134 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8001472:	6823      	ldr	r3, [r4, #0]
 8001474:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001478:	d131      	bne.n	80014de <HAL_SPDIFRX_MspInit+0x86>
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800147a:	23c0      	movs	r3, #192	; 0xc0
 800147c:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001480:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001482:	e9cd 1308 	strd	r1, r3, [sp, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001486:	2302      	movs	r3, #2
 8001488:	930c      	str	r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800148a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 800148e:	2301      	movs	r3, #1
 8001490:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001492:	f001 ffe7 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 8001496:	b108      	cbz	r0, 800149c <HAL_SPDIFRX_MspInit+0x44>
      Error_Handler();
 8001498:	f7ff fe16 	bl	80010c8 <Error_Handler>
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_SPDIFRX_MspInit+0x8c>)
    HAL_GPIO_Init(SPDIF_RX1_GPIO_Port, &GPIO_InitStruct);
 800149e:	a903      	add	r1, sp, #12
 80014a0:	4811      	ldr	r0, [pc, #68]	; (80014e8 <HAL_SPDIFRX_MspInit+0x90>)
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80014a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014a8:	641a      	str	r2, [r3, #64]	; 0x40
 80014aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ac:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80014b0:	9201      	str	r2, [sp, #4]
 80014b2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014ba:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	2302      	movs	r3, #2
 80014cc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 80014d6:	2307      	movs	r3, #7
 80014d8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SPDIF_RX1_GPIO_Port, &GPIO_InitStruct);
 80014da:	f000 fe8d 	bl	80021f8 <HAL_GPIO_Init>
}
 80014de:	b02c      	add	sp, #176	; 0xb0
 80014e0:	bd10      	pop	{r4, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40021800 	.word	0x40021800

080014ec <HAL_UART_MspInit>:
{
 80014ec:	b510      	push	{r4, lr}
 80014ee:	b0ac      	sub	sp, #176	; 0xb0
 80014f0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	2214      	movs	r2, #20
 80014f4:	2100      	movs	r1, #0
 80014f6:	a803      	add	r0, sp, #12
 80014f8:	f00b fe1c 	bl	800d134 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014fc:	2290      	movs	r2, #144	; 0x90
 80014fe:	2100      	movs	r1, #0
 8001500:	a808      	add	r0, sp, #32
 8001502:	f00b fe17 	bl	800d134 <memset>
  if(huart->Instance==USART1)
 8001506:	6822      	ldr	r2, [r4, #0]
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_UART_MspInit+0x7c>)
 800150a:	429a      	cmp	r2, r3
 800150c:	d129      	bne.n	8001562 <HAL_UART_MspInit+0x76>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800150e:	2340      	movs	r3, #64	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001510:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001512:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001514:	f001 ffa6 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 8001518:	b108      	cbz	r0, 800151e <HAL_UART_MspInit+0x32>
      Error_Handler();
 800151a:	f7ff fdd5 	bl	80010c8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_UART_MspInit+0x80>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001520:	2100      	movs	r1, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	4813      	ldr	r0, [pc, #76]	; (8001570 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001526:	f042 0210 	orr.w	r2, r2, #16
 800152a:	645a      	str	r2, [r3, #68]	; 0x44
 800152c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800152e:	f002 0210 	and.w	r2, r2, #16
 8001532:	9201      	str	r2, [sp, #4]
 8001534:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001538:	f042 0201 	orr.w	r2, r2, #1
 800153c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	9302      	str	r3, [sp, #8]
 800154a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001558:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800155c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f000 fe4b 	bl	80021f8 <HAL_GPIO_Init>
}
 8001562:	b02c      	add	sp, #176	; 0xb0
 8001564:	bd10      	pop	{r4, pc}
 8001566:	bf00      	nop
 8001568:	40011000 	.word	0x40011000
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000

08001574 <HAL_PCD_MspInit>:
{
 8001574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001578:	b0b4      	sub	sp, #208	; 0xd0
 800157a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	2214      	movs	r2, #20
 800157e:	2100      	movs	r1, #0
 8001580:	a80b      	add	r0, sp, #44	; 0x2c
 8001582:	f00b fdd7 	bl	800d134 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001586:	2290      	movs	r2, #144	; 0x90
 8001588:	2100      	movs	r1, #0
 800158a:	a810      	add	r0, sp, #64	; 0x40
 800158c:	f00b fdd2 	bl	800d134 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001596:	d136      	bne.n	8001606 <HAL_PCD_MspInit+0x92>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001598:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159c:	a810      	add	r0, sp, #64	; 0x40
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800159e:	9310      	str	r3, [sp, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a0:	f001 ff60 	bl	8003464 <HAL_RCCEx_PeriphCLKConfig>
 80015a4:	b108      	cbz	r0, 80015aa <HAL_PCD_MspInit+0x36>
      Error_Handler();
 80015a6:	f7ff fd8f 	bl	80010c8 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4c5d      	ldr	r4, [pc, #372]	; (8001720 <HAL_PCD_MspInit+0x1ac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2100      	movs	r1, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	485c      	ldr	r0, [pc, #368]	; (8001724 <HAL_PCD_MspInit+0x1b0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6323      	str	r3, [r4, #48]	; 0x30
 80015bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015d2:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015d6:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f000 fe0e 	bl	80021f8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e2:	6363      	str	r3, [r4, #52]	; 0x34
 80015e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	9b02      	ldr	r3, [sp, #8]
 80015ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f4:	6463      	str	r3, [r4, #68]	; 0x44
 80015f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fc:	9303      	str	r3, [sp, #12]
 80015fe:	9b03      	ldr	r3, [sp, #12]
}
 8001600:	b034      	add	sp, #208	; 0xd0
 8001602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(hpcd->Instance==USB_OTG_HS)
 8001606:	4a48      	ldr	r2, [pc, #288]	; (8001728 <HAL_PCD_MspInit+0x1b4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d1f9      	bne.n	8001600 <HAL_PCD_MspInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160c:	4c44      	ldr	r4, [pc, #272]	; (8001720 <HAL_PCD_MspInit+0x1ac>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001610:	2503      	movs	r5, #3
 8001612:	f04f 080a 	mov.w	r8, #10
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	a90b      	add	r1, sp, #44	; 0x2c
 800161a:	4844      	ldr	r0, [pc, #272]	; (800172c <HAL_PCD_MspInit+0x1b8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2700      	movs	r7, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161e:	f043 0302 	orr.w	r3, r3, #2
 8001622:	6323      	str	r3, [r4, #48]	; 0x30
 8001624:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	9304      	str	r3, [sp, #16]
 800162c:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800162e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6323      	str	r3, [r4, #48]	; 0x30
 8001636:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	9305      	str	r3, [sp, #20]
 800163e:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001640:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001646:	6323      	str	r3, [r4, #48]	; 0x30
 8001648:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800164a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800164e:	9306      	str	r3, [sp, #24]
 8001650:	9b06      	ldr	r3, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001652:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	6323      	str	r3, [r4, #48]	; 0x30
 800165a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	9307      	str	r3, [sp, #28]
 8001662:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6323      	str	r3, [r4, #48]	; 0x30
 800166c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	9308      	str	r3, [sp, #32]
 8001674:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	f643 4323 	movw	r3, #15395	; 0x3c23
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800167a:	e9cd 580e 	strd	r5, r8, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	f000 fdb9 	bl	80021f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001686:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 800168a:	a90b      	add	r1, sp, #44	; 0x2c
 800168c:	4828      	ldr	r0, [pc, #160]	; (8001730 <HAL_PCD_MspInit+0x1bc>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800168e:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001696:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 800169a:	f000 fdad 	bl	80021f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800169e:	2310      	movs	r3, #16
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80016a0:	a90b      	add	r1, sp, #44	; 0x2c
 80016a2:	4824      	ldr	r0, [pc, #144]	; (8001734 <HAL_PCD_MspInit+0x1c0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016a4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a8:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f000 fda2 	bl	80021f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 80016b4:	2301      	movs	r3, #1
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80016b6:	a90b      	add	r1, sp, #44	; 0x2c
 80016b8:	481f      	ldr	r0, [pc, #124]	; (8001738 <HAL_PCD_MspInit+0x1c4>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016ba:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f000 fd97 	bl	80021f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 80016ca:	2328      	movs	r3, #40	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	a90b      	add	r1, sp, #44	; 0x2c
 80016ce:	4815      	ldr	r0, [pc, #84]	; (8001724 <HAL_PCD_MspInit+0x1b0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016d0:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f000 fd8c 	bl	80021f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_FS2_DM_Pin|USB_FS2_DP_Pin;
 80016e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	a90b      	add	r1, sp, #44	; 0x2c
 80016e6:	4811      	ldr	r0, [pc, #68]	; (800172c <HAL_PCD_MspInit+0x1b8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80016ec:	230c      	movs	r3, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ee:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80016f2:	930f      	str	r3, [sp, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	f000 fd80 	bl	80021f8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80016f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80016fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016fe:	6323      	str	r3, [r4, #48]	; 0x30
 8001700:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001706:	9309      	str	r3, [sp, #36]	; 0x24
 8001708:	9b09      	ldr	r3, [sp, #36]	; 0x24
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800170a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800170c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001710:	6323      	str	r3, [r4, #48]	; 0x30
 8001712:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001714:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001718:	930a      	str	r3, [sp, #40]	; 0x28
 800171a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
 800171c:	e770      	b.n	8001600 <HAL_PCD_MspInit+0x8c>
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	40040000 	.word	0x40040000
 800172c:	40020400 	.word	0x40020400
 8001730:	40022000 	.word	0x40022000
 8001734:	40021c00 	.word	0x40021c00
 8001738:	40020800 	.word	0x40020800

0800173c <HAL_NOR_MspInit>:
 800173c:	f7ff bcc6 	b.w	80010cc <HAL_FMC_MspInit>

08001740 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001740:	f7ff bcc4 	b.w	80010cc <HAL_FMC_MspInit>

08001744 <HAL_SDRAM_MspInit>:
 8001744:	f7ff bcc2 	b.w	80010cc <HAL_FMC_MspInit>

08001748 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001748:	6802      	ldr	r2, [r0, #0]
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <HAL_SAI_MspInit+0xc8>)
 800174c:	429a      	cmp	r2, r3
{
 800174e:	b570      	push	{r4, r5, r6, lr}
 8001750:	4604      	mov	r4, r0
 8001752:	b088      	sub	sp, #32
    if(hsai->Instance==SAI1_Block_A)
 8001754:	d11a      	bne.n	800178c <HAL_SAI_MspInit+0x44>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001756:	482f      	ldr	r0, [pc, #188]	; (8001814 <HAL_SAI_MspInit+0xcc>)
 8001758:	6803      	ldr	r3, [r0, #0]
 800175a:	b94b      	cbnz	r3, 8001770 <HAL_SAI_MspInit+0x28>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800175c:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <HAL_SAI_MspInit+0xd0>)
 800175e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001760:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001764:	6451      	str	r1, [r2, #68]	; 0x44
 8001766:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001768:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800176c:	9201      	str	r2, [sp, #4]
 800176e:	9a01      	ldr	r2, [sp, #4]
    }
    SAI1_client ++;
 8001770:	3301      	adds	r3, #1
    GPIO_InitStruct.Pin = SAI1_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001772:	a903      	add	r1, sp, #12
    SAI1_client ++;
 8001774:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Pin = SAI1_SDA_Pin;
 8001776:	2302      	movs	r3, #2
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001778:	4828      	ldr	r0, [pc, #160]	; (800181c <HAL_SAI_MspInit+0xd4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	e9cd 3305 	strd	r3, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001784:	2306      	movs	r3, #6
 8001786:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI1_SDA_GPIO_Port, &GPIO_InitStruct);
 8001788:	f000 fd36 	bl	80021f8 <HAL_GPIO_Init>

    }
/* SAI2 */
    if(hsai->Instance==SAI2_Block_B)
 800178c:	6822      	ldr	r2, [r4, #0]
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_SAI_MspInit+0xd8>)
 8001790:	429a      	cmp	r2, r3
 8001792:	d13b      	bne.n	800180c <HAL_SAI_MspInit+0xc4>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8001794:	4823      	ldr	r0, [pc, #140]	; (8001824 <HAL_SAI_MspInit+0xdc>)
 8001796:	6803      	ldr	r3, [r0, #0]
 8001798:	b94b      	cbnz	r3, 80017ae <HAL_SAI_MspInit+0x66>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800179a:	4a1f      	ldr	r2, [pc, #124]	; (8001818 <HAL_SAI_MspInit+0xd0>)
 800179c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800179e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80017a2:	6451      	str	r1, [r2, #68]	; 0x44
 80017a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017a6:	f402 0200 	and.w	r2, r2, #8388608	; 0x800000
 80017aa:	9202      	str	r2, [sp, #8]
 80017ac:	9a02      	ldr	r2, [sp, #8]
      }
    SAI2_client ++;
 80017ae:	3301      	adds	r3, #1
    PG9     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PA2     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = SAI2_MCLKB_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80017b4:	260a      	movs	r6, #10
    SAI2_client ++;
 80017b6:	6003      	str	r3, [r0, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(SAI2_MCLKB_GPIO_Port, &GPIO_InitStruct);
 80017ba:	a903      	add	r1, sp, #12
 80017bc:	481a      	ldr	r0, [pc, #104]	; (8001828 <HAL_SAI_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80017be:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(SAI2_MCLKB_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f000 fd16 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_FSB_Pin;
 80017cc:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_FSB_GPIO_Port, &GPIO_InitStruct);
 80017d0:	a903      	add	r1, sp, #12
 80017d2:	4816      	ldr	r0, [pc, #88]	; (800182c <HAL_SAI_MspInit+0xe4>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80017d4:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(SAI2_FSB_GPIO_Port, &GPIO_InitStruct);
 80017de:	f000 fd0b 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80017e2:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80017e4:	a903      	add	r1, sp, #12
 80017e6:	4812      	ldr	r0, [pc, #72]	; (8001830 <HAL_SAI_MspInit+0xe8>)
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80017e8:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f000 fd01 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI2_SCKB_Pin;
 80017f6:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
    HAL_GPIO_Init(SAI2_SCKB_GPIO_Port, &GPIO_InitStruct);
 80017f8:	a903      	add	r1, sp, #12
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <HAL_SAI_MspInit+0xe8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	e9cd 3503 	strd	r3, r5, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001800:	2308      	movs	r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001806:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(SAI2_SCKB_GPIO_Port, &GPIO_InitStruct);
 8001808:	f000 fcf6 	bl	80021f8 <HAL_GPIO_Init>

    }
}
 800180c:	b008      	add	sp, #32
 800180e:	bd70      	pop	{r4, r5, r6, pc}
 8001810:	40015804 	.word	0x40015804
 8001814:	200024cc 	.word	0x200024cc
 8001818:	40023800 	.word	0x40023800
 800181c:	40020800 	.word	0x40020800
 8001820:	40015c24 	.word	0x40015c24
 8001824:	200024d0 	.word	0x200024d0
 8001828:	40021000 	.word	0x40021000
 800182c:	40021800 	.word	0x40021800
 8001830:	40020000 	.word	0x40020000

08001834 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <NMI_Handler>

08001836 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler>

08001838 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <MemManage_Handler>

0800183a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183a:	e7fe      	b.n	800183a <BusFault_Handler>

0800183c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler>

0800183e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001844:	f000 b884 	b.w	8001950 <HAL_IncTick>

08001848 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001848:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <_sbrk+0x30>)
{
 800184a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800184c:	6811      	ldr	r1, [r2, #0]
{
 800184e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001850:	b909      	cbnz	r1, 8001856 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001852:	490a      	ldr	r1, [pc, #40]	; (800187c <_sbrk+0x34>)
 8001854:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001856:	6810      	ldr	r0, [r2, #0]
 8001858:	4909      	ldr	r1, [pc, #36]	; (8001880 <_sbrk+0x38>)
 800185a:	4c0a      	ldr	r4, [pc, #40]	; (8001884 <_sbrk+0x3c>)
 800185c:	4403      	add	r3, r0
 800185e:	1b09      	subs	r1, r1, r4
 8001860:	428b      	cmp	r3, r1
 8001862:	d906      	bls.n	8001872 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001864:	f00b fc26 	bl	800d0b4 <__errno>
 8001868:	230c      	movs	r3, #12
 800186a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800186c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001870:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001872:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001874:	e7fc      	b.n	8001870 <_sbrk+0x28>
 8001876:	bf00      	nop
 8001878:	200024d4 	.word	0x200024d4
 800187c:	20008f50 	.word	0x20008f50
 8001880:	20080000 	.word	0x20080000
 8001884:	00000800 	.word	0x00000800

08001888 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <SystemInit+0x10>)
 800188a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800188e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001892:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018a2:	490e      	ldr	r1, [pc, #56]	; (80018dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018a4:	4a0e      	ldr	r2, [pc, #56]	; (80018e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a8:	e002      	b.n	80018b0 <LoopCopyDataInit>

080018aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ae:	3304      	adds	r3, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018b4:	d3f9      	bcc.n	80018aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b8:	4c0b      	ldr	r4, [pc, #44]	; (80018e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018bc:	e001      	b.n	80018c2 <LoopFillZerobss>

080018be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c0:	3204      	adds	r2, #4

080018c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018c4:	d3fb      	bcc.n	80018be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018c6:	f7ff ffdf 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ca:	f00b fbf9 	bl	800d0c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ce:	f7ff f835 	bl	800093c <main>
  bx  lr    
 80018d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80018d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018dc:	20001494 	.word	0x20001494
  ldr r2, =_sidata
 80018e0:	0806fd38 	.word	0x0806fd38
  ldr r2, =_sbss
 80018e4:	200014a0 	.word	0x200014a0
  ldr r4, =_ebss
 80018e8:	20008f4c 	.word	0x20008f4c

080018ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <ADC_IRQHandler>
	...

080018f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_InitTick+0x3c>)
{
 80018f4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_InitTick+0x40>)
 80018f8:	7818      	ldrb	r0, [r3, #0]
 80018fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018fe:	fbb3 f3f0 	udiv	r3, r3, r0
 8001902:	6810      	ldr	r0, [r2, #0]
 8001904:	fbb0 f0f3 	udiv	r0, r0, r3
 8001908:	f000 f9f0 	bl	8001cec <HAL_SYSTICK_Config>
 800190c:	4604      	mov	r4, r0
 800190e:	b958      	cbnz	r0, 8001928 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001910:	2d0f      	cmp	r5, #15
 8001912:	d809      	bhi.n	8001928 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	4602      	mov	r2, r0
 8001916:	4629      	mov	r1, r5
 8001918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800191c:	f000 f9b4 	bl	8001c88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4b04      	ldr	r3, [pc, #16]	; (8001934 <HAL_InitTick+0x44>)
 8001922:	4620      	mov	r0, r4
 8001924:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001926:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
 800192a:	e7fc      	b.n	8001926 <HAL_InitTick+0x36>
 800192c:	20000004 	.word	0x20000004
 8001930:	20000000 	.word	0x20000000
 8001934:	20000008 	.word	0x20000008

08001938 <HAL_Init>:
{
 8001938:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800193a:	2003      	movs	r0, #3
 800193c:	f000 f992 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff ffd5 	bl	80018f0 <HAL_InitTick>
  HAL_MspInit();
 8001946:	f7ff fc39 	bl	80011bc <HAL_MspInit>
}
 800194a:	2000      	movs	r0, #0
 800194c:	bd08      	pop	{r3, pc}
	...

08001950 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001950:	4a03      	ldr	r2, [pc, #12]	; (8001960 <HAL_IncTick+0x10>)
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_IncTick+0x14>)
 8001954:	6811      	ldr	r1, [r2, #0]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	440b      	add	r3, r1
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	200024d8 	.word	0x200024d8
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001968:	4b01      	ldr	r3, [pc, #4]	; (8001970 <HAL_GetTick+0x8>)
 800196a:	6818      	ldr	r0, [r3, #0]
}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	200024d8 	.word	0x200024d8

08001974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001974:	b538      	push	{r3, r4, r5, lr}
 8001976:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001978:	f7ff fff6 	bl	8001968 <HAL_GetTick>
 800197c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001980:	bf1e      	ittt	ne
 8001982:	4b04      	ldrne	r3, [pc, #16]	; (8001994 <HAL_Delay+0x20>)
 8001984:	781b      	ldrbne	r3, [r3, #0]
 8001986:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	1b43      	subs	r3, r0, r5
 800198e:	42a3      	cmp	r3, r4
 8001990:	d3fa      	bcc.n	8001988 <HAL_Delay+0x14>
  {
  }
}
 8001992:	bd38      	pop	{r3, r4, r5, pc}
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F7xx_HAL_VERSION;
}
 8001998:	4800      	ldr	r0, [pc, #0]	; (800199c <HAL_GetHalVersion+0x4>)
 800199a:	4770      	bx	lr
 800199c:	01030000 	.word	0x01030000

080019a0 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 80019a0:	4b01      	ldr	r3, [pc, #4]	; (80019a8 <HAL_GetREVID+0x8>)
 80019a2:	6818      	ldr	r0, [r3, #0]
}
 80019a4:	0c00      	lsrs	r0, r0, #16
 80019a6:	4770      	bx	lr
 80019a8:	e0042000 	.word	0xe0042000

080019ac <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80019ac:	4b02      	ldr	r3, [pc, #8]	; (80019b8 <HAL_GetDEVID+0xc>)
 80019ae:	6818      	ldr	r0, [r3, #0]
}
 80019b0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	e0042000 	.word	0xe0042000

080019bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019bc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019be:	4604      	mov	r4, r0
 80019c0:	2800      	cmp	r0, #0
 80019c2:	f000 809b 	beq.w	8001afc <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80019c6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80019c8:	b925      	cbnz	r5, 80019d4 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ca:	f7ff fc0f 	bl	80011ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ce:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019d0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019d6:	06db      	lsls	r3, r3, #27
 80019d8:	f100 808e 	bmi.w	8001af8 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80019de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019e2:	f023 0302 	bic.w	r3, r3, #2
 80019e6:	f043 0302 	orr.w	r3, r3, #2
 80019ea:	6423      	str	r3, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80019ec:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <HAL_ADC_Init+0x144>)
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80019f4:	605a      	str	r2, [r3, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	6861      	ldr	r1, [r4, #4]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019fe:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a00:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a10:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a12:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a1a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	430a      	orrs	r2, r1
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a20:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a22:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	430a      	orrs	r2, r1
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a30:	4934      	ldr	r1, [pc, #208]	; (8001b04 <HAL_ADC_Init+0x148>)
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a32:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a34:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a36:	428a      	cmp	r2, r1
 8001a38:	d052      	beq.n	8001ae0 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a3a:	6899      	ldr	r1, [r3, #8]
 8001a3c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001a40:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a42:	6899      	ldr	r1, [r3, #8]
 8001a44:	430a      	orrs	r2, r1
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a46:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a56:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a58:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a5a:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a5c:	f022 0202 	bic.w	r2, r2, #2
 8001a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001a68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a6a:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001a6e:	2a00      	cmp	r2, #0
 8001a70:	d03e      	beq.n	8001af0 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a72:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a74:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a7a:	3901      	subs	r1, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a7c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a84:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a8c:	605a      	str	r2, [r3, #4]
    ADC_CLEAR_ERRORCODE(hadc);
 8001a8e:	2000      	movs	r0, #0
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a92:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a94:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a98:	3901      	subs	r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a9e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001ab2:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ab6:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001ac8:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001aca:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ace:	f023 0303 	bic.w	r3, r3, #3
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001ade:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ae6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aee:	e7b2      	b.n	8001a56 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af6:	e7c9      	b.n	8001a8c <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001af8:	2001      	movs	r0, #1
 8001afa:	e7ed      	b.n	8001ad8 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001afc:	2001      	movs	r0, #1
 8001afe:	e7ee      	b.n	8001ade <HAL_ADC_Init+0x122>
 8001b00:	40012300 	.word	0x40012300
 8001b04:	0f000001 	.word	0x0f000001

08001b08 <HAL_ADC_ConfigChannel>:
  __IO uint32_t counter = 0;
 8001b08:	2300      	movs	r3, #0
{
 8001b0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8001b0c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001b0e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d079      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0x102>
 8001b16:	2301      	movs	r3, #1
 8001b18:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b1c:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b1e:	6803      	ldr	r3, [r0, #0]
 8001b20:	b2ae      	uxth	r6, r5
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b22:	2d09      	cmp	r5, #9
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001b24:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b26:	eb06 0446 	add.w	r4, r6, r6, lsl #1
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b2a:	d93a      	bls.n	8001ba2 <HAL_ADC_ConfigChannel+0x9a>
 8001b2c:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8001b30:	d037      	beq.n	8001ba2 <HAL_ADC_ConfigChannel+0x9a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b32:	3c1e      	subs	r4, #30
 8001b34:	f04f 0c07 	mov.w	ip, #7
 8001b38:	68df      	ldr	r7, [r3, #12]
 8001b3a:	fa0c fc04 	lsl.w	ip, ip, r4
 8001b3e:	ea27 070c 	bic.w	r7, r7, ip
 8001b42:	60df      	str	r7, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b44:	4f42      	ldr	r7, [pc, #264]	; (8001c50 <HAL_ADC_ConfigChannel+0x148>)
 8001b46:	42bd      	cmp	r5, r7
 8001b48:	d126      	bne.n	8001b98 <HAL_ADC_ConfigChannel+0x90>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001b4a:	68dc      	ldr	r4, [r3, #12]
 8001b4c:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b50:	60dc      	str	r4, [r3, #12]
  if (sConfig->Rank < 7)
 8001b52:	6849      	ldr	r1, [r1, #4]
 8001b54:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b56:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7)
 8001b5a:	d830      	bhi.n	8001bbe <HAL_ADC_ConfigChannel+0xb6>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b5c:	3a05      	subs	r2, #5
 8001b5e:	241f      	movs	r4, #31
 8001b60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b62:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b64:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b68:	ea21 0104 	bic.w	r1, r1, r4
 8001b6c:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b6e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b70:	430a      	orrs	r2, r1
 8001b72:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001b74:	4a37      	ldr	r2, [pc, #220]	; (8001c54 <HAL_ADC_ConfigChannel+0x14c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d108      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x84>
 8001b7a:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8001b7e:	d146      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x106>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001b80:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8001b84:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001b88:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001b92:	4618      	mov	r0, r3
}
 8001b94:	b003      	add	sp, #12
 8001b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b98:	68df      	ldr	r7, [r3, #12]
 8001b9a:	fa02 f404 	lsl.w	r4, r2, r4
 8001b9e:	433c      	orrs	r4, r7
 8001ba0:	e7d6      	b.n	8001b50 <HAL_ADC_ConfigChannel+0x48>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ba2:	f04f 0c07 	mov.w	ip, #7
 8001ba6:	691f      	ldr	r7, [r3, #16]
 8001ba8:	fa0c fc04 	lsl.w	ip, ip, r4
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bac:	fa02 f404 	lsl.w	r4, r2, r4
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bb0:	ea27 070c 	bic.w	r7, r7, ip
 8001bb4:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bb6:	691f      	ldr	r7, [r3, #16]
 8001bb8:	433c      	orrs	r4, r7
 8001bba:	611c      	str	r4, [r3, #16]
 8001bbc:	e7c9      	b.n	8001b52 <HAL_ADC_ConfigChannel+0x4a>
  else if (sConfig->Rank < 13)
 8001bbe:	290c      	cmp	r1, #12
 8001bc0:	f04f 011f 	mov.w	r1, #31
 8001bc4:	d80b      	bhi.n	8001bde <HAL_ADC_ConfigChannel+0xd6>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bc6:	3a23      	subs	r2, #35	; 0x23
 8001bc8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001bca:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bcc:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001bd0:	ea24 0101 	bic.w	r1, r4, r1
 8001bd4:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
 8001bdc:	e7ca      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x6c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001bde:	3a41      	subs	r2, #65	; 0x41
 8001be0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001be2:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001be4:	fa06 f202 	lsl.w	r2, r6, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001be8:	ea24 0101 	bic.w	r1, r4, r1
 8001bec:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001bee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bf4:	e7be      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x6c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <HAL_ADC_ConfigChannel+0x150>)
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001bfe:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c06:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c08:	e7c0      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	e7c2      	b.n	8001b94 <HAL_ADC_ConfigChannel+0x8c>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c0e:	2d12      	cmp	r5, #18
 8001c10:	d0f1      	beq.n	8001bf6 <HAL_ADC_ConfigChannel+0xee>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_ADC_ConfigChannel+0x148>)
 8001c14:	429d      	cmp	r5, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_ADC_ConfigChannel+0x114>
 8001c18:	2d11      	cmp	r5, #17
 8001c1a:	d1b7      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x84>
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_ADC_ConfigChannel+0x150>)
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001c24:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c2c:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <HAL_ADC_ConfigChannel+0x148>)
 8001c30:	429d      	cmp	r5, r3
 8001c32:	d1ab      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x84>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <HAL_ADC_ConfigChannel+0x154>)
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <HAL_ADC_ConfigChannel+0x158>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c3e:	220a      	movs	r2, #10
 8001c40:	4353      	muls	r3, r2
        counter--;
 8001c42:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001c44:	9b01      	ldr	r3, [sp, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0a0      	beq.n	8001b8c <HAL_ADC_ConfigChannel+0x84>
        counter--;
 8001c4a:	9b01      	ldr	r3, [sp, #4]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	e7f8      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x13a>
 8001c50:	10000012 	.word	0x10000012
 8001c54:	40012000 	.word	0x40012000
 8001c58:	40012300 	.word	0x40012300
 8001c5c:	20000000 	.word	0x20000000
 8001c60:	000f4240 	.word	0x000f4240

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c66:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001c72:	0412      	lsls	r2, r2, #16
 8001c74:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001c80:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c8a:	b530      	push	{r4, r5, lr}
 8001c8c:	68dc      	ldr	r4, [r3, #12]
 8001c8e:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c92:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c98:	2d04      	cmp	r5, #4
 8001c9a:	bf28      	it	cs
 8001c9c:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c9e:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ca4:	bf8c      	ite	hi
 8001ca6:	3c03      	subhi	r4, #3
 8001ca8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001caa:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 8001cae:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb4:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	fa01 f104 	lsl.w	r1, r1, r4
 8001cc0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001cc8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001cca:	db06      	blt.n	8001cda <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001cd0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001cd4:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001cd8:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	f000 000f 	and.w	r0, r0, #15
 8001cde:	4a02      	ldr	r2, [pc, #8]	; (8001ce8 <HAL_NVIC_SetPriority+0x60>)
 8001ce0:	5413      	strb	r3, [r2, r0]
 8001ce2:	e7f9      	b.n	8001cd8 <HAL_NVIC_SetPriority+0x50>
 8001ce4:	e000ed00 	.word	0xe000ed00
 8001ce8:	e000ed14 	.word	0xe000ed14

08001cec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cec:	3801      	subs	r0, #1
 8001cee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001cf2:	d20b      	bcs.n	8001d0c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <HAL_SYSTICK_Config+0x24>)
 8001cfa:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cfc:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cfe:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d04:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d06:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d08:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d0c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d14:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d16:	4604      	mov	r4, r0
 8001d18:	b908      	cbnz	r0, 8001d1e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001d1a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001d1c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d1e:	7f43      	ldrb	r3, [r0, #29]
 8001d20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d24:	b913      	cbnz	r3, 8001d2c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001d26:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001d28:	f7ff fa90 	bl	800124c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001d30:	7923      	ldrb	r3, [r4, #4]
 8001d32:	b9e3      	cbnz	r3, 8001d6e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <HAL_CRC_Init+0x70>)
 8001d38:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	f022 0218 	bic.w	r2, r2, #24
 8001d40:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001d42:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001d44:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001d46:	b9d2      	cbnz	r2, 8001d7e <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001d4c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8001d4e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	6961      	ldr	r1, [r4, #20]
 8001d54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d58:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001d5a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001d5c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d64:	430a      	orrs	r2, r1
 8001d66:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001d6c:	e7d6      	b.n	8001d1c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001d6e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8001d72:	4620      	mov	r0, r4
 8001d74:	f000 f808 	bl	8001d88 <HAL_CRCEx_Polynomial_Set>
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	d0e2      	beq.n	8001d42 <HAL_CRC_Init+0x2e>
 8001d7c:	e7cd      	b.n	8001d1a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001d7e:	6922      	ldr	r2, [r4, #16]
 8001d80:	e7e4      	b.n	8001d4c <HAL_CRC_Init+0x38>
 8001d82:	bf00      	nop
 8001d84:	04c11db7 	.word	0x04c11db7

08001d88 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001d88:	231f      	movs	r3, #31
{
 8001d8a:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	d31c      	bcc.n	8001dca <HAL_CRCEx_Polynomial_Set+0x42>
 8001d90:	fa21 f403 	lsr.w	r4, r1, r3
 8001d94:	07e4      	lsls	r4, r4, #31
 8001d96:	d5f9      	bpl.n	8001d8c <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8001d98:	2a10      	cmp	r2, #16
 8001d9a:	d012      	beq.n	8001dc2 <HAL_CRCEx_Polynomial_Set+0x3a>
 8001d9c:	d804      	bhi.n	8001da8 <HAL_CRCEx_Polynomial_Set+0x20>
 8001d9e:	b13a      	cbz	r2, 8001db0 <HAL_CRCEx_Polynomial_Set+0x28>
 8001da0:	2a08      	cmp	r2, #8
 8001da2:	d010      	beq.n	8001dc6 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8001da4:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8001da6:	e00b      	b.n	8001dc0 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8001da8:	2a18      	cmp	r2, #24
 8001daa:	d1fb      	bne.n	8001da4 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001dac:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 8001dae:	d8f9      	bhi.n	8001da4 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001db0:	6800      	ldr	r0, [r0, #0]
 8001db2:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001db4:	6883      	ldr	r3, [r0, #8]
 8001db6:	f023 0318 	bic.w	r3, r3, #24
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	6082      	str	r2, [r0, #8]
 8001dbe:	2000      	movs	r0, #0
}
 8001dc0:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001dc2:	2b07      	cmp	r3, #7
 8001dc4:	e7f3      	b.n	8001dae <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	e7f1      	b.n	8001dae <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 8001dca:	2a00      	cmp	r2, #0
 8001dcc:	d1ea      	bne.n	8001da4 <HAL_CRCEx_Polynomial_Set+0x1c>
 8001dce:	e7ef      	b.n	8001db0 <HAL_CRCEx_Polynomial_Set+0x28>

08001dd0 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001dd0:	7c03      	ldrb	r3, [r0, #16]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d05c      	beq.n	8001e90 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	6803      	ldr	r3, [r0, #0]
 8001dda:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8001dde:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8001de2:	07ca      	lsls	r2, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8001de4:	6181      	str	r1, [r0, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8001de6:	d507      	bpl.n	8001df8 <HAL_DSI_ConfigErrorMonitor+0x28>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8001de8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001dec:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8001df0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8001df4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8001df8:	078a      	lsls	r2, r1, #30
 8001dfa:	d505      	bpl.n	8001e08 <HAL_DSI_ConfigErrorMonitor+0x38>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8001dfc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8001e00:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 8001e04:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8001e08:	074a      	lsls	r2, r1, #29
 8001e0a:	d505      	bpl.n	8001e18 <HAL_DSI_ConfigErrorMonitor+0x48>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8001e0c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8001e18:	070a      	lsls	r2, r1, #28
 8001e1a:	d505      	bpl.n	8001e28 <HAL_DSI_ConfigErrorMonitor+0x58>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8001e1c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001e20:	f042 0202 	orr.w	r2, r2, #2
 8001e24:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8001e28:	06ca      	lsls	r2, r1, #27
 8001e2a:	d505      	bpl.n	8001e38 <HAL_DSI_ConfigErrorMonitor+0x68>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8001e2c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001e30:	f042 020c 	orr.w	r2, r2, #12
 8001e34:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8001e38:	068a      	lsls	r2, r1, #26
 8001e3a:	d505      	bpl.n	8001e48 <HAL_DSI_ConfigErrorMonitor+0x78>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8001e3c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001e40:	f042 0210 	orr.w	r2, r2, #16
 8001e44:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8001e48:	064a      	lsls	r2, r1, #25
 8001e4a:	d505      	bpl.n	8001e58 <HAL_DSI_ConfigErrorMonitor+0x88>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8001e4c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001e50:	f042 0220 	orr.w	r2, r2, #32
 8001e54:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8001e58:	060a      	lsls	r2, r1, #24
 8001e5a:	d505      	bpl.n	8001e68 <HAL_DSI_ConfigErrorMonitor+0x98>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8001e5c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001e60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e64:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8001e68:	05ca      	lsls	r2, r1, #23
 8001e6a:	d505      	bpl.n	8001e78 <HAL_DSI_ConfigErrorMonitor+0xa8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8001e6c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001e70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e74:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8001e78:	058a      	lsls	r2, r1, #22
 8001e7a:	d505      	bpl.n	8001e88 <HAL_DSI_ConfigErrorMonitor+0xb8>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8001e7c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8001e80:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 8001e84:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8001e88:	2300      	movs	r3, #0
 8001e8a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8001e90:	2002      	movs	r0, #2
}
 8001e92:	4770      	bx	lr

08001e94 <HAL_DSI_Init>:
{
 8001e94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e96:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8001e98:	4604      	mov	r4, r0
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	f000 80a9 	beq.w	8001ff2 <HAL_DSI_Init+0x15e>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8001ea0:	7c43      	ldrb	r3, [r0, #17]
 8001ea2:	b90b      	cbnz	r3, 8001ea8 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8001ea4:	f7ff f9e8 	bl	8001278 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8001eac:	2300      	movs	r3, #0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001eb6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001eba:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8001ebe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8001ec2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8001eca:	f7ff fd4d 	bl	8001968 <HAL_GetTick>
 8001ece:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8001ed0:	6822      	ldr	r2, [r4, #0]
 8001ed2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
 8001ed6:	04d9      	lsls	r1, r3, #19
 8001ed8:	d57a      	bpl.n	8001fd0 <HAL_DSI_Init+0x13c>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8001eda:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8001ede:	f423 335e 	bic.w	r3, r3, #227328	; 0x37800
 8001ee2:	f423 73fe 	bic.w	r3, r3, #508	; 0x1fc
 8001ee6:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8001eea:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8001eee:	e9d5 0300 	ldrd	r0, r3, [r5]
 8001ef2:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8001ef4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8001ef8:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8001efa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8001efe:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8001f00:	430b      	orrs	r3, r1
 8001f02:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8001f06:	2300      	movs	r3, #0
 8001f08:	9301      	str	r3, [sp, #4]
 8001f0a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8001f16:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8001f22:	f7ff fd27 	bl	8001974 <HAL_Delay>
  tickstart = HAL_GetTick();
 8001f26:	f7ff fd1f 	bl	8001968 <HAL_GetTick>
 8001f2a:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001f32:	05d2      	lsls	r2, r2, #23
 8001f34:	d556      	bpl.n	8001fe4 <HAL_DSI_Init+0x150>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8001f36:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8001f3a:	f246 10a8 	movw	r0, #25000	; 0x61a8
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8001f3e:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8001f40:	f042 0206 	orr.w	r2, r2, #6
 8001f44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8001f48:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001f4c:	f022 0203 	bic.w	r2, r2, #3
 8001f50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8001f54:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001f58:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8001f5a:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8001f5c:	f042 0201 	orr.w	r2, r2, #1
 8001f60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8001f64:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001f68:	f022 0203 	bic.w	r2, r2, #3
 8001f6c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8001f70:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8001f74:	430a      	orrs	r2, r1
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8001f76:	68a1      	ldr	r1, [r4, #8]
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8001f78:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f82:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	430a      	orrs	r2, r1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8001f88:	491b      	ldr	r1, [pc, #108]	; (8001ff8 <HAL_DSI_Init+0x164>)
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8001f8a:	609a      	str	r2, [r3, #8]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8001f8c:	686a      	ldr	r2, [r5, #4]
 8001f8e:	2a01      	cmp	r2, #1
 8001f90:	bf38      	it	cc
 8001f92:	2201      	movcc	r2, #1
 8001f94:	434a      	muls	r2, r1
 8001f96:	68a9      	ldr	r1, [r5, #8]
 8001f98:	f001 0103 	and.w	r1, r1, #3
 8001f9c:	408a      	lsls	r2, r1
 8001f9e:	6829      	ldr	r1, [r5, #0]
 8001fa0:	4341      	muls	r1, r0
  hdsi->Instance->IER[0U] = 0U;
 8001fa2:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8001fa4:	fbb2 f2f1 	udiv	r2, r2, r1
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8001fa8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8001fac:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001fb0:	f8c3 1418 	str.w	r1, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8001fb4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8001fbe:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8001fc2:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->State = HAL_DSI_STATE_READY;
 8001fc6:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8001fc8:	6160      	str	r0, [r4, #20]
  hdsi->ErrorMsk = 0U;
 8001fca:	61a0      	str	r0, [r4, #24]
  hdsi->State = HAL_DSI_STATE_READY;
 8001fcc:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8001fce:	e007      	b.n	8001fe0 <HAL_DSI_Init+0x14c>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001fd0:	f7ff fcca 	bl	8001968 <HAL_GetTick>
 8001fd4:	1b80      	subs	r0, r0, r6
 8001fd6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fda:	f67f af79 	bls.w	8001ed0 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8001fde:	2003      	movs	r0, #3
}
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fcc0 	bl	8001968 <HAL_GetTick>
 8001fe8:	1b80      	subs	r0, r0, r6
 8001fea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001fee:	d99d      	bls.n	8001f2c <HAL_DSI_Init+0x98>
 8001ff0:	e7f5      	b.n	8001fde <HAL_DSI_Init+0x14a>
    return HAL_ERROR;
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	e7f4      	b.n	8001fe0 <HAL_DSI_Init+0x14c>
 8001ff6:	bf00      	nop
 8001ff8:	003d0900 	.word	0x003d0900

08001ffc <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8001ffc:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8001ffe:	7c03      	ldrb	r3, [r0, #16]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d02a      	beq.n	800205a <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8002004:	6802      	ldr	r2, [r0, #0]
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_DSI_ConfigCommand+0x64>)
 8002008:	6e94      	ldr	r4, [r2, #104]	; 0x68
 800200a:	4023      	ands	r3, r4
 800200c:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800200e:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8002010:	e9d1 3500 	ldrd	r3, r5, [r1]
 8002014:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8002016:	688d      	ldr	r5, [r1, #8]
 8002018:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800201a:	68cd      	ldr	r5, [r1, #12]
 800201c:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800201e:	690d      	ldr	r5, [r1, #16]
 8002020:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8002022:	694d      	ldr	r5, [r1, #20]
 8002024:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8002026:	698d      	ldr	r5, [r1, #24]
 8002028:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800202a:	69cd      	ldr	r5, [r1, #28]
 800202c:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800202e:	6a0d      	ldr	r5, [r1, #32]
 8002030:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8002032:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8002034:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8002036:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8002038:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800203a:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800203c:	6b09      	ldr	r1, [r1, #48]	; 0x30
                           LPCmd->LPDcsLongWrite      | \
 800203e:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8002040:	4323      	orrs	r3, r4
 8002042:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8002044:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8002046:	f023 0302 	bic.w	r3, r3, #2
 800204a:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800204c:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800204e:	430b      	orrs	r3, r1
 8002050:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8002052:	2300      	movs	r3, #0
 8002054:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8002056:	4618      	mov	r0, r3
}
 8002058:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800205a:	2002      	movs	r0, #2
 800205c:	e7fc      	b.n	8002058 <HAL_DSI_ConfigCommand+0x5c>
 800205e:	bf00      	nop
 8002060:	fef080ff 	.word	0xfef080ff

08002064 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002064:	7c03      	ldrb	r3, [r0, #16]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d00b      	beq.n	8002082 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800206a:	6803      	ldr	r3, [r0, #0]
 800206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800206e:	f022 021f 	bic.w	r2, r2, #31
 8002072:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8002074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002076:	4311      	orrs	r1, r2
 8002078:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800207a:	2300      	movs	r3, #0
 800207c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800207e:	4618      	mov	r0, r3
 8002080:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8002082:	2002      	movs	r0, #2
}
 8002084:	4770      	bx	lr

08002086 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8002086:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002088:	7c03      	ldrb	r3, [r0, #16]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d035      	beq.n	80020fa <HAL_DSI_ConfigPhyTimer+0x74>
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800208e:	6803      	ldr	r3, [r0, #0]
  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8002090:	e9d1 2400 	ldrd	r2, r4, [r1]
 8002094:	4294      	cmp	r4, r2
 8002096:	bf38      	it	cc
 8002098:	4614      	movcc	r4, r2
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800209a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800209e:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80020a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80020a6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80020aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80020ae:	4322      	orrs	r2, r4
 80020b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80020b4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80020b8:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80020bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80020c0:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80020c4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80020c8:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80020ca:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80020ce:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80020d0:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80020d2:	432a      	orrs	r2, r5
 80020d4:	4322      	orrs	r2, r4
 80020d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80020da:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80020de:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80020e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80020e6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80020ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80020ee:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80020f2:	2300      	movs	r3, #0
 80020f4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80020f6:	4618      	mov	r0, r3
}
 80020f8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80020fa:	2002      	movs	r0, #2
 80020fc:	e7fc      	b.n	80020f8 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08002100 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8002100:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002102:	7c03      	ldrb	r3, [r0, #16]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d05c      	beq.n	80021c2 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8002108:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800210a:	680c      	ldr	r4, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800210c:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800210e:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8002110:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002114:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800211c:	684c      	ldr	r4, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800211e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8002120:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002122:	b292      	uxth	r2, r2
 8002124:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8002126:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002128:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800212c:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800212e:	4a26      	ldr	r2, [pc, #152]	; (80021c8 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8002130:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8002132:	4014      	ands	r4, r2
 8002134:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8002136:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8002138:	432c      	orrs	r4, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800213a:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800213c:	679c      	str	r4, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800213e:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8002140:	4014      	ands	r4, r2
 8002142:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8002144:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8002146:	432c      	orrs	r4, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8002148:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800214a:	67dc      	str	r4, [r3, #124]	; 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800214c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8002150:	4014      	ands	r4, r2
 8002152:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8002156:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800215a:	432c      	orrs	r4, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800215c:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800215e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8002162:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8002166:	4014      	ands	r4, r2
 8002168:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800216c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8002170:	432c      	orrs	r4, r5
 8002172:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8002176:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800217a:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 800217e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8002182:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8002186:	698d      	ldr	r5, [r1, #24]
 8002188:	432c      	orrs	r4, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800218a:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800218c:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800218e:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8002192:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8002196:	4014      	ands	r4, r2
 8002198:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800219c:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80021a0:	432c      	orrs	r4, r5
 80021a2:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80021a6:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80021aa:	4022      	ands	r2, r4
 80021ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80021b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021b4:	430a      	orrs	r2, r1
 80021b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80021ba:	2300      	movs	r3, #0
 80021bc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80021be:	4618      	mov	r0, r3
}
 80021c0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80021c2:	2002      	movs	r0, #2
 80021c4:	e7fc      	b.n	80021c0 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80021c6:	bf00      	nop
 80021c8:	ffff0000 	.word	0xffff0000

080021cc <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80021cc:	7c03      	ldrb	r3, [r0, #16]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d010      	beq.n	80021f4 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80021d2:	6803      	ldr	r3, [r0, #0]
 80021d4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80021d8:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 80021dc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80021e0:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80021e4:	ea42 6141 	orr.w	r1, r2, r1, lsl #25
 80021e8:	f8c3 141c 	str.w	r1, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80021ec:	2300      	movs	r3, #0
 80021ee:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80021f0:	4618      	mov	r0, r3
 80021f2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80021f4:	2002      	movs	r0, #2
}
 80021f6:	4770      	bx	lr

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021fc:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021fe:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80023bc <HAL_GPIO_Init+0x1c4>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002202:	4a6c      	ldr	r2, [pc, #432]	; (80023b4 <HAL_GPIO_Init+0x1bc>)
    ioposition = ((uint32_t)0x01) << position;
 8002204:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002206:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8002208:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800220a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800220e:	43ac      	bics	r4, r5
 8002210:	f040 80b6 	bne.w	8002380 <HAL_GPIO_Init+0x188>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002214:	684d      	ldr	r5, [r1, #4]
 8002216:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800221a:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800221c:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002220:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002224:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002226:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002228:	2f01      	cmp	r7, #1
 800222a:	d834      	bhi.n	8002296 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 800222c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800222e:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8002232:	68cf      	ldr	r7, [r1, #12]
 8002234:	fa07 f708 	lsl.w	r7, r7, r8
 8002238:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800223c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800223e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002240:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002244:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002248:	409f      	lsls	r7, r3
 800224a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800224e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002250:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002252:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002254:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002258:	688f      	ldr	r7, [r1, #8]
 800225a:	fa07 f708 	lsl.w	r7, r7, r8
 800225e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8002262:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002264:	d119      	bne.n	800229a <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8002266:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800226a:	f003 0b07 	and.w	fp, r3, #7
 800226e:	f04f 0e0f 	mov.w	lr, #15
 8002272:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8002276:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800227a:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800227e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002282:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002286:	690f      	ldr	r7, [r1, #16]
 8002288:	fa07 f70b 	lsl.w	r7, r7, fp
 800228c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8002290:	f8ca 7020 	str.w	r7, [sl, #32]
 8002294:	e001      	b.n	800229a <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002296:	2c03      	cmp	r4, #3
 8002298:	d1da      	bne.n	8002250 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 800229a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800229c:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022a0:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022a4:	ea06 0607 	and.w	r6, r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022a8:	ea46 0604 	orr.w	r6, r6, r4
      GPIOx->MODER = temp;
 80022ac:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022ae:	d067      	beq.n	8002380 <HAL_GPIO_Init+0x188>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b0:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80022b4:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022b8:	f003 0703 	and.w	r7, r3, #3
 80022bc:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80022c4:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022c8:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ca:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80022ce:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80022d2:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80022d6:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80022da:	9401      	str	r4, [sp, #4]
 80022dc:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022de:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2];
 80022e2:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022e6:	ea28 0e04 	bic.w	lr, r8, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022ea:	4c33      	ldr	r4, [pc, #204]	; (80023b8 <HAL_GPIO_Init+0x1c0>)
 80022ec:	42a0      	cmp	r0, r4
 80022ee:	d04e      	beq.n	800238e <HAL_GPIO_Init+0x196>
 80022f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80022f4:	42a0      	cmp	r0, r4
 80022f6:	d04c      	beq.n	8002392 <HAL_GPIO_Init+0x19a>
 80022f8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80022fc:	42a0      	cmp	r0, r4
 80022fe:	d04a      	beq.n	8002396 <HAL_GPIO_Init+0x19e>
 8002300:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002304:	42a0      	cmp	r0, r4
 8002306:	d048      	beq.n	800239a <HAL_GPIO_Init+0x1a2>
 8002308:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800230c:	42a0      	cmp	r0, r4
 800230e:	d046      	beq.n	800239e <HAL_GPIO_Init+0x1a6>
 8002310:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002314:	42a0      	cmp	r0, r4
 8002316:	d044      	beq.n	80023a2 <HAL_GPIO_Init+0x1aa>
 8002318:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800231c:	42a0      	cmp	r0, r4
 800231e:	d042      	beq.n	80023a6 <HAL_GPIO_Init+0x1ae>
 8002320:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002324:	42a0      	cmp	r0, r4
 8002326:	d040      	beq.n	80023aa <HAL_GPIO_Init+0x1b2>
 8002328:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800232c:	42a0      	cmp	r0, r4
 800232e:	d03e      	beq.n	80023ae <HAL_GPIO_Init+0x1b6>
 8002330:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002334:	42a0      	cmp	r0, r4
 8002336:	bf0c      	ite	eq
 8002338:	2409      	moveq	r4, #9
 800233a:	240a      	movne	r4, #10
 800233c:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800233e:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002340:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8002344:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8002346:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800234a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800234c:	bf54      	ite	pl
 800234e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002350:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002354:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8002356:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8002358:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800235a:	bf54      	ite	pl
 800235c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800235e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002362:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8002364:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8002366:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8002368:	bf54      	ite	pl
 800236a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800236c:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002370:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8002372:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8002374:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002376:	bf54      	ite	pl
 8002378:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800237a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800237e:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002380:	3301      	adds	r3, #1
 8002382:	2b10      	cmp	r3, #16
 8002384:	f47f af3e 	bne.w	8002204 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002388:	b003      	add	sp, #12
 800238a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800238e:	2400      	movs	r4, #0
 8002390:	e7d4      	b.n	800233c <HAL_GPIO_Init+0x144>
 8002392:	2401      	movs	r4, #1
 8002394:	e7d2      	b.n	800233c <HAL_GPIO_Init+0x144>
 8002396:	2402      	movs	r4, #2
 8002398:	e7d0      	b.n	800233c <HAL_GPIO_Init+0x144>
 800239a:	2403      	movs	r4, #3
 800239c:	e7ce      	b.n	800233c <HAL_GPIO_Init+0x144>
 800239e:	2404      	movs	r4, #4
 80023a0:	e7cc      	b.n	800233c <HAL_GPIO_Init+0x144>
 80023a2:	2405      	movs	r4, #5
 80023a4:	e7ca      	b.n	800233c <HAL_GPIO_Init+0x144>
 80023a6:	2406      	movs	r4, #6
 80023a8:	e7c8      	b.n	800233c <HAL_GPIO_Init+0x144>
 80023aa:	2407      	movs	r4, #7
 80023ac:	e7c6      	b.n	800233c <HAL_GPIO_Init+0x144>
 80023ae:	2408      	movs	r4, #8
 80023b0:	e7c4      	b.n	800233c <HAL_GPIO_Init+0x144>
 80023b2:	bf00      	nop
 80023b4:	40013c00 	.word	0x40013c00
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40023800 	.word	0x40023800

080023c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c0:	b10a      	cbz	r2, 80023c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023c2:	6181      	str	r1, [r0, #24]
  }
}
 80023c4:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023c6:	0409      	lsls	r1, r1, #16
 80023c8:	e7fb      	b.n	80023c2 <HAL_GPIO_WritePin+0x2>
	...

080023cc <MMC_ReadExtCSD.constprop.0>:
  * @param  pFieldData: Pointer to the read buffer
  * @param  FieldIndex: Index of the field to be read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static uint32_t MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData, uint16_t FieldIndex, uint32_t Timeout)
 80023cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d0:	b087      	sub	sp, #28
 80023d2:	4604      	mov	r4, r0
 80023d4:	4689      	mov	r9, r1
 80023d6:	4617      	mov	r7, r2
 80023d8:	469a      	mov	sl, r3
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80023da:	f7ff fac5 	bl	8001968 <HAL_GetTick>
  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 512;
 80023de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023e2:	f44f 7300 	mov.w	r3, #512	; 0x200
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 80023e6:	2500      	movs	r5, #0
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80023e8:	2190      	movs	r1, #144	; 0x90
  uint32_t tickstart = HAL_GetTick();
 80023ea:	4680      	mov	r8, r0
  hmmc->Instance->DCTRL = 0;
 80023ec:	6820      	ldr	r0, [r4, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80023ee:	2601      	movs	r6, #1
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 80023f0:	63a5      	str	r5, [r4, #56]	; 0x38
  hmmc->Instance->DCTRL = 0;
 80023f2:	62c5      	str	r5, [r0, #44]	; 0x2c
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80023f4:	9504      	str	r5, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80023f6:	9605      	str	r6, [sp, #20]
  config.DataLength    = 512;
 80023f8:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80023fc:	2302      	movs	r3, #2
 80023fe:	e9cd 1302 	strd	r1, r3, [sp, #8]
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8002402:	4669      	mov	r1, sp
 8002404:	f002 f934 	bl	8004670 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8002408:	4629      	mov	r1, r5
 800240a:	6820      	ldr	r0, [r4, #0]
 800240c:	f002 fa75 	bl	80048fa <SDMMC_CmdSendEXTCSD>
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002410:	4605      	mov	r5, r0
 8002412:	b378      	cbz	r0, 8002474 <MMC_ReadExtCSD.constprop.0+0xa8>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <MMC_ReadExtCSD.constprop.0+0xd8>)
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 800241a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800241c:	4305      	orrs	r5, r0
 800241e:	63a5      	str	r5, [r4, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
    return HAL_ERROR;
 8002420:	4635      	mov	r5, r6
    hmmc->State = HAL_MMC_STATE_READY;
 8002422:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);

  hmmc->State = HAL_MMC_STATE_READY;

  return HAL_OK;
}
 8002426:	4628      	mov	r0, r5
 8002428:	b007      	add	sp, #28
 800242a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 800242e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	d50d      	bpl.n	8002450 <MMC_ReadExtCSD.constprop.0+0x84>
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8002434:	6820      	ldr	r0, [r4, #0]
 8002436:	f002 f8fa 	bl	800462e <SDMMC_ReadFIFO>
        if ((i + count) == ((uint32_t)FieldIndex/4U))
 800243a:	eb0b 0306 	add.w	r3, fp, r6
      for(count = 0U; count < 8U; count++)
 800243e:	3601      	adds	r6, #1
        if ((i + count) == ((uint32_t)FieldIndex/4U))
 8002440:	429f      	cmp	r7, r3
          *pFieldData = tmp_data;
 8002442:	bf08      	it	eq
 8002444:	f8c9 0000 	streq.w	r0, [r9]
      for(count = 0U; count < 8U; count++)
 8002448:	2e08      	cmp	r6, #8
 800244a:	d1f3      	bne.n	8002434 <MMC_ReadExtCSD.constprop.0+0x68>
      i += 8U;
 800244c:	f10b 0b08 	add.w	fp, fp, #8
    if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002450:	f7ff fa8a 	bl	8001968 <HAL_GetTick>
 8002454:	eba0 0008 	sub.w	r0, r0, r8
 8002458:	4550      	cmp	r0, sl
 800245a:	d30d      	bcc.n	8002478 <MMC_ReadExtCSD.constprop.0+0xac>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800245c:	6823      	ldr	r3, [r4, #0]
      return HAL_TIMEOUT;
 800245e:	2503      	movs	r5, #3
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002460:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <MMC_ReadExtCSD.constprop.0+0xd8>)
 8002462:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8002464:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002466:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800246a:	63a3      	str	r3, [r4, #56]	; 0x38
      hmmc->State= HAL_MMC_STATE_READY;
 800246c:	2301      	movs	r3, #1
 800246e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8002472:	e7d8      	b.n	8002426 <MMC_ReadExtCSD.constprop.0+0x5a>
        if ((i + count) == ((uint32_t)FieldIndex/4U))
 8002474:	08bf      	lsrs	r7, r7, #2
  uint32_t i = 0;
 8002476:	4683      	mov	fp, r0
  while(!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002478:	6820      	ldr	r0, [r4, #0]
 800247a:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800247c:	f416 7695 	ands.w	r6, r6, #298	; 0x12a
 8002480:	d0d5      	beq.n	800242e <MMC_ReadExtCSD.constprop.0+0x62>
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8002482:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002484:	0409      	lsls	r1, r1, #16
 8002486:	f002 fa20 	bl	80048ca <SDMMC_CmdSendStatus>
  if(errorstate != HAL_MMC_ERROR_NONE)
 800248a:	b110      	cbz	r0, 8002492 <MMC_ReadExtCSD.constprop.0+0xc6>
    hmmc->ErrorCode |= errorstate;
 800248c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800248e:	4318      	orrs	r0, r3
 8002490:	63a0      	str	r0, [r4, #56]	; 0x38
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	f240 523a 	movw	r2, #1338	; 0x53a
 8002498:	639a      	str	r2, [r3, #56]	; 0x38
  hmmc->State = HAL_MMC_STATE_READY;
 800249a:	2301      	movs	r3, #1
 800249c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80024a0:	e7c1      	b.n	8002426 <MMC_ReadExtCSD.constprop.0+0x5a>
 80024a2:	bf00      	nop
 80024a4:	004005ff 	.word	0x004005ff

080024a8 <HAL_MMC_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80024a8:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 80024aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024ac:	460c      	mov	r4, r1
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80024ae:	0f9a      	lsrs	r2, r3, #30
  uint32_t block_nbr = 0;
 80024b0:	2100      	movs	r1, #0
{
 80024b2:	4605      	mov	r5, r0
  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80024b4:	7022      	strb	r2, [r4, #0]
  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80024b6:	f3c3 6283 	ubfx	r2, r3, #26, #4
  uint32_t block_nbr = 0;
 80024ba:	9101      	str	r1, [sp, #4]
  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80024bc:	7062      	strb	r2, [r4, #1]
  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 80024be:	f3c3 6201 	ubfx	r2, r3, #24, #2
 80024c2:	70a2      	strb	r2, [r4, #2]
  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 80024c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80024c8:	70e2      	strb	r2, [r4, #3]
  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 80024ca:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 80024ce:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 80024d0:	7122      	strb	r2, [r4, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 80024d2:	7163      	strb	r3, [r4, #5]
  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 80024d4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80024d6:	0d13      	lsrs	r3, r2, #20
 80024d8:	80e3      	strh	r3, [r4, #6]
  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 80024da:	f3c2 4303 	ubfx	r3, r2, #16, #4
 80024de:	7223      	strb	r3, [r4, #8]
  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 80024e0:	f3c2 33c0 	ubfx	r3, r2, #15, #1
 80024e4:	7263      	strb	r3, [r4, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 80024e6:	f3c2 3380 	ubfx	r3, r2, #14, #1
 80024ea:	72a3      	strb	r3, [r4, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 80024ec:	f3c2 3340 	ubfx	r3, r2, #13, #1
 80024f0:	72e3      	strb	r3, [r4, #11]
  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 80024f2:	f3c2 3300 	ubfx	r3, r2, #12, #1
 80024f6:	7323      	strb	r3, [r4, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80024f8:	7361      	strb	r1, [r4, #13]
  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 80024fa:	f640 71fc 	movw	r1, #4092	; 0xffc
 80024fe:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002500:	ea01 0282 	and.w	r2, r1, r2, lsl #2
  if(MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8002504:	a901      	add	r1, sp, #4
  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8002506:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 800250a:	6122      	str	r2, [r4, #16]
  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 800250c:	f3c3 62c2 	ubfx	r2, r3, #27, #3
 8002510:	7522      	strb	r2, [r4, #20]
  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8002512:	f3c3 6202 	ubfx	r2, r3, #24, #3
 8002516:	7562      	strb	r2, [r4, #21]
  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8002518:	f3c3 5242 	ubfx	r2, r3, #21, #3
 800251c:	75a2      	strb	r2, [r4, #22]
  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 800251e:	f3c3 4282 	ubfx	r2, r3, #18, #3
  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8002522:	f3c3 33c2 	ubfx	r3, r3, #15, #3
  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8002526:	75e2      	strb	r2, [r4, #23]
  if(MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8002528:	22d4      	movs	r2, #212	; 0xd4
  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 800252a:	7623      	strb	r3, [r4, #24]
  if(MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 800252c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8002530:	f7ff ff4c 	bl	80023cc <MMC_ReadExtCSD.constprop.0>
 8002534:	2800      	cmp	r0, #0
 8002536:	d16d      	bne.n	8002614 <HAL_MMC_GetCardCSD+0x16c>
  if(hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8002538:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800253a:	2b00      	cmp	r3, #0
 800253c:	d156      	bne.n	80025ec <HAL_MMC_GetCardCSD+0x144>
    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800253e:	6923      	ldr	r3, [r4, #16]
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002540:	7e22      	ldrb	r2, [r4, #24]
    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002542:	3301      	adds	r3, #1
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002544:	f002 0207 	and.w	r2, r2, #7
 8002548:	3202      	adds	r2, #2
 800254a:	fa03 f202 	lsl.w	r2, r3, r2
 800254e:	652a      	str	r2, [r5, #80]	; 0x50
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002550:	7a23      	ldrb	r3, [r4, #8]
 8002552:	f003 010f 	and.w	r1, r3, #15
 8002556:	2301      	movs	r3, #1
 8002558:	408b      	lsls	r3, r1
 800255a:	656b      	str	r3, [r5, #84]	; 0x54
    hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 800255c:	0a5b      	lsrs	r3, r3, #9
 800255e:	4353      	muls	r3, r2
 8002560:	65ab      	str	r3, [r5, #88]	; 0x58
    hmmc->MmcCard.LogBlockSize = 512U;
 8002562:	f44f 7300 	mov.w	r3, #512	; 0x200
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8002566:	65eb      	str	r3, [r5, #92]	; 0x5c
  pCSD->Reserved3 = 0;
 8002568:	2000      	movs	r0, #0
  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 800256a:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800256c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8002570:	7662      	strb	r2, [r4, #25]
  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8002572:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8002576:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 800257a:	76a2      	strb	r2, [r4, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 800257c:	76e3      	strb	r3, [r4, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 800257e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8002580:	0fda      	lsrs	r2, r3, #31
 8002582:	7722      	strb	r2, [r4, #28]
  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8002584:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8002588:	7762      	strb	r2, [r4, #29]
  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 800258a:	f3c3 6282 	ubfx	r2, r3, #26, #3
 800258e:	77a2      	strb	r2, [r4, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8002590:	f3c3 5283 	ubfx	r2, r3, #22, #4
 8002594:	77e2      	strb	r2, [r4, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8002596:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800259a:	f884 2020 	strb.w	r2, [r4, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 800259e:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 80025a2:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 80025a6:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 80025aa:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80025ae:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 80025b2:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80025b6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 80025ba:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80025be:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 80025c2:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80025c6:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 80025ca:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80025ce:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 80025d2:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 80025d6:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 80025da:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 80025de:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
}
 80025e8:	b003      	add	sp, #12
 80025ea:	bd30      	pop	{r4, r5, pc}
  else if(hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d106      	bne.n	80025fe <HAL_MMC_GetCardCSD+0x156>
    hmmc->MmcCard.BlockNbr = block_nbr;
 80025f0:	9b01      	ldr	r3, [sp, #4]
 80025f2:	652b      	str	r3, [r5, #80]	; 0x50
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 80025f4:	65ab      	str	r3, [r5, #88]	; 0x58
    hmmc->MmcCard.BlockSize = 512U;
 80025f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025fa:	656b      	str	r3, [r5, #84]	; 0x54
 80025fc:	e7b3      	b.n	8002566 <HAL_MMC_GetCardCSD+0xbe>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80025fe:	682b      	ldr	r3, [r5, #0]
    hmmc->State = HAL_MMC_STATE_READY;
 8002600:	2001      	movs	r0, #1
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <HAL_MMC_GetCardCSD+0x170>)
 8002604:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8002606:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260c:	63ab      	str	r3, [r5, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 800260e:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    return HAL_ERROR;
 8002612:	e7e9      	b.n	80025e8 <HAL_MMC_GetCardCSD+0x140>
    return HAL_ERROR;
 8002614:	2001      	movs	r0, #1
 8002616:	e7e7      	b.n	80025e8 <HAL_MMC_GetCardCSD+0x140>
 8002618:	004005ff 	.word	0x004005ff

0800261c <HAL_MMC_GetCardExtCSD>:
{
 800261c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002620:	460e      	mov	r6, r1
 8002622:	b087      	sub	sp, #28
 8002624:	4604      	mov	r4, r0
 8002626:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7ff f99e 	bl	8001968 <HAL_GetTick>
 800262c:	4680      	mov	r8, r0
  if(NULL == pExtCSD)
 800262e:	b946      	cbnz	r6, 8002642 <HAL_MMC_GetCardExtCSD+0x26>
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8002630:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002632:	2501      	movs	r5, #1
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8002634:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002638:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800263a:	4628      	mov	r0, r5
 800263c:	b007      	add	sp, #28
 800263e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if(hmmc->State == HAL_MMC_STATE_READY)
 8002642:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8002646:	2700      	movs	r7, #0
 8002648:	2b01      	cmp	r3, #1
 800264a:	b2dd      	uxtb	r5, r3
 800264c:	d16e      	bne.n	800272c <HAL_MMC_GetCardExtCSD+0x110>
    hmmc->State = HAL_MMC_STATE_BUSY;
 800264e:	2303      	movs	r3, #3
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8002650:	63a7      	str	r7, [r4, #56]	; 0x38
    config.DataLength    = 512;
 8002652:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    hmmc->Instance->DCTRL = 0;
 8002656:	6820      	ldr	r0, [r4, #0]
    hmmc->State = HAL_MMC_STATE_BUSY;
 8002658:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    config.DataLength    = 512;
 800265c:	f44f 7300 	mov.w	r3, #512	; 0x200
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002660:	f04f 0e90 	mov.w	lr, #144	; 0x90
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8002664:	4669      	mov	r1, sp
    hmmc->Instance->DCTRL = 0;
 8002666:	62c7      	str	r7, [r0, #44]	; 0x2c
    config.DataLength    = 512;
 8002668:	e9cd c300 	strd	ip, r3, [sp]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800266c:	2302      	movs	r3, #2
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800266e:	e9cd 7504 	strd	r7, r5, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002672:	e9cd e302 	strd	lr, r3, [sp, #8]
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8002676:	f001 fffb 	bl	8004670 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 800267a:	4639      	mov	r1, r7
 800267c:	6820      	ldr	r0, [r4, #0]
 800267e:	f002 f93c 	bl	80048fa <SDMMC_CmdSendEXTCSD>
    if(errorstate != HAL_MMC_ERROR_NONE)
 8002682:	b330      	cbz	r0, 80026d2 <HAL_MMC_GetCardExtCSD+0xb6>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	4a2a      	ldr	r2, [pc, #168]	; (8002730 <HAL_MMC_GetCardExtCSD+0x114>)
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 800268a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800268c:	4318      	orrs	r0, r3
 800268e:	63a0      	str	r0, [r4, #56]	; 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 8002690:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002694:	e7d1      	b.n	800263a <HAL_MMC_GetCardExtCSD+0x1e>
      if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8002696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002698:	0418      	lsls	r0, r3, #16
 800269a:	d508      	bpl.n	80026ae <HAL_MMC_GetCardExtCSD+0x92>
 800269c:	f106 0720 	add.w	r7, r6, #32
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 80026a0:	6820      	ldr	r0, [r4, #0]
 80026a2:	f001 ffc4 	bl	800462e <SDMMC_ReadFIFO>
 80026a6:	f846 0b04 	str.w	r0, [r6], #4
        for(count = 0U; count < 8U; count++)
 80026aa:	42b7      	cmp	r7, r6
 80026ac:	d1f8      	bne.n	80026a0 <HAL_MMC_GetCardExtCSD+0x84>
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80026ae:	f7ff f95b 	bl	8001968 <HAL_GetTick>
 80026b2:	eba0 0008 	sub.w	r0, r0, r8
 80026b6:	4548      	cmp	r0, r9
 80026b8:	d30b      	bcc.n	80026d2 <HAL_MMC_GetCardExtCSD+0xb6>
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80026ba:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 80026bc:	2503      	movs	r5, #3
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80026be:	4a1c      	ldr	r2, [pc, #112]	; (8002730 <HAL_MMC_GetCardExtCSD+0x114>)
 80026c0:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 80026c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026c8:	63a3      	str	r3, [r4, #56]	; 0x38
        hmmc->State= HAL_MMC_STATE_READY;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80026d0:	e7b3      	b.n	800263a <HAL_MMC_GetCardExtCSD+0x1e>
    while(!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026d6:	f412 7f95 	tst.w	r2, #298	; 0x12a
 80026da:	d0dc      	beq.n	8002696 <HAL_MMC_GetCardExtCSD+0x7a>
    if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 80026dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026de:	0711      	lsls	r1, r2, #28
 80026e0:	d509      	bpl.n	80026f6 <HAL_MMC_GetCardExtCSD+0xda>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80026e2:	4a13      	ldr	r2, [pc, #76]	; (8002730 <HAL_MMC_GetCardExtCSD+0x114>)
 80026e4:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 80026e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80026e8:	f043 0308 	orr.w	r3, r3, #8
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80026ec:	63a3      	str	r3, [r4, #56]	; 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_ERROR;
 80026f4:	e7a1      	b.n	800263a <HAL_MMC_GetCardExtCSD+0x1e>
    else if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 80026f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f8:	0792      	lsls	r2, r2, #30
 80026fa:	d505      	bpl.n	8002708 <HAL_MMC_GetCardExtCSD+0xec>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80026fc:	4a0c      	ldr	r2, [pc, #48]	; (8002730 <HAL_MMC_GetCardExtCSD+0x114>)
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8002700:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	e7f1      	b.n	80026ec <HAL_MMC_GetCardExtCSD+0xd0>
    else if(__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8002708:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800270a:	f012 0220 	ands.w	r2, r2, #32
 800270e:	d005      	beq.n	800271c <HAL_MMC_GetCardExtCSD+0x100>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002710:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_MMC_GetCardExtCSD+0x114>)
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8002714:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002716:	f043 0320 	orr.w	r3, r3, #32
 800271a:	e7e7      	b.n	80026ec <HAL_MMC_GetCardExtCSD+0xd0>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 800271c:	f240 513a 	movw	r1, #1338	; 0x53a
  return HAL_OK;
 8002720:	4615      	mov	r5, r2
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8002722:	6399      	str	r1, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8002724:	2301      	movs	r3, #1
 8002726:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800272a:	e786      	b.n	800263a <HAL_MMC_GetCardExtCSD+0x1e>
  return HAL_OK;
 800272c:	463d      	mov	r5, r7
 800272e:	e784      	b.n	800263a <HAL_MMC_GetCardExtCSD+0x1e>
 8002730:	004005ff 	.word	0x004005ff

08002734 <HAL_MMC_InitCard>:
{
 8002734:	b570      	push	{r4, r5, r6, lr}
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002736:	2376      	movs	r3, #118	; 0x76
{
 8002738:	b09c      	sub	sp, #112	; 0x70
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800273a:	2500      	movs	r5, #0
{
 800273c:	4604      	mov	r4, r0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800273e:	930a      	str	r3, [sp, #40]	; 0x28
  status = SDMMC_Init(hmmc->Instance, Init);
 8002740:	ab08      	add	r3, sp, #32
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002742:	9509      	str	r5, [sp, #36]	; 0x24
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002744:	e9cd 5507 	strd	r5, r5, [sp, #28]
  status = SDMMC_Init(hmmc->Instance, Init);
 8002748:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800274c:	ab05      	add	r3, sp, #20
 800274e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002752:	e9cd 5505 	strd	r5, r5, [sp, #20]
  status = SDMMC_Init(hmmc->Instance, Init);
 8002756:	6820      	ldr	r0, [r4, #0]
 8002758:	cb0e      	ldmia	r3, {r1, r2, r3}
 800275a:	f001 ff4c 	bl	80045f6 <SDMMC_Init>
  if(status == HAL_ERROR)
 800275e:	2801      	cmp	r0, #1
 8002760:	d102      	bne.n	8002768 <HAL_MMC_InitCard+0x34>
    return HAL_ERROR;
 8002762:	2001      	movs	r0, #1
}
 8002764:	b01c      	add	sp, #112	; 0x70
 8002766:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_MMC_DISABLE(hmmc); 
 8002768:	6820      	ldr	r0, [r4, #0]
 800276a:	6843      	ldr	r3, [r0, #4]
 800276c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002770:	6043      	str	r3, [r0, #4]
  status = SDMMC_PowerState_ON(hmmc->Instance);
 8002772:	f001 ff5f 	bl	8004634 <SDMMC_PowerState_ON>
  if(status == HAL_ERROR)
 8002776:	2801      	cmp	r0, #1
 8002778:	d0f3      	beq.n	8002762 <HAL_MMC_InitCard+0x2e>
  __HAL_MMC_ENABLE(hmmc);
 800277a:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 800277c:	2002      	movs	r0, #2
  __HAL_MMC_ENABLE(hmmc);
 800277e:	6853      	ldr	r3, [r2, #4]
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 8002786:	f7ff f8f5 	bl	8001974 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 800278a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800278c:	9504      	str	r5, [sp, #16]
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 800278e:	f001 ff83 	bl	8004698 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002792:	2800      	cmp	r0, #0
 8002794:	f040 80c3 	bne.w	800291e <HAL_MMC_InitCard+0x1ea>
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8002798:	f64f 75ff 	movw	r5, #65535	; 0xffff
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 800279c:	4e65      	ldr	r6, [pc, #404]	; (8002934 <HAL_MMC_InitCard+0x200>)
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800279e:	9b04      	ldr	r3, [sp, #16]
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	42ab      	cmp	r3, r5
 80027a4:	9204      	str	r2, [sp, #16]
 80027a6:	f000 80b8 	beq.w	800291a <HAL_MMC_InitCard+0x1e6>
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 80027aa:	4631      	mov	r1, r6
 80027ac:	6820      	ldr	r0, [r4, #0]
 80027ae:	f002 f92f 	bl	8004a10 <SDMMC_CmdOpCondition>
    if(errorstate != HAL_MMC_ERROR_NONE)
 80027b2:	4601      	mov	r1, r0
 80027b4:	2800      	cmp	r0, #0
 80027b6:	f040 80ba 	bne.w	800292e <HAL_MMC_InitCard+0x1fa>
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80027ba:	6820      	ldr	r0, [r4, #0]
 80027bc:	f001 ff55 	bl	800466a <SDMMC_GetResponse>
  while(validvoltage == 0U)
 80027c0:	2800      	cmp	r0, #0
 80027c2:	daec      	bge.n	800279e <HAL_MMC_InitCard+0x6a>
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 80027c4:	0e00      	lsrs	r0, r0, #24
 80027c6:	f1a0 03c0 	sub.w	r3, r0, #192	; 0xc0
 80027ca:	4258      	negs	r0, r3
 80027cc:	4158      	adcs	r0, r3
 80027ce:	6460      	str	r0, [r4, #68]	; 0x44
  if(SDMMC_GetPowerState(hmmc->Instance) == 0U)
 80027d0:	6820      	ldr	r0, [r4, #0]
 80027d2:	f001 ff33 	bl	800463c <SDMMC_GetPowerState>
 80027d6:	2800      	cmp	r0, #0
 80027d8:	f000 809c 	beq.w	8002914 <HAL_MMC_InitCard+0x1e0>
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 80027dc:	6820      	ldr	r0, [r4, #0]
 80027de:	f002 f8cb 	bl	8004978 <SDMMC_CmdSendCID>
  if(errorstate != HAL_MMC_ERROR_NONE)
 80027e2:	4605      	mov	r5, r0
 80027e4:	2800      	cmp	r0, #0
 80027e6:	d14d      	bne.n	8002884 <HAL_MMC_InitCard+0x150>
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80027e8:	4601      	mov	r1, r0
 80027ea:	6820      	ldr	r0, [r4, #0]
 80027ec:	f001 ff3d 	bl	800466a <SDMMC_GetResponse>
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80027f0:	2104      	movs	r1, #4
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80027f2:	6720      	str	r0, [r4, #112]	; 0x70
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80027f4:	6820      	ldr	r0, [r4, #0]
 80027f6:	f001 ff38 	bl	800466a <SDMMC_GetResponse>
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80027fa:	2108      	movs	r1, #8
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80027fc:	6760      	str	r0, [r4, #116]	; 0x74
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80027fe:	6820      	ldr	r0, [r4, #0]
 8002800:	f001 ff33 	bl	800466a <SDMMC_GetResponse>
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8002804:	210c      	movs	r1, #12
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8002806:	67a0      	str	r0, [r4, #120]	; 0x78
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8002808:	6820      	ldr	r0, [r4, #0]
 800280a:	f001 ff2e 	bl	800466a <SDMMC_GetResponse>
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 800280e:	2102      	movs	r1, #2
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8002810:	67e0      	str	r0, [r4, #124]	; 0x7c
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8002812:	6820      	ldr	r0, [r4, #0]
 8002814:	f002 f840 	bl	8004898 <SDMMC_CmdSetRelAddMmc>
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002818:	4605      	mov	r5, r0
 800281a:	2800      	cmp	r0, #0
 800281c:	d132      	bne.n	8002884 <HAL_MMC_InitCard+0x150>
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 800281e:	2302      	movs	r3, #2
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8002820:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002824:	6820      	ldr	r0, [r4, #0]
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8002826:	64e3      	str	r3, [r4, #76]	; 0x4c
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8002828:	f002 f8bb 	bl	80049a2 <SDMMC_CmdSendCSD>
  if(errorstate != HAL_MMC_ERROR_NONE)
 800282c:	4605      	mov	r5, r0
 800282e:	bb48      	cbnz	r0, 8002884 <HAL_MMC_InitCard+0x150>
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8002830:	4601      	mov	r1, r0
 8002832:	6820      	ldr	r0, [r4, #0]
 8002834:	f001 ff19 	bl	800466a <SDMMC_GetResponse>
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8002838:	2104      	movs	r1, #4
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800283a:	6620      	str	r0, [r4, #96]	; 0x60
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 800283c:	6820      	ldr	r0, [r4, #0]
 800283e:	f001 ff14 	bl	800466a <SDMMC_GetResponse>
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8002842:	2108      	movs	r1, #8
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8002844:	6660      	str	r0, [r4, #100]	; 0x64
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8002846:	6820      	ldr	r0, [r4, #0]
 8002848:	f001 ff0f 	bl	800466a <SDMMC_GetResponse>
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 800284c:	210c      	movs	r1, #12
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 800284e:	66a0      	str	r0, [r4, #104]	; 0x68
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8002850:	6820      	ldr	r0, [r4, #0]
 8002852:	f001 ff0a 	bl	800466a <SDMMC_GetResponse>
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8002856:	2104      	movs	r1, #4
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8002858:	66e0      	str	r0, [r4, #108]	; 0x6c
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 800285a:	6820      	ldr	r0, [r4, #0]
 800285c:	f001 ff05 	bl	800466a <SDMMC_GetResponse>
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002860:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8002862:	0d00      	lsrs	r0, r0, #20
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002864:	462b      	mov	r3, r5
 8002866:	0412      	lsls	r2, r2, #16
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8002868:	64a0      	str	r0, [r4, #72]	; 0x48
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800286a:	6820      	ldr	r0, [r4, #0]
 800286c:	f001 ffe2 	bl	8004834 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002870:	4605      	mov	r5, r0
 8002872:	b938      	cbnz	r0, 8002884 <HAL_MMC_InitCard+0x150>
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8002874:	a911      	add	r1, sp, #68	; 0x44
 8002876:	4620      	mov	r0, r4
 8002878:	f7ff fe16 	bl	80024a8 <HAL_MMC_GetCardCSD>
 800287c:	b148      	cbz	r0, 8002892 <HAL_MMC_InitCard+0x15e>
    return hmmc->ErrorCode;
 800287e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002880:	2d00      	cmp	r5, #0
 8002882:	d035      	beq.n	80028f0 <HAL_MMC_InitCard+0x1bc>
    hmmc->State = HAL_MMC_STATE_READY;
 8002884:	2001      	movs	r0, #1
 8002886:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 800288a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800288c:	432b      	orrs	r3, r5
 800288e:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002890:	e768      	b.n	8002764 <HAL_MMC_InitCard+0x30>
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8002892:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002894:	6820      	ldr	r0, [r4, #0]
 8002896:	0409      	lsls	r1, r1, #16
 8002898:	f002 f817 	bl	80048ca <SDMMC_CmdSendStatus>
  if(errorstate != HAL_MMC_ERROR_NONE)
 800289c:	b110      	cbz	r0, 80028a4 <HAL_MMC_InitCard+0x170>
    hmmc->ErrorCode |= errorstate;
 800289e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028a0:	4318      	orrs	r0, r3
 80028a2:	63a0      	str	r0, [r4, #56]	; 0x38
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028a8:	f104 0180 	add.w	r1, r4, #128	; 0x80
 80028ac:	4620      	mov	r0, r4
 80028ae:	f7ff feb5 	bl	800261c <HAL_MMC_GetCardExtCSD>
 80028b2:	2800      	cmp	r0, #0
 80028b4:	d1e3      	bne.n	800287e <HAL_MMC_InitCard+0x14a>
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80028b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80028b8:	6820      	ldr	r0, [r4, #0]
 80028ba:	0409      	lsls	r1, r1, #16
 80028bc:	f002 f805 	bl	80048ca <SDMMC_CmdSendStatus>
  if(errorstate != HAL_MMC_ERROR_NONE)
 80028c0:	b110      	cbz	r0, 80028c8 <HAL_MMC_InitCard+0x194>
    hmmc->ErrorCode |= errorstate;
 80028c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028c4:	4318      	orrs	r0, r3
 80028c6:	63a0      	str	r0, [r4, #56]	; 0x38
  Init = hmmc->Init;
 80028c8:	1d26      	adds	r6, r4, #4
 80028ca:	ad0b      	add	r5, sp, #44	; 0x2c
 80028cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80028ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 80028d0:	2300      	movs	r3, #0
  Init = hmmc->Init;
 80028d2:	e896 0003 	ldmia.w	r6, {r0, r1}
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 80028d6:	930e      	str	r3, [sp, #56]	; 0x38
  (void)SDMMC_Init(hmmc->Instance, Init);
 80028d8:	ab0e      	add	r3, sp, #56	; 0x38
  Init = hmmc->Init;
 80028da:	e885 0003 	stmia.w	r5, {r0, r1}
  (void)SDMMC_Init(hmmc->Instance, Init);
 80028de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028e2:	ab0b      	add	r3, sp, #44	; 0x2c
 80028e4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80028e8:	6820      	ldr	r0, [r4, #0]
 80028ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ec:	f001 fe83 	bl	80045f6 <SDMMC_Init>
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 80028f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028f4:	6820      	ldr	r0, [r4, #0]
 80028f6:	f001 ff85 	bl	8004804 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_MMC_ERROR_NONE)
 80028fa:	2800      	cmp	r0, #0
 80028fc:	f43f af32 	beq.w	8002764 <HAL_MMC_InitCard+0x30>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	4a0d      	ldr	r2, [pc, #52]	; (8002938 <HAL_MMC_InitCard+0x204>)
 8002904:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8002906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002908:	4318      	orrs	r0, r3
 800290a:	63a0      	str	r0, [r4, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 800290c:	2001      	movs	r0, #1
 800290e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002912:	e727      	b.n	8002764 <HAL_MMC_InitCard+0x30>
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8002914:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8002918:	e7b4      	b.n	8002884 <HAL_MMC_InitCard+0x150>
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 800291a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    hmmc->State = HAL_MMC_STATE_READY;
 800291e:	2301      	movs	r3, #1
 8002920:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8002924:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002926:	4310      	orrs	r0, r2
 8002928:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 800292a:	4618      	mov	r0, r3
 800292c:	e71a      	b.n	8002764 <HAL_MMC_InitCard+0x30>
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 800292e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002932:	e7f4      	b.n	800291e <HAL_MMC_InitCard+0x1ea>
 8002934:	c0ff8000 	.word	0xc0ff8000
 8002938:	004005ff 	.word	0x004005ff

0800293c <HAL_MMC_ConfigWideBusOperation>:
  hmmc->State = HAL_MMC_STATE_BUSY;
 800293c:	2303      	movs	r3, #3
  uint32_t count;
  uint32_t response = 0U;
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
  uint32_t power_class, supported_pwr_class;

  if((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 800293e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 8002942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002944:	4604      	mov	r4, r0
 8002946:	b08b      	sub	sp, #44	; 0x2c
 8002948:	460d      	mov	r5, r1
  hmmc->State = HAL_MMC_STATE_BUSY;
 800294a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 800294e:	d002      	beq.n	8002956 <HAL_MMC_ConfigWideBusOperation+0x1a>
 8002950:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002954:	d15f      	bne.n	8002a16 <HAL_MMC_ConfigWideBusOperation+0xda>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8002956:	2300      	movs	r3, #0

    /* Read the PowerClass field of the Extended CSD register */
    if(MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8002958:	22bb      	movs	r2, #187	; 0xbb
 800295a:	a904      	add	r1, sp, #16
 800295c:	4620      	mov	r0, r4
    power_class = 0U; /* Default value after power-on or software reset */
 800295e:	9304      	str	r3, [sp, #16]
    if(MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8002960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002964:	f7ff fd32 	bl	80023cc <MMC_ReadExtCSD.constprop.0>
 8002968:	2800      	cmp	r0, #0
 800296a:	f040 8086 	bne.w	8002a7a <HAL_MMC_ConfigWideBusOperation+0x13e>
      power_class = ((power_class >> 24U) & 0x000000FFU);
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    /* Field PWR_CL_26_xxx [201 or 203] */
    supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX/4)] >> MMC_EXT_CSD_PWR_CL_26_POS) & 0x000000FFU);
 800296e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148

    if(errorstate == HAL_MMC_ERROR_NONE)
    {
      if(Wide == SDMMC_BUS_WIDE_8B)
 8002972:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8002976:	f89d 3013 	ldrb.w	r3, [sp, #19]
    supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX/4)] >> MMC_EXT_CSD_PWR_CL_26_POS) & 0x000000FFU);
 800297a:	bf14      	ite	ne
 800297c:	0e09      	lsrne	r1, r1, #24
      {
        /* Bit [7:4] : power class for 8-bits bus configuration - Bit [3:0] : power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 800297e:	0f09      	lsreq	r1, r1, #28
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8002980:	9304      	str	r3, [sp, #16]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8002982:	404b      	eors	r3, r1
 8002984:	0718      	lsls	r0, r3, #28
 8002986:	d024      	beq.n	80029d2 <HAL_MMC_ConfigWideBusOperation+0x96>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8002988:	0209      	lsls	r1, r1, #8
 800298a:	6820      	ldr	r0, [r4, #0]
 800298c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8002990:	f041 716e 	orr.w	r1, r1, #62390272	; 0x3b80000
 8002994:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
 8002998:	f001 ff7c 	bl	8004894 <SDMMC_CmdSwitch>

        if(errorstate == HAL_MMC_ERROR_NONE)
 800299c:	2800      	cmp	r0, #0
 800299e:	d16e      	bne.n	8002a7e <HAL_MMC_ConfigWideBusOperation+0x142>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 80029a0:	f64f 76ff 	movw	r6, #65535	; 0xffff
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80029a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80029a6:	6820      	ldr	r0, [r4, #0]
 80029a8:	0409      	lsls	r1, r1, #16
 80029aa:	f001 ff8e 	bl	80048ca <SDMMC_CmdSendStatus>
            if(errorstate != HAL_MMC_ERROR_NONE)
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d165      	bne.n	8002a7e <HAL_MMC_ConfigWideBusOperation+0x142>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80029b2:	4601      	mov	r1, r0
 80029b4:	6820      	ldr	r0, [r4, #0]
 80029b6:	f001 fe58 	bl	800466a <SDMMC_GetResponse>
            count--;
          }while(((response & 0x100U) == 0U) && (count != 0U));
 80029ba:	05c1      	lsls	r1, r0, #23
            count--;
 80029bc:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
          }while(((response & 0x100U) == 0U) && (count != 0U));
 80029c0:	d461      	bmi.n	8002a86 <HAL_MMC_ConfigWideBusOperation+0x14a>
 80029c2:	2e00      	cmp	r6, #0
 80029c4:	d1ee      	bne.n	80029a4 <HAL_MMC_ConfigWideBusOperation+0x68>
  hmmc->State = HAL_MMC_STATE_READY;
 80029c6:	2301      	movs	r3, #1
        errorstate = SDMMC_ERROR_TIMEOUT;
 80029c8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  hmmc->State = HAL_MMC_STATE_READY;
 80029cc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(errorstate != HAL_MMC_ERROR_NONE)
 80029d0:	e062      	b.n	8002a98 <HAL_MMC_ConfigWideBusOperation+0x15c>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80029d2:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 80029d6:	6820      	ldr	r0, [r4, #0]
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80029d8:	d118      	bne.n	8002a0c <HAL_MMC_ConfigWideBusOperation+0xd0>
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 80029da:	4933      	ldr	r1, [pc, #204]	; (8002aa8 <HAL_MMC_ConfigWideBusOperation+0x16c>)
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 80029dc:	f001 ff5a 	bl	8004894 <SDMMC_CmdSwitch>
    if(errorstate == HAL_MMC_ERROR_NONE)
 80029e0:	2800      	cmp	r0, #0
 80029e2:	d14c      	bne.n	8002a7e <HAL_MMC_ConfigWideBusOperation+0x142>
      count = SDMMC_MAX_TRIAL;
 80029e4:	f64f 76ff 	movw	r6, #65535	; 0xffff
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80029e8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80029ea:	6820      	ldr	r0, [r4, #0]
 80029ec:	0409      	lsls	r1, r1, #16
 80029ee:	f001 ff6c 	bl	80048ca <SDMMC_CmdSendStatus>
        if(errorstate != HAL_MMC_ERROR_NONE)
 80029f2:	2800      	cmp	r0, #0
 80029f4:	d143      	bne.n	8002a7e <HAL_MMC_ConfigWideBusOperation+0x142>
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80029f6:	4601      	mov	r1, r0
 80029f8:	6820      	ldr	r0, [r4, #0]
 80029fa:	f001 fe36 	bl	800466a <SDMMC_GetResponse>
      }while(((response & 0x100U) == 0U) && (count != 0U));
 80029fe:	05c3      	lsls	r3, r0, #23
        count--;
 8002a00:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
      }while(((response & 0x100U) == 0U) && (count != 0U));
 8002a04:	d42e      	bmi.n	8002a64 <HAL_MMC_ConfigWideBusOperation+0x128>
 8002a06:	2e00      	cmp	r6, #0
 8002a08:	d1ee      	bne.n	80029e8 <HAL_MMC_ConfigWideBusOperation+0xac>
 8002a0a:	e7dc      	b.n	80029c6 <HAL_MMC_ConfigWideBusOperation+0x8a>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8002a0c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002a10:	d101      	bne.n	8002a16 <HAL_MMC_ConfigWideBusOperation+0xda>
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8002a12:	4926      	ldr	r1, [pc, #152]	; (8002aac <HAL_MMC_ConfigWideBusOperation+0x170>)
 8002a14:	e7e2      	b.n	80029dc <HAL_MMC_ConfigWideBusOperation+0xa0>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8002a16:	b9fd      	cbnz	r5, 8002a58 <HAL_MMC_ConfigWideBusOperation+0x11c>
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8002a18:	4925      	ldr	r1, [pc, #148]	; (8002ab0 <HAL_MMC_ConfigWideBusOperation+0x174>)
 8002a1a:	6820      	ldr	r0, [r4, #0]
 8002a1c:	e7de      	b.n	80029dc <HAL_MMC_ConfigWideBusOperation+0xa0>
          (void)SDMMC_Init(hmmc->Instance, Init);
 8002a1e:	4627      	mov	r7, r4
          Init = hmmc->Init;
 8002a20:	f10d 0c10 	add.w	ip, sp, #16
          (void)SDMMC_Init(hmmc->Instance, Init);
 8002a24:	f857 eb04 	ldr.w	lr, [r7], #4
          Init = hmmc->Init;
 8002a28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002a2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002a2e:	e897 0003 	ldmia.w	r7, {r0, r1}
          (void)SDMMC_Init(hmmc->Instance, Init);
 8002a32:	ab0a      	add	r3, sp, #40	; 0x28
          Init = hmmc->Init;
 8002a34:	e88c 0003 	stmia.w	ip, {r0, r1}
          Init.BusWide = WideMode;
 8002a38:	9507      	str	r5, [sp, #28]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8002a3a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002a3e:	ab04      	add	r3, sp, #16
 8002a40:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002a44:	4670      	mov	r0, lr
 8002a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a48:	f001 fdd5 	bl	80045f6 <SDMMC_Init>
  hmmc->State = HAL_MMC_STATE_READY;
 8002a4c:	2301      	movs	r3, #1
  return HAL_OK;
 8002a4e:	4630      	mov	r0, r6
  hmmc->State = HAL_MMC_STATE_READY;
 8002a50:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8002a54:	b00b      	add	sp, #44	; 0x2c
 8002a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hmmc->State = HAL_MMC_STATE_READY;
 8002a58:	2301      	movs	r3, #1
      errorstate = HAL_MMC_ERROR_PARAM;
 8002a5a:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
  hmmc->State = HAL_MMC_STATE_READY;
 8002a5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002a62:	e019      	b.n	8002a98 <HAL_MMC_ConfigWideBusOperation+0x15c>
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8002a64:	2e00      	cmp	r6, #0
 8002a66:	d0ae      	beq.n	80029c6 <HAL_MMC_ConfigWideBusOperation+0x8a>
        if ((response & 0x80U) != 0U)
 8002a68:	f010 0680 	ands.w	r6, r0, #128	; 0x80
 8002a6c:	d0d7      	beq.n	8002a1e <HAL_MMC_ConfigWideBusOperation+0xe2>
  hmmc->State = HAL_MMC_STATE_READY;
 8002a6e:	2301      	movs	r3, #1
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002a70:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hmmc->State = HAL_MMC_STATE_READY;
 8002a74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002a78:	e00e      	b.n	8002a98 <HAL_MMC_ConfigWideBusOperation+0x15c>
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002a7a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  hmmc->State = HAL_MMC_STATE_READY;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(errorstate != HAL_MMC_ERROR_NONE)
 8002a84:	e008      	b.n	8002a98 <HAL_MMC_ConfigWideBusOperation+0x15c>

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8002a86:	2e00      	cmp	r6, #0
 8002a88:	d09d      	beq.n	80029c6 <HAL_MMC_ConfigWideBusOperation+0x8a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8002a8a:	0602      	lsls	r2, r0, #24
 8002a8c:	d5a1      	bpl.n	80029d2 <HAL_MMC_ConfigWideBusOperation+0x96>
  hmmc->State = HAL_MMC_STATE_READY;
 8002a8e:	2301      	movs	r3, #1
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8002a90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  hmmc->State = HAL_MMC_STATE_READY;
 8002a94:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	4a06      	ldr	r2, [pc, #24]	; (8002ab4 <HAL_MMC_ConfigWideBusOperation+0x178>)
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8002a9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002aa0:	4318      	orrs	r0, r3
 8002aa2:	63a0      	str	r0, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	e7d5      	b.n	8002a54 <HAL_MMC_ConfigWideBusOperation+0x118>
 8002aa8:	03b70200 	.word	0x03b70200
 8002aac:	03b70100 	.word	0x03b70100
 8002ab0:	03b70000 	.word	0x03b70000
 8002ab4:	004005ff 	.word	0x004005ff

08002ab8 <HAL_MMC_Init>:
{
 8002ab8:	b510      	push	{r4, lr}
  if(hmmc == NULL)
 8002aba:	4604      	mov	r4, r0
 8002abc:	b908      	cbnz	r0, 8002ac2 <HAL_MMC_Init+0xa>
    return HAL_ERROR;
 8002abe:	2001      	movs	r0, #1
}
 8002ac0:	bd10      	pop	{r4, pc}
  if(hmmc->State == HAL_MMC_STATE_RESET)
 8002ac2:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8002ac6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002aca:	b913      	cbnz	r3, 8002ad2 <HAL_MMC_Init+0x1a>
    hmmc->Lock = HAL_UNLOCKED;
 8002acc:	7702      	strb	r2, [r0, #28]
    HAL_MMC_MspInit(hmmc);
 8002ace:	f7fe fc67 	bl	80013a0 <HAL_MMC_MspInit>
  hmmc->State = HAL_MMC_STATE_BUSY;
 8002ad2:	2303      	movs	r3, #3
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8002ad4:	4620      	mov	r0, r4
  hmmc->State = HAL_MMC_STATE_BUSY;
 8002ad6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8002ada:	f7ff fe2b 	bl	8002734 <HAL_MMC_InitCard>
 8002ade:	2801      	cmp	r0, #1
 8002ae0:	d0ed      	beq.n	8002abe <HAL_MMC_Init+0x6>
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8002ae2:	2300      	movs	r3, #0
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8002ae4:	6921      	ldr	r1, [r4, #16]
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8002ae6:	63a3      	str	r3, [r4, #56]	; 0x38
  hmmc->Context = MMC_CONTEXT_NONE;
 8002ae8:	6323      	str	r3, [r4, #48]	; 0x30
  hmmc->State = HAL_MMC_STATE_READY;
 8002aea:	2301      	movs	r3, #1
 8002aec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8002af0:	b131      	cbz	r1, 8002b00 <HAL_MMC_Init+0x48>
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7ff ff22 	bl	800293c <HAL_MMC_ConfigWideBusOperation>
    return HAL_ERROR;
 8002af8:	3800      	subs	r0, #0
 8002afa:	bf18      	it	ne
 8002afc:	2001      	movne	r0, #1
 8002afe:	e7df      	b.n	8002ac0 <HAL_MMC_Init+0x8>
  return HAL_OK;
 8002b00:	4608      	mov	r0, r1
 8002b02:	e7dd      	b.n	8002ac0 <HAL_MMC_Init+0x8>

08002b04 <HAL_NOR_ReturnToReadMode>:
  uint32_t deviceaddress;
  HAL_NOR_StateTypeDef state;
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the NOR controller state */
  state = hnor->State;
 8002b04:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
  if (state == HAL_NOR_STATE_BUSY)
 8002b08:	2a02      	cmp	r2, #2
  state = hnor->State;
 8002b0a:	b2d3      	uxtb	r3, r2
  if (state == HAL_NOR_STATE_BUSY)
 8002b0c:	d023      	beq.n	8002b56 <HAL_NOR_ReturnToReadMode+0x52>
  }
  else if (state == HAL_NOR_STATE_PROTECTED)
  {
    return HAL_ERROR;
  }
  else if (state == HAL_NOR_STATE_READY)
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d12d      	bne.n	8002b6e <HAL_NOR_ReturnToReadMode+0x6a>
  {
    /* Process Locked */
    __HAL_LOCK(hnor);
 8002b12:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
 8002b16:	2a01      	cmp	r2, #1
 8002b18:	f04f 0202 	mov.w	r2, #2
 8002b1c:	d029      	beq.n	8002b72 <HAL_NOR_ReturnToReadMode+0x6e>

    /* Update the NOR controller state */
    hnor->State = HAL_NOR_STATE_BUSY;
 8002b1e:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45

    /* Select the NOR device address */
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8002b22:	6882      	ldr	r2, [r0, #8]
    __HAL_LOCK(hnor);
 8002b24:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8002b28:	b1ba      	cbz	r2, 8002b5a <HAL_NOR_ReturnToReadMode+0x56>
    {
      deviceaddress = NOR_MEMORY_ADRESS1;
    }
    else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8002b2a:	2a02      	cmp	r2, #2
 8002b2c:	d018      	beq.n	8002b60 <HAL_NOR_ReturnToReadMode+0x5c>
    {
      deviceaddress = NOR_MEMORY_ADRESS3;
    }
    else /* FMC_NORSRAM_BANK4 */
    {
      deviceaddress = NOR_MEMORY_ADRESS4;
 8002b2e:	2a04      	cmp	r2, #4
 8002b30:	bf0c      	ite	eq
 8002b32:	f04f 42d0 	moveq.w	r2, #1744830464	; 0x68000000
 8002b36:	f04f 42d8 	movne.w	r2, #1811939328	; 0x6c000000
    }

    if (hnor->CommandSet == NOR_AMD_FUJITSU_COMMAND_SET)
 8002b3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002b3c:	2902      	cmp	r1, #2
 8002b3e:	d112      	bne.n	8002b66 <HAL_NOR_ReturnToReadMode+0x62>
    {
      NOR_WRITE(deviceaddress, NOR_CMD_DATA_READ_RESET);
 8002b40:	23f0      	movs	r3, #240	; 0xf0
    }
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
    {
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 8002b42:	8013      	strh	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b44:	f3bf 8f4f 	dsb	sy
  HAL_StatusTypeDef status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
      /* Primary command set not supported by the driver */
      status = HAL_ERROR;
    }

    /* Check the NOR controller state */
    hnor->State = state;
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45

    /* Process unlocked */
    __HAL_UNLOCK(hnor);
 8002b50:	2200      	movs	r2, #0
 8002b52:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  {
    return HAL_ERROR;
  }

  return status;
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	4770      	bx	lr
      deviceaddress = NOR_MEMORY_ADRESS1;
 8002b5a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002b5e:	e7ec      	b.n	8002b3a <HAL_NOR_ReturnToReadMode+0x36>
      deviceaddress = NOR_MEMORY_ADRESS2;
 8002b60:	f04f 42c8 	mov.w	r2, #1677721600	; 0x64000000
 8002b64:	e7e9      	b.n	8002b3a <HAL_NOR_ReturnToReadMode+0x36>
    else if (hnor->CommandSet == NOR_INTEL_SHARP_EXT_COMMAND_SET)
 8002b66:	2901      	cmp	r1, #1
 8002b68:	d1ef      	bne.n	8002b4a <HAL_NOR_ReturnToReadMode+0x46>
      NOR_WRITE(deviceaddress, NOR_CMD_READ_ARRAY);
 8002b6a:	23ff      	movs	r3, #255	; 0xff
 8002b6c:	e7e9      	b.n	8002b42 <HAL_NOR_ReturnToReadMode+0x3e>
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e7f1      	b.n	8002b56 <HAL_NOR_ReturnToReadMode+0x52>
    return HAL_BUSY;
 8002b72:	4613      	mov	r3, r2
 8002b74:	e7ef      	b.n	8002b56 <HAL_NOR_ReturnToReadMode+0x52>
	...

08002b78 <HAL_NOR_Init>:
{
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	460e      	mov	r6, r1
 8002b7c:	4615      	mov	r5, r2
  if (hnor == NULL)
 8002b7e:	4604      	mov	r4, r0
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d058      	beq.n	8002c36 <HAL_NOR_Init+0xbe>
  if (hnor->State == HAL_NOR_STATE_RESET)
 8002b84:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8002b88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b8c:	b91b      	cbnz	r3, 8002b96 <HAL_NOR_Init+0x1e>
    hnor->Lock = HAL_UNLOCKED;
 8002b8e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    HAL_NOR_MspInit(hnor);
 8002b92:	f7fe fdd3 	bl	800173c <HAL_NOR_MspInit>
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8002b96:	f104 0108 	add.w	r1, r4, #8
 8002b9a:	6820      	ldr	r0, [r4, #0]
 8002b9c:	f001 fc1e 	bl	80043dc <FMC_NORSRAM_Init>
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8002ba0:	4631      	mov	r1, r6
 8002ba2:	68a2      	ldr	r2, [r4, #8]
 8002ba4:	6820      	ldr	r0, [r4, #0]
 8002ba6:	f001 fc63 	bl	8004470 <FMC_NORSRAM_Timing_Init>
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8002baa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bac:	68a2      	ldr	r2, [r4, #8]
 8002bae:	4629      	mov	r1, r5
 8002bb0:	6860      	ldr	r0, [r4, #4]
 8002bb2:	f001 fc89 	bl	80044c8 <FMC_NORSRAM_Extended_Timing_Init>
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8002bb6:	6820      	ldr	r0, [r4, #0]
 8002bb8:	68a1      	ldr	r1, [r4, #8]
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8002bba:	6966      	ldr	r6, [r4, #20]
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8002bbc:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8002bc0:	4a1e      	ldr	r2, [pc, #120]	; (8002c3c <HAL_NOR_Init+0xc4>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8002bca:	1e33      	subs	r3, r6, #0
 8002bcc:	bf18      	it	ne
 8002bce:	2301      	movne	r3, #1
 8002bd0:	6013      	str	r3, [r2, #0]
  hnor->State = HAL_NOR_STATE_READY;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  if (hnor->Init.NSBank == FMC_NORSRAM_BANK1)
 8002bd8:	b181      	cbz	r1, 8002bfc <HAL_NOR_Init+0x84>
  else if (hnor->Init.NSBank == FMC_NORSRAM_BANK2)
 8002bda:	2902      	cmp	r1, #2
 8002bdc:	d011      	beq.n	8002c02 <HAL_NOR_Init+0x8a>
    deviceaddress = NOR_MEMORY_ADRESS4;
 8002bde:	2904      	cmp	r1, #4
 8002be0:	bf0c      	ite	eq
 8002be2:	f04f 43d0 	moveq.w	r3, #1744830464	; 0x68000000
 8002be6:	f04f 43d8 	movne.w	r3, #1811939328	; 0x6c000000
  if (hnor->Init.WriteOperation == FMC_WRITE_OPERATION_DISABLE)
 8002bea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002bec:	b965      	cbnz	r5, 8002c08 <HAL_NOR_Init+0x90>
    (void)FMC_NORSRAM_WriteOperation_Disable(hnor->Instance, hnor->Init.NSBank);
 8002bee:	f001 fc89 	bl	8004504 <FMC_NORSRAM_WriteOperation_Disable>
    hnor->State = HAL_NOR_STATE_PROTECTED;
 8002bf2:	2304      	movs	r3, #4
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	4628      	mov	r0, r5
    hnor->State = HAL_NOR_STATE_PROTECTED;
 8002bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
    deviceaddress = NOR_MEMORY_ADRESS1;
 8002bfc:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002c00:	e7f3      	b.n	8002bea <HAL_NOR_Init+0x72>
    deviceaddress = NOR_MEMORY_ADRESS2;
 8002c02:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 8002c06:	e7f0      	b.n	8002bea <HAL_NOR_Init+0x72>
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 8002c08:	b196      	cbz	r6, 8002c30 <HAL_NOR_Init+0xb8>
 8002c0a:	f103 01aa 	add.w	r1, r3, #170	; 0xaa
 8002c0e:	2098      	movs	r0, #152	; 0x98
 8002c10:	8008      	strh	r0, [r1, #0]
 8002c12:	f3bf 8f4f 	dsb	sy
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 8002c16:	6812      	ldr	r2, [r2, #0]
    status = HAL_NOR_ReturnToReadMode(hnor);
 8002c18:	4620      	mov	r0, r4
    hnor->CommandSet = *(__IO uint16_t *) NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_ADDRESS_COMMAND_SET);
 8002c1a:	2a01      	cmp	r2, #1
 8002c1c:	bf0c      	ite	eq
 8002c1e:	3326      	addeq	r3, #38	; 0x26
 8002c20:	3313      	addne	r3, #19
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	64a3      	str	r3, [r4, #72]	; 0x48
}
 8002c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status = HAL_NOR_ReturnToReadMode(hnor);
 8002c2c:	f7ff bf6a 	b.w	8002b04 <HAL_NOR_ReturnToReadMode>
    NOR_WRITE(NOR_ADDR_SHIFT(deviceaddress, uwNORMemoryDataWidth, NOR_CMD_ADDRESS_FIRST_CFI), NOR_CMD_DATA_CFI);
 8002c30:	f103 0155 	add.w	r1, r3, #85	; 0x55
 8002c34:	e7eb      	b.n	8002c0e <HAL_NOR_Init+0x96>
    return HAL_ERROR;
 8002c36:	2001      	movs	r0, #1
 8002c38:	e7df      	b.n	8002bfa <HAL_NOR_Init+0x82>
 8002c3a:	bf00      	nop
 8002c3c:	200024dc 	.word	0x200024dc

08002c40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c40:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c42:	4604      	mov	r4, r0
{
 8002c44:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8002c46:	b360      	cbz	r0, 8002ca2 <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c48:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
  USBx = hpcd->Instance;
 8002c4c:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c52:	b91b      	cbnz	r3, 8002c5c <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c54:	f880 24bc 	strb.w	r2, [r0, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c58:	f7fe fc8c 	bl	8001574 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c5c:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c5e:	466e      	mov	r6, sp
 8002c60:	1d27      	adds	r7, r4, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c62:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c66:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  __HAL_PCD_DISABLE(hpcd);
 8002c68:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c6a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8002c6e:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8002c72:	bf08      	it	eq
 8002c74:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8002c76:	f001 ff42 	bl	8004afe <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002c86:	4625      	mov	r5, r4
 8002c88:	e886 0003 	stmia.w	r6, {r0, r1}
 8002c8c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002c90:	f855 0b10 	ldr.w	r0, [r5], #16
 8002c94:	f001 fef8 	bl	8004a88 <USB_CoreInit>
 8002c98:	4606      	mov	r6, r0
 8002c9a:	b120      	cbz	r0, 8002ca6 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ca2:	2501      	movs	r5, #1
 8002ca4:	e052      	b.n	8002d4c <HAL_PCD_Init+0x10c>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ca6:	4601      	mov	r1, r0
 8002ca8:	6820      	ldr	r0, [r4, #0]
 8002caa:	f001 ff2e 	bl	8004b0a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cae:	4630      	mov	r0, r6
 8002cb0:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cb4:	2624      	movs	r6, #36	; 0x24
 8002cb6:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cba:	4601      	mov	r1, r0
 8002cbc:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cbe:	3001      	adds	r0, #1
 8002cc0:	4594      	cmp	ip, r2
 8002cc2:	d81b      	bhi.n	8002cfc <HAL_PCD_Init+0xbc>
 8002cc4:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cc6:	2624      	movs	r6, #36	; 0x24
 8002cc8:	4619      	mov	r1, r3
 8002cca:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ccc:	3301      	adds	r3, #1
 8002cce:	4584      	cmp	ip, r0
 8002cd0:	d822      	bhi.n	8002d18 <HAL_PCD_Init+0xd8>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cd2:	466e      	mov	r6, sp
 8002cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002cdc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002ce0:	e886 0003 	stmia.w	r6, {r0, r1}
 8002ce4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002ce8:	6820      	ldr	r0, [r4, #0]
 8002cea:	f001 ff8f 	bl	8004c0c <USB_DevInit>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	4605      	mov	r5, r0
 8002cf2:	b1f0      	cbz	r0, 8002d32 <HAL_PCD_Init+0xf2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	f884 24bd 	strb.w	r2, [r4, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cfa:	e7d2      	b.n	8002ca2 <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8002cfc:	fb06 4302 	mla	r3, r6, r2, r4
 8002d00:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d0c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d10:	6559      	str	r1, [r3, #84]	; 0x54
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d12:	e9c3 1112 	strd	r1, r1, [r3, #72]	; 0x48
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d16:	e7d1      	b.n	8002cbc <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8002d18:	fb06 4200 	mla	r2, r6, r0, r4
 8002d1c:	f882 127d 	strb.w	r1, [r2, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8002d20:	f882 027c 	strb.w	r0, [r2, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d24:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d28:	f8c2 1294 	str.w	r1, [r2, #660]	; 0x294
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d2c:	e9c2 11a2 	strd	r1, r1, [r2, #648]	; 0x288
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d30:	e7cb      	b.n	8002cca <HAL_PCD_Init+0x8a>
  }

  hpcd->USB_Address = 0U;
 8002d32:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d36:	f884 34bd 	strb.w	r3, [r4, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_PCD_Init+0x106>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d40:	4620      	mov	r0, r4
 8002d42:	f000 f806 	bl	8002d52 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d46:	6820      	ldr	r0, [r4, #0]
 8002d48:	f002 f816 	bl	8004d78 <USB_DevDisconnect>

  return HAL_OK;
}
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	b00b      	add	sp, #44	; 0x2c
 8002d50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d52 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d52:	6802      	ldr	r2, [r0, #0]

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8002d54:	2100      	movs	r1, #0
  hpcd->lpm_active = 1U;
 8002d56:	2301      	movs	r3, #1
  hpcd->LPM_State = LPM_L0;
 8002d58:	f880 14f4 	strb.w	r1, [r0, #1268]	; 0x4f4
  hpcd->lpm_active = 1U;
 8002d5c:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);

  return HAL_OK;
}
 8002d60:	4608      	mov	r0, r1
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d62:	6993      	ldr	r3, [r2, #24]
 8002d64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d68:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d6a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d70:	f043 0303 	orr.w	r3, r3, #3
 8002d74:	6553      	str	r3, [r2, #84]	; 0x54
}
 8002d76:	4770      	bx	lr

08002d78 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d78:	4a02      	ldr	r2, [pc, #8]	; (8002d84 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002d7a:	6813      	ldr	r3, [r2, #0]
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d80:	6013      	str	r3, [r2, #0]
}
 8002d82:	4770      	bx	lr
 8002d84:	40007000 	.word	0x40007000

08002d88 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8002d8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d8e:	4c19      	ldr	r4, [pc, #100]	; (8002df4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	9301      	str	r3, [sp, #4]
 8002d9e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da6:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002da8:	f7fe fdde 	bl	8001968 <HAL_GetTick>
 8002dac:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dae:	6863      	ldr	r3, [r4, #4]
 8002db0:	03da      	lsls	r2, r3, #15
 8002db2:	d50c      	bpl.n	8002dce <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002db4:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002db6:	4d0f      	ldr	r5, [pc, #60]	; (8002df4 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dbc:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002dbe:	f7fe fdd3 	bl	8001968 <HAL_GetTick>
 8002dc2:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dc4:	686b      	ldr	r3, [r5, #4]
 8002dc6:	039b      	lsls	r3, r3, #14
 8002dc8:	d50a      	bpl.n	8002de0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002dca:	2000      	movs	r0, #0
 8002dcc:	e006      	b.n	8002ddc <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dce:	f7fe fdcb 	bl	8001968 <HAL_GetTick>
 8002dd2:	1b40      	subs	r0, r0, r5
 8002dd4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002dd8:	d9e9      	bls.n	8002dae <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8002dda:	2003      	movs	r0, #3
}
 8002ddc:	b003      	add	sp, #12
 8002dde:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002de0:	f7fe fdc2 	bl	8001968 <HAL_GetTick>
 8002de4:	1b00      	subs	r0, r0, r4
 8002de6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002dea:	d9eb      	bls.n	8002dc4 <HAL_PWREx_EnableOverDrive+0x3c>
 8002dec:	e7f5      	b.n	8002dda <HAL_PWREx_EnableOverDrive+0x52>
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40007000 	.word	0x40007000

08002df8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dfc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002e00:	4604      	mov	r4, r0
 8002e02:	460e      	mov	r6, r1
 8002e04:	4615      	mov	r5, r2
 8002e06:	461f      	mov	r7, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002e08:	6822      	ldr	r2, [r4, #0]
 8002e0a:	6893      	ldr	r3, [r2, #8]
 8002e0c:	4233      	tst	r3, r6
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	42ab      	cmp	r3, r5
 8002e16:	d101      	bne.n	8002e1c <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002e18:	2000      	movs	r0, #0
 8002e1a:	e012      	b.n	8002e42 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002e1c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8002e20:	d0f3      	beq.n	8002e0a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7fe fda1 	bl	8001968 <HAL_GetTick>
 8002e26:	1bc0      	subs	r0, r0, r7
 8002e28:	4540      	cmp	r0, r8
 8002e2a:	d802      	bhi.n	8002e32 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8002e2c:	f1b8 0f00 	cmp.w	r8, #0
 8002e30:	d1ea      	bne.n	8002e08 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002e32:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002e34:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002e36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002e3a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002e48 <HAL_QSPI_Init>:
{
 8002e48:	b530      	push	{r4, r5, lr}
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	b085      	sub	sp, #20
  uint32_t tickstart = HAL_GetTick();
 8002e4e:	f7fe fd8b 	bl	8001968 <HAL_GetTick>
 8002e52:	4603      	mov	r3, r0
  if(hqspi == NULL)
 8002e54:	2c00      	cmp	r4, #0
 8002e56:	d047      	beq.n	8002ee8 <HAL_QSPI_Init+0xa0>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002e58:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002e5c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8002e60:	b94a      	cbnz	r2, 8002e76 <HAL_QSPI_Init+0x2e>
 8002e62:	9003      	str	r0, [sp, #12]
    HAL_QSPI_MspInit(hqspi);
 8002e64:	4620      	mov	r0, r4
    hqspi->Lock = HAL_UNLOCKED;
 8002e66:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8002e6a:	f7fe fa35 	bl	80012d8 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	9b03      	ldr	r3, [sp, #12]
 8002e74:	64a2      	str	r2, [r4, #72]	; 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002e76:	6820      	ldr	r0, [r4, #0]
 8002e78:	68a1      	ldr	r1, [r4, #8]
 8002e7a:	6802      	ldr	r2, [r0, #0]
 8002e7c:	3901      	subs	r1, #1
 8002e7e:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8002e82:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002e86:	2120      	movs	r1, #32
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002e88:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e8e:	9200      	str	r2, [sp, #0]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f7ff ffb1 	bl	8002df8 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8002e96:	bb10      	cbnz	r0, 8002ede <HAL_QSPI_Init+0x96>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8002e98:	6822      	ldr	r2, [r4, #0]
 8002e9a:	69e5      	ldr	r5, [r4, #28]
 8002e9c:	68e3      	ldr	r3, [r4, #12]
 8002e9e:	6811      	ldr	r1, [r2, #0]
 8002ea0:	432b      	orrs	r3, r5
 8002ea2:	6a25      	ldr	r5, [r4, #32]
 8002ea4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002ea8:	432b      	orrs	r3, r5
 8002eaa:	6865      	ldr	r5, [r4, #4]
 8002eac:	f021 01d0 	bic.w	r1, r1, #208	; 0xd0
 8002eb0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002eb8:	6855      	ldr	r5, [r2, #4]
 8002eba:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8002ebe:	430b      	orrs	r3, r1
 8002ec0:	6921      	ldr	r1, [r4, #16]
 8002ec2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002ec6:	4909      	ldr	r1, [pc, #36]	; (8002eec <HAL_QSPI_Init+0xa4>)
 8002ec8:	4029      	ands	r1, r5
 8002eca:	430b      	orrs	r3, r1
 8002ecc:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8002ece:	6813      	ldr	r3, [r2, #0]
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8002ed6:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002ed8:	6460      	str	r0, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8002eda:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8002ee4:	b005      	add	sp, #20
 8002ee6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8002ee8:	2001      	movs	r0, #1
 8002eea:	e7fb      	b.n	8002ee4 <HAL_QSPI_Init+0x9c>
 8002eec:	ffe0f8fe 	.word	0xffe0f8fe

08002ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	b340      	cbz	r0, 8002f4a <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef8:	6803      	ldr	r3, [r0, #0]
 8002efa:	07db      	lsls	r3, r3, #31
 8002efc:	d410      	bmi.n	8002f20 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	079f      	lsls	r7, r3, #30
 8002f02:	d464      	bmi.n	8002fce <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	0719      	lsls	r1, r3, #28
 8002f08:	f100 80aa 	bmi.w	8003060 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	075a      	lsls	r2, r3, #29
 8002f10:	f100 80cb 	bmi.w	80030aa <HAL_RCC_OscConfig+0x1ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f14:	69a2      	ldr	r2, [r4, #24]
 8002f16:	2a00      	cmp	r2, #0
 8002f18:	f040 8134 	bne.w	8003184 <HAL_RCC_OscConfig+0x294>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	e02b      	b.n	8002f78 <HAL_RCC_OscConfig+0x88>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f20:	4b96      	ldr	r3, [pc, #600]	; (800317c <HAL_RCC_OscConfig+0x28c>)
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	f002 020c 	and.w	r2, r2, #12
 8002f28:	2a04      	cmp	r2, #4
 8002f2a:	d007      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	f002 020c 	and.w	r2, r2, #12
 8002f32:	2a08      	cmp	r2, #8
 8002f34:	d10b      	bne.n	8002f4e <HAL_RCC_OscConfig+0x5e>
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	0256      	lsls	r6, r2, #9
 8002f3a:	d508      	bpl.n	8002f4e <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	4b8f      	ldr	r3, [pc, #572]	; (800317c <HAL_RCC_OscConfig+0x28c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	039d      	lsls	r5, r3, #14
 8002f42:	d5dc      	bpl.n	8002efe <HAL_RCC_OscConfig+0xe>
 8002f44:	6863      	ldr	r3, [r4, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1d9      	bne.n	8002efe <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8002f4a:	2001      	movs	r0, #1
 8002f4c:	e014      	b.n	8002f78 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4e:	6862      	ldr	r2, [r4, #4]
 8002f50:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002f54:	d113      	bne.n	8002f7e <HAL_RCC_OscConfig+0x8e>
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f5c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f5e:	f7fe fd03 	bl	8001968 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	4e86      	ldr	r6, [pc, #536]	; (800317c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002f64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	6833      	ldr	r3, [r6, #0]
 8002f68:	0398      	lsls	r0, r3, #14
 8002f6a:	d4c8      	bmi.n	8002efe <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7fe fcfc 	bl	8001968 <HAL_GetTick>
 8002f70:	1b40      	subs	r0, r0, r5
 8002f72:	2864      	cmp	r0, #100	; 0x64
 8002f74:	d9f7      	bls.n	8002f66 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002f76:	2003      	movs	r0, #3
}
 8002f78:	b002      	add	sp, #8
 8002f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7e:	4d7f      	ldr	r5, [pc, #508]	; (800317c <HAL_RCC_OscConfig+0x28c>)
 8002f80:	682b      	ldr	r3, [r5, #0]
 8002f82:	b992      	cbnz	r2, 8002faa <HAL_RCC_OscConfig+0xba>
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f88:	602b      	str	r3, [r5, #0]
 8002f8a:	682b      	ldr	r3, [r5, #0]
 8002f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f90:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f92:	f7fe fce9 	bl	8001968 <HAL_GetTick>
 8002f96:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f98:	682b      	ldr	r3, [r5, #0]
 8002f9a:	0399      	lsls	r1, r3, #14
 8002f9c:	d5af      	bpl.n	8002efe <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f9e:	f7fe fce3 	bl	8001968 <HAL_GetTick>
 8002fa2:	1b80      	subs	r0, r0, r6
 8002fa4:	2864      	cmp	r0, #100	; 0x64
 8002fa6:	d9f7      	bls.n	8002f98 <HAL_RCC_OscConfig+0xa8>
 8002fa8:	e7e5      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002faa:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002fae:	d107      	bne.n	8002fc0 <HAL_RCC_OscConfig+0xd0>
 8002fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb4:	602b      	str	r3, [r5, #0]
 8002fb6:	682b      	ldr	r3, [r5, #0]
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	602b      	str	r3, [r5, #0]
 8002fbe:	e7ce      	b.n	8002f5e <HAL_RCC_OscConfig+0x6e>
 8002fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc4:	602b      	str	r3, [r5, #0]
 8002fc6:	682b      	ldr	r3, [r5, #0]
 8002fc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fcc:	e7f6      	b.n	8002fbc <HAL_RCC_OscConfig+0xcc>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fce:	4b6b      	ldr	r3, [pc, #428]	; (800317c <HAL_RCC_OscConfig+0x28c>)
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	f012 0f0c 	tst.w	r2, #12
 8002fd6:	d007      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xf8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	f002 020c 	and.w	r2, r2, #12
 8002fde:	2a08      	cmp	r2, #8
 8002fe0:	d111      	bne.n	8003006 <HAL_RCC_OscConfig+0x116>
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	0252      	lsls	r2, r2, #9
 8002fe6:	d40e      	bmi.n	8003006 <HAL_RCC_OscConfig+0x116>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe8:	4a64      	ldr	r2, [pc, #400]	; (800317c <HAL_RCC_OscConfig+0x28c>)
 8002fea:	6813      	ldr	r3, [r2, #0]
 8002fec:	079b      	lsls	r3, r3, #30
 8002fee:	d502      	bpl.n	8002ff6 <HAL_RCC_OscConfig+0x106>
 8002ff0:	68e3      	ldr	r3, [r4, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d1a9      	bne.n	8002f4a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	6921      	ldr	r1, [r4, #16]
 8002ffa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002ffe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003002:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003004:	e77e      	b.n	8002f04 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003006:	68e2      	ldr	r2, [r4, #12]
 8003008:	b1c2      	cbz	r2, 800303c <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_ENABLE();
 800300a:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4d5b      	ldr	r5, [pc, #364]	; (800317c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003014:	f7fe fca8 	bl	8001968 <HAL_GetTick>
 8003018:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	682b      	ldr	r3, [r5, #0]
 800301c:	079f      	lsls	r7, r3, #30
 800301e:	d507      	bpl.n	8003030 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003020:	682b      	ldr	r3, [r5, #0]
 8003022:	6922      	ldr	r2, [r4, #16]
 8003024:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003028:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	e769      	b.n	8002f04 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003030:	f7fe fc9a 	bl	8001968 <HAL_GetTick>
 8003034:	1b80      	subs	r0, r0, r6
 8003036:	2802      	cmp	r0, #2
 8003038:	d9ef      	bls.n	800301a <HAL_RCC_OscConfig+0x12a>
 800303a:	e79c      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 800303c:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303e:	4e4f      	ldr	r6, [pc, #316]	; (800317c <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_DISABLE();
 8003040:	f022 0201 	bic.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003046:	f7fe fc8f 	bl	8001968 <HAL_GetTick>
 800304a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304c:	6833      	ldr	r3, [r6, #0]
 800304e:	0798      	lsls	r0, r3, #30
 8003050:	f57f af58 	bpl.w	8002f04 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7fe fc88 	bl	8001968 <HAL_GetTick>
 8003058:	1b40      	subs	r0, r0, r5
 800305a:	2802      	cmp	r0, #2
 800305c:	d9f6      	bls.n	800304c <HAL_RCC_OscConfig+0x15c>
 800305e:	e78a      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003060:	6963      	ldr	r3, [r4, #20]
 8003062:	4d46      	ldr	r5, [pc, #280]	; (800317c <HAL_RCC_OscConfig+0x28c>)
 8003064:	b183      	cbz	r3, 8003088 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_LSI_ENABLE();
 8003066:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800306e:	f7fe fc7b 	bl	8001968 <HAL_GetTick>
 8003072:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003074:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003076:	079b      	lsls	r3, r3, #30
 8003078:	f53f af48 	bmi.w	8002f0c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe fc74 	bl	8001968 <HAL_GetTick>
 8003080:	1b80      	subs	r0, r0, r6
 8003082:	2802      	cmp	r0, #2
 8003084:	d9f6      	bls.n	8003074 <HAL_RCC_OscConfig+0x184>
 8003086:	e776      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8003088:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800308a:	f023 0301 	bic.w	r3, r3, #1
 800308e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8003090:	f7fe fc6a 	bl	8001968 <HAL_GetTick>
 8003094:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003096:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003098:	079f      	lsls	r7, r3, #30
 800309a:	f57f af37 	bpl.w	8002f0c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309e:	f7fe fc63 	bl	8001968 <HAL_GetTick>
 80030a2:	1b80      	subs	r0, r0, r6
 80030a4:	2802      	cmp	r0, #2
 80030a6:	d9f6      	bls.n	8003096 <HAL_RCC_OscConfig+0x1a6>
 80030a8:	e765      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030aa:	4b34      	ldr	r3, [pc, #208]	; (800317c <HAL_RCC_OscConfig+0x28c>)
 80030ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030ae:	00d0      	lsls	r0, r2, #3
 80030b0:	d427      	bmi.n	8003102 <HAL_RCC_OscConfig+0x212>
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80030b4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c6:	4d2e      	ldr	r5, [pc, #184]	; (8003180 <HAL_RCC_OscConfig+0x290>)
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	05d9      	lsls	r1, r3, #23
 80030cc:	d51b      	bpl.n	8003106 <HAL_RCC_OscConfig+0x216>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ce:	68a3      	ldr	r3, [r4, #8]
 80030d0:	4d2a      	ldr	r5, [pc, #168]	; (800317c <HAL_RCC_OscConfig+0x28c>)
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d127      	bne.n	8003126 <HAL_RCC_OscConfig+0x236>
 80030d6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030de:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80030e2:	f7fe fc41 	bl	8001968 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030e6:	4e25      	ldr	r6, [pc, #148]	; (800317c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80030e8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80030ec:	079b      	lsls	r3, r3, #30
 80030ee:	d53f      	bpl.n	8003170 <HAL_RCC_OscConfig+0x280>
    if (pwrclkchanged == SET)
 80030f0:	2f00      	cmp	r7, #0
 80030f2:	f43f af0f 	beq.w	8002f14 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f6:	4a21      	ldr	r2, [pc, #132]	; (800317c <HAL_RCC_OscConfig+0x28c>)
 80030f8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80030fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003100:	e708      	b.n	8002f14 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8003102:	2700      	movs	r7, #0
 8003104:	e7df      	b.n	80030c6 <HAL_RCC_OscConfig+0x1d6>
      PWR->CR1 |= PWR_CR1_DBP;
 8003106:	682b      	ldr	r3, [r5, #0]
 8003108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800310e:	f7fe fc2b 	bl	8001968 <HAL_GetTick>
 8003112:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003114:	682b      	ldr	r3, [r5, #0]
 8003116:	05da      	lsls	r2, r3, #23
 8003118:	d4d9      	bmi.n	80030ce <HAL_RCC_OscConfig+0x1de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311a:	f7fe fc25 	bl	8001968 <HAL_GetTick>
 800311e:	1b80      	subs	r0, r0, r6
 8003120:	2864      	cmp	r0, #100	; 0x64
 8003122:	d9f7      	bls.n	8003114 <HAL_RCC_OscConfig+0x224>
 8003124:	e727      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003126:	b9ab      	cbnz	r3, 8003154 <HAL_RCC_OscConfig+0x264>
 8003128:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	672b      	str	r3, [r5, #112]	; 0x70
 8003134:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003136:	f023 0304 	bic.w	r3, r3, #4
 800313a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800313c:	f7fe fc14 	bl	8001968 <HAL_GetTick>
 8003140:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003142:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003144:	0798      	lsls	r0, r3, #30
 8003146:	d5d3      	bpl.n	80030f0 <HAL_RCC_OscConfig+0x200>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003148:	f7fe fc0e 	bl	8001968 <HAL_GetTick>
 800314c:	1b80      	subs	r0, r0, r6
 800314e:	4540      	cmp	r0, r8
 8003150:	d9f7      	bls.n	8003142 <HAL_RCC_OscConfig+0x252>
 8003152:	e710      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003154:	2b05      	cmp	r3, #5
 8003156:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003158:	d103      	bne.n	8003162 <HAL_RCC_OscConfig+0x272>
 800315a:	f043 0304 	orr.w	r3, r3, #4
 800315e:	672b      	str	r3, [r5, #112]	; 0x70
 8003160:	e7b9      	b.n	80030d6 <HAL_RCC_OscConfig+0x1e6>
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	672b      	str	r3, [r5, #112]	; 0x70
 8003168:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800316a:	f023 0304 	bic.w	r3, r3, #4
 800316e:	e7b5      	b.n	80030dc <HAL_RCC_OscConfig+0x1ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003170:	f7fe fbfa 	bl	8001968 <HAL_GetTick>
 8003174:	1b40      	subs	r0, r0, r5
 8003176:	4540      	cmp	r0, r8
 8003178:	d9b7      	bls.n	80030ea <HAL_RCC_OscConfig+0x1fa>
 800317a:	e6fc      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
 800317c:	40023800 	.word	0x40023800
 8003180:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003184:	4d3c      	ldr	r5, [pc, #240]	; (8003278 <HAL_RCC_OscConfig+0x388>)
 8003186:	68ab      	ldr	r3, [r5, #8]
 8003188:	f003 030c 	and.w	r3, r3, #12
 800318c:	2b08      	cmp	r3, #8
 800318e:	d042      	beq.n	8003216 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 8003190:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003192:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8003194:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003198:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800319a:	d12f      	bne.n	80031fc <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 800319c:	f7fe fbe4 	bl	8001968 <HAL_GetTick>
 80031a0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	682b      	ldr	r3, [r5, #0]
 80031a4:	0199      	lsls	r1, r3, #6
 80031a6:	d423      	bmi.n	80031f0 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a8:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031b0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80031b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80031ba:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80031bc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80031c0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80031c2:	0852      	lsrs	r2, r2, #1
 80031c4:	3a01      	subs	r2, #1
 80031c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031ca:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80031cc:	682b      	ldr	r3, [r5, #0]
 80031ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80031d4:	f7fe fbc8 	bl	8001968 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d8:	4d27      	ldr	r5, [pc, #156]	; (8003278 <HAL_RCC_OscConfig+0x388>)
        tickstart = HAL_GetTick();
 80031da:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	019a      	lsls	r2, r3, #6
 80031e0:	f53f ae9c 	bmi.w	8002f1c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fbc0 	bl	8001968 <HAL_GetTick>
 80031e8:	1b00      	subs	r0, r0, r4
 80031ea:	2802      	cmp	r0, #2
 80031ec:	d9f6      	bls.n	80031dc <HAL_RCC_OscConfig+0x2ec>
 80031ee:	e6c2      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe fbba 	bl	8001968 <HAL_GetTick>
 80031f4:	1b80      	subs	r0, r0, r6
 80031f6:	2802      	cmp	r0, #2
 80031f8:	d9d3      	bls.n	80031a2 <HAL_RCC_OscConfig+0x2b2>
 80031fa:	e6bc      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80031fc:	f7fe fbb4 	bl	8001968 <HAL_GetTick>
 8003200:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	682b      	ldr	r3, [r5, #0]
 8003204:	019b      	lsls	r3, r3, #6
 8003206:	f57f ae89 	bpl.w	8002f1c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe fbad 	bl	8001968 <HAL_GetTick>
 800320e:	1b00      	subs	r0, r0, r4
 8003210:	2802      	cmp	r0, #2
 8003212:	d9f6      	bls.n	8003202 <HAL_RCC_OscConfig+0x312>
 8003214:	e6af      	b.n	8002f76 <HAL_RCC_OscConfig+0x86>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003216:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8003218:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800321a:	f43f ae96 	beq.w	8002f4a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003222:	69e1      	ldr	r1, [r4, #28]
 8003224:	428a      	cmp	r2, r1
 8003226:	f47f ae90 	bne.w	8002f4a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800322a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	6a21      	ldr	r1, [r4, #32]
 8003230:	428a      	cmp	r2, r1
 8003232:	f47f ae8a 	bne.w	8002f4a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003236:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800323a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800323c:	401a      	ands	r2, r3
 800323e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003242:	f47f ae82 	bne.w	8002f4a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003246:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003248:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800324c:	0852      	lsrs	r2, r2, #1
 800324e:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003250:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003254:	f47f ae79 	bne.w	8002f4a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003258:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800325c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800325e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8003262:	f47f ae72 	bne.w	8002f4a <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003266:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800326a:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800326c:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8003270:	f43f ae54 	beq.w	8002f1c <HAL_RCC_OscConfig+0x2c>
 8003274:	e669      	b.n	8002f4a <HAL_RCC_OscConfig+0x5a>
 8003276:	bf00      	nop
 8003278:	40023800 	.word	0x40023800

0800327c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800327c:	4913      	ldr	r1, [pc, #76]	; (80032cc <HAL_RCC_GetSysClockFreq+0x50>)
{
 800327e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003280:	688b      	ldr	r3, [r1, #8]
 8003282:	f003 030c 	and.w	r3, r3, #12
 8003286:	2b04      	cmp	r3, #4
 8003288:	d01b      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x46>
 800328a:	2b08      	cmp	r3, #8
 800328c:	d11b      	bne.n	80032c6 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800328e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003290:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003294:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003298:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800329c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80032a0:	bf1a      	itte	ne
 80032a2:	480b      	ldrne	r0, [pc, #44]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x54>)
 80032a4:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a6:	480b      	ldreq	r0, [pc, #44]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x58>)
 80032a8:	fba1 0100 	umull	r0, r1, r1, r0
 80032ac:	f7fd f92e 	bl	800050c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80032b0:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_GetSysClockFreq+0x50>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80032b8:	3301      	adds	r3, #1
 80032ba:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80032bc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80032c0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c2:	4803      	ldr	r0, [pc, #12]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x54>)
 80032c4:	e7fc      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80032c6:	4803      	ldr	r0, [pc, #12]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80032c8:	e7fa      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x44>
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800
 80032d0:	017d7840 	.word	0x017d7840
 80032d4:	00f42400 	.word	0x00f42400

080032d8 <HAL_RCC_ClockConfig>:
{
 80032d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032dc:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80032de:	4604      	mov	r4, r0
 80032e0:	b910      	cbnz	r0, 80032e8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80032e2:	2001      	movs	r0, #1
}
 80032e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032e8:	4a46      	ldr	r2, [pc, #280]	; (8003404 <HAL_RCC_ClockConfig+0x12c>)
 80032ea:	6813      	ldr	r3, [r2, #0]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	428b      	cmp	r3, r1
 80032f2:	d328      	bcc.n	8003346 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	0797      	lsls	r7, r2, #30
 80032f8:	d430      	bmi.n	800335c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fa:	07d0      	lsls	r0, r2, #31
 80032fc:	d444      	bmi.n	8003388 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032fe:	4a41      	ldr	r2, [pc, #260]	; (8003404 <HAL_RCC_ClockConfig+0x12c>)
 8003300:	6813      	ldr	r3, [r2, #0]
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	42ab      	cmp	r3, r5
 8003308:	d867      	bhi.n	80033da <HAL_RCC_ClockConfig+0x102>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800330a:	6822      	ldr	r2, [r4, #0]
 800330c:	0751      	lsls	r1, r2, #29
 800330e:	d470      	bmi.n	80033f2 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003310:	0713      	lsls	r3, r2, #28
 8003312:	d507      	bpl.n	8003324 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003314:	4a3c      	ldr	r2, [pc, #240]	; (8003408 <HAL_RCC_ClockConfig+0x130>)
 8003316:	6921      	ldr	r1, [r4, #16]
 8003318:	6893      	ldr	r3, [r2, #8]
 800331a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800331e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003322:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003324:	f7ff ffaa 	bl	800327c <HAL_RCC_GetSysClockFreq>
 8003328:	4b37      	ldr	r3, [pc, #220]	; (8003408 <HAL_RCC_ClockConfig+0x130>)
 800332a:	4a38      	ldr	r2, [pc, #224]	; (800340c <HAL_RCC_ClockConfig+0x134>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	40d8      	lsrs	r0, r3
 8003336:	4b36      	ldr	r3, [pc, #216]	; (8003410 <HAL_RCC_ClockConfig+0x138>)
 8003338:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800333a:	4b36      	ldr	r3, [pc, #216]	; (8003414 <HAL_RCC_ClockConfig+0x13c>)
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	f7fe fad7 	bl	80018f0 <HAL_InitTick>
  return HAL_OK;
 8003342:	2000      	movs	r0, #0
 8003344:	e7ce      	b.n	80032e4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	6813      	ldr	r3, [r2, #0]
 8003348:	f023 030f 	bic.w	r3, r3, #15
 800334c:	430b      	orrs	r3, r1
 800334e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003350:	6813      	ldr	r3, [r2, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	428b      	cmp	r3, r1
 8003358:	d1c3      	bne.n	80032e2 <HAL_RCC_ClockConfig+0xa>
 800335a:	e7cb      	b.n	80032f4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	f012 0f04 	tst.w	r2, #4
 8003360:	4b29      	ldr	r3, [pc, #164]	; (8003408 <HAL_RCC_ClockConfig+0x130>)
 8003362:	d003      	beq.n	800336c <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003364:	6899      	ldr	r1, [r3, #8]
 8003366:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 800336a:	6099      	str	r1, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	0716      	lsls	r6, r2, #28
 800336e:	d503      	bpl.n	8003378 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003370:	6899      	ldr	r1, [r3, #8]
 8003372:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8003376:	6099      	str	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003378:	4923      	ldr	r1, [pc, #140]	; (8003408 <HAL_RCC_ClockConfig+0x130>)
 800337a:	68a0      	ldr	r0, [r4, #8]
 800337c:	688b      	ldr	r3, [r1, #8]
 800337e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003382:	4303      	orrs	r3, r0
 8003384:	608b      	str	r3, [r1, #8]
 8003386:	e7b8      	b.n	80032fa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003388:	6861      	ldr	r1, [r4, #4]
 800338a:	4b1f      	ldr	r3, [pc, #124]	; (8003408 <HAL_RCC_ClockConfig+0x130>)
 800338c:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800338e:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003390:	d11b      	bne.n	80033ca <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003396:	d0a4      	beq.n	80032e2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003398:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800339a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	4f1a      	ldr	r7, [pc, #104]	; (8003408 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033a0:	f022 0203 	bic.w	r2, r2, #3
 80033a4:	430a      	orrs	r2, r1
 80033a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80033a8:	f7fe fade 	bl	8001968 <HAL_GetTick>
 80033ac:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6862      	ldr	r2, [r4, #4]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80033ba:	d0a0      	beq.n	80032fe <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033bc:	f7fe fad4 	bl	8001968 <HAL_GetTick>
 80033c0:	1b80      	subs	r0, r0, r6
 80033c2:	4540      	cmp	r0, r8
 80033c4:	d9f3      	bls.n	80033ae <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 80033c6:	2003      	movs	r0, #3
 80033c8:	e78c      	b.n	80032e4 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ca:	2902      	cmp	r1, #2
 80033cc:	d102      	bne.n	80033d4 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80033d2:	e7e0      	b.n	8003396 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	f012 0f02 	tst.w	r2, #2
 80033d8:	e7dd      	b.n	8003396 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	6813      	ldr	r3, [r2, #0]
 80033dc:	f023 030f 	bic.w	r3, r3, #15
 80033e0:	432b      	orrs	r3, r5
 80033e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e4:	6813      	ldr	r3, [r2, #0]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	42ab      	cmp	r3, r5
 80033ec:	f47f af79 	bne.w	80032e2 <HAL_RCC_ClockConfig+0xa>
 80033f0:	e78b      	b.n	800330a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f2:	4905      	ldr	r1, [pc, #20]	; (8003408 <HAL_RCC_ClockConfig+0x130>)
 80033f4:	68e0      	ldr	r0, [r4, #12]
 80033f6:	688b      	ldr	r3, [r1, #8]
 80033f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80033fc:	4303      	orrs	r3, r0
 80033fe:	608b      	str	r3, [r1, #8]
 8003400:	e786      	b.n	8003310 <HAL_RCC_ClockConfig+0x38>
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00
 8003408:	40023800 	.word	0x40023800
 800340c:	08010344 	.word	0x08010344
 8003410:	20000000 	.word	0x20000000
 8003414:	20000008 	.word	0x20000008

08003418 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003418:	4b01      	ldr	r3, [pc, #4]	; (8003420 <HAL_RCC_GetHCLKFreq+0x8>)
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	20000000 	.word	0x20000000

08003424 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003424:	4b04      	ldr	r3, [pc, #16]	; (8003438 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003426:	4a05      	ldr	r2, [pc, #20]	; (800343c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800342e:	5cd3      	ldrb	r3, [r2, r3]
 8003430:	4a03      	ldr	r2, [pc, #12]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003432:	6810      	ldr	r0, [r2, #0]
}
 8003434:	40d8      	lsrs	r0, r3
 8003436:	4770      	bx	lr
 8003438:	40023800 	.word	0x40023800
 800343c:	08010354 	.word	0x08010354
 8003440:	20000000 	.word	0x20000000

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003446:	4a05      	ldr	r2, [pc, #20]	; (800345c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800344e:	5cd3      	ldrb	r3, [r2, r3]
 8003450:	4a03      	ldr	r2, [pc, #12]	; (8003460 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003452:	6810      	ldr	r0, [r2, #0]
}
 8003454:	40d8      	lsrs	r0, r3
 8003456:	4770      	bx	lr
 8003458:	40023800 	.word	0x40023800
 800345c:	08010354 	.word	0x08010354
 8003460:	20000000 	.word	0x20000000

08003464 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003464:	6803      	ldr	r3, [r0, #0]
{
 8003466:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800346a:	f013 0601 	ands.w	r6, r3, #1
{
 800346e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003470:	d00b      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003472:	4ab0      	ldr	r2, [pc, #704]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003474:	6891      	ldr	r1, [r2, #8]
 8003476:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800347a:	6091      	str	r1, [r2, #8]
 800347c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 800347e:	6891      	ldr	r1, [r2, #8]
 8003480:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003482:	fab6 f686 	clz	r6, r6
 8003486:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003488:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800348a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800348e:	d012      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003490:	49a8      	ldr	r1, [pc, #672]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003492:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8003494:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003498:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800349c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 80034a0:	bf08      	it	eq
 80034a2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034a4:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034a8:	bf16      	itet	ne
 80034aa:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80034ae:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034b0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034b2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034b6:	02d9      	lsls	r1, r3, #11
 80034b8:	d510      	bpl.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ba:	489e      	ldr	r0, [pc, #632]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80034bc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80034be:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034c2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034c6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80034ca:	ea42 0201 	orr.w	r2, r2, r1
 80034ce:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80034d2:	f000 81a7 	beq.w	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80034d6:	2900      	cmp	r1, #0
 80034d8:	bf08      	it	eq
 80034da:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 80034dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80034e0:	bf18      	it	ne
 80034e2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034e4:	069a      	lsls	r2, r3, #26
 80034e6:	d531      	bpl.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034e8:	4b92      	ldr	r3, [pc, #584]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034ea:	4f93      	ldr	r7, [pc, #588]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80034ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003506:	f7fe fa2f 	bl	8001968 <HAL_GetTick>
 800350a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	05db      	lsls	r3, r3, #23
 8003510:	f140 818a 	bpl.w	8003828 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003514:	4f87      	ldr	r7, [pc, #540]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003516:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003518:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800351c:	f040 818f 	bne.w	800383e <HAL_RCCEx_PeriphCLKConfig+0x3da>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003520:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003522:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003526:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800352a:	4a82      	ldr	r2, [pc, #520]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800352c:	f040 81ad 	bne.w	800388a <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003530:	6891      	ldr	r1, [r2, #8]
 8003532:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8003536:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800353a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800353e:	4301      	orrs	r1, r0
 8003540:	6091      	str	r1, [r2, #8]
 8003542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003546:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003548:	430b      	orrs	r3, r1
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800354c:	6823      	ldr	r3, [r4, #0]
 800354e:	06da      	lsls	r2, r3, #27
 8003550:	d50c      	bpl.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003552:	4a78      	ldr	r2, [pc, #480]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003554:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003558:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 800355c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8003560:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8003564:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003566:	4301      	orrs	r1, r0
 8003568:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800356c:	045f      	lsls	r7, r3, #17
 800356e:	d508      	bpl.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003570:	4970      	ldr	r1, [pc, #448]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003572:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8003574:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003578:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800357c:	4302      	orrs	r2, r0
 800357e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003582:	0418      	lsls	r0, r3, #16
 8003584:	d508      	bpl.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003586:	496b      	ldr	r1, [pc, #428]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003588:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800358a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800358e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8003592:	4302      	orrs	r2, r0
 8003594:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003598:	03d9      	lsls	r1, r3, #15
 800359a:	d508      	bpl.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800359c:	4965      	ldr	r1, [pc, #404]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800359e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80035a0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80035a4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80035a8:	4302      	orrs	r2, r0
 80035aa:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035ae:	039a      	lsls	r2, r3, #14
 80035b0:	d508      	bpl.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035b2:	4960      	ldr	r1, [pc, #384]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80035b4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80035b6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80035ba:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80035be:	4302      	orrs	r2, r0
 80035c0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c4:	065f      	lsls	r7, r3, #25
 80035c6:	d508      	bpl.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035c8:	495a      	ldr	r1, [pc, #360]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80035ca:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80035cc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80035d0:	f022 0203 	bic.w	r2, r2, #3
 80035d4:	4302      	orrs	r2, r0
 80035d6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035da:	0618      	lsls	r0, r3, #24
 80035dc:	d508      	bpl.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035de:	4955      	ldr	r1, [pc, #340]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80035e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80035e2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80035e6:	f022 020c 	bic.w	r2, r2, #12
 80035ea:	4302      	orrs	r2, r0
 80035ec:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035f0:	05d9      	lsls	r1, r3, #23
 80035f2:	d508      	bpl.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035f4:	494f      	ldr	r1, [pc, #316]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80035f6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80035f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80035fc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8003600:	4302      	orrs	r2, r0
 8003602:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003606:	059a      	lsls	r2, r3, #22
 8003608:	d508      	bpl.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800360a:	494a      	ldr	r1, [pc, #296]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800360c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800360e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003612:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003616:	4302      	orrs	r2, r0
 8003618:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800361c:	055f      	lsls	r7, r3, #21
 800361e:	d508      	bpl.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003620:	4944      	ldr	r1, [pc, #272]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003624:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003628:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800362c:	4302      	orrs	r2, r0
 800362e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003632:	0518      	lsls	r0, r3, #20
 8003634:	d508      	bpl.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003636:	493f      	ldr	r1, [pc, #252]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800363a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800363e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003642:	4302      	orrs	r2, r0
 8003644:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003648:	04d9      	lsls	r1, r3, #19
 800364a:	d508      	bpl.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800364c:	4939      	ldr	r1, [pc, #228]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800364e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003650:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003654:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003658:	4302      	orrs	r2, r0
 800365a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800365e:	049a      	lsls	r2, r3, #18
 8003660:	d508      	bpl.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003662:	4934      	ldr	r1, [pc, #208]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003664:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003666:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800366a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800366e:	4302      	orrs	r2, r0
 8003670:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003674:	025f      	lsls	r7, r3, #9
 8003676:	d508      	bpl.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003678:	492e      	ldr	r1, [pc, #184]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800367a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800367c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003680:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003684:	4302      	orrs	r2, r0
 8003686:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800368a:	0298      	lsls	r0, r3, #10
 800368c:	d50c      	bpl.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800368e:	4829      	ldr	r0, [pc, #164]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003690:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003692:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8003696:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800369a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 800369e:	bf08      	it	eq
 80036a0:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036a2:	430a      	orrs	r2, r1
 80036a4:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80036a8:	f013 0f08 	tst.w	r3, #8
 80036ac:	bf18      	it	ne
 80036ae:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80036b0:	0359      	lsls	r1, r3, #13
 80036b2:	d508      	bpl.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036b4:	491f      	ldr	r1, [pc, #124]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80036b6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80036b8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80036bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80036c0:	4302      	orrs	r2, r0
 80036c2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80036c6:	021a      	lsls	r2, r3, #8
 80036c8:	d509      	bpl.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036ca:	491a      	ldr	r1, [pc, #104]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80036cc:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80036d0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80036d4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80036d8:	4302      	orrs	r2, r0
 80036da:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80036de:	015f      	lsls	r7, r3, #5
 80036e0:	d509      	bpl.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80036e2:	4914      	ldr	r1, [pc, #80]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80036e4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80036e8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80036ec:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80036f0:	4302      	orrs	r2, r0
 80036f2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036f6:	0118      	lsls	r0, r3, #4
 80036f8:	d509      	bpl.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036fa:	490e      	ldr	r1, [pc, #56]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80036fc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8003700:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8003704:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8003708:	4302      	orrs	r2, r0
 800370a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800370e:	00d9      	lsls	r1, r3, #3
 8003710:	d509      	bpl.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003712:	4908      	ldr	r1, [pc, #32]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003714:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8003718:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800371c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8003720:	4302      	orrs	r2, r0
 8003722:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003726:	2e01      	cmp	r6, #1
 8003728:	f000 80b3 	beq.w	8003892 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800372c:	019a      	lsls	r2, r3, #6
 800372e:	f100 80b0 	bmi.w	8003892 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003732:	e003      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003734:	40023800 	.word	0x40023800
 8003738:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800373c:	2d01      	cmp	r5, #1
 800373e:	d16f      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003740:	4d9d      	ldr	r5, [pc, #628]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8003742:	682b      	ldr	r3, [r5, #0]
 8003744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003748:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800374a:	f7fe f90d 	bl	8001968 <HAL_GetTick>
 800374e:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003750:	682b      	ldr	r3, [r5, #0]
 8003752:	009f      	lsls	r7, r3, #2
 8003754:	f100 8121 	bmi.w	800399a <HAL_RCCEx_PeriphCLKConfig+0x536>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003758:	6822      	ldr	r2, [r4, #0]
 800375a:	0316      	lsls	r6, r2, #12
 800375c:	d501      	bpl.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800375e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003760:	b11b      	cbz	r3, 800376a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003762:	02d0      	lsls	r0, r2, #11
 8003764:	d51c      	bpl.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003766:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003768:	b9d3      	cbnz	r3, 80037a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800376a:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800376e:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003772:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003776:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800377a:	430b      	orrs	r3, r1
 800377c:	6961      	ldr	r1, [r4, #20]
 800377e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8003782:	69a1      	ldr	r1, [r4, #24]
 8003784:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003788:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800378c:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 8003790:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003792:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003796:	3901      	subs	r1, #1
 8003798:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800379c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037a0:	0291      	lsls	r1, r2, #10
 80037a2:	d515      	bpl.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 80037a4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80037a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037aa:	d111      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037ac:	4982      	ldr	r1, [pc, #520]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80037ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037b2:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80037b6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80037ba:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80037be:	4303      	orrs	r3, r0
 80037c0:	6960      	ldr	r0, [r4, #20]
 80037c2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80037c6:	6a20      	ldr	r0, [r4, #32]
 80037c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80037cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80037d0:	0712      	lsls	r2, r2, #28
 80037d2:	d519      	bpl.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80037d4:	4a78      	ldr	r2, [pc, #480]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80037d6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80037de:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80037e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037e6:	430b      	orrs	r3, r1
 80037e8:	6961      	ldr	r1, [r4, #20]
 80037ea:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80037ee:	69e1      	ldr	r1, [r4, #28]
 80037f0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80037f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80037f8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80037fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80037fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003802:	430b      	orrs	r3, r1
 8003804:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003808:	4c6b      	ldr	r4, [pc, #428]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003810:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003812:	f7fe f8a9 	bl	8001968 <HAL_GetTick>
 8003816:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	f140 80c4 	bpl.w	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8003820:	2000      	movs	r0, #0
 8003822:	e009      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
      plli2sused = 1;
 8003824:	2601      	movs	r6, #1
 8003826:	e659      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003828:	f7fe f89e 	bl	8001968 <HAL_GetTick>
 800382c:	eba0 0008 	sub.w	r0, r0, r8
 8003830:	2864      	cmp	r0, #100	; 0x64
 8003832:	f67f ae6b 	bls.w	800350c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8003836:	2003      	movs	r0, #3
}
 8003838:	b003      	add	sp, #12
 800383a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800383e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003840:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8003844:	4293      	cmp	r3, r2
 8003846:	f43f ae6b 	beq.w	8003520 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 800384c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003852:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003856:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003858:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800385a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800385e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8003860:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003864:	07d8      	lsls	r0, r3, #31
 8003866:	f57f ae5b 	bpl.w	8003520 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800386a:	f7fe f87d 	bl	8001968 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003872:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003874:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003876:	0799      	lsls	r1, r3, #30
 8003878:	f53f ae52 	bmi.w	8003520 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800387c:	f7fe f874 	bl	8001968 <HAL_GetTick>
 8003880:	eba0 0008 	sub.w	r0, r0, r8
 8003884:	4548      	cmp	r0, r9
 8003886:	d9f5      	bls.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003888:	e7d5      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800388a:	6891      	ldr	r1, [r2, #8]
 800388c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8003890:	e656      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8003892:	4e49      	ldr	r6, [pc, #292]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8003894:	6833      	ldr	r3, [r6, #0]
 8003896:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800389a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800389c:	f7fe f864 	bl	8001968 <HAL_GetTick>
 80038a0:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038a2:	6833      	ldr	r3, [r6, #0]
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	d472      	bmi.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038a8:	6822      	ldr	r2, [r4, #0]
 80038aa:	07d7      	lsls	r7, r2, #31
 80038ac:	d512      	bpl.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80038ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038b0:	b983      	cbnz	r3, 80038d4 <HAL_RCCEx_PeriphCLKConfig+0x470>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038b2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80038b6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80038ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038be:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80038c2:	430b      	orrs	r3, r1
 80038c4:	6861      	ldr	r1, [r4, #4]
 80038c6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80038ca:	68a1      	ldr	r1, [r4, #8]
 80038cc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80038d0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80038d4:	0316      	lsls	r6, r2, #12
 80038d6:	d503      	bpl.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80038da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038de:	d005      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x488>
 80038e0:	02d0      	lsls	r0, r2, #11
 80038e2:	d51e      	bpl.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4be>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80038e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ea:	d11a      	bne.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038ec:	4932      	ldr	r1, [pc, #200]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 80038ee:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80038f2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80038f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038fa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80038fe:	4303      	orrs	r3, r0
 8003900:	6860      	ldr	r0, [r4, #4]
 8003902:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003906:	68e0      	ldr	r0, [r4, #12]
 8003908:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800390c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003910:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8003914:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003916:	f020 001f 	bic.w	r0, r0, #31
 800391a:	3b01      	subs	r3, #1
 800391c:	4303      	orrs	r3, r0
 800391e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003922:	01d1      	lsls	r1, r2, #7
 8003924:	d511      	bpl.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003926:	4924      	ldr	r1, [pc, #144]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8003928:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800392c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003930:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003934:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003938:	4303      	orrs	r3, r0
 800393a:	6860      	ldr	r0, [r4, #4]
 800393c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003940:	6920      	ldr	r0, [r4, #16]
 8003942:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003946:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800394a:	0192      	lsls	r2, r2, #6
 800394c:	d50d      	bpl.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x506>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800394e:	6923      	ldr	r3, [r4, #16]
 8003950:	6862      	ldr	r2, [r4, #4]
 8003952:	041b      	lsls	r3, r3, #16
 8003954:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003958:	68e2      	ldr	r2, [r4, #12]
 800395a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800395e:	68a2      	ldr	r2, [r4, #8]
 8003960:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003964:	4a14      	ldr	r2, [pc, #80]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 8003966:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800396a:	4e13      	ldr	r6, [pc, #76]	; (80039b8 <HAL_RCCEx_PeriphCLKConfig+0x554>)
 800396c:	6833      	ldr	r3, [r6, #0]
 800396e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003972:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003974:	f7fd fff8 	bl	8001968 <HAL_GetTick>
 8003978:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800397a:	6833      	ldr	r3, [r6, #0]
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	f53f aedd 	bmi.w	800373c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003982:	f7fd fff1 	bl	8001968 <HAL_GetTick>
 8003986:	1bc0      	subs	r0, r0, r7
 8003988:	2864      	cmp	r0, #100	; 0x64
 800398a:	d9f6      	bls.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x516>
 800398c:	e753      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800398e:	f7fd ffeb 	bl	8001968 <HAL_GetTick>
 8003992:	1bc0      	subs	r0, r0, r7
 8003994:	2864      	cmp	r0, #100	; 0x64
 8003996:	d984      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003998:	e74d      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800399a:	f7fd ffe5 	bl	8001968 <HAL_GetTick>
 800399e:	1b80      	subs	r0, r0, r6
 80039a0:	2864      	cmp	r0, #100	; 0x64
 80039a2:	f67f aed5 	bls.w	8003750 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 80039a6:	e746      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039a8:	f7fd ffde 	bl	8001968 <HAL_GetTick>
 80039ac:	1b40      	subs	r0, r0, r5
 80039ae:	2864      	cmp	r0, #100	; 0x64
 80039b0:	f67f af32 	bls.w	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80039b4:	e73f      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80039b6:	bf00      	nop
 80039b8:	40023800 	.word	0x40023800

080039bc <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80039bc:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 80039c0:	d131      	bne.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80039c2:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80039c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80039c8:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
    switch (saiclocksource)
 80039cc:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80039d0:	d05f      	beq.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80039d2:	d806      	bhi.n	80039e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 80039d4:	2a00      	cmp	r2, #0
 80039d6:	d039      	beq.n	8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 80039d8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
  {
    saiclocksource = RCC->DCKCFGR1;
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
    switch (saiclocksource)
 80039dc:	d051      	beq.n	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
    default :
      {
        break;
      }
    }
  }
 80039de:	2000      	movs	r0, #0
 80039e0:	4770      	bx	lr
    switch (saiclocksource)
 80039e2:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
    switch (saiclocksource)
 80039e6:	d1fa      	bne.n	80039de <HAL_RCCEx_GetPeriphCLKFreq+0x22>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80039e8:	685b      	ldr	r3, [r3, #4]
          frequency = HSI_VALUE;
 80039ea:	482c      	ldr	r0, [pc, #176]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 80039ec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80039f0:	4b2b      	ldr	r3, [pc, #172]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 80039f2:	bf08      	it	eq
 80039f4:	4618      	moveq	r0, r3
 80039f6:	4770      	bx	lr
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80039f8:	4828      	ldr	r0, [pc, #160]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80039fa:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80039fc:	fbb0 f3f3 	udiv	r3, r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003a00:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003a04:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8003a08:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003a0c:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003a0e:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003a12:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003a16:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	3301      	adds	r3, #1
        frequency = frequency/(tmpreg);
 8003a20:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8003a24:	4770      	bx	lr
  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003a26:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8003a2a:	d1d8      	bne.n	80039de <HAL_RCCEx_GetPeriphCLKFreq+0x22>
    saiclocksource = RCC->DCKCFGR1;
 8003a2c:	4b1a      	ldr	r3, [pc, #104]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8003a2e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8003a32:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
    switch (saiclocksource)
 8003a36:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003a3a:	d02a      	beq.n	8003a92 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8003a3c:	d803      	bhi.n	8003a46 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
 8003a3e:	b12a      	cbz	r2, 8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8003a40:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003a44:	e7ca      	b.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x20>
 8003a46:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8003a4a:	e7cc      	b.n	80039e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003a4c:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a4e:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003a50:	0251      	lsls	r1, r2, #9
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003a52:	4a11      	ldr	r2, [pc, #68]	; (8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a58:	bf54      	ite	pl
 8003a5a:	4811      	ldrpl	r0, [pc, #68]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003a5c:	480f      	ldrmi	r0, [pc, #60]	; (8003a9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003a5e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003a62:	fbb0 f3f3 	udiv	r3, r0, r3
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003a66:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8003a6a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003a6e:	4358      	muls	r0, r3
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003a70:	f3c1 6303 	ubfx	r3, r1, #24, #4
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003a74:	fbb0 f0f3 	udiv	r0, r0, r3
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003a78:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003a7c:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8003a80:	e7cd      	b.n	8003a1e <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003a82:	685a      	ldr	r2, [r3, #4]
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a84:	685b      	ldr	r3, [r3, #4]
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003a86:	0252      	lsls	r2, r2, #9
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003a8c:	d4b4      	bmi.n	80039f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a8e:	4804      	ldr	r0, [pc, #16]	; (8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003a90:	e7b3      	b.n	80039fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8003a92:	4804      	ldr	r0, [pc, #16]	; (8003aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)

  return frequency;
}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	017d7840 	.word	0x017d7840
 8003aa0:	00f42400 	.word	0x00f42400
 8003aa4:	00bb8000 	.word	0x00bb8000

08003aa8 <SAI_Disable.isra.0>:
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003aa8:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <SAI_Disable.isra.0+0x34>)
 8003aaa:	f641 3258 	movw	r2, #7000	; 0x1b58
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	fbb3 f3f2 	udiv	r3, r3, r2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8003ab4:	6802      	ldr	r2, [r0, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003ab6:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8003ab8:	6811      	ldr	r1, [r2, #0]
 8003aba:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003abe:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	d206      	bcs.n	8003ad2 <SAI_Disable.isra.0+0x2a>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003ac4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8003ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003acc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
      status = HAL_TIMEOUT;
      break;
 8003ad0:	4770      	bx	lr
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8003ad2:	6811      	ldr	r1, [r2, #0]
 8003ad4:	03c9      	lsls	r1, r1, #15
 8003ad6:	d4f3      	bmi.n	8003ac0 <SAI_Disable.isra.0+0x18>

  return status;
}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	20000000 	.word	0x20000000

08003ae0 <HAL_SAI_Init>:
{
 8003ae0:	b570      	push	{r4, r5, r6, lr}
  if (hsai == NULL)
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	f000 80cc 	beq.w	8003c82 <HAL_SAI_Init+0x1a2>
  if (hsai->State == HAL_SAI_STATE_RESET)
 8003aea:	f890 307d 	ldrb.w	r3, [r0, #125]	; 0x7d
 8003aee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003af2:	b91b      	cbnz	r3, 8003afc <HAL_SAI_Init+0x1c>
    hsai->Lock = HAL_UNLOCKED;
 8003af4:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    HAL_SAI_MspInit(hsai);
 8003af8:	f7fd fe26 	bl	8001748 <HAL_SAI_MspInit>
  hsai->State = HAL_SAI_STATE_BUSY;
 8003afc:	2302      	movs	r3, #2
  SAI_Disable(hsai);
 8003afe:	4620      	mov	r0, r4
  hsai->State = HAL_SAI_STATE_BUSY;
 8003b00:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
  SAI_Disable(hsai);
 8003b04:	f7ff ffd0 	bl	8003aa8 <SAI_Disable.isra.0>
  switch (hsai->Init.SynchroExt)
 8003b08:	68e3      	ldr	r3, [r4, #12]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	f000 80a7 	beq.w	8003c5e <HAL_SAI_Init+0x17e>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	bf14      	ite	ne
 8003b14:	2300      	movne	r3, #0
 8003b16:	2320      	moveq	r3, #32
  switch (hsai->Init.Synchro)
 8003b18:	68a2      	ldr	r2, [r4, #8]
 8003b1a:	2a02      	cmp	r2, #2
 8003b1c:	f000 80a3 	beq.w	8003c66 <HAL_SAI_Init+0x186>
 8003b20:	2a03      	cmp	r2, #3
 8003b22:	f000 809e 	beq.w	8003c62 <HAL_SAI_Init+0x182>
 8003b26:	2a01      	cmp	r2, #1
 8003b28:	bf14      	ite	ne
 8003b2a:	2500      	movne	r5, #0
 8003b2c:	f44f 6580 	moveq.w	r5, #1024	; 0x400
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	4955      	ldr	r1, [pc, #340]	; (8003c88 <HAL_SAI_Init+0x1a8>)
 8003b34:	4855      	ldr	r0, [pc, #340]	; (8003c8c <HAL_SAI_Init+0x1ac>)
 8003b36:	428a      	cmp	r2, r1
 8003b38:	d003      	beq.n	8003b42 <HAL_SAI_Init+0x62>
 8003b3a:	4e55      	ldr	r6, [pc, #340]	; (8003c90 <HAL_SAI_Init+0x1b0>)
 8003b3c:	42b2      	cmp	r2, r6
 8003b3e:	f040 8095 	bne.w	8003c6c <HAL_SAI_Init+0x18c>
    SAI1->GCR = tmpregisterGCR;
 8003b42:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003b46:	69e3      	ldr	r3, [r4, #28]
 8003b48:	b343      	cbz	r3, 8003b9c <HAL_SAI_Init+0xbc>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003b4a:	428a      	cmp	r2, r1
 8003b4c:	d003      	beq.n	8003b56 <HAL_SAI_Init+0x76>
 8003b4e:	4b50      	ldr	r3, [pc, #320]	; (8003c90 <HAL_SAI_Init+0x1b0>)
 8003b50:	429a      	cmp	r2, r3
 8003b52:	f040 808e 	bne.w	8003c72 <HAL_SAI_Init+0x192>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003b56:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b5a:	f7ff ff2f 	bl	80039bc <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8003b5e:	6823      	ldr	r3, [r4, #0]
 8003b60:	4a4c      	ldr	r2, [pc, #304]	; (8003c94 <HAL_SAI_Init+0x1b4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d002      	beq.n	8003b6c <HAL_SAI_Init+0x8c>
 8003b66:	3220      	adds	r2, #32
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d103      	bne.n	8003b74 <HAL_SAI_Init+0x94>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003b6c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003b70:	f7ff ff24 	bl	80039bc <HAL_RCCEx_GetPeriphCLKFreq>
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8003b74:	220a      	movs	r2, #10
 8003b76:	69e3      	ldr	r3, [r4, #28]
 8003b78:	4350      	muls	r0, r2
 8003b7a:	025b      	lsls	r3, r3, #9
 8003b7c:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10;
 8003b80:	fbb0 f3f2 	udiv	r3, r0, r2
    if ((tmpval % 10) > 8)
 8003b84:	fb02 0013 	mls	r0, r2, r3, r0
 8003b88:	2809      	cmp	r0, #9
      hsai->Init.Mckdiv += 1;
 8003b8a:	bf08      	it	eq
 8003b8c:	3301      	addeq	r3, #1
 8003b8e:	6223      	str	r3, [r4, #32]
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8003b90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b92:	2b04      	cmp	r3, #4
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8003b94:	bf02      	ittt	eq
 8003b96:	6a23      	ldreq	r3, [r4, #32]
 8003b98:	085b      	lsreq	r3, r3, #1
 8003b9a:	6223      	streq	r3, [r4, #32]
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003b9c:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003b9e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003ba0:	f033 0102 	bics.w	r1, r3, #2
 8003ba4:	d167      	bne.n	8003c76 <HAL_SAI_Init+0x196>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8003ba6:	2a01      	cmp	r2, #1
 8003ba8:	bf18      	it	ne
 8003baa:	f44f 7100 	movne.w	r1, #512	; 0x200
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003bae:	6822      	ldr	r2, [r4, #0]
 8003bb0:	4839      	ldr	r0, [pc, #228]	; (8003c98 <HAL_SAI_Init+0x1b8>)
 8003bb2:	6816      	ldr	r6, [r2, #0]
 8003bb4:	4030      	ands	r0, r6
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003bb6:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8003bb8:	4333      	orrs	r3, r6
 8003bba:	6b66      	ldr	r6, [r4, #52]	; 0x34
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8003bbc:	6010      	str	r0, [r2, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003bbe:	4333      	orrs	r3, r6
 8003bc0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003bc2:	6810      	ldr	r0, [r2, #0]
 8003bc4:	4333      	orrs	r3, r6
 8003bc6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003bc8:	4333      	orrs	r3, r6
 8003bca:	6926      	ldr	r6, [r4, #16]
 8003bcc:	4333      	orrs	r3, r6
 8003bce:	6966      	ldr	r6, [r4, #20]
 8003bd0:	4333      	orrs	r3, r6
 8003bd2:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003bd4:	6a20      	ldr	r0, [r4, #32]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003bd6:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003bda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003bdc:	432b      	orrs	r3, r5
 8003bde:	430b      	orrs	r3, r1
 8003be0:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003be2:	6853      	ldr	r3, [r2, #4]
 8003be4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003be8:	f023 030f 	bic.w	r3, r3, #15
 8003bec:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003bee:	69a3      	ldr	r3, [r4, #24]
 8003bf0:	6851      	ldr	r1, [r2, #4]
 8003bf2:	4303      	orrs	r3, r0
 8003bf4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003bf6:	4303      	orrs	r3, r0
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003bf8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003bfa:	430b      	orrs	r3, r1
 8003bfc:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8003bfe:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <HAL_SAI_Init+0x1bc>)
 8003c00:	6891      	ldr	r1, [r2, #8]
 8003c02:	400b      	ands	r3, r1
 8003c04:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003c06:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003c08:	6891      	ldr	r1, [r2, #8]
 8003c0a:	4303      	orrs	r3, r0
 8003c0c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003c0e:	4303      	orrs	r3, r0
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003c14:	3901      	subs	r1, #1
 8003c16:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8003c18:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003c1a:	3901      	subs	r1, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8003c1c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c20:	6093      	str	r3, [r2, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8003c22:	68d3      	ldr	r3, [r2, #12]
 8003c24:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8003c28:	f023 030f 	bic.w	r3, r3, #15
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003c32:	68d1      	ldr	r1, [r2, #12]
 8003c34:	e9d4 3015 	ldrd	r3, r0, [r4, #84]	; 0x54
 8003c38:	4303      	orrs	r3, r0
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003c3a:	2000      	movs	r0, #0
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003c3c:	430b      	orrs	r3, r1
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003c3e:	6e21      	ldr	r1, [r4, #96]	; 0x60
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003c40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003c44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003c46:	3901      	subs	r1, #1
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003c48:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003c4c:	60d3      	str	r3, [r2, #12]
  hsai->State = HAL_SAI_STATE_READY;
 8003c4e:	2301      	movs	r3, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003c50:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  __HAL_UNLOCK(hsai);
 8003c54:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
  hsai->State = HAL_SAI_STATE_READY;
 8003c58:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
}
 8003c5c:	bd70      	pop	{r4, r5, r6, pc}
  switch (hsai->Init.SynchroExt)
 8003c5e:	2310      	movs	r3, #16
 8003c60:	e75a      	b.n	8003b18 <HAL_SAI_Init+0x38>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003c62:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003c66:	f44f 6500 	mov.w	r5, #2048	; 0x800
 8003c6a:	e761      	b.n	8003b30 <HAL_SAI_Init+0x50>
    SAI2->GCR = tmpregisterGCR;
 8003c6c:	f8c0 3c00 	str.w	r3, [r0, #3072]	; 0xc00
 8003c70:	e769      	b.n	8003b46 <HAL_SAI_Init+0x66>
    uint32_t freq = 0;
 8003c72:	2000      	movs	r0, #0
 8003c74:	e773      	b.n	8003b5e <HAL_SAI_Init+0x7e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8003c76:	2a01      	cmp	r2, #1
 8003c78:	bf14      	ite	ne
 8003c7a:	2100      	movne	r1, #0
 8003c7c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8003c80:	e795      	b.n	8003bae <HAL_SAI_Init+0xce>
    return HAL_ERROR;
 8003c82:	2001      	movs	r0, #1
 8003c84:	e7ea      	b.n	8003c5c <HAL_SAI_Init+0x17c>
 8003c86:	bf00      	nop
 8003c88:	40015804 	.word	0x40015804
 8003c8c:	40015000 	.word	0x40015000
 8003c90:	40015824 	.word	0x40015824
 8003c94:	40015c04 	.word	0x40015c04
 8003c98:	ff05c010 	.word	0xff05c010
 8003c9c:	fff88000 	.word	0xfff88000

08003ca0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	b1c8      	cbz	r0, 8003cdc <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003ca8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003cac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cb0:	b91b      	cbnz	r3, 8003cba <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8003cb2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003cb6:	f7fd fd45 	bl	8001744 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003cba:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003cbc:	1d21      	adds	r1, r4, #4
 8003cbe:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003cc0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003cc4:	f000 fc26 	bl	8004514 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8003cc8:	6862      	ldr	r2, [r4, #4]
 8003cca:	4629      	mov	r1, r5
 8003ccc:	6820      	ldr	r0, [r4, #0]
 8003cce:	f000 fc5c 	bl	800458a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003cd2:	2301      	movs	r3, #1

  return HAL_OK;
 8003cd4:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003cd6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003cdc:	2001      	movs	r0, #1
 8003cde:	e7fc      	b.n	8003cda <HAL_SDRAM_Init+0x3a>

08003ce0 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8003ce0:	b510      	push	{r4, lr}
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d030      	beq.n	8003d4a <HAL_SPDIFRX_Init+0x6a>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8003ce8:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003cec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cf0:	b91b      	cbnz	r3, 8003cfa <HAL_SPDIFRX_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8003cf2:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8003cf6:	f7fd fbaf 	bl	8001458 <HAL_SPDIFRX_MspInit>

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8003cfa:	6821      	ldr	r1, [r4, #0]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8003cfc:	2302      	movs	r3, #2
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8003cfe:	6860      	ldr	r0, [r4, #4]
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8003d00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_SPDIFRX_IDLE(hspdif);
 8003d04:	680b      	ldr	r3, [r1, #0]
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	600b      	str	r3, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 8003d0c:	69a3      	ldr	r3, [r4, #24]
  tmpreg = hspdif->Instance->CR;
 8003d0e:	680a      	ldr	r2, [r1, #0]
  tmpreg |= (hspdif->Init.StereoMode |
 8003d10:	4303      	orrs	r3, r0
             hspdif->Init.InputSelection |
 8003d12:	68a0      	ldr	r0, [r4, #8]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8003d14:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
             hspdif->Init.InputSelection |
 8003d18:	4303      	orrs	r3, r0
             hspdif->Init.Retries |
 8003d1a:	68e0      	ldr	r0, [r4, #12]
  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8003d1c:	f422 727e 	bic.w	r2, r2, #1016	; 0x3f8
             hspdif->Init.Retries |
 8003d20:	4303      	orrs	r3, r0
             hspdif->Init.WaitForActivity |
 8003d22:	6920      	ldr	r0, [r4, #16]
 8003d24:	4303      	orrs	r3, r0
             hspdif->Init.ChannelSelection |
 8003d26:	6960      	ldr	r0, [r4, #20]
 8003d28:	4303      	orrs	r3, r0
             hspdif->Init.DataFormat |
 8003d2a:	69e0      	ldr	r0, [r4, #28]
 8003d2c:	4303      	orrs	r3, r0
             hspdif->Init.PreambleTypeMask |
 8003d2e:	6a20      	ldr	r0, [r4, #32]
 8003d30:	4303      	orrs	r3, r0
             hspdif->Init.ChannelStatusMask |
 8003d32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003d34:	4303      	orrs	r3, r0
             hspdif->Init.ValidityBitMask |
 8003d36:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003d38:	4303      	orrs	r3, r0
            );


  hspdif->Instance->CR = tmpreg;

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8003d3a:	2000      	movs	r0, #0
  tmpreg |= (hspdif->Init.StereoMode |
 8003d3c:	4313      	orrs	r3, r2
  hspdif->Instance->CR = tmpreg;
 8003d3e:	600b      	str	r3, [r1, #0]

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003d40:	2301      	movs	r3, #1
  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8003d42:	64a0      	str	r0, [r4, #72]	; 0x48
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8003d44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
}
 8003d48:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	e7fc      	b.n	8003d48 <HAL_SPDIFRX_Init+0x68>

08003d4e <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003d4e:	b570      	push	{r4, r5, r6, lr}
 8003d50:	460e      	mov	r6, r1
 8003d52:	4615      	mov	r5, r2
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003d54:	4604      	mov	r4, r0
 8003d56:	b328      	cbz	r0, 8003da4 <HAL_SRAM_Init+0x56>
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003d58:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8003d5c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003d60:	b91b      	cbnz	r3, 8003d6a <HAL_SRAM_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8003d62:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003d66:	f7fd fceb 	bl	8001740 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003d6a:	f104 0108 	add.w	r1, r4, #8
 8003d6e:	6820      	ldr	r0, [r4, #0]
 8003d70:	f000 fb34 	bl	80043dc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003d74:	68a2      	ldr	r2, [r4, #8]
 8003d76:	4631      	mov	r1, r6
 8003d78:	6820      	ldr	r0, [r4, #0]
 8003d7a:	f000 fb79 	bl	8004470 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003d7e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003d80:	68a2      	ldr	r2, [r4, #8]
 8003d82:	4629      	mov	r1, r5
 8003d84:	6860      	ldr	r0, [r4, #4]
 8003d86:	f000 fb9f 	bl	80044c8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	68a1      	ldr	r1, [r4, #8]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;

  return HAL_OK;
 8003d8e:	2000      	movs	r0, #0
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003d90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003d94:	f043 0301 	orr.w	r3, r3, #1
 8003d98:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8003da2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003da4:	2001      	movs	r0, #1
 8003da6:	e7fc      	b.n	8003da2 <HAL_SRAM_Init+0x54>

08003da8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da8:	b538      	push	{r3, r4, r5, lr}
 8003daa:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dac:	69c0      	ldr	r0, [r0, #28]
 8003dae:	6921      	ldr	r1, [r4, #16]
 8003db0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003db2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003db4:	430a      	orrs	r2, r1
 8003db6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003db8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dba:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dbc:	498e      	ldr	r1, [pc, #568]	; (8003ff8 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dbe:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dc0:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8003dc2:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dc4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dd4:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dd6:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003dd8:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dda:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003de2:	4a86      	ldr	r2, [pc, #536]	; (8003ffc <UART_SetConfig+0x254>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d117      	bne.n	8003e18 <UART_SetConfig+0x70>
 8003de8:	4b85      	ldr	r3, [pc, #532]	; (8004000 <UART_SetConfig+0x258>)
 8003dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	f200 80e2 	bhi.w	8003fbe <UART_SetConfig+0x216>
 8003dfa:	4a82      	ldr	r2, [pc, #520]	; (8004004 <UART_SetConfig+0x25c>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dfc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003e00:	5cd3      	ldrb	r3, [r2, r3]
 8003e02:	f040 80b3 	bne.w	8003f6c <UART_SetConfig+0x1c4>
  {
    switch (clocksource)
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d822      	bhi.n	8003e50 <UART_SetConfig+0xa8>
 8003e0a:	e8df f003 	tbb	[pc, r3]
 8003e0e:	db90      	.short	0xdb90
 8003e10:	21d52198 	.word	0x21d52198
 8003e14:	2121      	.short	0x2121
 8003e16:	99          	.byte	0x99
 8003e17:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e18:	4a7b      	ldr	r2, [pc, #492]	; (8004008 <UART_SetConfig+0x260>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d106      	bne.n	8003e2c <UART_SetConfig+0x84>
 8003e1e:	4b78      	ldr	r3, [pc, #480]	; (8004000 <UART_SetConfig+0x258>)
 8003e20:	4a7a      	ldr	r2, [pc, #488]	; (800400c <UART_SetConfig+0x264>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	e7e7      	b.n	8003dfc <UART_SetConfig+0x54>
 8003e2c:	4a78      	ldr	r2, [pc, #480]	; (8004010 <UART_SetConfig+0x268>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d118      	bne.n	8003e64 <UART_SetConfig+0xbc>
 8003e32:	4b73      	ldr	r3, [pc, #460]	; (8004000 <UART_SetConfig+0x258>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	f000 80b3 	beq.w	8003fa8 <UART_SetConfig+0x200>
 8003e42:	d807      	bhi.n	8003e54 <UART_SetConfig+0xac>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80c0 	beq.w	8003fca <UART_SetConfig+0x222>
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	f000 80b1 	beq.w	8003fb2 <UART_SetConfig+0x20a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e50:	2001      	movs	r0, #1
 8003e52:	e070      	b.n	8003f36 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e54:	2b30      	cmp	r3, #48	; 0x30
 8003e56:	d1fb      	bne.n	8003e50 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e58:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003e5c:	d070      	beq.n	8003f40 <UART_SetConfig+0x198>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003e62:	e0b9      	b.n	8003fd8 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e64:	4a6b      	ldr	r2, [pc, #428]	; (8004014 <UART_SetConfig+0x26c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d10f      	bne.n	8003e8a <UART_SetConfig+0xe2>
 8003e6a:	4b65      	ldr	r3, [pc, #404]	; (8004000 <UART_SetConfig+0x258>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	f000 8097 	beq.w	8003fa8 <UART_SetConfig+0x200>
 8003e7a:	d804      	bhi.n	8003e86 <UART_SetConfig+0xde>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80a4 	beq.w	8003fca <UART_SetConfig+0x222>
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	e7e2      	b.n	8003e4c <UART_SetConfig+0xa4>
 8003e86:	2bc0      	cmp	r3, #192	; 0xc0
 8003e88:	e7e5      	b.n	8003e56 <UART_SetConfig+0xae>
 8003e8a:	4a63      	ldr	r2, [pc, #396]	; (8004018 <UART_SetConfig+0x270>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d112      	bne.n	8003eb6 <UART_SetConfig+0x10e>
 8003e90:	4b5b      	ldr	r3, [pc, #364]	; (8004000 <UART_SetConfig+0x258>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9e:	f000 8083 	beq.w	8003fa8 <UART_SetConfig+0x200>
 8003ea2:	d805      	bhi.n	8003eb0 <UART_SetConfig+0x108>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8090 	beq.w	8003fca <UART_SetConfig+0x222>
 8003eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eae:	e7cd      	b.n	8003e4c <UART_SetConfig+0xa4>
 8003eb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eb4:	e7cf      	b.n	8003e56 <UART_SetConfig+0xae>
 8003eb6:	4a59      	ldr	r2, [pc, #356]	; (800401c <UART_SetConfig+0x274>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d110      	bne.n	8003ede <UART_SetConfig+0x136>
 8003ebc:	4b50      	ldr	r3, [pc, #320]	; (8004000 <UART_SetConfig+0x258>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ec6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eca:	d06d      	beq.n	8003fa8 <UART_SetConfig+0x200>
 8003ecc:	d804      	bhi.n	8003ed8 <UART_SetConfig+0x130>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d075      	beq.n	8003fbe <UART_SetConfig+0x216>
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed6:	e7b9      	b.n	8003e4c <UART_SetConfig+0xa4>
 8003ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003edc:	e7bb      	b.n	8003e56 <UART_SetConfig+0xae>
 8003ede:	4a50      	ldr	r2, [pc, #320]	; (8004020 <UART_SetConfig+0x278>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d110      	bne.n	8003f06 <UART_SetConfig+0x15e>
 8003ee4:	4b46      	ldr	r3, [pc, #280]	; (8004000 <UART_SetConfig+0x258>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef2:	d059      	beq.n	8003fa8 <UART_SetConfig+0x200>
 8003ef4:	d804      	bhi.n	8003f00 <UART_SetConfig+0x158>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d067      	beq.n	8003fca <UART_SetConfig+0x222>
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efe:	e7a5      	b.n	8003e4c <UART_SetConfig+0xa4>
 8003f00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f04:	e7a7      	b.n	8003e56 <UART_SetConfig+0xae>
 8003f06:	4a47      	ldr	r2, [pc, #284]	; (8004024 <UART_SetConfig+0x27c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d1a1      	bne.n	8003e50 <UART_SetConfig+0xa8>
 8003f0c:	4b3c      	ldr	r3, [pc, #240]	; (8004000 <UART_SetConfig+0x258>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1a:	d045      	beq.n	8003fa8 <UART_SetConfig+0x200>
 8003f1c:	d804      	bhi.n	8003f28 <UART_SetConfig+0x180>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d053      	beq.n	8003fca <UART_SetConfig+0x222>
 8003f22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f26:	e791      	b.n	8003e4c <UART_SetConfig+0xa4>
 8003f28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f2c:	e793      	b.n	8003e56 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f2e:	f7ff fa79 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003f32:	b928      	cbnz	r0, 8003f40 <UART_SetConfig+0x198>
 8003f34:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f36:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8003f38:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 8003f3c:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8003f3e:	483a      	ldr	r0, [pc, #232]	; (8004028 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f40:	6862      	ldr	r2, [r4, #4]
 8003f42:	0853      	lsrs	r3, r2, #1
 8003f44:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f48:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f4c:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f50:	f1a0 0210 	sub.w	r2, r0, #16
 8003f54:	429a      	cmp	r2, r3
 8003f56:	f63f af7b 	bhi.w	8003e50 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f5a:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f5e:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8003f62:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f64:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 8003f66:	4318      	orrs	r0, r3
 8003f68:	60d0      	str	r0, [r2, #12]
 8003f6a:	e7e3      	b.n	8003f34 <UART_SetConfig+0x18c>
    switch (clocksource)
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	f63f af6f 	bhi.w	8003e50 <UART_SetConfig+0xa8>
 8003f72:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <UART_SetConfig+0x1d0>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003fd1 	.word	0x08003fd1
 8003f7c:	08003f9d 	.word	0x08003f9d
 8003f80:	08003faf 	.word	0x08003faf
 8003f84:	08003e51 	.word	0x08003e51
 8003f88:	08003fa3 	.word	0x08003fa3
 8003f8c:	08003e51 	.word	0x08003e51
 8003f90:	08003e51 	.word	0x08003e51
 8003f94:	08003e51 	.word	0x08003e51
 8003f98:	08003e5f 	.word	0x08003e5f
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f9c:	f7ff fa52 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
        break;
 8003fa0:	e018      	b.n	8003fd4 <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa2:	f7ff f96b 	bl	800327c <HAL_RCC_GetSysClockFreq>
        break;
 8003fa6:	e015      	b.n	8003fd4 <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003fac:	d0c7      	beq.n	8003f3e <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 8003fae:	481e      	ldr	r0, [pc, #120]	; (8004028 <UART_SetConfig+0x280>)
 8003fb0:	e012      	b.n	8003fd8 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fb2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003fb6:	d1f4      	bne.n	8003fa2 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb8:	f7ff f960 	bl	800327c <HAL_RCC_GetSysClockFreq>
        break;
 8003fbc:	e7b9      	b.n	8003f32 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fbe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003fc2:	d1eb      	bne.n	8003f9c <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7ff fa3e 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
        break;
 8003fc8:	e7b3      	b.n	8003f32 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003fce:	d0ae      	beq.n	8003f2e <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd0:	f7ff fa28 	bl	8003424 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d0ad      	beq.n	8003f34 <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fd8:	6862      	ldr	r2, [r4, #4]
 8003fda:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003fde:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003fe6:	f1a3 0110 	sub.w	r1, r3, #16
 8003fea:	4291      	cmp	r1, r2
 8003fec:	f63f af30 	bhi.w	8003e50 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ff0:	6822      	ldr	r2, [r4, #0]
 8003ff2:	60d3      	str	r3, [r2, #12]
 8003ff4:	e79e      	b.n	8003f34 <UART_SetConfig+0x18c>
 8003ff6:	bf00      	nop
 8003ff8:	efff69f3 	.word	0xefff69f3
 8003ffc:	40011000 	.word	0x40011000
 8004000:	40023800 	.word	0x40023800
 8004004:	0801035c 	.word	0x0801035c
 8004008:	40004400 	.word	0x40004400
 800400c:	0801035f 	.word	0x0801035f
 8004010:	40004800 	.word	0x40004800
 8004014:	40004c00 	.word	0x40004c00
 8004018:	40005000 	.word	0x40005000
 800401c:	40011400 	.word	0x40011400
 8004020:	40007800 	.word	0x40007800
 8004024:	40007c00 	.word	0x40007c00
 8004028:	00f42400 	.word	0x00f42400

0800402c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800402c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800402e:	07da      	lsls	r2, r3, #31
{
 8004030:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004032:	d506      	bpl.n	8004042 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004034:	6801      	ldr	r1, [r0, #0]
 8004036:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8004038:	684a      	ldr	r2, [r1, #4]
 800403a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800403e:	4322      	orrs	r2, r4
 8004040:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004042:	079c      	lsls	r4, r3, #30
 8004044:	d506      	bpl.n	8004054 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004046:	6801      	ldr	r1, [r0, #0]
 8004048:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800404a:	684a      	ldr	r2, [r1, #4]
 800404c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004050:	4322      	orrs	r2, r4
 8004052:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004054:	0759      	lsls	r1, r3, #29
 8004056:	d506      	bpl.n	8004066 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004058:	6801      	ldr	r1, [r0, #0]
 800405a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800405c:	684a      	ldr	r2, [r1, #4]
 800405e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004062:	4322      	orrs	r2, r4
 8004064:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004066:	071a      	lsls	r2, r3, #28
 8004068:	d506      	bpl.n	8004078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800406a:	6801      	ldr	r1, [r0, #0]
 800406c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800406e:	684a      	ldr	r2, [r1, #4]
 8004070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004074:	4322      	orrs	r2, r4
 8004076:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004078:	06dc      	lsls	r4, r3, #27
 800407a:	d506      	bpl.n	800408a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800407c:	6801      	ldr	r1, [r0, #0]
 800407e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8004080:	688a      	ldr	r2, [r1, #8]
 8004082:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004086:	4322      	orrs	r2, r4
 8004088:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800408a:	0699      	lsls	r1, r3, #26
 800408c:	d506      	bpl.n	800409c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800408e:	6801      	ldr	r1, [r0, #0]
 8004090:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004092:	688a      	ldr	r2, [r1, #8]
 8004094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004098:	4322      	orrs	r2, r4
 800409a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800409c:	065a      	lsls	r2, r3, #25
 800409e:	d510      	bpl.n	80040c2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040a0:	6801      	ldr	r1, [r0, #0]
 80040a2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80040a4:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040a6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040aa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80040ae:	ea42 0204 	orr.w	r2, r2, r4
 80040b2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040b4:	d105      	bne.n	80040c2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040b6:	684a      	ldr	r2, [r1, #4]
 80040b8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80040ba:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80040be:	4322      	orrs	r2, r4
 80040c0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	d506      	bpl.n	80040d4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040c6:	6802      	ldr	r2, [r0, #0]
 80040c8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80040ca:	6853      	ldr	r3, [r2, #4]
 80040cc:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6053      	str	r3, [r2, #4]
  }
}
 80040d4:	bd10      	pop	{r4, pc}

080040d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040da:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80040de:	4604      	mov	r4, r0
 80040e0:	460e      	mov	r6, r1
 80040e2:	4615      	mov	r5, r2
 80040e4:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e6:	6822      	ldr	r2, [r4, #0]
 80040e8:	69d3      	ldr	r3, [r2, #28]
 80040ea:	ea36 0303 	bics.w	r3, r6, r3
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	42ab      	cmp	r3, r5
 80040f6:	d001      	beq.n	80040fc <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80040f8:	2000      	movs	r0, #0
 80040fa:	e026      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 80040fc:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004100:	d0f2      	beq.n	80040e8 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004102:	f7fd fc31 	bl	8001968 <HAL_GetTick>
 8004106:	1bc0      	subs	r0, r0, r7
 8004108:	4540      	cmp	r0, r8
 800410a:	6820      	ldr	r0, [r4, #0]
 800410c:	d802      	bhi.n	8004114 <UART_WaitOnFlagUntilTimeout+0x3e>
 800410e:	f1b8 0f00 	cmp.w	r8, #0
 8004112:	d11c      	bne.n	800414e <UART_WaitOnFlagUntilTimeout+0x78>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004118:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	e840 3200 	strex	r2, r3, [r0]
 8004120:	2a00      	cmp	r2, #0
 8004122:	d1f7      	bne.n	8004114 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004124:	f100 0308 	add.w	r3, r0, #8
 8004128:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	f100 0108 	add.w	r1, r0, #8
 8004134:	e841 3200 	strex	r2, r3, [r1]
 8004138:	2a00      	cmp	r2, #0
 800413a:	d1f3      	bne.n	8004124 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 800413c:	2320      	movs	r3, #32
 800413e:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004140:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 8004144:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8004146:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 800414a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800414e:	6803      	ldr	r3, [r0, #0]
 8004150:	075a      	lsls	r2, r3, #29
 8004152:	d5c8      	bpl.n	80040e6 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004154:	69c3      	ldr	r3, [r0, #28]
 8004156:	051b      	lsls	r3, r3, #20
 8004158:	d5c5      	bpl.n	80040e6 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800415a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800415e:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	e840 3200 	strex	r2, r3, [r0]
 800416c:	2a00      	cmp	r2, #0
 800416e:	d1f7      	bne.n	8004160 <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	f100 0308 	add.w	r3, r0, #8
 8004174:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004178:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	f100 0108 	add.w	r1, r0, #8
 8004180:	e841 3200 	strex	r2, r3, [r1]
 8004184:	2a00      	cmp	r2, #0
 8004186:	d1f3      	bne.n	8004170 <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 8004188:	2320      	movs	r3, #32
 800418a:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800418c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004190:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8004194:	e7d6      	b.n	8004144 <UART_WaitOnFlagUntilTimeout+0x6e>

08004196 <HAL_UART_Transmit>:
{
 8004196:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800419a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800419c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 800419e:	4604      	mov	r4, r0
 80041a0:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80041a2:	2b20      	cmp	r3, #32
{
 80041a4:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80041a6:	d142      	bne.n	800422e <HAL_UART_Transmit+0x98>
    if ((pData == NULL) || (Size == 0U))
 80041a8:	2900      	cmp	r1, #0
 80041aa:	d042      	beq.n	8004232 <HAL_UART_Transmit+0x9c>
 80041ac:	2a00      	cmp	r2, #0
 80041ae:	d040      	beq.n	8004232 <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b2:	2500      	movs	r5, #0
 80041b4:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041b8:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80041ba:	f7fd fbd5 	bl	8001968 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041be:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80041c0:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 80041c2:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 80041ca:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ce:	d103      	bne.n	80041d8 <HAL_UART_Transmit+0x42>
 80041d0:	6922      	ldr	r2, [r4, #16]
 80041d2:	b90a      	cbnz	r2, 80041d8 <HAL_UART_Transmit+0x42>
 80041d4:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80041d6:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 80041d8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041dc:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80041e0:	b292      	uxth	r2, r2
 80041e2:	b93a      	cbnz	r2, 80041f4 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041e4:	2140      	movs	r1, #64	; 0x40
 80041e6:	4620      	mov	r0, r4
 80041e8:	f7ff ff75 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 80041ec:	b950      	cbnz	r0, 8004204 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 80041ee:	2320      	movs	r3, #32
 80041f0:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80041f2:	e008      	b.n	8004206 <HAL_UART_Transmit+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041f4:	2200      	movs	r2, #0
 80041f6:	2180      	movs	r1, #128	; 0x80
 80041f8:	4620      	mov	r0, r4
 80041fa:	9303      	str	r3, [sp, #12]
 80041fc:	f7ff ff6b 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 8004200:	9b03      	ldr	r3, [sp, #12]
 8004202:	b118      	cbz	r0, 800420c <HAL_UART_Transmit+0x76>
        return HAL_TIMEOUT;
 8004204:	2003      	movs	r0, #3
}
 8004206:	b004      	add	sp, #16
 8004208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800420c:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 800420e:	b95e      	cbnz	r6, 8004228 <HAL_UART_Transmit+0x92>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004210:	f835 2b02 	ldrh.w	r2, [r5], #2
 8004214:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004218:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800421a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800421e:	3a01      	subs	r2, #1
 8004220:	b292      	uxth	r2, r2
 8004222:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8004226:	e7d7      	b.n	80041d8 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004228:	f816 2b01 	ldrb.w	r2, [r6], #1
 800422c:	e7f4      	b.n	8004218 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800422e:	2002      	movs	r0, #2
 8004230:	e7e9      	b.n	8004206 <HAL_UART_Transmit+0x70>
      return  HAL_ERROR;
 8004232:	2001      	movs	r0, #1
 8004234:	e7e7      	b.n	8004206 <HAL_UART_Transmit+0x70>

08004236 <HAL_UART_Receive>:
{
 8004236:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800423a:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 800423c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8004240:	4604      	mov	r4, r0
 8004242:	460d      	mov	r5, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8004244:	2b20      	cmp	r3, #32
{
 8004246:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004248:	d15e      	bne.n	8004308 <HAL_UART_Receive+0xd2>
    if ((pData == NULL) || (Size == 0U))
 800424a:	2900      	cmp	r1, #0
 800424c:	d05e      	beq.n	800430c <HAL_UART_Receive+0xd6>
 800424e:	2a00      	cmp	r2, #0
 8004250:	d05c      	beq.n	800430c <HAL_UART_Receive+0xd6>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004252:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004254:	f04f 0800 	mov.w	r8, #0
 8004258:	f8c0 8084 	str.w	r8, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800425c:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004260:	f8c0 8060 	str.w	r8, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8004264:	f7fd fb80 	bl	8001968 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8004268:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800426a:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 800426c:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8004270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8004274:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8004278:	d11a      	bne.n	80042b0 <HAL_UART_Receive+0x7a>
 800427a:	6922      	ldr	r2, [r4, #16]
 800427c:	b9b2      	cbnz	r2, 80042ac <HAL_UART_Receive+0x76>
 800427e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004282:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 800428a:	f8b4 805c 	ldrh.w	r8, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800428e:	d120      	bne.n	80042d2 <HAL_UART_Receive+0x9c>
 8004290:	6923      	ldr	r3, [r4, #16]
 8004292:	b9f3      	cbnz	r3, 80042d2 <HAL_UART_Receive+0x9c>
 8004294:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8004296:	461d      	mov	r5, r3
    while (huart->RxXferCount > 0U)
 8004298:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800429c:	b290      	uxth	r0, r2
 800429e:	b9d0      	cbnz	r0, 80042d6 <HAL_UART_Receive+0xa0>
    huart->RxState = HAL_UART_STATE_READY;
 80042a0:	2320      	movs	r3, #32
 80042a2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80042a6:	b003      	add	sp, #12
 80042a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 80042ac:	22ff      	movs	r2, #255	; 0xff
 80042ae:	e7e8      	b.n	8004282 <HAL_UART_Receive+0x4c>
 80042b0:	b923      	cbnz	r3, 80042bc <HAL_UART_Receive+0x86>
 80042b2:	6922      	ldr	r2, [r4, #16]
 80042b4:	2a00      	cmp	r2, #0
 80042b6:	d0f9      	beq.n	80042ac <HAL_UART_Receive+0x76>
 80042b8:	227f      	movs	r2, #127	; 0x7f
 80042ba:	e7e2      	b.n	8004282 <HAL_UART_Receive+0x4c>
 80042bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042c0:	d104      	bne.n	80042cc <HAL_UART_Receive+0x96>
 80042c2:	6922      	ldr	r2, [r4, #16]
 80042c4:	2a00      	cmp	r2, #0
 80042c6:	d0f7      	beq.n	80042b8 <HAL_UART_Receive+0x82>
 80042c8:	223f      	movs	r2, #63	; 0x3f
 80042ca:	e7da      	b.n	8004282 <HAL_UART_Receive+0x4c>
 80042cc:	f8a4 805c 	strh.w	r8, [r4, #92]	; 0x5c
 80042d0:	e7d9      	b.n	8004286 <HAL_UART_Receive+0x50>
      pdata16bits = NULL;
 80042d2:	2600      	movs	r6, #0
 80042d4:	e7e0      	b.n	8004298 <HAL_UART_Receive+0x62>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80042d6:	464b      	mov	r3, r9
 80042d8:	2200      	movs	r2, #0
 80042da:	2120      	movs	r1, #32
 80042dc:	4620      	mov	r0, r4
 80042de:	9700      	str	r7, [sp, #0]
 80042e0:	f7ff fef9 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 80042e4:	b9a0      	cbnz	r0, 8004310 <HAL_UART_Receive+0xda>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	ea08 0303 	and.w	r3, r8, r3
      if (pdata8bits == NULL)
 80042ee:	b945      	cbnz	r5, 8004302 <HAL_UART_Receive+0xcc>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80042f0:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 80042f4:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80042f8:	3a01      	subs	r2, #1
 80042fa:	b292      	uxth	r2, r2
 80042fc:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8004300:	e7ca      	b.n	8004298 <HAL_UART_Receive+0x62>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004302:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8004306:	e7f5      	b.n	80042f4 <HAL_UART_Receive+0xbe>
    return HAL_BUSY;
 8004308:	2002      	movs	r0, #2
 800430a:	e7cc      	b.n	80042a6 <HAL_UART_Receive+0x70>
      return  HAL_ERROR;
 800430c:	2001      	movs	r0, #1
 800430e:	e7ca      	b.n	80042a6 <HAL_UART_Receive+0x70>
        return HAL_TIMEOUT;
 8004310:	2003      	movs	r0, #3
 8004312:	e7c8      	b.n	80042a6 <HAL_UART_Receive+0x70>

08004314 <UART_CheckIdleState>:
{
 8004314:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004316:	2500      	movs	r5, #0
{
 8004318:	4604      	mov	r4, r0
 800431a:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8004320:	f7fd fb22 	bl	8001968 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004324:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8004326:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	0711      	lsls	r1, r2, #28
 800432c:	d417      	bmi.n	800435e <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800432e:	6822      	ldr	r2, [r4, #0]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	0752      	lsls	r2, r2, #29
 8004334:	d509      	bpl.n	800434a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004336:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800433a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800433e:	4620      	mov	r0, r4
 8004340:	9200      	str	r2, [sp, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	f7ff fec7 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 8004348:	b9b0      	cbnz	r0, 8004378 <UART_CheckIdleState+0x64>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800434c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800434e:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 8004352:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004354:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004358:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800435a:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 800435c:	e00d      	b.n	800437a <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800435e:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8004362:	9003      	str	r0, [sp, #12]
 8004364:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004368:	4620      	mov	r0, r4
 800436a:	9200      	str	r2, [sp, #0]
 800436c:	462a      	mov	r2, r5
 800436e:	f7ff feb2 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 8004372:	9b03      	ldr	r3, [sp, #12]
 8004374:	2800      	cmp	r0, #0
 8004376:	d0da      	beq.n	800432e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8004378:	2003      	movs	r0, #3
}
 800437a:	b005      	add	sp, #20
 800437c:	bd30      	pop	{r4, r5, pc}

0800437e <HAL_UART_Init>:
{
 800437e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004380:	4604      	mov	r4, r0
 8004382:	b340      	cbz	r0, 80043d6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004384:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8004386:	b91b      	cbnz	r3, 8004390 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004388:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800438c:	f7fd f8ae 	bl	80014ec <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004390:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004392:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004394:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8004396:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 8004398:	6813      	ldr	r3, [r2, #0]
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043a0:	f7ff fd02 	bl	8003da8 <UART_SetConfig>
 80043a4:	2801      	cmp	r0, #1
 80043a6:	d016      	beq.n	80043d6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80043aa:	b113      	cbz	r3, 80043b2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80043ac:	4620      	mov	r0, r4
 80043ae:	f7ff fe3d 	bl	800402c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80043b4:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	f042 0201 	orr.w	r2, r2, #1
}
 80043cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80043d0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80043d2:	f7ff bf9f 	b.w	8004314 <UART_CheckIdleState>
}
 80043d6:	2001      	movs	r0, #1
 80043d8:	bd10      	pop	{r4, pc}
	...

080043dc <FMC_NORSRAM_Init>:
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80043dc:	680a      	ldr	r2, [r1, #0]
 80043de:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80043e2:	f023 0301 	bic.w	r3, r3, #1
{
 80043e6:	b5f0      	push	{r4, r5, r6, r7, lr}

  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCR1_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80043e8:	684e      	ldr	r6, [r1, #4]
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80043ea:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80043ee:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80043f0:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80043f4:	2b08      	cmp	r3, #8
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80043f6:	ea43 0306 	orr.w	r3, r3, r6
 80043fa:	68ce      	ldr	r6, [r1, #12]
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80043fc:	bf0c      	ite	eq
 80043fe:	f04f 0c40 	moveq.w	ip, #64	; 0x40
 8004402:	f04f 0c00 	movne.w	ip, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004406:	4333      	orrs	r3, r6
 8004408:	690e      	ldr	r6, [r1, #16]
 800440a:	4333      	orrs	r3, r6
 800440c:	694e      	ldr	r6, [r1, #20]
 800440e:	4333      	orrs	r3, r6
 8004410:	698e      	ldr	r6, [r1, #24]
 8004412:	4333      	orrs	r3, r6
 8004414:	69ce      	ldr	r6, [r1, #28]
 8004416:	4333      	orrs	r3, r6
 8004418:	6a0e      	ldr	r6, [r1, #32]
 800441a:	4333      	orrs	r3, r6
 800441c:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 800441e:	4333      	orrs	r3, r6
 8004420:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8004422:	4333      	orrs	r3, r6
 8004424:	6ace      	ldr	r6, [r1, #44]	; 0x2c
  btcr_reg |= Init->WriteFifo;
 8004426:	e9d1 540c 	ldrd	r5, r4, [r1, #48]	; 0x30
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800442a:	4333      	orrs	r3, r6
 800442c:	6b89      	ldr	r1, [r1, #56]	; 0x38

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800442e:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004432:	ea43 0305 	orr.w	r3, r3, r5
 8004436:	ea43 0304 	orr.w	r3, r3, r4
 800443a:	ea43 0301 	orr.w	r3, r3, r1
 800443e:	490b      	ldr	r1, [pc, #44]	; (800446c <FMC_NORSRAM_Init+0x90>)
 8004440:	ea01 0107 	and.w	r1, r1, r7
 8004444:	ea43 0301 	orr.w	r3, r3, r1
 8004448:	ea43 030c 	orr.w	r3, r3, ip
 800444c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8004450:	d108      	bne.n	8004464 <FMC_NORSRAM_Init+0x88>
 8004452:	b14a      	cbz	r2, 8004468 <FMC_NORSRAM_Init+0x8c>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8004454:	6803      	ldr	r3, [r0, #0]
 8004456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800445a:	6003      	str	r3, [r0, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800445c:	6803      	ldr	r3, [r0, #0]
 800445e:	431c      	orrs	r4, r3
 8004460:	6004      	str	r4, [r0, #0]
 8004462:	e001      	b.n	8004468 <FMC_NORSRAM_Init+0x8c>
  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8004464:	2a00      	cmp	r2, #0
 8004466:	d1f9      	bne.n	800445c <FMC_NORSRAM_Init+0x80>
  }

  return HAL_OK;
}
 8004468:	2000      	movs	r0, #0
 800446a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800446c:	ffc00480 	.word	0xffc00480

08004470 <FMC_NORSRAM_Timing_Init>:
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004470:	690b      	ldr	r3, [r1, #16]
 8004472:	eb00 0282 	add.w	r2, r0, r2, lsl #2
{
 8004476:	b5f0      	push	{r4, r5, r6, r7, lr}
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004478:	698f      	ldr	r7, [r1, #24]
 800447a:	1e5d      	subs	r5, r3, #1
 800447c:	680b      	ldr	r3, [r1, #0]
 800447e:	6856      	ldr	r6, [r2, #4]
 8004480:	052c      	lsls	r4, r5, #20
 8004482:	433b      	orrs	r3, r7
 8004484:	684f      	ldr	r7, [r1, #4]
 8004486:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800448a:	688f      	ldr	r7, [r1, #8]
 800448c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004490:	68cf      	ldr	r7, [r1, #12]
 8004492:	6949      	ldr	r1, [r1, #20]
 8004494:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004498:	3902      	subs	r1, #2
 800449a:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800449e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80044a2:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 80044a6:	430b      	orrs	r3, r1
 80044a8:	6053      	str	r3, [r2, #4]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80044aa:	6803      	ldr	r3, [r0, #0]
 80044ac:	02db      	lsls	r3, r3, #11
 80044ae:	d508      	bpl.n	80044c2 <FMC_NORSRAM_Timing_Init+0x52>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80044b0:	6842      	ldr	r2, [r0, #4]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 80044b2:	6843      	ldr	r3, [r0, #4]
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80044b4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 80044b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 80044bc:	4314      	orrs	r4, r2
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 80044be:	4323      	orrs	r3, r4
 80044c0:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 80044c2:	2000      	movs	r0, #0
 80044c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080044c8 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80044c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
{
 80044cc:	b530      	push	{r4, r5, lr}
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80044ce:	d114      	bne.n	80044fa <FMC_NORSRAM_Extended_Timing_Init+0x32>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80044d0:	698d      	ldr	r5, [r1, #24]
 80044d2:	680b      	ldr	r3, [r1, #0]
 80044d4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80044d8:	432b      	orrs	r3, r5
 80044da:	684d      	ldr	r5, [r1, #4]
 80044dc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80044e0:	688d      	ldr	r5, [r1, #8]
 80044e2:	68c9      	ldr	r1, [r1, #12]
 80044e4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80044e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80044ec:	4904      	ldr	r1, [pc, #16]	; (8004500 <FMC_NORSRAM_Extended_Timing_Init+0x38>)
 80044ee:	4021      	ands	r1, r4
 80044f0:	430b      	orrs	r3, r1
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80044f2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 80044f6:	2000      	movs	r0, #0
 80044f8:	bd30      	pop	{r4, r5, pc}
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80044fa:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80044fe:	e7f8      	b.n	80044f2 <FMC_NORSRAM_Extended_Timing_Init+0x2a>
 8004500:	cff00000 	.word	0xcff00000

08004504 <FMC_NORSRAM_WriteOperation_Disable>:
  /* Check the parameters */
  assert_param(IS_FMC_NORSRAM_DEVICE(Device));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Disable write operation */
  CLEAR_BIT(Device->BTCR[Bank], FMC_WRITE_OPERATION_ENABLE);
 8004504:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8004508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800450c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]

  return HAL_OK;
}
 8004510:	2000      	movs	r0, #0
 8004512:	4770      	bx	lr

08004514 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004518:	680a      	ldr	r2, [r1, #0]
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800451a:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 800451e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8004522:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8004526:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800452a:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 800452e:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004530:	b9a2      	cbnz	r2, 800455c <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004532:	ea43 0209 	orr.w	r2, r3, r9
 8004536:	6801      	ldr	r1, [r0, #0]
 8004538:	432a      	orrs	r2, r5
 800453a:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800453e:	ea42 0308 	orr.w	r3, r2, r8
 8004542:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004546:	ea43 030e 	orr.w	r3, r3, lr
 800454a:	ea43 030c 	orr.w	r3, r3, ip
 800454e:	433b      	orrs	r3, r7
 8004550:	4333      	orrs	r3, r6
 8004552:	430b      	orrs	r3, r1
 8004554:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8004556:	2000      	movs	r0, #0
 8004558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800455c:	6802      	ldr	r2, [r0, #0]
 800455e:	ea43 0309 	orr.w	r3, r3, r9
 8004562:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004566:	4313      	orrs	r3, r2
 8004568:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800456a:	ea45 0308 	orr.w	r3, r5, r8
 800456e:	6842      	ldr	r2, [r0, #4]
 8004570:	ea43 030e 	orr.w	r3, r3, lr
 8004574:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8004578:	ea43 030c 	orr.w	r3, r3, ip
 800457c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004580:	433b      	orrs	r3, r7
 8004582:	4333      	orrs	r3, r6
 8004584:	4313      	orrs	r3, r2
 8004586:	6043      	str	r3, [r0, #4]
 8004588:	e7e5      	b.n	8004556 <FMC_SDRAM_Init+0x42>

0800458a <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800458a:	68cb      	ldr	r3, [r1, #12]
 800458c:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8004590:	694b      	ldr	r3, [r1, #20]
{
 8004592:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004594:	3b01      	subs	r3, #1
 8004596:	680f      	ldr	r7, [r1, #0]
 8004598:	684c      	ldr	r4, [r1, #4]
 800459a:	688e      	ldr	r6, [r1, #8]
 800459c:	051b      	lsls	r3, r3, #20
 800459e:	690d      	ldr	r5, [r1, #16]
 80045a0:	3c01      	subs	r4, #1
 80045a2:	6989      	ldr	r1, [r1, #24]
 80045a4:	3e01      	subs	r6, #1
 80045a6:	3d01      	subs	r5, #1
 80045a8:	3f01      	subs	r7, #1
 80045aa:	3901      	subs	r1, #1
 80045ac:	0124      	lsls	r4, r4, #4
 80045ae:	0236      	lsls	r6, r6, #8
 80045b0:	042d      	lsls	r5, r5, #16
 80045b2:	0609      	lsls	r1, r1, #24
 80045b4:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 80045b8:	b95a      	cbnz	r2, 80045d2 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80045ba:	433b      	orrs	r3, r7
 80045bc:	6882      	ldr	r2, [r0, #8]
 80045be:	4323      	orrs	r3, r4
 80045c0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80045c4:	4333      	orrs	r3, r6
 80045c6:	432b      	orrs	r3, r5
 80045c8:	430b      	orrs	r3, r1
 80045ca:	4313      	orrs	r3, r2
 80045cc:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 80045ce:	2000      	movs	r0, #0
 80045d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80045d2:	6882      	ldr	r2, [r0, #8]
 80045d4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80045d8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80045dc:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80045de:	ea44 0306 	orr.w	r3, r4, r6
 80045e2:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80045e4:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80045e6:	68c2      	ldr	r2, [r0, #12]
 80045e8:	432b      	orrs	r3, r5
 80045ea:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 80045ee:	430b      	orrs	r3, r1
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60c3      	str	r3, [r0, #12]
 80045f4:	e7eb      	b.n	80045ce <FMC_SDRAM_Timing_Init+0x44>

080045f6 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80045f6:	b084      	sub	sp, #16
 80045f8:	b510      	push	{r4, lr}
 80045fa:	ac03      	add	r4, sp, #12
 80045fc:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004600:	460b      	mov	r3, r1
 8004602:	9904      	ldr	r1, [sp, #16]
             Init.HardwareFlowControl |\
             Init.ClockDiv
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004604:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8004606:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8004608:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800460a:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 800460e:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8004610:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004612:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8004616:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8004618:	9907      	ldr	r1, [sp, #28]
 800461a:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800461c:	9908      	ldr	r1, [sp, #32]
 800461e:	430b      	orrs	r3, r1

  return HAL_OK;
}
 8004620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004624:	4313      	orrs	r3, r2
}
 8004626:	b004      	add	sp, #16
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004628:	6043      	str	r3, [r0, #4]
}
 800462a:	2000      	movs	r0, #0
 800462c:	4770      	bx	lr

0800462e <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800462e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8004632:	4770      	bx	lr

08004634 <SDMMC_PowerState_ON>:
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004634:	2303      	movs	r3, #3
 8004636:	6003      	str	r3, [r0, #0]

  return HAL_OK;
}
 8004638:	2000      	movs	r0, #0
 800463a:	4770      	bx	lr

0800463c <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800463c:	6800      	ldr	r0, [r0, #0]
}
 800463e:	f000 0003 	and.w	r0, r0, #3
 8004642:	4770      	bx	lr

08004644 <SDMMC_SendCommand>:
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8004644:	680b      	ldr	r3, [r1, #0]
{
 8004646:	b510      	push	{r4, lr}
  SDMMCx->ARG = Command->Argument;
 8004648:	6083      	str	r3, [r0, #8]
                       Command->Response         |\
                       Command->WaitForInterrupt |\
                       Command->CPSM);
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800464a:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800464c:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004650:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004654:	4323      	orrs	r3, r4
                       Command->Response         |\
 8004656:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8004658:	6909      	ldr	r1, [r1, #16]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800465a:	f022 020f 	bic.w	r2, r2, #15
                       Command->Response         |\
 800465e:	4323      	orrs	r3, r4
                       Command->WaitForInterrupt |\
 8004660:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004662:	4313      	orrs	r3, r2
 8004664:	60c3      	str	r3, [r0, #12]
  
  return HAL_OK;  
}
 8004666:	2000      	movs	r0, #0
 8004668:	bd10      	pop	{r4, pc}

0800466a <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800466a:	3014      	adds	r0, #20
  
  return (*(__IO uint32_t *) tmp);
 800466c:	5840      	ldr	r0, [r0, r1]
}  
 800466e:	4770      	bx	lr

08004670 <SDMMC_ConfigData>:
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004670:	680b      	ldr	r3, [r1, #0]
{
 8004672:	b510      	push	{r4, lr}
  SDMMCx->DTIMER = Data->DataTimeOut;
 8004674:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004676:	684b      	ldr	r3, [r1, #4]
 8004678:	6283      	str	r3, [r0, #40]	; 0x28
                       Data->TransferDir   |\
                       Data->TransferMode  |\
                       Data->DPSM);
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800467a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800467c:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004680:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004684:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8004686:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8004688:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 800468a:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800468c:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800468e:	4313      	orrs	r3, r2
 8004690:	62c3      	str	r3, [r0, #44]	; 0x2c

  return HAL_OK;

}
 8004692:	2000      	movs	r0, #0
 8004694:	bd10      	pop	{r4, pc}
	...

08004698 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004698:	b510      	push	{r4, lr}
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800469a:	2300      	movs	r3, #0
{
 800469c:	b086      	sub	sp, #24
 800469e:	4604      	mov	r4, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046a0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80046a2:	e9cd 3301 	strd	r3, r3, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80046a6:	e9cd 3303 	strd	r3, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80046aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ae:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80046b0:	f7ff ffc8 	bl	8004644 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <SDMMC_CmdGoIdleState+0x48>)
 80046b6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80046c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80046c6:	3b01      	subs	r3, #1
 80046c8:	d307      	bcc.n	80046da <SDMMC_CmdGoIdleState+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80046ca:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80046cc:	0612      	lsls	r2, r2, #24
 80046ce:	d5fa      	bpl.n	80046c6 <SDMMC_CmdGoIdleState+0x2e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80046d0:	23c5      	movs	r3, #197	; 0xc5
  
  return SDMMC_ERROR_NONE;
 80046d2:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80046d4:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80046d6:	b006      	add	sp, #24
 80046d8:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80046da:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80046de:	e7fa      	b.n	80046d6 <SDMMC_CmdGoIdleState+0x3e>
 80046e0:	20000000 	.word	0x20000000

080046e4 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80046e4:	4b45      	ldr	r3, [pc, #276]	; (80047fc <SDMMC_GetCmdResp1+0x118>)
{
 80046e6:	b510      	push	{r4, lr}
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80046e8:	681b      	ldr	r3, [r3, #0]
{
 80046ea:	4604      	mov	r4, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80046ec:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80046f0:	fbb3 f3f0 	udiv	r3, r3, r0
 80046f4:	435a      	muls	r2, r3
    if (count-- == 0U)
 80046f6:	2a00      	cmp	r2, #0
 80046f8:	d049      	beq.n	800478e <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDMMCx->STA;
 80046fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80046fc:	f013 0f45 	tst.w	r3, #69	; 0x45
 8004700:	d007      	beq.n	8004712 <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004702:	051b      	lsls	r3, r3, #20
 8004704:	d405      	bmi.n	8004712 <SDMMC_GetCmdResp1+0x2e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004706:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004708:	0758      	lsls	r0, r3, #29
 800470a:	d504      	bpl.n	8004716 <SDMMC_GetCmdResp1+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800470c:	2004      	movs	r0, #4
 800470e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8004710:	bd10      	pop	{r4, pc}
 8004712:	3a01      	subs	r2, #1
 8004714:	e7ef      	b.n	80046f6 <SDMMC_GetCmdResp1+0x12>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004716:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8004718:	f010 0001 	ands.w	r0, r0, #1
 800471c:	d002      	beq.n	8004724 <SDMMC_GetCmdResp1+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800471e:	2301      	movs	r3, #1
 8004720:	63a3      	str	r3, [r4, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004722:	e7f5      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004724:	23c5      	movs	r3, #197	; 0xc5
 8004726:	63a3      	str	r3, [r4, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8004728:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800472a:	b2db      	uxtb	r3, r3
 800472c:	4299      	cmp	r1, r3
 800472e:	d131      	bne.n	8004794 <SDMMC_GetCmdResp1+0xb0>
  return (*(__IO uint32_t *) tmp);
 8004730:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004732:	4833      	ldr	r0, [pc, #204]	; (8004800 <SDMMC_GetCmdResp1+0x11c>)
 8004734:	4018      	ands	r0, r3
 8004736:	2800      	cmp	r0, #0
 8004738:	d0ea      	beq.n	8004710 <SDMMC_GetCmdResp1+0x2c>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800473a:	2b00      	cmp	r3, #0
 800473c:	db2c      	blt.n	8004798 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800473e:	005a      	lsls	r2, r3, #1
 8004740:	d42d      	bmi.n	800479e <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004742:	009c      	lsls	r4, r3, #2
 8004744:	d42d      	bmi.n	80047a2 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004746:	00d9      	lsls	r1, r3, #3
 8004748:	d42d      	bmi.n	80047a6 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800474a:	011a      	lsls	r2, r3, #4
 800474c:	d42e      	bmi.n	80047ac <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800474e:	015c      	lsls	r4, r3, #5
 8004750:	d42f      	bmi.n	80047b2 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004752:	01d9      	lsls	r1, r3, #7
 8004754:	d430      	bmi.n	80047b8 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004756:	021a      	lsls	r2, r3, #8
 8004758:	d431      	bmi.n	80047be <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800475a:	025c      	lsls	r4, r3, #9
 800475c:	d432      	bmi.n	80047c4 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800475e:	0299      	lsls	r1, r3, #10
 8004760:	d433      	bmi.n	80047ca <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004762:	02da      	lsls	r2, r3, #11
 8004764:	d434      	bmi.n	80047d0 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004766:	035c      	lsls	r4, r3, #13
 8004768:	d435      	bmi.n	80047d6 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800476a:	0399      	lsls	r1, r3, #14
 800476c:	d436      	bmi.n	80047dc <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800476e:	03da      	lsls	r2, r3, #15
 8004770:	d437      	bmi.n	80047e2 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004772:	041c      	lsls	r4, r3, #16
 8004774:	d438      	bmi.n	80047e8 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004776:	0459      	lsls	r1, r3, #17
 8004778:	d439      	bmi.n	80047ee <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800477a:	049a      	lsls	r2, r3, #18
 800477c:	d43a      	bmi.n	80047f4 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800477e:	f013 0f08 	tst.w	r3, #8
 8004782:	bf14      	ite	ne
 8004784:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 8004788:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800478c:	e7c0      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800478e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004792:	e7bd      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004794:	2001      	movs	r0, #1
 8004796:	e7bb      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004798:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800479c:	e7b8      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800479e:	2040      	movs	r0, #64	; 0x40
 80047a0:	e7b6      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80047a2:	2080      	movs	r0, #128	; 0x80
 80047a4:	e7b4      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80047a6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80047aa:	e7b1      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80047ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80047b0:	e7ae      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80047b2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80047b6:	e7ab      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80047b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80047bc:	e7a8      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80047be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80047c2:	e7a5      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80047c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80047c8:	e7a2      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80047ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80047ce:	e79f      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CC_ERR;
 80047d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80047d4:	e79c      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80047d6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80047da:	e799      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80047dc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80047e0:	e796      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80047e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80047e6:	e793      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80047e8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80047ec:	e790      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80047ee:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80047f2:	e78d      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
    return SDMMC_ERROR_ERASE_RESET;
 80047f4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80047f8:	e78a      	b.n	8004710 <SDMMC_GetCmdResp1+0x2c>
 80047fa:	bf00      	nop
 80047fc:	20000000 	.word	0x20000000
 8004800:	fdffe008 	.word	0xfdffe008

08004804 <SDMMC_CmdBlockLength>:
{
 8004804:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004806:	2340      	movs	r3, #64	; 0x40
{
 8004808:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800480a:	2510      	movs	r5, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800480c:	2200      	movs	r2, #0
{
 800480e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004810:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004812:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004814:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800481c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004820:	f7ff ff10 	bl	8004644 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4629      	mov	r1, r5
 800482a:	4620      	mov	r0, r4
 800482c:	f7ff ff5a 	bl	80046e4 <SDMMC_GetCmdResp1>
}
 8004830:	b007      	add	sp, #28
 8004832:	bd30      	pop	{r4, r5, pc}

08004834 <SDMMC_CmdSelDesel>:
{
 8004834:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004836:	2340      	movs	r3, #64	; 0x40
{
 8004838:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800483a:	2507      	movs	r5, #7
{
 800483c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800483e:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004840:	2200      	movs	r2, #0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004842:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004844:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800484c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004850:	f7ff fef8 	bl	8004644 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004854:	f241 3288 	movw	r2, #5000	; 0x1388
 8004858:	4629      	mov	r1, r5
 800485a:	4620      	mov	r0, r4
 800485c:	f7ff ff42 	bl	80046e4 <SDMMC_GetCmdResp1>
}
 8004860:	b007      	add	sp, #28
 8004862:	bd30      	pop	{r4, r5, pc}

08004864 <SDMMC_CmdBusWidth>:
{
 8004864:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004866:	2340      	movs	r3, #64	; 0x40
{
 8004868:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800486a:	2506      	movs	r5, #6
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800486c:	2200      	movs	r2, #0
{
 800486e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004870:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004872:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004874:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004878:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800487c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004880:	f7ff fee0 	bl	8004644 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004884:	f241 3288 	movw	r2, #5000	; 0x1388
 8004888:	4629      	mov	r1, r5
 800488a:	4620      	mov	r0, r4
 800488c:	f7ff ff2a 	bl	80046e4 <SDMMC_GetCmdResp1>
}
 8004890:	b007      	add	sp, #28
 8004892:	bd30      	pop	{r4, r5, pc}

08004894 <SDMMC_CmdSwitch>:
 8004894:	f7ff bfe6 	b.w	8004864 <SDMMC_CmdBusWidth>

08004898 <SDMMC_CmdSetRelAddMmc>:
{
 8004898:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800489a:	2340      	movs	r3, #64	; 0x40
{
 800489c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800489e:	2503      	movs	r5, #3
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 80048a0:	0409      	lsls	r1, r1, #16
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048a2:	2200      	movs	r2, #0
{
 80048a4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 80048a6:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048a8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048aa:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048b6:	f7ff fec5 	bl	8004644 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4629      	mov	r1, r5
 80048c0:	4620      	mov	r0, r4
 80048c2:	f7ff ff0f 	bl	80046e4 <SDMMC_GetCmdResp1>
}
 80048c6:	b007      	add	sp, #28
 80048c8:	bd30      	pop	{r4, r5, pc}

080048ca <SDMMC_CmdSendStatus>:
{
 80048ca:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048cc:	2340      	movs	r3, #64	; 0x40
{
 80048ce:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048d0:	250d      	movs	r5, #13
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048d2:	2200      	movs	r2, #0
{
 80048d4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80048d6:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048d8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048da:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80048de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80048e6:	f7ff fead 	bl	8004644 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80048ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ee:	4629      	mov	r1, r5
 80048f0:	4620      	mov	r0, r4
 80048f2:	f7ff fef7 	bl	80046e4 <SDMMC_GetCmdResp1>
}
 80048f6:	b007      	add	sp, #28
 80048f8:	bd30      	pop	{r4, r5, pc}

080048fa <SDMMC_CmdSendEXTCSD>:
{
 80048fa:	b530      	push	{r4, r5, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80048fc:	2340      	movs	r3, #64	; 0x40
{
 80048fe:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004900:	2508      	movs	r5, #8
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004902:	2200      	movs	r2, #0
{
 8004904:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004906:	9101      	str	r1, [sp, #4]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004908:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800490a:	e9cd 5302 	strd	r5, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800490e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004912:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004916:	f7ff fe95 	bl	8004644 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD,SDMMC_CMDTIMEOUT);
 800491a:	f241 3288 	movw	r2, #5000	; 0x1388
 800491e:	4629      	mov	r1, r5
 8004920:	4620      	mov	r0, r4
 8004922:	f7ff fedf 	bl	80046e4 <SDMMC_GetCmdResp1>
}
 8004926:	b007      	add	sp, #28
 8004928:	bd30      	pop	{r4, r5, pc}
	...

0800492c <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <SDMMC_GetCmdResp2+0x48>)
 800492e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 8004932:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	fbb3 f3f1 	udiv	r3, r3, r1
 800493a:	f241 3188 	movw	r1, #5000	; 0x1388
 800493e:	434b      	muls	r3, r1
    if (count-- == 0U)
 8004940:	3b01      	subs	r3, #1
 8004942:	d313      	bcc.n	800496c <SDMMC_GetCmdResp2+0x40>
    sta_reg = SDMMCx->STA;
 8004944:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004946:	f011 0f45 	tst.w	r1, #69	; 0x45
 800494a:	d0f9      	beq.n	8004940 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800494c:	0509      	lsls	r1, r1, #20
 800494e:	d4f7      	bmi.n	8004940 <SDMMC_GetCmdResp2+0x14>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004950:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004952:	075b      	lsls	r3, r3, #29
 8004954:	d502      	bpl.n	800495c <SDMMC_GetCmdResp2+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004956:	2004      	movs	r0, #4
 8004958:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800495a:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800495c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800495e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004962:	bf14      	ite	ne
 8004964:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004966:	23c5      	moveq	r3, #197	; 0xc5
 8004968:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800496a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800496c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000000 	.word	0x20000000

08004978 <SDMMC_CmdSendCID>:
{
 8004978:	b510      	push	{r4, lr}
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800497a:	2300      	movs	r3, #0
{
 800497c:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800497e:	2202      	movs	r2, #2
{
 8004980:	4604      	mov	r4, r0
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004982:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004984:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004988:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800498a:	e9cd 2303 	strd	r2, r3, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800498e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004992:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004994:	f7ff fe56 	bl	8004644 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004998:	4620      	mov	r0, r4
 800499a:	f7ff ffc7 	bl	800492c <SDMMC_GetCmdResp2>
}
 800499e:	b006      	add	sp, #24
 80049a0:	bd10      	pop	{r4, pc}

080049a2 <SDMMC_CmdSendCSD>:
{
 80049a2:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80049a4:	2209      	movs	r2, #9
{
 80049a6:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80049a8:	23c0      	movs	r3, #192	; 0xc0
{
 80049aa:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80049ac:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049ae:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80049b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b8:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049bc:	a901      	add	r1, sp, #4
 80049be:	f7ff fe41 	bl	8004644 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80049c2:	4620      	mov	r0, r4
 80049c4:	f7ff ffb2 	bl	800492c <SDMMC_GetCmdResp2>
}
 80049c8:	b006      	add	sp, #24
 80049ca:	bd10      	pop	{r4, pc}

080049cc <SDMMC_GetCmdResp3>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049cc:	4b0f      	ldr	r3, [pc, #60]	; (8004a0c <SDMMC_GetCmdResp3+0x40>)
 80049ce:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
{
 80049d2:	4602      	mov	r2, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80049da:	f241 3188 	movw	r1, #5000	; 0x1388
 80049de:	434b      	muls	r3, r1
    if (count-- == 0U)
 80049e0:	3b01      	subs	r3, #1
 80049e2:	d30f      	bcc.n	8004a04 <SDMMC_GetCmdResp3+0x38>
    sta_reg = SDMMCx->STA;
 80049e4:	6b51      	ldr	r1, [r2, #52]	; 0x34
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80049e6:	f011 0f45 	tst.w	r1, #69	; 0x45
 80049ea:	d0f9      	beq.n	80049e0 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80049ec:	0509      	lsls	r1, r1, #20
 80049ee:	d4f7      	bmi.n	80049e0 <SDMMC_GetCmdResp3+0x14>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80049f0:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80049f2:	f010 0004 	ands.w	r0, r0, #4
 80049f6:	d002      	beq.n	80049fe <SDMMC_GetCmdResp3+0x32>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80049f8:	2004      	movs	r0, #4
 80049fa:	6390      	str	r0, [r2, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80049fc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80049fe:	23c5      	movs	r3, #197	; 0xc5
 8004a00:	6393      	str	r3, [r2, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8004a02:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8004a04:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000000 	.word	0x20000000

08004a10 <SDMMC_CmdOpCondition>:
{
 8004a10:	b510      	push	{r4, lr}
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a12:	2201      	movs	r2, #1
{
 8004a14:	b086      	sub	sp, #24
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a16:	2340      	movs	r3, #64	; 0x40
{
 8004a18:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8004a1a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a1c:	2100      	movs	r1, #0
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a26:	e9cd 1304 	strd	r1, r3, [sp, #16]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a2a:	a901      	add	r1, sp, #4
 8004a2c:	f7ff fe0a 	bl	8004644 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7ff ffcb 	bl	80049cc <SDMMC_GetCmdResp3>
}
 8004a36:	b006      	add	sp, #24
 8004a38:	bd10      	pop	{r4, pc}
	...

08004a3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a3c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004a3e:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8004a40:	4a10      	ldr	r2, [pc, #64]	; (8004a84 <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 8004a42:	9301      	str	r3, [sp, #4]
    count++;
 8004a44:	9b01      	ldr	r3, [sp, #4]
 8004a46:	3301      	adds	r3, #1
 8004a48:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004a4a:	9b01      	ldr	r3, [sp, #4]
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d816      	bhi.n	8004a7e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a50:	6903      	ldr	r3, [r0, #16]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	daf6      	bge.n	8004a44 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8004a56:	2300      	movs	r3, #0

  do
  {
    count++;

    if (count > 200000U)
 8004a58:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <USB_CoreReset+0x48>)
  count = 0U;
 8004a5a:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a5c:	6903      	ldr	r3, [r0, #16]
 8004a5e:	f043 0301 	orr.w	r3, r3, #1
 8004a62:	6103      	str	r3, [r0, #16]
    count++;
 8004a64:	9b01      	ldr	r3, [sp, #4]
 8004a66:	3301      	adds	r3, #1
 8004a68:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004a6a:	9b01      	ldr	r3, [sp, #4]
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d806      	bhi.n	8004a7e <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a70:	6903      	ldr	r3, [r0, #16]
 8004a72:	f013 0301 	ands.w	r3, r3, #1
 8004a76:	d1f5      	bne.n	8004a64 <USB_CoreReset+0x28>

  return HAL_OK;
 8004a78:	4618      	mov	r0, r3
}
 8004a7a:	b002      	add	sp, #8
 8004a7c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004a7e:	2003      	movs	r0, #3
 8004a80:	e7fb      	b.n	8004a7a <USB_CoreReset+0x3e>
 8004a82:	bf00      	nop
 8004a84:	00030d40 	.word	0x00030d40

08004a88 <USB_CoreInit>:
{
 8004a88:	b084      	sub	sp, #16
 8004a8a:	b538      	push	{r3, r4, r5, lr}
 8004a8c:	ad05      	add	r5, sp, #20
 8004a8e:	4604      	mov	r4, r0
 8004a90:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d126      	bne.n	8004ae8 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004a9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004aa2:	68c3      	ldr	r3, [r0, #12]
 8004aa4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004aa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aac:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004aae:	68c3      	ldr	r3, [r0, #12]
 8004ab0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ab4:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004ab6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d103      	bne.n	8004ac4 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004abc:	68c3      	ldr	r3, [r0, #12]
 8004abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ac2:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	f7ff ffb9 	bl	8004a3c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004aca:	9b08      	ldr	r3, [sp, #32]
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d107      	bne.n	8004ae0 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ad0:	68a3      	ldr	r3, [r4, #8]
 8004ad2:	f043 0306 	orr.w	r3, r3, #6
 8004ad6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ad8:	68a3      	ldr	r3, [r4, #8]
 8004ada:	f043 0320 	orr.w	r3, r3, #32
 8004ade:	60a3      	str	r3, [r4, #8]
}
 8004ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ae4:	b004      	add	sp, #16
 8004ae6:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ae8:	68c3      	ldr	r3, [r0, #12]
 8004aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aee:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004af0:	f7ff ffa4 	bl	8004a3c <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004af4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004af6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afa:	63a3      	str	r3, [r4, #56]	; 0x38
 8004afc:	e7e5      	b.n	8004aca <USB_CoreInit+0x42>

08004afe <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004afe:	6883      	ldr	r3, [r0, #8]
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	6083      	str	r3, [r0, #8]
}
 8004b06:	2000      	movs	r0, #0
 8004b08:	4770      	bx	lr

08004b0a <USB_SetCurrentMode>:
{
 8004b0a:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b0c:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004b0e:	2901      	cmp	r1, #1
{
 8004b10:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b12:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b16:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004b18:	d10f      	bne.n	8004b3a <USB_SetCurrentMode+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b1a:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8004b1c:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b22:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8004b24:	2001      	movs	r0, #1
      ms++;
 8004b26:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8004b28:	f7fc ff24 	bl	8001974 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004b2c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b2e:	07d9      	lsls	r1, r3, #31
 8004b30:	d414      	bmi.n	8004b5c <USB_SetCurrentMode+0x52>
 8004b32:	2c32      	cmp	r4, #50	; 0x32
 8004b34:	d1f6      	bne.n	8004b24 <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 8004b36:	2001      	movs	r0, #1
}
 8004b38:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8004b3a:	2900      	cmp	r1, #0
 8004b3c:	d1fb      	bne.n	8004b36 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b3e:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 8004b40:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b46:	60c3      	str	r3, [r0, #12]
      HAL_Delay(1U);
 8004b48:	2001      	movs	r0, #1
      ms++;
 8004b4a:	3401      	adds	r4, #1
      HAL_Delay(1U);
 8004b4c:	f7fc ff12 	bl	8001974 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004b50:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b52:	07da      	lsls	r2, r3, #31
 8004b54:	d502      	bpl.n	8004b5c <USB_SetCurrentMode+0x52>
 8004b56:	2c32      	cmp	r4, #50	; 0x32
 8004b58:	d1f6      	bne.n	8004b48 <USB_SetCurrentMode+0x3e>
 8004b5a:	e7ec      	b.n	8004b36 <USB_SetCurrentMode+0x2c>
    return HAL_ERROR;
 8004b5c:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 8004b60:	4258      	negs	r0, r3
 8004b62:	4158      	adcs	r0, r3
 8004b64:	e7e8      	b.n	8004b38 <USB_SetCurrentMode+0x2e>
	...

08004b68 <USB_FlushTxFifo>:
{
 8004b68:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004b6a:	2300      	movs	r3, #0
    if (count > 200000U)
 8004b6c:	4a10      	ldr	r2, [pc, #64]	; (8004bb0 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8004b6e:	9301      	str	r3, [sp, #4]
    count++;
 8004b70:	9b01      	ldr	r3, [sp, #4]
 8004b72:	3301      	adds	r3, #1
 8004b74:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004b76:	9b01      	ldr	r3, [sp, #4]
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d816      	bhi.n	8004baa <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b7c:	6903      	ldr	r3, [r0, #16]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	daf6      	bge.n	8004b70 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b82:	0189      	lsls	r1, r1, #6
  count = 0U;
 8004b84:	2300      	movs	r3, #0
    if (count > 200000U)
 8004b86:	4a0a      	ldr	r2, [pc, #40]	; (8004bb0 <USB_FlushTxFifo+0x48>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b88:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8004b8c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b8e:	6101      	str	r1, [r0, #16]
    count++;
 8004b90:	9b01      	ldr	r3, [sp, #4]
 8004b92:	3301      	adds	r3, #1
 8004b94:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004b96:	9b01      	ldr	r3, [sp, #4]
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d806      	bhi.n	8004baa <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b9c:	6903      	ldr	r3, [r0, #16]
 8004b9e:	f013 0320 	ands.w	r3, r3, #32
 8004ba2:	d1f5      	bne.n	8004b90 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8004ba4:	4618      	mov	r0, r3
}
 8004ba6:	b002      	add	sp, #8
 8004ba8:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004baa:	2003      	movs	r0, #3
 8004bac:	e7fb      	b.n	8004ba6 <USB_FlushTxFifo+0x3e>
 8004bae:	bf00      	nop
 8004bb0:	00030d40 	.word	0x00030d40

08004bb4 <USB_FlushRxFifo>:
{
 8004bb4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004bb6:	2300      	movs	r3, #0
    if (count > 200000U)
 8004bb8:	4a0f      	ldr	r2, [pc, #60]	; (8004bf8 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 8004bba:	9301      	str	r3, [sp, #4]
    count++;
 8004bbc:	9b01      	ldr	r3, [sp, #4]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004bc2:	9b01      	ldr	r3, [sp, #4]
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d814      	bhi.n	8004bf2 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bc8:	6903      	ldr	r3, [r0, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	daf6      	bge.n	8004bbc <USB_FlushRxFifo+0x8>
  count = 0U;
 8004bce:	2300      	movs	r3, #0
    if (count > 200000U)
 8004bd0:	4a09      	ldr	r2, [pc, #36]	; (8004bf8 <USB_FlushRxFifo+0x44>)
  count = 0U;
 8004bd2:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	6103      	str	r3, [r0, #16]
    count++;
 8004bd8:	9b01      	ldr	r3, [sp, #4]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004bde:	9b01      	ldr	r3, [sp, #4]
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d806      	bhi.n	8004bf2 <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004be4:	6903      	ldr	r3, [r0, #16]
 8004be6:	f013 0310 	ands.w	r3, r3, #16
 8004bea:	d1f5      	bne.n	8004bd8 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8004bec:	4618      	mov	r0, r3
}
 8004bee:	b002      	add	sp, #8
 8004bf0:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004bf2:	2003      	movs	r0, #3
 8004bf4:	e7fb      	b.n	8004bee <USB_FlushRxFifo+0x3a>
 8004bf6:	bf00      	nop
 8004bf8:	00030d40 	.word	0x00030d40

08004bfc <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8004bfc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8004c00:	4319      	orrs	r1, r3
 8004c02:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8004c06:	2000      	movs	r0, #0
 8004c08:	4770      	bx	lr
	...

08004c0c <USB_DevInit>:
{
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c12:	4604      	mov	r4, r0
 8004c14:	a809      	add	r0, sp, #36	; 0x24
 8004c16:	460e      	mov	r6, r1
 8004c18:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8004c1e:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8004c20:	4619      	mov	r1, r3
 8004c22:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8004c26:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8004c28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8004c2c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8004c2e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8004c30:	d1f7      	bne.n	8004c22 <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c32:	f504 6700 	add.w	r7, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8004c36:	2d00      	cmp	r5, #0
 8004c38:	d16c      	bne.n	8004d14 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f043 0302 	orr.w	r3, r3, #2
 8004c40:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004c42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c48:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c50:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c58:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004c60:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8004c64:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d159      	bne.n	8004d22 <USB_DevInit+0x116>
    if (cfg.speed == USBD_HS_SPEED)
 8004c6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c70:	2900      	cmp	r1, #0
 8004c72:	d154      	bne.n	8004d1e <USB_DevInit+0x112>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c74:	4620      	mov	r0, r4
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c76:	f64f 387f 	movw	r8, #64383	; 0xfb7f
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c7a:	f7ff ffbf 	bl	8004bfc <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c7e:	2110      	movs	r1, #16
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7ff ff71 	bl	8004b68 <USB_FlushTxFifo>
 8004c86:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c88:	4620      	mov	r0, r4
 8004c8a:	f7ff ff93 	bl	8004bb4 <USB_FlushRxFifo>
 8004c8e:	4308      	orrs	r0, r1
  USBx_DEVICE->DIEPMSK = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c96:	b2c0      	uxtb	r0, r0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c98:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c9c:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c9e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    ret = HAL_ERROR;
 8004ca2:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8004ca4:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ca6:	617b      	str	r3, [r7, #20]
    ret = HAL_ERROR;
 8004ca8:	bf18      	it	ne
 8004caa:	2001      	movne	r0, #1
  USBx_DEVICE->DAINTMSK = 0U;
 8004cac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cae:	42b3      	cmp	r3, r6
 8004cb0:	d139      	bne.n	8004d26 <USB_DevInit+0x11a>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004cb8:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004cbc:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004cc0:	4611      	mov	r1, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cc2:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cc6:	42b2      	cmp	r2, r6
 8004cc8:	d140      	bne.n	8004d4c <USB_DevInit+0x140>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004cd0:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004cd6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8004cda:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8004cdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cde:	b91b      	cbnz	r3, 8004ce8 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ce0:	69a3      	ldr	r3, [r4, #24]
 8004ce2:	f043 0310 	orr.w	r3, r3, #16
 8004ce6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ce8:	69a2      	ldr	r2, [r4, #24]
 8004cea:	4b22      	ldr	r3, [pc, #136]	; (8004d74 <USB_DevInit+0x168>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8004cf0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cf2:	b11b      	cbz	r3, 8004cfc <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004cf4:	69a3      	ldr	r3, [r4, #24]
 8004cf6:	f043 0308 	orr.w	r3, r3, #8
 8004cfa:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8004cfc:	2d01      	cmp	r5, #1
 8004cfe:	d105      	bne.n	8004d0c <USB_DevInit+0x100>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d00:	69a3      	ldr	r3, [r4, #24]
 8004d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d06:	f043 0304 	orr.w	r3, r3, #4
 8004d0a:	61a3      	str	r3, [r4, #24]
}
 8004d0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d10:	b004      	add	sp, #16
 8004d12:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d14:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d1a:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d1c:	e79d      	b.n	8004c5a <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d1e:	4619      	mov	r1, r3
 8004d20:	e7a8      	b.n	8004c74 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d22:	2103      	movs	r1, #3
 8004d24:	e7a6      	b.n	8004c74 <USB_DevInit+0x68>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d26:	f8d2 9000 	ldr.w	r9, [r2]
 8004d2a:	f1b9 0f00 	cmp.w	r9, #0
 8004d2e:	da0b      	bge.n	8004d48 <USB_DevInit+0x13c>
      if (i == 0U)
 8004d30:	b93b      	cbnz	r3, 8004d42 <USB_DevInit+0x136>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d32:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d36:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d38:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d3a:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d3e:	3220      	adds	r2, #32
 8004d40:	e7b5      	b.n	8004cae <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d42:	f8c2 c000 	str.w	ip, [r2]
 8004d46:	e7f6      	b.n	8004d36 <USB_DevInit+0x12a>
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d48:	6011      	str	r1, [r2, #0]
 8004d4a:	e7f4      	b.n	8004d36 <USB_DevInit+0x12a>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d4c:	f8d3 9000 	ldr.w	r9, [r3]
 8004d50:	f1b9 0f00 	cmp.w	r9, #0
 8004d54:	da0b      	bge.n	8004d6e <USB_DevInit+0x162>
      if (i == 0U)
 8004d56:	b93a      	cbnz	r2, 8004d68 <USB_DevInit+0x15c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d58:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d5c:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d5e:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d60:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d64:	3320      	adds	r3, #32
 8004d66:	e7ae      	b.n	8004cc6 <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d68:	f8c3 c000 	str.w	ip, [r3]
 8004d6c:	e7f6      	b.n	8004d5c <USB_DevInit+0x150>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d6e:	6019      	str	r1, [r3, #0]
 8004d70:	e7f4      	b.n	8004d5c <USB_DevInit+0x150>
 8004d72:	bf00      	nop
 8004d74:	803c3800 	.word	0x803c3800

08004d78 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d78:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8004d7c:	f023 0303 	bic.w	r3, r3, #3
 8004d80:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d84:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8004d88:	f043 0302 	orr.w	r3, r3, #2
 8004d8c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8004d90:	2000      	movs	r0, #0
 8004d92:	4770      	bx	lr

08004d94 <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool res = true;
 8004d96:	2001      	movs	r0, #1
{
 8004d98:	460e      	mov	r6, r1
 8004d9a:	4614      	mov	r4, r2
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8004d9c:	4d0c      	ldr	r5, [pc, #48]	; (8004dd0 <write_callback+0x3c>)
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 8004d9e:	2700      	movs	r7, #0
  while (count) {
 8004da0:	b93c      	cbnz	r4, 8004db2 <write_callback+0x1e>
 8004da2:	e00b      	b.n	8004dbc <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 8004da4:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004da8:	18ea      	adds	r2, r5, r3
      count--;
 8004daa:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8004dac:	3301      	adds	r3, #1
      o_packet.payload[o_packet.pw] = *pr;
 8004dae:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8004db0:	702b      	strb	r3, [r5, #0]
 8004db2:	782b      	ldrb	r3, [r5, #0]
 8004db4:	2b1f      	cmp	r3, #31
 8004db6:	d802      	bhi.n	8004dbe <write_callback+0x2a>
 8004db8:	2c00      	cmp	r4, #0
 8004dba:	d1f3      	bne.n	8004da4 <write_callback+0x10>
    }
  }
  return res;
}
 8004dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8004dbe:	2b20      	cmp	r3, #32
 8004dc0:	d1ee      	bne.n	8004da0 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8004dc2:	2121      	movs	r1, #33	; 0x21
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	f000 fdfb 	bl	80059c0 <ioRawWriteBuffer>
      o_packet.pw = 0;
 8004dca:	702f      	strb	r7, [r5, #0]
 8004dcc:	e7e8      	b.n	8004da0 <write_callback+0xc>
 8004dce:	bf00      	nop
 8004dd0:	20002508 	.word	0x20002508

08004dd4 <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8004dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004dd8:	460f      	mov	r7, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 8004dda:	4614      	mov	r4, r2
 8004ddc:	b1f2      	cbz	r2, 8004e1c <read_callback+0x48>
    return true;

  if (i_packet.pr == 0xFF)
 8004dde:	4d1d      	ldr	r5, [pc, #116]	; (8004e54 <read_callback+0x80>)
 8004de0:	4e1d      	ldr	r6, [pc, #116]	; (8004e58 <read_callback+0x84>)
 8004de2:	782b      	ldrb	r3, [r5, #0]
 8004de4:	2bff      	cmp	r3, #255	; 0xff
 8004de6:	d11b      	bne.n	8004e20 <read_callback+0x4c>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8004de8:	2121      	movs	r1, #33	; 0x21
 8004dea:	4628      	mov	r0, r5
 8004dec:	f000 fdf6 	bl	80059dc <ioRawReadBuffer>
  i_ridx = 0;
 8004df0:	2300      	movs	r3, #0
 8004df2:	6033      	str	r3, [r6, #0]
    res = read_packet();

  if (res == false)
 8004df4:	b9a0      	cbnz	r0, 8004e20 <read_callback+0x4c>
      read_packet();
    }
  }

  return res;
}
 8004df6:	b003      	add	sp, #12
 8004df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8004dfc:	5cea      	ldrb	r2, [r5, r3]
      count--;
 8004dfe:	3c01      	subs	r4, #1
      *pw = i_packet.payload[i_ridx];
 8004e00:	f807 2b01 	strb.w	r2, [r7], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8004e04:	782a      	ldrb	r2, [r5, #0]
 8004e06:	3a01      	subs	r2, #1
 8004e08:	702a      	strb	r2, [r5, #0]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	7828      	ldrb	r0, [r5, #0]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	b158      	cbz	r0, 8004e2a <read_callback+0x56>
 8004e12:	3301      	adds	r3, #1
 8004e14:	2c00      	cmp	r4, #0
 8004e16:	d1f1      	bne.n	8004dfc <read_callback+0x28>
 8004e18:	b102      	cbz	r2, 8004e1c <read_callback+0x48>
 8004e1a:	6031      	str	r1, [r6, #0]
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	e7ea      	b.n	8004df6 <read_callback+0x22>
 8004e20:	f04f 0900 	mov.w	r9, #0
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8004e24:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8004e54 <read_callback+0x80>
 8004e28:	e011      	b.n	8004e4e <read_callback+0x7a>
 8004e2a:	b102      	cbz	r2, 8004e2e <read_callback+0x5a>
 8004e2c:	6033      	str	r3, [r6, #0]
    if (count && i_packet.pr == 0) {
 8004e2e:	2c00      	cmp	r4, #0
 8004e30:	d0f4      	beq.n	8004e1c <read_callback+0x48>
      uint8_t sync = 0xAA;
 8004e32:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 8004e34:	2101      	movs	r1, #1
 8004e36:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 8004e3a:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 8004e3e:	f000 fdbf 	bl	80059c0 <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8004e42:	2121      	movs	r1, #33	; 0x21
 8004e44:	4640      	mov	r0, r8
 8004e46:	f000 fdc9 	bl	80059dc <ioRawReadBuffer>
  i_ridx = 0;
 8004e4a:	f8c6 9000 	str.w	r9, [r6]
  while (count) {
 8004e4e:	6833      	ldr	r3, [r6, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8004e50:	2200      	movs	r2, #0
 8004e52:	e7db      	b.n	8004e0c <read_callback+0x38>
 8004e54:	200024e0 	.word	0x200024e0
 8004e58:	20002504 	.word	0x20002504

08004e5c <pb_io_flush_ostream>:
{
 8004e5c:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8004e5e:	4c06      	ldr	r4, [pc, #24]	; (8004e78 <pb_io_flush_ostream+0x1c>)
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8004e60:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8004e62:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8004e64:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 8004e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e6a:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8004e6c:	f000 fda8 	bl	80059c0 <ioRawWriteBuffer>
  o_packet.pw = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	7023      	strb	r3, [r4, #0]
}
 8004e74:	bd10      	pop	{r4, pc}
 8004e76:	bf00      	nop
 8004e78:	20002508 	.word	0x20002508

08004e7c <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 8004e7c:	4b03      	ldr	r3, [pc, #12]	; (8004e8c <pb_io_flush_istream+0x10>)
 8004e7e:	22ff      	movs	r2, #255	; 0xff
 8004e80:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 8004e82:	2200      	movs	r2, #0
 8004e84:	4b02      	ldr	r3, [pc, #8]	; (8004e90 <pb_io_flush_istream+0x14>)
 8004e86:	601a      	str	r2, [r3, #0]
}
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	200024e0 	.word	0x200024e0
 8004e90:	20002504 	.word	0x20002504

08004e94 <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 8004e94:	2200      	movs	r2, #0
 8004e96:	e9c0 2203 	strd	r2, r2, [r0, #12]
  return stream;
 8004e9a:	4a04      	ldr	r2, [pc, #16]	; (8004eac <pb_io_ostream+0x18>)
 8004e9c:	e9c0 2100 	strd	r2, r1, [r0]
 8004ea0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
 8004ea4:	b510      	push	{r4, lr}
  return stream;
 8004ea6:	6082      	str	r2, [r0, #8]
}
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	bf00      	nop
 8004eac:	08004d95 	.word	0x08004d95

08004eb0 <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	60c2      	str	r2, [r0, #12]
  return stream;
 8004eb4:	4a03      	ldr	r2, [pc, #12]	; (8004ec4 <pb_io_istream+0x14>)
 8004eb6:	e9c0 2100 	strd	r2, r1, [r0]
 8004eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ebe:	6082      	str	r2, [r0, #8]
}
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	08004dd5 	.word	0x08004dd5

08004ec8 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8004ec8:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 8004eca:	f000 fd95 	bl	80059f8 <ioRawDisableLLWrite>
  return 0;
}
 8004ece:	2000      	movs	r0, #0
 8004ed0:	bd08      	pop	{r3, pc}

08004ed2 <ai_init_buffer_shape_msg>:
  return (uint32_t)aiFmt;
}

static void ai_init_buffer_shape_msg(const ai_buffer *ai_buffer, aiBufferShapeMsg *shape)
{
  shape->format = aiPbAiFmtToMsgFmt(ai_buffer->format);
 8004ed2:	6803      	ldr	r3, [r0, #0]
 8004ed4:	600b      	str	r3, [r1, #0]
  shape->n_batches = AI_BUFFER_SHAPE_ELEM(ai_buffer, AI_SHAPE_BATCH);
 8004ed6:	6983      	ldr	r3, [r0, #24]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	604a      	str	r2, [r1, #4]
  shape->height = AI_BUFFER_SHAPE_ELEM(ai_buffer, AI_SHAPE_HEIGHT);
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	608a      	str	r2, [r1, #8]
  shape->width = AI_BUFFER_SHAPE_ELEM(ai_buffer, AI_SHAPE_WIDTH);
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	60ca      	str	r2, [r1, #12]
  shape->channels = AI_BUFFER_SHAPE_ELEM(ai_buffer, AI_SHAPE_CHANNEL);
 8004ee4:	685a      	ldr	r2, [r3, #4]
 8004ee6:	610a      	str	r2, [r1, #16]
  if (AI_BUFFER_SHAPE_SIZE(ai_buffer) > 4)
 8004ee8:	6942      	ldr	r2, [r0, #20]
 8004eea:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
{
 8004eee:	b510      	push	{r4, lr}
  if (AI_BUFFER_SHAPE_SIZE(ai_buffer) > 4)
 8004ef0:	f3c2 2417 	ubfx	r4, r2, #8, #24
 8004ef4:	d30c      	bcc.n	8004f10 <ai_init_buffer_shape_msg+0x3e>
    shape->depth = AI_BUFFER_SHAPE_ELEM(ai_buffer, AI_SHAPE_DEPTH);
 8004ef6:	691a      	ldr	r2, [r3, #16]
  else
    shape->depth = 0;
  if (AI_BUFFER_SHAPE_SIZE(ai_buffer) > 5)
 8004ef8:	2c05      	cmp	r4, #5
    shape->depth = AI_BUFFER_SHAPE_ELEM(ai_buffer, AI_SHAPE_DEPTH);
 8004efa:	620a      	str	r2, [r1, #32]
  if (AI_BUFFER_SHAPE_SIZE(ai_buffer) > 5)
 8004efc:	d10b      	bne.n	8004f16 <ai_init_buffer_shape_msg+0x44>
    shape->extension = AI_BUFFER_SHAPE_ELEM(ai_buffer, AI_SHAPE_EXTENSION);
  else
    shape->extension = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	624b      	str	r3, [r1, #36]	; 0x24
  shape->addr = (uint32_t)ai_buffer->data;
 8004f02:	6843      	ldr	r3, [r0, #4]
 8004f04:	61cb      	str	r3, [r1, #28]
  shape->scale = 0.0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	614b      	str	r3, [r1, #20]
  shape->zeropoint = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	618b      	str	r3, [r1, #24]
}
 8004f0e:	bd10      	pop	{r4, pc}
    shape->depth = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	620b      	str	r3, [r1, #32]
  if (AI_BUFFER_SHAPE_SIZE(ai_buffer) > 5)
 8004f14:	e7f4      	b.n	8004f00 <ai_init_buffer_shape_msg+0x2e>
    shape->extension = AI_BUFFER_SHAPE_ELEM(ai_buffer, AI_SHAPE_EXTENSION);
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	e7f2      	b.n	8004f00 <ai_init_buffer_shape_msg+0x2e>

08004f1a <aiPbBuffer_read_cb3>:

static bool aiPbBuffer_read_cb3(pb_istream_t *stream, const pb_field_t *field,
    void **arg)
{
 8004f1a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 8004f1e:	6814      	ldr	r4, [r2, #0]
{
 8004f20:	4606      	mov	r6, r0
  int maxr = bm->n_max;  /* number of item w/o padding */
  msg = (aiBufferByteMsg *)bm->msg;
  format = aiPbMsgFmtToAiFmt(msg->shape.format);

  /* Check shape/format */
  bm->err = EnumError_E_NONE;
 8004f22:	f04f 0800 	mov.w	r8, #0
  const ai_u32 b_ = AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH);
 8004f26:	6820      	ldr	r0, [r4, #0]
  int maxr = bm->n_max;  /* number of item w/o padding */
 8004f28:	6865      	ldr	r5, [r4, #4]
  const ai_u32 d_ = (AI_BUFFER_SHAPE_SIZE(bm->buffer) > 4)?AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_DEPTH):0;
 8004f2a:	6942      	ldr	r2, [r0, #20]
  const ai_u32 b_ = AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH);
 8004f2c:	6983      	ldr	r3, [r0, #24]
  const ai_u32 d_ = (AI_BUFFER_SHAPE_SIZE(bm->buffer) > 4)?AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_DEPTH):0;
 8004f2e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
  const ai_u32 e_ = (AI_BUFFER_SHAPE_SIZE(bm->buffer) == 6)?AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_EXTENSION):0;
 8004f32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  const ai_u32 b_ = AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH);
 8004f36:	681f      	ldr	r7, [r3, #0]
  const ai_u32 d_ = (AI_BUFFER_SHAPE_SIZE(bm->buffer) > 4)?AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_DEPTH):0;
 8004f38:	bf2c      	ite	cs
 8004f3a:	6919      	ldrcs	r1, [r3, #16]
 8004f3c:	2100      	movcc	r1, #0
  const ai_u32 e_ = (AI_BUFFER_SHAPE_SIZE(bm->buffer) == 6)?AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_EXTENSION):0;
 8004f3e:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
  const ai_u32 c_ = AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_CHANNEL);
 8004f42:	f8d3 a004 	ldr.w	sl, [r3, #4]
  const ai_u32 e_ = (AI_BUFFER_SHAPE_SIZE(bm->buffer) == 6)?AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_EXTENSION):0;
 8004f46:	bf0c      	ite	eq
 8004f48:	f8d3 c014 	ldreq.w	ip, [r3, #20]
 8004f4c:	f04f 0c00 	movne.w	ip, #0
  const ai_u32 w_ = AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_WIDTH);
 8004f50:	e9d3 e902 	ldrd	lr, r9, [r3, #8]
  msg = (aiBufferByteMsg *)bm->msg;
 8004f54:	6923      	ldr	r3, [r4, #16]
  return (ai_buffer_format)msgFmt;
 8004f56:	681a      	ldr	r2, [r3, #0]
  bm->err = EnumError_E_NONE;
 8004f58:	f8c4 800c 	str.w	r8, [r4, #12]
  if ((format == AI_BUFFER_FORMAT_NONE) || (format != bm->buffer->format)) {
 8004f5c:	2a40      	cmp	r2, #64	; 0x40
 8004f5e:	d003      	beq.n	8004f68 <aiPbBuffer_read_cb3+0x4e>
 8004f60:	f8d0 8000 	ldr.w	r8, [r0]
 8004f64:	4590      	cmp	r8, r2
 8004f66:	d012      	beq.n	8004f8e <aiPbBuffer_read_cb3+0x74>
    maxr = 0;
    bm->err = EnumError_E_INVALID_FORMAT;
 8004f68:	2302      	movs	r3, #2
      (msg->shape.width != w_) ||
      (msg->shape.n_batches != b_) ||
      (msg->shape.depth != d_) ||
      (msg->shape.extension != e_))
  {
    maxr = 0;
 8004f6a:	2500      	movs	r5, #0
    bm->err = EnumError_E_INVALID_SHAPE;
 8004f6c:	60e3      	str	r3, [r4, #12]
#endif
    bm->n_max = maxr;
  }

  /* Read data */
  uint8_t *pw = (uint8_t *)bm->buffer->data;
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	685f      	ldr	r7, [r3, #4]
  while (stream->bytes_left) {
 8004f72:	68b3      	ldr	r3, [r6, #8]
 8004f74:	bb5b      	cbnz	r3, 8004fce <aiPbBuffer_read_cb3+0xb4>
    }
    bm->n_ops++;
  }

  /* Check nb_op */
  if ((bm->err == EnumError_E_NONE) && (bm->n_ops != bm->n_max))
 8004f76:	68e3      	ldr	r3, [r4, #12]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d13b      	bne.n	8004ff4 <aiPbBuffer_read_cb3+0xda>
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d000      	beq.n	8004f88 <aiPbBuffer_read_cb3+0x6e>
    bm->err = EnumError_E_INVALID_SIZE;
 8004f86:	60e0      	str	r0, [r4, #12]

  return true;
}
 8004f88:	b002      	add	sp, #8
 8004f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if ((msg->shape.channels != c_) ||
 8004f8e:	691a      	ldr	r2, [r3, #16]
 8004f90:	4552      	cmp	r2, sl
 8004f92:	d10e      	bne.n	8004fb2 <aiPbBuffer_read_cb3+0x98>
 8004f94:	689a      	ldr	r2, [r3, #8]
 8004f96:	454a      	cmp	r2, r9
 8004f98:	d10b      	bne.n	8004fb2 <aiPbBuffer_read_cb3+0x98>
      (msg->shape.height != h_) ||
 8004f9a:	68da      	ldr	r2, [r3, #12]
 8004f9c:	4572      	cmp	r2, lr
 8004f9e:	d108      	bne.n	8004fb2 <aiPbBuffer_read_cb3+0x98>
      (msg->shape.width != w_) ||
 8004fa0:	685a      	ldr	r2, [r3, #4]
 8004fa2:	42ba      	cmp	r2, r7
 8004fa4:	d105      	bne.n	8004fb2 <aiPbBuffer_read_cb3+0x98>
      (msg->shape.n_batches != b_) ||
 8004fa6:	6a1a      	ldr	r2, [r3, #32]
 8004fa8:	428a      	cmp	r2, r1
 8004faa:	d102      	bne.n	8004fb2 <aiPbBuffer_read_cb3+0x98>
      (msg->shape.depth != d_) ||
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	4563      	cmp	r3, ip
 8004fb0:	d001      	beq.n	8004fb6 <aiPbBuffer_read_cb3+0x9c>
    bm->err = EnumError_E_INVALID_SHAPE;
 8004fb2:	2305      	movs	r3, #5
 8004fb4:	e7d9      	b.n	8004f6a <aiPbBuffer_read_cb3+0x50>
  if (maxr) {
 8004fb6:	2d00      	cmp	r5, #0
 8004fb8:	d0d9      	beq.n	8004f6e <aiPbBuffer_read_cb3+0x54>
    maxr = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer) * b_, format);
 8004fba:	2101      	movs	r1, #1
 8004fbc:	f003 fae0 	bl	8008580 <ai_buffer_get_size>
 8004fc0:	4641      	mov	r1, r8
 8004fc2:	4378      	muls	r0, r7
 8004fc4:	f003 fb10 	bl	80085e8 <ai_buffer_get_byte_size>
 8004fc8:	4605      	mov	r5, r0
    bm->n_max = maxr;
 8004fca:	6060      	str	r0, [r4, #4]
 8004fcc:	e7cf      	b.n	8004f6e <aiPbBuffer_read_cb3+0x54>
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 8004fce:	2201      	movs	r2, #1
 8004fd0:	4669      	mov	r1, sp
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f002 f9d2 	bl	800737c <pb_read>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d0d5      	beq.n	8004f88 <aiPbBuffer_read_cb3+0x6e>
    if (maxr > 0) {
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	dd05      	ble.n	8004fec <aiPbBuffer_read_cb3+0xd2>
      if (pw) {
 8004fe0:	b11f      	cbz	r7, 8004fea <aiPbBuffer_read_cb3+0xd0>
        *pw = *(uint8_t *)&number;
 8004fe2:	f89d 3000 	ldrb.w	r3, [sp]
 8004fe6:	f807 3b01 	strb.w	r3, [r7], #1
      maxr--;
 8004fea:	3d01      	subs	r5, #1
    bm->n_ops++;
 8004fec:	68a3      	ldr	r3, [r4, #8]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	60a3      	str	r3, [r4, #8]
 8004ff2:	e7be      	b.n	8004f72 <aiPbBuffer_read_cb3+0x58>
  return true;
 8004ff4:	2001      	movs	r0, #1
 8004ff6:	e7c7      	b.n	8004f88 <aiPbBuffer_read_cb3+0x6e>

08004ff8 <aiPbBuffer_write_cb3>:

static bool aiPbBuffer_write_cb3(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 8004ff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  struct aiPbMgrBuffer *bm = (struct aiPbMgrBuffer *)*arg;
 8004ffc:	6814      	ldr	r4, [r2, #0]
{
 8004ffe:	4605      	mov	r5, r0
 8005000:	460f      	mov	r7, r1
  size_t n_bytes;

  int maxw = bm->n_max;
 8005002:	6866      	ldr	r6, [r4, #4]
  ai_buffer_format format;

  if ((maxw == 0) || (!bm->buffer))
 8005004:	b326      	cbz	r6, 8005050 <aiPbBuffer_write_cb3+0x58>
 8005006:	6820      	ldr	r0, [r4, #0]
 8005008:	b310      	cbz	r0, 8005050 <aiPbBuffer_write_cb3+0x58>

  format = bm->buffer->format;
#if defined(TFLM_RUNTIME) && TFLM_RUNTIME == 1
  n_bytes = aiPbAiBufferSize(bm->buffer) * AI_BUFFER_FMT_GET_BITS(format) / 8;
#else
  const ai_u32 b_ = AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH);
 800500a:	6983      	ldr	r3, [r0, #24]
  n_bytes = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer) * b_, format);
 800500c:	2101      	movs	r1, #1
  format = bm->buffer->format;
 800500e:	f8d0 9000 	ldr.w	r9, [r0]
  const ai_u32 b_ = AI_BUFFER_SHAPE_ELEM(bm->buffer, AI_SHAPE_BATCH);
 8005012:	f8d3 8000 	ldr.w	r8, [r3]
  n_bytes = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer) * b_, format);
 8005016:	f003 fab3 	bl	8008580 <ai_buffer_get_size>
 800501a:	4649      	mov	r1, r9
 800501c:	fb08 f000 	mul.w	r0, r8, r0
 8005020:	f003 fae2 	bl	80085e8 <ai_buffer_get_byte_size>
#endif

  /* Write data */
  pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 8005024:	6823      	ldr	r3, [r4, #0]
  n_bytes = AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(bm->buffer) * b_, format);
 8005026:	9001      	str	r0, [sp, #4]

  if (!pb_encode_tag_for_field(stream, field))
 8005028:	4639      	mov	r1, r7
 800502a:	4628      	mov	r0, r5
  pb_byte_t *pr = (pb_byte_t *)bm->buffer->data;
 800502c:	f8d3 8004 	ldr.w	r8, [r3, #4]
  if (!pb_encode_tag_for_field(stream, field))
 8005030:	f002 ffba 	bl	8007fa8 <pb_encode_tag_for_field>
 8005034:	9a01      	ldr	r2, [sp, #4]
 8005036:	b918      	cbnz	r0, 8005040 <aiPbBuffer_write_cb3+0x48>
    return false;
 8005038:	2000      	movs	r0, #0
    return false;

  bm->n_ops = maxw;

  return true;
}
 800503a:	b003      	add	sp, #12
 800503c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!pb_encode_string(stream, pr, n_bytes))
 8005040:	4641      	mov	r1, r8
 8005042:	4628      	mov	r0, r5
 8005044:	f003 f90a 	bl	800825c <pb_encode_string>
 8005048:	2800      	cmp	r0, #0
 800504a:	d0f5      	beq.n	8005038 <aiPbBuffer_write_cb3+0x40>
  bm->n_ops = maxw;
 800504c:	60a6      	str	r6, [r4, #8]
  return true;
 800504e:	e7f4      	b.n	800503a <aiPbBuffer_write_cb3+0x42>
    return true;
 8005050:	2001      	movs	r0, #1
 8005052:	e7f2      	b.n	800503a <aiPbBuffer_write_cb3+0x42>

08005054 <aiPbMgrSetMetaInfo.constprop.0>:
}

static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
    aiBufferShapeMsg *shape)
{
  shape->scale = 0.0f;
 8005054:	2300      	movs	r3, #0
  shape->zeropoint = 0;
 8005056:	2200      	movs	r2, #0
static void aiPbMgrSetMetaInfo(const ai_buffer_meta_info *meta_info, const int idx,
 8005058:	b510      	push	{r4, lr}
  shape->scale = 0.0f;
 800505a:	614b      	str	r3, [r1, #20]
  shape->zeropoint = 0;
 800505c:	618a      	str	r2, [r1, #24]
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 800505e:	b1a0      	cbz	r0, 800508a <aiPbMgrSetMetaInfo.constprop.0+0x36>
 8005060:	6802      	ldr	r2, [r0, #0]
 8005062:	07d2      	lsls	r2, r2, #31
 8005064:	d511      	bpl.n	800508a <aiPbMgrSetMetaInfo.constprop.0+0x36>
 8005066:	6840      	ldr	r0, [r0, #4]
 8005068:	b178      	cbz	r0, 800508a <aiPbMgrSetMetaInfo.constprop.0+0x36>
    shape->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, idx);
 800506a:	6842      	ldr	r2, [r0, #4]
 800506c:	b11a      	cbz	r2, 8005076 <aiPbMgrSetMetaInfo.constprop.0+0x22>
 800506e:	8844      	ldrh	r4, [r0, #2]
 8005070:	b10c      	cbz	r4, 8005076 <aiPbMgrSetMetaInfo.constprop.0+0x22>
 8005072:	6813      	ldr	r3, [r2, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	614b      	str	r3, [r1, #20]
    shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 8005078:	8803      	ldrh	r3, [r0, #0]
 800507a:	079b      	lsls	r3, r3, #30
 800507c:	d506      	bpl.n	800508c <aiPbMgrSetMetaInfo.constprop.0+0x38>
 800507e:	b16a      	cbz	r2, 800509c <aiPbMgrSetMetaInfo.constprop.0+0x48>
 8005080:	8843      	ldrh	r3, [r0, #2]
 8005082:	b10b      	cbz	r3, 8005088 <aiPbMgrSetMetaInfo.constprop.0+0x34>
 8005084:	6853      	ldr	r3, [r2, #4]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	618b      	str	r3, [r1, #24]
  }
}
 800508a:	bd10      	pop	{r4, pc}
    shape->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, idx);
 800508c:	b132      	cbz	r2, 800509c <aiPbMgrSetMetaInfo.constprop.0+0x48>
 800508e:	8843      	ldrh	r3, [r0, #2]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f9      	beq.n	8005088 <aiPbMgrSetMetaInfo.constprop.0+0x34>
 8005094:	6853      	ldr	r3, [r2, #4]
 8005096:	f993 3000 	ldrsb.w	r3, [r3]
 800509a:	e7f5      	b.n	8005088 <aiPbMgrSetMetaInfo.constprop.0+0x34>
 800509c:	4613      	mov	r3, r2
 800509e:	e7f3      	b.n	8005088 <aiPbMgrSetMetaInfo.constprop.0+0x34>

080050a0 <init_aibuffer_msg>:

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}

static void init_aibuffer_msg(const ai_buffer *aibuffer, aiBufferShapeMsg *msg)
{
 80050a0:	b570      	push	{r4, r5, r6, lr}
  if ((!aibuffer) || (!msg))
 80050a2:	b148      	cbz	r0, 80050b8 <init_aibuffer_msg+0x18>
  } else {
    msg->scale = 0.0f;
    msg->zeropoint = 0;
  }
#else
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(aibuffer);
 80050a4:	6886      	ldr	r6, [r0, #8]

  ai_init_buffer_shape_msg(aibuffer, msg);
 80050a6:	f7ff ff14 	bl	8004ed2 <ai_init_buffer_shape_msg>

  msg->addr = (uint32_t)aibuffer->data;
 80050aa:	6843      	ldr	r3, [r0, #4]
  aiPbMgrSetMetaInfo(meta_info, 0, msg);
 80050ac:	4630      	mov	r0, r6
  msg->addr = (uint32_t)aibuffer->data;
 80050ae:	61cb      	str	r3, [r1, #28]

#endif
}
 80050b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  aiPbMgrSetMetaInfo(meta_info, 0, msg);
 80050b4:	f7ff bfce 	b.w	8005054 <aiPbMgrSetMetaInfo.constprop.0>
}
 80050b8:	bd70      	pop	{r4, r5, r6, pc}
	...

080050bc <nn_shape_w_cb>:

static bool nn_shape_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    const ai_buffer *aibuffer, int maxw)
{
 80050bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050c0:	261c      	movs	r6, #28
 80050c2:	b08a      	sub	sp, #40	; 0x28
 80050c4:	4605      	mov	r5, r0
 80050c6:	460f      	mov	r7, r1
 80050c8:	4614      	mov	r4, r2
 80050ca:	fb06 2603 	mla	r6, r6, r3, r2
    if (!pb_encode_tag_for_field(stream, field))
      return false;

    init_aibuffer_msg(&aibuffer[i], &msg);

    if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 80050ce:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8005108 <nn_shape_w_cb+0x4c>
  for (int i = 0; i < maxw; i++) {
 80050d2:	42b4      	cmp	r4, r6
 80050d4:	d101      	bne.n	80050da <nn_shape_w_cb+0x1e>
      return false;
  }
  return true;
 80050d6:	2001      	movs	r0, #1
 80050d8:	e005      	b.n	80050e6 <nn_shape_w_cb+0x2a>
    if (!pb_encode_tag_for_field(stream, field))
 80050da:	4639      	mov	r1, r7
 80050dc:	4628      	mov	r0, r5
 80050de:	f002 ff63 	bl	8007fa8 <pb_encode_tag_for_field>
 80050e2:	b918      	cbnz	r0, 80050ec <nn_shape_w_cb+0x30>
      return false;
 80050e4:	2000      	movs	r0, #0
}
 80050e6:	b00a      	add	sp, #40	; 0x28
 80050e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    init_aibuffer_msg(&aibuffer[i], &msg);
 80050ec:	4620      	mov	r0, r4
 80050ee:	4669      	mov	r1, sp
 80050f0:	f7ff ffd6 	bl	80050a0 <init_aibuffer_msg>
    if (!pb_encode_submessage(stream, aiBufferShapeMsg_fields, &msg))
 80050f4:	466a      	mov	r2, sp
 80050f6:	4641      	mov	r1, r8
 80050f8:	4628      	mov	r0, r5
 80050fa:	341c      	adds	r4, #28
 80050fc:	f003 f8fe 	bl	80082fc <pb_encode_submessage>
 8005100:	2800      	cmp	r0, #0
 8005102:	d1e6      	bne.n	80050d2 <nn_shape_w_cb+0x16>
 8005104:	e7ee      	b.n	80050e4 <nn_shape_w_cb+0x28>
 8005106:	bf00      	nop
 8005108:	0806f3ac 	.word	0x0806f3ac

0800510c <nn_outputs_w_cb>:
}

static bool nn_outputs_w_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
  ai_network_report *report = (ai_network_report *)*arg;
 800510c:	6812      	ldr	r2, [r2, #0]

  if (!report)
 800510e:	b11a      	cbz	r2, 8005118 <nn_outputs_w_cb+0xc>
    return true;

  return nn_shape_w_cb(stream, field, &report->outputs[0], report->n_outputs);
 8005110:	8e53      	ldrh	r3, [r2, #50]	; 0x32
 8005112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005114:	f7ff bfd2 	b.w	80050bc <nn_shape_w_cb>
}
 8005118:	2001      	movs	r0, #1
 800511a:	4770      	bx	lr

0800511c <nn_inputs_w_cb>:
  ai_network_report *report = (ai_network_report *)*arg;
 800511c:	6812      	ldr	r2, [r2, #0]
  if (!report)
 800511e:	b11a      	cbz	r2, 8005128 <nn_inputs_w_cb+0xc>
  return nn_shape_w_cb(stream, field, &report->inputs[0], report->n_inputs);
 8005120:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8005122:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005124:	f7ff bfca 	b.w	80050bc <nn_shape_w_cb>
}
 8005128:	2001      	movs	r0, #1
 800512a:	4770      	bx	lr

0800512c <aiPbMgrInit>:
{
 800512c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800512e:	b08b      	sub	sp, #44	; 0x2c
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8005130:	4c1a      	ldr	r4, [pc, #104]	; (800519c <aiPbMgrInit+0x70>)
 8005132:	f44f 7224 	mov.w	r2, #656	; 0x290
 8005136:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 8005138:	ad06      	add	r5, sp, #24
{
 800513a:	4607      	mov	r7, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 800513c:	4620      	mov	r0, r4
  pbContextMgr.output = pb_io_ostream(0);
 800513e:	f104 0610 	add.w	r6, r4, #16
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 8005142:	f007 fff7 	bl	800d134 <memset>
  pb_io_stream_init();
 8005146:	f7ff febf 	bl	8004ec8 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 800514a:	4628      	mov	r0, r5
 800514c:	2100      	movs	r1, #0
 800514e:	f7ff feaf 	bl	8004eb0 <pb_io_istream>
 8005152:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 8005156:	466d      	mov	r5, sp
  pbContextMgr.input = pb_io_istream(0);
 8005158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 800515c:	2100      	movs	r1, #0
 800515e:	4668      	mov	r0, sp
 8005160:	f7ff fe98 	bl	8004e94 <pb_io_ostream>
 8005164:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005166:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	6033      	str	r3, [r6, #0]
  pbContextMgr.n_func = 0;
 800516c:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 800516e:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (funcs) {
 8005172:	b97f      	cbnz	r7, 8005194 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 8005174:	2301      	movs	r3, #1
 8005176:	f884 328c 	strb.w	r3, [r4, #652]	; 0x28c
}
 800517a:	b00b      	add	sp, #44	; 0x2c
 800517c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 800517e:	320c      	adds	r2, #12
 8005180:	462b      	mov	r3, r5
 8005182:	2101      	movs	r1, #1
    while (cfunc->process) {
 8005184:	6850      	ldr	r0, [r2, #4]
 8005186:	1c5d      	adds	r5, r3, #1
 8005188:	2800      	cmp	r0, #0
 800518a:	d1f8      	bne.n	800517e <aiPbMgrInit+0x52>
 800518c:	b101      	cbz	r1, 8005190 <aiPbMgrInit+0x64>
 800518e:	62a3      	str	r3, [r4, #40]	; 0x28
    pbContextMgr.funcs = funcs;
 8005190:	6267      	str	r7, [r4, #36]	; 0x24
 8005192:	e7ef      	b.n	8005174 <aiPbMgrInit+0x48>
 8005194:	463a      	mov	r2, r7
 8005196:	4619      	mov	r1, r3
 8005198:	e7f4      	b.n	8005184 <aiPbMgrInit+0x58>
 800519a:	bf00      	nop
 800519c:	2000252c 	.word	0x2000252c

080051a0 <aiPbMgrSendResp>:
{
 80051a0:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 80051a2:	6803      	ldr	r3, [r0, #0]
  resp->state = state;
 80051a4:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 80051a6:	460a      	mov	r2, r1
  resp->reqid = req->reqid;
 80051a8:	600b      	str	r3, [r1, #0]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 80051aa:	4804      	ldr	r0, [pc, #16]	; (80051bc <aiPbMgrSendResp+0x1c>)
 80051ac:	4904      	ldr	r1, [pc, #16]	; (80051c0 <aiPbMgrSendResp+0x20>)
 80051ae:	f003 f821 	bl	80081f4 <pb_encode>
}
 80051b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 80051b6:	f7ff be51 	b.w	8004e5c <pb_io_flush_ostream>
 80051ba:	bf00      	nop
 80051bc:	2000253c 	.word	0x2000253c
 80051c0:	0806f6d4 	.word	0x0806f6d4

080051c4 <aiPbMgrWaitAndProcess>:
{
 80051c4:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 80051c6:	4c1d      	ldr	r4, [pc, #116]	; (800523c <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 80051c8:	f7ff fe58 	bl	8004e7c <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 80051cc:	491c      	ldr	r1, [pc, #112]	; (8005240 <aiPbMgrWaitAndProcess+0x7c>)
 80051ce:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 80051d2:	4620      	mov	r0, r4
 80051d4:	f002 fd14 	bl	8007c00 <pb_decode_delimited>
 80051d8:	b348      	cbz	r0, 800522e <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 80051da:	f7ff fe4f 	bl	8004e7c <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 80051de:	2302      	movs	r3, #2
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 80051e0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80051e2:	2500      	movs	r5, #0
    pbContextMgr.state = PB_MGR_ON_GOING;
 80051e4:	f884 328c 	strb.w	r3, [r4, #652]	; 0x28c
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 80051e8:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 80051ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 80051ee:	42a9      	cmp	r1, r5
 80051f0:	d00d      	beq.n	800520e <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 80051f2:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 80051f4:	f813 6b0c 	ldrb.w	r6, [r3], #12
 80051f8:	4286      	cmp	r6, r0
 80051fa:	d11c      	bne.n	8005236 <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 80051fc:	4911      	ldr	r1, [pc, #68]	; (8005244 <aiPbMgrWaitAndProcess+0x80>)
 80051fe:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 8005202:	f1a1 0050 	sub.w	r0, r1, #80	; 0x50
 8005206:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 8005208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800520a:	42ab      	cmp	r3, r5
 800520c:	d10c      	bne.n	8005228 <aiPbMgrWaitAndProcess+0x64>
  aiPbMgrSendResp(req, resp, state);
 800520e:	490d      	ldr	r1, [pc, #52]	; (8005244 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 8005210:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 8005212:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 8005214:	f1a1 0050 	sub.w	r0, r1, #80	; 0x50
  resp->payload.ack.param = param;
 8005218:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  resp->which_payload = respMsg_ack_tag;
 800521c:	f8a4 3082 	strh.w	r3, [r4, #130]	; 0x82
  resp->payload.ack.error = error;
 8005220:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
  aiPbMgrSendResp(req, resp, state);
 8005224:	f7ff ffbc 	bl	80051a0 <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 8005228:	2301      	movs	r3, #1
 800522a:	f884 328c 	strb.w	r3, [r4, #652]	; 0x28c
  pb_io_flush_istream();
 800522e:	f7ff fe25 	bl	8004e7c <pb_io_flush_istream>
}
 8005232:	2000      	movs	r0, #0
 8005234:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8005236:	3501      	adds	r5, #1
 8005238:	e7d9      	b.n	80051ee <aiPbMgrWaitAndProcess+0x2a>
 800523a:	bf00      	nop
 800523c:	2000252c 	.word	0x2000252c
 8005240:	0806f67a 	.word	0x0806f67a
 8005244:	200025a8 	.word	0x200025a8

08005248 <aiPbMgrSendAck>:
{
 8005248:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 800524a:	260c      	movs	r6, #12
{
 800524c:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->payload.ack.param = param;
 8005250:	608b      	str	r3, [r1, #8]
  resp->which_payload = respMsg_ack_tag;
 8005252:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 8005254:	730d      	strb	r5, [r1, #12]
}
 8005256:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 8005258:	f7ff bfa2 	b.w	80051a0 <aiPbMgrSendResp>

0800525c <aiPbMgrWaitAck>:
{
 800525c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  ackMsg ack = ackMsg_init_default;
 800525e:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8005260:	aa02      	add	r2, sp, #8
 8005262:	4907      	ldr	r1, [pc, #28]	; (8005280 <aiPbMgrWaitAck+0x24>)
 8005264:	4807      	ldr	r0, [pc, #28]	; (8005284 <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 8005266:	9302      	str	r3, [sp, #8]
 8005268:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 800526c:	f002 fcc8 	bl	8007c00 <pb_decode_delimited>
 8005270:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 8005272:	f7ff fe03 	bl	8004e7c <pb_io_flush_istream>
}
 8005276:	9801      	ldr	r0, [sp, #4]
 8005278:	b005      	add	sp, #20
 800527a:	f85d fb04 	ldr.w	pc, [sp], #4
 800527e:	bf00      	nop
 8005280:	0806f340 	.word	0x0806f340
 8005284:	2000252c 	.word	0x2000252c

08005288 <aiPbAiBufferSize>:
  if (!buffer)
 8005288:	b100      	cbz	r0, 800528c <aiPbAiBufferSize+0x4>
    return buffer->size;
 800528a:	6900      	ldr	r0, [r0, #16]
}
 800528c:	4770      	bx	lr
	...

08005290 <aiPbMgrReceiveAiBuffer3>:
{
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	4615      	mov	r5, r2
 8005294:	b092      	sub	sp, #72	; 0x48
  hdlb.n_ops = 0;
 8005296:	2200      	movs	r2, #0
{
 8005298:	4606      	mov	r6, r0
 800529a:	460c      	mov	r4, r1
  hdlb.buffer = buffer;
 800529c:	9301      	str	r3, [sp, #4]
  hdlb.n_ops = 0;
 800529e:	9203      	str	r2, [sp, #12]
  hdlb.err = EnumError_E_NONE;
 80052a0:	9204      	str	r2, [sp, #16]
  if (!buffer)
 80052a2:	b103      	cbz	r3, 80052a6 <aiPbMgrReceiveAiBuffer3+0x16>
    return buffer->size;
 80052a4:	691b      	ldr	r3, [r3, #16]
  hdlb.n_max = aiPbAiBufferSize(buffer);
 80052a6:	9302      	str	r3, [sp, #8]
  hdlb.msg = &msg;
 80052a8:	aa06      	add	r2, sp, #24
  msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <aiPbMgrReceiveAiBuffer3+0x6c>)
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 80052ac:	4914      	ldr	r1, [pc, #80]	; (8005300 <aiPbMgrReceiveAiBuffer3+0x70>)
  msg.datas.funcs.decode = &aiPbBuffer_read_cb3;
 80052ae:	9310      	str	r3, [sp, #64]	; 0x40
  msg.datas.arg = &hdlb;
 80052b0:	ab01      	add	r3, sp, #4
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 80052b2:	4814      	ldr	r0, [pc, #80]	; (8005304 <aiPbMgrReceiveAiBuffer3+0x74>)
  hdlb.msg = &msg;
 80052b4:	9205      	str	r2, [sp, #20]
  msg.datas.arg = &hdlb;
 80052b6:	9311      	str	r3, [sp, #68]	; 0x44
  pb_decode_delimited(&pbContextMgr.input, aiBufferByteMsg_fields, &msg);
 80052b8:	f002 fca2 	bl	8007c00 <pb_decode_delimited>
  pb_io_flush_istream();
 80052bc:	f7ff fdde 	bl	8004e7c <pb_io_flush_istream>
  if (hdlb.err) {
 80052c0:	220c      	movs	r2, #12
 80052c2:	9b04      	ldr	r3, [sp, #16]
  resp->which_payload = respMsg_ack_tag;
 80052c4:	80e2      	strh	r2, [r4, #6]
  if (hdlb.err) {
 80052c6:	b14b      	cbz	r3, 80052dc <aiPbMgrReceiveAiBuffer3+0x4c>
  aiPbMgrSendResp(req, resp, state);
 80052c8:	4630      	mov	r0, r6
 80052ca:	2204      	movs	r2, #4
 80052cc:	4621      	mov	r1, r4
  resp->payload.ack.param = param;
 80052ce:	60a3      	str	r3, [r4, #8]
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR, hdlb.err,
 80052d0:	7323      	strb	r3, [r4, #12]
  aiPbMgrSendResp(req, resp, state);
 80052d2:	f7ff ff65 	bl	80051a0 <aiPbMgrSendResp>
    res = false;
 80052d6:	2000      	movs	r0, #0
}
 80052d8:	b012      	add	sp, #72	; 0x48
 80052da:	bd70      	pop	{r4, r5, r6, pc}
  resp->payload.ack.param = param;
 80052dc:	9a03      	ldr	r2, [sp, #12]
  aiPbMgrSendResp(req, resp, state);
 80052de:	4621      	mov	r1, r4
 80052e0:	4630      	mov	r0, r6
  resp->payload.ack.error = error;
 80052e2:	7323      	strb	r3, [r4, #12]
  resp->payload.ack.param = param;
 80052e4:	60a2      	str	r2, [r4, #8]
  aiPbMgrSendResp(req, resp, state);
 80052e6:	462a      	mov	r2, r5
    if ((state == EnumState_S_WAITING) ||
 80052e8:	3d01      	subs	r5, #1
  aiPbMgrSendResp(req, resp, state);
 80052ea:	f7ff ff59 	bl	80051a0 <aiPbMgrSendResp>
    if ((state == EnumState_S_WAITING) ||
 80052ee:	2d01      	cmp	r5, #1
 80052f0:	d801      	bhi.n	80052f6 <aiPbMgrReceiveAiBuffer3+0x66>
      aiPbMgrWaitAck();
 80052f2:	f7ff ffb3 	bl	800525c <aiPbMgrWaitAck>
  bool res = true;
 80052f6:	2001      	movs	r0, #1
 80052f8:	e7ee      	b.n	80052d8 <aiPbMgrReceiveAiBuffer3+0x48>
 80052fa:	bf00      	nop
 80052fc:	08004f1b 	.word	0x08004f1b
 8005300:	0806f36d 	.word	0x0806f36d
 8005304:	2000252c 	.word	0x2000252c

08005308 <aiPbMgrSendAiBuffer4>:
{
 8005308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800530a:	b087      	sub	sp, #28
 800530c:	4606      	mov	r6, r0
 800530e:	460c      	mov	r4, r1
    hdlb.n_max  = 0;
 8005310:	2b00      	cmp	r3, #0
{
 8005312:	980d      	ldr	r0, [sp, #52]	; 0x34
  hdlb.n_ops = 0;
 8005314:	f04f 0100 	mov.w	r1, #0
{
 8005318:	4615      	mov	r5, r2
  type &= (~PB_BUFFER_TYPE_SEND_WITHOUT_DATA);
 800531a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  hdlb.n_max = aiPbAiBufferSize(buffer);
 800531e:	6902      	ldr	r2, [r0, #16]
  hdlb.n_ops = 0;
 8005320:	9103      	str	r1, [sp, #12]
  hdlb.err = EnumError_E_NONE;
 8005322:	9104      	str	r1, [sp, #16]
  hdlb.msg = NULL;
 8005324:	9105      	str	r1, [sp, #20]
    hdlb.n_max  = 0;
 8005326:	bfa8      	it	ge
 8005328:	4611      	movge	r1, r2
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buffer);
 800532a:	6887      	ldr	r7, [r0, #8]
    hdlb.n_max  = 0;
 800532c:	9102      	str	r1, [sp, #8]
  resp->which_payload = respMsg_node_tag;
 800532e:	210e      	movs	r1, #14
  resp->payload.node.type = type;
 8005330:	60a3      	str	r3, [r4, #8]
  resp->payload.node.id = id;
 8005332:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  resp->which_payload = respMsg_node_tag;
 8005334:	80e1      	strh	r1, [r4, #6]
  ai_init_buffer_shape_msg(buffer, &resp->payload.node.buffer.shape);
 8005336:	f104 0114 	add.w	r1, r4, #20
  resp->payload.node.id = id;
 800533a:	60e3      	str	r3, [r4, #12]
  resp->payload.node.duration = dur_ms;
 800533c:	ed84 0a04 	vstr	s0, [r4, #16]
  hdlb.buffer = (ai_buffer *)buffer;
 8005340:	9001      	str	r0, [sp, #4]
  ai_init_buffer_shape_msg(buffer, &resp->payload.node.buffer.shape);
 8005342:	f7ff fdc6 	bl	8004ed2 <ai_init_buffer_shape_msg>
  if (meta_info && scale == 0.0f)
 8005346:	b1b7      	cbz	r7, 8005376 <aiPbMgrSendAiBuffer4+0x6e>
 8005348:	eef5 0a40 	vcmp.f32	s1, #0.0
 800534c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005350:	d111      	bne.n	8005376 <aiPbMgrSendAiBuffer4+0x6e>
    aiPbMgrSetMetaInfo(meta_info, 0, &resp->payload.node.buffer.shape);
 8005352:	4638      	mov	r0, r7
 8005354:	f7ff fe7e 	bl	8005054 <aiPbMgrSetMetaInfo.constprop.0>
  resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <aiPbMgrSendAiBuffer4+0x7c>)
  aiPbMgrSendResp(req, resp, state);
 800535a:	462a      	mov	r2, r5
 800535c:	4621      	mov	r1, r4
 800535e:	4630      	mov	r0, r6
  resp->payload.node.buffer.datas.funcs.encode = &aiPbBuffer_write_cb3;
 8005360:	63e3      	str	r3, [r4, #60]	; 0x3c
  resp->payload.node.buffer.datas.arg = &hdlb;
 8005362:	ab01      	add	r3, sp, #4
 8005364:	6423      	str	r3, [r4, #64]	; 0x40
  aiPbMgrSendResp(req, resp, state);
 8005366:	f7ff ff1b 	bl	80051a0 <aiPbMgrSendResp>
  if (state == EnumState_S_PROCESSING)
 800536a:	2d02      	cmp	r5, #2
 800536c:	d108      	bne.n	8005380 <aiPbMgrSendAiBuffer4+0x78>
    return aiPbMgrWaitAck();
 800536e:	f7ff ff75 	bl	800525c <aiPbMgrWaitAck>
}
 8005372:	b007      	add	sp, #28
 8005374:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.node.buffer.shape.zeropoint = zero_point;
 8005376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    resp->payload.node.buffer.shape.scale = scale;
 8005378:	edc4 0a0a 	vstr	s1, [r4, #40]	; 0x28
    resp->payload.node.buffer.shape.zeropoint = zero_point;
 800537c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800537e:	e7eb      	b.n	8005358 <aiPbMgrSendAiBuffer4+0x50>
    return true;
 8005380:	2001      	movs	r0, #1
 8005382:	e7f6      	b.n	8005372 <aiPbMgrSendAiBuffer4+0x6a>
 8005384:	08004ff9 	.word	0x08004ff9

08005388 <aiPbCmdSync>:
{
 8005388:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 800538a:	240a      	movs	r4, #10
 800538c:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 800538e:	f240 2403 	movw	r4, #515	; 0x203
 8005392:	608c      	str	r4, [r1, #8]
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8005394:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = (uint32_t)param >> 16;
 8005396:	0c12      	lsrs	r2, r2, #16
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8005398:	f044 0402 	orr.w	r4, r4, #2
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 800539c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 80053a0:	60cc      	str	r4, [r1, #12]
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 80053a2:	610a      	str	r2, [r1, #16]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80053a4:	2200      	movs	r2, #0
}
 80053a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80053aa:	f7ff bef9 	b.w	80051a0 <aiPbMgrSendResp>

080053ae <aiPbCmdSysInfo>:
{
 80053ae:	b538      	push	{r3, r4, r5, lr}
  resp->which_payload = respMsg_sinfo_tag;
 80053b0:	230b      	movs	r3, #11
{
 80053b2:	460c      	mov	r4, r1
 80053b4:	4605      	mov	r5, r0
  resp->which_payload = respMsg_sinfo_tag;
 80053b6:	80cb      	strh	r3, [r1, #6]
  resp->payload.sinfo.devid = HAL_GetDEVID();
 80053b8:	f7fc faf8 	bl	80019ac <HAL_GetDEVID>
 80053bc:	60a0      	str	r0, [r4, #8]
  resp->payload.sinfo.sclock = HAL_RCC_GetSysClockFreq();
 80053be:	f7fd ff5d 	bl	800327c <HAL_RCC_GetSysClockFreq>
 80053c2:	60e0      	str	r0, [r4, #12]
  resp->payload.sinfo.hclock = HAL_RCC_GetHCLKFreq();
 80053c4:	f7fe f828 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 80053c8:	6120      	str	r0, [r4, #16]
  resp->payload.sinfo.cache = getFlashCacheConf();
 80053ca:	f000 fbe7 	bl	8005b9c <getFlashCacheConf>
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80053ce:	4621      	mov	r1, r4
  resp->payload.sinfo.cache = getFlashCacheConf();
 80053d0:	6160      	str	r0, [r4, #20]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80053d2:	2200      	movs	r2, #0
 80053d4:	4628      	mov	r0, r5
}
 80053d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80053da:	f7ff bee1 	b.w	80051a0 <aiPbMgrSendResp>
	...

080053e0 <aiPbStrCopy>:

void aiPbStrCopy(const char *src, char *dst, uint32_t max)
{
 80053e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80053e2:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 80053e4:	4a11      	ldr	r2, [pc, #68]	; (800542c <aiPbStrCopy+0x4c>)
{
 80053e6:	4605      	mov	r5, r0
 80053e8:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 80053ea:	6810      	ldr	r0, [r2, #0]
 80053ec:	ab01      	add	r3, sp, #4
 80053ee:	6851      	ldr	r1, [r2, #4]
 80053f0:	8912      	ldrh	r2, [r2, #8]
 80053f2:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 80053f4:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 80053f6:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 80053f8:	f7fa ff22 	bl	8000240 <strlen>

  if (l > max)
 80053fc:	42b0      	cmp	r0, r6
    l = max-1;
 80053fe:	bf88      	it	hi
 8005400:	f106 30ff 	addhi.w	r0, r6, #4294967295	; 0xffffffff

  if (!dst)
 8005404:	b184      	cbz	r4, 8005428 <aiPbStrCopy+0x48>
    return;

  if (src && l)
 8005406:	b138      	cbz	r0, 8005418 <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 8005408:	1c42      	adds	r2, r0, #1
 800540a:	4629      	mov	r1, r5
 800540c:	4620      	mov	r0, r4
  else
    memcpy(dst, undef, strlen(undef)+1);
}
 800540e:	b004      	add	sp, #16
 8005410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 8005414:	f007 be80 	b.w	800d118 <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 8005418:	a801      	add	r0, sp, #4
 800541a:	f7fa ff11 	bl	8000240 <strlen>
 800541e:	a901      	add	r1, sp, #4
 8005420:	1c42      	adds	r2, r0, #1
 8005422:	4620      	mov	r0, r4
 8005424:	f007 fe78 	bl	800d118 <memcpy>
}
 8005428:	b004      	add	sp, #16
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	0800fc00 	.word	0x0800fc00

08005430 <aiPbVersionToUint32>:

uint32_t aiPbVersionToUint32(const ai_platform_version *ver)
{
  if (!ver)
 8005430:	b108      	cbz	r0, 8005436 <aiPbVersionToUint32+0x6>
    return 0;

  return ver->major << 24 | ver->minor << 16
 8005432:	6800      	ldr	r0, [r0, #0]
 8005434:	ba00      	rev	r0, r0
      | ver->micro << 8 | ver->reserved;
}
 8005436:	4770      	bx	lr

08005438 <aiPbMgrSendNNInfo>:

void aiPbMgrSendNNInfo(const reqMsg *req, respMsg *resp,
    EnumState state, const ai_network_report *nn)
{
 8005438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543c:	461d      	mov	r5, r3
  resp->which_payload = respMsg_ninfo_tag;
 800543e:	2314      	movs	r3, #20
{
 8005440:	460c      	mov	r4, r1
 8005442:	b096      	sub	sp, #88	; 0x58
  resp->which_payload = respMsg_ninfo_tag;
 8005444:	80cb      	strh	r3, [r1, #6]
{
 8005446:	4607      	mov	r7, r0

  aiPbStrCopy(nn->model_name,
 8005448:	3108      	adds	r1, #8
 800544a:	6828      	ldr	r0, [r5, #0]
{
 800544c:	4690      	mov	r8, r2
  aiPbStrCopy(nn->model_name,
 800544e:	2240      	movs	r2, #64	; 0x40
 8005450:	f7ff ffc6 	bl	80053e0 <aiPbStrCopy>
      &resp->payload.ninfo.model_name[0],
      sizeof(resp->payload.ninfo.model_name));
  aiPbStrCopy(nn->model_signature,
 8005454:	2240      	movs	r2, #64	; 0x40
 8005456:	f104 0148 	add.w	r1, r4, #72	; 0x48
 800545a:	6868      	ldr	r0, [r5, #4]
 800545c:	f7ff ffc0 	bl	80053e0 <aiPbStrCopy>
      &resp->payload.ninfo.model_signature[0],
      sizeof(resp->payload.ninfo.model_signature));
  aiPbStrCopy(nn->model_datetime,
 8005460:	2240      	movs	r2, #64	; 0x40
 8005462:	f104 0188 	add.w	r1, r4, #136	; 0x88
 8005466:	68a8      	ldr	r0, [r5, #8]
 8005468:	f7ff ffba 	bl	80053e0 <aiPbStrCopy>
      &resp->payload.ninfo.model_datetime[0],
      sizeof(resp->payload.ninfo.model_datetime));
  aiPbStrCopy(nn->compile_datetime,
 800546c:	2240      	movs	r2, #64	; 0x40
 800546e:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 8005472:	68e8      	ldr	r0, [r5, #12]
 8005474:	f7ff ffb4 	bl	80053e0 <aiPbStrCopy>
      &resp->payload.ninfo.compile_datetime[0],
      sizeof(resp->payload.ninfo.compile_datetime));
  aiPbStrCopy(nn->runtime_revision,
 8005478:	2240      	movs	r2, #64	; 0x40
 800547a:	f504 7184 	add.w	r1, r4, #264	; 0x108
 800547e:	6928      	ldr	r0, [r5, #16]
 8005480:	f7ff ffae 	bl	80053e0 <aiPbStrCopy>
      &resp->payload.ninfo.runtime_revision[0],
      sizeof(resp->payload.ninfo.runtime_revision));
  aiPbStrCopy(nn->tool_revision,
 8005484:	f504 71a6 	add.w	r1, r4, #332	; 0x14c
 8005488:	69a8      	ldr	r0, [r5, #24]
 800548a:	2240      	movs	r2, #64	; 0x40
 800548c:	f7ff ffa8 	bl	80053e0 <aiPbStrCopy>
      &resp->payload.ninfo.tool_revision[0],
      sizeof(resp->payload.ninfo.tool_revision));

  resp->payload.ninfo.n_inputs = nn->n_inputs;
 8005490:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
  resp->payload.ninfo.n_nodes = nn->n_nodes;
  resp->payload.ninfo.n_macc = nn->n_macc;

  resp->payload.ninfo.signature = nn->signature;
  resp->payload.ninfo.api_version =
      aiPbVersionToUint32(&nn->api_version);
 8005492:	f105 0024 	add.w	r0, r5, #36	; 0x24
  resp->payload.ninfo.n_inputs = nn->n_inputs;
 8005496:	f8c4 31a0 	str.w	r3, [r4, #416]	; 0x1a0
  resp->payload.ninfo.n_outputs = nn->n_outputs;
 800549a:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 800549c:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
  resp->payload.ninfo.n_nodes = nn->n_nodes;
 80054a0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80054a2:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
  resp->payload.ninfo.n_macc = nn->n_macc;
 80054a6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80054a8:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
  resp->payload.ninfo.signature = nn->signature;
 80054ac:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80054ae:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
      aiPbVersionToUint32(&nn->api_version);
 80054b2:	f7ff ffbd 	bl	8005430 <aiPbVersionToUint32>
  resp->payload.ninfo.api_version =
 80054b6:	f8c4 0194 	str.w	r0, [r4, #404]	; 0x194
  resp->payload.ninfo.interface_api_version =
      aiPbVersionToUint32(&nn->interface_api_version);
 80054ba:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80054be:	f7ff ffb7 	bl	8005430 <aiPbVersionToUint32>
  resp->payload.ninfo.interface_api_version =
 80054c2:	f8c4 0198 	str.w	r0, [r4, #408]	; 0x198
  resp->payload.ninfo.runtime_version =
      aiPbVersionToUint32(&nn->runtime_version);
 80054c6:	f105 0014 	add.w	r0, r5, #20
 80054ca:	f7ff ffb1 	bl	8005430 <aiPbVersionToUint32>
  resp->payload.ninfo.runtime_version =
 80054ce:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  resp->payload.ninfo.tool_version =
      aiPbVersionToUint32(&nn->tool_version);
 80054d2:	f105 001c 	add.w	r0, r5, #28
 80054d6:	f7ff ffab 	bl	8005430 <aiPbVersionToUint32>
  resp->payload.ninfo.tool_version =
 80054da:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
  resp->payload.ninfo.tool_api_version =
      aiPbVersionToUint32(&nn->tool_api_version);
 80054de:	f105 0020 	add.w	r0, r5, #32
 80054e2:	f7ff ffa5 	bl	8005430 <aiPbVersionToUint32>
   */
  ai_size size = 0;
#if defined(TFLM_RUNTIME) && TFLM_RUNTIME == 1
  size = AI_BUFFER_SHAPE_ELEM(&nn->activations, AI_SHAPE_CHANNEL);
#else
  if (nn->map_activations.size) {
 80054e6:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
  resp->payload.ninfo.tool_api_version =
 80054ea:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
  if (nn->map_activations.size) {
 80054ee:	2900      	cmp	r1, #0
 80054f0:	d056      	beq.n	80055a0 <aiPbMgrSendNNInfo+0x168>
    for (int i=0; i<nn->map_activations.size; i++)
      size += nn->map_activations.buffer[i].size;
 80054f2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    for (int i=0; i<nn->map_activations.size; i++)
 80054f4:	2200      	movs	r2, #0
      size += nn->map_activations.buffer[i].size;
 80054f6:	f04f 0c1c 	mov.w	ip, #28
  ai_size size = 0;
 80054fa:	4613      	mov	r3, r2
      size += nn->map_activations.buffer[i].size;
 80054fc:	3010      	adds	r0, #16
 80054fe:	fb0c f602 	mul.w	r6, ip, r2
    for (int i=0; i<nn->map_activations.size; i++)
 8005502:	3201      	adds	r2, #1
      size += nn->map_activations.buffer[i].size;
 8005504:	5986      	ldr	r6, [r0, r6]
    for (int i=0; i<nn->map_activations.size; i++)
 8005506:	4291      	cmp	r1, r2
      size += nn->map_activations.buffer[i].size;
 8005508:	4433      	add	r3, r6
    for (int i=0; i<nn->map_activations.size; i++)
 800550a:	dcf8      	bgt.n	80054fe <aiPbMgrSendNNInfo+0xc6>
    }
#endif
  ai_buffer tmp_ai_buff_act = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 800550c:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <aiPbMgrSendNNInfo+0x170>)
 800550e:	2600      	movs	r6, #0
      AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, size, 1, 1),
      size,
      NULL, NULL);
  init_aibuffer_msg(&tmp_ai_buff_act, &resp->payload.ninfo.activations);
 8005510:	a808      	add	r0, sp, #32
 8005512:	f504 71de 	add.w	r1, r4, #444	; 0x1bc
  ai_buffer tmp_ai_buff_act = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8005516:	930c      	str	r3, [sp, #48]	; 0x30
 8005518:	f8cd d038 	str.w	sp, [sp, #56]	; 0x38
 800551c:	e9cd 2608 	strd	r2, r6, [sp, #32]
 8005520:	f240 4201 	movw	r2, #1025	; 0x401
 8005524:	920d      	str	r2, [sp, #52]	; 0x34
 8005526:	2201      	movs	r2, #1
 8005528:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 800552c:	e9cd 2300 	strd	r2, r3, [sp]
 8005530:	e9cd 2202 	strd	r2, r2, [sp, #8]
  init_aibuffer_msg(&tmp_ai_buff_act, &resp->payload.ninfo.activations);
 8005534:	f7ff fdb4 	bl	80050a0 <init_aibuffer_msg>

  size = 0;
#if defined(TFLM_RUNTIME) && TFLM_RUNTIME == 1
  size = AI_BUFFER_SHAPE_ELEM(&nn->params, AI_SHAPE_CHANNEL);
#else
  if (nn->map_weights.size) {
 8005538:	f8b5 0042 	ldrh.w	r0, [r5, #66]	; 0x42
 800553c:	b390      	cbz	r0, 80055a4 <aiPbMgrSendNNInfo+0x16c>
    for (int i=0; i<nn->map_weights.size; i++)
      size += nn->map_weights.buffer[i].size;
 800553e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    for (int i=0; i<nn->map_weights.size; i++)
 8005540:	4633      	mov	r3, r6
  size = 0;
 8005542:	4631      	mov	r1, r6
      size += nn->map_weights.buffer[i].size;
 8005544:	f04f 0c1c 	mov.w	ip, #28
 8005548:	3210      	adds	r2, #16
 800554a:	fb0c f603 	mul.w	r6, ip, r3
    for (int i=0; i<nn->map_weights.size; i++)
 800554e:	3301      	adds	r3, #1
      size += nn->map_weights.buffer[i].size;
 8005550:	5996      	ldr	r6, [r2, r6]
    for (int i=0; i<nn->map_weights.size; i++)
 8005552:	4298      	cmp	r0, r3
      size += nn->map_weights.buffer[i].size;
 8005554:	4431      	add	r1, r6
    for (int i=0; i<nn->map_weights.size; i++)
 8005556:	dcf8      	bgt.n	800554a <aiPbMgrSendNNInfo+0x112>
  }
#endif
  ai_buffer tmp_ai_buff_w = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 8005558:	4a13      	ldr	r2, [pc, #76]	; (80055a8 <aiPbMgrSendNNInfo+0x170>)
 800555a:	2300      	movs	r3, #0
      AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, size, 1, 1),
      size,
      NULL, NULL);
  init_aibuffer_msg(&tmp_ai_buff_w, &resp->payload.ninfo.weights);
 800555c:	a80f      	add	r0, sp, #60	; 0x3c
  ai_buffer tmp_ai_buff_w = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 800555e:	9113      	str	r1, [sp, #76]	; 0x4c
 8005560:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
 8005564:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 8005568:	f240 4301 	movw	r3, #1025	; 0x401
 800556c:	9314      	str	r3, [sp, #80]	; 0x50
 800556e:	2301      	movs	r3, #1
 8005570:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8005574:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005578:	ab04      	add	r3, sp, #16
  init_aibuffer_msg(&tmp_ai_buff_w, &resp->payload.ninfo.weights);
 800557a:	f504 71f2 	add.w	r1, r4, #484	; 0x1e4
  ai_buffer tmp_ai_buff_w = AI_BUFFER_INIT(AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
 800557e:	9315      	str	r3, [sp, #84]	; 0x54
  init_aibuffer_msg(&tmp_ai_buff_w, &resp->payload.ninfo.weights);
 8005580:	f7ff fd8e 	bl	80050a0 <init_aibuffer_msg>

  resp->payload.ninfo.inputs.funcs.encode = nn_inputs_w_cb;
 8005584:	4b09      	ldr	r3, [pc, #36]	; (80055ac <aiPbMgrSendNNInfo+0x174>)
  resp->payload.ninfo.inputs.arg = (void *)nn;

  resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
  resp->payload.ninfo.outputs.arg = (void *)nn;

  aiPbMgrSendResp(req, resp, state);
 8005586:	4642      	mov	r2, r8
 8005588:	4621      	mov	r1, r4
 800558a:	4638      	mov	r0, r7
  resp->payload.ninfo.inputs.arg = (void *)nn;
 800558c:	e9c4 356b 	strd	r3, r5, [r4, #428]	; 0x1ac
  resp->payload.ninfo.outputs.funcs.encode = nn_outputs_w_cb;
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <aiPbMgrSendNNInfo+0x178>)
  resp->payload.ninfo.outputs.arg = (void *)nn;
 8005592:	e9c4 356d 	strd	r3, r5, [r4, #436]	; 0x1b4
  aiPbMgrSendResp(req, resp, state);
 8005596:	f7ff fe03 	bl	80051a0 <aiPbMgrSendResp>
}
 800559a:	b016      	add	sp, #88	; 0x58
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ai_size size = 0;
 80055a0:	460b      	mov	r3, r1
 80055a2:	e7b3      	b.n	800550c <aiPbMgrSendNNInfo+0xd4>
  size = 0;
 80055a4:	4601      	mov	r1, r0
 80055a6:	e7d7      	b.n	8005558 <aiPbMgrSendNNInfo+0x120>
 80055a8:	00040440 	.word	0x00040440
 80055ac:	0800511d 	.word	0x0800511d
 80055b0:	0800510d 	.word	0x0800510d

080055b4 <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 80055b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 80055b6:	f003 fa1d 	bl	80089f4 <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 80055ba:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80055be:	2201      	movs	r2, #1
 80055c0:	9302      	str	r3, [sp, #8]
 80055c2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80055c6:	b2c0      	uxtb	r0, r0
 80055c8:	4611      	mov	r1, r2
 80055ca:	9301      	str	r3, [sp, #4]
 80055cc:	2300      	movs	r3, #0
 80055ce:	9000      	str	r0, [sp, #0]
 80055d0:	4802      	ldr	r0, [pc, #8]	; (80055dc <aiPlatformVersion+0x28>)
 80055d2:	f000 fa37 	bl	8005a44 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 80055d6:	b007      	add	sp, #28
 80055d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80055dc:	0800fc0a 	.word	0x0800fc0a

080055e0 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 80055e0:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80055e2:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80055e6:	b2c4      	uxtb	r4, r0
  if (fct)
 80055e8:	b129      	cbz	r1, 80055f6 <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80055ea:	4622      	mov	r2, r4
 80055ec:	4805      	ldr	r0, [pc, #20]	; (8005604 <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 80055ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80055f2:	f000 ba27 	b.w	8005a44 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80055f6:	4621      	mov	r1, r4
 80055f8:	461a      	mov	r2, r3
 80055fa:	4803      	ldr	r0, [pc, #12]	; (8005608 <aiLogErr+0x28>)
}
 80055fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8005600:	f000 ba20 	b.w	8005a44 <lc_print>
 8005604:	0800fc3c 	.word	0x0800fc3c
 8005608:	0800fc69 	.word	0x0800fc69

0800560c <aiPrintBufferInfo>:
void aiPrintBufferInfo(const ai_buffer *buffer)
{
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 800560c:	6981      	ldr	r1, [r0, #24]
{
 800560e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005612:	4604      	mov	r4, r0
  const ai_buffer_format fmt = buffer->format;
 8005614:	6806      	ldr	r6, [r0, #0]
  LC_PRINT("(%d,%d,%d,",
 8005616:	4871      	ldr	r0, [pc, #452]	; (80057dc <aiPrintBufferInfo+0x1d0>)
 8005618:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
{
 800561c:	ed2d 8b02 	vpush	{d8}
  LC_PRINT("(%d,%d,%d,",
 8005620:	6809      	ldr	r1, [r1, #0]
{
 8005622:	b083      	sub	sp, #12
  LC_PRINT("(%d,%d,%d,",
 8005624:	f000 fa0e 	bl	8005a44 <lc_print>
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8005628:	6962      	ldr	r2, [r4, #20]
 800562a:	69a0      	ldr	r0, [r4, #24]
 800562c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005630:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8005634:	d12d      	bne.n	8005692 <aiPrintBufferInfo+0x86>
  {
    LC_PRINT("%d,%d)",
 8005636:	6842      	ldr	r2, [r0, #4]
 8005638:	6901      	ldr	r1, [r0, #16]
 800563a:	4869      	ldr	r0, [pc, #420]	; (80057e0 <aiPrintBufferInfo+0x1d4>)
 800563c:	f000 fa02 	bl	8005a44 <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8005640:	2101      	movs	r1, #1
 8005642:	4620      	mov	r0, r4
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8005644:	f3c6 4743 	ubfx	r7, r6, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8005648:	f002 ff9a 	bl	8008580 <ai_buffer_get_size>
 800564c:	4601      	mov	r1, r0
 800564e:	4865      	ldr	r0, [pc, #404]	; (80057e4 <aiPrintBufferInfo+0x1d8>)
 8005650:	f000 f9f8 	bl	8005a44 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8005654:	2f01      	cmp	r7, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8005656:	ea4f 18e6 	mov.w	r8, r6, asr #7
 800565a:	f3c6 15c6 	ubfx	r5, r6, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800565e:	d127      	bne.n	80056b0 <aiPrintBufferInfo+0xa4>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8005660:	4629      	mov	r1, r5
 8005662:	4861      	ldr	r0, [pc, #388]	; (80057e8 <aiPrintBufferInfo+0x1dc>)
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8005664:	f000 f9ee 	bl	8005a44 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 8005668:	6865      	ldr	r5, [r4, #4]
    LC_PRINT(" @0x%X/%d",
 800566a:	2101      	movs	r1, #1
 800566c:	4620      	mov	r0, r4
  if (buffer->data)
 800566e:	2d00      	cmp	r5, #0
 8005670:	f000 809e 	beq.w	80057b0 <aiPrintBufferInfo+0x1a4>
    LC_PRINT(" @0x%X/%d",
 8005674:	f002 ff84 	bl	8008580 <ai_buffer_get_size>
 8005678:	4631      	mov	r1, r6
 800567a:	f002 ffb5 	bl	80085e8 <ai_buffer_get_byte_size>
 800567e:	4629      	mov	r1, r5
 8005680:	4602      	mov	r2, r0
 8005682:	485a      	ldr	r0, [pc, #360]	; (80057ec <aiPrintBufferInfo+0x1e0>)
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 8005684:	b003      	add	sp, #12
 8005686:	ecbd 8b02 	vpop	{d8}
 800568a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" @0x%X/%d",
 800568e:	f000 b9d9 	b.w	8005a44 <lc_print>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8005692:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 8005696:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8005698:	d105      	bne.n	80056a6 <aiPrintBufferInfo+0x9a>
    LC_PRINT("%d,%d,%d)",
 800569a:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800569e:	4854      	ldr	r0, [pc, #336]	; (80057f0 <aiPrintBufferInfo+0x1e4>)
 80056a0:	f000 f9d0 	bl	8005a44 <lc_print>
 80056a4:	e7cc      	b.n	8005640 <aiPrintBufferInfo+0x34>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 80056a6:	4619      	mov	r1, r3
 80056a8:	4852      	ldr	r0, [pc, #328]	; (80057f4 <aiPrintBufferInfo+0x1e8>)
 80056aa:	f000 f9cb 	bl	8005a44 <lc_print>
 80056ae:	e7c7      	b.n	8005640 <aiPrintBufferInfo+0x34>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80056b0:	2f03      	cmp	r7, #3
 80056b2:	d102      	bne.n	80056ba <aiPrintBufferInfo+0xae>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 80056b4:	4629      	mov	r1, r5
 80056b6:	4850      	ldr	r0, [pc, #320]	; (80057f8 <aiPrintBufferInfo+0x1ec>)
 80056b8:	e7d4      	b.n	8005664 <aiPrintBufferInfo+0x58>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 80056ba:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8005810 <aiPrintBufferInfo+0x204>
 80056be:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
 80056c2:	462a      	mov	r2, r5
 80056c4:	f109 0102 	add.w	r1, r9, #2
 80056c8:	f109 003b 	add.w	r0, r9, #59	; 0x3b
 80056cc:	bf18      	it	ne
 80056ce:	4649      	movne	r1, r9
 80056d0:	f000 f9b8 	bl	8005a44 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 80056d4:	2f02      	cmp	r7, #2
 80056d6:	d1c7      	bne.n	8005668 <aiPrintBufferInfo+0x5c>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80056d8:	68a3      	ldr	r3, [r4, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d057      	beq.n	800578e <aiPrintBufferInfo+0x182>
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	07d2      	lsls	r2, r2, #31
 80056e2:	d554      	bpl.n	800578e <aiPrintBufferInfo+0x182>
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d051      	beq.n	800578e <aiPrintBufferInfo+0x182>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 80056ea:	f8b3 8002 	ldrh.w	r8, [r3, #2]
      LC_PRINT(" %d:", s_);
 80056ee:	f109 0040 	add.w	r0, r9, #64	; 0x40
      for (int idx=0; idx<max_; idx++) {
 80056f2:	2500      	movs	r5, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80056f4:	ed9f 8a41 	vldr	s16, [pc, #260]	; 80057fc <aiPrintBufferInfo+0x1f0>
      const int max_ = s_> 4?4:s_;
 80056f8:	4647      	mov	r7, r8
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80056fa:	f109 0945 	add.w	r9, r9, #69	; 0x45
      LC_PRINT(" %d:", s_);
 80056fe:	4641      	mov	r1, r8
      const int max_ = s_> 4?4:s_;
 8005700:	2f04      	cmp	r7, #4
 8005702:	bf28      	it	cs
 8005704:	2704      	movcs	r7, #4
      LC_PRINT(" %d:", s_);
 8005706:	f000 f99d 	bl	8005a44 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 800570a:	42bd      	cmp	r5, r7
 800570c:	db07      	blt.n	800571e <aiPrintBufferInfo+0x112>
      LC_PRINT((s_ > max_)?"..":"");
 800570e:	4b3c      	ldr	r3, [pc, #240]	; (8005800 <aiPrintBufferInfo+0x1f4>)
 8005710:	1cd8      	adds	r0, r3, #3
 8005712:	4547      	cmp	r7, r8
 8005714:	bf38      	it	cc
 8005716:	4618      	movcc	r0, r3
 8005718:	f000 f994 	bl	8005a44 <lc_print>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 800571c:	e7a4      	b.n	8005668 <aiPrintBufferInfo+0x5c>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800571e:	68a1      	ldr	r1, [r4, #8]
 8005720:	2900      	cmp	r1, #0
 8005722:	d053      	beq.n	80057cc <aiPrintBufferInfo+0x1c0>
 8005724:	680a      	ldr	r2, [r1, #0]
 8005726:	f012 0301 	ands.w	r3, r2, #1
 800572a:	d02b      	beq.n	8005784 <aiPrintBufferInfo+0x178>
 800572c:	6849      	ldr	r1, [r1, #4]
 800572e:	2900      	cmp	r1, #0
 8005730:	d04c      	beq.n	80057cc <aiPrintBufferInfo+0x1c0>
 8005732:	684b      	ldr	r3, [r1, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d04d      	beq.n	80057d4 <aiPrintBufferInfo+0x1c8>
 8005738:	884a      	ldrh	r2, [r1, #2]
 800573a:	42aa      	cmp	r2, r5
 800573c:	dd4a      	ble.n	80057d4 <aiPrintBufferInfo+0x1c8>
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8005744:	edd3 7a00 	vldr	s15, [r3]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8005748:	2900      	cmp	r1, #0
 800574a:	d041      	beq.n	80057d0 <aiPrintBufferInfo+0x1c4>
 800574c:	880a      	ldrh	r2, [r1, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800574e:	6848      	ldr	r0, [r1, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8005750:	f012 0302 	ands.w	r3, r2, #2
 8005754:	d00f      	beq.n	8005776 <aiPrintBufferInfo+0x16a>
 8005756:	b1c0      	cbz	r0, 800578a <aiPrintBufferInfo+0x17e>
 8005758:	884b      	ldrh	r3, [r1, #2]
 800575a:	42ab      	cmp	r3, r5
 800575c:	dd38      	ble.n	80057d0 <aiPrintBufferInfo+0x1c4>
 800575e:	6843      	ldr	r3, [r0, #4]
 8005760:	5d5b      	ldrb	r3, [r3, r5]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8005762:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	4648      	mov	r0, r9
      for (int idx=0; idx<max_; idx++) {
 800576a:	3501      	adds	r5, #1
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 800576c:	ec53 2b17 	vmov	r2, r3, d7
 8005770:	f000 f968 	bl	8005a44 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8005774:	e7c9      	b.n	800570a <aiPrintBufferInfo+0xfe>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8005776:	b140      	cbz	r0, 800578a <aiPrintBufferInfo+0x17e>
 8005778:	884a      	ldrh	r2, [r1, #2]
 800577a:	42aa      	cmp	r2, r5
 800577c:	ddf1      	ble.n	8005762 <aiPrintBufferInfo+0x156>
 800577e:	6843      	ldr	r3, [r0, #4]
 8005780:	575b      	ldrsb	r3, [r3, r5]
 8005782:	e7ee      	b.n	8005762 <aiPrintBufferInfo+0x156>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8005784:	eef0 7a48 	vmov.f32	s15, s16
 8005788:	e7eb      	b.n	8005762 <aiPrintBufferInfo+0x156>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800578a:	4603      	mov	r3, r0
 800578c:	e7e9      	b.n	8005762 <aiPrintBufferInfo+0x156>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 800578e:	f018 0f78 	tst.w	r8, #120	; 0x78
 8005792:	d102      	bne.n	800579a <aiPrintBufferInfo+0x18e>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8005794:	4629      	mov	r1, r5
 8005796:	481b      	ldr	r0, [pc, #108]	; (8005804 <aiPrintBufferInfo+0x1f8>)
 8005798:	e764      	b.n	8005664 <aiPrintBufferInfo+0x58>
      LC_PRINT(" Q%d.%d",
 800579a:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 800579e:	f3c6 51c0 	ubfx	r1, r6, #23, #1
 80057a2:	4819      	ldr	r0, [pc, #100]	; (8005808 <aiPrintBufferInfo+0x1fc>)
 80057a4:	3a40      	subs	r2, #64	; 0x40
 80057a6:	4411      	add	r1, r2
 80057a8:	1a69      	subs	r1, r5, r1
 80057aa:	f000 f94b 	bl	8005a44 <lc_print>
 80057ae:	e75b      	b.n	8005668 <aiPrintBufferInfo+0x5c>
    LC_PRINT(" (User Domain)/%d",
 80057b0:	f002 fee6 	bl	8008580 <ai_buffer_get_size>
 80057b4:	4631      	mov	r1, r6
 80057b6:	f002 ff17 	bl	80085e8 <ai_buffer_get_byte_size>
 80057ba:	4601      	mov	r1, r0
 80057bc:	4813      	ldr	r0, [pc, #76]	; (800580c <aiPrintBufferInfo+0x200>)
}
 80057be:	b003      	add	sp, #12
 80057c0:	ecbd 8b02 	vpop	{d8}
 80057c4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" (User Domain)/%d",
 80057c8:	f000 b93c 	b.w	8005a44 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80057cc:	eef0 7a48 	vmov.f32	s15, s16
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80057d0:	2300      	movs	r3, #0
 80057d2:	e7c6      	b.n	8005762 <aiPrintBufferInfo+0x156>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80057d4:	eef0 7a48 	vmov.f32	s15, s16
 80057d8:	e7b6      	b.n	8005748 <aiPrintBufferInfo+0x13c>
 80057da:	bf00      	nop
 80057dc:	0800fc99 	.word	0x0800fc99
 80057e0:	0800fca4 	.word	0x0800fca4
 80057e4:	0800fcb9 	.word	0x0800fcb9
 80057e8:	0800fcbd 	.word	0x0800fcbd
 80057ec:	0800fcf2 	.word	0x0800fcf2
 80057f0:	0800fcab 	.word	0x0800fcab
 80057f4:	0800fcb5 	.word	0x0800fcb5
 80057f8:	0800fcc5 	.word	0x0800fcc5
 80057fc:	00000000 	.word	0x00000000
 8005800:	0800fc95 	.word	0x0800fc95
 8005804:	0800fcdf 	.word	0x0800fcdf
 8005808:	0800fcea 	.word	0x0800fcea
 800580c:	0800fcfc 	.word	0x0800fcfc
 8005810:	0800fc91 	.word	0x0800fc91

08005814 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8005814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005818:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 800581a:	484e      	ldr	r0, [pc, #312]	; (8005954 <aiPrintNetworkInfo+0x140>)
 800581c:	f000 f912 	bl	8005a44 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8005820:	484d      	ldr	r0, [pc, #308]	; (8005958 <aiPrintNetworkInfo+0x144>)
 8005822:	6821      	ldr	r1, [r4, #0]
 8005824:	f000 f90e 	bl	8005a44 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8005828:	6861      	ldr	r1, [r4, #4]
 800582a:	484c      	ldr	r0, [pc, #304]	; (800595c <aiPrintNetworkInfo+0x148>)
 800582c:	f000 f90a 	bl	8005a44 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8005830:	68a1      	ldr	r1, [r4, #8]
 8005832:	484b      	ldr	r0, [pc, #300]	; (8005960 <aiPrintNetworkInfo+0x14c>)
 8005834:	f000 f906 	bl	8005a44 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8005838:	68e1      	ldr	r1, [r4, #12]
 800583a:	484a      	ldr	r0, [pc, #296]	; (8005964 <aiPrintNetworkInfo+0x150>)
 800583c:	f000 f902 	bl	8005a44 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
 8005840:	7da3      	ldrb	r3, [r4, #22]
 8005842:	7d21      	ldrb	r1, [r4, #20]
 8005844:	7d62      	ldrb	r2, [r4, #21]
 8005846:	4848      	ldr	r0, [pc, #288]	; (8005968 <aiPrintNetworkInfo+0x154>)
 8005848:	f000 f8fc 	bl	8005a44 <lc_print>
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
  if (report->tool_revision[0])
 800584c:	69a1      	ldr	r1, [r4, #24]
 800584e:	780b      	ldrb	r3, [r1, #0]
 8005850:	b113      	cbz	r3, 8005858 <aiPrintNetworkInfo+0x44>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8005852:	4846      	ldr	r0, [pc, #280]	; (800596c <aiPrintNetworkInfo+0x158>)
 8005854:	f000 f8f6 	bl	8005a44 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8005858:	7fa3      	ldrb	r3, [r4, #30]
      report->tool_version.micro);
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800585a:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800585c:	7f62      	ldrb	r2, [r4, #29]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 800585e:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8005862:	7f21      	ldrb	r1, [r4, #28]
 8005864:	4842      	ldr	r0, [pc, #264]	; (8005970 <aiPrintNetworkInfo+0x15c>)
      LC_PRINT("  [%d] ", idx);
 8005866:	4f43      	ldr	r7, [pc, #268]	; (8005974 <aiPrintNetworkInfo+0x160>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8005868:	f000 f8ec 	bl	8005a44 <lc_print>
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 800586c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800586e:	4842      	ldr	r0, [pc, #264]	; (8005978 <aiPrintNetworkInfo+0x164>)
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8005870:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" complexity         : %lu MACC\r\n", (unsigned long)report->n_macc);
 8005874:	f000 f8e6 	bl	8005a44 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8005878:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800587a:	4840      	ldr	r0, [pc, #256]	; (800597c <aiPrintNetworkInfo+0x168>)
 800587c:	f000 f8e2 	bl	8005a44 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8005880:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8005884:	483e      	ldr	r0, [pc, #248]	; (8005980 <aiPrintNetworkInfo+0x16c>)
 8005886:	f000 f8dd 	bl	8005a44 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 800588a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 800588e:	42ab      	cmp	r3, r5
 8005890:	dc25      	bgt.n	80058de <aiPrintNetworkInfo+0xca>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8005892:	4f38      	ldr	r7, [pc, #224]	; (8005974 <aiPrintNetworkInfo+0x160>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8005894:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8005896:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 800589a:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 800589e:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 80058a2:	4838      	ldr	r0, [pc, #224]	; (8005984 <aiPrintNetworkInfo+0x170>)
 80058a4:	f000 f8ce 	bl	8005a44 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80058a8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
 80058ac:	42ab      	cmp	r3, r5
 80058ae:	dc25      	bgt.n	80058fc <aiPrintNetworkInfo+0xe8>
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 80058b0:	4e35      	ldr	r6, [pc, #212]	; (8005988 <aiPrintNetworkInfo+0x174>)
  for (int i=0; i<report->n_inputs; i++) {
 80058b2:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 80058b4:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80058b6:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    LC_PRINT("\r\n");
 80058b8:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80058bc:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 80058be:	4833      	ldr	r0, [pc, #204]	; (800598c <aiPrintNetworkInfo+0x178>)
 80058c0:	f000 f8c0 	bl	8005a44 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80058c4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80058c6:	42ab      	cmp	r3, r5
 80058c8:	dc27      	bgt.n	800591a <aiPrintNetworkInfo+0x106>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 80058ca:	4e31      	ldr	r6, [pc, #196]	; (8005990 <aiPrintNetworkInfo+0x17c>)
  for (int i=0; i<report->n_outputs; i++) {
 80058cc:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 80058ce:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80058d0:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 80058d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80058d6:	42ab      	cmp	r3, r5
 80058d8:	dc2d      	bgt.n	8005936 <aiPrintNetworkInfo+0x122>
  }
}
 80058da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80058de:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 80058e0:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80058e2:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 80058e6:	4638      	mov	r0, r7
 80058e8:	f000 f8ac 	bl	8005a44 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80058ec:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 80058ee:	4630      	mov	r0, r6
 80058f0:	f7ff fe8c 	bl	800560c <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 80058f4:	4648      	mov	r0, r9
 80058f6:	f000 f8a5 	bl	8005a44 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80058fa:	e7c6      	b.n	800588a <aiPrintNetworkInfo+0x76>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80058fc:	6c60      	ldr	r0, [r4, #68]	; 0x44
      LC_PRINT("  [%d] ", idx);
 80058fe:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8005900:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8005904:	4638      	mov	r0, r7
 8005906:	f000 f89d 	bl	8005a44 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800590a:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 800590c:	4630      	mov	r0, r6
 800590e:	f7ff fe7d 	bl	800560c <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8005912:	4648      	mov	r0, r9
 8005914:	f000 f896 	bl	8005a44 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8005918:	e7c6      	b.n	80058a8 <aiPrintNetworkInfo+0x94>
    LC_PRINT("  I[%d] ", i);
 800591a:	4629      	mov	r1, r5
 800591c:	4630      	mov	r0, r6
 800591e:	f000 f891 	bl	8005a44 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8005922:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005924:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 8005928:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 800592a:	f7ff fe6f 	bl	800560c <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 800592e:	4640      	mov	r0, r8
 8005930:	f000 f888 	bl	8005a44 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8005934:	e7c6      	b.n	80058c4 <aiPrintNetworkInfo+0xb0>
    LC_PRINT("  O[%d] ", i);
 8005936:	4629      	mov	r1, r5
 8005938:	4630      	mov	r0, r6
 800593a:	f000 f883 	bl	8005a44 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 800593e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005940:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 8005944:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 8005946:	f7ff fe61 	bl	800560c <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 800594a:	4640      	mov	r0, r8
 800594c:	f000 f87a 	bl	8005a44 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8005950:	e7c0      	b.n	80058d4 <aiPrintNetworkInfo+0xc0>
 8005952:	bf00      	nop
 8005954:	0800fd0e 	.word	0x0800fd0e
 8005958:	0800fd28 	.word	0x0800fd28
 800595c:	0800fd43 	.word	0x0800fd43
 8005960:	0800fd5e 	.word	0x0800fd5e
 8005964:	0800fd79 	.word	0x0800fd79
 8005968:	0800fd94 	.word	0x0800fd94
 800596c:	0800fdb5 	.word	0x0800fdb5
 8005970:	0800fdd0 	.word	0x0800fdd0
 8005974:	0800fe48 	.word	0x0800fe48
 8005978:	0800fdf1 	.word	0x0800fdf1
 800597c:	0800fe12 	.word	0x0800fe12
 8005980:	0800fe2d 	.word	0x0800fe2d
 8005984:	0800fe53 	.word	0x0800fe53
 8005988:	0800fe8c 	.word	0x0800fe8c
 800598c:	0800fe6e 	.word	0x0800fe6e
 8005990:	0800fe95 	.word	0x0800fe95

08005994 <_put_c_driver>:

#include "lc_print.h"

static void _put_c_driver(void *user, const char c)
{
  if (_ioWriteAllowed)
 8005994:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <_put_c_driver+0x24>)
 8005996:	781b      	ldrb	r3, [r3, #0]
{
 8005998:	b507      	push	{r0, r1, r2, lr}
 800599a:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 800599e:	b13b      	cbz	r3, 80059b0 <_put_c_driver+0x1c>
    HAL_UART_Transmit(&UartHandle, (uint8_t *)&c, 1, HAL_MAX_DELAY);
 80059a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059a4:	2201      	movs	r2, #1
 80059a6:	f10d 0107 	add.w	r1, sp, #7
 80059aa:	4804      	ldr	r0, [pc, #16]	; (80059bc <_put_c_driver+0x28>)
 80059ac:	f7fe fbf3 	bl	8004196 <HAL_UART_Transmit>
}
 80059b0:	b003      	add	sp, #12
 80059b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80059b6:	bf00      	nop
 80059b8:	2000000c 	.word	0x2000000c
 80059bc:	20002440 	.word	0x20002440

080059c0 <ioRawWriteBuffer>:
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80059c0:	b28a      	uxth	r2, r1
 80059c2:	4601      	mov	r1, r0
 80059c4:	4804      	ldr	r0, [pc, #16]	; (80059d8 <ioRawWriteBuffer+0x18>)
{
 80059c6:	b508      	push	{r3, lr}
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80059c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059cc:	f7fe fbe3 	bl	8004196 <HAL_UART_Transmit>
}
 80059d0:	fab0 f080 	clz	r0, r0
 80059d4:	0940      	lsrs	r0, r0, #5
 80059d6:	bd08      	pop	{r3, pc}
 80059d8:	20002440 	.word	0x20002440

080059dc <ioRawReadBuffer>:
  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 80059dc:	b28a      	uxth	r2, r1
 80059de:	4601      	mov	r1, r0
 80059e0:	4804      	ldr	r0, [pc, #16]	; (80059f4 <ioRawReadBuffer+0x18>)
{
 80059e2:	b508      	push	{r3, lr}
  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059e8:	f7fe fc25 	bl	8004236 <HAL_UART_Receive>
}
 80059ec:	fab0 f080 	clz	r0, r0
 80059f0:	0940      	lsrs	r0, r0, #5
 80059f2:	bd08      	pop	{r3, pc}
 80059f4:	20002440 	.word	0x20002440

080059f8 <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 80059f8:	4b01      	ldr	r3, [pc, #4]	; (8005a00 <ioRawDisableLLWrite+0x8>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
}
 80059fe:	4770      	bx	lr
 8005a00:	2000000c 	.word	0x2000000c

08005a04 <_write>:
{
 8005a04:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8005a06:	1e14      	subs	r4, r2, #0
 8005a08:	da0a      	bge.n	8005a20 <_write+0x1c>
 8005a0a:	3801      	subs	r0, #1
 8005a0c:	2801      	cmp	r0, #1
 8005a0e:	d907      	bls.n	8005a20 <_write+0x1c>
    errno = EBADF;
 8005a10:	f007 fb50 	bl	800d0b4 <__errno>
    return -1;
 8005a14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    errno = EBADF;
 8005a18:	2309      	movs	r3, #9
 8005a1a:	6003      	str	r3, [r0, #0]
}
 8005a1c:	4620      	mov	r0, r4
 8005a1e:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 8005a20:	4b06      	ldr	r3, [pc, #24]	; (8005a3c <_write+0x38>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0f9      	beq.n	8005a1c <_write+0x18>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 8005a28:	b2a2      	uxth	r2, r4
 8005a2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a2e:	4804      	ldr	r0, [pc, #16]	; (8005a40 <_write+0x3c>)
 8005a30:	f7fe fbb1 	bl	8004196 <HAL_UART_Transmit>
  return (status == HAL_OK ? count : 0);
 8005a34:	2800      	cmp	r0, #0
 8005a36:	bf18      	it	ne
 8005a38:	2400      	movne	r4, #0
 8005a3a:	e7ef      	b.n	8005a1c <_write+0x18>
 8005a3c:	2000000c 	.word	0x2000000c
 8005a40:	20002440 	.word	0x20002440

08005a44 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8005a44:	b40f      	push	{r0, r1, r2, r3}
 8005a46:	b507      	push	{r0, r1, r2, lr}
 8005a48:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	4805      	ldr	r0, [pc, #20]	; (8005a64 <lc_print+0x20>)
{
 8005a4e:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8005a52:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8005a54:	f000 ffea 	bl	8006a2c <vlc_print>
  va_end(ap);
}
 8005a58:	b003      	add	sp, #12
 8005a5a:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a5e:	b004      	add	sp, #16
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	08005995 	.word	0x08005995

08005a68 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8005a68:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 8005a6a:	4d11      	ldr	r5, [pc, #68]	; (8005ab0 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 8005a6c:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 8005a6e:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8005a70:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8005a74:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8005a78:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 8005a7c:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8005a7e:	f007 fb43 	bl	800d108 <malloc>

  /* remember size */
  if (ptr) {
 8005a82:	b1a0      	cbz	r0, 8005aae <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8005a84:	1903      	adds	r3, r0, r4
 8005a86:	4a0b      	ldr	r2, [pc, #44]	; (8005ab4 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8005a88:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8005a8a:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	07db      	lsls	r3, r3, #31
 8005a90:	d50c      	bpl.n	8005aac <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8005a92:	68eb      	ldr	r3, [r5, #12]
 8005a94:	3301      	adds	r3, #1
 8005a96:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8005a98:	686b      	ldr	r3, [r5, #4]
 8005a9a:	4423      	add	r3, r4
 8005a9c:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 8005a9e:	69ab      	ldr	r3, [r5, #24]
 8005aa0:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8005aa2:	696b      	ldr	r3, [r5, #20]
 8005aa4:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 8005aa6:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 8005aa8:	bf88      	it	hi
 8005aaa:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 8005aac:	3004      	adds	r0, #4
}
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	200027c8 	.word	0x200027c8
 8005ab4:	efdcba98 	.word	0xefdcba98

08005ab8 <crcIpInit>:
 */

struct cyclesCount cyclesCount;

void crcIpInit(void)
{
 8005ab8:	b513      	push	{r0, r1, r4, lr}
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 8005aba:	4c09      	ldr	r4, [pc, #36]	; (8005ae0 <crcIpInit+0x28>)
 8005abc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005abe:	04db      	lsls	r3, r3, #19
 8005ac0:	d402      	bmi.n	8005ac8 <crcIpInit+0x10>
    LC_PRINT("W: CRC IP clock is NOT enabled\r\n");
 8005ac2:	4808      	ldr	r0, [pc, #32]	; (8005ae4 <crcIpInit+0x2c>)
 8005ac4:	f7ff ffbe 	bl	8005a44 <lc_print>

  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8005ac8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005aca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ace:	6323      	str	r3, [r4, #48]	; 0x30
 8005ad0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	9b01      	ldr	r3, [sp, #4]
#endif
}
 8005ada:	b002      	add	sp, #8
 8005adc:	bd10      	pop	{r4, pc}
 8005ade:	bf00      	nop
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	0800ff04 	.word	0x0800ff04

08005ae8 <dwtCyclesToTime>:
  return HAL_RCC_GetSysClockFreq();
#endif
}

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8005ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aec:	4604      	mov	r4, r0
 8005aee:	468a      	mov	sl, r1
  if (!t)
 8005af0:	4617      	mov	r7, r2
 8005af2:	b382      	cbz	r2, 8005b56 <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = systemCoreClock();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 8005af4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  return HAL_RCC_GetHCLKFreq();
 8005af8:	f7fd fc8e 	bl	8003418 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8005afc:	2300      	movs	r3, #0
  return HAL_RCC_GetHCLKFreq();
 8005afe:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8005b00:	9001      	str	r0, [sp, #4]
 8005b02:	4651      	mov	r1, sl
 8005b04:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8005b06:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8005b5c <dwtCyclesToTime+0x74>
  uint64_t s  = clks / fcpu;
 8005b0a:	f7fa fcff 	bl	800050c <__aeabi_uldivmod>
 8005b0e:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8005b10:	fba4 0106 	umull	r0, r1, r4, r6
 8005b14:	9a01      	ldr	r2, [sp, #4]
 8005b16:	2300      	movs	r3, #0
 8005b18:	fb06 110a 	mla	r1, r6, sl, r1
 8005b1c:	f7fa fcf6 	bl	800050c <__aeabi_uldivmod>
  ms -= (s * 1000);
 8005b20:	fbab 3106 	umull	r3, r1, fp, r6
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8005b24:	9a01      	ldr	r2, [sp, #4]
  ms -= (s * 1000);
 8005b26:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8005b28:	fba4 0109 	umull	r0, r1, r4, r9
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	fb09 110a 	mla	r1, r9, sl, r1
  us -= (ms * 1000 + s * 1000000);
 8005b32:	fbab 8909 	umull	r8, r9, fp, r9
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8005b36:	f7fa fce9 	bl	800050c <__aeabi_uldivmod>
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 8005b3a:	60bd      	str	r5, [r7, #8]
 8005b3c:	eba0 0008 	sub.w	r0, r0, r8
  us -= (ms * 1000 + s * 1000000);
 8005b40:	fba5 5606 	umull	r5, r6, r5, r6
  t->fcpu = fcpu;
 8005b44:	9a01      	ldr	r2, [sp, #4]
  us -= (ms * 1000 + s * 1000000);
 8005b46:	1b40      	subs	r0, r0, r5
  t->us = us;
 8005b48:	60f8      	str	r0, [r7, #12]
  return 0;
 8005b4a:	2000      	movs	r0, #0
  t->s = s;
 8005b4c:	e9c7 2b00 	strd	r2, fp, [r7]
}
 8005b50:	b003      	add	sp, #12
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 8005b56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b5a:	e7f9      	b.n	8005b50 <dwtCyclesToTime+0x68>
 8005b5c:	000f4240 	.word	0x000f4240

08005b60 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 8005b60:	b510      	push	{r4, lr}
 8005b62:	4604      	mov	r4, r0
 8005b64:	ed2d 8b02 	vpush	{d8}
 8005b68:	b082      	sub	sp, #8
 8005b6a:	9101      	str	r1, [sp, #4]
  return HAL_RCC_GetHCLKFreq();
 8005b6c:	f7fd fc54 	bl	8003418 <HAL_RCC_GetHCLKFreq>
  float res;
  float fcpu = (float)systemCoreClock();
  res = ((float)clks * (float)1000.0) / fcpu;
 8005b70:	9901      	ldr	r1, [sp, #4]
  return HAL_RCC_GetHCLKFreq();
 8005b72:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 8005b76:	4620      	mov	r0, r4
 8005b78:	f7fa fc82 	bl	8000480 <__aeabi_ul2f>
 8005b7c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005b98 <dwtCyclesToFloatMs+0x38>
 8005b80:	ee07 0a90 	vmov	s15, r0
  float fcpu = (float)systemCoreClock();
 8005b84:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 8005b88:	ee27 0a80 	vmul.f32	s0, s15, s0
  return res;
}
 8005b8c:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8005b90:	b002      	add	sp, #8
 8005b92:	ecbd 8b02 	vpop	{d8}
 8005b96:	bd10      	pop	{r4, pc}
 8005b98:	447a0000 	.word	0x447a0000

08005b9c <getFlashCacheConf>:

#if defined(STM32F7)

  mconf |= MCONF_F7;

  uint32_t acr = FLASH->ACR;
 8005b9c:	4b0d      	ldr	r3, [pc, #52]	; (8005bd4 <getFlashCacheConf+0x38>)
  uint32_t ccr = SCB->CCR;
 8005b9e:	4a0e      	ldr	r2, [pc, #56]	; (8005bd8 <getFlashCacheConf+0x3c>)
  uint32_t acr = FLASH->ACR;
 8005ba0:	681b      	ldr	r3, [r3, #0]
  uint32_t ccr = SCB->CCR;
 8005ba2:	6952      	ldr	r2, [r2, #20]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8005ba4:	f003 000f 	and.w	r0, r3, #15
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8005ba8:	05d9      	lsls	r1, r3, #23
    mconf |= MCONF_ART_PREF;
 8005baa:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 8005bae:	bf48      	it	mi
 8005bb0:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 8005bb4:	059b      	lsls	r3, r3, #22
    mconf |= MCONF_ART_EN;
 8005bb6:	bf48      	it	mi
 8005bb8:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200

  if (ccr & SCB_CCR_IC_Msk)
 8005bbc:	0391      	lsls	r1, r2, #14
    mconf |= MCONF_CORE_ICACHE;
 8005bbe:	bf48      	it	mi
 8005bc0:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
  if (ccr & SCB_CCR_DC_Msk)
 8005bc4:	03d3      	lsls	r3, r2, #15
    mconf |= MCONF_CORE_DCACHE;
 8005bc6:	bf48      	it	mi
 8005bc8:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf |= MCONF_FPU;  /* FPU present and used */
#endif

  return mconf;
}
 8005bcc:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40023c00 	.word	0x40023c00
 8005bd8:	e000ed00 	.word	0xe000ed00

08005bdc <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	4604      	mov	r4, r0
  return HAL_RCC_GetHCLKFreq();
 8005be0:	f7fd fc1a 	bl	8003418 <HAL_RCC_GetHCLKFreq>
  conf->sclk = systemCoreClock();
 8005be4:	6020      	str	r0, [r4, #0]
  conf->hclk = HAL_RCC_GetHCLKFreq();
 8005be6:	f7fd fc17 	bl	8003418 <HAL_RCC_GetHCLKFreq>
 8005bea:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8005bec:	f7ff ffd6 	bl	8005b9c <getFlashCacheConf>
 8005bf0:	60a0      	str	r0, [r4, #8]
  conf->devid = HAL_GetDEVID();
 8005bf2:	f7fb fedb 	bl	80019ac <HAL_GetDEVID>
 8005bf6:	60e0      	str	r0, [r4, #12]
  conf->revid = HAL_GetREVID();
 8005bf8:	f7fb fed2 	bl	80019a0 <HAL_GetREVID>
 8005bfc:	6120      	str	r0, [r4, #16]
}
 8005bfe:	bd10      	pop	{r4, pc}

08005c00 <systemSettingLog>:

void systemSettingLog(void)
{
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	b088      	sub	sp, #32
  /* Display ARM Complier version */

#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  LC_PRINT("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(__GNUC__)
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8005c04:	2301      	movs	r3, #1
 8005c06:	2203      	movs	r2, #3
 8005c08:	210a      	movs	r1, #10
 8005c0a:	482f      	ldr	r0, [pc, #188]	; (8005cc8 <systemSettingLog+0xc8>)
 8005c0c:	f7ff ff1a 	bl	8005a44 <lc_print>
  if (!conf)
 8005c10:	a803      	add	r0, sp, #12
 8005c12:	f7ff ffe3 	bl	8005bdc <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT("STM32 Runtime configuration...\r\n");
 8005c16:	482d      	ldr	r0, [pc, #180]	; (8005ccc <systemSettingLog+0xcc>)
 8005c18:	f7ff ff14 	bl	8005a44 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8005c1c:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 8005c1e:	f240 4249 	movw	r2, #1097	; 0x449
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8005c22:	b28b      	uxth	r3, r1
  switch (dev_id) {
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d04d      	beq.n	8005cc4 <systemSettingLog+0xc4>
 8005c28:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005c2c:	4413      	add	r3, r2
 8005c2e:	4a28      	ldr	r2, [pc, #160]	; (8005cd0 <systemSettingLog+0xd0>)
 8005c30:	f102 000a 	add.w	r0, r2, #10
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	bf88      	it	hi
 8005c38:	4602      	movhi	r2, r0
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8005c3a:	9b07      	ldr	r3, [sp, #28]
 8005c3c:	4825      	ldr	r0, [pc, #148]	; (8005cd4 <systemSettingLog+0xd4>)
 8005c3e:	f7ff ff01 	bl	8005a44 <lc_print>
      (int)sys_conf.devid,
      devIdToStr(sys_conf.devid),
      (int)sys_conf.revid
  );

  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n",
 8005c42:	4b25      	ldr	r3, [pc, #148]	; (8005cd8 <systemSettingLog+0xd8>)
 8005c44:	2107      	movs	r1, #7
      "no FPU", ""
#endif
  );

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8005c46:	4c25      	ldr	r4, [pc, #148]	; (8005cdc <systemSettingLog+0xdc>)
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n",
 8005c48:	1d5a      	adds	r2, r3, #5
 8005c4a:	f103 000a 	add.w	r0, r3, #10
 8005c4e:	f7ff fef9 	bl	8005a44 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 8005c52:	f7fb fea1 	bl	8001998 <HAL_GetHalVersion>
 8005c56:	4601      	mov	r1, r0
 8005c58:	4821      	ldr	r0, [pc, #132]	; (8005ce0 <systemSettingLog+0xe0>)
 8005c5a:	f7ff fef3 	bl	8005a44 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8005c5e:	9903      	ldr	r1, [sp, #12]
 8005c60:	4820      	ldr	r0, [pc, #128]	; (8005ce4 <systemSettingLog+0xe4>)
 8005c62:	fb91 f1f4 	sdiv	r1, r1, r4
 8005c66:	f7ff feed 	bl	8005a44 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8005c6a:	9904      	ldr	r1, [sp, #16]
 8005c6c:	481e      	ldr	r0, [pc, #120]	; (8005ce8 <systemSettingLog+0xe8>)
 8005c6e:	fb91 f1f4 	sdiv	r1, r1, r4
 8005c72:	f7ff fee7 	bl	8005a44 <lc_print>

#if defined(STM32F7)
  uint32_t acr = FLASH->ACR;
 8005c76:	4b1d      	ldr	r3, [pc, #116]	; (8005cec <systemSettingLog+0xec>)
    return "False";
 8005c78:	4c1d      	ldr	r4, [pc, #116]	; (8005cf0 <systemSettingLog+0xf0>)
  uint32_t acr = FLASH->ACR;
 8005c7a:	6819      	ldr	r1, [r3, #0]
    return "False";
 8005c7c:	1d65      	adds	r5, r4, #5
  uint32_t ccr = SCB->CCR;
 8005c7e:	4b1d      	ldr	r3, [pc, #116]	; (8005cf4 <systemSettingLog+0xf4>)
    return "False";
 8005c80:	f411 7f80 	tst.w	r1, #256	; 0x100
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8005c84:	f104 00ed 	add.w	r0, r4, #237	; 0xed
  uint32_t ccr = SCB->CCR;
 8005c88:	695e      	ldr	r6, [r3, #20]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8005c8a:	f001 030f 	and.w	r3, r1, #15
    return "False";
 8005c8e:	bf14      	ite	ne
 8005c90:	4622      	movne	r2, r4
 8005c92:	462a      	moveq	r2, r5
 8005c94:	f411 7f00 	tst.w	r1, #512	; 0x200
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	bf14      	ite	ne
 8005c9c:	4623      	movne	r3, r4
 8005c9e:	462b      	moveq	r3, r5
 8005ca0:	f7ff fed0 	bl	8005a44 <lc_print>
    return "False";
 8005ca4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
      bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8005ca8:	f504 7095 	add.w	r0, r4, #298	; 0x12a
    return "False";
 8005cac:	bf14      	ite	ne
 8005cae:	4621      	movne	r1, r4
 8005cb0:	4629      	moveq	r1, r5
 8005cb2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8005cb6:	bf14      	ite	ne
 8005cb8:	4622      	movne	r2, r4
 8005cba:	462a      	moveq	r2, r5
 8005cbc:	f7ff fec2 	bl	8005a44 <lc_print>

#if defined(STM32L5) || defined(STM32U5)
  LC_PRINT(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif

}
 8005cc0:	b008      	add	sp, #32
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
  case 0x449: str = "STM32F7xx"; break;
 8005cc4:	4a02      	ldr	r2, [pc, #8]	; (8005cd0 <systemSettingLog+0xd0>)
 8005cc6:	e7b8      	b.n	8005c3a <systemSettingLog+0x3a>
 8005cc8:	0800ff42 	.word	0x0800ff42
 8005ccc:	0800ff5f 	.word	0x0800ff5f
 8005cd0:	0800ff25 	.word	0x0800ff25
 8005cd4:	0800ff80 	.word	0x0800ff80
 8005cd8:	0800ffb1 	.word	0x0800ffb1
 8005cdc:	000f4240 	.word	0x000f4240
 8005ce0:	0800ffd9 	.word	0x0800ffd9
 8005ce4:	0800fff2 	.word	0x0800fff2
 8005ce8:	0801000b 	.word	0x0801000b
 8005cec:	40023c00 	.word	0x40023c00
 8005cf0:	0800ff37 	.word	0x0800ff37
 8005cf4:	e000ed00 	.word	0xe000ed00

08005cf8 <dwtIpInit>:
};

#if USE_SYSTICK_ONLY == 0

__STATIC_INLINE void dwtIpInit(void) {
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005cf8:	4a0a      	ldr	r2, [pc, #40]	; (8005d24 <dwtIpInit+0x2c>)
 8005cfa:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8005cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d02:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
 8005d06:	f5a2 425d 	sub.w	r2, r2, #56576	; 0xdd00
 8005d0a:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <dwtIpInit+0x30>)
 8005d0c:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
#endif

  DWT->CYCCNT = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	6053      	str	r3, [r2, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 8005d14:	6813      	ldr	r3, [r2, #0]
 8005d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	6013      	str	r3, [r2, #0]
}
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	e000ed00 	.word	0xe000ed00
 8005d28:	c5acce55 	.word	0xc5acce55

08005d2c <cyclesCounterStart>:
  dwtIpInit();
#endif
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 8005d2c:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
#else
  cyclesCount.tick_start = HAL_GetTick();
 8005d2e:	f7fb fe1b 	bl	8001968 <HAL_GetTick>
 8005d32:	4b04      	ldr	r3, [pc, #16]	; (8005d44 <cyclesCounterStart+0x18>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8005d34:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <cyclesCounterStart+0x1c>)
 8005d36:	2100      	movs	r1, #0
  cyclesCount.tick_start = HAL_GetTick();
 8005d38:	6098      	str	r0, [r3, #8]
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8005d3a:	6051      	str	r1, [r2, #4]
  return DWT->CYCCNT;
 8005d3c:	6852      	ldr	r2, [r2, #4]
  dwtReset();
  cyclesCount.dwt_start = dwtGetCycles();
 8005d3e:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 8005d40:	bd08      	pop	{r3, pc}
 8005d42:	bf00      	nop
 8005d44:	200027bc 	.word	0x200027bc
 8005d48:	e0001000 	.word	0xe0001000

08005d4c <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8005d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return DWT->CYCCNT;
 8005d4e:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <cyclesCounterEnd+0x40>)
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(dwtGetCycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8005d50:	2100      	movs	r1, #0
 8005d52:	4d0f      	ldr	r5, [pc, #60]	; (8005d90 <cyclesCounterEnd+0x44>)
  return DWT->CYCCNT;
 8005d54:	685c      	ldr	r4, [r3, #4]
  dwt_e = dwtGetCycles() - cyclesCount.dwt_start;
 8005d56:	686b      	ldr	r3, [r5, #4]
 8005d58:	9101      	str	r1, [sp, #4]
 8005d5a:	1ae4      	subs	r4, r4, r3
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8005d5c:	f7fb fe04 	bl	8001968 <HAL_GetTick>
 8005d60:	68ab      	ldr	r3, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 8005d62:	682a      	ldr	r2, [r5, #0]
  tick_e = HAL_GetTick() - cyclesCount.tick_start;
 8005d64:	1ac0      	subs	r0, r0, r3
  if (tick_e > cyclesCount.dwt_max) {
 8005d66:	9901      	ldr	r1, [sp, #4]
 8005d68:	4290      	cmp	r0, r2
 8005d6a:	d90c      	bls.n	8005d86 <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	f7fa fbcd 	bl	800050c <__aeabi_uldivmod>
 8005d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d76:	fba0 0303 	umull	r0, r3, r0, r3
 8005d7a:	1900      	adds	r0, r0, r4
 8005d7c:	eba3 0101 	sub.w	r1, r3, r1
 8005d80:	4604      	mov	r4, r0
 8005d82:	f141 0100 	adc.w	r1, r1, #0
  }
  return dwt_e;
#endif
#endif
}
 8005d86:	4620      	mov	r0, r4
 8005d88:	b003      	add	sp, #12
 8005d8a:	bd30      	pop	{r4, r5, pc}
 8005d8c:	e0001000 	.word	0xe0001000
 8005d90:	200027bc 	.word	0x200027bc

08005d94 <aiOnExecNode_cb>:
 */

#ifdef HAS_OBSERVER
static ai_u32 aiOnExecNode_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 8005d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d98:	460d      	mov	r5, r1
 8005d9a:	4617      	mov	r7, r2

  struct ai_network_exec_ctx *ctx = (struct ai_network_exec_ctx*)cookie;
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8005d9c:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
    const ai_observer_node *node) {
 8005da0:	ed2d 8b04 	vpush	{d8-d9}
 8005da4:	b091      	sub	sp, #68	; 0x44

  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 8005da6:	f7ff ffd1 	bl	8005d4c <cyclesCounterEnd>

  if (flags & AI_OBSERVER_PRE_EVT) {
 8005daa:	f015 0602 	ands.w	r6, r5, #2
  volatile uint64_t ts = cyclesCounterEnd(); // dwtGetCycles(); /* time stamp to mark the entry */
 8005dae:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (flags & AI_OBSERVER_PRE_EVT) {
 8005db2:	d011      	beq.n	8005dd8 <aiOnExecNode_cb+0x44>
    obs_ctx->n_cb_in++;
 8005db4:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8005db6:	05ea      	lsls	r2, r5, #23
    obs_ctx->n_cb_in++;
 8005db8:	f103 0301 	add.w	r3, r3, #1
 8005dbc:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8005dbe:	d503      	bpl.n	8005dc8 <aiOnExecNode_cb+0x34>
      obs_ctx->tnodes = ts;
 8005dc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dc4:	e9c4 2308 	strd	r2, r3, [r4, #32]
      // break; /* currently (X-CUBE-AI 5.x) only one output tensor is available by operator */
    }
    obs_ctx->tcom += cyclesCounterEnd();
  }

  cyclesCounterStart();
 8005dc8:	f7ff ffb0 	bl	8005d2c <cyclesCounterStart>
  return 0;
}
 8005dcc:	2000      	movs	r0, #0
 8005dce:	b011      	add	sp, #68	; 0x44
 8005dd0:	ecbd 8b04 	vpop	{d8-d9}
 8005dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 8005dd8:	076b      	lsls	r3, r5, #29
 8005dda:	d5f5      	bpl.n	8005dc8 <aiOnExecNode_cb+0x34>
    cyclesCounterStart();
 8005ddc:	f7ff ffa6 	bl	8005d2c <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 8005de0:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8005de4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005de8:	181b      	adds	r3, r3, r0
 8005dea:	eb42 0201 	adc.w	r2, r2, r1
      type = EnumLayerType_LAYER_TYPE_INTERNAL;
 8005dee:	f415 7f00 	tst.w	r5, #512	; 0x200
    obs_ctx->tnodes += ts;
 8005df2:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 8005df6:	68a3      	ldr	r3, [r4, #8]
      type = EnumLayerType_LAYER_TYPE_INTERNAL;
 8005df8:	bf14      	ite	ne
 8005dfa:	2502      	movne	r5, #2
 8005dfc:	2501      	moveq	r5, #1
    if (obs_ctx->no_data)
 8005dfe:	7d22      	ldrb	r2, [r4, #20]
    obs_ctx->n_cb_out++;
 8005e00:	3301      	adds	r3, #1
 8005e02:	60a3      	str	r3, [r4, #8]
    type = type << 16;
 8005e04:	042b      	lsls	r3, r5, #16
    if (obs_ctx->no_data)
 8005e06:	b10a      	cbz	r2, 8005e0c <aiOnExecNode_cb+0x78>
      type |= PB_BUFFER_TYPE_SEND_WITHOUT_DATA;
 8005e08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	8811      	ldrh	r1, [r2, #0]
 8005e10:	2901      	cmp	r1, #1
 8005e12:	d915      	bls.n	8005e40 <aiOnExecNode_cb+0xac>
    type |= (node->type & (ai_u16)0x7FFF);
 8005e14:	887d      	ldrh	r5, [r7, #2]
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8005e16:	f04f 0900 	mov.w	r9, #0
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 8005e1a:	f8d2 8004 	ldr.w	r8, [r2, #4]
    type |= (node->type & (ai_u16)0x7FFF);
 8005e1e:	f3c5 050e 	ubfx	r5, r5, #0, #15
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8005e22:	eddf 8a44 	vldr	s17, [pc, #272]	; 8005f34 <aiOnExecNode_cb+0x1a0>
    type |= (node->type & (ai_u16)0x7FFF);
 8005e26:	431d      	orrs	r5, r3
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8005e28:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005e2c:	429e      	cmp	r6, r3
 8005e2e:	d207      	bcs.n	8005e40 <aiOnExecNode_cb+0xac>
 8005e30:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005e34:	b123      	cbz	r3, 8005e40 <aiOnExecNode_cb+0xac>
 8005e36:	f853 a026 	ldr.w	sl, [r3, r6, lsl #2]
 8005e3a:	f1ba 0f00 	cmp.w	sl, #0
 8005e3e:	d109      	bne.n	8005e54 <aiOnExecNode_cb+0xc0>
    obs_ctx->tcom += cyclesCounterEnd();
 8005e40:	f7ff ff84 	bl	8005d4c <cyclesCounterEnd>
 8005e44:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8005e48:	1818      	adds	r0, r3, r0
 8005e4a:	eb42 0101 	adc.w	r1, r2, r1
 8005e4e:	e9c4 0106 	strd	r0, r1, [r4, #24]
 8005e52:	e7b9      	b.n	8005dc8 <aiOnExecNode_cb+0x34>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8005e54:	f8da 3000 	ldr.w	r3, [sl]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d058      	beq.n	8005f0e <aiOnExecNode_cb+0x17a>
 8005e5c:	685a      	ldr	r2, [r3, #4]
 8005e5e:	2a00      	cmp	r2, #0
 8005e60:	d055      	beq.n	8005f0e <aiOnExecNode_cb+0x17a>
 8005e62:	8859      	ldrh	r1, [r3, #2]
 8005e64:	2900      	cmp	r1, #0
 8005e66:	d052      	beq.n	8005f0e <aiOnExecNode_cb+0x17a>
 8005e68:	6812      	ldr	r2, [r2, #0]
 8005e6a:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 8005e6e:	f8da 0018 	ldr.w	r0, [sl, #24]
 8005e72:	6801      	ldr	r1, [r0, #0]
 8005e74:	f411 0b00 	ands.w	fp, r1, #8388608	; 0x800000
 8005e78:	d04c      	beq.n	8005f14 <aiOnExecNode_cb+0x180>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d058      	beq.n	8005f30 <aiOnExecNode_cb+0x19c>
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	2a00      	cmp	r2, #0
 8005e82:	d053      	beq.n	8005f2c <aiOnExecNode_cb+0x198>
 8005e84:	885b      	ldrh	r3, [r3, #2]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d052      	beq.n	8005f30 <aiOnExecNode_cb+0x19c>
 8005e8a:	6853      	ldr	r3, [r2, #4]
 8005e8c:	f993 b000 	ldrsb.w	fp, [r3]
      ai_buffer buffer =
 8005e90:	68c3      	ldr	r3, [r0, #12]
          AI_BUFFER_INIT(
 8005e92:	4650      	mov	r0, sl
      ai_buffer buffer =
 8005e94:	9109      	str	r1, [sp, #36]	; 0x24
          AI_BUFFER_INIT(
 8005e96:	2101      	movs	r1, #1
      ai_buffer buffer =
 8005e98:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005e9c:	e9cd 390a 	strd	r3, r9, [sp, #40]	; 0x28
          AI_BUFFER_INIT(
 8005ea0:	f002 faa0 	bl	80083e4 <get_tensor_size>
      ai_buffer buffer =
 8005ea4:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8005ea8:	900d      	str	r0, [sp, #52]	; 0x34
 8005eaa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
          AI_BUFFER_INIT(
 8005eae:	f8da 3008 	ldr.w	r3, [sl, #8]
      ai_buffer buffer =
 8005eb2:	990e      	ldr	r1, [sp, #56]	; 0x38
          AI_BUFFER_INIT(
 8005eb4:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 8005eb8:	f363 211f 	bfi	r1, r3, #8, #24
 8005ebc:	910e      	str	r1, [sp, #56]	; 0x38
 8005ebe:	f8da 300c 	ldr.w	r3, [sl, #12]
 8005ec2:	930f      	str	r3, [sp, #60]	; 0x3c
      if (i < (GET_TENSOR_LIST_SIZE(tl) - 1)) {
 8005ec4:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	429e      	cmp	r6, r3
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8005ecc:	f106 0601 	add.w	r6, r6, #1
        n_type = type | (EnumLayerType_LAYER_TYPE_INTERNAL_DATA_NO_LAST << 16);
 8005ed0:	bf34      	ite	cc
 8005ed2:	f445 2380 	orrcc.w	r3, r5, #262144	; 0x40000
        n_type = type;
 8005ed6:	462b      	movcs	r3, r5
 8005ed8:	9305      	str	r3, [sp, #20]
      aiPbMgrSendAiBuffer4(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8005eda:	e9d4 a303 	ldrd	sl, r3, [r4, #12]
 8005ede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ee2:	ee09 3a10 	vmov	s18, r3
 8005ee6:	88bb      	ldrh	r3, [r7, #4]
 8005ee8:	9304      	str	r3, [sp, #16]
 8005eea:	f7ff fe39 	bl	8005b60 <dwtCyclesToFloatMs>
 8005eee:	9b04      	ldr	r3, [sp, #16]
 8005ef0:	aa09      	add	r2, sp, #36	; 0x24
 8005ef2:	eef0 0a48 	vmov.f32	s1, s16
 8005ef6:	ee19 1a10 	vmov	r1, s18
 8005efa:	9201      	str	r2, [sp, #4]
 8005efc:	4650      	mov	r0, sl
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	2202      	movs	r2, #2
 8005f02:	9b05      	ldr	r3, [sp, #20]
 8005f04:	f8cd b008 	str.w	fp, [sp, #8]
 8005f08:	f7ff f9fe 	bl	8005308 <aiPbMgrSendAiBuffer4>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 8005f0c:	e78c      	b.n	8005e28 <aiOnExecNode_cb+0x94>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 8005f0e:	eeb0 8a68 	vmov.f32	s16, s17
 8005f12:	e7ac      	b.n	8005e6e <aiOnExecNode_cb+0xda>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0bb      	beq.n	8005e90 <aiOnExecNode_cb+0xfc>
 8005f18:	685a      	ldr	r2, [r3, #4]
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	d0b8      	beq.n	8005e90 <aiOnExecNode_cb+0xfc>
 8005f1e:	885b      	ldrh	r3, [r3, #2]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0b5      	beq.n	8005e90 <aiOnExecNode_cb+0xfc>
 8005f24:	6853      	ldr	r3, [r2, #4]
 8005f26:	f893 b000 	ldrb.w	fp, [r3]
 8005f2a:	e7b1      	b.n	8005e90 <aiOnExecNode_cb+0xfc>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8005f2c:	4693      	mov	fp, r2
 8005f2e:	e7af      	b.n	8005e90 <aiOnExecNode_cb+0xfc>
 8005f30:	469b      	mov	fp, r3
 8005f32:	e7ad      	b.n	8005e90 <aiOnExecNode_cb+0xfc>
 8005f34:	00000000 	.word	0x00000000

08005f38 <aiExecCtx>:
 * AI-related functions
 * -----------------------------------------------------------------------------
 */

static struct ai_network_exec_ctx *aiExecCtx(const char *nn_name, int pos)
{
 8005f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f3c:	4606      	mov	r6, r0
  struct ai_network_exec_ctx *cur = NULL;

  if (!nn_name)
    return NULL;

  if (!nn_name[0]) {
 8005f3e:	7800      	ldrb	r0, [r0, #0]
 8005f40:	b958      	cbnz	r0, 8005f5a <aiExecCtx+0x22>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 8005f42:	2901      	cmp	r1, #1
 8005f44:	d807      	bhi.n	8005f56 <aiExecCtx+0x1e>
 8005f46:	2284      	movs	r2, #132	; 0x84
 8005f48:	4b16      	ldr	r3, [pc, #88]	; (8005fa4 <aiExecCtx+0x6c>)
 8005f4a:	4351      	muls	r1, r2
 8005f4c:	5858      	ldr	r0, [r3, r1]
 8005f4e:	185a      	adds	r2, r3, r1
      cur = &net_exec_ctx[pos];
 8005f50:	2800      	cmp	r0, #0
 8005f52:	bf18      	it	ne
 8005f54:	4610      	movne	r0, r2
      }
      cur = NULL;
    }
  }
  return cur;
}
 8005f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f5a:	4d12      	ldr	r5, [pc, #72]	; (8005fa4 <aiExecCtx+0x6c>)
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8005f5c:	f04f 0800 	mov.w	r8, #0
 8005f60:	462c      	mov	r4, r5
      if (cur->handle &&
 8005f62:	682b      	ldr	r3, [r5, #0]
 8005f64:	b1bb      	cbz	r3, 8005f96 <aiExecCtx+0x5e>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8005f66:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8005f6a:	4648      	mov	r0, r9
 8005f6c:	f7fa f968 	bl	8000240 <strlen>
 8005f70:	4607      	mov	r7, r0
 8005f72:	4630      	mov	r0, r6
 8005f74:	f7fa f964 	bl	8000240 <strlen>
      if (cur->handle &&
 8005f78:	4287      	cmp	r7, r0
 8005f7a:	d10c      	bne.n	8005f96 <aiExecCtx+0x5e>
          (strncmp(cur->report.model_name, nn_name,
 8005f7c:	463a      	mov	r2, r7
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4648      	mov	r0, r9
 8005f82:	f007 fe13 	bl	800dbac <strncmp>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8005f86:	b930      	cbnz	r0, 8005f96 <aiExecCtx+0x5e>
      cur = &net_exec_ctx[idx];
 8005f88:	2084      	movs	r0, #132	; 0x84
 8005f8a:	fb00 4008 	mla	r0, r0, r8, r4
 8005f8e:	e7e2      	b.n	8005f56 <aiExecCtx+0x1e>
 8005f90:	f04f 0801 	mov.w	r8, #1
 8005f94:	e7e5      	b.n	8005f62 <aiExecCtx+0x2a>
    for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8005f96:	3584      	adds	r5, #132	; 0x84
 8005f98:	f1b8 0f00 	cmp.w	r8, #0
 8005f9c:	d0f8      	beq.n	8005f90 <aiExecCtx+0x58>
  struct ai_network_exec_ctx *cur = NULL;
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	e7d9      	b.n	8005f56 <aiExecCtx+0x1e>
 8005fa2:	bf00      	nop
 8005fa4:	200027e4 	.word	0x200027e4

08005fa8 <aiPbCmdNNInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8005fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005faa:	4604      	mov	r4, r0
 8005fac:	460d      	mov	r5, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 8005fae:	300c      	adds	r0, #12
 8005fb0:	f850 1c04 	ldr.w	r1, [r0, #-4]
 8005fb4:	f7ff ffc0 	bl	8005f38 <aiExecCtx>
  if (ctx)
 8005fb8:	b140      	cbz	r0, 8005fcc <aiPbCmdNNInfo+0x24>
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 8005fba:	1d03      	adds	r3, r0, #4
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4620      	mov	r0, r4
        &ctx->report);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 8005fc2:	b003      	add	sp, #12
 8005fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    aiPbMgrSendNNInfo(req, resp, EnumState_S_IDLE,
 8005fc8:	f7ff ba36 	b.w	8005438 <aiPbMgrSendNNInfo>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8005fcc:	2304      	movs	r3, #4
 8005fce:	4629      	mov	r1, r5
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	f7ff f937 	bl	8005248 <aiPbMgrSendAck>
}
 8005fda:	b003      	add	sp, #12
 8005fdc:	bd30      	pop	{r4, r5, pc}
	...

08005fe0 <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8005fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	460d      	mov	r5, r1
  ai_buffer ai_output[AI_MNETWORK_OUT_NUM];

  UNUSED(param);

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8005fe8:	300c      	adds	r0, #12
 8005fea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 8005fee:	ed2d 8b02 	vpush	{d8}
 8005ff2:	b0a5      	sub	sp, #148	; 0x94
  ctx = aiExecCtx(req->name, -1);
 8005ff4:	f7ff ffa0 	bl	8005f38 <aiExecCtx>
  if (!ctx) {
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	b958      	cbnz	r0, 8006014 <aiPbCmdNNRun+0x34>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8005ffc:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8005ffe:	2204      	movs	r2, #4
 8006000:	4629      	mov	r1, r5
 8006002:	4630      	mov	r0, r6
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	f7ff f91f 	bl	8005248 <aiPbMgrSendAck>
        0, dwtCyclesToFloatMs(tend),
        &ai_output[i], 0.0f, 0);
  }

  aiObserverUnbind(ctx);
}
 800600a:	b025      	add	sp, #148	; 0x94
 800600c:	ecbd 8b02 	vpop	{d8}
 8006010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  aiObserverConfig(ctx, req);
 8006014:	68b2      	ldr	r2, [r6, #8]
  net_obs_ctx.no_data = false;
 8006016:	2100      	movs	r1, #0
 8006018:	4b80      	ldr	r3, [pc, #512]	; (800621c <aiPbCmdNNRun+0x23c>)
  net_obs_ctx.tcom = 0ULL;
 800601a:	2000      	movs	r0, #0
  net_obs_ctx.n_cb_in  = 0;
 800601c:	2700      	movs	r7, #0
return 0;
 800601e:	f10d 0820 	add.w	r8, sp, #32
  net_obs_ctx.no_data = false;
 8006022:	7519      	strb	r1, [r3, #20]
  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR) ==
 8006024:	f012 0101 	ands.w	r1, r2, #1
    ai_input[i] = ctx->report.inputs[i];
 8006028:	f04f 0a1c 	mov.w	sl, #28
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 800602c:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006230 <aiPbCmdNNRun+0x250>
    net_obs_ctx.is_enabled = true;
 8006030:	bf18      	it	ne
 8006032:	2101      	movne	r1, #1
  if ((req->param & EnumRunParam_P_RUN_MODE_INSPECTOR_WITHOUT_DATA) ==
 8006034:	0792      	lsls	r2, r2, #30
  ctx->obs_ctx = &net_obs_ctx;
 8006036:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    net_obs_ctx.is_enabled = true;
 800603a:	bf48      	it	mi
 800603c:	2201      	movmi	r2, #1
    net_obs_ctx.is_enabled = true;
 800603e:	7019      	strb	r1, [r3, #0]
  net_obs_ctx.tcom = 0ULL;
 8006040:	f04f 0100 	mov.w	r1, #0
    net_obs_ctx.is_enabled = true;
 8006044:	bf44      	itt	mi
 8006046:	701a      	strbmi	r2, [r3, #0]
    net_obs_ctx.no_data = true;
 8006048:	751a      	strbmi	r2, [r3, #20]
  net_obs_ctx.tcom = 0ULL;
 800604a:	e9c3 0106 	strd	r0, r1, [r3, #24]
  net_obs_ctx.tnodes = 0ULL;
 800604e:	e9c3 0108 	strd	r0, r1, [r3, #32]
  net_obs_ctx.n_cb_out = 0;
 8006052:	e9c3 7701 	strd	r7, r7, [r3, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8006056:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8006058:	42bb      	cmp	r3, r7
 800605a:	dc42      	bgt.n	80060e2 <aiPbCmdNNRun+0x102>
 800605c:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8006060:	f04f 0e00 	mov.w	lr, #0
    ai_output[i] = ctx->report.outputs[i];
 8006064:	f04f 0b1c 	mov.w	fp, #28
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8006068:	46c1      	mov	r9, r8
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800606a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800606c:	4573      	cmp	r3, lr
 800606e:	dc50      	bgt.n	8006112 <aiPbCmdNNRun+0x132>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 8006070:	2700      	movs	r7, #0
 8006072:	a808      	add	r0, sp, #32
 8006074:	f7ff f908 	bl	8005288 <aiPbAiBufferSize>
 8006078:	2201      	movs	r2, #1
 800607a:	4603      	mov	r3, r0
 800607c:	4629      	mov	r1, r5
 800607e:	4630      	mov	r0, r6
 8006080:	9700      	str	r7, [sp, #0]
 8006082:	f7ff f8e1 	bl	8005248 <aiPbMgrSendAck>
    res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 8006086:	f04f 091c 	mov.w	r9, #28
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800608a:	463b      	mov	r3, r7
 800608c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 800608e:	429a      	cmp	r2, r3
 8006090:	dc58      	bgt.n	8006144 <aiPbCmdNNRun+0x164>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8006092:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
  if (obs_ctx->is_enabled == false)
 8006096:	783b      	ldrb	r3, [r7, #0]
 8006098:	b18b      	cbz	r3, 80060be <aiPbCmdNNRun+0xde>
  if (ctx->handle == AI_HANDLE_NULL)
 800609a:	6820      	ldr	r0, [r4, #0]
 800609c:	b178      	cbz	r0, 80060be <aiPbCmdNNRun+0xde>
  ai_mnetwork_get_private_handle(ctx->handle,
 800609e:	a907      	add	r1, sp, #28
 80060a0:	aa16      	add	r2, sp, #88	; 0x58
  obs_ctx->cresp = cresp;
 80060a2:	e9c7 6503 	strd	r6, r5, [r7, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 80060a6:	f000 facb 	bl	8006640 <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 80060aa:	4b5d      	ldr	r3, [pc, #372]	; (8006220 <aiPbCmdNNRun+0x240>)
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80060ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 80060b0:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 80060b4:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80060b6:	9807      	ldr	r0, [sp, #28]
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 80060b8:	633b      	str	r3, [r7, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 80060ba:	f004 fcb7 	bl	800aa2c <ai_platform_observer_register_s>
  cyclesCounterStart();
 80060be:	f7ff fe35 	bl	8005d2c <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 80060c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80060c4:	a908      	add	r1, sp, #32
 80060c6:	6820      	ldr	r0, [r4, #0]
 80060c8:	f000 faa9 	bl	800661e <ai_mnetwork_run>
  if (batch != 1) {
 80060cc:	2801      	cmp	r0, #1
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 80060ce:	4682      	mov	sl, r0
  if (batch != 1) {
 80060d0:	d049      	beq.n	8006166 <aiPbCmdNNRun+0x186>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 80060d2:	6820      	ldr	r0, [r4, #0]
 80060d4:	f000 fa77 	bl	80065c6 <ai_mnetwork_get_error>
 80060d8:	4952      	ldr	r1, [pc, #328]	; (8006224 <aiPbCmdNNRun+0x244>)
 80060da:	f7ff fa81 	bl	80055e0 <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 80060de:	230a      	movs	r3, #10
 80060e0:	e78d      	b.n	8005ffe <aiPbCmdNNRun+0x1e>
    ai_input[i] = ctx->report.inputs[i];
 80060e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80060e4:	46c4      	mov	ip, r8
 80060e6:	fb0a 3907 	mla	r9, sl, r7, r3
 80060ea:	46ce      	mov	lr, r9
 80060ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80060f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80060f4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
    if (ctx->report.inputs[i].data)
 80060f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
    ai_input[i] = ctx->report.inputs[i];
 80060fc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
    if (ctx->report.inputs[i].data)
 8006100:	b90b      	cbnz	r3, 8006106 <aiPbCmdNNRun+0x126>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8006102:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8006106:	f8c8 3004 	str.w	r3, [r8, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 800610a:	3701      	adds	r7, #1
 800610c:	f108 081c 	add.w	r8, r8, #28
 8006110:	e7a1      	b.n	8006056 <aiPbCmdNNRun+0x76>
    ai_output[i] = ctx->report.outputs[i];
 8006112:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006114:	464f      	mov	r7, r9
 8006116:	fb0b 3a0e 	mla	sl, fp, lr, r3
 800611a:	46d4      	mov	ip, sl
 800611c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006120:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8006122:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
    if (ctx->report.outputs[i].data)
 8006126:	f8da 3004 	ldr.w	r3, [sl, #4]
    ai_output[i] = ctx->report.outputs[i];
 800612a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
    if (ctx->report.outputs[i].data)
 800612e:	b913      	cbnz	r3, 8006136 <aiPbCmdNNRun+0x156>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8006130:	4b3d      	ldr	r3, [pc, #244]	; (8006228 <aiPbCmdNNRun+0x248>)
 8006132:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 8006136:	f8c9 3004 	str.w	r3, [r9, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 800613a:	f10e 0e01 	add.w	lr, lr, #1
 800613e:	f109 091c 	add.w	r9, r9, #28
 8006142:	e792      	b.n	800606a <aiPbCmdNNRun+0x8a>
    if ((i + 1) == ctx->report.n_inputs)
 8006144:	1c5f      	adds	r7, r3, #1
    res = aiPbMgrReceiveAiBuffer3(req, resp, state, &ai_input[i]);
 8006146:	a908      	add	r1, sp, #32
 8006148:	4630      	mov	r0, r6
 800614a:	fb09 1303 	mla	r3, r9, r3, r1
 800614e:	42ba      	cmp	r2, r7
 8006150:	bf0c      	ite	eq
 8006152:	2202      	moveq	r2, #2
 8006154:	2201      	movne	r2, #1
 8006156:	4629      	mov	r1, r5
 8006158:	f7ff f89a 	bl	8005290 <aiPbMgrReceiveAiBuffer3>
    if (res != true)
 800615c:	2800      	cmp	r0, #0
 800615e:	f43f af54 	beq.w	800600a <aiPbCmdNNRun+0x2a>
 8006162:	463b      	mov	r3, r7
 8006164:	e792      	b.n	800608c <aiPbCmdNNRun+0xac>
  tend = cyclesCounterEnd();
 8006166:	f7ff fdf1 	bl	8005d4c <cyclesCounterEnd>
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 800616a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 800616e:	e9d2 3706 	ldrd	r3, r7, [r2, #24]
 8006172:	e9d2 c208 	ldrd	ip, r2, [r2, #32]
 8006176:	eb13 030c 	adds.w	r3, r3, ip
 800617a:	eb47 0202 	adc.w	r2, r7, r2
 800617e:	181f      	adds	r7, r3, r0
 8006180:	eb42 0901 	adc.w	r9, r2, r1
  aiObserverSendReport(req, resp, EnumState_S_PROCESSING, ctx,
 8006184:	4638      	mov	r0, r7
 8006186:	4649      	mov	r1, r9
 8006188:	f7ff fcea 	bl	8005b60 <dwtCyclesToFloatMs>
  if (obs_ctx->is_enabled == false)
 800618c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	b183      	cbz	r3, 80061b6 <aiPbCmdNNRun+0x1d6>
  resp->which_payload = respMsg_report_tag;
 8006194:	2315      	movs	r3, #21
  resp->payload.report.n_nodes = ctx->report.n_nodes;
 8006196:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  aiPbMgrSendResp(req, resp, state);
 8006198:	4629      	mov	r1, r5
 800619a:	4630      	mov	r0, r6
  resp->which_payload = respMsg_report_tag;
 800619c:	80eb      	strh	r3, [r5, #6]
  resp->payload.report.id = 0;
 800619e:	2300      	movs	r3, #0
  resp->payload.report.elapsed_ms = dur_ms;
 80061a0:	ed85 0a06 	vstr	s0, [r5, #24]
  resp->payload.report.id = 0;
 80061a4:	60ab      	str	r3, [r5, #8]
  resp->payload.report.n_nodes = ctx->report.n_nodes;
 80061a6:	616a      	str	r2, [r5, #20]
  aiPbMgrSendResp(req, resp, state);
 80061a8:	2202      	movs	r2, #2
  resp->payload.report.num_inferences = 1;
 80061aa:	e9c5 3a03 	strd	r3, sl, [r5, #12]
  aiPbMgrSendResp(req, resp, state);
 80061ae:	f7fe fff7 	bl	80051a0 <aiPbMgrSendResp>
  aiPbMgrWaitAck();
 80061b2:	f7ff f853 	bl	800525c <aiPbMgrWaitAck>
      state = EnumState_S_DONE;
 80061b6:	f04f 0a00 	mov.w	sl, #0
    aiPbMgrSendAiBuffer4(req, resp, state,
 80061ba:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 800622c <aiPbCmdNNRun+0x24c>
 80061be:	46d3      	mov	fp, sl
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 80061c0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80061c2:	4552      	cmp	r2, sl
 80061c4:	dc10      	bgt.n	80061e8 <aiPbCmdNNRun+0x208>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 80061c6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
  if (obs_ctx->is_enabled == false)
 80061ca:	782b      	ldrb	r3, [r5, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f43f af1c 	beq.w	800600a <aiPbCmdNNRun+0x2a>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 80061d2:	a907      	add	r1, sp, #28
 80061d4:	aa16      	add	r2, sp, #88	; 0x58
 80061d6:	6820      	ldr	r0, [r4, #0]
 80061d8:	f000 fa32 	bl	8006640 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 80061dc:	f105 0128 	add.w	r1, r5, #40	; 0x28
 80061e0:	9807      	ldr	r0, [sp, #28]
 80061e2:	f004 fce5 	bl	800abb0 <ai_platform_observer_unregister_s>
  return 0;
 80061e6:	e710      	b.n	800600a <aiPbCmdNNRun+0x2a>
    if ((i + 1) == ctx->report.n_outputs)
 80061e8:	f10a 0a01 	add.w	sl, sl, #1
    aiPbMgrSendAiBuffer4(req, resp, state,
 80061ec:	4638      	mov	r0, r7
 80061ee:	4649      	mov	r1, r9
      state = EnumState_S_DONE;
 80061f0:	4592      	cmp	sl, r2
 80061f2:	bf14      	ite	ne
 80061f4:	2202      	movne	r2, #2
 80061f6:	2203      	moveq	r2, #3
 80061f8:	9205      	str	r2, [sp, #20]
    aiPbMgrSendAiBuffer4(req, resp, state,
 80061fa:	f7ff fcb1 	bl	8005b60 <dwtCyclesToFloatMs>
 80061fe:	eef0 0a48 	vmov.f32	s1, s16
 8006202:	2300      	movs	r3, #0
 8006204:	9a05      	ldr	r2, [sp, #20]
 8006206:	4629      	mov	r1, r5
 8006208:	4630      	mov	r0, r6
 800620a:	f8cd b000 	str.w	fp, [sp]
 800620e:	e9cd 8b01 	strd	r8, fp, [sp, #4]
 8006212:	f7ff f879 	bl	8005308 <aiPbMgrSendAiBuffer4>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8006216:	f108 081c 	add.w	r8, r8, #28
 800621a:	e7d1      	b.n	80061c0 <aiPbCmdNNRun+0x1e0>
 800621c:	200028f0 	.word	0x200028f0
 8006220:	08005d95 	.word	0x08005d95
 8006224:	08010081 	.word	0x08010081
 8006228:	20000058 	.word	0x20000058
 800622c:	00000000 	.word	0x00000000
 8006230:	20000054 	.word	0x20000054

08006234 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8006234:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 8006236:	4c20      	ldr	r4, [pc, #128]	; (80062b8 <aiValidationInit+0x84>)
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8006238:	2500      	movs	r5, #0
 800623a:	4e20      	ldr	r6, [pc, #128]	; (80062bc <aiValidationInit+0x88>)
 800623c:	f104 0010 	add.w	r0, r4, #16
 8006240:	f7ff fc00 	bl	8005a44 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8006244:	2301      	movs	r3, #1
 8006246:	2206      	movs	r2, #6
 8006248:	f104 0116 	add.w	r1, r4, #22
 800624c:	f104 0035 	add.w	r0, r4, #53	; 0x35
 8006250:	f7ff fbf8 	bl	8005a44 <lc_print>
  LC_PRINT("#\r\n");
 8006254:	f104 0042 	add.w	r0, r4, #66	; 0x42
 8006258:	f7ff fbf4 	bl	8005a44 <lc_print>

  systemSettingLog();
 800625c:	f7ff fcd0 	bl	8005c00 <systemSettingLog>

  crcIpInit();
 8006260:	f7ff fc2a 	bl	8005ab8 <crcIpInit>
  HAL_Delay(100);
 8006264:	2064      	movs	r0, #100	; 0x64
  dwtIpInit();
 8006266:	f7ff fd47 	bl	8005cf8 <dwtIpInit>
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 800626a:	6075      	str	r5, [r6, #4]
  HAL_Delay(100);
 800626c:	f7fb fb82 	bl	8001974 <HAL_Delay>
  return DWT->CYCCNT;
 8006270:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 8006272:	2664      	movs	r6, #100	; 0x64
 8006274:	466a      	mov	r2, sp
 8006276:	4629      	mov	r1, r5
 8006278:	fbb0 f0f6 	udiv	r0, r0, r6
 800627c:	f7ff fc34 	bl	8005ae8 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (HAL_Delay(1)=%d.%03d ms)\r\n",
 8006280:	9a03      	ldr	r2, [sp, #12]
 8006282:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8006286:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 800628a:	fb06 3101 	mla	r1, r6, r1, r3
 800628e:	f7ff fbd9 	bl	8005a44 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8006292:	466a      	mov	r2, sp
 8006294:	2100      	movs	r1, #0
 8006296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800629a:	f7ff fc25 	bl	8005ae8 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 800629e:	9a01      	ldr	r2, [sp, #4]
 80062a0:	9b02      	ldr	r3, [sp, #8]
 80062a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
  cyclesCounterInit();

  return 0;
}
 80062a6:	4628      	mov	r0, r5
 80062a8:	fb01 3302 	mla	r3, r1, r2, r3
 80062ac:	4a04      	ldr	r2, [pc, #16]	; (80062c0 <aiValidationInit+0x8c>)
 80062ae:	6013      	str	r3, [r2, #0]
  dwtIpInit();
 80062b0:	f7ff fd22 	bl	8005cf8 <dwtIpInit>
 80062b4:	b004      	add	sp, #16
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	08010081 	.word	0x08010081
 80062bc:	e0001000 	.word	0xe0001000
 80062c0:	200027bc 	.word	0x200027bc

080062c4 <aiValidationProcess>:

int aiValidationProcess(void)
{
 80062c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80062c8:	4c51      	ldr	r4, [pc, #324]	; (8006410 <aiValidationProcess+0x14c>)
 80062ca:	2700      	movs	r7, #0
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80062cc:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8006444 <aiValidationProcess+0x180>
  aiPlatformVersion();
 80062d0:	f7ff f970 	bl	80055b4 <aiPlatformVersion>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80062d4:	3404      	adds	r4, #4
  int res = -1;
 80062d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 80062da:	f108 0917 	add.w	r9, r8, #23
  LC_PRINT("Initializing the network\r\n");
 80062de:	f108 0a48 	add.w	sl, r8, #72	; 0x48
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 80062e2:	f844 7c04 	str.w	r7, [r4, #-4]
 80062e6:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
  LC_PRINT("Discovering the network(s)...\r\n");
 80062ea:	484a      	ldr	r0, [pc, #296]	; (8006414 <aiValidationProcess+0x150>)
 80062ec:	f7ff fbaa 	bl	8005a44 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 80062f0:	4639      	mov	r1, r7
 80062f2:	2000      	movs	r0, #0
 80062f4:	f000 f8e2 	bl	80064bc <ai_mnetwork_find>
    if (nn_name) {
 80062f8:	4606      	mov	r6, r0
 80062fa:	b1a8      	cbz	r0, 8006328 <aiValidationProcess+0x64>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 80062fc:	4601      	mov	r1, r0
 80062fe:	4640      	mov	r0, r8
 8006300:	f7ff fba0 	bl	8005a44 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8006304:	4631      	mov	r1, r6
 8006306:	4648      	mov	r0, r9
 8006308:	f7ff fb9c 	bl	8005a44 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 800630c:	2200      	movs	r2, #0
 800630e:	1f21      	subs	r1, r4, #4
 8006310:	4630      	mov	r0, r6
 8006312:	f000 f8f3 	bl	80064fc <ai_mnetwork_create>
  if (err.type) {
 8006316:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 800631a:	d016      	beq.n	800634a <aiValidationProcess+0x86>
        nn_name = NULL;
 800631c:	2600      	movs	r6, #0
    return -1;
 800631e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    aiLogErr(err, "ai_mnetwork_create");
 8006322:	493d      	ldr	r1, [pc, #244]	; (8006418 <aiValidationProcess+0x154>)
 8006324:	f7ff f95c 	bl	80055e0 <aiLogErr>
    idx++;
 8006328:	3701      	adds	r7, #1
  } while (nn_name);
 800632a:	3484      	adds	r4, #132	; 0x84
 800632c:	2e00      	cmp	r6, #0
 800632e:	d1df      	bne.n	80062f0 <aiValidationProcess+0x2c>
  int r;

  r = aiInit();
  if (r) {
 8006330:	2d00      	cmp	r5, #0
 8006332:	d04a      	beq.n	80063ca <aiValidationProcess+0x106>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 8006334:	4839      	ldr	r0, [pc, #228]	; (800641c <aiValidationProcess+0x158>)
 8006336:	4629      	mov	r1, r5
 8006338:	f7ff fb84 	bl	8005a44 <lc_print>
    HAL_Delay(2000);
 800633c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006340:	f7fb fb18 	bl	8001974 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 8006344:	4628      	mov	r0, r5
 8006346:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 800634a:	4650      	mov	r0, sl
 800634c:	f7ff fb7a 	bl	8005a44 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8006350:	4621      	mov	r1, r4
 8006352:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8006356:	f000 f92b 	bl	80065b0 <ai_mnetwork_get_report>
 800635a:	4683      	mov	fp, r0
    err = ai_mnetwork_get_error(ctx->handle);
 800635c:	f854 0c04 	ldr.w	r0, [r4, #-4]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8006360:	f1bb 0f00 	cmp.w	fp, #0
 8006364:	d10e      	bne.n	8006384 <aiValidationProcess+0xc0>
    err = ai_mnetwork_get_error(ctx->handle);
 8006366:	f000 f92e 	bl	80065c6 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 800636a:	492d      	ldr	r1, [pc, #180]	; (8006420 <aiValidationProcess+0x15c>)
 800636c:	f7ff f938 	bl	80055e0 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8006370:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8006374:	f000 f8fc 	bl	8006570 <ai_mnetwork_destroy>
        nn_name = NULL;
 8006378:	465e      	mov	r6, fp
    return -2;
 800637a:	f06f 0501 	mvn.w	r5, #1
    ctx->handle = AI_HANDLE_NULL;
 800637e:	f844 bc04 	str.w	fp, [r4, #-4]
      if (res)
 8006382:	e7d1      	b.n	8006328 <aiValidationProcess+0x64>
  if (!ai_mnetwork_init(ctx->handle)) {
 8006384:	f000 f92c 	bl	80065e0 <ai_mnetwork_init>
 8006388:	4683      	mov	fp, r0
 800638a:	b980      	cbnz	r0, 80063ae <aiValidationProcess+0xea>
    err = ai_mnetwork_get_error(ctx->handle);
 800638c:	f854 0c04 	ldr.w	r0, [r4, #-4]
        nn_name = NULL;
 8006390:	465e      	mov	r6, fp
    err = ai_mnetwork_get_error(ctx->handle);
 8006392:	f000 f918 	bl	80065c6 <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8006396:	4923      	ldr	r1, [pc, #140]	; (8006424 <aiValidationProcess+0x160>)
 8006398:	f7ff f922 	bl	80055e0 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 800639c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80063a0:	f000 f8e6 	bl	8006570 <ai_mnetwork_destroy>
    return -4;
 80063a4:	f06f 0503 	mvn.w	r5, #3
    ctx->handle = AI_HANDLE_NULL;
 80063a8:	f844 bc04 	str.w	fp, [r4, #-4]
      if (res)
 80063ac:	e7bc      	b.n	8006328 <aiValidationProcess+0x64>
  if (ai_mnetwork_get_report(ctx->handle,
 80063ae:	4621      	mov	r1, r4
 80063b0:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80063b4:	f000 f8fc 	bl	80065b0 <ai_mnetwork_get_report>
 80063b8:	4683      	mov	fp, r0
 80063ba:	b118      	cbz	r0, 80063c4 <aiValidationProcess+0x100>
    aiPrintNetworkInfo(&ctx->report);
 80063bc:	4620      	mov	r0, r4
 80063be:	f7ff fa29 	bl	8005814 <aiPrintNetworkInfo>
      if (res)
 80063c2:	e7b1      	b.n	8006328 <aiValidationProcess+0x64>
    err = ai_mnetwork_get_error(ctx->handle);
 80063c4:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80063c8:	e7cd      	b.n	8006366 <aiValidationProcess+0xa2>
    LC_PRINT("\r\n");
 80063ca:	4817      	ldr	r0, [pc, #92]	; (8006428 <aiValidationProcess+0x164>)
 80063cc:	f7ff fb3a 	bl	8005a44 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 80063d0:	4816      	ldr	r0, [pc, #88]	; (800642c <aiValidationProcess+0x168>)
 80063d2:	f7ff fb37 	bl	8005a44 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 80063d6:	4816      	ldr	r0, [pc, #88]	; (8006430 <aiValidationProcess+0x16c>)
 80063d8:	f7ff fb34 	bl	8005a44 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 80063dc:	4813      	ldr	r0, [pc, #76]	; (800642c <aiValidationProcess+0x168>)
 80063de:	f7ff fb31 	bl	8005a44 <lc_print>
    LC_PRINT("\r\n");
 80063e2:	4811      	ldr	r0, [pc, #68]	; (8006428 <aiValidationProcess+0x164>)
 80063e4:	f7ff fb2e 	bl	8005a44 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 80063e8:	4812      	ldr	r0, [pc, #72]	; (8006434 <aiValidationProcess+0x170>)
 80063ea:	f7ff fb2b 	bl	8005a44 <lc_print>
    LC_PRINT("# and a stm32com-base interface should be used\r\n");
 80063ee:	4812      	ldr	r0, [pc, #72]	; (8006438 <aiValidationProcess+0x174>)
 80063f0:	f7ff fb28 	bl	8005a44 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 80063f4:	4811      	ldr	r0, [pc, #68]	; (800643c <aiValidationProcess+0x178>)
 80063f6:	2203      	movs	r2, #3
 80063f8:	2102      	movs	r1, #2
 80063fa:	f7ff fb23 	bl	8005a44 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 80063fe:	4810      	ldr	r0, [pc, #64]	; (8006440 <aiValidationProcess+0x17c>)
 8006400:	f7fe fe94 	bl	800512c <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 8006404:	f7fe fede 	bl	80051c4 <aiPbMgrWaitAndProcess>
  } while (r==0);
 8006408:	4605      	mov	r5, r0
 800640a:	2800      	cmp	r0, #0
 800640c:	d0fa      	beq.n	8006404 <aiValidationProcess+0x140>
 800640e:	e799      	b.n	8006344 <aiValidationProcess+0x80>
 8006410:	200027e4 	.word	0x200027e4
 8006414:	08010101 	.word	0x08010101
 8006418:	08010156 	.word	0x08010156
 800641c:	080101aa 	.word	0x080101aa
 8006420:	08010184 	.word	0x08010184
 8006424:	08010199 	.word	0x08010199
 8006428:	080101c0 	.word	0x080101c0
 800642c:	080101c3 	.word	0x080101c3
 8006430:	080101f1 	.word	0x080101f1
 8006434:	0801021f 	.word	0x0801021f
 8006438:	08010265 	.word	0x08010265
 800643c:	08010296 	.word	0x08010296
 8006440:	20000010 	.word	0x20000010
 8006444:	08010121 	.word	0x08010121

08006448 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <ai_mnetwork_handle+0x2c>)
 800644a:	b110      	cbz	r0, 8006452 <ai_mnetwork_handle+0xa>
 800644c:	4298      	cmp	r0, r3
 800644e:	d105      	bne.n	800645c <ai_mnetwork_handle+0x14>
 8006450:	4770      	bx	lr
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	b942      	cbnz	r2, 8006468 <ai_mnetwork_handle+0x20>
            return &gnetworks[i];
 8006456:	eb03 1082 	add.w	r0, r3, r2, lsl #6
    }
    return NULL;
}
 800645a:	4770      	bx	lr
        if ((inst) && (&gnetworks[i] == inst))
 800645c:	3340      	adds	r3, #64	; 0x40
    return NULL;
 800645e:	4298      	cmp	r0, r3
 8006460:	bf0c      	ite	eq
 8006462:	4618      	moveq	r0, r3
 8006464:	2000      	movne	r0, #0
 8006466:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8006468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800646a:	2a00      	cmp	r2, #0
 800646c:	d1f5      	bne.n	800645a <ai_mnetwork_handle+0x12>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800646e:	2201      	movs	r2, #1
 8006470:	e7f1      	b.n	8006456 <ai_mnetwork_handle+0xe>
 8006472:	bf00      	nop
 8006474:	20002938 	.word	0x20002938

08006478 <ai_mnetwork_is_valid>:
{
 8006478:	b570      	push	{r4, r5, r6, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 800647a:	4604      	mov	r4, r0
 800647c:	b190      	cbz	r0, 80064a4 <ai_mnetwork_is_valid+0x2c>
 800647e:	680e      	ldr	r6, [r1, #0]
 8006480:	4630      	mov	r0, r6
 8006482:	f7f9 fedd 	bl	8000240 <strlen>
 8006486:	4605      	mov	r5, r0
 8006488:	4620      	mov	r0, r4
 800648a:	f7f9 fed9 	bl	8000240 <strlen>
 800648e:	4285      	cmp	r5, r0
 8006490:	d108      	bne.n	80064a4 <ai_mnetwork_is_valid+0x2c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8006492:	462a      	mov	r2, r5
 8006494:	4621      	mov	r1, r4
 8006496:	4630      	mov	r0, r6
 8006498:	f007 fb88 	bl	800dbac <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 800649c:	fab0 f080 	clz	r0, r0
 80064a0:	0940      	lsrs	r0, r0, #5
}
 80064a2:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 80064a4:	2000      	movs	r0, #0
 80064a6:	e7fc      	b.n	80064a2 <ai_mnetwork_is_valid+0x2a>

080064a8 <MX_X_CUBE_AI_Init>:
{
 80064a8:	b508      	push	{r3, lr}
    MX_UARTx_Init();
 80064aa:	f7fa fdf1 	bl	8001090 <MX_USART1_UART_Init>
}
 80064ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    aiValidationInit();
 80064b2:	f7ff bebf 	b.w	8006234 <aiValidationInit>

080064b6 <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 80064b6:	f7ff bf05 	b.w	80062c4 <aiValidationProcess>
	...

080064bc <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 80064c0:	490d      	ldr	r1, [pc, #52]	; (80064f8 <ai_mnetwork_find+0x3c>)
{
 80064c2:	4606      	mov	r6, r0
 80064c4:	4d0c      	ldr	r5, [pc, #48]	; (80064f8 <ai_mnetwork_find+0x3c>)
        if (ai_mnetwork_is_valid(name, entry))
 80064c6:	f7ff ffd7 	bl	8006478 <ai_mnetwork_is_valid>
 80064ca:	b948      	cbnz	r0, 80064e0 <ai_mnetwork_find+0x24>
            return entry->name;
        else {
            if (!idx--)
 80064cc:	b17c      	cbz	r4, 80064ee <ai_mnetwork_find+0x32>
        if (ai_mnetwork_is_valid(name, entry))
 80064ce:	f105 012c 	add.w	r1, r5, #44	; 0x2c
 80064d2:	4630      	mov	r0, r6
 80064d4:	f7ff ffd0 	bl	8006478 <ai_mnetwork_is_valid>
 80064d8:	b938      	cbnz	r0, 80064ea <ai_mnetwork_find+0x2e>
            if (!idx--)
 80064da:	2c01      	cmp	r4, #1
 80064dc:	d007      	beq.n	80064ee <ai_mnetwork_find+0x32>
                return entry->name;
        }
    }
    return NULL;
}
 80064de:	bd70      	pop	{r4, r5, r6, pc}
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80064e0:	2300      	movs	r3, #0
            return entry->name;
 80064e2:	222c      	movs	r2, #44	; 0x2c
 80064e4:	4353      	muls	r3, r2
 80064e6:	58e8      	ldr	r0, [r5, r3]
 80064e8:	e7f9      	b.n	80064de <ai_mnetwork_find+0x22>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80064ea:	2301      	movs	r3, #1
 80064ec:	e7f9      	b.n	80064e2 <ai_mnetwork_find+0x26>
                return entry->name;
 80064ee:	212c      	movs	r1, #44	; 0x2c
 80064f0:	434c      	muls	r4, r1
 80064f2:	5928      	ldr	r0, [r5, r4]
 80064f4:	e7f3      	b.n	80064de <ai_mnetwork_find+0x22>
 80064f6:	bf00      	nop
 80064f8:	08010388 	.word	0x08010388

080064fc <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 80064fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064fe:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8006500:	2000      	movs	r0, #0
{
 8006502:	4617      	mov	r7, r2
 8006504:	460d      	mov	r5, r1
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8006506:	f7ff ff9f 	bl	8006448 <ai_mnetwork_handle>

    if (!inst) {
 800650a:	4604      	mov	r4, r0
 800650c:	b158      	cbz	r0, 8006526 <ai_mnetwork_create+0x2a>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 800650e:	4916      	ldr	r1, [pc, #88]	; (8006568 <ai_mnetwork_create+0x6c>)
 8006510:	4630      	mov	r0, r6
 8006512:	f7ff ffb1 	bl	8006478 <ai_mnetwork_is_valid>
 8006516:	b970      	cbnz	r0, 8006536 <ai_mnetwork_create+0x3a>
 8006518:	4914      	ldr	r1, [pc, #80]	; (800656c <ai_mnetwork_create+0x70>)
 800651a:	4630      	mov	r0, r6
 800651c:	f7ff ffac 	bl	8006478 <ai_mnetwork_is_valid>
 8006520:	b120      	cbz	r0, 800652c <ai_mnetwork_create+0x30>
        entry = &networks[i];
 8006522:	4e12      	ldr	r6, [pc, #72]	; (800656c <ai_mnetwork_create+0x70>)
 8006524:	e008      	b.n	8006538 <ai_mnetwork_create+0x3c>
        return err;
 8006526:	f241 0031 	movw	r0, #4145	; 0x1031
        inst->handle = *network;
        *network = (ai_handle*)inst;
    }

    return err;
}
 800652a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err;
 800652c:	f241 0014 	movw	r0, #4116	; 0x1014
 8006530:	e7fb      	b.n	800652a <ai_mnetwork_create+0x2e>
        err = found->ai_create(network, network_config);
 8006532:	4639      	mov	r1, r7
 8006534:	e004      	b.n	8006540 <ai_mnetwork_create+0x44>
        entry = &networks[i];
 8006536:	4e0c      	ldr	r6, [pc, #48]	; (8006568 <ai_mnetwork_create+0x6c>)
        err = found->ai_create(network, found->config);
 8006538:	6933      	ldr	r3, [r6, #16]
    if (network_config == NULL)
 800653a:	2f00      	cmp	r7, #0
 800653c:	d1f9      	bne.n	8006532 <ai_mnetwork_create+0x36>
        err = found->ai_create(network, found->config);
 800653e:	6871      	ldr	r1, [r6, #4]
        err = found->ai_create(network, network_config);
 8006540:	4628      	mov	r0, r5
 8006542:	4798      	blx	r3
 8006544:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8006548:	b2c2      	uxtb	r2, r0
    return err;
 800654a:	2000      	movs	r0, #0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 800654c:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
    return err;
 8006550:	f362 0007 	bfi	r0, r2, #0, #8
        inst->entry = found;
 8006554:	bf08      	it	eq
 8006556:	6026      	streq	r6, [r4, #0]
    return err;
 8006558:	f363 201f 	bfi	r0, r3, #8, #24
        inst->handle = *network;
 800655c:	bf02      	ittt	eq
 800655e:	6829      	ldreq	r1, [r5, #0]
 8006560:	6061      	streq	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8006562:	602c      	streq	r4, [r5, #0]
    return err;
 8006564:	e7e1      	b.n	800652a <ai_mnetwork_create+0x2e>
 8006566:	bf00      	nop
 8006568:	08010388 	.word	0x08010388
 800656c:	080103b4 	.word	0x080103b4

08006570 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8006570:	b538      	push	{r3, r4, r5, lr}
 8006572:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8006574:	f7ff ff68 	bl	8006448 <ai_mnetwork_handle>
    if (inn) {
 8006578:	4605      	mov	r5, r0
 800657a:	b188      	cbz	r0, 80065a0 <ai_mnetwork_destroy+0x30>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 800657c:	6803      	ldr	r3, [r0, #0]
 800657e:	6840      	ldr	r0, [r0, #4]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	4798      	blx	r3
        if (hdl != inn->handle) {
 8006584:	686b      	ldr	r3, [r5, #4]
 8006586:	4283      	cmp	r3, r0
 8006588:	d00a      	beq.n	80065a0 <ai_mnetwork_destroy+0x30>
        if ((inst) && (&gnetworks[i] == inst)) {
 800658a:	4a08      	ldr	r2, [pc, #32]	; (80065ac <ai_mnetwork_destroy+0x3c>)
 800658c:	4295      	cmp	r5, r2
 800658e:	d009      	beq.n	80065a4 <ai_mnetwork_destroy+0x34>
 8006590:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8006594:	429d      	cmp	r5, r3
 8006596:	d107      	bne.n	80065a8 <ai_mnetwork_destroy+0x38>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8006598:	2301      	movs	r3, #1
            gnetworks[i].entry = NULL;
 800659a:	019b      	lsls	r3, r3, #6
 800659c:	2400      	movs	r4, #0
 800659e:	50d4      	str	r4, [r2, r3]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 80065a0:	4620      	mov	r0, r4
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80065a4:	2300      	movs	r3, #0
 80065a6:	e7f8      	b.n	800659a <ai_mnetwork_destroy+0x2a>
            network = AI_HANDLE_NULL;
 80065a8:	2400      	movs	r4, #0
 80065aa:	e7f9      	b.n	80065a0 <ai_mnetwork_destroy+0x30>
 80065ac:	20002938 	.word	0x20002938

080065b0 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 80065b0:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80065b2:	f7ff ff49 	bl	8006448 <ai_mnetwork_handle>
    if (inn)
 80065b6:	b128      	cbz	r0, 80065c4 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 80065b8:	6802      	ldr	r2, [r0, #0]
 80065ba:	6840      	ldr	r0, [r0, #4]
 80065bc:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 80065be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 80065c2:	4710      	bx	r2
}
 80065c4:	bd10      	pop	{r4, pc}

080065c6 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 80065c6:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80065c8:	f7ff ff3e 	bl	8006448 <ai_mnetwork_handle>
    if (inn)
 80065cc:	b128      	cbz	r0, 80065da <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 80065ce:	6803      	ldr	r3, [r0, #0]
 80065d0:	6840      	ldr	r0, [r0, #4]
 80065d2:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 80065d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 80065d8:	4718      	bx	r3
}
 80065da:	f241 0014 	movw	r0, #4116	; 0x1014
 80065de:	bd10      	pop	{r4, pc}

080065e0 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 80065e0:	b530      	push	{r4, r5, lr}
 80065e2:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80065e4:	f7ff ff30 	bl	8006448 <ai_mnetwork_handle>
    if (inn) {
 80065e8:	4604      	mov	r4, r0
 80065ea:	b168      	cbz	r0, 8006608 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 80065ec:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80065ee:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 80065f0:	4668      	mov	r0, sp
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 80065f6:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 80065fa:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 80065fc:	42aa      	cmp	r2, r5
 80065fe:	dc05      	bgt.n	800660c <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	4669      	mov	r1, sp
 8006604:	6860      	ldr	r0, [r4, #4]
 8006606:	4798      	blx	r3
    }
    else
        return false;
}
 8006608:	b00f      	add	sp, #60	; 0x3c
 800660a:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 800660c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800660e:	4629      	mov	r1, r5
 8006610:	a803      	add	r0, sp, #12
 8006612:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8006616:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8006618:	f001 fff8 	bl	800860c <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 800661c:	e7eb      	b.n	80065f6 <ai_mnetwork_init+0x16>

0800661e <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 800661e:	b513      	push	{r0, r1, r4, lr}
 8006620:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8006622:	f7ff ff11 	bl	8006448 <ai_mnetwork_handle>
    if (inn)
 8006626:	4603      	mov	r3, r0
 8006628:	b140      	cbz	r0, 800663c <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 800662a:	6800      	ldr	r0, [r0, #0]
 800662c:	9a01      	ldr	r2, [sp, #4]
 800662e:	6a04      	ldr	r4, [r0, #32]
 8006630:	6858      	ldr	r0, [r3, #4]
 8006632:	4623      	mov	r3, r4
    else
        return 0;
}
 8006634:	b002      	add	sp, #8
 8006636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 800663a:	4718      	bx	r3
}
 800663c:	b002      	add	sp, #8
 800663e:	bd10      	pop	{r4, pc}

08006640 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8006640:	b538      	push	{r3, r4, r5, lr}
 8006642:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8006644:	f7ff ff00 	bl	8006448 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8006648:	b188      	cbz	r0, 800666e <ai_mnetwork_get_private_handle+0x2e>
 800664a:	b181      	cbz	r1, 800666e <ai_mnetwork_get_private_handle+0x2e>
 800664c:	b17d      	cbz	r5, 800666e <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 800664e:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 8006650:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 8006654:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8006656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800665a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800665c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800665e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006666:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 800666a:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 800666c:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 800666e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006672:	e7fb      	b.n	800666c <ai_mnetwork_get_private_handle+0x2c>

08006674 <ai_asc_get_report>:


AI_API_ENTRY
ai_bool ai_asc_get_report(
  ai_handle network, ai_network_report* report)
{
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	460d      	mov	r5, r1
 8006678:	b0a0      	sub	sp, #128	; 0x80
 800667a:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 800667c:	f002 fb82 	bl	8008d84 <ai_platform_context_acquire>
 8006680:	4604      	mov	r4, r0

  if (report && net_ctx)
 8006682:	2d00      	cmp	r5, #0
 8006684:	d032      	beq.n	80066ec <ai_asc_get_report+0x78>
 8006686:	2800      	cmp	r0, #0
 8006688:	d02d      	beq.n	80066e6 <ai_asc_get_report+0x72>
  {
    ai_network_report r = {
 800668a:	226c      	movs	r2, #108	; 0x6c
 800668c:	2100      	movs	r1, #0
 800668e:	a805      	add	r0, sp, #20
 8006690:	f006 fd50 	bl	800d134 <memset>
 8006694:	4b16      	ldr	r3, [pc, #88]	; (80066f0 <ai_asc_get_report+0x7c>)
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	4b16      	ldr	r3, [pc, #88]	; (80066f4 <ai_asc_get_report+0x80>)
 800669a:	9302      	str	r3, [sp, #8]
 800669c:	4b16      	ldr	r3, [pc, #88]	; (80066f8 <ai_asc_get_report+0x84>)
 800669e:	9303      	str	r3, [sp, #12]
 80066a0:	4b16      	ldr	r3, [pc, #88]	; (80066fc <ai_asc_get_report+0x88>)
 80066a2:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_ASC_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80066a4:	f002 f922 	bl	80088ec <ai_platform_runtime_get_revision>
    ai_network_report r = {
 80066a8:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 80066aa:	f002 f9a3 	bl	80089f4 <ai_platform_runtime_get_version>
    ai_network_report r = {
 80066ae:	4b14      	ldr	r3, [pc, #80]	; (8006700 <ai_asc_get_report+0x8c>)
      .runtime_version   = ai_platform_runtime_get_version(),
 80066b0:	9006      	str	r0, [sp, #24]
    ai_network_report r = {
 80066b2:	9307      	str	r3, [sp, #28]
 80066b4:	f240 3307 	movw	r3, #775	; 0x307
 80066b8:	f8ad 3020 	strh.w	r3, [sp, #32]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 80066bc:	f002 fa32 	bl	8008b24 <ai_platform_api_get_version>
 80066c0:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80066c2:	f002 fac7 	bl	8008c54 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 80066c6:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <ai_asc_get_report+0x90>)
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80066c8:	a901      	add	r1, sp, #4
      .interface_api_version  = ai_platform_interface_api_get_version(),
 80066ca:	900b      	str	r0, [sp, #44]	; 0x2c
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80066cc:	4630      	mov	r0, r6
    ai_network_report r = {
 80066ce:	930c      	str	r3, [sp, #48]	; 0x30
 80066d0:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <ai_asc_get_report+0x94>)
 80066d2:	9310      	str	r3, [sp, #64]	; 0x40
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80066d4:	f002 fcf4 	bl	80090c0 <ai_platform_api_get_network_report>
 80066d8:	4604      	mov	r4, r0
 80066da:	b120      	cbz	r0, 80066e6 <ai_asc_get_report+0x72>

    *report = r;
 80066dc:	227c      	movs	r2, #124	; 0x7c
 80066de:	a901      	add	r1, sp, #4
 80066e0:	4628      	mov	r0, r5
 80066e2:	f006 fd19 	bl	800d118 <memcpy>
    return true;
  }
  return false;
}
 80066e6:	4620      	mov	r0, r4
 80066e8:	b020      	add	sp, #128	; 0x80
 80066ea:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 80066ec:	462c      	mov	r4, r5
 80066ee:	e7fa      	b.n	80066e6 <ai_asc_get_report+0x72>
 80066f0:	08010382 	.word	0x08010382
 80066f4:	080103e0 	.word	0x080103e0
 80066f8:	08010401 	.word	0x08010401
 80066fc:	0801041a 	.word	0x0801041a
 8006700:	0806fa5f 	.word	0x0806fa5f
 8006704:	0007e4fd 	.word	0x0007e4fd
 8006708:	a1facade 	.word	0xa1facade

0800670c <ai_asc_get_error>:

AI_API_ENTRY
ai_error ai_asc_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 800670c:	f002 bbc6 	b.w	8008e9c <ai_platform_network_get_error>

08006710 <ai_asc_create>:
}

AI_API_ENTRY
ai_error ai_asc_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006710:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8006712:	2305      	movs	r3, #5
 8006714:	2200      	movs	r2, #0
 8006716:	e9cd 3200 	strd	r3, r2, [sp]
 800671a:	2301      	movs	r3, #1
 800671c:	4a02      	ldr	r2, [pc, #8]	; (8006728 <ai_asc_create+0x18>)
 800671e:	f003 f8ff 	bl	8009920 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006722:	b003      	add	sp, #12
 8006724:	f85d fb04 	ldr.w	pc, [sp], #4
 8006728:	200008b8 	.word	0x200008b8

0800672c <ai_asc_destroy>:
}

AI_API_ENTRY
ai_handle ai_asc_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 800672c:	f003 bad2 	b.w	8009cd4 <ai_platform_network_destroy>

08006730 <ai_asc_init>:
}

AI_API_ENTRY
ai_bool ai_asc_init(
  ai_handle network, const ai_network_params* params)
{
 8006730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006734:	4607      	mov	r7, r0
 8006736:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006738:	f003 fbd4 	bl	8009ee4 <ai_platform_network_init>
  if (!net_ctx) return false;
 800673c:	4604      	mov	r4, r0
 800673e:	2800      	cmp	r0, #0
 8006740:	f000 808d 	beq.w	800685e <ai_asc_init+0x12e>
  if (ai_platform_get_weights_map(g_asc_weights_map, 1, params)) {
 8006744:	f8df 8178 	ldr.w	r8, [pc, #376]	; 80068c0 <ai_asc_init+0x190>
 8006748:	4632      	mov	r2, r6
 800674a:	2101      	movs	r1, #1
 800674c:	4640      	mov	r0, r8
 800674e:	f002 f803 	bl	8008758 <ai_platform_get_weights_map>
 8006752:	4605      	mov	r5, r0
 8006754:	2800      	cmp	r0, #0
 8006756:	f000 8084 	beq.w	8006862 <ai_asc_init+0x132>
    dense_11_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800675a:	4a48      	ldr	r2, [pc, #288]	; (800687c <ai_asc_init+0x14c>)
 800675c:	6813      	ldr	r3, [r2, #0]
 800675e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006762:	6013      	str	r3, [r2, #0]
    dense_11_dense_weights_array.data = AI_PTR(g_asc_weights_map[0] + 64);
 8006764:	f8d8 3000 	ldr.w	r3, [r8]
 8006768:	f103 0140 	add.w	r1, r3, #64	; 0x40
    dense_11_dense_weights_array.data_start = AI_PTR(g_asc_weights_map[0] + 0);
 800676c:	e9c2 1302 	strd	r1, r3, [r2, #8]
    dense_11_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006770:	4a43      	ldr	r2, [pc, #268]	; (8006880 <ai_asc_init+0x150>)
 8006772:	6811      	ldr	r1, [r2, #0]
 8006774:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006778:	6011      	str	r1, [r2, #0]
    dense_11_dense_bias_array.data = AI_PTR(g_asc_weights_map[0] + 2656);
 800677a:	f503 6126 	add.w	r1, r3, #2656	; 0xa60
    dense_11_dense_bias_array.data_start = AI_PTR(g_asc_weights_map[0] + 2656);
 800677e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_12_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006782:	4a40      	ldr	r2, [pc, #256]	; (8006884 <ai_asc_init+0x154>)
 8006784:	6811      	ldr	r1, [r2, #0]
 8006786:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800678a:	6011      	str	r1, [r2, #0]
    dense_12_dense_weights_array.data = AI_PTR(g_asc_weights_map[0] + 2692);
 800678c:	f603 2184 	addw	r1, r3, #2692	; 0xa84
    dense_12_dense_weights_array.data_start = AI_PTR(g_asc_weights_map[0] + 2692);
 8006790:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_12_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006794:	4a3c      	ldr	r2, [pc, #240]	; (8006888 <ai_asc_init+0x158>)
 8006796:	6811      	ldr	r1, [r2, #0]
 8006798:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800679c:	6011      	str	r1, [r2, #0]
    dense_12_dense_bias_array.data = AI_PTR(g_asc_weights_map[0] + 2800);
 800679e:	f503 612f 	add.w	r1, r3, #2800	; 0xaf0
    dense_12_dense_bias_array.data_start = AI_PTR(g_asc_weights_map[0] + 2800);
 80067a2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80067a6:	4a39      	ldr	r2, [pc, #228]	; (800688c <ai_asc_init+0x15c>)
 80067a8:	6811      	ldr	r1, [r2, #0]
 80067aa:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80067ae:	6011      	str	r1, [r2, #0]
    conv2d_11_conv2d_weights_array.data = AI_PTR(g_asc_weights_map[0] + 2812);
 80067b0:	f603 21fc 	addw	r1, r3, #2812	; 0xafc
    conv2d_11_conv2d_weights_array.data_start = AI_PTR(g_asc_weights_map[0] + 2812);
 80067b4:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80067b8:	4a35      	ldr	r2, [pc, #212]	; (8006890 <ai_asc_init+0x160>)
 80067ba:	6811      	ldr	r1, [r2, #0]
 80067bc:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80067c0:	6011      	str	r1, [r2, #0]
    conv2d_11_conv2d_bias_array.data = AI_PTR(g_asc_weights_map[0] + 3388);
 80067c2:	f603 513c 	addw	r1, r3, #3388	; 0xd3c
    conv2d_11_conv2d_bias_array.data_start = AI_PTR(g_asc_weights_map[0] + 3388);
 80067c6:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80067ca:	4a32      	ldr	r2, [pc, #200]	; (8006894 <ai_asc_init+0x164>)
 80067cc:	6811      	ldr	r1, [r2, #0]
 80067ce:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80067d2:	6011      	str	r1, [r2, #0]
    conv2d_12_conv2d_weights_array.data = AI_PTR(g_asc_weights_map[0] + 3452);
 80067d4:	f603 517c 	addw	r1, r3, #3452	; 0xd7c
    conv2d_12_conv2d_bias_array.data = AI_PTR(g_asc_weights_map[0] + 12668);
 80067d8:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
    conv2d_12_conv2d_weights_array.data_start = AI_PTR(g_asc_weights_map[0] + 3452);
 80067dc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80067e0:	4a2d      	ldr	r2, [pc, #180]	; (8006898 <ai_asc_init+0x168>)
    conv2d_12_conv2d_bias_array.data = AI_PTR(g_asc_weights_map[0] + 12668);
 80067e2:	333c      	adds	r3, #60	; 0x3c
    conv2d_12_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80067e4:	6811      	ldr	r1, [r2, #0]
 80067e6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80067ea:	6011      	str	r1, [r2, #0]
    conv2d_12_conv2d_bias_array.data_start = AI_PTR(g_asc_weights_map[0] + 12668);
 80067ec:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_asc_activations_map, 1, params)) {
 80067f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80068c4 <ai_asc_init+0x194>
 80067f4:	4632      	mov	r2, r6
 80067f6:	2101      	movs	r1, #1
 80067f8:	4640      	mov	r0, r8
 80067fa:	f002 f805 	bl	8008808 <ai_platform_get_activations_map>
 80067fe:	4606      	mov	r6, r0
 8006800:	b3a8      	cbz	r0, 800686e <ai_asc_init+0x13e>
    input_0_output_array.data = AI_PTR(g_asc_activations_map[0] + 11648);
 8006802:	f8d8 3000 	ldr.w	r3, [r8]
 8006806:	4a25      	ldr	r2, [pc, #148]	; (800689c <ai_asc_init+0x16c>)
 8006808:	f503 5136 	add.w	r1, r3, #11648	; 0x2d80
    input_0_output_array.data_start = AI_PTR(g_asc_activations_map[0] + 11648);
 800680c:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_conv2d_scratch0_array.data = AI_PTR(g_asc_activations_map[0] + 15488);
 8006810:	f503 5172 	add.w	r1, r3, #15488	; 0x3c80
 8006814:	4a22      	ldr	r2, [pc, #136]	; (80068a0 <ai_asc_init+0x170>)
    conv2d_11_conv2d_scratch0_array.data_start = AI_PTR(g_asc_activations_map[0] + 15488);
 8006816:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_11_conv2d_output_array.data = AI_PTR(g_asc_activations_map[0] + 0);
 800681a:	4a22      	ldr	r2, [pc, #136]	; (80068a4 <ai_asc_init+0x174>)
    conv2d_12_conv2d_scratch0_array.data = AI_PTR(g_asc_activations_map[0] + 13440);
 800681c:	f503 5152 	add.w	r1, r3, #13440	; 0x3480
    conv2d_11_conv2d_output_array.data_start = AI_PTR(g_asc_activations_map[0] + 0);
 8006820:	e9c2 3302 	strd	r3, r3, [r2, #8]
    conv2d_12_conv2d_scratch0_array.data = AI_PTR(g_asc_activations_map[0] + 13440);
 8006824:	4a20      	ldr	r2, [pc, #128]	; (80068a8 <ai_asc_init+0x178>)
    conv2d_12_conv2d_scratch0_array.data_start = AI_PTR(g_asc_activations_map[0] + 13440);
 8006826:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_12_conv2d_output_array.data = AI_PTR(g_asc_activations_map[0] + 15104);
 800682a:	f503 516c 	add.w	r1, r3, #15104	; 0x3b00
 800682e:	4a1f      	ldr	r2, [pc, #124]	; (80068ac <ai_asc_init+0x17c>)
    conv2d_12_conv2d_output_array.data_start = AI_PTR(g_asc_activations_map[0] + 15104);
 8006830:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_11_dense_output_array.data = AI_PTR(g_asc_activations_map[0] + 0);
 8006834:	4a1e      	ldr	r2, [pc, #120]	; (80068b0 <ai_asc_init+0x180>)
    dense_11_output_array.data = AI_PTR(g_asc_activations_map[0] + 36);
 8006836:	f103 0124 	add.w	r1, r3, #36	; 0x24
    dense_11_dense_output_array.data_start = AI_PTR(g_asc_activations_map[0] + 0);
 800683a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_11_output_array.data = AI_PTR(g_asc_activations_map[0] + 36);
 800683e:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <ai_asc_init+0x184>)
    dense_11_output_array.data_start = AI_PTR(g_asc_activations_map[0] + 36);
 8006840:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_12_dense_output_array.data = AI_PTR(g_asc_activations_map[0] + 0);
 8006844:	4a1c      	ldr	r2, [pc, #112]	; (80068b8 <ai_asc_init+0x188>)
    dense_12_dense_output_array.data_start = AI_PTR(g_asc_activations_map[0] + 0);
 8006846:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_12_output_array.data = AI_PTR(g_asc_activations_map[0] + 12);
 800684a:	330c      	adds	r3, #12
 800684c:	4a1b      	ldr	r2, [pc, #108]	; (80068bc <ai_asc_init+0x18c>)
    dense_12_output_array.data_start = AI_PTR(g_asc_activations_map[0] + 12);
 800684e:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= asc_configure_weights(net_ctx, params);
  ok &= asc_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8006852:	4638      	mov	r0, r7
 8006854:	f003 fce2 	bl	800a21c <ai_platform_network_post_init>
 8006858:	4030      	ands	r0, r6
 800685a:	4028      	ands	r0, r5
 800685c:	b2c0      	uxtb	r0, r0

  return ok;
}
 800685e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8006862:	2212      	movs	r2, #18
 8006864:	2130      	movs	r1, #48	; 0x30
 8006866:	4620      	mov	r0, r4
 8006868:	f002 fc24 	bl	80090b4 <ai_platform_network_set_error>
  return false;
 800686c:	e7c0      	b.n	80067f0 <ai_asc_init+0xc0>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800686e:	2213      	movs	r2, #19
 8006870:	2130      	movs	r1, #48	; 0x30
 8006872:	4620      	mov	r0, r4
 8006874:	f002 fc1e 	bl	80090b4 <ai_platform_network_set_error>
  return false;
 8006878:	e7eb      	b.n	8006852 <ai_asc_init+0x122>
 800687a:	bf00      	nop
 800687c:	20000770 	.word	0x20000770
 8006880:	200006fc 	.word	0x200006fc
 8006884:	2000085c 	.word	0x2000085c
 8006888:	200007e8 	.word	0x200007e8
 800688c:	200005a8 	.word	0x200005a8
 8006890:	200004c8 	.word	0x200004c8
 8006894:	200006d0 	.word	0x200006d0
 8006898:	200005d4 	.word	0x200005d4
 800689c:	20000920 	.word	0x20000920
 80068a0:	2000057c 	.word	0x2000057c
 80068a4:	20000550 	.word	0x20000550
 80068a8:	200006a4 	.word	0x200006a4
 80068ac:	20000678 	.word	0x20000678
 80068b0:	20000744 	.word	0x20000744
 80068b4:	200007bc 	.word	0x200007bc
 80068b8:	20000830 	.word	0x20000830
 80068bc:	200008a8 	.word	0x200008a8
 80068c0:	20008e84 	.word	0x20008e84
 80068c4:	20008e80 	.word	0x20008e80

080068c8 <ai_asc_run>:

AI_API_ENTRY
ai_i32 ai_asc_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80068c8:	f003 bdd2 	b.w	800a470 <ai_platform_network_process>

080068cc <ai_asc_forward>:
}

AI_API_ENTRY
ai_i32 ai_asc_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 80068cc:	2200      	movs	r2, #0
 80068ce:	f003 bdcf 	b.w	800a470 <ai_platform_network_process>
	...

080068d4 <ai_asc_data_params_get>:
 * @ingroup asc_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_asc_data_params_get(ai_network_params* params)
{
 80068d4:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80068d6:	4603      	mov	r3, r0
{
 80068d8:	b085      	sub	sp, #20
  if (!params) return false;
 80068da:	b170      	cbz	r0, 80068fa <ai_asc_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80068dc:	4c08      	ldr	r4, [pc, #32]	; (8006900 <ai_asc_data_params_get+0x2c>)
 80068de:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ASC_DATA_ACTIVATIONS_COUNT, g_asc_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80068e0:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 80068e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80068e6:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80068ea:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80068ee:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_ASC_DATA_WEIGHTS_COUNT, g_asc_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80068f2:	4629      	mov	r1, r5
 80068f4:	4618      	mov	r0, r3
 80068f6:	f001 ffdf 	bl	80088b8 <ai_platform_bind_network_params>
}
 80068fa:	b005      	add	sp, #20
 80068fc:	bd30      	pop	{r4, r5, pc}
 80068fe:	bf00      	nop
 8006900:	08010314 	.word	0x08010314

08006904 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8006904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8006908:	6896      	ldr	r6, [r2, #8]
{
 800690a:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 800690c:	2500      	movs	r5, #0
{
 800690e:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 8006910:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 8006914:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8006918:	d02a      	beq.n	8006970 <_write_number+0x6c>
    if ((int64_t)number < 0) {
 800691a:	42a9      	cmp	r1, r5
 800691c:	da08      	bge.n	8006930 <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 800691e:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8006920:	4240      	negs	r0, r0
      sign_neg = '-';
 8006922:	f04f 052d 	mov.w	r5, #45	; 0x2d
      specifier->width -= 1;
 8006926:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      number = -number;
 800692a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 800692e:	6013      	str	r3, [r2, #0]
 8006930:	f016 0f08 	tst.w	r6, #8
 8006934:	f10d 093e 	add.w	r9, sp, #62	; 0x3e
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8006938:	f04f 073e 	mov.w	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 800693c:	f006 0a10 	and.w	sl, r6, #16
 8006940:	bf14      	ite	ne
 8006942:	f04f 0841 	movne.w	r8, #65	; 0x41
 8006946:	f04f 0861 	moveq.w	r8, #97	; 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800694a:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 800694e:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8006952:	f1ba 0f00 	cmp.w	sl, #0
 8006956:	d032      	beq.n	80069be <_write_number+0xba>
      chr = number & 0x0F;
 8006958:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 800695c:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 800695e:	2b09      	cmp	r3, #9
      t = number >> 4;
 8006960:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8006964:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8006968:	d906      	bls.n	8006978 <_write_number+0x74>
 800696a:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 800696c:	b2db      	uxtb	r3, r3
 800696e:	e004      	b.n	800697a <_write_number+0x76>
  char sign_neg = 0;
 8006970:	461d      	mov	r5, r3
 8006972:	e7dd      	b.n	8006930 <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 8006974:	4617      	mov	r7, r2
 8006976:	e7ea      	b.n	800694e <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8006978:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 800697a:	f809 3901 	strb.w	r3, [r9], #-1
    count++;
  } while (number);
 800697e:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8006982:	f107 32ff 	add.w	r2, r7, #4294967295	; 0xffffffff
    count++;
 8006986:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 800698a:	d1f3      	bne.n	8006974 <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 800698c:	f006 0101 	and.w	r1, r6, #1
 8006990:	b14d      	cbz	r5, 80069a6 <_write_number+0xa2>
 8006992:	b941      	cbnz	r1, 80069a6 <_write_number+0xa2>
    buf[idx--] = sign_neg;
 8006994:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 8006998:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 800699c:	eb0d 0203 	add.w	r2, sp, r3
 80069a0:	f802 5c40 	strb.w	r5, [r2, #-64]
 80069a4:	1eba      	subs	r2, r7, #2
 80069a6:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	f006 0602 	and.w	r6, r6, #2
 80069ae:	bf14      	ite	ne
 80069b0:	2130      	movne	r1, #48	; 0x30
 80069b2:	2120      	moveq	r1, #32
 80069b4:	455b      	cmp	r3, fp
 80069b6:	dd13      	ble.n	80069e0 <_write_number+0xdc>
 80069b8:	b166      	cbz	r6, 80069d4 <_write_number+0xd0>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 80069ba:	b9a5      	cbnz	r5, 80069e6 <_write_number+0xe2>
 80069bc:	e01b      	b.n	80069f6 <_write_number+0xf2>
      t = number / 10;
 80069be:	2300      	movs	r3, #0
 80069c0:	220a      	movs	r2, #10
      chr = (number - t * 10) + '0';
 80069c2:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
      t = number / 10;
 80069c6:	f7f9 fda1 	bl	800050c <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 80069ca:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80069ce:	ebab 0343 	sub.w	r3, fp, r3, lsl #1
 80069d2:	e7cb      	b.n	800696c <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 80069d4:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 80069d8:	f10b 0b01 	add.w	fp, fp, #1
 80069dc:	3a01      	subs	r2, #1
 80069de:	e7e9      	b.n	80069b4 <_write_number+0xb0>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 80069e0:	b14d      	cbz	r5, 80069f6 <_write_number+0xf2>
 80069e2:	455b      	cmp	r3, fp
 80069e4:	d107      	bne.n	80069f6 <_write_number+0xf2>
    buf[idx--] = sign_neg;
 80069e6:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 80069ea:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 80069ee:	3a01      	subs	r2, #1
 80069f0:	446b      	add	r3, sp
 80069f2:	f803 5c40 	strb.w	r5, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 80069f6:	eb0d 0602 	add.w	r6, sp, r2
 80069fa:	2500      	movs	r5, #0
 80069fc:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80069fe:	68e3      	ldr	r3, [r4, #12]
 8006a00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a04:	6920      	ldr	r0, [r4, #16]
 8006a06:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8006a08:	45ab      	cmp	fp, r5
 8006a0a:	d1f7      	bne.n	80069fc <_write_number+0xf8>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8006a0c:	68a3      	ldr	r3, [r4, #8]
 8006a0e:	079b      	lsls	r3, r3, #30
 8006a10:	d408      	bmi.n	8006a24 <_write_number+0x120>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8006a12:	4628      	mov	r0, r5
 8006a14:	b011      	add	sp, #68	; 0x44
 8006a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8006a1a:	3501      	adds	r5, #1
 8006a1c:	68e3      	ldr	r3, [r4, #12]
 8006a1e:	2120      	movs	r1, #32
 8006a20:	6920      	ldr	r0, [r4, #16]
 8006a22:	4798      	blx	r3
    while (count < specifier->width) {
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	42ab      	cmp	r3, r5
 8006a28:	dcf7      	bgt.n	8006a1a <_write_number+0x116>
 8006a2a:	e7f2      	b.n	8006a12 <_write_number+0x10e>

08006a2c <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	4683      	mov	fp, r0
 8006a32:	460f      	mov	r7, r1
 8006a34:	461c      	mov	r4, r3
  char c, t;
  int count = 0;
 8006a36:	2500      	movs	r5, #0
{
 8006a38:	ed2d 8b02 	vpush	{d8}
 8006a3c:	b09b      	sub	sp, #108	; 0x6c
  return *(*fmtP)++;
 8006a3e:	4613      	mov	r3, r2
 8006a40:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006a44:	9302      	str	r3, [sp, #8]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8006a46:	b929      	cbnz	r1, 8006a54 <vlc_print+0x28>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8006a48:	4628      	mov	r0, r5
 8006a4a:	b01b      	add	sp, #108	; 0x6c
 8006a4c:	ecbd 8b02 	vpop	{d8}
 8006a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8006a54:	290a      	cmp	r1, #10
 8006a56:	d103      	bne.n	8006a60 <vlc_print+0x34>
      putc_fct(user, c);
 8006a58:	4638      	mov	r0, r7
      count++;
 8006a5a:	3501      	adds	r5, #1
      putc_fct(user, c);
 8006a5c:	47d8      	blx	fp
      count++;
 8006a5e:	e0c9      	b.n	8006bf4 <vlc_print+0x1c8>
    else if (c == '%')
 8006a60:	2925      	cmp	r1, #37	; 0x25
 8006a62:	d1f9      	bne.n	8006a58 <vlc_print+0x2c>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8006a64:	2300      	movs	r3, #0
 8006a66:	f04f 090a 	mov.w	r9, #10
 8006a6a:	9709      	str	r7, [sp, #36]	; 0x24
 8006a6c:	4698      	mov	r8, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	469e      	mov	lr, r3
 8006a72:	4618      	mov	r0, r3
      bool has_precision = false;
 8006a74:	469c      	mov	ip, r3
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8006a76:	9301      	str	r3, [sp, #4]
      bool long_type = false;
 8006a78:	9303      	str	r3, [sp, #12]
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8006a7a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006a7e:	e9cd 3b07 	strd	r3, fp, [sp, #28]
  return *(*fmtP)++;
 8006a82:	9e02      	ldr	r6, [sp, #8]
 8006a84:	f816 1b01 	ldrb.w	r1, [r6], #1
 8006a88:	9602      	str	r6, [sp, #8]
        if (!c)
 8006a8a:	2900      	cmp	r1, #0
 8006a8c:	f000 81be 	beq.w	8006e0c <vlc_print+0x3e0>
        else if (c == '0')
 8006a90:	2930      	cmp	r1, #48	; 0x30
 8006a92:	d116      	bne.n	8006ac2 <vlc_print+0x96>
          if (!specifier.width && !specifier.precision) {
 8006a94:	ea50 0102 	orrs.w	r1, r0, r2
 8006a98:	d107      	bne.n	8006aaa <vlc_print+0x7e>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8006a9a:	9b01      	ldr	r3, [sp, #4]
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	4608      	mov	r0, r1
 8006aa0:	f043 0301 	orr.w	r3, r3, #1
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e7eb      	b.n	8006a82 <vlc_print+0x56>
          } else if (has_precision) {
 8006aaa:	f1bc 0f00 	cmp.w	ip, #0
 8006aae:	d003      	beq.n	8006ab8 <vlc_print+0x8c>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8006ab0:	fb09 f202 	mul.w	r2, r9, r2
 8006ab4:	46e0      	mov	r8, ip
 8006ab6:	e7e4      	b.n	8006a82 <vlc_print+0x56>
            specifier.width = specifier.width * 10 + (c - '0');
 8006ab8:	fb09 f000 	mul.w	r0, r9, r0
            specifier.width = specifier.width * 10 + (c - '0');
 8006abc:	f04f 0e01 	mov.w	lr, #1
 8006ac0:	e7df      	b.n	8006a82 <vlc_print+0x56>
        else if (c == '-')
 8006ac2:	292d      	cmp	r1, #45	; 0x2d
 8006ac4:	d104      	bne.n	8006ad0 <vlc_print+0xa4>
          specifier.flags |= FLAG_NEG_PAD;
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	f043 0302 	orr.w	r3, r3, #2
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	e7ea      	b.n	8006aa6 <vlc_print+0x7a>
        else if (c == '.')
 8006ad0:	292e      	cmp	r1, #46	; 0x2e
 8006ad2:	f000 81a9 	beq.w	8006e28 <vlc_print+0x3fc>
        else if ((c >= '1') && (c <= '9'))
 8006ad6:	f1a1 0a31 	sub.w	sl, r1, #49	; 0x31
 8006ada:	f1ba 0f08 	cmp.w	sl, #8
 8006ade:	d809      	bhi.n	8006af4 <vlc_print+0xc8>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8006ae0:	3930      	subs	r1, #48	; 0x30
          if (has_precision) {
 8006ae2:	f1bc 0f00 	cmp.w	ip, #0
 8006ae6:	d002      	beq.n	8006aee <vlc_print+0xc2>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8006ae8:	fb09 1202 	mla	r2, r9, r2, r1
 8006aec:	e7e2      	b.n	8006ab4 <vlc_print+0x88>
            specifier.width = specifier.width * 10 + (c - '0');
 8006aee:	fb09 1000 	mla	r0, r9, r0, r1
 8006af2:	e7e3      	b.n	8006abc <vlc_print+0x90>
        else if (c == 'l')
 8006af4:	296c      	cmp	r1, #108	; 0x6c
 8006af6:	f000 819a 	beq.w	8006e2e <vlc_print+0x402>
 8006afa:	f1be 0f00 	cmp.w	lr, #0
 8006afe:	d000      	beq.n	8006b02 <vlc_print+0xd6>
 8006b00:	9005      	str	r0, [sp, #20]
 8006b02:	f1b8 0f00 	cmp.w	r8, #0
 8006b06:	d000      	beq.n	8006b0a <vlc_print+0xde>
 8006b08:	9206      	str	r2, [sp, #24]
 8006b0a:	b10b      	cbz	r3, 8006b10 <vlc_print+0xe4>
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	9307      	str	r3, [sp, #28]
          switch(c)
 8006b10:	2978      	cmp	r1, #120	; 0x78
 8006b12:	d809      	bhi.n	8006b28 <vlc_print+0xfc>
 8006b14:	2962      	cmp	r1, #98	; 0x62
 8006b16:	d813      	bhi.n	8006b40 <vlc_print+0x114>
 8006b18:	2946      	cmp	r1, #70	; 0x46
 8006b1a:	f000 80b3 	beq.w	8006c84 <vlc_print+0x258>
 8006b1e:	2958      	cmp	r1, #88	; 0x58
 8006b20:	f000 808f 	beq.w	8006c42 <vlc_print+0x216>
 8006b24:	2925      	cmp	r1, #37	; 0x25
 8006b26:	d097      	beq.n	8006a58 <vlc_print+0x2c>
        putc_fct(user, '<');
 8006b28:	213c      	movs	r1, #60	; 0x3c
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	47d8      	blx	fp
        putc_fct(user, '!');
 8006b2e:	2121      	movs	r1, #33	; 0x21
 8006b30:	4638      	mov	r0, r7
        va_arg(vl, signed long);
 8006b32:	3404      	adds	r4, #4
        putc_fct(user, '!');
 8006b34:	47d8      	blx	fp
        putc_fct(user, '>');
 8006b36:	213e      	movs	r1, #62	; 0x3e
 8006b38:	4638      	mov	r0, r7
        count += 3;
 8006b3a:	3503      	adds	r5, #3
        putc_fct(user, '>');
 8006b3c:	47d8      	blx	fp
        error = false;
 8006b3e:	e059      	b.n	8006bf4 <vlc_print+0x1c8>
          switch(c)
 8006b40:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8006b44:	2b15      	cmp	r3, #21
 8006b46:	d8ef      	bhi.n	8006b28 <vlc_print+0xfc>
 8006b48:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <vlc_print+0x124>)
 8006b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4e:	bf00      	nop
 8006b50:	08006ba9 	.word	0x08006ba9
 8006b54:	08006c63 	.word	0x08006c63
 8006b58:	08006b29 	.word	0x08006b29
 8006b5c:	08006c85 	.word	0x08006c85
 8006b60:	08006b29 	.word	0x08006b29
 8006b64:	08006b29 	.word	0x08006b29
 8006b68:	08006c63 	.word	0x08006c63
 8006b6c:	08006b29 	.word	0x08006b29
 8006b70:	08006b29 	.word	0x08006b29
 8006b74:	08006b29 	.word	0x08006b29
 8006b78:	08006b29 	.word	0x08006b29
 8006b7c:	08006b29 	.word	0x08006b29
 8006b80:	08006b29 	.word	0x08006b29
 8006b84:	08006c37 	.word	0x08006c37
 8006b88:	08006b29 	.word	0x08006b29
 8006b8c:	08006b29 	.word	0x08006b29
 8006b90:	08006bb1 	.word	0x08006bb1
 8006b94:	08006b29 	.word	0x08006b29
 8006b98:	08006c6b 	.word	0x08006c6b
 8006b9c:	08006b29 	.word	0x08006b29
 8006ba0:	08006b29 	.word	0x08006b29
 8006ba4:	08006c4b 	.word	0x08006c4b
            t = (char)va_arg(vl, signed int);
 8006ba8:	f854 1b04 	ldr.w	r1, [r4], #4
            putc_fct(user, t);
 8006bac:	b2c9      	uxtb	r1, r1
 8006bae:	e753      	b.n	8006a58 <vlc_print+0x2c>
            if (!str) str = "(null)";
 8006bb0:	4ba0      	ldr	r3, [pc, #640]	; (8006e34 <vlc_print+0x408>)
            str = va_arg(vl, char*);
 8006bb2:	f854 9b04 	ldr.w	r9, [r4], #4
            if (!str) str = "(null)";
 8006bb6:	f1b9 0f00 	cmp.w	r9, #0
 8006bba:	bf08      	it	eq
 8006bbc:	4699      	moveq	r9, r3
  int len = strlen(str);
 8006bbe:	4648      	mov	r0, r9
 8006bc0:	f7f9 fb3e 	bl	8000240 <strlen>
  if (specifier->precision) {
 8006bc4:	9b06      	ldr	r3, [sp, #24]
  int len = strlen(str);
 8006bc6:	4680      	mov	r8, r0
  if (specifier->precision) {
 8006bc8:	b113      	cbz	r3, 8006bd0 <vlc_print+0x1a4>
    len = (len > specifier->precision)?specifier->precision:len;
 8006bca:	4298      	cmp	r0, r3
 8006bcc:	bfa8      	it	ge
 8006bce:	4698      	movge	r8, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8006bd0:	9e07      	ldr	r6, [sp, #28]
 8006bd2:	f016 0602 	ands.w	r6, r6, #2
 8006bd6:	d014      	beq.n	8006c02 <vlc_print+0x1d6>
  int count = 0;
 8006bd8:	2600      	movs	r6, #0
 8006bda:	46ca      	mov	sl, r9
  for (int i = 0; i < len; i++) {
 8006bdc:	ebaa 0309 	sub.w	r3, sl, r9
 8006be0:	4598      	cmp	r8, r3
 8006be2:	dc14      	bgt.n	8006c0e <vlc_print+0x1e2>
  if (specifier->flags & FLAG_NEG_PAD) {
 8006be4:	9b07      	ldr	r3, [sp, #28]
 8006be6:	f1b8 0f00 	cmp.w	r8, #0
 8006bea:	bfa8      	it	ge
 8006bec:	4446      	addge	r6, r8
 8006bee:	079b      	lsls	r3, r3, #30
 8006bf0:	d41e      	bmi.n	8006c30 <vlc_print+0x204>
            count += _write_string(str, &specifier);
 8006bf2:	4435      	add	r5, r6
  for(int i = 0; i < count; i++) {
 8006bf4:	9a02      	ldr	r2, [sp, #8]
 8006bf6:	e722      	b.n	8006a3e <vlc_print+0x12>
      _WRITE_C(' ');
 8006bf8:	3601      	adds	r6, #1
 8006bfa:	2120      	movs	r1, #32
 8006bfc:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8006c00:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 8006c02:	eb08 0306 	add.w	r3, r8, r6
 8006c06:	9a05      	ldr	r2, [sp, #20]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	dcf5      	bgt.n	8006bf8 <vlc_print+0x1cc>
 8006c0c:	e7e5      	b.n	8006bda <vlc_print+0x1ae>
    _WRITE_C(*str++);
 8006c0e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006c12:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8006c16:	4798      	blx	r3
  for (int i = 0; i < len; i++) {
 8006c18:	e7e0      	b.n	8006bdc <vlc_print+0x1b0>
      _WRITE_C(' ');
 8006c1a:	3601      	adds	r6, #1
 8006c1c:	2120      	movs	r1, #32
 8006c1e:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8006c22:	4798      	blx	r3
    for(int i = len; i < specifier->width; i++) {
 8006c24:	eb08 0306 	add.w	r3, r8, r6
 8006c28:	9a05      	ldr	r2, [sp, #20]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	dcf5      	bgt.n	8006c1a <vlc_print+0x1ee>
 8006c2e:	e7e0      	b.n	8006bf2 <vlc_print+0x1c6>
 8006c30:	eba8 0806 	sub.w	r8, r8, r6
 8006c34:	e7f6      	b.n	8006c24 <vlc_print+0x1f8>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8006c36:	9b07      	ldr	r3, [sp, #28]
 8006c38:	f043 0301 	orr.w	r3, r3, #1
 8006c3c:	9307      	str	r3, [sp, #28]
            specifier.width = 8;
 8006c3e:	2308      	movs	r3, #8
 8006c40:	9305      	str	r3, [sp, #20]
            specifier.flags |= FLAG_CAPS;
 8006c42:	9b07      	ldr	r3, [sp, #28]
 8006c44:	f043 0308 	orr.w	r3, r3, #8
 8006c48:	9307      	str	r3, [sp, #28]
            specifier.flags |= FLAG_HEX;
 8006c4a:	9b07      	ldr	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8006c4c:	aa05      	add	r2, sp, #20
 8006c4e:	f854 0b04 	ldr.w	r0, [r4], #4
 8006c52:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8006c54:	f043 0310 	orr.w	r3, r3, #16
 8006c58:	9307      	str	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8006c5a:	f7ff fe53 	bl	8006904 <_write_number>
 8006c5e:	4405      	add	r5, r0
            break;
 8006c60:	e7c8      	b.n	8006bf4 <vlc_print+0x1c8>
            specifier.flags |= FLAG_IS_SIGNED;
 8006c62:	9b07      	ldr	r3, [sp, #28]
 8006c64:	f043 0304 	orr.w	r3, r3, #4
 8006c68:	9307      	str	r3, [sp, #28]
            if (c == 'u')
 8006c6a:	2975      	cmp	r1, #117	; 0x75
              val = va_arg(vl, unsigned int);
 8006c6c:	6820      	ldr	r0, [r4, #0]
 8006c6e:	f104 0604 	add.w	r6, r4, #4
            count += _write_number(val, &specifier);
 8006c72:	aa05      	add	r2, sp, #20
              val = va_arg(vl, unsigned int);
 8006c74:	bf0c      	ite	eq
 8006c76:	2100      	moveq	r1, #0
                val = va_arg(vl, signed long);
 8006c78:	17c1      	asrne	r1, r0, #31
            count += _write_number(val, &specifier);
 8006c7a:	f7ff fe43 	bl	8006904 <_write_number>
            break;
 8006c7e:	4634      	mov	r4, r6
            count += _write_number(val, &specifier);
 8006c80:	4405      	add	r5, r0
            break;
 8006c82:	e7b7      	b.n	8006bf4 <vlc_print+0x1c8>
            dbl = va_arg(vl, double);
 8006c84:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 8006c86:	9b06      	ldr	r3, [sp, #24]
            dbl = va_arg(vl, double);
 8006c88:	f024 0407 	bic.w	r4, r4, #7
 8006c8c:	ecb4 8b02 	vldmia	r4!, {d8}
            if (specifier.precision == 0)
 8006c90:	b90b      	cbnz	r3, 8006c96 <vlc_print+0x26a>
              specifier.precision = 6;
 8006c92:	2306      	movs	r3, #6
 8006c94:	9306      	str	r3, [sp, #24]
  double mul = 1.0;
 8006c96:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  for (int i=0;i <specifier->precision; i++)
 8006c9a:	9e06      	ldr	r6, [sp, #24]
    mul *= 10;
 8006c9c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	42b3      	cmp	r3, r6
 8006ca4:	f2c0 80a4 	blt.w	8006df0 <vlc_print+0x3c4>
  if (is_signed)
 8006ca8:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8006cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb0:	f140 80a2 	bpl.w	8006df8 <vlc_print+0x3cc>
    number = -number;
 8006cb4:	eeb1 5b48 	vneg.f64	d5, d8
  number += (half_ / mul);
 8006cb8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
  uint32_t count = 0;
 8006cbc:	f04f 0800 	mov.w	r8, #0
  uint32_t idx = sizeof(buf) - 1;
 8006cc0:	f04f 093f 	mov.w	r9, #63	; 0x3f
  number += (half_ / mul);
 8006cc4:	ee84 6b07 	vdiv.f64	d6, d4, d7
 8006cc8:	ee36 6b05 	vadd.f64	d6, d6, d5
  val = (uint64_t)(number * mul);
 8006ccc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006cd0:	ec51 0b17 	vmov	r0, r1, d7
 8006cd4:	f7f9 fc34 	bl	8000540 <__aeabi_d2ulz>
 8006cd8:	4603      	mov	r3, r0
    uint64_t t = val / 10;
 8006cda:	469a      	mov	sl, r3
 8006cdc:	220a      	movs	r2, #10
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9101      	str	r1, [sp, #4]
 8006ce2:	4650      	mov	r0, sl
 8006ce4:	f7f9 fc12 	bl	800050c <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 8006ce8:	f10a 0c30 	add.w	ip, sl, #48	; 0x30
    uint64_t t = val / 10;
 8006cec:	4603      	mov	r3, r0
    chr = (val - t * 10) + '0';
 8006cee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    buf[idx--] = chr;
 8006cf2:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    chr = (val - t * 10) + '0';
 8006cf6:	ebac 0040 	sub.w	r0, ip, r0, lsl #1
    buf[idx--] = chr;
 8006cfa:	f109 0c68 	add.w	ip, r9, #104	; 0x68
 8006cfe:	44ec      	add	ip, sp
 8006d00:	f80c 0c40 	strb.w	r0, [ip, #-64]
    count++;
 8006d04:	f108 0001 	add.w	r0, r8, #1
    if (count == specifier->precision) {
 8006d08:	4286      	cmp	r6, r0
      buf[idx--] = '.';
 8006d0a:	bf05      	ittet	eq
 8006d0c:	3268      	addeq	r2, #104	; 0x68
 8006d0e:	202e      	moveq	r0, #46	; 0x2e
    buf[idx--] = chr;
 8006d10:	4691      	movne	r9, r2
      buf[idx--] = '.';
 8006d12:	f1a9 0902 	subeq.w	r9, r9, #2
 8006d16:	bf05      	ittet	eq
 8006d18:	446a      	addeq	r2, sp
      count++;
 8006d1a:	f108 0802 	addeq.w	r8, r8, #2
    count++;
 8006d1e:	4680      	movne	r8, r0
      buf[idx--] = '.';
 8006d20:	f802 0c40 	strbeq.w	r0, [r2, #-64]
  } while (val);
 8006d24:	f1ba 0f0a 	cmp.w	sl, #10
 8006d28:	9a01      	ldr	r2, [sp, #4]
 8006d2a:	f172 0200 	sbcs.w	r2, r2, #0
 8006d2e:	d2d4      	bcs.n	8006cda <vlc_print+0x2ae>
    buf[idx--] = '0';
 8006d30:	4546      	cmp	r6, r8
 8006d32:	f1c6 0001 	rsb	r0, r6, #1
 8006d36:	eba6 0a08 	sub.w	sl, r6, r8
 8006d3a:	ab0a      	add	r3, sp, #40	; 0x28
 8006d3c:	4440      	add	r0, r8
 8006d3e:	bf3c      	itt	cc
 8006d40:	2001      	movcc	r0, #1
 8006d42:	f04f 0a00 	movcc.w	sl, #0
 8006d46:	2130      	movs	r1, #48	; 0x30
 8006d48:	4448      	add	r0, r9
 8006d4a:	4652      	mov	r2, sl
 8006d4c:	4418      	add	r0, r3
 8006d4e:	f006 f9f1 	bl	800d134 <memset>
 8006d52:	eba8 0306 	sub.w	r3, r8, r6
 8006d56:	4546      	cmp	r6, r8
 8006d58:	bf38      	it	cc
 8006d5a:	2300      	movcc	r3, #0
 8006d5c:	44d0      	add	r8, sl
  if (count == specifier->precision) {
 8006d5e:	4546      	cmp	r6, r8
 8006d60:	4499      	add	r9, r3
 8006d62:	f106 0601 	add.w	r6, r6, #1
 8006d66:	d108      	bne.n	8006d7a <vlc_print+0x34e>
    buf[idx--] = '.';
 8006d68:	f109 0368 	add.w	r3, r9, #104	; 0x68
 8006d6c:	222e      	movs	r2, #46	; 0x2e
    count++;
 8006d6e:	46b0      	mov	r8, r6
    buf[idx--] = '.';
 8006d70:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006d74:	446b      	add	r3, sp
 8006d76:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 8006d7a:	4546      	cmp	r6, r8
 8006d7c:	d109      	bne.n	8006d92 <vlc_print+0x366>
    buf[idx--] = '0';
 8006d7e:	f109 0368 	add.w	r3, r9, #104	; 0x68
 8006d82:	2230      	movs	r2, #48	; 0x30
    count++;
 8006d84:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '0';
 8006d88:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006d8c:	446b      	add	r3, sp
 8006d8e:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 8006d92:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8006d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d9a:	d509      	bpl.n	8006db0 <vlc_print+0x384>
    buf[idx--] = '-';
 8006d9c:	f109 0368 	add.w	r3, r9, #104	; 0x68
 8006da0:	222d      	movs	r2, #45	; 0x2d
    count++;
 8006da2:	f108 0801 	add.w	r8, r8, #1
    buf[idx--] = '-';
 8006da6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006daa:	446b      	add	r3, sp
 8006dac:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 8006db0:	9e05      	ldr	r6, [sp, #20]
    buf[idx--] = ' ';
 8006db2:	ab0a      	add	r3, sp, #40	; 0x28
 8006db4:	2120      	movs	r1, #32
 8006db6:	45b0      	cmp	r8, r6
 8006db8:	f1c6 0001 	rsb	r0, r6, #1
 8006dbc:	eba6 0a08 	sub.w	sl, r6, r8
 8006dc0:	4440      	add	r0, r8
 8006dc2:	bf84      	itt	hi
 8006dc4:	2001      	movhi	r0, #1
 8006dc6:	f04f 0a00 	movhi.w	sl, #0
 8006dca:	4448      	add	r0, r9
 8006dcc:	4652      	mov	r2, sl
 8006dce:	4418      	add	r0, r3
 8006dd0:	f006 f9b0 	bl	800d134 <memset>
  for(int i = 0; i < count; i++) {
 8006dd4:	eba8 0306 	sub.w	r3, r8, r6
 8006dd8:	45b0      	cmp	r8, r6
 8006dda:	bf88      	it	hi
 8006ddc:	2300      	movhi	r3, #0
 8006dde:	44d0      	add	r8, sl
 8006de0:	2600      	movs	r6, #0
 8006de2:	4499      	add	r9, r3
 8006de4:	ab0a      	add	r3, sp, #40	; 0x28
 8006de6:	4499      	add	r9, r3
 8006de8:	45b0      	cmp	r8, r6
 8006dea:	d108      	bne.n	8006dfe <vlc_print+0x3d2>
            count += _write_double(dbl, &specifier);
 8006dec:	4445      	add	r5, r8
            break;
 8006dee:	e701      	b.n	8006bf4 <vlc_print+0x1c8>
    mul *= 10;
 8006df0:	ee27 7b06 	vmul.f64	d7, d7, d6
  for (int i=0;i <specifier->precision; i++)
 8006df4:	3301      	adds	r3, #1
 8006df6:	e754      	b.n	8006ca2 <vlc_print+0x276>
 8006df8:	eeb0 5b48 	vmov.f64	d5, d8
 8006dfc:	e75c      	b.n	8006cb8 <vlc_print+0x28c>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8006dfe:	f819 1f01 	ldrb.w	r1, [r9, #1]!
  for(int i = 0; i < count; i++) {
 8006e02:	3601      	adds	r6, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8006e04:	e9dd 3008 	ldrd	r3, r0, [sp, #32]
 8006e08:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8006e0a:	e7ed      	b.n	8006de8 <vlc_print+0x3bc>
 8006e0c:	f1be 0f00 	cmp.w	lr, #0
 8006e10:	d000      	beq.n	8006e14 <vlc_print+0x3e8>
 8006e12:	9005      	str	r0, [sp, #20]
 8006e14:	f1b8 0f00 	cmp.w	r8, #0
 8006e18:	d000      	beq.n	8006e1c <vlc_print+0x3f0>
 8006e1a:	9206      	str	r2, [sp, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	f43f ae83 	beq.w	8006b28 <vlc_print+0xfc>
 8006e22:	9b01      	ldr	r3, [sp, #4]
 8006e24:	9307      	str	r3, [sp, #28]
 8006e26:	e67f      	b.n	8006b28 <vlc_print+0xfc>
          has_precision = true;
 8006e28:	f04f 0c01 	mov.w	ip, #1
 8006e2c:	e629      	b.n	8006a82 <vlc_print+0x56>
          long_type = true;
 8006e2e:	2101      	movs	r1, #1
 8006e30:	9103      	str	r1, [sp, #12]
      while (done == false) {
 8006e32:	e626      	b.n	8006a82 <vlc_print+0x56>
 8006e34:	08013620 	.word	0x08013620

08006e38 <ai_network_1669802707750_get_report>:


AI_API_ENTRY
ai_bool ai_network_1669802707750_get_report(
  ai_handle network, ai_network_report* report)
{
 8006e38:	b570      	push	{r4, r5, r6, lr}
 8006e3a:	460d      	mov	r5, r1
 8006e3c:	b0a0      	sub	sp, #128	; 0x80
 8006e3e:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8006e40:	f001 ffa0 	bl	8008d84 <ai_platform_context_acquire>
 8006e44:	4604      	mov	r4, r0

  if (report && net_ctx)
 8006e46:	2d00      	cmp	r5, #0
 8006e48:	d032      	beq.n	8006eb0 <ai_network_1669802707750_get_report+0x78>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d02d      	beq.n	8006eaa <ai_network_1669802707750_get_report+0x72>
  {
    ai_network_report r = {
 8006e4e:	226c      	movs	r2, #108	; 0x6c
 8006e50:	2100      	movs	r1, #0
 8006e52:	a805      	add	r0, sp, #20
 8006e54:	f006 f96e 	bl	800d134 <memset>
 8006e58:	4b16      	ldr	r3, [pc, #88]	; (8006eb4 <ai_network_1669802707750_get_report+0x7c>)
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	4b16      	ldr	r3, [pc, #88]	; (8006eb8 <ai_network_1669802707750_get_report+0x80>)
 8006e5e:	9302      	str	r3, [sp, #8]
 8006e60:	4b16      	ldr	r3, [pc, #88]	; (8006ebc <ai_network_1669802707750_get_report+0x84>)
 8006e62:	9303      	str	r3, [sp, #12]
 8006e64:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <ai_network_1669802707750_get_report+0x88>)
 8006e66:	9304      	str	r3, [sp, #16]
      .model_signature   = AI_NETWORK_1669802707750_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8006e68:	f001 fd40 	bl	80088ec <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8006e6c:	9005      	str	r0, [sp, #20]
      .runtime_version   = ai_platform_runtime_get_version(),
 8006e6e:	f001 fdc1 	bl	80089f4 <ai_platform_runtime_get_version>
    ai_network_report r = {
 8006e72:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <ai_network_1669802707750_get_report+0x8c>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8006e74:	9006      	str	r0, [sp, #24]
    ai_network_report r = {
 8006e76:	9307      	str	r3, [sp, #28]
 8006e78:	f240 3307 	movw	r3, #775	; 0x307
 8006e7c:	f8ad 3020 	strh.w	r3, [sp, #32]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8006e80:	f001 fe50 	bl	8008b24 <ai_platform_api_get_version>
 8006e84:	900a      	str	r0, [sp, #40]	; 0x28
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8006e86:	f001 fee5 	bl	8008c54 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8006e8a:	4b0f      	ldr	r3, [pc, #60]	; (8006ec8 <ai_network_1669802707750_get_report+0x90>)
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8006e8c:	a901      	add	r1, sp, #4
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8006e8e:	900b      	str	r0, [sp, #44]	; 0x2c
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8006e90:	4630      	mov	r0, r6
    ai_network_report r = {
 8006e92:	930c      	str	r3, [sp, #48]	; 0x30
 8006e94:	4b0d      	ldr	r3, [pc, #52]	; (8006ecc <ai_network_1669802707750_get_report+0x94>)
 8006e96:	9310      	str	r3, [sp, #64]	; 0x40
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8006e98:	f002 f912 	bl	80090c0 <ai_platform_api_get_network_report>
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	b120      	cbz	r0, 8006eaa <ai_network_1669802707750_get_report+0x72>

    *report = r;
 8006ea0:	227c      	movs	r2, #124	; 0x7c
 8006ea2:	a901      	add	r1, sp, #4
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	f006 f937 	bl	800d118 <memcpy>
    return true;
  }
  return false;
}
 8006eaa:	4620      	mov	r0, r4
 8006eac:	b020      	add	sp, #128	; 0x80
 8006eae:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8006eb0:	462c      	mov	r4, r5
 8006eb2:	e7fa      	b.n	8006eaa <ai_network_1669802707750_get_report+0x72>
 8006eb4:	0801036c 	.word	0x0801036c
 8006eb8:	08013627 	.word	0x08013627
 8006ebc:	08013648 	.word	0x08013648
 8006ec0:	0801041a 	.word	0x0801041a
 8006ec4:	0806fa5f 	.word	0x0806fa5f
 8006ec8:	000d5ae0 	.word	0x000d5ae0
 8006ecc:	a1facade 	.word	0xa1facade

08006ed0 <ai_network_1669802707750_get_error>:

AI_API_ENTRY
ai_error ai_network_1669802707750_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8006ed0:	f001 bfe4 	b.w	8008e9c <ai_platform_network_get_error>

08006ed4 <ai_network_1669802707750_create>:
}

AI_API_ENTRY
ai_error ai_network_1669802707750_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8006ed4:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8006ed6:	2305      	movs	r3, #5
 8006ed8:	2200      	movs	r2, #0
 8006eda:	e9cd 3200 	strd	r3, r2, [sp]
 8006ede:	2301      	movs	r3, #1
 8006ee0:	4a02      	ldr	r2, [pc, #8]	; (8006eec <ai_network_1669802707750_create+0x18>)
 8006ee2:	f002 fd1d 	bl	8009920 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8006ee6:	b003      	add	sp, #12
 8006ee8:	f85d fb04 	ldr.w	pc, [sp], #4
 8006eec:	200011f4 	.word	0x200011f4

08006ef0 <ai_network_1669802707750_destroy>:
}

AI_API_ENTRY
ai_handle ai_network_1669802707750_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8006ef0:	f002 bef0 	b.w	8009cd4 <ai_platform_network_destroy>

08006ef4 <ai_network_1669802707750_init>:
}

AI_API_ENTRY
ai_bool ai_network_1669802707750_init(
  ai_handle network, const ai_network_params* params)
{
 8006ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ef8:	4607      	mov	r7, r0
 8006efa:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8006efc:	f002 fff2 	bl	8009ee4 <ai_platform_network_init>
  if (!net_ctx) return false;
 8006f00:	4604      	mov	r4, r0
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f000 8093 	beq.w	800702e <ai_network_1669802707750_init+0x13a>
  if (ai_platform_get_weights_map(g_network_1669802707750_weights_map, 1, params)) {
 8006f08:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8007090 <ai_network_1669802707750_init+0x19c>
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	2101      	movs	r1, #1
 8006f10:	4640      	mov	r0, r8
 8006f12:	f001 fc21 	bl	8008758 <ai_platform_get_weights_map>
 8006f16:	4605      	mov	r5, r0
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	f000 808a 	beq.w	8007032 <ai_network_1669802707750_init+0x13e>
    dense_3_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006f1e:	4a4b      	ldr	r2, [pc, #300]	; (800704c <ai_network_1669802707750_init+0x158>)
 8006f20:	6813      	ldr	r3, [r2, #0]
 8006f22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f26:	6013      	str	r3, [r2, #0]
    dense_3_dense_weights_array.data = AI_PTR(g_network_1669802707750_weights_map[0] + 0);
 8006f28:	f8d8 3000 	ldr.w	r3, [r8]
    dense_3_dense_weights_array.data_start = AI_PTR(g_network_1669802707750_weights_map[0] + 0);
 8006f2c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_3_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006f30:	4a47      	ldr	r2, [pc, #284]	; (8007050 <ai_network_1669802707750_init+0x15c>)
 8006f32:	6811      	ldr	r1, [r2, #0]
 8006f34:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006f38:	6011      	str	r1, [r2, #0]
    dense_3_dense_bias_array.data = AI_PTR(g_network_1669802707750_weights_map[0] + 3072);
 8006f3a:	f503 6140 	add.w	r1, r3, #3072	; 0xc00
    dense_3_dense_bias_array.data_start = AI_PTR(g_network_1669802707750_weights_map[0] + 3072);
 8006f3e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8006f42:	4a44      	ldr	r2, [pc, #272]	; (8007054 <ai_network_1669802707750_init+0x160>)
 8006f44:	6811      	ldr	r1, [r2, #0]
 8006f46:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006f4a:	6011      	str	r1, [r2, #0]
    conv2d_1_conv2d_weights_array.data = AI_PTR(g_network_1669802707750_weights_map[0] + 3096);
 8006f4c:	f603 4118 	addw	r1, r3, #3096	; 0xc18
    conv2d_1_conv2d_weights_array.data_start = AI_PTR(g_network_1669802707750_weights_map[0] + 3096);
 8006f50:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8006f54:	4a40      	ldr	r2, [pc, #256]	; (8007058 <ai_network_1669802707750_init+0x164>)
 8006f56:	6811      	ldr	r1, [r2, #0]
 8006f58:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006f5c:	6011      	str	r1, [r2, #0]
    conv2d_1_conv2d_bias_array.data = AI_PTR(g_network_1669802707750_weights_map[0] + 5144);
 8006f5e:	f503 51a0 	add.w	r1, r3, #5120	; 0x1400
 8006f62:	3118      	adds	r1, #24
    conv2d_1_conv2d_bias_array.data_start = AI_PTR(g_network_1669802707750_weights_map[0] + 5144);
 8006f64:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006f68:	4a3c      	ldr	r2, [pc, #240]	; (800705c <ai_network_1669802707750_init+0x168>)
 8006f6a:	6811      	ldr	r1, [r2, #0]
 8006f6c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006f70:	6011      	str	r1, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_1669802707750_weights_map[0] + 5720);
 8006f72:	f503 51b2 	add.w	r1, r3, #5696	; 0x1640
 8006f76:	3118      	adds	r1, #24
 8006f78:	6091      	str	r1, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_1669802707750_weights_map[0] + 5656);
 8006f7a:	f503 51b0 	add.w	r1, r3, #5632	; 0x1600
 8006f7e:	3118      	adds	r1, #24
 8006f80:	60d1      	str	r1, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006f82:	4a37      	ldr	r2, [pc, #220]	; (8007060 <ai_network_1669802707750_init+0x16c>)
 8006f84:	6811      	ldr	r1, [r2, #0]
 8006f86:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006f8a:	6011      	str	r1, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_1669802707750_weights_map[0] + 366168);
 8006f8c:	f503 21b2 	add.w	r1, r3, #364544	; 0x59000
 8006f90:	f501 61cb 	add.w	r1, r1, #1624	; 0x658
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_1669802707750_weights_map[0] + 366168);
 8006f94:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006f98:	4a32      	ldr	r2, [pc, #200]	; (8007064 <ai_network_1669802707750_init+0x170>)
 8006f9a:	6811      	ldr	r1, [r2, #0]
 8006f9c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006fa0:	6011      	str	r1, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(g_network_1669802707750_weights_map[0] + 366744);
 8006fa2:	f503 21b3 	add.w	r1, r3, #366592	; 0x59800
    dense_2_dense_bias_array.data = AI_PTR(g_network_1669802707750_weights_map[0] + 374936);
 8006fa6:	f503 23b7 	add.w	r3, r3, #374784	; 0x5b800
    dense_2_dense_weights_array.data = AI_PTR(g_network_1669802707750_weights_map[0] + 366744);
 8006faa:	f101 0098 	add.w	r0, r1, #152	; 0x98
    dense_2_dense_weights_array.data_start = AI_PTR(g_network_1669802707750_weights_map[0] + 366680);
 8006fae:	3158      	adds	r1, #88	; 0x58
    dense_2_dense_bias_array.data = AI_PTR(g_network_1669802707750_weights_map[0] + 374936);
 8006fb0:	3398      	adds	r3, #152	; 0x98
    dense_2_dense_weights_array.data_start = AI_PTR(g_network_1669802707750_weights_map[0] + 366680);
 8006fb2:	60d1      	str	r1, [r2, #12]
    dense_2_dense_weights_array.data = AI_PTR(g_network_1669802707750_weights_map[0] + 366744);
 8006fb4:	6090      	str	r0, [r2, #8]
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006fb6:	4a2c      	ldr	r2, [pc, #176]	; (8007068 <ai_network_1669802707750_init+0x174>)
 8006fb8:	6811      	ldr	r1, [r2, #0]
 8006fba:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006fbe:	6011      	str	r1, [r2, #0]
    dense_2_dense_bias_array.data_start = AI_PTR(g_network_1669802707750_weights_map[0] + 374936);
 8006fc0:	e9c2 3302 	strd	r3, r3, [r2, #8]
  if (ai_platform_get_activations_map(g_network_1669802707750_activations_map, 1, params)) {
 8006fc4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8007094 <ai_network_1669802707750_init+0x1a0>
 8006fc8:	4632      	mov	r2, r6
 8006fca:	2101      	movs	r1, #1
 8006fcc:	4640      	mov	r0, r8
 8006fce:	f001 fc1b 	bl	8008808 <ai_platform_get_activations_map>
 8006fd2:	4606      	mov	r6, r0
 8006fd4:	b398      	cbz	r0, 800703e <ai_network_1669802707750_init+0x14a>
    input_0_output_array.data = AI_PTR(g_network_1669802707750_activations_map[0] + 22472);
 8006fd6:	f8d8 3000 	ldr.w	r3, [r8]
 8006fda:	4924      	ldr	r1, [pc, #144]	; (800706c <ai_network_1669802707750_init+0x178>)
 8006fdc:	f503 42af 	add.w	r2, r3, #22400	; 0x5780
 8006fe0:	3248      	adds	r2, #72	; 0x48
    input_0_output_array.data_start = AI_PTR(g_network_1669802707750_activations_map[0] + 22472);
 8006fe2:	e9c1 2202 	strd	r2, r2, [r1, #8]
    conv2d_1_conv2d_scratch0_array.data = AI_PTR(g_network_1669802707750_activations_map[0] + 23552);
 8006fe6:	f503 41b8 	add.w	r1, r3, #23552	; 0x5c00
 8006fea:	4a21      	ldr	r2, [pc, #132]	; (8007070 <ai_network_1669802707750_init+0x17c>)
    conv2d_1_conv2d_scratch0_array.data_start = AI_PTR(g_network_1669802707750_activations_map[0] + 23552);
 8006fec:	e9c2 1102 	strd	r1, r1, [r2, #8]
    conv2d_1_conv2d_output_array.data = AI_PTR(g_network_1669802707750_activations_map[0] + 0);
 8006ff0:	4a20      	ldr	r2, [pc, #128]	; (8007074 <ai_network_1669802707750_init+0x180>)
    dense_1_dense_output_array.data = AI_PTR(g_network_1669802707750_activations_map[0] + 22528);
 8006ff2:	f503 41b0 	add.w	r1, r3, #22528	; 0x5800
    conv2d_1_conv2d_output_array.data_start = AI_PTR(g_network_1669802707750_activations_map[0] + 0);
 8006ff6:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_1_dense_output_array.data = AI_PTR(g_network_1669802707750_activations_map[0] + 22528);
 8006ffa:	4a1f      	ldr	r2, [pc, #124]	; (8007078 <ai_network_1669802707750_init+0x184>)
    dense_1_dense_output_array.data_start = AI_PTR(g_network_1669802707750_activations_map[0] + 22528);
 8006ffc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_1_output_array.data = AI_PTR(g_network_1669802707750_activations_map[0] + 0);
 8007000:	4a1e      	ldr	r2, [pc, #120]	; (800707c <ai_network_1669802707750_init+0x188>)
    dense_2_dense_output_array.data = AI_PTR(g_network_1669802707750_activations_map[0] + 512);
 8007002:	491f      	ldr	r1, [pc, #124]	; (8007080 <ai_network_1669802707750_init+0x18c>)
    dense_1_output_array.data_start = AI_PTR(g_network_1669802707750_activations_map[0] + 0);
 8007004:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_2_dense_output_array.data = AI_PTR(g_network_1669802707750_activations_map[0] + 512);
 8007008:	f503 7200 	add.w	r2, r3, #512	; 0x200
    dense_2_dense_output_array.data_start = AI_PTR(g_network_1669802707750_activations_map[0] + 512);
 800700c:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_2_output_array.data = AI_PTR(g_network_1669802707750_activations_map[0] + 0);
 8007010:	491c      	ldr	r1, [pc, #112]	; (8007084 <ai_network_1669802707750_init+0x190>)
    dense_2_output_array.data_start = AI_PTR(g_network_1669802707750_activations_map[0] + 0);
 8007012:	e9c1 3302 	strd	r3, r3, [r1, #8]
    dense_3_dense_output_array.data = AI_PTR(g_network_1669802707750_activations_map[0] + 512);
 8007016:	491c      	ldr	r1, [pc, #112]	; (8007088 <ai_network_1669802707750_init+0x194>)
    dense_3_dense_output_array.data_start = AI_PTR(g_network_1669802707750_activations_map[0] + 512);
 8007018:	e9c1 2202 	strd	r2, r2, [r1, #8]
    dense_3_output_array.data = AI_PTR(g_network_1669802707750_activations_map[0] + 0);
 800701c:	4a1b      	ldr	r2, [pc, #108]	; (800708c <ai_network_1669802707750_init+0x198>)
    dense_3_output_array.data_start = AI_PTR(g_network_1669802707750_activations_map[0] + 0);
 800701e:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= network_1669802707750_configure_weights(net_ctx, params);
  ok &= network_1669802707750_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8007022:	4638      	mov	r0, r7
 8007024:	f003 f8fa 	bl	800a21c <ai_platform_network_post_init>
 8007028:	4030      	ands	r0, r6
 800702a:	4028      	ands	r0, r5
 800702c:	b2c0      	uxtb	r0, r0

  return ok;
}
 800702e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8007032:	2212      	movs	r2, #18
 8007034:	2130      	movs	r1, #48	; 0x30
 8007036:	4620      	mov	r0, r4
 8007038:	f002 f83c 	bl	80090b4 <ai_platform_network_set_error>
  return false;
 800703c:	e7c2      	b.n	8006fc4 <ai_network_1669802707750_init+0xd0>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800703e:	2213      	movs	r2, #19
 8007040:	2130      	movs	r1, #48	; 0x30
 8007042:	4620      	mov	r0, r4
 8007044:	f002 f836 	bl	80090b4 <ai_platform_network_set_error>
  return false;
 8007048:	e7eb      	b.n	8007022 <ai_network_1669802707750_init+0x12e>
 800704a:	bf00      	nop
 800704c:	20001198 	.word	0x20001198
 8007050:	20001124 	.word	0x20001124
 8007054:	20000f20 	.word	0x20000f20
 8007058:	20000e24 	.word	0x20000e24
 800705c:	20000fc0 	.word	0x20000fc0
 8007060:	20000f4c 	.word	0x20000f4c
 8007064:	200010ac 	.word	0x200010ac
 8007068:	20001038 	.word	0x20001038
 800706c:	2000125c 	.word	0x2000125c
 8007070:	20000ef4 	.word	0x20000ef4
 8007074:	20000ec8 	.word	0x20000ec8
 8007078:	20000f94 	.word	0x20000f94
 800707c:	2000100c 	.word	0x2000100c
 8007080:	20001080 	.word	0x20001080
 8007084:	200010f8 	.word	0x200010f8
 8007088:	2000116c 	.word	0x2000116c
 800708c:	200011e4 	.word	0x200011e4
 8007090:	20008f38 	.word	0x20008f38
 8007094:	20008f34 	.word	0x20008f34

08007098 <ai_network_1669802707750_run>:

AI_API_ENTRY
ai_i32 ai_network_1669802707750_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8007098:	f003 b9ea 	b.w	800a470 <ai_platform_network_process>

0800709c <ai_network_1669802707750_forward>:
}

AI_API_ENTRY
ai_i32 ai_network_1669802707750_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 800709c:	2200      	movs	r2, #0
 800709e:	f003 b9e7 	b.w	800a470 <ai_platform_network_process>
	...

080070a4 <ai_network_1669802707750_data_params_get>:
 * @ingroup network_1669802707750_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_1669802707750_data_params_get(ai_network_params* params)
{
 80070a4:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80070a6:	4603      	mov	r3, r0
{
 80070a8:	b085      	sub	sp, #20
  if (!params) return false;
 80070aa:	b170      	cbz	r0, 80070ca <ai_network_1669802707750_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80070ac:	4c08      	ldr	r4, [pc, #32]	; (80070d0 <ai_network_1669802707750_data_params_get+0x2c>)
 80070ae:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_1669802707750_DATA_ACTIVATIONS_COUNT, g_network_1669802707750_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80070b0:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 80070b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80070b6:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80070ba:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80070be:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_1669802707750_DATA_WEIGHTS_COUNT, g_network_1669802707750_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80070c2:	4629      	mov	r1, r5
 80070c4:	4618      	mov	r0, r3
 80070c6:	f001 fbf7 	bl	80088b8 <ai_platform_bind_network_params>
}
 80070ca:	b005      	add	sp, #20
 80070cc:	bd30      	pop	{r4, r5, pc}
 80070ce:	bf00      	nop
 80070d0:	08010324 	.word	0x08010324

080070d4 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 80070d4:	2300      	movs	r3, #0
    iter->pos = fields;
 80070d6:	e9c0 1100 	strd	r1, r1, [r0]
    iter->dest_struct = dest_struct;
 80070da:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 80070de:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 80070e2:	441a      	add	r2, r3
 80070e4:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80070e6:	f9b1 3005 	ldrsh.w	r3, [r1, #5]
 80070ea:	441a      	add	r2, r3
 80070ec:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 80070ee:	8808      	ldrh	r0, [r1, #0]
}
 80070f0:	3800      	subs	r0, #0
 80070f2:	bf18      	it	ne
 80070f4:	2001      	movne	r0, #1
 80070f6:	4770      	bx	lr

080070f8 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 80070f8:	6841      	ldr	r1, [r0, #4]
{
 80070fa:	4603      	mov	r3, r0

    if (prev_field->tag == 0)
 80070fc:	880a      	ldrh	r2, [r1, #0]
{
 80070fe:	b570      	push	{r4, r5, r6, lr}
    if (prev_field->tag == 0)
 8007100:	2a00      	cmp	r2, #0
 8007102:	d038      	beq.n	8007176 <pb_field_iter_next+0x7e>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
 8007104:	f101 020f 	add.w	r2, r1, #15
    
    if (iter->pos->tag == 0)
 8007108:	f8b1 400f 	ldrh.w	r4, [r1, #15]
    iter->pos++;
 800710c:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 800710e:	b92c      	cbnz	r4, 800711c <pb_field_iter_next+0x24>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8007110:	68c2      	ldr	r2, [r0, #12]
 8007112:	6801      	ldr	r1, [r0, #0]
 8007114:	f7ff ffde 	bl	80070d4 <pb_field_iter_begin>
        return false;
 8007118:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 800711a:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800711c:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 800711e:	f8b1 2007 	ldrh.w	r2, [r1, #7]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8007122:	f000 0630 	and.w	r6, r0, #48	; 0x30
            iter->pos->data_offset == PB_SIZE_MAX)
 8007126:	8a4c      	ldrh	r4, [r1, #18]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8007128:	2e30      	cmp	r6, #48	; 0x30
 800712a:	d10a      	bne.n	8007142 <pb_field_iter_next+0x4a>
 800712c:	7c4d      	ldrb	r5, [r1, #17]
 800712e:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8007132:	2d30      	cmp	r5, #48	; 0x30
 8007134:	d119      	bne.n	800716a <pb_field_iter_next+0x72>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 8007136:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800713a:	42ac      	cmp	r4, r5
 800713c:	d115      	bne.n	800716a <pb_field_iter_next+0x72>
            return true;
 800713e:	2001      	movs	r0, #1
 8007140:	e7eb      	b.n	800711a <pb_field_iter_next+0x22>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8007142:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 8007146:	2d20      	cmp	r5, #32
 8007148:	d10f      	bne.n	800716a <pb_field_iter_next+0x72>
            prev_size *= prev_field->array_size;
 800714a:	f8b1 0009 	ldrh.w	r0, [r1, #9]
 800714e:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8007150:	b916      	cbnz	r6, 8007158 <pb_field_iter_next+0x60>
            iter->required_field_index++;
 8007152:	6898      	ldr	r0, [r3, #8]
 8007154:	3001      	adds	r0, #1
 8007156:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 8007158:	4414      	add	r4, r2
 800715a:	691a      	ldr	r2, [r3, #16]
 800715c:	4422      	add	r2, r4
 800715e:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8007160:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8007164:	440a      	add	r2, r1
 8007166:	615a      	str	r2, [r3, #20]
        return true;
 8007168:	e7e9      	b.n	800713e <pb_field_iter_next+0x46>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 800716a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 800716e:	2880      	cmp	r0, #128	; 0x80
 8007170:	bf08      	it	eq
 8007172:	2204      	moveq	r2, #4
 8007174:	e7ec      	b.n	8007150 <pb_field_iter_next+0x58>
        return false;
 8007176:	4610      	mov	r0, r2
 8007178:	e7cf      	b.n	800711a <pb_field_iter_next+0x22>

0800717a <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800717a:	b570      	push	{r4, r5, r6, lr}
 800717c:	4604      	mov	r4, r0
 800717e:	460d      	mov	r5, r1
    const pb_field_t *start = iter->pos;
 8007180:	6846      	ldr	r6, [r0, #4]
    
    do {
        if (iter->pos->tag == tag &&
 8007182:	6863      	ldr	r3, [r4, #4]
 8007184:	881a      	ldrh	r2, [r3, #0]
 8007186:	42aa      	cmp	r2, r5
 8007188:	d104      	bne.n	8007194 <pb_field_iter_find+0x1a>
 800718a:	789b      	ldrb	r3, [r3, #2]
 800718c:	f003 030f 	and.w	r3, r3, #15
 8007190:	2b08      	cmp	r3, #8
 8007192:	d107      	bne.n	80071a4 <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 8007194:	4620      	mov	r0, r4
 8007196:	f7ff ffaf 	bl	80070f8 <pb_field_iter_next>
    } while (iter->pos != start);
 800719a:	6863      	ldr	r3, [r4, #4]
 800719c:	42b3      	cmp	r3, r6
 800719e:	d1f0      	bne.n	8007182 <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 80071a0:	2000      	movs	r0, #0
}
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 80071a4:	2001      	movs	r0, #1
 80071a6:	e7fc      	b.n	80071a2 <pb_field_iter_find+0x28>

080071a8 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80071a8:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 80071aa:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 80071ac:	18a3      	adds	r3, r4, r2
 80071ae:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 80071b0:	b939      	cbnz	r1, 80071c2 <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 80071b2:	2001      	movs	r0, #1
 80071b4:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 80071b6:	5ce0      	ldrb	r0, [r4, r3]
 80071b8:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 80071ba:	3301      	adds	r3, #1
 80071bc:	4293      	cmp	r3, r2
 80071be:	d1fa      	bne.n	80071b6 <buf_read+0xe>
 80071c0:	e7f7      	b.n	80071b2 <buf_read+0xa>
 80071c2:	2300      	movs	r3, #0
 80071c4:	e7fa      	b.n	80071bc <buf_read+0x14>

080071c6 <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 80071c6:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 80071c8:	6845      	ldr	r5, [r0, #4]
{
 80071ca:	b086      	sub	sp, #24
 80071cc:	4603      	mov	r3, r0
    type = iter->pos->type;
 80071ce:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80071d0:	f002 060f 	and.w	r6, r2, #15
 80071d4:	2e08      	cmp	r6, #8
 80071d6:	d11e      	bne.n	8007216 <pb_field_set_to_default+0x50>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80071d8:	6903      	ldr	r3, [r0, #16]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 80071da:	2600      	movs	r6, #0
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80071dc:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
 80071de:	b90c      	cbnz	r4, 80071e4 <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 80071e0:	b006      	add	sp, #24
 80071e2:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80071e4:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80071e6:	4668      	mov	r0, sp
 80071e8:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80071ea:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 80071ec:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7ff ff70 	bl	80070d4 <pb_field_iter_begin>
    iter->pData = extension->dest;
 80071f4:	6863      	ldr	r3, [r4, #4]
            pb_field_set_to_default(&ext_iter);
 80071f6:	4668      	mov	r0, sp
    iter->pData = extension->dest;
 80071f8:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 80071fa:	f104 030c 	add.w	r3, r4, #12
 80071fe:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8007200:	78ab      	ldrb	r3, [r5, #2]
 8007202:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007206:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 8007208:	bf04      	itt	eq
 800720a:	1d23      	addeq	r3, r4, #4
 800720c:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 800720e:	f7ff ffda 	bl	80071c6 <pb_field_set_to_default>
            ext = ext->next;
 8007212:	68a4      	ldr	r4, [r4, #8]
 8007214:	e7e3      	b.n	80071de <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8007216:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 800721a:	d127      	bne.n	800726c <pb_field_set_to_default+0xa6>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 800721c:	f002 0030 	and.w	r0, r2, #48	; 0x30
 8007220:	2810      	cmp	r0, #16
 8007222:	d110      	bne.n	8007246 <pb_field_set_to_default+0x80>
 8007224:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 8007228:	4282      	cmp	r2, r0
 800722a:	d000      	beq.n	800722e <pb_field_set_to_default+0x68>
            *(bool*)iter->pSize = false;
 800722c:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 800722e:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8007230:	f8d5 400b 	ldr.w	r4, [r5, #11]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8007234:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8007236:	d10b      	bne.n	8007250 <pb_field_set_to_default+0x8a>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8007238:	4601      	mov	r1, r0
 800723a:	4620      	mov	r0, r4
}
 800723c:	b006      	add	sp, #24
 800723e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8007242:	f000 b81b 	b.w	800727c <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8007246:	0690      	lsls	r0, r2, #26
 8007248:	d5f1      	bpl.n	800722e <pb_field_set_to_default+0x68>
            *(pb_size_t*)iter->pSize = 0;
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	8019      	strh	r1, [r3, #0]
}
 800724e:	e7c7      	b.n	80071e0 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8007250:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 8007254:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 8007256:	b124      	cbz	r4, 8007262 <pb_field_set_to_default+0x9c>
}
 8007258:	b006      	add	sp, #24
 800725a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 800725e:	f005 bf5b 	b.w	800d118 <memcpy>
}
 8007262:	b006      	add	sp, #24
 8007264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 8007268:	f005 bf64 	b.w	800d134 <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800726c:	2980      	cmp	r1, #128	; 0x80
 800726e:	d1b7      	bne.n	80071e0 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 8007270:	6900      	ldr	r0, [r0, #16]
 8007272:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8007274:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 8007276:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8007278:	d5b2      	bpl.n	80071e0 <pb_field_set_to_default+0x1a>
 800727a:	e7e6      	b.n	800724a <pb_field_set_to_default+0x84>

0800727c <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 800727c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800727e:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8007280:	4601      	mov	r1, r0
 8007282:	4668      	mov	r0, sp
 8007284:	f7ff ff26 	bl	80070d4 <pb_field_iter_begin>
 8007288:	b130      	cbz	r0, 8007298 <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 800728a:	4668      	mov	r0, sp
 800728c:	f7ff ff9b 	bl	80071c6 <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8007290:	4668      	mov	r0, sp
 8007292:	f7ff ff31 	bl	80070f8 <pb_field_iter_next>
 8007296:	e7f7      	b.n	8007288 <pb_message_set_to_defaults+0xc>
}
 8007298:	b007      	add	sp, #28
 800729a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080072a0 <pb_readbyte>:
    if (stream->bytes_left == 0)
 80072a0:	6883      	ldr	r3, [r0, #8]
{
 80072a2:	b510      	push	{r4, lr}
 80072a4:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 80072a6:	b93b      	cbnz	r3, 80072b8 <pb_readbyte+0x18>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80072a8:	68c2      	ldr	r2, [r0, #12]
 80072aa:	490b      	ldr	r1, [pc, #44]	; (80072d8 <pb_readbyte+0x38>)
 80072ac:	2a00      	cmp	r2, #0
 80072ae:	bf08      	it	eq
 80072b0:	460a      	moveq	r2, r1
 80072b2:	60c2      	str	r2, [r0, #12]
 80072b4:	4618      	mov	r0, r3
}
 80072b6:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 80072b8:	6803      	ldr	r3, [r0, #0]
 80072ba:	2201      	movs	r2, #1
 80072bc:	4798      	blx	r3
 80072be:	b930      	cbnz	r0, 80072ce <pb_readbyte+0x2e>
        PB_RETURN_ERROR(stream, "io error");
 80072c0:	68e3      	ldr	r3, [r4, #12]
 80072c2:	4a06      	ldr	r2, [pc, #24]	; (80072dc <pb_readbyte+0x3c>)
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bf08      	it	eq
 80072c8:	4613      	moveq	r3, r2
 80072ca:	60e3      	str	r3, [r4, #12]
 80072cc:	e7f3      	b.n	80072b6 <pb_readbyte+0x16>
    stream->bytes_left--;
 80072ce:	68a3      	ldr	r3, [r4, #8]
 80072d0:	3b01      	subs	r3, #1
 80072d2:	60a3      	str	r3, [r4, #8]
    return true;    
 80072d4:	e7ef      	b.n	80072b6 <pb_readbyte+0x16>
 80072d6:	bf00      	nop
 80072d8:	0806f138 	.word	0x0806f138
 80072dc:	0806f146 	.word	0x0806f146

080072e0 <pb_decode_varint32_eof>:
{
 80072e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80072e4:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 80072e6:	f10d 0107 	add.w	r1, sp, #7
{
 80072ea:	4605      	mov	r5, r0
 80072ec:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 80072ee:	f7ff ffd7 	bl	80072a0 <pb_readbyte>
 80072f2:	4606      	mov	r6, r0
 80072f4:	b958      	cbnz	r0, 800730e <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 80072f6:	68ab      	ldr	r3, [r5, #8]
 80072f8:	b10b      	cbz	r3, 80072fe <pb_decode_varint32_eof+0x1e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 80072fa:	2600      	movs	r6, #0
 80072fc:	e003      	b.n	8007306 <pb_decode_varint32_eof+0x26>
            if (eof)
 80072fe:	2c00      	cmp	r4, #0
 8007300:	d0fb      	beq.n	80072fa <pb_decode_varint32_eof+0x1a>
                *eof = true;
 8007302:	2301      	movs	r3, #1
 8007304:	7023      	strb	r3, [r4, #0]
}
 8007306:	4630      	mov	r0, r6
 8007308:	b002      	add	sp, #8
 800730a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((byte & 0x80) == 0)
 800730e:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8007312:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8007316:	2b00      	cmp	r3, #0
 8007318:	da2a      	bge.n	8007370 <pb_decode_varint32_eof+0x90>
        result = byte & 0x7F;
 800731a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 800731e:	2707      	movs	r7, #7
            if (!pb_readbyte(stream, &byte))
 8007320:	f10d 0107 	add.w	r1, sp, #7
 8007324:	4628      	mov	r0, r5
 8007326:	f7ff ffbb 	bl	80072a0 <pb_readbyte>
 800732a:	2800      	cmp	r0, #0
 800732c:	d0e5      	beq.n	80072fa <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 800732e:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 8007332:	2f1f      	cmp	r7, #31
 8007334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007338:	d90f      	bls.n	800735a <pb_decode_varint32_eof+0x7a>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 800733a:	2f3f      	cmp	r7, #63	; 0x3f
 800733c:	bf34      	ite	cc
 800733e:	21ff      	movcc	r1, #255	; 0xff
 8007340:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8007342:	b162      	cbz	r2, 800735e <pb_decode_varint32_eof+0x7e>
 8007344:	2c00      	cmp	r4, #0
 8007346:	da01      	bge.n	800734c <pb_decode_varint32_eof+0x6c>
 8007348:	4299      	cmp	r1, r3
 800734a:	d008      	beq.n	800735e <pb_decode_varint32_eof+0x7e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 800734c:	68eb      	ldr	r3, [r5, #12]
 800734e:	4a0a      	ldr	r2, [pc, #40]	; (8007378 <pb_decode_varint32_eof+0x98>)
 8007350:	2b00      	cmp	r3, #0
 8007352:	bf08      	it	eq
 8007354:	4613      	moveq	r3, r2
 8007356:	60eb      	str	r3, [r5, #12]
 8007358:	e7cf      	b.n	80072fa <pb_decode_varint32_eof+0x1a>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 800735a:	40ba      	lsls	r2, r7
 800735c:	4314      	orrs	r4, r2
        } while (byte & 0x80);
 800735e:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 8007360:	f107 0707 	add.w	r7, r7, #7
        } while (byte & 0x80);
 8007364:	d4dc      	bmi.n	8007320 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 8007366:	2f23      	cmp	r7, #35	; 0x23
 8007368:	d102      	bne.n	8007370 <pb_decode_varint32_eof+0x90>
 800736a:	f013 0f70 	tst.w	r3, #112	; 0x70
 800736e:	d1ed      	bne.n	800734c <pb_decode_varint32_eof+0x6c>
   *dest = result;
 8007370:	f8c8 4000 	str.w	r4, [r8]
   return true;
 8007374:	e7c7      	b.n	8007306 <pb_decode_varint32_eof+0x26>
 8007376:	bf00      	nop
 8007378:	0806f14f 	.word	0x0806f14f

0800737c <pb_read>:
{
 800737c:	b530      	push	{r4, r5, lr}
 800737e:	4604      	mov	r4, r0
 8007380:	b085      	sub	sp, #20
 8007382:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 8007384:	b9a9      	cbnz	r1, 80073b2 <pb_read+0x36>
 8007386:	6802      	ldr	r2, [r0, #0]
 8007388:	4b17      	ldr	r3, [pc, #92]	; (80073e8 <pb_read+0x6c>)
 800738a:	429a      	cmp	r2, r3
 800738c:	d011      	beq.n	80073b2 <pb_read+0x36>
		while (count > 16)
 800738e:	2d10      	cmp	r5, #16
 8007390:	d806      	bhi.n	80073a0 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 8007392:	462a      	mov	r2, r5
 8007394:	4669      	mov	r1, sp
 8007396:	4620      	mov	r0, r4
 8007398:	f7ff fff0 	bl	800737c <pb_read>
}
 800739c:	b005      	add	sp, #20
 800739e:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 80073a0:	2210      	movs	r2, #16
 80073a2:	4669      	mov	r1, sp
 80073a4:	4620      	mov	r0, r4
 80073a6:	f7ff ffe9 	bl	800737c <pb_read>
 80073aa:	2800      	cmp	r0, #0
 80073ac:	d0f6      	beq.n	800739c <pb_read+0x20>
			count -= 16;
 80073ae:	3d10      	subs	r5, #16
 80073b0:	e7ed      	b.n	800738e <pb_read+0x12>
    if (stream->bytes_left < count)
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	42ab      	cmp	r3, r5
 80073b6:	d207      	bcs.n	80073c8 <pb_read+0x4c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80073b8:	68e3      	ldr	r3, [r4, #12]
 80073ba:	2000      	movs	r0, #0
 80073bc:	4a0b      	ldr	r2, [pc, #44]	; (80073ec <pb_read+0x70>)
 80073be:	2b00      	cmp	r3, #0
 80073c0:	bf08      	it	eq
 80073c2:	4613      	moveq	r3, r2
 80073c4:	60e3      	str	r3, [r4, #12]
 80073c6:	e7e9      	b.n	800739c <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 80073c8:	6823      	ldr	r3, [r4, #0]
 80073ca:	462a      	mov	r2, r5
 80073cc:	4620      	mov	r0, r4
 80073ce:	4798      	blx	r3
 80073d0:	b930      	cbnz	r0, 80073e0 <pb_read+0x64>
        PB_RETURN_ERROR(stream, "io error");
 80073d2:	68e3      	ldr	r3, [r4, #12]
 80073d4:	4a06      	ldr	r2, [pc, #24]	; (80073f0 <pb_read+0x74>)
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	bf08      	it	eq
 80073da:	4613      	moveq	r3, r2
 80073dc:	60e3      	str	r3, [r4, #12]
 80073de:	e7dd      	b.n	800739c <pb_read+0x20>
    stream->bytes_left -= count;
 80073e0:	68a2      	ldr	r2, [r4, #8]
 80073e2:	1b52      	subs	r2, r2, r5
 80073e4:	60a2      	str	r2, [r4, #8]
    return true;
 80073e6:	e7d9      	b.n	800739c <pb_read+0x20>
 80073e8:	080071a9 	.word	0x080071a9
 80073ec:	0806f138 	.word	0x0806f138
 80073f0:	0806f146 	.word	0x0806f146

080073f4 <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 80073f4:	2200      	movs	r2, #0
 80073f6:	f7ff bf73 	b.w	80072e0 <pb_decode_varint32_eof>
	...

080073fc <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 80073fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073fe:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8007400:	a901      	add	r1, sp, #4
{
 8007402:	4605      	mov	r5, r0
 8007404:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 8007406:	f7ff fff5 	bl	80073f4 <pb_decode_varint32>
 800740a:	4604      	mov	r4, r0
 800740c:	b188      	cbz	r0, 8007432 <pb_dec_fixed_length_bytes+0x36>
        return false;

    if (size > PB_SIZE_MAX)
 800740e:	9901      	ldr	r1, [sp, #4]
 8007410:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007414:	d307      	bcc.n	8007426 <pb_dec_fixed_length_bytes+0x2a>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8007416:	68eb      	ldr	r3, [r5, #12]
 8007418:	4a0d      	ldr	r2, [pc, #52]	; (8007450 <pb_dec_fixed_length_bytes+0x54>)
        memset(dest, 0, field->data_size);
        return true;
    }

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800741a:	2b00      	cmp	r3, #0
 800741c:	bf08      	it	eq
 800741e:	4613      	moveq	r3, r2
 8007420:	2400      	movs	r4, #0
 8007422:	60eb      	str	r3, [r5, #12]
 8007424:	e005      	b.n	8007432 <pb_dec_fixed_length_bytes+0x36>
        memset(dest, 0, field->data_size);
 8007426:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    if (size == 0)
 800742a:	b929      	cbnz	r1, 8007438 <pb_dec_fixed_length_bytes+0x3c>
        memset(dest, 0, field->data_size);
 800742c:	4630      	mov	r0, r6
 800742e:	f005 fe81 	bl	800d134 <memset>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 8007432:	4620      	mov	r0, r4
 8007434:	b003      	add	sp, #12
 8007436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 8007438:	4291      	cmp	r1, r2
 800743a:	d002      	beq.n	8007442 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 800743c:	68eb      	ldr	r3, [r5, #12]
 800743e:	4a05      	ldr	r2, [pc, #20]	; (8007454 <pb_dec_fixed_length_bytes+0x58>)
 8007440:	e7eb      	b.n	800741a <pb_dec_fixed_length_bytes+0x1e>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8007442:	460a      	mov	r2, r1
 8007444:	4628      	mov	r0, r5
 8007446:	4631      	mov	r1, r6
 8007448:	f7ff ff98 	bl	800737c <pb_read>
 800744c:	4604      	mov	r4, r0
 800744e:	e7f0      	b.n	8007432 <pb_dec_fixed_length_bytes+0x36>
 8007450:	0806f15f 	.word	0x0806f15f
 8007454:	0806f16e 	.word	0x0806f16e

08007458 <pb_dec_string>:
{
 8007458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800745a:	460f      	mov	r7, r1
    if (!pb_decode_varint32(stream, &size))
 800745c:	a901      	add	r1, sp, #4
{
 800745e:	4604      	mov	r4, r0
 8007460:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8007462:	f7ff ffc7 	bl	80073f4 <pb_decode_varint32>
 8007466:	b190      	cbz	r0, 800748e <pb_dec_string+0x36>
    alloc_size = size + 1;
 8007468:	9a01      	ldr	r2, [sp, #4]
 800746a:	2600      	movs	r6, #0
 800746c:	1c51      	adds	r1, r2, #1
 800746e:	d207      	bcs.n	8007480 <pb_dec_string+0x28>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8007470:	78bb      	ldrb	r3, [r7, #2]
 8007472:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007476:	2b80      	cmp	r3, #128	; 0x80
 8007478:	d10b      	bne.n	8007492 <pb_dec_string+0x3a>
        PB_RETURN_ERROR(stream, "no malloc support");
 800747a:	68e3      	ldr	r3, [r4, #12]
 800747c:	4a0c      	ldr	r2, [pc, #48]	; (80074b0 <pb_dec_string+0x58>)
 800747e:	e001      	b.n	8007484 <pb_dec_string+0x2c>
        PB_RETURN_ERROR(stream, "size too large");
 8007480:	68e3      	ldr	r3, [r4, #12]
 8007482:	4a0c      	ldr	r2, [pc, #48]	; (80074b4 <pb_dec_string+0x5c>)
        PB_RETURN_ERROR(stream, "no malloc support");
 8007484:	2b00      	cmp	r3, #0
 8007486:	bf08      	it	eq
 8007488:	4613      	moveq	r3, r2
 800748a:	4630      	mov	r0, r6
 800748c:	60e3      	str	r3, [r4, #12]
}
 800748e:	b003      	add	sp, #12
 8007490:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (alloc_size > field->data_size)
 8007492:	f8b7 3007 	ldrh.w	r3, [r7, #7]
 8007496:	428b      	cmp	r3, r1
 8007498:	d202      	bcs.n	80074a0 <pb_dec_string+0x48>
            PB_RETURN_ERROR(stream, "string overflow");
 800749a:	68e3      	ldr	r3, [r4, #12]
 800749c:	4a06      	ldr	r2, [pc, #24]	; (80074b8 <pb_dec_string+0x60>)
 800749e:	e7f1      	b.n	8007484 <pb_dec_string+0x2c>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 80074a0:	4629      	mov	r1, r5
 80074a2:	4620      	mov	r0, r4
 80074a4:	f7ff ff6a 	bl	800737c <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	54ee      	strb	r6, [r5, r3]
    return status;
 80074ac:	e7ef      	b.n	800748e <pb_dec_string+0x36>
 80074ae:	bf00      	nop
 80074b0:	0806f19f 	.word	0x0806f19f
 80074b4:	0806f190 	.word	0x0806f190
 80074b8:	0806f1b1 	.word	0x0806f1b1

080074bc <pb_dec_bytes>:
{
 80074bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074be:	460e      	mov	r6, r1
    if (!pb_decode_varint32(stream, &size))
 80074c0:	a901      	add	r1, sp, #4
{
 80074c2:	4604      	mov	r4, r0
 80074c4:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 80074c6:	f7ff ff95 	bl	80073f4 <pb_decode_varint32>
 80074ca:	b198      	cbz	r0, 80074f4 <pb_dec_bytes+0x38>
    if (size > PB_SIZE_MAX)
 80074cc:	9a01      	ldr	r2, [sp, #4]
 80074ce:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80074d2:	d302      	bcc.n	80074da <pb_dec_bytes+0x1e>
            PB_RETURN_ERROR(stream, "bytes overflow");
 80074d4:	68e3      	ldr	r3, [r4, #12]
 80074d6:	4a0e      	ldr	r2, [pc, #56]	; (8007510 <pb_dec_bytes+0x54>)
 80074d8:	e007      	b.n	80074ea <pb_dec_bytes+0x2e>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80074da:	78b3      	ldrb	r3, [r6, #2]
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80074dc:	1c91      	adds	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80074de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d108      	bne.n	80074f8 <pb_dec_bytes+0x3c>
        PB_RETURN_ERROR(stream, "no malloc support");
 80074e6:	68e3      	ldr	r3, [r4, #12]
 80074e8:	4a0a      	ldr	r2, [pc, #40]	; (8007514 <pb_dec_bytes+0x58>)
            PB_RETURN_ERROR(stream, "bytes overflow");
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	bf08      	it	eq
 80074ee:	4613      	moveq	r3, r2
 80074f0:	2000      	movs	r0, #0
 80074f2:	60e3      	str	r3, [r4, #12]
}
 80074f4:	b002      	add	sp, #8
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
        if (alloc_size > field->data_size)
 80074f8:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 80074fc:	428b      	cmp	r3, r1
 80074fe:	d3e9      	bcc.n	80074d4 <pb_dec_bytes+0x18>
    bdest->size = (pb_size_t)size;
 8007500:	4629      	mov	r1, r5
    return pb_read(stream, bdest->bytes, size);
 8007502:	4620      	mov	r0, r4
    bdest->size = (pb_size_t)size;
 8007504:	f821 2b02 	strh.w	r2, [r1], #2
    return pb_read(stream, bdest->bytes, size);
 8007508:	f7ff ff38 	bl	800737c <pb_read>
 800750c:	e7f2      	b.n	80074f4 <pb_dec_bytes+0x38>
 800750e:	bf00      	nop
 8007510:	0806f15f 	.word	0x0806f15f
 8007514:	0806f19f 	.word	0x0806f19f

08007518 <pb_decode_varint>:
{
 8007518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 800751c:	2500      	movs	r5, #0
{
 800751e:	4606      	mov	r6, r0
 8007520:	460f      	mov	r7, r1
    uint64_t result = 0;
 8007522:	46a8      	mov	r8, r5
    uint_fast8_t bitpos = 0;
 8007524:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 8007526:	f10d 0107 	add.w	r1, sp, #7
 800752a:	4630      	mov	r0, r6
 800752c:	f7ff feb8 	bl	80072a0 <pb_readbyte>
 8007530:	b320      	cbz	r0, 800757c <pb_decode_varint+0x64>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8007532:	f89d c007 	ldrb.w	ip, [sp, #7]
 8007536:	f1a4 0320 	sub.w	r3, r4, #32
 800753a:	f1c4 0120 	rsb	r1, r4, #32
 800753e:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
    } while (byte & 0x80);
 8007542:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	fa22 f101 	lsr.w	r1, r2, r1
 800754e:	fa02 f204 	lsl.w	r2, r2, r4
        bitpos = (uint_fast8_t)(bitpos + 7);
 8007552:	f104 0407 	add.w	r4, r4, #7
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8007556:	ea43 0301 	orr.w	r3, r3, r1
 800755a:	ea45 0502 	orr.w	r5, r5, r2
 800755e:	ea43 0808 	orr.w	r8, r3, r8
    } while (byte & 0x80);
 8007562:	d102      	bne.n	800756a <pb_decode_varint+0x52>
    *dest = result;
 8007564:	e9c7 5800 	strd	r5, r8, [r7]
    return true;
 8007568:	e008      	b.n	800757c <pb_decode_varint+0x64>
        if (bitpos >= 64)
 800756a:	2c46      	cmp	r4, #70	; 0x46
 800756c:	d1db      	bne.n	8007526 <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 800756e:	68f3      	ldr	r3, [r6, #12]
 8007570:	2000      	movs	r0, #0
 8007572:	4a04      	ldr	r2, [pc, #16]	; (8007584 <pb_decode_varint+0x6c>)
 8007574:	2b00      	cmp	r3, #0
 8007576:	bf08      	it	eq
 8007578:	4613      	moveq	r3, r2
 800757a:	60f3      	str	r3, [r6, #12]
}
 800757c:	b002      	add	sp, #8
 800757e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007582:	bf00      	nop
 8007584:	0806f14f 	.word	0x0806f14f

08007588 <pb_dec_uvarint>:
{
 8007588:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800758a:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 800758c:	4669      	mov	r1, sp
{
 800758e:	4604      	mov	r4, r0
 8007590:	4615      	mov	r5, r2
    if (!pb_decode_varint(stream, &value))
 8007592:	f7ff ffc1 	bl	8007518 <pb_decode_varint>
 8007596:	b138      	cbz	r0, 80075a8 <pb_dec_uvarint+0x20>
    if (field->data_size == sizeof(pb_uint64_t))
 8007598:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 800759c:	2b08      	cmp	r3, #8
 800759e:	d105      	bne.n	80075ac <pb_dec_uvarint+0x24>
        clamped = *(pb_uint64_t*)dest = value;
 80075a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075a4:	e9c5 2300 	strd	r2, r3, [r5]
}
 80075a8:	b002      	add	sp, #8
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(uint32_t))
 80075ac:	2b04      	cmp	r3, #4
 80075ae:	d10b      	bne.n	80075c8 <pb_dec_uvarint+0x40>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 80075b0:	9b00      	ldr	r3, [sp, #0]
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	2200      	movs	r2, #0
    if (clamped != value)
 80075b6:	e9dd 5100 	ldrd	r5, r1, [sp]
 80075ba:	4291      	cmp	r1, r2
 80075bc:	bf08      	it	eq
 80075be:	429d      	cmpeq	r5, r3
 80075c0:	d0f2      	beq.n	80075a8 <pb_dec_uvarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 80075c2:	68e3      	ldr	r3, [r4, #12]
 80075c4:	4a0b      	ldr	r2, [pc, #44]	; (80075f4 <pb_dec_uvarint+0x6c>)
 80075c6:	e00e      	b.n	80075e6 <pb_dec_uvarint+0x5e>
    else if (field->data_size == sizeof(uint_least16_t))
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d103      	bne.n	80075d4 <pb_dec_uvarint+0x4c>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 80075cc:	9b00      	ldr	r3, [sp, #0]
 80075ce:	802b      	strh	r3, [r5, #0]
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	e7ef      	b.n	80075b4 <pb_dec_uvarint+0x2c>
    else if (field->data_size == sizeof(uint_least8_t))
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d104      	bne.n	80075e2 <pb_dec_uvarint+0x5a>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 80075d8:	9b00      	ldr	r3, [sp, #0]
 80075da:	702b      	strb	r3, [r5, #0]
 80075dc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80075e0:	e7e8      	b.n	80075b4 <pb_dec_uvarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 80075e2:	68e3      	ldr	r3, [r4, #12]
 80075e4:	4a04      	ldr	r2, [pc, #16]	; (80075f8 <pb_dec_uvarint+0x70>)
        PB_RETURN_ERROR(stream, "integer too large");
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	bf08      	it	eq
 80075ea:	4613      	moveq	r3, r2
 80075ec:	2000      	movs	r0, #0
 80075ee:	60e3      	str	r3, [r4, #12]
 80075f0:	e7da      	b.n	80075a8 <pb_dec_uvarint+0x20>
 80075f2:	bf00      	nop
 80075f4:	0806f1d3 	.word	0x0806f1d3
 80075f8:	0806f1c1 	.word	0x0806f1c1

080075fc <pb_dec_varint>:
{
 80075fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075fe:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 8007600:	4669      	mov	r1, sp
{
 8007602:	4605      	mov	r5, r0
 8007604:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8007606:	f7ff ff87 	bl	8007518 <pb_decode_varint>
 800760a:	b138      	cbz	r0, 800761c <pb_dec_varint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 800760c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8007610:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 8007612:	e9dd 2100 	ldrd	r2, r1, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 8007616:	d103      	bne.n	8007620 <pb_dec_varint+0x24>
        clamped = *(pb_int64_t*)dest = svalue;
 8007618:	e9c4 2100 	strd	r2, r1, [r4]
}
 800761c:	b002      	add	sp, #8
 800761e:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8007620:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 8007622:	ea4f 76e2 	mov.w	r6, r2, asr #31
    else if (field->data_size == sizeof(int32_t))
 8007626:	d101      	bne.n	800762c <pb_dec_varint+0x30>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 8007628:	6022      	str	r2, [r4, #0]
    if (clamped != svalue)
 800762a:	e7f7      	b.n	800761c <pb_dec_varint+0x20>
    else if (field->data_size == sizeof(int_least16_t))
 800762c:	2b02      	cmp	r3, #2
 800762e:	d109      	bne.n	8007644 <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 8007630:	b213      	sxth	r3, r2
 8007632:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8007634:	17d9      	asrs	r1, r3, #31
    if (clamped != svalue)
 8007636:	42b1      	cmp	r1, r6
 8007638:	bf08      	it	eq
 800763a:	4293      	cmpeq	r3, r2
 800763c:	d0ee      	beq.n	800761c <pb_dec_varint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 800763e:	68eb      	ldr	r3, [r5, #12]
 8007640:	4a07      	ldr	r2, [pc, #28]	; (8007660 <pb_dec_varint+0x64>)
 8007642:	e006      	b.n	8007652 <pb_dec_varint+0x56>
    else if (field->data_size == sizeof(int_least8_t))
 8007644:	2b01      	cmp	r3, #1
 8007646:	d102      	bne.n	800764e <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8007648:	b253      	sxtb	r3, r2
 800764a:	7023      	strb	r3, [r4, #0]
 800764c:	e7f2      	b.n	8007634 <pb_dec_varint+0x38>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800764e:	68eb      	ldr	r3, [r5, #12]
 8007650:	4a04      	ldr	r2, [pc, #16]	; (8007664 <pb_dec_varint+0x68>)
        PB_RETURN_ERROR(stream, "integer too large");
 8007652:	2b00      	cmp	r3, #0
 8007654:	bf08      	it	eq
 8007656:	4613      	moveq	r3, r2
 8007658:	2000      	movs	r0, #0
 800765a:	60eb      	str	r3, [r5, #12]
 800765c:	e7de      	b.n	800761c <pb_dec_varint+0x20>
 800765e:	bf00      	nop
 8007660:	0806f1d3 	.word	0x0806f1d3
 8007664:	0806f1c1 	.word	0x0806f1c1

08007668 <pb_decode_tag>:
{
 8007668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800766a:	461d      	mov	r5, r3
    *eof = false;
 800766c:	2300      	movs	r3, #0
{
 800766e:	460e      	mov	r6, r1
 8007670:	4617      	mov	r7, r2
    *eof = false;
 8007672:	702b      	strb	r3, [r5, #0]
    *wire_type = (pb_wire_type_t) 0;
 8007674:	700b      	strb	r3, [r1, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8007676:	a901      	add	r1, sp, #4
    *tag = 0;
 8007678:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800767a:	462a      	mov	r2, r5
 800767c:	f7ff fe30 	bl	80072e0 <pb_decode_varint32_eof>
 8007680:	b120      	cbz	r0, 800768c <pb_decode_tag+0x24>
    if (temp == 0)
 8007682:	9c01      	ldr	r4, [sp, #4]
 8007684:	b924      	cbnz	r4, 8007690 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8007686:	2301      	movs	r3, #1
        return false;
 8007688:	4620      	mov	r0, r4
        *eof = true; /* Special feature: allow 0-terminated messages. */
 800768a:	702b      	strb	r3, [r5, #0]
}
 800768c:	b003      	add	sp, #12
 800768e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 8007690:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 8007692:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 8007696:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8007698:	7034      	strb	r4, [r6, #0]
    return true;
 800769a:	e7f7      	b.n	800768c <pb_decode_tag+0x24>

0800769c <pb_skip_field>:
{
 800769c:	b513      	push	{r0, r1, r4, lr}
 800769e:	4604      	mov	r4, r0
    switch (wire_type)
 80076a0:	2905      	cmp	r1, #5
 80076a2:	d825      	bhi.n	80076f0 <pb_skip_field+0x54>
 80076a4:	e8df f001 	tbb	[pc, r1]
 80076a8:	24170f03 	.word	0x24170f03
 80076ac:	2224      	.short	0x2224
        if (!pb_read(stream, &byte, 1))
 80076ae:	2201      	movs	r2, #1
 80076b0:	a901      	add	r1, sp, #4
 80076b2:	4620      	mov	r0, r4
 80076b4:	f7ff fe62 	bl	800737c <pb_read>
 80076b8:	b118      	cbz	r0, 80076c2 <pb_skip_field+0x26>
    } while (byte & 0x80);
 80076ba:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	dbf5      	blt.n	80076ae <pb_skip_field+0x12>
}
 80076c2:	b002      	add	sp, #8
 80076c4:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80076c6:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80076c8:	2100      	movs	r1, #0
 80076ca:	4620      	mov	r0, r4
}
 80076cc:	b002      	add	sp, #8
 80076ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80076d2:	f7ff be53 	b.w	800737c <pb_read>
    if (!pb_decode_varint32(stream, &length))
 80076d6:	a901      	add	r1, sp, #4
 80076d8:	f7ff fe8c 	bl	80073f4 <pb_decode_varint32>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d0f0      	beq.n	80076c2 <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 80076e0:	9a01      	ldr	r2, [sp, #4]
 80076e2:	2100      	movs	r1, #0
 80076e4:	4620      	mov	r0, r4
 80076e6:	f7ff fe49 	bl	800737c <pb_read>
        case PB_WT_STRING: return pb_skip_string(stream);
 80076ea:	e7ea      	b.n	80076c2 <pb_skip_field+0x26>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80076ec:	2204      	movs	r2, #4
 80076ee:	e7eb      	b.n	80076c8 <pb_skip_field+0x2c>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80076f0:	68c3      	ldr	r3, [r0, #12]
 80076f2:	4a03      	ldr	r2, [pc, #12]	; (8007700 <pb_skip_field+0x64>)
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	bf08      	it	eq
 80076f8:	4613      	moveq	r3, r2
 80076fa:	60c3      	str	r3, [r0, #12]
 80076fc:	2000      	movs	r0, #0
 80076fe:	e7e0      	b.n	80076c2 <pb_skip_field+0x26>
 8007700:	0806f1e5 	.word	0x0806f1e5

08007704 <pb_make_string_substream>:
{
 8007704:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007706:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8007708:	a901      	add	r1, sp, #4
{
 800770a:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 800770c:	f7ff fe72 	bl	80073f4 <pb_decode_varint32>
 8007710:	4606      	mov	r6, r0
 8007712:	b168      	cbz	r0, 8007730 <pb_make_string_substream+0x2c>
    *substream = *stream;
 8007714:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007718:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800771c:	9901      	ldr	r1, [sp, #4]
 800771e:	428a      	cmp	r2, r1
 8007720:	d209      	bcs.n	8007736 <pb_make_string_substream+0x32>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8007722:	68e3      	ldr	r3, [r4, #12]
 8007724:	2600      	movs	r6, #0
 8007726:	4a06      	ldr	r2, [pc, #24]	; (8007740 <pb_make_string_substream+0x3c>)
 8007728:	2b00      	cmp	r3, #0
 800772a:	bf08      	it	eq
 800772c:	4613      	moveq	r3, r2
 800772e:	60e3      	str	r3, [r4, #12]
}
 8007730:	4630      	mov	r0, r6
 8007732:	b002      	add	sp, #8
 8007734:	bd70      	pop	{r4, r5, r6, pc}
    substream->bytes_left = size;
 8007736:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 8007738:	68a3      	ldr	r3, [r4, #8]
 800773a:	1a5b      	subs	r3, r3, r1
 800773c:	60a3      	str	r3, [r4, #8]
    return true;
 800773e:	e7f7      	b.n	8007730 <pb_make_string_substream+0x2c>
 8007740:	0806f1f7 	.word	0x0806f1f7

08007744 <pb_close_string_substream>:
    if (substream->bytes_left) {
 8007744:	688a      	ldr	r2, [r1, #8]
{
 8007746:	b538      	push	{r3, r4, r5, lr}
 8007748:	4605      	mov	r5, r0
 800774a:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 800774c:	b92a      	cbnz	r2, 800775a <pb_close_string_substream+0x16>
    stream->state = substream->state;
 800774e:	6863      	ldr	r3, [r4, #4]
    return true;
 8007750:	2001      	movs	r0, #1
    stream->state = substream->state;
 8007752:	606b      	str	r3, [r5, #4]
    stream->errmsg = substream->errmsg;
 8007754:	68e3      	ldr	r3, [r4, #12]
 8007756:	60eb      	str	r3, [r5, #12]
}
 8007758:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 800775a:	2100      	movs	r1, #0
 800775c:	4620      	mov	r0, r4
 800775e:	f7ff fe0d 	bl	800737c <pb_read>
 8007762:	2800      	cmp	r0, #0
 8007764:	d1f3      	bne.n	800774e <pb_close_string_substream+0xa>
 8007766:	e7f7      	b.n	8007758 <pb_close_string_substream+0x14>

08007768 <decode_field>:
{
 8007768:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 800776a:	6851      	ldr	r1, [r2, #4]
{
 800776c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007770:	4616      	mov	r6, r2
    switch (PB_ATYPE(iter->pos->type))
 8007772:	788a      	ldrb	r2, [r1, #2]
{
 8007774:	b089      	sub	sp, #36	; 0x24
 8007776:	4605      	mov	r5, r0
    switch (PB_ATYPE(iter->pos->type))
 8007778:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 800777c:	2c40      	cmp	r4, #64	; 0x40
 800777e:	f000 8083 	beq.w	8007888 <decode_field+0x120>
 8007782:	2c80      	cmp	r4, #128	; 0x80
 8007784:	d07d      	beq.n	8007882 <decode_field+0x11a>
 8007786:	b964      	cbnz	r4, 80077a2 <decode_field+0x3a>
    func = PB_DECODERS[PB_LTYPE(type)];
 8007788:	f002 0c0f 	and.w	ip, r2, #15
 800778c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8007790:	4f6e      	ldr	r7, [pc, #440]	; (800794c <decode_field+0x1e4>)
    switch (PB_HTYPE(type))
 8007792:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 8007794:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 8007798:	d02b      	beq.n	80077f2 <decode_field+0x8a>
 800779a:	d805      	bhi.n	80077a8 <decode_field+0x40>
 800779c:	b1da      	cbz	r2, 80077d6 <decode_field+0x6e>
 800779e:	2a10      	cmp	r2, #16
 80077a0:	d01f      	beq.n	80077e2 <decode_field+0x7a>
            PB_RETURN_ERROR(stream, "invalid field type");
 80077a2:	68eb      	ldr	r3, [r5, #12]
 80077a4:	4a6a      	ldr	r2, [pc, #424]	; (8007950 <decode_field+0x1e8>)
 80077a6:	e04c      	b.n	8007842 <decode_field+0xda>
    switch (PB_HTYPE(type))
 80077a8:	2a30      	cmp	r2, #48	; 0x30
 80077aa:	d1fa      	bne.n	80077a2 <decode_field+0x3a>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 80077ac:	880a      	ldrh	r2, [r1, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 80077ae:	f1bc 0f07 	cmp.w	ip, #7
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 80077b2:	6973      	ldr	r3, [r6, #20]
 80077b4:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 80077b6:	d10b      	bne.n	80077d0 <decode_field+0x68>
                memset(iter->pData, 0, iter->pos->data_size);
 80077b8:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 80077bc:	4621      	mov	r1, r4
 80077be:	6930      	ldr	r0, [r6, #16]
 80077c0:	f005 fcb8 	bl	800d134 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 80077c4:	6873      	ldr	r3, [r6, #4]
 80077c6:	6931      	ldr	r1, [r6, #16]
 80077c8:	f8d3 000b 	ldr.w	r0, [r3, #11]
 80077cc:	f7ff fd56 	bl	800727c <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 80077d0:	6932      	ldr	r2, [r6, #16]
 80077d2:	6871      	ldr	r1, [r6, #4]
 80077d4:	e00b      	b.n	80077ee <decode_field+0x86>
            return func(stream, iter->pos, iter->pData);
 80077d6:	6932      	ldr	r2, [r6, #16]
            return func(stream, iter->pos, iter->pData);
 80077d8:	463b      	mov	r3, r7
}
 80077da:	b009      	add	sp, #36	; 0x24
 80077dc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 80077e0:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 80077e2:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80077e6:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 80077e8:	bf1c      	itt	ne
 80077ea:	2001      	movne	r0, #1
 80077ec:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 80077ee:	4628      	mov	r0, r5
 80077f0:	e7f2      	b.n	80077d8 <decode_field+0x70>
            if (wire_type == PB_WT_STRING
 80077f2:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 80077f4:	f8d6 8014 	ldr.w	r8, [r6, #20]
            if (wire_type == PB_WT_STRING
 80077f8:	d134      	bne.n	8007864 <decode_field+0xfc>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 80077fa:	f1bc 0f04 	cmp.w	ip, #4
 80077fe:	d831      	bhi.n	8007864 <decode_field+0xfc>
                if (!pb_make_string_substream(stream, &substream))
 8007800:	a904      	add	r1, sp, #16
 8007802:	f7ff ff7f 	bl	8007704 <pb_make_string_substream>
 8007806:	4604      	mov	r4, r0
 8007808:	b970      	cbnz	r0, 8007828 <decode_field+0xc0>
            PB_RETURN_ERROR(stream, "invalid field type");
 800780a:	2400      	movs	r4, #0
 800780c:	e026      	b.n	800785c <decode_field+0xf4>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800780e:	f8b1 0007 	ldrh.w	r0, [r1, #7]
 8007812:	6932      	ldr	r2, [r6, #16]
                    if (!func(&substream, iter->pos, pItem))
 8007814:	fb03 2200 	mla	r2, r3, r0, r2
 8007818:	a804      	add	r0, sp, #16
 800781a:	47b8      	blx	r7
 800781c:	b1b0      	cbz	r0, 800784c <decode_field+0xe4>
                    (*size)++;
 800781e:	f8b8 3000 	ldrh.w	r3, [r8]
 8007822:	3301      	adds	r3, #1
 8007824:	f8a8 3000 	strh.w	r3, [r8]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8007828:	9b06      	ldr	r3, [sp, #24]
 800782a:	b133      	cbz	r3, 800783a <decode_field+0xd2>
 800782c:	6871      	ldr	r1, [r6, #4]
 800782e:	f8b8 3000 	ldrh.w	r3, [r8]
 8007832:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 8007836:	429a      	cmp	r2, r3
 8007838:	d8e9      	bhi.n	800780e <decode_field+0xa6>
                if (substream.bytes_left != 0)
 800783a:	9b06      	ldr	r3, [sp, #24]
 800783c:	b143      	cbz	r3, 8007850 <decode_field+0xe8>
                    PB_RETURN_ERROR(stream, "array overflow");
 800783e:	68eb      	ldr	r3, [r5, #12]
 8007840:	4a44      	ldr	r2, [pc, #272]	; (8007954 <decode_field+0x1ec>)
            PB_RETURN_ERROR(stream, "invalid field type");
 8007842:	2b00      	cmp	r3, #0
 8007844:	bf08      	it	eq
 8007846:	4613      	moveq	r3, r2
 8007848:	60eb      	str	r3, [r5, #12]
 800784a:	e7de      	b.n	800780a <decode_field+0xa2>
                        status = false;
 800784c:	4604      	mov	r4, r0
 800784e:	e7f4      	b.n	800783a <decode_field+0xd2>
                if (!pb_close_string_substream(stream, &substream))
 8007850:	a904      	add	r1, sp, #16
 8007852:	4628      	mov	r0, r5
 8007854:	f7ff ff76 	bl	8007744 <pb_close_string_substream>
 8007858:	2800      	cmp	r0, #0
 800785a:	d0d6      	beq.n	800780a <decode_field+0xa2>
}
 800785c:	4620      	mov	r0, r4
 800785e:	b009      	add	sp, #36	; 0x24
 8007860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8007864:	f8b8 3000 	ldrh.w	r3, [r8]
 8007868:	6932      	ldr	r2, [r6, #16]
                if ((*size)++ >= iter->pos->array_size)
 800786a:	1c5c      	adds	r4, r3, #1
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800786c:	f8b1 0007 	ldrh.w	r0, [r1, #7]
                if ((*size)++ >= iter->pos->array_size)
 8007870:	f8a8 4000 	strh.w	r4, [r8]
 8007874:	f8b1 4009 	ldrh.w	r4, [r1, #9]
 8007878:	429c      	cmp	r4, r3
 800787a:	d9e0      	bls.n	800783e <decode_field+0xd6>
                return func(stream, iter->pos, pItem);
 800787c:	fb03 2200 	mla	r2, r3, r0, r2
 8007880:	e7b5      	b.n	80077ee <decode_field+0x86>
    PB_RETURN_ERROR(stream, "no malloc support");
 8007882:	68c3      	ldr	r3, [r0, #12]
 8007884:	4a34      	ldr	r2, [pc, #208]	; (8007958 <decode_field+0x1f0>)
 8007886:	e7dc      	b.n	8007842 <decode_field+0xda>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8007888:	6937      	ldr	r7, [r6, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 800788a:	b10f      	cbz	r7, 8007890 <decode_field+0x128>
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	b932      	cbnz	r2, 800789e <decode_field+0x136>
        return pb_skip_field(stream, wire_type);
 8007890:	4619      	mov	r1, r3
 8007892:	4628      	mov	r0, r5
}
 8007894:	b009      	add	sp, #36	; 0x24
 8007896:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 800789a:	f7ff beff 	b.w	800769c <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 800789e:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 80078a0:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 80078a4:	d11c      	bne.n	80078e0 <decode_field+0x178>
        if (!pb_make_string_substream(stream, &substream))
 80078a6:	a904      	add	r1, sp, #16
 80078a8:	f7ff ff2c 	bl	8007704 <pb_make_string_substream>
 80078ac:	4604      	mov	r4, r0
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d0d4      	beq.n	800785c <decode_field+0xf4>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	4642      	mov	r2, r8
 80078b6:	6871      	ldr	r1, [r6, #4]
 80078b8:	a804      	add	r0, sp, #16
 80078ba:	4798      	blx	r3
 80078bc:	4604      	mov	r4, r0
 80078be:	b930      	cbnz	r0, 80078ce <decode_field+0x166>
                PB_RETURN_ERROR(stream, "callback failed");
 80078c0:	68eb      	ldr	r3, [r5, #12]
 80078c2:	4a26      	ldr	r2, [pc, #152]	; (800795c <decode_field+0x1f4>)
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	bf08      	it	eq
 80078c8:	4613      	moveq	r3, r2
 80078ca:	60eb      	str	r3, [r5, #12]
 80078cc:	e7c6      	b.n	800785c <decode_field+0xf4>
        } while (substream.bytes_left);
 80078ce:	9b06      	ldr	r3, [sp, #24]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1ee      	bne.n	80078b2 <decode_field+0x14a>
        if (!pb_close_string_substream(stream, &substream))
 80078d4:	a904      	add	r1, sp, #16
 80078d6:	4628      	mov	r0, r5
 80078d8:	f7ff ff34 	bl	8007744 <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 80078dc:	4604      	mov	r4, r0
 80078de:	e7bd      	b.n	800785c <decode_field+0xf4>
    switch (wire_type)
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d020      	beq.n	8007926 <decode_field+0x1be>
 80078e4:	2b05      	cmp	r3, #5
 80078e6:	d026      	beq.n	8007936 <decode_field+0x1ce>
 80078e8:	bb63      	cbnz	r3, 8007944 <decode_field+0x1dc>
 80078ea:	461c      	mov	r4, r3
 80078ec:	f10d 0904 	add.w	r9, sp, #4
                (*size)++;
 80078f0:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 80078f2:	2c0b      	cmp	r4, #11
 80078f4:	d089      	beq.n	800780a <decode_field+0xa2>
                if (!pb_read(stream, buf, 1)) return false;
 80078f6:	2201      	movs	r2, #1
 80078f8:	4649      	mov	r1, r9
 80078fa:	4628      	mov	r0, r5
 80078fc:	f7ff fd3e 	bl	800737c <pb_read>
 8007900:	2800      	cmp	r0, #0
 8007902:	d082      	beq.n	800780a <decode_field+0xa2>
            } while (*buf++ & 0x80);
 8007904:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	dbf1      	blt.n	80078f0 <decode_field+0x188>
        substream = pb_istream_from_buffer(buffer, size);
 800790c:	4b14      	ldr	r3, [pc, #80]	; (8007960 <decode_field+0x1f8>)
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 800790e:	4642      	mov	r2, r8
 8007910:	6871      	ldr	r1, [r6, #4]
 8007912:	a804      	add	r0, sp, #16
        substream = pb_istream_from_buffer(buffer, size);
 8007914:	9304      	str	r3, [sp, #16]
 8007916:	ab01      	add	r3, sp, #4
 8007918:	e9cd 3405 	strd	r3, r4, [sp, #20]
 800791c:	2300      	movs	r3, #0
 800791e:	9307      	str	r3, [sp, #28]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	4798      	blx	r3
 8007924:	e7da      	b.n	80078dc <decode_field+0x174>
            *size = 8;
 8007926:	2408      	movs	r4, #8
            return pb_read(stream, buf, 8);
 8007928:	2208      	movs	r2, #8
 800792a:	a901      	add	r1, sp, #4
 800792c:	f7ff fd26 	bl	800737c <pb_read>
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8007930:	2800      	cmp	r0, #0
 8007932:	d1eb      	bne.n	800790c <decode_field+0x1a4>
 8007934:	e769      	b.n	800780a <decode_field+0xa2>
            return pb_read(stream, buf, 4);
 8007936:	2204      	movs	r2, #4
            *size = 4;
 8007938:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 800793a:	eb0d 0102 	add.w	r1, sp, r2
 800793e:	f7ff fd1d 	bl	800737c <pb_read>
 8007942:	e7f5      	b.n	8007930 <decode_field+0x1c8>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8007944:	68c3      	ldr	r3, [r0, #12]
 8007946:	4a07      	ldr	r2, [pc, #28]	; (8007964 <decode_field+0x1fc>)
 8007948:	e77b      	b.n	8007842 <decode_field+0xda>
 800794a:	bf00      	nop
 800794c:	0806f294 	.word	0x0806f294
 8007950:	0806f21e 	.word	0x0806f21e
 8007954:	0806f20f 	.word	0x0806f20f
 8007958:	0806f19f 	.word	0x0806f19f
 800795c:	0806f231 	.word	0x0806f231
 8007960:	080071a9 	.word	0x080071a9
 8007964:	0806f1e5 	.word	0x0806f1e5

08007968 <pb_decode_noinit>:
{
 8007968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800796c:	2500      	movs	r5, #0
{
 800796e:	b091      	sub	sp, #68	; 0x44
 8007970:	4604      	mov	r4, r0
    uint32_t extension_range_start = 0;
 8007972:	462f      	mov	r7, r5
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8007974:	a804      	add	r0, sp, #16
    pb_size_t fixed_count_size = 0;
 8007976:	f8ad 5002 	strh.w	r5, [sp, #2]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 800797a:	e9cd 5502 	strd	r5, r5, [sp, #8]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800797e:	f7ff fba9 	bl	80070d4 <pb_field_iter_begin>
    while (stream->bytes_left)
 8007982:	68a3      	ldr	r3, [r4, #8]
 8007984:	b9f3      	cbnz	r3, 80079c4 <pb_decode_noinit+0x5c>
    if (fixed_count_field != NULL &&
 8007986:	b135      	cbz	r5, 8007996 <pb_decode_noinit+0x2e>
 8007988:	f8b5 2009 	ldrh.w	r2, [r5, #9]
 800798c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8007990:	429a      	cmp	r2, r3
 8007992:	f040 8095 	bne.w	8007ac0 <pb_decode_noinit+0x158>
        } while (pb_field_iter_next(&iter));
 8007996:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 8007998:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
 800799c:	789e      	ldrb	r6, [r3, #2]
        } while (pb_field_iter_next(&iter));
 800799e:	f7ff fbab 	bl	80070f8 <pb_field_iter_next>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d1f7      	bne.n	8007996 <pb_decode_noinit+0x2e>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 80079a6:	f016 0f30 	tst.w	r6, #48	; 0x30
 80079aa:	d103      	bne.n	80079b4 <pb_decode_noinit+0x4c>
 80079ac:	9b05      	ldr	r3, [sp, #20]
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b103      	cbz	r3, 80079b4 <pb_decode_noinit+0x4c>
            req_field_count++;
 80079b2:	3501      	adds	r5, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80079b4:	2d40      	cmp	r5, #64	; 0x40
 80079b6:	f200 80cc 	bhi.w	8007b52 <pb_decode_noinit+0x1ea>
        if (req_field_count > 0)
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	f040 80ca 	bne.w	8007b54 <pb_decode_noinit+0x1ec>
    return true;
 80079c0:	2001      	movs	r0, #1
 80079c2:	e00c      	b.n	80079de <pb_decode_noinit+0x76>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 80079c4:	f10d 0301 	add.w	r3, sp, #1
 80079c8:	aa01      	add	r2, sp, #4
 80079ca:	4669      	mov	r1, sp
 80079cc:	4620      	mov	r0, r4
 80079ce:	f7ff fe4b 	bl	8007668 <pb_decode_tag>
 80079d2:	b938      	cbnz	r0, 80079e4 <pb_decode_noinit+0x7c>
            if (eof)
 80079d4:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1d4      	bne.n	8007986 <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80079dc:	2000      	movs	r0, #0
}
 80079de:	b011      	add	sp, #68	; 0x44
 80079e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 80079e4:	9901      	ldr	r1, [sp, #4]
 80079e6:	a804      	add	r0, sp, #16
 80079e8:	f7ff fbc7 	bl	800717a <pb_field_iter_find>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d154      	bne.n	8007a9a <pb_decode_noinit+0x132>
            if (tag >= extension_range_start)
 80079f0:	9b01      	ldr	r3, [sp, #4]
 80079f2:	42bb      	cmp	r3, r7
 80079f4:	f0c0 80b5 	bcc.w	8007b62 <pb_decode_noinit+0x1fa>
    const pb_field_t *start = iter->pos;
 80079f8:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 80079fa:	9a05      	ldr	r2, [sp, #20]
 80079fc:	7893      	ldrb	r3, [r2, #2]
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	f000 80b6 	beq.w	8007b74 <pb_decode_noinit+0x20c>
        (void)pb_field_iter_next(iter);
 8007a08:	a804      	add	r0, sp, #16
 8007a0a:	f7ff fb75 	bl	80070f8 <pb_field_iter_next>
    } while (iter->pos != start);
 8007a0e:	9b05      	ldr	r3, [sp, #20]
 8007a10:	429e      	cmp	r6, r3
 8007a12:	d1f2      	bne.n	80079fa <pb_decode_noinit+0x92>
                    extension_range_start = (uint32_t)-1;
 8007a14:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
                if (tag >= extension_range_start)
 8007a18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007a1c:	45b8      	cmp	r8, r7
 8007a1e:	f0c0 80a0 	bcc.w	8007b62 <pb_decode_noinit+0x1fa>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8007a22:	9a08      	ldr	r2, [sp, #32]
                    if (!decode_extension(stream, tag, wire_type, &iter))
 8007a24:	f89d b000 	ldrb.w	fp, [sp]
                    size_t pos = stream->bytes_left;
 8007a28:	f8d4 9008 	ldr.w	r9, [r4, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8007a2c:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8007a2e:	68a2      	ldr	r2, [r4, #8]
 8007a30:	2e00      	cmp	r6, #0
 8007a32:	f000 8093 	beq.w	8007b5c <pb_decode_noinit+0x1f4>
 8007a36:	4591      	cmp	r9, r2
 8007a38:	d1a3      	bne.n	8007982 <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 8007a3a:	6832      	ldr	r2, [r6, #0]
 8007a3c:	f8d2 a000 	ldr.w	sl, [r2]
 8007a40:	f1ba 0f00 	cmp.w	sl, #0
 8007a44:	d008      	beq.n	8007a58 <pb_decode_noinit+0xf0>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8007a46:	465b      	mov	r3, fp
 8007a48:	4642      	mov	r2, r8
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	47d0      	blx	sl
        if (!status)
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d0c3      	beq.n	80079dc <pb_decode_noinit+0x74>
        extension = extension->next;
 8007a54:	68b6      	ldr	r6, [r6, #8]
 8007a56:	e7ea      	b.n	8007a2e <pb_decode_noinit+0xc6>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8007a58:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 8007a5c:	f8ba 2000 	ldrh.w	r2, [sl]
 8007a60:	4590      	cmp	r8, r2
 8007a62:	d1f7      	bne.n	8007a54 <pb_decode_noinit+0xec>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8007a64:	6872      	ldr	r2, [r6, #4]
 8007a66:	4651      	mov	r1, sl
 8007a68:	a80a      	add	r0, sp, #40	; 0x28
 8007a6a:	f7ff fb33 	bl	80070d4 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8007a6e:	6872      	ldr	r2, [r6, #4]
    extension->found = true;
 8007a70:	f04f 0301 	mov.w	r3, #1
    return decode_field(stream, wire_type, &iter);
 8007a74:	4659      	mov	r1, fp
    iter->pData = extension->dest;
 8007a76:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 8007a78:	f106 020c 	add.w	r2, r6, #12
    return decode_field(stream, wire_type, &iter);
 8007a7c:	4620      	mov	r0, r4
    iter->pSize = &extension->found;
 8007a7e:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8007a80:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8007a84:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8007a88:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 8007a8a:	bf04      	itt	eq
 8007a8c:	1d32      	addeq	r2, r6, #4
 8007a8e:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 8007a90:	aa0a      	add	r2, sp, #40	; 0x28
    extension->found = true;
 8007a92:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8007a94:	f7ff fe68 	bl	8007768 <decode_field>
 8007a98:	e7da      	b.n	8007a50 <pb_decode_noinit+0xe8>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 8007a9a:	9a05      	ldr	r2, [sp, #20]
 8007a9c:	7893      	ldrb	r3, [r2, #2]
 8007a9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007aa2:	2b20      	cmp	r3, #32
 8007aa4:	d121      	bne.n	8007aea <pb_decode_noinit+0x182>
            && iter.pSize == iter.pData)
 8007aa6:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	d116      	bne.n	8007adc <pb_decode_noinit+0x174>
            if (fixed_count_field != iter.pos) {
 8007aae:	42aa      	cmp	r2, r5
 8007ab0:	d010      	beq.n	8007ad4 <pb_decode_noinit+0x16c>
                if (fixed_count_field != NULL &&
 8007ab2:	b165      	cbz	r5, 8007ace <pb_decode_noinit+0x166>
 8007ab4:	f8b5 1009 	ldrh.w	r1, [r5, #9]
 8007ab8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8007abc:	4299      	cmp	r1, r3
 8007abe:	d006      	beq.n	8007ace <pb_decode_noinit+0x166>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8007ac0:	68e3      	ldr	r3, [r4, #12]
 8007ac2:	4a2d      	ldr	r2, [pc, #180]	; (8007b78 <pb_decode_noinit+0x210>)
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	bf08      	it	eq
 8007ac8:	4613      	moveq	r3, r2
 8007aca:	60e3      	str	r3, [r4, #12]
 8007acc:	e786      	b.n	80079dc <pb_decode_noinit+0x74>
                fixed_count_size = 0;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 8007ad4:	f10d 0302 	add.w	r3, sp, #2
 8007ad8:	4615      	mov	r5, r2
 8007ada:	9309      	str	r3, [sp, #36]	; 0x24
        if (!decode_field(stream, wire_type, &iter))
 8007adc:	aa04      	add	r2, sp, #16
 8007ade:	f89d 1000 	ldrb.w	r1, [sp]
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f7ff fe40 	bl	8007768 <decode_field>
 8007ae8:	e040      	b.n	8007b6c <pb_decode_noinit+0x204>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1f6      	bne.n	8007adc <pb_decode_noinit+0x174>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8007aee:	9a06      	ldr	r2, [sp, #24]
 8007af0:	2a3f      	cmp	r2, #63	; 0x3f
 8007af2:	d8f3      	bhi.n	8007adc <pb_decode_noinit+0x174>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8007af4:	0951      	lsrs	r1, r2, #5
 8007af6:	ab10      	add	r3, sp, #64	; 0x40
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8007af8:	f002 021f 	and.w	r2, r2, #31
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8007afc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8007b00:	2301      	movs	r3, #1
 8007b02:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8007b04:	f851 2c38 	ldr.w	r2, [r1, #-56]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	f841 3c38 	str.w	r3, [r1, #-56]
 8007b0e:	e7e5      	b.n	8007adc <pb_decode_noinit+0x174>
                if (fields_seen[i] != allbits)
 8007b10:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b14:	3601      	adds	r6, #1
 8007b16:	d006      	beq.n	8007b26 <pb_decode_noinit+0x1be>
                    PB_RETURN_ERROR(stream, "missing required field");
 8007b18:	68e3      	ldr	r3, [r4, #12]
 8007b1a:	4a18      	ldr	r2, [pc, #96]	; (8007b7c <pb_decode_noinit+0x214>)
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	bf08      	it	eq
 8007b20:	4613      	moveq	r3, r2
 8007b22:	60e3      	str	r3, [r4, #12]
 8007b24:	e75b      	b.n	80079de <pb_decode_noinit+0x76>
            for (i = 0; i < (req_field_count >> 5); i++)
 8007b26:	3201      	adds	r2, #1
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d1f1      	bne.n	8007b10 <pb_decode_noinit+0x1a8>
            if ((req_field_count & 31) != 0)
 8007b2c:	f015 051f 	ands.w	r5, r5, #31
 8007b30:	f43f af46 	beq.w	80079c0 <pb_decode_noinit+0x58>
                if (fields_seen[req_field_count >> 5] !=
 8007b34:	aa10      	add	r2, sp, #64	; 0x40
                    (allbits >> (32 - (req_field_count & 31))))
 8007b36:	f1c5 0520 	rsb	r5, r5, #32
                if (fields_seen[req_field_count >> 5] !=
 8007b3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 8007b3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                if (fields_seen[req_field_count >> 5] !=
 8007b42:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 8007b46:	fa22 f505 	lsr.w	r5, r2, r5
                if (fields_seen[req_field_count >> 5] !=
 8007b4a:	42ab      	cmp	r3, r5
 8007b4c:	f43f af38 	beq.w	80079c0 <pb_decode_noinit+0x58>
 8007b50:	e7e2      	b.n	8007b18 <pb_decode_noinit+0x1b0>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8007b52:	2540      	movs	r5, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 8007b54:	096b      	lsrs	r3, r5, #5
 8007b56:	a902      	add	r1, sp, #8
 8007b58:	2200      	movs	r2, #0
 8007b5a:	e7e5      	b.n	8007b28 <pb_decode_noinit+0x1c0>
                    if (pos != stream->bytes_left)
 8007b5c:	4591      	cmp	r9, r2
 8007b5e:	f47f af10 	bne.w	8007982 <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 8007b62:	f89d 1000 	ldrb.w	r1, [sp]
 8007b66:	4620      	mov	r0, r4
 8007b68:	f7ff fd98 	bl	800769c <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	f47f af08 	bne.w	8007982 <pb_decode_noinit+0x1a>
 8007b72:	e733      	b.n	80079dc <pb_decode_noinit+0x74>
                    extension_range_start = iter.pos->tag;
 8007b74:	8817      	ldrh	r7, [r2, #0]
 8007b76:	e74f      	b.n	8007a18 <pb_decode_noinit+0xb0>
 8007b78:	0806f241 	.word	0x0806f241
 8007b7c:	0806f262 	.word	0x0806f262

08007b80 <pb_decode>:
{
 8007b80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b82:	460c      	mov	r4, r1
 8007b84:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 8007b86:	4611      	mov	r1, r2
 8007b88:	9201      	str	r2, [sp, #4]
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7ff fb76 	bl	800727c <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8007b90:	9a01      	ldr	r2, [sp, #4]
 8007b92:	4621      	mov	r1, r4
 8007b94:	4628      	mov	r0, r5
}
 8007b96:	b003      	add	sp, #12
 8007b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 8007b9c:	f7ff bee4 	b.w	8007968 <pb_decode_noinit>

08007ba0 <pb_dec_submessage>:
{
 8007ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	460e      	mov	r6, r1
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	9201      	str	r2, [sp, #4]
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 8007baa:	f8d1 700b 	ldr.w	r7, [r1, #11]
    if (!pb_make_string_substream(stream, &substream))
 8007bae:	a902      	add	r1, sp, #8
 8007bb0:	f7ff fda8 	bl	8007704 <pb_make_string_substream>
 8007bb4:	b1e0      	cbz	r0, 8007bf0 <pb_dec_submessage+0x50>
    if (field->ptr == NULL)
 8007bb6:	f8d6 400b 	ldr.w	r4, [r6, #11]
 8007bba:	9a01      	ldr	r2, [sp, #4]
 8007bbc:	b944      	cbnz	r4, 8007bd0 <pb_dec_submessage+0x30>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8007bbe:	68eb      	ldr	r3, [r5, #12]
 8007bc0:	4a0e      	ldr	r2, [pc, #56]	; (8007bfc <pb_dec_submessage+0x5c>)
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bf08      	it	eq
 8007bc6:	4613      	moveq	r3, r2
 8007bc8:	60eb      	str	r3, [r5, #12]
}
 8007bca:	4620      	mov	r0, r4
 8007bcc:	b007      	add	sp, #28
 8007bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8007bd0:	78b3      	ldrb	r3, [r6, #2]
        status = pb_decode(&substream, submsg_fields, dest);
 8007bd2:	4639      	mov	r1, r7
 8007bd4:	a802      	add	r0, sp, #8
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8007bd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d10a      	bne.n	8007bf4 <pb_dec_submessage+0x54>
        status = pb_decode(&substream, submsg_fields, dest);
 8007bde:	f7ff ffcf 	bl	8007b80 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8007be2:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8007be4:	a902      	add	r1, sp, #8
 8007be6:	4628      	mov	r0, r5
 8007be8:	f7ff fdac 	bl	8007744 <pb_close_string_substream>
 8007bec:	2800      	cmp	r0, #0
 8007bee:	d1ec      	bne.n	8007bca <pb_dec_submessage+0x2a>
        return false;
 8007bf0:	2400      	movs	r4, #0
 8007bf2:	e7ea      	b.n	8007bca <pb_dec_submessage+0x2a>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 8007bf4:	f7ff feb8 	bl	8007968 <pb_decode_noinit>
 8007bf8:	e7f3      	b.n	8007be2 <pb_dec_submessage+0x42>
 8007bfa:	bf00      	nop
 8007bfc:	0806f279 	.word	0x0806f279

08007c00 <pb_decode_delimited>:
{
 8007c00:	b530      	push	{r4, r5, lr}
 8007c02:	b087      	sub	sp, #28
 8007c04:	460c      	mov	r4, r1
 8007c06:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 8007c08:	a902      	add	r1, sp, #8
{
 8007c0a:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 8007c0c:	f7ff fd7a 	bl	8007704 <pb_make_string_substream>
 8007c10:	b150      	cbz	r0, 8007c28 <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 8007c12:	4621      	mov	r1, r4
 8007c14:	9a01      	ldr	r2, [sp, #4]
 8007c16:	a802      	add	r0, sp, #8
 8007c18:	f7ff ffb2 	bl	8007b80 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 8007c1c:	a902      	add	r1, sp, #8
    status = pb_decode(&substream, fields, dest_struct);
 8007c1e:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8007c20:	4628      	mov	r0, r5
 8007c22:	f7ff fd8f 	bl	8007744 <pb_close_string_substream>
 8007c26:	b900      	cbnz	r0, 8007c2a <pb_decode_delimited+0x2a>
        return false;
 8007c28:	2400      	movs	r4, #0
}
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	b007      	add	sp, #28
 8007c2e:	bd30      	pop	{r4, r5, pc}

08007c30 <pb_decode_svarint>:
{
 8007c30:	b513      	push	{r0, r1, r4, lr}
 8007c32:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 8007c34:	4669      	mov	r1, sp
 8007c36:	f7ff fc6f 	bl	8007518 <pb_decode_varint>
 8007c3a:	b160      	cbz	r0, 8007c56 <pb_decode_svarint+0x26>
    if (value & 1)
 8007c3c:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8007c40:	084a      	lsrs	r2, r1, #1
    if (value & 1)
 8007c42:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 8007c44:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8007c48:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8007c4c:	bf44      	itt	mi
 8007c4e:	43d2      	mvnmi	r2, r2
 8007c50:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 8007c52:	e9c4 2300 	strd	r2, r3, [r4]
}
 8007c56:	b002      	add	sp, #8
 8007c58:	bd10      	pop	{r4, pc}
	...

08007c5c <pb_dec_svarint>:
{
 8007c5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c5e:	460e      	mov	r6, r1
    if (!pb_decode_svarint(stream, &value))
 8007c60:	4669      	mov	r1, sp
{
 8007c62:	4604      	mov	r4, r0
 8007c64:	4615      	mov	r5, r2
    if (!pb_decode_svarint(stream, &value))
 8007c66:	f7ff ffe3 	bl	8007c30 <pb_decode_svarint>
 8007c6a:	b138      	cbz	r0, 8007c7c <pb_dec_svarint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8007c6c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d105      	bne.n	8007c80 <pb_dec_svarint+0x24>
        clamped = *(pb_int64_t*)dest = value;
 8007c74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007c78:	e9c5 2300 	strd	r2, r3, [r5]
}
 8007c7c:	b002      	add	sp, #8
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8007c80:	2b04      	cmp	r3, #4
 8007c82:	d10b      	bne.n	8007c9c <pb_dec_svarint+0x40>
        clamped = *(int32_t*)dest = (int32_t)value;
 8007c84:	9b00      	ldr	r3, [sp, #0]
 8007c86:	602b      	str	r3, [r5, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8007c88:	17da      	asrs	r2, r3, #31
    if (clamped != value)
 8007c8a:	e9dd 5100 	ldrd	r5, r1, [sp]
 8007c8e:	4291      	cmp	r1, r2
 8007c90:	bf08      	it	eq
 8007c92:	429d      	cmpeq	r5, r3
 8007c94:	d0f2      	beq.n	8007c7c <pb_dec_svarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8007c96:	68e3      	ldr	r3, [r4, #12]
 8007c98:	4a0a      	ldr	r2, [pc, #40]	; (8007cc4 <pb_dec_svarint+0x68>)
 8007c9a:	e00d      	b.n	8007cb8 <pb_dec_svarint+0x5c>
    else if (field->data_size == sizeof(int_least16_t))
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d103      	bne.n	8007ca8 <pb_dec_svarint+0x4c>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 8007ca0:	f9bd 3000 	ldrsh.w	r3, [sp]
 8007ca4:	802b      	strh	r3, [r5, #0]
 8007ca6:	e7ef      	b.n	8007c88 <pb_dec_svarint+0x2c>
    else if (field->data_size == sizeof(int_least8_t))
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d103      	bne.n	8007cb4 <pb_dec_svarint+0x58>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 8007cac:	f99d 3000 	ldrsb.w	r3, [sp]
 8007cb0:	702b      	strb	r3, [r5, #0]
 8007cb2:	e7e9      	b.n	8007c88 <pb_dec_svarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8007cb4:	68e3      	ldr	r3, [r4, #12]
 8007cb6:	4a04      	ldr	r2, [pc, #16]	; (8007cc8 <pb_dec_svarint+0x6c>)
        PB_RETURN_ERROR(stream, "integer too large");
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bf08      	it	eq
 8007cbc:	4613      	moveq	r3, r2
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	60e3      	str	r3, [r4, #12]
 8007cc2:	e7db      	b.n	8007c7c <pb_dec_svarint+0x20>
 8007cc4:	0806f1d3 	.word	0x0806f1d3
 8007cc8:	0806f1c1 	.word	0x0806f1c1

08007ccc <pb_decode_fixed32>:
    if (!pb_read(stream, bytes, 4))
 8007ccc:	2204      	movs	r2, #4
{
 8007cce:	b513      	push	{r0, r1, r4, lr}
 8007cd0:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 8007cd2:	eb0d 0102 	add.w	r1, sp, r2
 8007cd6:	f7ff fb51 	bl	800737c <pb_read>
 8007cda:	b108      	cbz	r0, 8007ce0 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 8007cdc:	9b01      	ldr	r3, [sp, #4]
 8007cde:	6023      	str	r3, [r4, #0]
}
 8007ce0:	b002      	add	sp, #8
 8007ce2:	bd10      	pop	{r4, pc}

08007ce4 <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	f7ff bff1 	b.w	8007ccc <pb_decode_fixed32>

08007cea <pb_decode_fixed64>:
{
 8007cea:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 8007cec:	2208      	movs	r2, #8
{
 8007cee:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 8007cf0:	4669      	mov	r1, sp
 8007cf2:	f7ff fb43 	bl	800737c <pb_read>
 8007cf6:	b118      	cbz	r0, 8007d00 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 8007cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007cfc:	e9c4 2300 	strd	r2, r3, [r4]
}
 8007d00:	b002      	add	sp, #8
 8007d02:	bd10      	pop	{r4, pc}

08007d04 <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 8007d04:	4611      	mov	r1, r2
 8007d06:	f7ff bff0 	b.w	8007cea <pb_decode_fixed64>

08007d0a <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 8007d0a:	b510      	push	{r4, lr}
    pb_type_t type = field->type;
 8007d0c:	7882      	ldrb	r2, [r0, #2]
{
 8007d0e:	b086      	sub	sp, #24
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8007d10:	f012 0330 	ands.w	r3, r2, #48	; 0x30
 8007d14:	d043      	beq.n	8007d9e <pb_check_proto3_default_value+0x94>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8007d16:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 8007d18:	f9b0 4005 	ldrsh.w	r4, [r0, #5]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8007d1c:	d104      	bne.n	8007d28 <pb_check_proto3_default_value+0x1e>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8007d1e:	5b08      	ldrh	r0, [r1, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 8007d20:	fab0 f080 	clz	r0, r0
 8007d24:	0940      	lsrs	r0, r0, #5
 8007d26:	e007      	b.n	8007d38 <pb_check_proto3_default_value+0x2e>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8007d28:	2b30      	cmp	r3, #48	; 0x30
 8007d2a:	d0f8      	beq.n	8007d1e <pb_check_proto3_default_value+0x14>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8007d2c:	2b10      	cmp	r3, #16
 8007d2e:	d105      	bne.n	8007d3c <pb_check_proto3_default_value+0x32>
 8007d30:	b124      	cbz	r4, 8007d3c <pb_check_proto3_default_value+0x32>
        return *(const bool*)pSize == false;
 8007d32:	5d08      	ldrb	r0, [r1, r4]
 8007d34:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 8007d38:	b006      	add	sp, #24
 8007d3a:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8007d3c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8007d40:	d006      	beq.n	8007d50 <pb_check_proto3_default_value+0x46>
 8007d42:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 8007d46:	440b      	add	r3, r1
	    for (i = 0; i < field->data_size; i++)
 8007d48:	428b      	cmp	r3, r1
 8007d4a:	d124      	bne.n	8007d96 <pb_check_proto3_default_value+0x8c>
	    return true;
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	e7f3      	b.n	8007d38 <pb_check_proto3_default_value+0x2e>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8007d50:	f002 030f 	and.w	r3, r2, #15
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	d101      	bne.n	8007d5c <pb_check_proto3_default_value+0x52>
            return bytes->size == 0;
 8007d58:	8808      	ldrh	r0, [r1, #0]
 8007d5a:	e7e1      	b.n	8007d20 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8007d5c:	2b06      	cmp	r3, #6
 8007d5e:	d101      	bne.n	8007d64 <pb_check_proto3_default_value+0x5a>
            return *(const char*)pData == '\0';
 8007d60:	7808      	ldrb	r0, [r1, #0]
 8007d62:	e7dd      	b.n	8007d20 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 8007d64:	2b09      	cmp	r3, #9
 8007d66:	d102      	bne.n	8007d6e <pb_check_proto3_default_value+0x64>
            return field->data_size == 0;
 8007d68:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8007d6c:	e7d8      	b.n	8007d20 <pb_check_proto3_default_value+0x16>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8007d6e:	2b07      	cmp	r3, #7
 8007d70:	d1e7      	bne.n	8007d42 <pb_check_proto3_default_value+0x38>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 8007d72:	460a      	mov	r2, r1
 8007d74:	f8d0 100b 	ldr.w	r1, [r0, #11]
 8007d78:	4668      	mov	r0, sp
 8007d7a:	f7ff f9ab 	bl	80070d4 <pb_field_iter_begin>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d0e4      	beq.n	8007d4c <pb_check_proto3_default_value+0x42>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 8007d82:	9904      	ldr	r1, [sp, #16]
 8007d84:	9801      	ldr	r0, [sp, #4]
 8007d86:	f7ff ffc0 	bl	8007d0a <pb_check_proto3_default_value>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d0d4      	beq.n	8007d38 <pb_check_proto3_default_value+0x2e>
                } while (pb_field_iter_next(&iter));
 8007d8e:	4668      	mov	r0, sp
 8007d90:	f7ff f9b2 	bl	80070f8 <pb_field_iter_next>
 8007d94:	e7f3      	b.n	8007d7e <pb_check_proto3_default_value+0x74>
	        if (p[i] != 0)
 8007d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d9a:	2a00      	cmp	r2, #0
 8007d9c:	d0d4      	beq.n	8007d48 <pb_check_proto3_default_value+0x3e>
        return false;
 8007d9e:	2000      	movs	r0, #0
 8007da0:	e7ca      	b.n	8007d38 <pb_check_proto3_default_value+0x2e>
	...

08007da4 <pb_write>:
{
 8007da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 8007da6:	6806      	ldr	r6, [r0, #0]
{
 8007da8:	4604      	mov	r4, r0
 8007daa:	4615      	mov	r5, r2
    if (stream->callback != NULL)
 8007dac:	b1ae      	cbz	r6, 8007dda <pb_write+0x36>
        if (stream->bytes_written + count > stream->max_size)
 8007dae:	68c3      	ldr	r3, [r0, #12]
 8007db0:	6887      	ldr	r7, [r0, #8]
 8007db2:	4413      	add	r3, r2
 8007db4:	429f      	cmp	r7, r3
 8007db6:	d207      	bcs.n	8007dc8 <pb_write+0x24>
            PB_RETURN_ERROR(stream, "stream full");
 8007db8:	6903      	ldr	r3, [r0, #16]
 8007dba:	4a0a      	ldr	r2, [pc, #40]	; (8007de4 <pb_write+0x40>)
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bf08      	it	eq
 8007dc0:	4613      	moveq	r3, r2
 8007dc2:	6103      	str	r3, [r0, #16]
 8007dc4:	2000      	movs	r0, #0
}
 8007dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
 8007dc8:	47b0      	blx	r6
 8007dca:	b930      	cbnz	r0, 8007dda <pb_write+0x36>
            PB_RETURN_ERROR(stream, "io error");
 8007dcc:	6923      	ldr	r3, [r4, #16]
 8007dce:	4a06      	ldr	r2, [pc, #24]	; (8007de8 <pb_write+0x44>)
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	bf08      	it	eq
 8007dd4:	4613      	moveq	r3, r2
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	e7f5      	b.n	8007dc6 <pb_write+0x22>
    stream->bytes_written += count;
 8007dda:	68e2      	ldr	r2, [r4, #12]
    return true;
 8007ddc:	2001      	movs	r0, #1
    stream->bytes_written += count;
 8007dde:	442a      	add	r2, r5
 8007de0:	60e2      	str	r2, [r4, #12]
    return true;
 8007de2:	e7f0      	b.n	8007dc6 <pb_write+0x22>
 8007de4:	0806f2bc 	.word	0x0806f2bc
 8007de8:	0806f146 	.word	0x0806f146

08007dec <pb_encode_varint>:
bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 8007dec:	2a80      	cmp	r2, #128	; 0x80
{
 8007dee:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (value <= 0x7F)
 8007df0:	f173 0100 	sbcs.w	r1, r3, #0
{
 8007df4:	4605      	mov	r5, r0
    if (value <= 0x7F)
 8007df6:	d207      	bcs.n	8007e08 <pb_encode_varint+0x1c>
    {
        pb_byte_t v = (pb_byte_t)value;
 8007df8:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 8007dfc:	a901      	add	r1, sp, #4
 8007dfe:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8007e00:	f7ff ffd0 	bl	8007da4 <pb_write>
}
 8007e04:	b004      	add	sp, #16
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	ae01      	add	r6, sp, #4
    size_t i = 0;
 8007e0a:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8007e0c:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8007e10:	b2d0      	uxtb	r0, r2
 8007e12:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 8007e16:	09d1      	lsrs	r1, r2, #7
 8007e18:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	09db      	lsrs	r3, r3, #7
        i++;
 8007e20:	3401      	adds	r4, #1
    while (value)
 8007e22:	ea52 0c03 	orrs.w	ip, r2, r3
 8007e26:	d1f1      	bne.n	8007e0c <pb_encode_varint+0x20>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8007e28:	f101 0310 	add.w	r3, r1, #16
 8007e2c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    return pb_write(stream, buffer, i);
 8007e30:	a901      	add	r1, sp, #4
 8007e32:	4628      	mov	r0, r5
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 8007e34:	446b      	add	r3, sp
 8007e36:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 8007e3a:	4622      	mov	r2, r4
 8007e3c:	e7e0      	b.n	8007e00 <pb_encode_varint+0x14>
	...

08007e40 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8007e40:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d104      	bne.n	8007e52 <pb_enc_uvarint+0x12>
        value = *(const uint_least8_t*)src;
 8007e48:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
    else if (field->data_size == sizeof(uint32_t))
        value = *(const uint32_t*)src;
 8007e4a:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 8007e4c:	460a      	mov	r2, r1
 8007e4e:	f7ff bfcd 	b.w	8007dec <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d101      	bne.n	8007e5a <pb_enc_uvarint+0x1a>
        value = *(const uint_least16_t*)src;
 8007e56:	8811      	ldrh	r1, [r2, #0]
 8007e58:	e7f7      	b.n	8007e4a <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(uint32_t))
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d101      	bne.n	8007e62 <pb_enc_uvarint+0x22>
        value = *(const uint32_t*)src;
 8007e5e:	6811      	ldr	r1, [r2, #0]
 8007e60:	e7f3      	b.n	8007e4a <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(pb_uint64_t))
 8007e62:	2b08      	cmp	r3, #8
 8007e64:	d102      	bne.n	8007e6c <pb_enc_uvarint+0x2c>
        value = *(const pb_uint64_t*)src;
 8007e66:	e9d2 1300 	ldrd	r1, r3, [r2]
 8007e6a:	e7ef      	b.n	8007e4c <pb_enc_uvarint+0xc>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8007e6c:	6903      	ldr	r3, [r0, #16]
 8007e6e:	4a03      	ldr	r2, [pc, #12]	; (8007e7c <pb_enc_uvarint+0x3c>)
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bf08      	it	eq
 8007e74:	4613      	moveq	r3, r2
 8007e76:	6103      	str	r3, [r0, #16]
}
 8007e78:	2000      	movs	r0, #0
 8007e7a:	4770      	bx	lr
 8007e7c:	0806f1c1 	.word	0x0806f1c1

08007e80 <pb_enc_varint>:
{
 8007e80:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 8007e82:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8007e86:	2a01      	cmp	r2, #1
 8007e88:	d104      	bne.n	8007e94 <pb_enc_varint+0x14>
        value = *(const int_least8_t*)src;
 8007e8a:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int32_t*)src;
 8007e8e:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 8007e90:	f7ff bfac 	b.w	8007dec <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 8007e94:	2a02      	cmp	r2, #2
 8007e96:	d102      	bne.n	8007e9e <pb_enc_varint+0x1e>
        value = *(const int_least16_t*)src;
 8007e98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007e9c:	e7f7      	b.n	8007e8e <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(int32_t))
 8007e9e:	2a04      	cmp	r2, #4
 8007ea0:	d101      	bne.n	8007ea6 <pb_enc_varint+0x26>
        value = *(const int32_t*)src;
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	e7f3      	b.n	8007e8e <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 8007ea6:	2a08      	cmp	r2, #8
 8007ea8:	d102      	bne.n	8007eb0 <pb_enc_varint+0x30>
        value = *(const pb_int64_t*)src;
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	e7ef      	b.n	8007e90 <pb_enc_varint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8007eb0:	6903      	ldr	r3, [r0, #16]
 8007eb2:	4a03      	ldr	r2, [pc, #12]	; (8007ec0 <pb_enc_varint+0x40>)
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	bf08      	it	eq
 8007eb8:	4613      	moveq	r3, r2
 8007eba:	6103      	str	r3, [r0, #16]
}
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	4770      	bx	lr
 8007ec0:	0806f1c1 	.word	0x0806f1c1

08007ec4 <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 8007ec4:	1892      	adds	r2, r2, r2
{
 8007ec6:	b410      	push	{r4}
 8007ec8:	461c      	mov	r4, r3
        zigzagged = ~((pb_uint64_t)value << 1);
 8007eca:	eb43 0103 	adc.w	r1, r3, r3
    if (value < 0)
 8007ece:	2c00      	cmp	r4, #0
        zigzagged = ~((pb_uint64_t)value << 1);
 8007ed0:	460b      	mov	r3, r1
}
 8007ed2:	f85d 4b04 	ldr.w	r4, [sp], #4
        zigzagged = ~((pb_uint64_t)value << 1);
 8007ed6:	bfbc      	itt	lt
 8007ed8:	43d2      	mvnlt	r2, r2
 8007eda:	43cb      	mvnlt	r3, r1
    return pb_encode_varint(stream, zigzagged);
 8007edc:	f7ff bf86 	b.w	8007dec <pb_encode_varint>

08007ee0 <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8007ee0:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 8007ee2:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8007ee6:	2a01      	cmp	r2, #1
 8007ee8:	d104      	bne.n	8007ef4 <pb_enc_svarint+0x14>
        value = *(const int_least8_t*)src;
 8007eea:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
    else if (field->data_size == sizeof(int32_t))
        value = *(const int32_t*)src;
 8007eee:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 8007ef0:	f7ff bfe8 	b.w	8007ec4 <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 8007ef4:	2a02      	cmp	r2, #2
 8007ef6:	d102      	bne.n	8007efe <pb_enc_svarint+0x1e>
        value = *(const int_least16_t*)src;
 8007ef8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007efc:	e7f7      	b.n	8007eee <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(int32_t))
 8007efe:	2a04      	cmp	r2, #4
 8007f00:	d101      	bne.n	8007f06 <pb_enc_svarint+0x26>
        value = *(const int32_t*)src;
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	e7f3      	b.n	8007eee <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 8007f06:	2a08      	cmp	r2, #8
 8007f08:	d102      	bne.n	8007f10 <pb_enc_svarint+0x30>
        value = *(const pb_int64_t*)src;
 8007f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0e:	e7ef      	b.n	8007ef0 <pb_enc_svarint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8007f10:	6903      	ldr	r3, [r0, #16]
 8007f12:	4a03      	ldr	r2, [pc, #12]	; (8007f20 <pb_enc_svarint+0x40>)
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	bf08      	it	eq
 8007f18:	4613      	moveq	r3, r2
 8007f1a:	6103      	str	r3, [r0, #16]
}
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	4770      	bx	lr
 8007f20:	0806f1c1 	.word	0x0806f1c1

08007f24 <pb_encode_fixed32>:
    uint32_t val = *(const uint32_t*)value;
 8007f24:	680b      	ldr	r3, [r1, #0]
{
 8007f26:	b507      	push	{r0, r1, r2, lr}
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8007f28:	0a1a      	lsrs	r2, r3, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8007f2a:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8007f2e:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8007f32:	0c1a      	lsrs	r2, r3, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8007f34:	0e1b      	lsrs	r3, r3, #24
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8007f36:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 4);
 8007f3a:	2204      	movs	r2, #4
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8007f3c:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 4);
 8007f40:	eb0d 0102 	add.w	r1, sp, r2
 8007f44:	f7ff ff2e 	bl	8007da4 <pb_write>
}
 8007f48:	b003      	add	sp, #12
 8007f4a:	f85d fb04 	ldr.w	pc, [sp], #4

08007f4e <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8007f4e:	4611      	mov	r1, r2
 8007f50:	f7ff bfe8 	b.w	8007f24 <pb_encode_fixed32>

08007f54 <pb_encode_fixed64>:
{
 8007f54:	b507      	push	{r0, r1, r2, lr}
    uint64_t val = *(const uint64_t*)value;
 8007f56:	e9d1 2300 	ldrd	r2, r3, [r1]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8007f5a:	0a11      	lsrs	r1, r2, #8
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8007f5c:	f88d 2000 	strb.w	r2, [sp]
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8007f60:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 8007f64:	f88d 1001 	strb.w	r1, [sp, #1]
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8007f68:	0c11      	lsrs	r1, r2, #16
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8007f6a:	0e12      	lsrs	r2, r2, #24
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 8007f6c:	f88d 1002 	strb.w	r1, [sp, #2]
    return pb_write(stream, bytes, 8);
 8007f70:	4669      	mov	r1, sp
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 8007f72:	f88d 2003 	strb.w	r2, [sp, #3]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8007f76:	0a1a      	lsrs	r2, r3, #8
 8007f78:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8007f7c:	0c1a      	lsrs	r2, r3, #16
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8007f7e:	0e1b      	lsrs	r3, r3, #24
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8007f80:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 8);
 8007f84:	2208      	movs	r2, #8
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8007f86:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 8007f8a:	f7ff ff0b 	bl	8007da4 <pb_write>
}
 8007f8e:	b003      	add	sp, #12
 8007f90:	f85d fb04 	ldr.w	pc, [sp], #4

08007f94 <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 8007f94:	4611      	mov	r1, r2
 8007f96:	f7ff bfdd 	b.w	8007f54 <pb_encode_fixed64>

08007f9a <pb_encode_tag>:
{
 8007f9a:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 8007f9c:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 8007fa0:	0f5b      	lsrs	r3, r3, #29
 8007fa2:	f7ff bf23 	b.w	8007dec <pb_encode_varint>
	...

08007fa8 <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 8007fa8:	788a      	ldrb	r2, [r1, #2]
{
 8007faa:	460b      	mov	r3, r1
    switch (PB_LTYPE(field->type))
 8007fac:	f002 020f 	and.w	r2, r2, #15
 8007fb0:	2a09      	cmp	r2, #9
 8007fb2:	d810      	bhi.n	8007fd6 <pb_encode_tag_for_field+0x2e>
 8007fb4:	e8df f002 	tbb	[pc, r2]
 8007fb8:	050b0b0b 	.word	0x050b0b0b
 8007fbc:	0909090d 	.word	0x0909090d
 8007fc0:	090f      	.short	0x090f
 8007fc2:	2105      	movs	r1, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 8007fc4:	881a      	ldrh	r2, [r3, #0]
 8007fc6:	f7ff bfe8 	b.w	8007f9a <pb_encode_tag>
            wiretype = PB_WT_STRING;
 8007fca:	2102      	movs	r1, #2
            break;
 8007fcc:	e7fa      	b.n	8007fc4 <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_VARINT;
 8007fce:	2100      	movs	r1, #0
 8007fd0:	e7f8      	b.n	8007fc4 <pb_encode_tag_for_field+0x1c>
            wiretype = PB_WT_64BIT;
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	e7f6      	b.n	8007fc4 <pb_encode_tag_for_field+0x1c>
            PB_RETURN_ERROR(stream, "invalid field type");
 8007fd6:	6903      	ldr	r3, [r0, #16]
 8007fd8:	4a03      	ldr	r2, [pc, #12]	; (8007fe8 <pb_encode_tag_for_field+0x40>)
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bf08      	it	eq
 8007fde:	4613      	moveq	r3, r2
 8007fe0:	6103      	str	r3, [r0, #16]
}
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop
 8007fe8:	0806f21e 	.word	0x0806f21e

08007fec <encode_field>:
{
 8007fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ff0:	4616      	mov	r6, r2
    switch (PB_ATYPE(field->type))
 8007ff2:	788a      	ldrb	r2, [r1, #2]
{
 8007ff4:	b086      	sub	sp, #24
 8007ff6:	4605      	mov	r5, r0
    switch (PB_ATYPE(field->type))
 8007ff8:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
{
 8007ffc:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 8007ffe:	2b40      	cmp	r3, #64	; 0x40
 8008000:	f000 80dd 	beq.w	80081be <encode_field+0x1d2>
 8008004:	0653      	lsls	r3, r2, #25
 8008006:	d41b      	bmi.n	8008040 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 8008008:	4b75      	ldr	r3, [pc, #468]	; (80081e0 <encode_field+0x1f4>)
 800800a:	f002 010f 	and.w	r1, r2, #15
 800800e:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 8008012:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
 8008016:	b1b3      	cbz	r3, 8008046 <encode_field+0x5a>
        pSize = (const char*)pData + field->size_offset;
 8008018:	4433      	add	r3, r6
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800801a:	78a2      	ldrb	r2, [r4, #2]
 800801c:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 8008020:	2880      	cmp	r0, #128	; 0x80
 8008022:	d105      	bne.n	8008030 <encode_field+0x44>
        pData = *(const void* const*)pData;
 8008024:	6836      	ldr	r6, [r6, #0]
        implicit_has = (pData != NULL);
 8008026:	1e31      	subs	r1, r6, #0
 8008028:	bf18      	it	ne
 800802a:	2101      	movne	r1, #1
 800802c:	f88d 1003 	strb.w	r1, [sp, #3]
    switch (PB_HTYPE(field->type))
 8008030:	f002 0130 	and.w	r1, r2, #48	; 0x30
 8008034:	2920      	cmp	r1, #32
 8008036:	d03e      	beq.n	80080b6 <encode_field+0xca>
 8008038:	d818      	bhi.n	800806c <encode_field+0x80>
 800803a:	b361      	cbz	r1, 8008096 <encode_field+0xaa>
 800803c:	2910      	cmp	r1, #16
 800803e:	d033      	beq.n	80080a8 <encode_field+0xbc>
            PB_RETURN_ERROR(stream, "invalid field type");
 8008040:	692b      	ldr	r3, [r5, #16]
 8008042:	4a68      	ldr	r2, [pc, #416]	; (80081e4 <encode_field+0x1f8>)
 8008044:	e02b      	b.n	800809e <encode_field+0xb2>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8008046:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800804a:	2a10      	cmp	r2, #16
 800804c:	d10a      	bne.n	8008064 <encode_field+0x78>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 800804e:	4631      	mov	r1, r6
 8008050:	4620      	mov	r0, r4
 8008052:	f7ff fe5a 	bl	8007d0a <pb_check_proto3_default_value>
 8008056:	f080 0001 	eor.w	r0, r0, #1
 800805a:	f88d 0003 	strb.w	r0, [sp, #3]
    const void *pSize = &implicit_has;
 800805e:	f10d 0303 	add.w	r3, sp, #3
 8008062:	e7da      	b.n	800801a <encode_field+0x2e>
        implicit_has = true;
 8008064:	2301      	movs	r3, #1
 8008066:	f88d 3003 	strb.w	r3, [sp, #3]
 800806a:	e7f8      	b.n	800805e <encode_field+0x72>
    switch (PB_HTYPE(field->type))
 800806c:	2930      	cmp	r1, #48	; 0x30
 800806e:	d1e7      	bne.n	8008040 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 8008070:	881a      	ldrh	r2, [r3, #0]
 8008072:	8823      	ldrh	r3, [r4, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d11a      	bne.n	80080ae <encode_field+0xc2>
                if (!pb_encode_tag_for_field(stream, field))
 8008078:	4621      	mov	r1, r4
 800807a:	4628      	mov	r0, r5
 800807c:	f7ff ff94 	bl	8007fa8 <pb_encode_tag_for_field>
 8008080:	2800      	cmp	r0, #0
 8008082:	f000 8090 	beq.w	80081a6 <encode_field+0x1ba>
                if (!func(stream, field, pData))
 8008086:	4632      	mov	r2, r6
 8008088:	4621      	mov	r1, r4
 800808a:	4628      	mov	r0, r5
 800808c:	463b      	mov	r3, r7
}
 800808e:	b006      	add	sp, #24
 8008090:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                if (!func(stream, field, pData))
 8008094:	4718      	bx	r3
            if (!pData)
 8008096:	2e00      	cmp	r6, #0
 8008098:	d1ee      	bne.n	8008078 <encode_field+0x8c>
                PB_RETURN_ERROR(stream, "missing required field");
 800809a:	692b      	ldr	r3, [r5, #16]
 800809c:	4a52      	ldr	r2, [pc, #328]	; (80081e8 <encode_field+0x1fc>)
            PB_RETURN_ERROR(stream, "invalid field type");
 800809e:	2b00      	cmp	r3, #0
 80080a0:	bf08      	it	eq
 80080a2:	4613      	moveq	r3, r2
 80080a4:	612b      	str	r3, [r5, #16]
 80080a6:	e07e      	b.n	80081a6 <encode_field+0x1ba>
            if (*(const bool*)pSize)
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d1e4      	bne.n	8008078 <encode_field+0x8c>
    return true;
 80080ae:	2001      	movs	r0, #1
}
 80080b0:	b006      	add	sp, #24
 80080b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (field->size_offset != 0) {
 80080b6:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
 80080ba:	b169      	cbz	r1, 80080d8 <encode_field+0xec>
                count = *(const pb_size_t*)pSize;
 80080bc:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 80080c0:	f1b8 0f00 	cmp.w	r8, #0
 80080c4:	d0f3      	beq.n	80080ae <encode_field+0xc2>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 80080c6:	2880      	cmp	r0, #128	; 0x80
 80080c8:	d009      	beq.n	80080de <encode_field+0xf2>
 80080ca:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 80080ce:	4598      	cmp	r8, r3
 80080d0:	d905      	bls.n	80080de <encode_field+0xf2>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 80080d2:	692b      	ldr	r3, [r5, #16]
 80080d4:	4a45      	ldr	r2, [pc, #276]	; (80081ec <encode_field+0x200>)
 80080d6:	e7e2      	b.n	800809e <encode_field+0xb2>
                count = field->array_size;
 80080d8:	f8b4 8009 	ldrh.w	r8, [r4, #9]
 80080dc:	e7f0      	b.n	80080c0 <encode_field+0xd4>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80080de:	f002 020f 	and.w	r2, r2, #15
 80080e2:	2a04      	cmp	r2, #4
 80080e4:	d849      	bhi.n	800817a <encode_field+0x18e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 80080e6:	8822      	ldrh	r2, [r4, #0]
 80080e8:	2102      	movs	r1, #2
 80080ea:	4628      	mov	r0, r5
 80080ec:	f7ff ff55 	bl	8007f9a <pb_encode_tag>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d058      	beq.n	80081a6 <encode_field+0x1ba>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 80080f4:	78a3      	ldrb	r3, [r4, #2]
 80080f6:	f003 030f 	and.w	r3, r3, #15
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d111      	bne.n	8008122 <encode_field+0x136>
            size = 4 * count;
 80080fe:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8008102:	464a      	mov	r2, r9
 8008104:	2300      	movs	r3, #0
 8008106:	4628      	mov	r0, r5
 8008108:	f7ff fe70 	bl	8007dec <pb_encode_varint>
 800810c:	2800      	cmp	r0, #0
 800810e:	d04a      	beq.n	80081a6 <encode_field+0x1ba>
        if (stream->callback == NULL)
 8008110:	6829      	ldr	r1, [r5, #0]
 8008112:	bb19      	cbnz	r1, 800815c <encode_field+0x170>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8008114:	464a      	mov	r2, r9
 8008116:	4628      	mov	r0, r5
}
 8008118:	b006      	add	sp, #24
 800811a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800811e:	f7ff be41 	b.w	8007da4 <pb_write>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8008122:	2b04      	cmp	r3, #4
 8008124:	d102      	bne.n	800812c <encode_field+0x140>
            size = 8 * count;
 8008126:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800812a:	e7ea      	b.n	8008102 <encode_field+0x116>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800812c:	46b2      	mov	sl, r6
            for (i = 0; i < count; i++)
 800812e:	f04f 0900 	mov.w	r9, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8008132:	2214      	movs	r2, #20
 8008134:	2100      	movs	r1, #0
 8008136:	a801      	add	r0, sp, #4
 8008138:	f004 fffc 	bl	800d134 <memset>
                if (!func(&sizestream, field, p))
 800813c:	4652      	mov	r2, sl
 800813e:	4621      	mov	r1, r4
 8008140:	a801      	add	r0, sp, #4
 8008142:	47b8      	blx	r7
 8008144:	2800      	cmp	r0, #0
 8008146:	d0b3      	beq.n	80080b0 <encode_field+0xc4>
            for (i = 0; i < count; i++)
 8008148:	f109 0901 	add.w	r9, r9, #1
                p = (const char*)p + field->data_size;
 800814c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
            for (i = 0; i < count; i++)
 8008150:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 8008152:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 8008154:	d8f2      	bhi.n	800813c <encode_field+0x150>
            size = sizestream.bytes_written;
 8008156:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800815a:	e7d2      	b.n	8008102 <encode_field+0x116>
        for (i = 0; i < count; i++)
 800815c:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 8008160:	4632      	mov	r2, r6
 8008162:	4621      	mov	r1, r4
 8008164:	4628      	mov	r0, r5
 8008166:	47b8      	blx	r7
 8008168:	b1e8      	cbz	r0, 80081a6 <encode_field+0x1ba>
        for (i = 0; i < count; i++)
 800816a:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 800816e:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 8008172:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 8008174:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 8008176:	d8f3      	bhi.n	8008160 <encode_field+0x174>
 8008178:	e799      	b.n	80080ae <encode_field+0xc2>
        for (i = 0; i < count; i++)
 800817a:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 800817e:	4621      	mov	r1, r4
 8008180:	4628      	mov	r0, r5
 8008182:	f7ff ff11 	bl	8007fa8 <pb_encode_tag_for_field>
 8008186:	b170      	cbz	r0, 80081a6 <encode_field+0x1ba>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8008188:	78a3      	ldrb	r3, [r4, #2]
 800818a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 800818e:	2a80      	cmp	r2, #128	; 0x80
 8008190:	d113      	bne.n	80081ba <encode_field+0x1ce>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8008198:	2b01      	cmp	r3, #1
 800819a:	d80e      	bhi.n	80081ba <encode_field+0x1ce>
                if (!func(stream, field, *(const void* const*)p))
 800819c:	6832      	ldr	r2, [r6, #0]
                if (!func(stream, field, p))
 800819e:	4621      	mov	r1, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b8      	blx	r7
 80081a4:	b908      	cbnz	r0, 80081aa <encode_field+0x1be>
            PB_RETURN_ERROR(stream, "invalid field type");
 80081a6:	2000      	movs	r0, #0
 80081a8:	e782      	b.n	80080b0 <encode_field+0xc4>
        for (i = 0; i < count; i++)
 80081aa:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 80081ae:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 80081b2:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 80081b4:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 80081b6:	d8e2      	bhi.n	800817e <encode_field+0x192>
 80081b8:	e779      	b.n	80080ae <encode_field+0xc2>
                if (!func(stream, field, p))
 80081ba:	4632      	mov	r2, r6
 80081bc:	e7ef      	b.n	800819e <encode_field+0x1b2>
    if (callback->funcs.encode != NULL)
 80081be:	6833      	ldr	r3, [r6, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f43f af74 	beq.w	80080ae <encode_field+0xc2>
        if (!callback->funcs.encode(stream, field, arg))
 80081c6:	1d32      	adds	r2, r6, #4
 80081c8:	4798      	blx	r3
 80081ca:	2800      	cmp	r0, #0
 80081cc:	f47f af6f 	bne.w	80080ae <encode_field+0xc2>
            PB_RETURN_ERROR(stream, "callback error");
 80081d0:	692b      	ldr	r3, [r5, #16]
 80081d2:	4a07      	ldr	r2, [pc, #28]	; (80081f0 <encode_field+0x204>)
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	bf08      	it	eq
 80081d8:	4613      	moveq	r3, r2
 80081da:	612b      	str	r3, [r5, #16]
 80081dc:	e768      	b.n	80080b0 <encode_field+0xc4>
 80081de:	bf00      	nop
 80081e0:	0806f318 	.word	0x0806f318
 80081e4:	0806f21e 	.word	0x0806f21e
 80081e8:	0806f262 	.word	0x0806f262
 80081ec:	0806f2c8 	.word	0x0806f2c8
 80081f0:	0806f2e0 	.word	0x0806f2e0

080081f4 <pb_encode>:
{
 80081f4:	b530      	push	{r4, r5, lr}
 80081f6:	b087      	sub	sp, #28
 80081f8:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 80081fa:	4668      	mov	r0, sp
 80081fc:	f7fe ff6a 	bl	80070d4 <pb_field_iter_begin>
 8008200:	b910      	cbnz	r0, 8008208 <pb_encode+0x14>
        return true; /* Empty message type */
 8008202:	2001      	movs	r0, #1
}
 8008204:	b007      	add	sp, #28
 8008206:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 8008208:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 800820a:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 800820c:	788b      	ldrb	r3, [r1, #2]
 800820e:	f003 030f 	and.w	r3, r3, #15
 8008212:	2b08      	cmp	r3, #8
 8008214:	d11c      	bne.n	8008250 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 8008216:	6814      	ldr	r4, [r2, #0]
    while (extension)
 8008218:	b91c      	cbnz	r4, 8008222 <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 800821a:	4668      	mov	r0, sp
 800821c:	f7fe ff6c 	bl	80070f8 <pb_field_iter_next>
 8008220:	e7ee      	b.n	8008200 <pb_encode+0xc>
        if (extension->type->encode)
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	685a      	ldr	r2, [r3, #4]
 8008226:	b12a      	cbz	r2, 8008234 <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 8008228:	4621      	mov	r1, r4
 800822a:	4628      	mov	r0, r5
 800822c:	4790      	blx	r2
        if (!status)
 800822e:	b968      	cbnz	r0, 800824c <pb_encode+0x58>
                return false;
 8008230:	2000      	movs	r0, #0
 8008232:	e7e7      	b.n	8008204 <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8008234:	6899      	ldr	r1, [r3, #8]
        return encode_field(stream, field, extension->dest);
 8008236:	4628      	mov	r0, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8008238:	788b      	ldrb	r3, [r1, #2]
 800823a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800823e:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, &extension->dest);
 8008240:	bf0c      	ite	eq
 8008242:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 8008244:	6862      	ldrne	r2, [r4, #4]
 8008246:	f7ff fed1 	bl	8007fec <encode_field>
 800824a:	e7f0      	b.n	800822e <pb_encode+0x3a>
        extension = extension->next;
 800824c:	68a4      	ldr	r4, [r4, #8]
 800824e:	e7e3      	b.n	8008218 <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 8008250:	4628      	mov	r0, r5
 8008252:	f7ff fecb 	bl	8007fec <encode_field>
 8008256:	2800      	cmp	r0, #0
 8008258:	d1df      	bne.n	800821a <pb_encode+0x26>
 800825a:	e7e9      	b.n	8008230 <pb_encode+0x3c>

0800825c <pb_encode_string>:
{
 800825c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800825e:	2300      	movs	r3, #0
{
 8008260:	4604      	mov	r4, r0
 8008262:	4615      	mov	r5, r2
 8008264:	9101      	str	r1, [sp, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8008266:	f7ff fdc1 	bl	8007dec <pb_encode_varint>
 800826a:	b138      	cbz	r0, 800827c <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 800826c:	462a      	mov	r2, r5
 800826e:	9901      	ldr	r1, [sp, #4]
 8008270:	4620      	mov	r0, r4
}
 8008272:	b003      	add	sp, #12
 8008274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 8008278:	f7ff bd94 	b.w	8007da4 <pb_write>
}
 800827c:	b003      	add	sp, #12
 800827e:	bd30      	pop	{r4, r5, pc}

08008280 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8008280:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 8008282:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8008286:	4619      	mov	r1, r3
 8008288:	f7ff bfe8 	b.w	800825c <pb_encode_string>

0800828c <pb_enc_string>:
{
 800828c:	b410      	push	{r4}
    size_t max_size = field->data_size;
 800828e:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8008292:	7889      	ldrb	r1, [r1, #2]
 8008294:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 8008298:	2980      	cmp	r1, #128	; 0x80
    if (src == NULL)
 800829a:	4611      	mov	r1, r2
    size_t max_size = field->data_size;
 800829c:	bf08      	it	eq
 800829e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (src == NULL)
 80082a2:	b122      	cbz	r2, 80082ae <pb_enc_string+0x22>
    size_t size = 0;
 80082a4:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d001      	beq.n	80082ae <pb_enc_string+0x22>
 80082aa:	5c8c      	ldrb	r4, [r1, r2]
 80082ac:	b91c      	cbnz	r4, 80082b6 <pb_enc_string+0x2a>
}
 80082ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 80082b2:	f7ff bfd3 	b.w	800825c <pb_encode_string>
            size++;
 80082b6:	3201      	adds	r2, #1
            p++;
 80082b8:	e7f5      	b.n	80082a6 <pb_enc_string+0x1a>
	...

080082bc <pb_enc_bytes>:
{
 80082bc:	b470      	push	{r4, r5, r6}
 80082be:	4603      	mov	r3, r0
 80082c0:	460c      	mov	r4, r1
    if (src == NULL)
 80082c2:	4611      	mov	r1, r2
 80082c4:	b912      	cbnz	r2, 80082cc <pb_enc_bytes+0x10>
}
 80082c6:	bc70      	pop	{r4, r5, r6}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 80082c8:	f7ff bfc8 	b.w	800825c <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80082cc:	78a0      	ldrb	r0, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 80082ce:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80082d0:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 80082d4:	d104      	bne.n	80082e0 <pb_enc_bytes+0x24>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 80082d6:	1c95      	adds	r5, r2, #2
 80082d8:	f8b4 6007 	ldrh.w	r6, [r4, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80082dc:	42b5      	cmp	r5, r6
 80082de:	d802      	bhi.n	80082e6 <pb_enc_bytes+0x2a>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 80082e0:	3102      	adds	r1, #2
 80082e2:	4618      	mov	r0, r3
 80082e4:	e7ef      	b.n	80082c6 <pb_enc_bytes+0xa>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80082e6:	691a      	ldr	r2, [r3, #16]
 80082e8:	4903      	ldr	r1, [pc, #12]	; (80082f8 <pb_enc_bytes+0x3c>)
 80082ea:	2a00      	cmp	r2, #0
 80082ec:	bf08      	it	eq
 80082ee:	460a      	moveq	r2, r1
}
 80082f0:	bc70      	pop	{r4, r5, r6}
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80082f2:	611a      	str	r2, [r3, #16]
}
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	0806f2ef 	.word	0x0806f2ef

080082fc <pb_encode_submessage>:
{
 80082fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008300:	b086      	sub	sp, #24
 8008302:	460f      	mov	r7, r1
 8008304:	4690      	mov	r8, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8008306:	2100      	movs	r1, #0
 8008308:	2214      	movs	r2, #20
{
 800830a:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800830c:	a801      	add	r0, sp, #4
 800830e:	f004 ff11 	bl	800d134 <memset>
    if (!pb_encode(&substream, fields, src_struct))
 8008312:	4642      	mov	r2, r8
 8008314:	4639      	mov	r1, r7
 8008316:	a801      	add	r0, sp, #4
 8008318:	f7ff ff6c 	bl	80081f4 <pb_encode>
 800831c:	b910      	cbnz	r0, 8008324 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
 800831e:	9b05      	ldr	r3, [sp, #20]
    stream->errmsg = substream.errmsg;
 8008320:	6123      	str	r3, [r4, #16]
 8008322:	e00d      	b.n	8008340 <pb_encode_submessage+0x44>
    size = substream.bytes_written;
 8008324:	9e04      	ldr	r6, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8008326:	2500      	movs	r5, #0
 8008328:	4620      	mov	r0, r4
 800832a:	4632      	mov	r2, r6
 800832c:	462b      	mov	r3, r5
 800832e:	f7ff fd5d 	bl	8007dec <pb_encode_varint>
 8008332:	b128      	cbz	r0, 8008340 <pb_encode_submessage+0x44>
    if (stream->callback == NULL)
 8008334:	6821      	ldr	r1, [r4, #0]
 8008336:	b931      	cbnz	r1, 8008346 <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 8008338:	4632      	mov	r2, r6
 800833a:	4620      	mov	r0, r4
 800833c:	f7ff fd32 	bl	8007da4 <pb_write>
}
 8008340:	b006      	add	sp, #24
 8008342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 8008346:	68e3      	ldr	r3, [r4, #12]
 8008348:	68a2      	ldr	r2, [r4, #8]
 800834a:	4433      	add	r3, r6
 800834c:	4293      	cmp	r3, r2
 800834e:	d907      	bls.n	8008360 <pb_encode_submessage+0x64>
        PB_RETURN_ERROR(stream, "stream full");
 8008350:	6923      	ldr	r3, [r4, #16]
 8008352:	4a0e      	ldr	r2, [pc, #56]	; (800838c <pb_encode_submessage+0x90>)
        PB_RETURN_ERROR(stream, "submsg size changed");
 8008354:	2b00      	cmp	r3, #0
 8008356:	bf08      	it	eq
 8008358:	4613      	moveq	r3, r2
 800835a:	4628      	mov	r0, r5
 800835c:	6123      	str	r3, [r4, #16]
 800835e:	e7ef      	b.n	8008340 <pb_encode_submessage+0x44>
    substream.state = stream->state;
 8008360:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
 8008362:	4642      	mov	r2, r8
    substream.callback = stream->callback;
 8008364:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 8008366:	a801      	add	r0, sp, #4
 8008368:	4639      	mov	r1, r7
    substream.max_size = size;
 800836a:	e9cd 3602 	strd	r3, r6, [sp, #8]
    substream.errmsg = NULL;
 800836e:	e9cd 5504 	strd	r5, r5, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
 8008372:	f7ff ff3f 	bl	80081f4 <pb_encode>
    stream->bytes_written += substream.bytes_written;
 8008376:	9a04      	ldr	r2, [sp, #16]
 8008378:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
 800837a:	42b2      	cmp	r2, r6
    stream->bytes_written += substream.bytes_written;
 800837c:	4413      	add	r3, r2
 800837e:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
 8008380:	9b02      	ldr	r3, [sp, #8]
 8008382:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
 8008384:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
 8008386:	d0cb      	beq.n	8008320 <pb_encode_submessage+0x24>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8008388:	4a01      	ldr	r2, [pc, #4]	; (8008390 <pb_encode_submessage+0x94>)
 800838a:	e7e3      	b.n	8008354 <pb_encode_submessage+0x58>
 800838c:	0806f2bc 	.word	0x0806f2bc
 8008390:	0806f303 	.word	0x0806f303

08008394 <pb_enc_submessage>:
    if (field->ptr == NULL)
 8008394:	f8d1 100b 	ldr.w	r1, [r1, #11]
{
 8008398:	4603      	mov	r3, r0
    if (field->ptr == NULL)
 800839a:	b109      	cbz	r1, 80083a0 <pb_enc_submessage+0xc>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 800839c:	f7ff bfae 	b.w	80082fc <pb_encode_submessage>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80083a0:	6902      	ldr	r2, [r0, #16]
 80083a2:	4803      	ldr	r0, [pc, #12]	; (80083b0 <pb_enc_submessage+0x1c>)
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	bf08      	it	eq
 80083a8:	4602      	moveq	r2, r0
}
 80083aa:	4608      	mov	r0, r1
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80083ac:	611a      	str	r2, [r3, #16]
}
 80083ae:	4770      	bx	lr
 80083b0:	0806f279 	.word	0x0806f279

080083b4 <ai_version_get>:
 80083b4:	0212      	lsls	r2, r2, #8
 80083b6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80083ba:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80083be:	4770      	bx	lr

080083c0 <ai_platform_version_get>:
 80083c0:	0e01      	lsrs	r1, r0, #24
 80083c2:	2300      	movs	r3, #0
 80083c4:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80083c8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80083cc:	f361 0307 	bfi	r3, r1, #0, #8
 80083d0:	b082      	sub	sp, #8
 80083d2:	f362 230f 	bfi	r3, r2, #8, #8
 80083d6:	f360 4317 	bfi	r3, r0, #16, #8
 80083da:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 80083de:	b002      	add	sp, #8
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop

080083e4 <get_tensor_size>:
 80083e4:	b111      	cbz	r1, 80083ec <get_tensor_size+0x8>
 80083e6:	6983      	ldr	r3, [r0, #24]
 80083e8:	6858      	ldr	r0, [r3, #4]
 80083ea:	4770      	bx	lr
 80083ec:	6883      	ldr	r3, [r0, #8]
 80083ee:	0a1b      	lsrs	r3, r3, #8
 80083f0:	d00a      	beq.n	8008408 <get_tensor_size+0x24>
 80083f2:	68c1      	ldr	r1, [r0, #12]
 80083f4:	2001      	movs	r0, #1
 80083f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80083fa:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80083fe:	4299      	cmp	r1, r3
 8008400:	fb02 f000 	mul.w	r0, r2, r0
 8008404:	d1f9      	bne.n	80083fa <get_tensor_size+0x16>
 8008406:	4770      	bx	lr
 8008408:	2001      	movs	r0, #1
 800840a:	4770      	bx	lr

0800840c <get_tensor_byte_size>:
 800840c:	b430      	push	{r4, r5}
 800840e:	6985      	ldr	r5, [r0, #24]
 8008410:	68c4      	ldr	r4, [r0, #12]
 8008412:	6941      	ldr	r1, [r0, #20]
 8008414:	4b06      	ldr	r3, [pc, #24]	; (8008430 <get_tensor_byte_size+0x24>)
 8008416:	6828      	ldr	r0, [r5, #0]
 8008418:	4a06      	ldr	r2, [pc, #24]	; (8008434 <get_tensor_byte_size+0x28>)
 800841a:	4003      	ands	r3, r0
 800841c:	68c9      	ldr	r1, [r1, #12]
 800841e:	68e0      	ldr	r0, [r4, #12]
 8008420:	4293      	cmp	r3, r2
 8008422:	fb01 f000 	mul.w	r0, r1, r0
 8008426:	d101      	bne.n	800842c <get_tensor_byte_size+0x20>
 8008428:	3007      	adds	r0, #7
 800842a:	08c0      	lsrs	r0, r0, #3
 800842c:	bc30      	pop	{r4, r5}
 800842e:	4770      	bx	lr
 8008430:	017fffff 	.word	0x017fffff
 8008434:	000400c0 	.word	0x000400c0

08008438 <ai_array_to_buffer_fmt>:
 8008438:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800843c:	2b02      	cmp	r3, #2
 800843e:	d050      	beq.n	80084e2 <ai_array_to_buffer_fmt+0xaa>
 8008440:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8008444:	4b29      	ldr	r3, [pc, #164]	; (80084ec <ai_array_to_buffer_fmt+0xb4>)
 8008446:	429a      	cmp	r2, r3
 8008448:	d00b      	beq.n	8008462 <ai_array_to_buffer_fmt+0x2a>
 800844a:	dc1c      	bgt.n	8008486 <ai_array_to_buffer_fmt+0x4e>
 800844c:	4b28      	ldr	r3, [pc, #160]	; (80084f0 <ai_array_to_buffer_fmt+0xb8>)
 800844e:	429a      	cmp	r2, r3
 8008450:	d007      	beq.n	8008462 <ai_array_to_buffer_fmt+0x2a>
 8008452:	dd0b      	ble.n	800846c <ai_array_to_buffer_fmt+0x34>
 8008454:	4b27      	ldr	r3, [pc, #156]	; (80084f4 <ai_array_to_buffer_fmt+0xbc>)
 8008456:	429a      	cmp	r2, r3
 8008458:	d003      	beq.n	8008462 <ai_array_to_buffer_fmt+0x2a>
 800845a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800845e:	429a      	cmp	r2, r3
 8008460:	d131      	bne.n	80084c6 <ai_array_to_buffer_fmt+0x8e>
 8008462:	4613      	mov	r3, r2
 8008464:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008468:	4318      	orrs	r0, r3
 800846a:	4770      	bx	lr
 800846c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008470:	429a      	cmp	r2, r3
 8008472:	d0f6      	beq.n	8008462 <ai_array_to_buffer_fmt+0x2a>
 8008474:	dd2c      	ble.n	80084d0 <ai_array_to_buffer_fmt+0x98>
 8008476:	4b20      	ldr	r3, [pc, #128]	; (80084f8 <ai_array_to_buffer_fmt+0xc0>)
 8008478:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800847c:	429a      	cmp	r2, r3
 800847e:	bf18      	it	ne
 8008480:	2340      	movne	r3, #64	; 0x40
 8008482:	4318      	orrs	r0, r3
 8008484:	4770      	bx	lr
 8008486:	4b1d      	ldr	r3, [pc, #116]	; (80084fc <ai_array_to_buffer_fmt+0xc4>)
 8008488:	429a      	cmp	r2, r3
 800848a:	d0ea      	beq.n	8008462 <ai_array_to_buffer_fmt+0x2a>
 800848c:	dd0e      	ble.n	80084ac <ai_array_to_buffer_fmt+0x74>
 800848e:	4b1c      	ldr	r3, [pc, #112]	; (8008500 <ai_array_to_buffer_fmt+0xc8>)
 8008490:	429a      	cmp	r2, r3
 8008492:	d0e6      	beq.n	8008462 <ai_array_to_buffer_fmt+0x2a>
 8008494:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8008498:	429a      	cmp	r2, r3
 800849a:	d0e2      	beq.n	8008462 <ai_array_to_buffer_fmt+0x2a>
 800849c:	4b19      	ldr	r3, [pc, #100]	; (8008504 <ai_array_to_buffer_fmt+0xcc>)
 800849e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80084a2:	429a      	cmp	r2, r3
 80084a4:	bf18      	it	ne
 80084a6:	2340      	movne	r3, #64	; 0x40
 80084a8:	4318      	orrs	r0, r3
 80084aa:	4770      	bx	lr
 80084ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d0d6      	beq.n	8008462 <ai_array_to_buffer_fmt+0x2a>
 80084b4:	3307      	adds	r3, #7
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d0d3      	beq.n	8008462 <ai_array_to_buffer_fmt+0x2a>
 80084ba:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80084be:	429a      	cmp	r2, r3
 80084c0:	bf18      	it	ne
 80084c2:	2340      	movne	r3, #64	; 0x40
 80084c4:	e7ce      	b.n	8008464 <ai_array_to_buffer_fmt+0x2c>
 80084c6:	4b10      	ldr	r3, [pc, #64]	; (8008508 <ai_array_to_buffer_fmt+0xd0>)
 80084c8:	429a      	cmp	r2, r3
 80084ca:	bf18      	it	ne
 80084cc:	2340      	movne	r3, #64	; 0x40
 80084ce:	e7c9      	b.n	8008464 <ai_array_to_buffer_fmt+0x2c>
 80084d0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d0c4      	beq.n	8008462 <ai_array_to_buffer_fmt+0x2a>
 80084d8:	3380      	adds	r3, #128	; 0x80
 80084da:	429a      	cmp	r2, r3
 80084dc:	bf18      	it	ne
 80084de:	2340      	movne	r3, #64	; 0x40
 80084e0:	e7c0      	b.n	8008464 <ai_array_to_buffer_fmt+0x2c>
 80084e2:	4b0a      	ldr	r3, [pc, #40]	; (800850c <ai_array_to_buffer_fmt+0xd4>)
 80084e4:	4003      	ands	r3, r0
 80084e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084ea:	e7bb      	b.n	8008464 <ai_array_to_buffer_fmt+0x2c>
 80084ec:	00840040 	.word	0x00840040
 80084f0:	00040840 	.word	0x00040840
 80084f4:	00041040 	.word	0x00041040
 80084f8:	00040447 	.word	0x00040447
 80084fc:	00840840 	.word	0x00840840
 8008500:	00841040 	.word	0x00841040
 8008504:	0084084f 	.word	0x0084084f
 8008508:	0004084f 	.word	0x0004084f
 800850c:	00803fff 	.word	0x00803fff

08008510 <ai_array_get_byte_size>:
 8008510:	b319      	cbz	r1, 800855a <ai_array_get_byte_size+0x4a>
 8008512:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008516:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800851a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800851e:	11c0      	asrs	r0, r0, #7
 8008520:	fb03 f101 	mul.w	r1, r3, r1
 8008524:	2a04      	cmp	r2, #4
 8008526:	f101 0107 	add.w	r1, r1, #7
 800852a:	f021 0107 	bic.w	r1, r1, #7
 800852e:	fa21 f10c 	lsr.w	r1, r1, ip
 8008532:	d00b      	beq.n	800854c <ai_array_get_byte_size+0x3c>
 8008534:	2a08      	cmp	r2, #8
 8008536:	d002      	beq.n	800853e <ai_array_get_byte_size+0x2e>
 8008538:	3107      	adds	r1, #7
 800853a:	08c8      	lsrs	r0, r1, #3
 800853c:	4770      	bx	lr
 800853e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008542:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008546:	3107      	adds	r1, #7
 8008548:	08c8      	lsrs	r0, r1, #3
 800854a:	4770      	bx	lr
 800854c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008550:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008554:	3107      	adds	r1, #7
 8008556:	08c8      	lsrs	r0, r1, #3
 8008558:	4770      	bx	lr
 800855a:	4608      	mov	r0, r1
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop

08008560 <ai_array_get_data_byte_size>:
 8008560:	b161      	cbz	r1, 800857c <ai_array_get_data_byte_size+0x1c>
 8008562:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008566:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800856a:	fb03 f101 	mul.w	r1, r3, r1
 800856e:	1dc8      	adds	r0, r1, #7
 8008570:	f020 0007 	bic.w	r0, r0, #7
 8008574:	40d0      	lsrs	r0, r2
 8008576:	3007      	adds	r0, #7
 8008578:	08c0      	lsrs	r0, r0, #3
 800857a:	4770      	bx	lr
 800857c:	4608      	mov	r0, r1
 800857e:	4770      	bx	lr

08008580 <ai_buffer_get_size>:
 8008580:	b368      	cbz	r0, 80085de <ai_buffer_get_size+0x5e>
 8008582:	4b17      	ldr	r3, [pc, #92]	; (80085e0 <ai_buffer_get_size+0x60>)
 8008584:	4a17      	ldr	r2, [pc, #92]	; (80085e4 <ai_buffer_get_size+0x64>)
 8008586:	b410      	push	{r4}
 8008588:	6804      	ldr	r4, [r0, #0]
 800858a:	4023      	ands	r3, r4
 800858c:	4293      	cmp	r3, r2
 800858e:	d123      	bne.n	80085d8 <ai_buffer_get_size+0x58>
 8008590:	b311      	cbz	r1, 80085d8 <ai_buffer_get_size+0x58>
 8008592:	6984      	ldr	r4, [r0, #24]
 8008594:	6862      	ldr	r2, [r4, #4]
 8008596:	321f      	adds	r2, #31
 8008598:	f022 021f 	bic.w	r2, r2, #31
 800859c:	7d03      	ldrb	r3, [r0, #20]
 800859e:	6941      	ldr	r1, [r0, #20]
 80085a0:	f1a3 0301 	sub.w	r3, r3, #1
 80085a4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80085a8:	fab3 f383 	clz	r3, r3
 80085ac:	095b      	lsrs	r3, r3, #5
 80085ae:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80085b2:	da0c      	bge.n	80085ce <ai_buffer_get_size+0x4e>
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d103      	bne.n	80085c0 <ai_buffer_get_size+0x40>
 80085b8:	2802      	cmp	r0, #2
 80085ba:	f04f 0302 	mov.w	r3, #2
 80085be:	d006      	beq.n	80085ce <ai_buffer_get_size+0x4e>
 80085c0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80085c4:	3301      	adds	r3, #1
 80085c6:	4298      	cmp	r0, r3
 80085c8:	fb01 f202 	mul.w	r2, r1, r2
 80085cc:	d1f2      	bne.n	80085b4 <ai_buffer_get_size+0x34>
 80085ce:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80085d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	6984      	ldr	r4, [r0, #24]
 80085da:	6862      	ldr	r2, [r4, #4]
 80085dc:	e7de      	b.n	800859c <ai_buffer_get_size+0x1c>
 80085de:	4770      	bx	lr
 80085e0:	017fffff 	.word	0x017fffff
 80085e4:	000400c0 	.word	0x000400c0

080085e8 <ai_buffer_get_byte_size>:
 80085e8:	b128      	cbz	r0, 80085f6 <ai_buffer_get_byte_size+0xe>
 80085ea:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 80085ee:	fb01 f000 	mul.w	r0, r1, r0
 80085f2:	3007      	adds	r0, #7
 80085f4:	08c0      	lsrs	r0, r0, #3
 80085f6:	4770      	bx	lr

080085f8 <ai_buffer_array_sane>:
 80085f8:	b138      	cbz	r0, 800860a <ai_buffer_array_sane+0x12>
 80085fa:	6843      	ldr	r3, [r0, #4]
 80085fc:	b123      	cbz	r3, 8008608 <ai_buffer_array_sane+0x10>
 80085fe:	8840      	ldrh	r0, [r0, #2]
 8008600:	3800      	subs	r0, #0
 8008602:	bf18      	it	ne
 8008604:	2001      	movne	r0, #1
 8008606:	4770      	bx	lr
 8008608:	4618      	mov	r0, r3
 800860a:	4770      	bx	lr

0800860c <ai_buffer_array_item_set_address>:
 800860c:	b150      	cbz	r0, 8008624 <ai_buffer_array_item_set_address+0x18>
 800860e:	6843      	ldr	r3, [r0, #4]
 8008610:	b14b      	cbz	r3, 8008626 <ai_buffer_array_item_set_address+0x1a>
 8008612:	8840      	ldrh	r0, [r0, #2]
 8008614:	b900      	cbnz	r0, 8008618 <ai_buffer_array_item_set_address+0xc>
 8008616:	4770      	bx	lr
 8008618:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800861c:	2001      	movs	r0, #1
 800861e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008622:	604a      	str	r2, [r1, #4]
 8008624:	4770      	bx	lr
 8008626:	4618      	mov	r0, r3
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop

0800862c <_platform_observer_node_exec_cb>:
 800862c:	2a00      	cmp	r2, #0
 800862e:	d06c      	beq.n	800870a <_platform_observer_node_exec_cb+0xde>
 8008630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008634:	6815      	ldr	r5, [r2, #0]
 8008636:	b085      	sub	sp, #20
 8008638:	4614      	mov	r4, r2
 800863a:	2d00      	cmp	r5, #0
 800863c:	d067      	beq.n	800870e <_platform_observer_node_exec_cb+0xe2>
 800863e:	8993      	ldrh	r3, [r2, #12]
 8008640:	f240 2c02 	movw	ip, #514	; 0x202
 8008644:	89d2      	ldrh	r2, [r2, #14]
 8008646:	460e      	mov	r6, r1
 8008648:	2b00      	cmp	r3, #0
 800864a:	f240 3102 	movw	r1, #770	; 0x302
 800864e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008652:	f240 3e01 	movw	lr, #769	; 0x301
 8008656:	bf18      	it	ne
 8008658:	4667      	movne	r7, ip
 800865a:	f240 2c01 	movw	ip, #513	; 0x201
 800865e:	bf0d      	iteet	eq
 8008660:	460f      	moveq	r7, r1
 8008662:	f44f 7901 	movne.w	r9, #516	; 0x204
 8008666:	46e6      	movne	lr, ip
 8008668:	f44f 7941 	moveq.w	r9, #772	; 0x304
 800866c:	f240 1c01 	movw	ip, #257	; 0x101
 8008670:	bf1b      	ittet	ne
 8008672:	f04f 0804 	movne.w	r8, #4
 8008676:	f04f 0c01 	movne.w	ip, #1
 800867a:	f44f 7882 	moveq.w	r8, #260	; 0x104
 800867e:	2102      	movne	r1, #2
 8008680:	bf08      	it	eq
 8008682:	f44f 7181 	moveq.w	r1, #258	; 0x102
 8008686:	429a      	cmp	r2, r3
 8008688:	d013      	beq.n	80086b2 <_platform_observer_node_exec_cb+0x86>
 800868a:	b148      	cbz	r0, 80086a0 <_platform_observer_node_exec_cb+0x74>
 800868c:	2801      	cmp	r0, #1
 800868e:	d042      	beq.n	8008716 <_platform_observer_node_exec_cb+0xea>
 8008690:	2802      	cmp	r0, #2
 8008692:	d025      	beq.n	80086e0 <_platform_observer_node_exec_cb+0xb4>
 8008694:	2803      	cmp	r0, #3
 8008696:	d045      	beq.n	8008724 <_platform_observer_node_exec_cb+0xf8>
 8008698:	2000      	movs	r0, #0
 800869a:	b005      	add	sp, #20
 800869c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086a0:	68a2      	ldr	r2, [r4, #8]
 80086a2:	07d7      	lsls	r7, r2, #31
 80086a4:	d40b      	bmi.n	80086be <_platform_observer_node_exec_cb+0x92>
 80086a6:	3301      	adds	r3, #1
 80086a8:	2000      	movs	r0, #0
 80086aa:	81a3      	strh	r3, [r4, #12]
 80086ac:	b005      	add	sp, #20
 80086ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086b2:	46c8      	mov	r8, r9
 80086b4:	4639      	mov	r1, r7
 80086b6:	46f4      	mov	ip, lr
 80086b8:	2800      	cmp	r0, #0
 80086ba:	d1e7      	bne.n	800868c <_platform_observer_node_exec_cb+0x60>
 80086bc:	e7f0      	b.n	80086a0 <_platform_observer_node_exec_cb+0x74>
 80086be:	f8ad 3000 	strh.w	r3, [sp]
 80086c2:	466a      	mov	r2, sp
 80086c4:	8873      	ldrh	r3, [r6, #2]
 80086c6:	4661      	mov	r1, ip
 80086c8:	9002      	str	r0, [sp, #8]
 80086ca:	f8ad 3004 	strh.w	r3, [sp, #4]
 80086ce:	8833      	ldrh	r3, [r6, #0]
 80086d0:	6860      	ldr	r0, [r4, #4]
 80086d2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80086d6:	69b3      	ldr	r3, [r6, #24]
 80086d8:	9303      	str	r3, [sp, #12]
 80086da:	47a8      	blx	r5
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	e7e2      	b.n	80086a6 <_platform_observer_node_exec_cb+0x7a>
 80086e0:	68a2      	ldr	r2, [r4, #8]
 80086e2:	6126      	str	r6, [r4, #16]
 80086e4:	0790      	lsls	r0, r2, #30
 80086e6:	d5d7      	bpl.n	8008698 <_platform_observer_node_exec_cb+0x6c>
 80086e8:	f8ad 3000 	strh.w	r3, [sp]
 80086ec:	8873      	ldrh	r3, [r6, #2]
 80086ee:	8832      	ldrh	r2, [r6, #0]
 80086f0:	6860      	ldr	r0, [r4, #4]
 80086f2:	2400      	movs	r4, #0
 80086f4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80086f8:	69b3      	ldr	r3, [r6, #24]
 80086fa:	f8ad 2002 	strh.w	r2, [sp, #2]
 80086fe:	466a      	mov	r2, sp
 8008700:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8008704:	47a8      	blx	r5
 8008706:	4620      	mov	r0, r4
 8008708:	e7d0      	b.n	80086ac <_platform_observer_node_exec_cb+0x80>
 800870a:	2001      	movs	r0, #1
 800870c:	4770      	bx	lr
 800870e:	2001      	movs	r0, #1
 8008710:	b005      	add	sp, #20
 8008712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008716:	2300      	movs	r3, #0
 8008718:	6126      	str	r6, [r4, #16]
 800871a:	4618      	mov	r0, r3
 800871c:	81a3      	strh	r3, [r4, #12]
 800871e:	b005      	add	sp, #20
 8008720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008724:	68a2      	ldr	r2, [r4, #8]
 8008726:	0752      	lsls	r2, r2, #29
 8008728:	d5bd      	bpl.n	80086a6 <_platform_observer_node_exec_cb+0x7a>
 800872a:	6922      	ldr	r2, [r4, #16]
 800872c:	2000      	movs	r0, #0
 800872e:	f8ad 3000 	strh.w	r3, [sp]
 8008732:	4641      	mov	r1, r8
 8008734:	8853      	ldrh	r3, [r2, #2]
 8008736:	f8ad 3004 	strh.w	r3, [sp, #4]
 800873a:	8813      	ldrh	r3, [r2, #0]
 800873c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8008740:	6993      	ldr	r3, [r2, #24]
 8008742:	466a      	mov	r2, sp
 8008744:	9002      	str	r0, [sp, #8]
 8008746:	9303      	str	r3, [sp, #12]
 8008748:	6860      	ldr	r0, [r4, #4]
 800874a:	47a8      	blx	r5
 800874c:	89a3      	ldrh	r3, [r4, #12]
 800874e:	e7aa      	b.n	80086a6 <_platform_observer_node_exec_cb+0x7a>

08008750 <_ai_platform_acquire_crc>:
 8008750:	2001      	movs	r0, #1
 8008752:	4770      	bx	lr

08008754 <_ai_platform_release_crc>:
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop

08008758 <ai_platform_get_weights_map>:
 8008758:	2900      	cmp	r1, #0
 800875a:	bf18      	it	ne
 800875c:	2800      	cmpne	r0, #0
 800875e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008760:	bf0c      	ite	eq
 8008762:	2401      	moveq	r4, #1
 8008764:	2400      	movne	r4, #0
 8008766:	2a00      	cmp	r2, #0
 8008768:	bf08      	it	eq
 800876a:	f044 0401 	orreq.w	r4, r4, #1
 800876e:	b114      	cbz	r4, 8008776 <ai_platform_get_weights_map+0x1e>
 8008770:	2400      	movs	r4, #0
 8008772:	4620      	mov	r0, r4
 8008774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008776:	4616      	mov	r6, r2
 8008778:	4b22      	ldr	r3, [pc, #136]	; (8008804 <ai_platform_get_weights_map+0xac>)
 800877a:	6812      	ldr	r2, [r2, #0]
 800877c:	4605      	mov	r5, r0
 800877e:	460f      	mov	r7, r1
 8008780:	429a      	cmp	r2, r3
 8008782:	d022      	beq.n	80087ca <ai_platform_get_weights_map+0x72>
 8008784:	6870      	ldr	r0, [r6, #4]
 8008786:	2800      	cmp	r0, #0
 8008788:	d0f2      	beq.n	8008770 <ai_platform_get_weights_map+0x18>
 800878a:	6806      	ldr	r6, [r0, #0]
 800878c:	429e      	cmp	r6, r3
 800878e:	d006      	beq.n	800879e <ai_platform_get_weights_map+0x46>
 8008790:	f1a1 0401 	sub.w	r4, r1, #1
 8008794:	6028      	str	r0, [r5, #0]
 8008796:	fab4 f484 	clz	r4, r4
 800879a:	0964      	lsrs	r4, r4, #5
 800879c:	e7e9      	b.n	8008772 <ai_platform_get_weights_map+0x1a>
 800879e:	3d04      	subs	r5, #4
 80087a0:	4602      	mov	r2, r0
 80087a2:	4621      	mov	r1, r4
 80087a4:	e000      	b.n	80087a8 <ai_platform_get_weights_map+0x50>
 80087a6:	4619      	mov	r1, r3
 80087a8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80087ac:	42b3      	cmp	r3, r6
 80087ae:	d025      	beq.n	80087fc <ai_platform_get_weights_map+0xa4>
 80087b0:	f845 3f04 	str.w	r3, [r5, #4]!
 80087b4:	1c4b      	adds	r3, r1, #1
 80087b6:	429f      	cmp	r7, r3
 80087b8:	d8f5      	bhi.n	80087a6 <ai_platform_get_weights_map+0x4e>
 80087ba:	d1da      	bne.n	8008772 <ai_platform_get_weights_map+0x1a>
 80087bc:	3102      	adds	r1, #2
 80087be:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80087c2:	42b3      	cmp	r3, r6
 80087c4:	d1d5      	bne.n	8008772 <ai_platform_get_weights_map+0x1a>
 80087c6:	2401      	movs	r4, #1
 80087c8:	e7d3      	b.n	8008772 <ai_platform_get_weights_map+0x1a>
 80087ca:	1d30      	adds	r0, r6, #4
 80087cc:	f7ff ff14 	bl	80085f8 <ai_buffer_array_sane>
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d0cd      	beq.n	8008770 <ai_platform_get_weights_map+0x18>
 80087d4:	88f3      	ldrh	r3, [r6, #6]
 80087d6:	429f      	cmp	r7, r3
 80087d8:	d1ca      	bne.n	8008770 <ai_platform_get_weights_map+0x18>
 80087da:	3d04      	subs	r5, #4
 80087dc:	4622      	mov	r2, r4
 80087de:	68b3      	ldr	r3, [r6, #8]
 80087e0:	4423      	add	r3, r4
 80087e2:	341c      	adds	r4, #28
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	b123      	cbz	r3, 80087f2 <ai_platform_get_weights_map+0x9a>
 80087e8:	3201      	adds	r2, #1
 80087ea:	f845 3f04 	str.w	r3, [r5, #4]!
 80087ee:	4297      	cmp	r7, r2
 80087f0:	d8f5      	bhi.n	80087de <ai_platform_get_weights_map+0x86>
 80087f2:	1abc      	subs	r4, r7, r2
 80087f4:	fab4 f484 	clz	r4, r4
 80087f8:	0964      	lsrs	r4, r4, #5
 80087fa:	e7ba      	b.n	8008772 <ai_platform_get_weights_map+0x1a>
 80087fc:	428f      	cmp	r7, r1
 80087fe:	d1b8      	bne.n	8008772 <ai_platform_get_weights_map+0x1a>
 8008800:	e7e1      	b.n	80087c6 <ai_platform_get_weights_map+0x6e>
 8008802:	bf00      	nop
 8008804:	a1facade 	.word	0xa1facade

08008808 <ai_platform_get_activations_map>:
 8008808:	2900      	cmp	r1, #0
 800880a:	bf18      	it	ne
 800880c:	2800      	cmpne	r0, #0
 800880e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008810:	bf0c      	ite	eq
 8008812:	2401      	moveq	r4, #1
 8008814:	2400      	movne	r4, #0
 8008816:	2a00      	cmp	r2, #0
 8008818:	bf08      	it	eq
 800881a:	f044 0401 	orreq.w	r4, r4, #1
 800881e:	b114      	cbz	r4, 8008826 <ai_platform_get_activations_map+0x1e>
 8008820:	2400      	movs	r4, #0
 8008822:	4620      	mov	r0, r4
 8008824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008826:	4616      	mov	r6, r2
 8008828:	4b22      	ldr	r3, [pc, #136]	; (80088b4 <ai_platform_get_activations_map+0xac>)
 800882a:	6812      	ldr	r2, [r2, #0]
 800882c:	4605      	mov	r5, r0
 800882e:	460f      	mov	r7, r1
 8008830:	429a      	cmp	r2, r3
 8008832:	d022      	beq.n	800887a <ai_platform_get_activations_map+0x72>
 8008834:	6a30      	ldr	r0, [r6, #32]
 8008836:	2800      	cmp	r0, #0
 8008838:	d0f2      	beq.n	8008820 <ai_platform_get_activations_map+0x18>
 800883a:	6806      	ldr	r6, [r0, #0]
 800883c:	429e      	cmp	r6, r3
 800883e:	d006      	beq.n	800884e <ai_platform_get_activations_map+0x46>
 8008840:	f1a1 0401 	sub.w	r4, r1, #1
 8008844:	6028      	str	r0, [r5, #0]
 8008846:	fab4 f484 	clz	r4, r4
 800884a:	0964      	lsrs	r4, r4, #5
 800884c:	e7e9      	b.n	8008822 <ai_platform_get_activations_map+0x1a>
 800884e:	3d04      	subs	r5, #4
 8008850:	4602      	mov	r2, r0
 8008852:	4621      	mov	r1, r4
 8008854:	e000      	b.n	8008858 <ai_platform_get_activations_map+0x50>
 8008856:	4619      	mov	r1, r3
 8008858:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800885c:	42b3      	cmp	r3, r6
 800885e:	d026      	beq.n	80088ae <ai_platform_get_activations_map+0xa6>
 8008860:	f845 3f04 	str.w	r3, [r5, #4]!
 8008864:	1c4b      	adds	r3, r1, #1
 8008866:	429f      	cmp	r7, r3
 8008868:	d8f5      	bhi.n	8008856 <ai_platform_get_activations_map+0x4e>
 800886a:	d1da      	bne.n	8008822 <ai_platform_get_activations_map+0x1a>
 800886c:	3102      	adds	r1, #2
 800886e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8008872:	42b3      	cmp	r3, r6
 8008874:	d1d5      	bne.n	8008822 <ai_platform_get_activations_map+0x1a>
 8008876:	2401      	movs	r4, #1
 8008878:	e7d3      	b.n	8008822 <ai_platform_get_activations_map+0x1a>
 800887a:	f106 000c 	add.w	r0, r6, #12
 800887e:	f7ff febb 	bl	80085f8 <ai_buffer_array_sane>
 8008882:	2800      	cmp	r0, #0
 8008884:	d0cc      	beq.n	8008820 <ai_platform_get_activations_map+0x18>
 8008886:	89f3      	ldrh	r3, [r6, #14]
 8008888:	429f      	cmp	r7, r3
 800888a:	d1c9      	bne.n	8008820 <ai_platform_get_activations_map+0x18>
 800888c:	3d04      	subs	r5, #4
 800888e:	4622      	mov	r2, r4
 8008890:	6933      	ldr	r3, [r6, #16]
 8008892:	4423      	add	r3, r4
 8008894:	341c      	adds	r4, #28
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	b123      	cbz	r3, 80088a4 <ai_platform_get_activations_map+0x9c>
 800889a:	3201      	adds	r2, #1
 800889c:	f845 3f04 	str.w	r3, [r5, #4]!
 80088a0:	4297      	cmp	r7, r2
 80088a2:	d8f5      	bhi.n	8008890 <ai_platform_get_activations_map+0x88>
 80088a4:	1abc      	subs	r4, r7, r2
 80088a6:	fab4 f484 	clz	r4, r4
 80088aa:	0964      	lsrs	r4, r4, #5
 80088ac:	e7b9      	b.n	8008822 <ai_platform_get_activations_map+0x1a>
 80088ae:	428f      	cmp	r7, r1
 80088b0:	d1b7      	bne.n	8008822 <ai_platform_get_activations_map+0x1a>
 80088b2:	e7e0      	b.n	8008876 <ai_platform_get_activations_map+0x6e>
 80088b4:	a1facade 	.word	0xa1facade

080088b8 <ai_platform_bind_network_params>:
 80088b8:	2a00      	cmp	r2, #0
 80088ba:	bf18      	it	ne
 80088bc:	2900      	cmpne	r1, #0
 80088be:	d010      	beq.n	80088e2 <ai_platform_bind_network_params+0x2a>
 80088c0:	b178      	cbz	r0, 80088e2 <ai_platform_bind_network_params+0x2a>
 80088c2:	4603      	mov	r3, r0
 80088c4:	4808      	ldr	r0, [pc, #32]	; (80088e8 <ai_platform_bind_network_params+0x30>)
 80088c6:	f103 0c0c 	add.w	ip, r3, #12
 80088ca:	f843 0b04 	str.w	r0, [r3], #4
 80088ce:	c903      	ldmia	r1, {r0, r1}
 80088d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80088d4:	2301      	movs	r3, #1
 80088d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088da:	e88c 0003 	stmia.w	ip, {r0, r1}
 80088de:	4618      	mov	r0, r3
 80088e0:	4770      	bx	lr
 80088e2:	2300      	movs	r3, #0
 80088e4:	4618      	mov	r0, r3
 80088e6:	4770      	bx	lr
 80088e8:	a1facade 	.word	0xa1facade

080088ec <ai_platform_runtime_get_revision>:
 80088ec:	b508      	push	{r3, lr}
 80088ee:	f7ff ff2f 	bl	8008750 <_ai_platform_acquire_crc>
 80088f2:	4b39      	ldr	r3, [pc, #228]	; (80089d8 <ai_platform_runtime_get_revision+0xec>)
 80088f4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088fe:	189a      	adds	r2, r3, r2
 8008900:	2a01      	cmp	r2, #1
 8008902:	d929      	bls.n	8008958 <ai_platform_runtime_get_revision+0x6c>
 8008904:	f240 4249 	movw	r2, #1097	; 0x449
 8008908:	4293      	cmp	r3, r2
 800890a:	d025      	beq.n	8008958 <ai_platform_runtime_get_revision+0x6c>
 800890c:	4a33      	ldr	r2, [pc, #204]	; (80089dc <ai_platform_runtime_get_revision+0xf0>)
 800890e:	6813      	ldr	r3, [r2, #0]
 8008910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008914:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008918:	d02b      	beq.n	8008972 <ai_platform_runtime_get_revision+0x86>
 800891a:	6813      	ldr	r3, [r2, #0]
 800891c:	f240 4183 	movw	r1, #1155	; 0x483
 8008920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008924:	428b      	cmp	r3, r1
 8008926:	d046      	beq.n	80089b6 <ai_platform_runtime_get_revision+0xca>
 8008928:	6813      	ldr	r3, [r2, #0]
 800892a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800892e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008932:	d032      	beq.n	800899a <ai_platform_runtime_get_revision+0xae>
 8008934:	6813      	ldr	r3, [r2, #0]
 8008936:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800893a:	2b00      	cmp	r3, #0
 800893c:	d129      	bne.n	8008992 <ai_platform_runtime_get_revision+0xa6>
 800893e:	4a28      	ldr	r2, [pc, #160]	; (80089e0 <ai_platform_runtime_get_revision+0xf4>)
 8008940:	2301      	movs	r3, #1
 8008942:	6093      	str	r3, [r2, #8]
 8008944:	6893      	ldr	r3, [r2, #8]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d1fc      	bne.n	8008944 <ai_platform_runtime_get_revision+0x58>
 800894a:	4926      	ldr	r1, [pc, #152]	; (80089e4 <ai_platform_runtime_get_revision+0xf8>)
 800894c:	4b26      	ldr	r3, [pc, #152]	; (80089e8 <ai_platform_runtime_get_revision+0xfc>)
 800894e:	6011      	str	r1, [r2, #0]
 8008950:	6812      	ldr	r2, [r2, #0]
 8008952:	429a      	cmp	r2, r3
 8008954:	d01d      	beq.n	8008992 <ai_platform_runtime_get_revision+0xa6>
 8008956:	e7fe      	b.n	8008956 <ai_platform_runtime_get_revision+0x6a>
 8008958:	4a21      	ldr	r2, [pc, #132]	; (80089e0 <ai_platform_runtime_get_revision+0xf4>)
 800895a:	2301      	movs	r3, #1
 800895c:	6093      	str	r3, [r2, #8]
 800895e:	6893      	ldr	r3, [r2, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1fc      	bne.n	800895e <ai_platform_runtime_get_revision+0x72>
 8008964:	491f      	ldr	r1, [pc, #124]	; (80089e4 <ai_platform_runtime_get_revision+0xf8>)
 8008966:	4b20      	ldr	r3, [pc, #128]	; (80089e8 <ai_platform_runtime_get_revision+0xfc>)
 8008968:	6011      	str	r1, [r2, #0]
 800896a:	6812      	ldr	r2, [r2, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	d010      	beq.n	8008992 <ai_platform_runtime_get_revision+0xa6>
 8008970:	e7fe      	b.n	8008970 <ai_platform_runtime_get_revision+0x84>
 8008972:	4a1e      	ldr	r2, [pc, #120]	; (80089ec <ai_platform_runtime_get_revision+0x100>)
 8008974:	2301      	movs	r3, #1
 8008976:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800897a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1fb      	bne.n	800897a <ai_platform_runtime_get_revision+0x8e>
 8008982:	4918      	ldr	r1, [pc, #96]	; (80089e4 <ai_platform_runtime_get_revision+0xf8>)
 8008984:	4b18      	ldr	r3, [pc, #96]	; (80089e8 <ai_platform_runtime_get_revision+0xfc>)
 8008986:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800898a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800898e:	429a      	cmp	r2, r3
 8008990:	d110      	bne.n	80089b4 <ai_platform_runtime_get_revision+0xc8>
 8008992:	f7ff fedf 	bl	8008754 <_ai_platform_release_crc>
 8008996:	4816      	ldr	r0, [pc, #88]	; (80089f0 <ai_platform_runtime_get_revision+0x104>)
 8008998:	bd08      	pop	{r3, pc}
 800899a:	4a11      	ldr	r2, [pc, #68]	; (80089e0 <ai_platform_runtime_get_revision+0xf4>)
 800899c:	2301      	movs	r3, #1
 800899e:	6093      	str	r3, [r2, #8]
 80089a0:	6893      	ldr	r3, [r2, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1fc      	bne.n	80089a0 <ai_platform_runtime_get_revision+0xb4>
 80089a6:	490f      	ldr	r1, [pc, #60]	; (80089e4 <ai_platform_runtime_get_revision+0xf8>)
 80089a8:	4b0f      	ldr	r3, [pc, #60]	; (80089e8 <ai_platform_runtime_get_revision+0xfc>)
 80089aa:	6011      	str	r1, [r2, #0]
 80089ac:	6812      	ldr	r2, [r2, #0]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d0ef      	beq.n	8008992 <ai_platform_runtime_get_revision+0xa6>
 80089b2:	e7fe      	b.n	80089b2 <ai_platform_runtime_get_revision+0xc6>
 80089b4:	e7fe      	b.n	80089b4 <ai_platform_runtime_get_revision+0xc8>
 80089b6:	4a0d      	ldr	r2, [pc, #52]	; (80089ec <ai_platform_runtime_get_revision+0x100>)
 80089b8:	2301      	movs	r3, #1
 80089ba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80089be:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1fb      	bne.n	80089be <ai_platform_runtime_get_revision+0xd2>
 80089c6:	4907      	ldr	r1, [pc, #28]	; (80089e4 <ai_platform_runtime_get_revision+0xf8>)
 80089c8:	4b07      	ldr	r3, [pc, #28]	; (80089e8 <ai_platform_runtime_get_revision+0xfc>)
 80089ca:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80089ce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d0dd      	beq.n	8008992 <ai_platform_runtime_get_revision+0xa6>
 80089d6:	e7fe      	b.n	80089d6 <ai_platform_runtime_get_revision+0xea>
 80089d8:	e0042000 	.word	0xe0042000
 80089dc:	5c001000 	.word	0x5c001000
 80089e0:	40023000 	.word	0x40023000
 80089e4:	f407a5c2 	.word	0xf407a5c2
 80089e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80089ec:	58024000 	.word	0x58024000
 80089f0:	0806f7f4 	.word	0x0806f7f4

080089f4 <ai_platform_runtime_get_version>:
 80089f4:	b500      	push	{lr}
 80089f6:	b083      	sub	sp, #12
 80089f8:	f7ff feaa 	bl	8008750 <_ai_platform_acquire_crc>
 80089fc:	4b42      	ldr	r3, [pc, #264]	; (8008b08 <ai_platform_runtime_get_version+0x114>)
 80089fe:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a08:	189a      	adds	r2, r3, r2
 8008a0a:	2a01      	cmp	r2, #1
 8008a0c:	d929      	bls.n	8008a62 <ai_platform_runtime_get_version+0x6e>
 8008a0e:	f240 4249 	movw	r2, #1097	; 0x449
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d025      	beq.n	8008a62 <ai_platform_runtime_get_version+0x6e>
 8008a16:	4a3d      	ldr	r2, [pc, #244]	; (8008b0c <ai_platform_runtime_get_version+0x118>)
 8008a18:	6813      	ldr	r3, [r2, #0]
 8008a1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a1e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008a22:	d02b      	beq.n	8008a7c <ai_platform_runtime_get_version+0x88>
 8008a24:	6813      	ldr	r3, [r2, #0]
 8008a26:	f240 4183 	movw	r1, #1155	; 0x483
 8008a2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a2e:	428b      	cmp	r3, r1
 8008a30:	d059      	beq.n	8008ae6 <ai_platform_runtime_get_version+0xf2>
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a38:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008a3c:	d045      	beq.n	8008aca <ai_platform_runtime_get_version+0xd6>
 8008a3e:	6813      	ldr	r3, [r2, #0]
 8008a40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d129      	bne.n	8008a9c <ai_platform_runtime_get_version+0xa8>
 8008a48:	4a31      	ldr	r2, [pc, #196]	; (8008b10 <ai_platform_runtime_get_version+0x11c>)
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	6093      	str	r3, [r2, #8]
 8008a4e:	6893      	ldr	r3, [r2, #8]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1fc      	bne.n	8008a4e <ai_platform_runtime_get_version+0x5a>
 8008a54:	492f      	ldr	r1, [pc, #188]	; (8008b14 <ai_platform_runtime_get_version+0x120>)
 8008a56:	4b30      	ldr	r3, [pc, #192]	; (8008b18 <ai_platform_runtime_get_version+0x124>)
 8008a58:	6011      	str	r1, [r2, #0]
 8008a5a:	6812      	ldr	r2, [r2, #0]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d01d      	beq.n	8008a9c <ai_platform_runtime_get_version+0xa8>
 8008a60:	e7fe      	b.n	8008a60 <ai_platform_runtime_get_version+0x6c>
 8008a62:	4a2b      	ldr	r2, [pc, #172]	; (8008b10 <ai_platform_runtime_get_version+0x11c>)
 8008a64:	2301      	movs	r3, #1
 8008a66:	6093      	str	r3, [r2, #8]
 8008a68:	6893      	ldr	r3, [r2, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1fc      	bne.n	8008a68 <ai_platform_runtime_get_version+0x74>
 8008a6e:	4929      	ldr	r1, [pc, #164]	; (8008b14 <ai_platform_runtime_get_version+0x120>)
 8008a70:	4b29      	ldr	r3, [pc, #164]	; (8008b18 <ai_platform_runtime_get_version+0x124>)
 8008a72:	6011      	str	r1, [r2, #0]
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d010      	beq.n	8008a9c <ai_platform_runtime_get_version+0xa8>
 8008a7a:	e7fe      	b.n	8008a7a <ai_platform_runtime_get_version+0x86>
 8008a7c:	4a27      	ldr	r2, [pc, #156]	; (8008b1c <ai_platform_runtime_get_version+0x128>)
 8008a7e:	2301      	movs	r3, #1
 8008a80:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008a84:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1fb      	bne.n	8008a84 <ai_platform_runtime_get_version+0x90>
 8008a8c:	4921      	ldr	r1, [pc, #132]	; (8008b14 <ai_platform_runtime_get_version+0x120>)
 8008a8e:	4b22      	ldr	r3, [pc, #136]	; (8008b18 <ai_platform_runtime_get_version+0x124>)
 8008a90:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008a94:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d123      	bne.n	8008ae4 <ai_platform_runtime_get_version+0xf0>
 8008a9c:	f7ff fe5a 	bl	8008754 <_ai_platform_release_crc>
 8008aa0:	4b1f      	ldr	r3, [pc, #124]	; (8008b20 <ai_platform_runtime_get_version+0x12c>)
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	fa5f fc83 	uxtb.w	ip, r3
 8008aaa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008aae:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008ab2:	0e1b      	lsrs	r3, r3, #24
 8008ab4:	f36c 0007 	bfi	r0, ip, #0, #8
 8008ab8:	f361 200f 	bfi	r0, r1, #8, #8
 8008abc:	f362 4017 	bfi	r0, r2, #16, #8
 8008ac0:	f363 601f 	bfi	r0, r3, #24, #8
 8008ac4:	b003      	add	sp, #12
 8008ac6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008aca:	4a11      	ldr	r2, [pc, #68]	; (8008b10 <ai_platform_runtime_get_version+0x11c>)
 8008acc:	2301      	movs	r3, #1
 8008ace:	6093      	str	r3, [r2, #8]
 8008ad0:	6893      	ldr	r3, [r2, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1fc      	bne.n	8008ad0 <ai_platform_runtime_get_version+0xdc>
 8008ad6:	490f      	ldr	r1, [pc, #60]	; (8008b14 <ai_platform_runtime_get_version+0x120>)
 8008ad8:	4b0f      	ldr	r3, [pc, #60]	; (8008b18 <ai_platform_runtime_get_version+0x124>)
 8008ada:	6011      	str	r1, [r2, #0]
 8008adc:	6812      	ldr	r2, [r2, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d0dc      	beq.n	8008a9c <ai_platform_runtime_get_version+0xa8>
 8008ae2:	e7fe      	b.n	8008ae2 <ai_platform_runtime_get_version+0xee>
 8008ae4:	e7fe      	b.n	8008ae4 <ai_platform_runtime_get_version+0xf0>
 8008ae6:	4a0d      	ldr	r2, [pc, #52]	; (8008b1c <ai_platform_runtime_get_version+0x128>)
 8008ae8:	2301      	movs	r3, #1
 8008aea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008aee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1fb      	bne.n	8008aee <ai_platform_runtime_get_version+0xfa>
 8008af6:	4907      	ldr	r1, [pc, #28]	; (8008b14 <ai_platform_runtime_get_version+0x120>)
 8008af8:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <ai_platform_runtime_get_version+0x124>)
 8008afa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008afe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d0ca      	beq.n	8008a9c <ai_platform_runtime_get_version+0xa8>
 8008b06:	e7fe      	b.n	8008b06 <ai_platform_runtime_get_version+0x112>
 8008b08:	e0042000 	.word	0xe0042000
 8008b0c:	5c001000 	.word	0x5c001000
 8008b10:	40023000 	.word	0x40023000
 8008b14:	f407a5c2 	.word	0xf407a5c2
 8008b18:	b5e8b5cd 	.word	0xb5e8b5cd
 8008b1c:	58024000 	.word	0x58024000
 8008b20:	0806f7f8 	.word	0x0806f7f8

08008b24 <ai_platform_api_get_version>:
 8008b24:	b500      	push	{lr}
 8008b26:	b083      	sub	sp, #12
 8008b28:	f7ff fe12 	bl	8008750 <_ai_platform_acquire_crc>
 8008b2c:	4b42      	ldr	r3, [pc, #264]	; (8008c38 <ai_platform_api_get_version+0x114>)
 8008b2e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b38:	189a      	adds	r2, r3, r2
 8008b3a:	2a01      	cmp	r2, #1
 8008b3c:	d929      	bls.n	8008b92 <ai_platform_api_get_version+0x6e>
 8008b3e:	f240 4249 	movw	r2, #1097	; 0x449
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d025      	beq.n	8008b92 <ai_platform_api_get_version+0x6e>
 8008b46:	4a3d      	ldr	r2, [pc, #244]	; (8008c3c <ai_platform_api_get_version+0x118>)
 8008b48:	6813      	ldr	r3, [r2, #0]
 8008b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b4e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008b52:	d02b      	beq.n	8008bac <ai_platform_api_get_version+0x88>
 8008b54:	6813      	ldr	r3, [r2, #0]
 8008b56:	f240 4183 	movw	r1, #1155	; 0x483
 8008b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b5e:	428b      	cmp	r3, r1
 8008b60:	d059      	beq.n	8008c16 <ai_platform_api_get_version+0xf2>
 8008b62:	6813      	ldr	r3, [r2, #0]
 8008b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b68:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008b6c:	d045      	beq.n	8008bfa <ai_platform_api_get_version+0xd6>
 8008b6e:	6813      	ldr	r3, [r2, #0]
 8008b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d129      	bne.n	8008bcc <ai_platform_api_get_version+0xa8>
 8008b78:	4a31      	ldr	r2, [pc, #196]	; (8008c40 <ai_platform_api_get_version+0x11c>)
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	6093      	str	r3, [r2, #8]
 8008b7e:	6893      	ldr	r3, [r2, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1fc      	bne.n	8008b7e <ai_platform_api_get_version+0x5a>
 8008b84:	492f      	ldr	r1, [pc, #188]	; (8008c44 <ai_platform_api_get_version+0x120>)
 8008b86:	4b30      	ldr	r3, [pc, #192]	; (8008c48 <ai_platform_api_get_version+0x124>)
 8008b88:	6011      	str	r1, [r2, #0]
 8008b8a:	6812      	ldr	r2, [r2, #0]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d01d      	beq.n	8008bcc <ai_platform_api_get_version+0xa8>
 8008b90:	e7fe      	b.n	8008b90 <ai_platform_api_get_version+0x6c>
 8008b92:	4a2b      	ldr	r2, [pc, #172]	; (8008c40 <ai_platform_api_get_version+0x11c>)
 8008b94:	2301      	movs	r3, #1
 8008b96:	6093      	str	r3, [r2, #8]
 8008b98:	6893      	ldr	r3, [r2, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1fc      	bne.n	8008b98 <ai_platform_api_get_version+0x74>
 8008b9e:	4929      	ldr	r1, [pc, #164]	; (8008c44 <ai_platform_api_get_version+0x120>)
 8008ba0:	4b29      	ldr	r3, [pc, #164]	; (8008c48 <ai_platform_api_get_version+0x124>)
 8008ba2:	6011      	str	r1, [r2, #0]
 8008ba4:	6812      	ldr	r2, [r2, #0]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d010      	beq.n	8008bcc <ai_platform_api_get_version+0xa8>
 8008baa:	e7fe      	b.n	8008baa <ai_platform_api_get_version+0x86>
 8008bac:	4a27      	ldr	r2, [pc, #156]	; (8008c4c <ai_platform_api_get_version+0x128>)
 8008bae:	2301      	movs	r3, #1
 8008bb0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008bb4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d1fb      	bne.n	8008bb4 <ai_platform_api_get_version+0x90>
 8008bbc:	4921      	ldr	r1, [pc, #132]	; (8008c44 <ai_platform_api_get_version+0x120>)
 8008bbe:	4b22      	ldr	r3, [pc, #136]	; (8008c48 <ai_platform_api_get_version+0x124>)
 8008bc0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008bc4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d123      	bne.n	8008c14 <ai_platform_api_get_version+0xf0>
 8008bcc:	f7ff fdc2 	bl	8008754 <_ai_platform_release_crc>
 8008bd0:	4b1f      	ldr	r3, [pc, #124]	; (8008c50 <ai_platform_api_get_version+0x12c>)
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	fa5f fc83 	uxtb.w	ip, r3
 8008bda:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008bde:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008be2:	0e1b      	lsrs	r3, r3, #24
 8008be4:	f36c 0007 	bfi	r0, ip, #0, #8
 8008be8:	f361 200f 	bfi	r0, r1, #8, #8
 8008bec:	f362 4017 	bfi	r0, r2, #16, #8
 8008bf0:	f363 601f 	bfi	r0, r3, #24, #8
 8008bf4:	b003      	add	sp, #12
 8008bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bfa:	4a11      	ldr	r2, [pc, #68]	; (8008c40 <ai_platform_api_get_version+0x11c>)
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	6093      	str	r3, [r2, #8]
 8008c00:	6893      	ldr	r3, [r2, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1fc      	bne.n	8008c00 <ai_platform_api_get_version+0xdc>
 8008c06:	490f      	ldr	r1, [pc, #60]	; (8008c44 <ai_platform_api_get_version+0x120>)
 8008c08:	4b0f      	ldr	r3, [pc, #60]	; (8008c48 <ai_platform_api_get_version+0x124>)
 8008c0a:	6011      	str	r1, [r2, #0]
 8008c0c:	6812      	ldr	r2, [r2, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d0dc      	beq.n	8008bcc <ai_platform_api_get_version+0xa8>
 8008c12:	e7fe      	b.n	8008c12 <ai_platform_api_get_version+0xee>
 8008c14:	e7fe      	b.n	8008c14 <ai_platform_api_get_version+0xf0>
 8008c16:	4a0d      	ldr	r2, [pc, #52]	; (8008c4c <ai_platform_api_get_version+0x128>)
 8008c18:	2301      	movs	r3, #1
 8008c1a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008c1e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1fb      	bne.n	8008c1e <ai_platform_api_get_version+0xfa>
 8008c26:	4907      	ldr	r1, [pc, #28]	; (8008c44 <ai_platform_api_get_version+0x120>)
 8008c28:	4b07      	ldr	r3, [pc, #28]	; (8008c48 <ai_platform_api_get_version+0x124>)
 8008c2a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008c2e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d0ca      	beq.n	8008bcc <ai_platform_api_get_version+0xa8>
 8008c36:	e7fe      	b.n	8008c36 <ai_platform_api_get_version+0x112>
 8008c38:	e0042000 	.word	0xe0042000
 8008c3c:	5c001000 	.word	0x5c001000
 8008c40:	40023000 	.word	0x40023000
 8008c44:	f407a5c2 	.word	0xf407a5c2
 8008c48:	b5e8b5cd 	.word	0xb5e8b5cd
 8008c4c:	58024000 	.word	0x58024000
 8008c50:	0806f7fc 	.word	0x0806f7fc

08008c54 <ai_platform_interface_api_get_version>:
 8008c54:	b500      	push	{lr}
 8008c56:	b083      	sub	sp, #12
 8008c58:	f7ff fd7a 	bl	8008750 <_ai_platform_acquire_crc>
 8008c5c:	4b42      	ldr	r3, [pc, #264]	; (8008d68 <ai_platform_interface_api_get_version+0x114>)
 8008c5e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c68:	189a      	adds	r2, r3, r2
 8008c6a:	2a01      	cmp	r2, #1
 8008c6c:	d929      	bls.n	8008cc2 <ai_platform_interface_api_get_version+0x6e>
 8008c6e:	f240 4249 	movw	r2, #1097	; 0x449
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d025      	beq.n	8008cc2 <ai_platform_interface_api_get_version+0x6e>
 8008c76:	4a3d      	ldr	r2, [pc, #244]	; (8008d6c <ai_platform_interface_api_get_version+0x118>)
 8008c78:	6813      	ldr	r3, [r2, #0]
 8008c7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c7e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008c82:	d02b      	beq.n	8008cdc <ai_platform_interface_api_get_version+0x88>
 8008c84:	6813      	ldr	r3, [r2, #0]
 8008c86:	f240 4183 	movw	r1, #1155	; 0x483
 8008c8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c8e:	428b      	cmp	r3, r1
 8008c90:	d059      	beq.n	8008d46 <ai_platform_interface_api_get_version+0xf2>
 8008c92:	6813      	ldr	r3, [r2, #0]
 8008c94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c98:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008c9c:	d045      	beq.n	8008d2a <ai_platform_interface_api_get_version+0xd6>
 8008c9e:	6813      	ldr	r3, [r2, #0]
 8008ca0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d129      	bne.n	8008cfc <ai_platform_interface_api_get_version+0xa8>
 8008ca8:	4a31      	ldr	r2, [pc, #196]	; (8008d70 <ai_platform_interface_api_get_version+0x11c>)
 8008caa:	2301      	movs	r3, #1
 8008cac:	6093      	str	r3, [r2, #8]
 8008cae:	6893      	ldr	r3, [r2, #8]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1fc      	bne.n	8008cae <ai_platform_interface_api_get_version+0x5a>
 8008cb4:	492f      	ldr	r1, [pc, #188]	; (8008d74 <ai_platform_interface_api_get_version+0x120>)
 8008cb6:	4b30      	ldr	r3, [pc, #192]	; (8008d78 <ai_platform_interface_api_get_version+0x124>)
 8008cb8:	6011      	str	r1, [r2, #0]
 8008cba:	6812      	ldr	r2, [r2, #0]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d01d      	beq.n	8008cfc <ai_platform_interface_api_get_version+0xa8>
 8008cc0:	e7fe      	b.n	8008cc0 <ai_platform_interface_api_get_version+0x6c>
 8008cc2:	4a2b      	ldr	r2, [pc, #172]	; (8008d70 <ai_platform_interface_api_get_version+0x11c>)
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	6093      	str	r3, [r2, #8]
 8008cc8:	6893      	ldr	r3, [r2, #8]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1fc      	bne.n	8008cc8 <ai_platform_interface_api_get_version+0x74>
 8008cce:	4929      	ldr	r1, [pc, #164]	; (8008d74 <ai_platform_interface_api_get_version+0x120>)
 8008cd0:	4b29      	ldr	r3, [pc, #164]	; (8008d78 <ai_platform_interface_api_get_version+0x124>)
 8008cd2:	6011      	str	r1, [r2, #0]
 8008cd4:	6812      	ldr	r2, [r2, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d010      	beq.n	8008cfc <ai_platform_interface_api_get_version+0xa8>
 8008cda:	e7fe      	b.n	8008cda <ai_platform_interface_api_get_version+0x86>
 8008cdc:	4a27      	ldr	r2, [pc, #156]	; (8008d7c <ai_platform_interface_api_get_version+0x128>)
 8008cde:	2301      	movs	r3, #1
 8008ce0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008ce4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1fb      	bne.n	8008ce4 <ai_platform_interface_api_get_version+0x90>
 8008cec:	4921      	ldr	r1, [pc, #132]	; (8008d74 <ai_platform_interface_api_get_version+0x120>)
 8008cee:	4b22      	ldr	r3, [pc, #136]	; (8008d78 <ai_platform_interface_api_get_version+0x124>)
 8008cf0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008cf4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d123      	bne.n	8008d44 <ai_platform_interface_api_get_version+0xf0>
 8008cfc:	f7ff fd2a 	bl	8008754 <_ai_platform_release_crc>
 8008d00:	4b1f      	ldr	r3, [pc, #124]	; (8008d80 <ai_platform_interface_api_get_version+0x12c>)
 8008d02:	2000      	movs	r0, #0
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	fa5f fc83 	uxtb.w	ip, r3
 8008d0a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008d0e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8008d12:	0e1b      	lsrs	r3, r3, #24
 8008d14:	f36c 0007 	bfi	r0, ip, #0, #8
 8008d18:	f361 200f 	bfi	r0, r1, #8, #8
 8008d1c:	f362 4017 	bfi	r0, r2, #16, #8
 8008d20:	f363 601f 	bfi	r0, r3, #24, #8
 8008d24:	b003      	add	sp, #12
 8008d26:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d2a:	4a11      	ldr	r2, [pc, #68]	; (8008d70 <ai_platform_interface_api_get_version+0x11c>)
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	6093      	str	r3, [r2, #8]
 8008d30:	6893      	ldr	r3, [r2, #8]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1fc      	bne.n	8008d30 <ai_platform_interface_api_get_version+0xdc>
 8008d36:	490f      	ldr	r1, [pc, #60]	; (8008d74 <ai_platform_interface_api_get_version+0x120>)
 8008d38:	4b0f      	ldr	r3, [pc, #60]	; (8008d78 <ai_platform_interface_api_get_version+0x124>)
 8008d3a:	6011      	str	r1, [r2, #0]
 8008d3c:	6812      	ldr	r2, [r2, #0]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d0dc      	beq.n	8008cfc <ai_platform_interface_api_get_version+0xa8>
 8008d42:	e7fe      	b.n	8008d42 <ai_platform_interface_api_get_version+0xee>
 8008d44:	e7fe      	b.n	8008d44 <ai_platform_interface_api_get_version+0xf0>
 8008d46:	4a0d      	ldr	r2, [pc, #52]	; (8008d7c <ai_platform_interface_api_get_version+0x128>)
 8008d48:	2301      	movs	r3, #1
 8008d4a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008d4e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1fb      	bne.n	8008d4e <ai_platform_interface_api_get_version+0xfa>
 8008d56:	4907      	ldr	r1, [pc, #28]	; (8008d74 <ai_platform_interface_api_get_version+0x120>)
 8008d58:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <ai_platform_interface_api_get_version+0x124>)
 8008d5a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008d5e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d0ca      	beq.n	8008cfc <ai_platform_interface_api_get_version+0xa8>
 8008d66:	e7fe      	b.n	8008d66 <ai_platform_interface_api_get_version+0x112>
 8008d68:	e0042000 	.word	0xe0042000
 8008d6c:	5c001000 	.word	0x5c001000
 8008d70:	40023000 	.word	0x40023000
 8008d74:	f407a5c2 	.word	0xf407a5c2
 8008d78:	b5e8b5cd 	.word	0xb5e8b5cd
 8008d7c:	58024000 	.word	0x58024000
 8008d80:	0806f800 	.word	0x0806f800

08008d84 <ai_platform_context_acquire>:
 8008d84:	b510      	push	{r4, lr}
 8008d86:	4604      	mov	r4, r0
 8008d88:	b120      	cbz	r0, 8008d94 <ai_platform_context_acquire+0x10>
 8008d8a:	4b3d      	ldr	r3, [pc, #244]	; (8008e80 <ai_platform_context_acquire+0xfc>)
 8008d8c:	6802      	ldr	r2, [r0, #0]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	bf18      	it	ne
 8008d92:	2400      	movne	r4, #0
 8008d94:	f7ff fcdc 	bl	8008750 <_ai_platform_acquire_crc>
 8008d98:	4b3a      	ldr	r3, [pc, #232]	; (8008e84 <ai_platform_context_acquire+0x100>)
 8008d9a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008da4:	189a      	adds	r2, r3, r2
 8008da6:	2a01      	cmp	r2, #1
 8008da8:	d929      	bls.n	8008dfe <ai_platform_context_acquire+0x7a>
 8008daa:	f240 4249 	movw	r2, #1097	; 0x449
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d025      	beq.n	8008dfe <ai_platform_context_acquire+0x7a>
 8008db2:	4a35      	ldr	r2, [pc, #212]	; (8008e88 <ai_platform_context_acquire+0x104>)
 8008db4:	6813      	ldr	r3, [r2, #0]
 8008db6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dba:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008dbe:	d02b      	beq.n	8008e18 <ai_platform_context_acquire+0x94>
 8008dc0:	6813      	ldr	r3, [r2, #0]
 8008dc2:	f240 4183 	movw	r1, #1155	; 0x483
 8008dc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dca:	428b      	cmp	r3, r1
 8008dcc:	d046      	beq.n	8008e5c <ai_platform_context_acquire+0xd8>
 8008dce:	6813      	ldr	r3, [r2, #0]
 8008dd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dd4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008dd8:	d033      	beq.n	8008e42 <ai_platform_context_acquire+0xbe>
 8008dda:	6813      	ldr	r3, [r2, #0]
 8008ddc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d129      	bne.n	8008e38 <ai_platform_context_acquire+0xb4>
 8008de4:	4a29      	ldr	r2, [pc, #164]	; (8008e8c <ai_platform_context_acquire+0x108>)
 8008de6:	2301      	movs	r3, #1
 8008de8:	6093      	str	r3, [r2, #8]
 8008dea:	6893      	ldr	r3, [r2, #8]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d1fc      	bne.n	8008dea <ai_platform_context_acquire+0x66>
 8008df0:	4927      	ldr	r1, [pc, #156]	; (8008e90 <ai_platform_context_acquire+0x10c>)
 8008df2:	4b28      	ldr	r3, [pc, #160]	; (8008e94 <ai_platform_context_acquire+0x110>)
 8008df4:	6011      	str	r1, [r2, #0]
 8008df6:	6812      	ldr	r2, [r2, #0]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d01d      	beq.n	8008e38 <ai_platform_context_acquire+0xb4>
 8008dfc:	e7fe      	b.n	8008dfc <ai_platform_context_acquire+0x78>
 8008dfe:	4a23      	ldr	r2, [pc, #140]	; (8008e8c <ai_platform_context_acquire+0x108>)
 8008e00:	2301      	movs	r3, #1
 8008e02:	6093      	str	r3, [r2, #8]
 8008e04:	6893      	ldr	r3, [r2, #8]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1fc      	bne.n	8008e04 <ai_platform_context_acquire+0x80>
 8008e0a:	4921      	ldr	r1, [pc, #132]	; (8008e90 <ai_platform_context_acquire+0x10c>)
 8008e0c:	4b21      	ldr	r3, [pc, #132]	; (8008e94 <ai_platform_context_acquire+0x110>)
 8008e0e:	6011      	str	r1, [r2, #0]
 8008e10:	6812      	ldr	r2, [r2, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d010      	beq.n	8008e38 <ai_platform_context_acquire+0xb4>
 8008e16:	e7fe      	b.n	8008e16 <ai_platform_context_acquire+0x92>
 8008e18:	4a1f      	ldr	r2, [pc, #124]	; (8008e98 <ai_platform_context_acquire+0x114>)
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008e20:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1fb      	bne.n	8008e20 <ai_platform_context_acquire+0x9c>
 8008e28:	4919      	ldr	r1, [pc, #100]	; (8008e90 <ai_platform_context_acquire+0x10c>)
 8008e2a:	4b1a      	ldr	r3, [pc, #104]	; (8008e94 <ai_platform_context_acquire+0x110>)
 8008e2c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008e30:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d103      	bne.n	8008e40 <ai_platform_context_acquire+0xbc>
 8008e38:	f7ff fc8c 	bl	8008754 <_ai_platform_release_crc>
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	bd10      	pop	{r4, pc}
 8008e40:	e7fe      	b.n	8008e40 <ai_platform_context_acquire+0xbc>
 8008e42:	4a12      	ldr	r2, [pc, #72]	; (8008e8c <ai_platform_context_acquire+0x108>)
 8008e44:	2301      	movs	r3, #1
 8008e46:	6093      	str	r3, [r2, #8]
 8008e48:	6893      	ldr	r3, [r2, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1fc      	bne.n	8008e48 <ai_platform_context_acquire+0xc4>
 8008e4e:	4910      	ldr	r1, [pc, #64]	; (8008e90 <ai_platform_context_acquire+0x10c>)
 8008e50:	4b10      	ldr	r3, [pc, #64]	; (8008e94 <ai_platform_context_acquire+0x110>)
 8008e52:	6011      	str	r1, [r2, #0]
 8008e54:	6812      	ldr	r2, [r2, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d0ee      	beq.n	8008e38 <ai_platform_context_acquire+0xb4>
 8008e5a:	e7fe      	b.n	8008e5a <ai_platform_context_acquire+0xd6>
 8008e5c:	4a0e      	ldr	r2, [pc, #56]	; (8008e98 <ai_platform_context_acquire+0x114>)
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008e64:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d1fb      	bne.n	8008e64 <ai_platform_context_acquire+0xe0>
 8008e6c:	4908      	ldr	r1, [pc, #32]	; (8008e90 <ai_platform_context_acquire+0x10c>)
 8008e6e:	4b09      	ldr	r3, [pc, #36]	; (8008e94 <ai_platform_context_acquire+0x110>)
 8008e70:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008e74:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d0dd      	beq.n	8008e38 <ai_platform_context_acquire+0xb4>
 8008e7c:	e7fe      	b.n	8008e7c <ai_platform_context_acquire+0xf8>
 8008e7e:	bf00      	nop
 8008e80:	a1c00100 	.word	0xa1c00100
 8008e84:	e0042000 	.word	0xe0042000
 8008e88:	5c001000 	.word	0x5c001000
 8008e8c:	40023000 	.word	0x40023000
 8008e90:	f407a5c2 	.word	0xf407a5c2
 8008e94:	b5e8b5cd 	.word	0xb5e8b5cd
 8008e98:	58024000 	.word	0x58024000

08008e9c <ai_platform_network_get_error>:
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	d03f      	beq.n	8008f22 <ai_platform_network_get_error+0x86>
 8008ea2:	4b7d      	ldr	r3, [pc, #500]	; (8009098 <ai_platform_network_get_error+0x1fc>)
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	6802      	ldr	r2, [r0, #0]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d13a      	bne.n	8008f22 <ai_platform_network_get_error+0x86>
 8008eac:	f7ff fc50 	bl	8008750 <_ai_platform_acquire_crc>
 8008eb0:	4b7a      	ldr	r3, [pc, #488]	; (800909c <ai_platform_network_get_error+0x200>)
 8008eb2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ebc:	189a      	adds	r2, r3, r2
 8008ebe:	2a01      	cmp	r2, #1
 8008ec0:	f240 8086 	bls.w	8008fd0 <ai_platform_network_get_error+0x134>
 8008ec4:	f240 4249 	movw	r2, #1097	; 0x449
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	f000 8081 	beq.w	8008fd0 <ai_platform_network_get_error+0x134>
 8008ece:	4a74      	ldr	r2, [pc, #464]	; (80090a0 <ai_platform_network_get_error+0x204>)
 8008ed0:	6813      	ldr	r3, [r2, #0]
 8008ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ed6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008eda:	f000 8087 	beq.w	8008fec <ai_platform_network_get_error+0x150>
 8008ede:	6813      	ldr	r3, [r2, #0]
 8008ee0:	f240 4183 	movw	r1, #1155	; 0x483
 8008ee4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	f000 80a9 	beq.w	8009040 <ai_platform_network_get_error+0x1a4>
 8008eee:	6813      	ldr	r3, [r2, #0]
 8008ef0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ef4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008ef8:	f000 80c0 	beq.w	800907c <ai_platform_network_get_error+0x1e0>
 8008efc:	6813      	ldr	r3, [r2, #0]
 8008efe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f040 8082 	bne.w	800900c <ai_platform_network_get_error+0x170>
 8008f08:	4a66      	ldr	r2, [pc, #408]	; (80090a4 <ai_platform_network_get_error+0x208>)
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	6093      	str	r3, [r2, #8]
 8008f0e:	6893      	ldr	r3, [r2, #8]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d1fc      	bne.n	8008f0e <ai_platform_network_get_error+0x72>
 8008f14:	4964      	ldr	r1, [pc, #400]	; (80090a8 <ai_platform_network_get_error+0x20c>)
 8008f16:	4b65      	ldr	r3, [pc, #404]	; (80090ac <ai_platform_network_get_error+0x210>)
 8008f18:	6011      	str	r1, [r2, #0]
 8008f1a:	6812      	ldr	r2, [r2, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d075      	beq.n	800900c <ai_platform_network_get_error+0x170>
 8008f20:	e7fe      	b.n	8008f20 <ai_platform_network_get_error+0x84>
 8008f22:	f7ff fc15 	bl	8008750 <_ai_platform_acquire_crc>
 8008f26:	4b5d      	ldr	r3, [pc, #372]	; (800909c <ai_platform_network_get_error+0x200>)
 8008f28:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f32:	185a      	adds	r2, r3, r1
 8008f34:	2a01      	cmp	r2, #1
 8008f36:	d929      	bls.n	8008f8c <ai_platform_network_get_error+0xf0>
 8008f38:	f240 4249 	movw	r2, #1097	; 0x449
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d025      	beq.n	8008f8c <ai_platform_network_get_error+0xf0>
 8008f40:	4a57      	ldr	r2, [pc, #348]	; (80090a0 <ai_platform_network_get_error+0x204>)
 8008f42:	6813      	ldr	r3, [r2, #0]
 8008f44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f48:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008f4c:	d02b      	beq.n	8008fa6 <ai_platform_network_get_error+0x10a>
 8008f4e:	6813      	ldr	r3, [r2, #0]
 8008f50:	f240 4183 	movw	r1, #1155	; 0x483
 8008f54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f58:	428b      	cmp	r3, r1
 8008f5a:	d060      	beq.n	800901e <ai_platform_network_get_error+0x182>
 8008f5c:	6813      	ldr	r3, [r2, #0]
 8008f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f62:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008f66:	d07c      	beq.n	8009062 <ai_platform_network_get_error+0x1c6>
 8008f68:	6813      	ldr	r3, [r2, #0]
 8008f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d129      	bne.n	8008fc6 <ai_platform_network_get_error+0x12a>
 8008f72:	4a4c      	ldr	r2, [pc, #304]	; (80090a4 <ai_platform_network_get_error+0x208>)
 8008f74:	2301      	movs	r3, #1
 8008f76:	6093      	str	r3, [r2, #8]
 8008f78:	6893      	ldr	r3, [r2, #8]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1fc      	bne.n	8008f78 <ai_platform_network_get_error+0xdc>
 8008f7e:	494a      	ldr	r1, [pc, #296]	; (80090a8 <ai_platform_network_get_error+0x20c>)
 8008f80:	4b4a      	ldr	r3, [pc, #296]	; (80090ac <ai_platform_network_get_error+0x210>)
 8008f82:	6011      	str	r1, [r2, #0]
 8008f84:	6812      	ldr	r2, [r2, #0]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d01d      	beq.n	8008fc6 <ai_platform_network_get_error+0x12a>
 8008f8a:	e7fe      	b.n	8008f8a <ai_platform_network_get_error+0xee>
 8008f8c:	4a45      	ldr	r2, [pc, #276]	; (80090a4 <ai_platform_network_get_error+0x208>)
 8008f8e:	2301      	movs	r3, #1
 8008f90:	6093      	str	r3, [r2, #8]
 8008f92:	6893      	ldr	r3, [r2, #8]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1fc      	bne.n	8008f92 <ai_platform_network_get_error+0xf6>
 8008f98:	4943      	ldr	r1, [pc, #268]	; (80090a8 <ai_platform_network_get_error+0x20c>)
 8008f9a:	4b44      	ldr	r3, [pc, #272]	; (80090ac <ai_platform_network_get_error+0x210>)
 8008f9c:	6011      	str	r1, [r2, #0]
 8008f9e:	6812      	ldr	r2, [r2, #0]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d010      	beq.n	8008fc6 <ai_platform_network_get_error+0x12a>
 8008fa4:	e7fe      	b.n	8008fa4 <ai_platform_network_get_error+0x108>
 8008fa6:	4a42      	ldr	r2, [pc, #264]	; (80090b0 <ai_platform_network_get_error+0x214>)
 8008fa8:	2301      	movs	r3, #1
 8008faa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008fae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1fb      	bne.n	8008fae <ai_platform_network_get_error+0x112>
 8008fb6:	493c      	ldr	r1, [pc, #240]	; (80090a8 <ai_platform_network_get_error+0x20c>)
 8008fb8:	4b3c      	ldr	r3, [pc, #240]	; (80090ac <ai_platform_network_get_error+0x210>)
 8008fba:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8008fbe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d111      	bne.n	8008fea <ai_platform_network_get_error+0x14e>
 8008fc6:	f7ff fbc5 	bl	8008754 <_ai_platform_release_crc>
 8008fca:	f241 0010 	movw	r0, #4112	; 0x1010
 8008fce:	bd10      	pop	{r4, pc}
 8008fd0:	4a34      	ldr	r2, [pc, #208]	; (80090a4 <ai_platform_network_get_error+0x208>)
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	6093      	str	r3, [r2, #8]
 8008fd6:	6893      	ldr	r3, [r2, #8]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1fc      	bne.n	8008fd6 <ai_platform_network_get_error+0x13a>
 8008fdc:	4932      	ldr	r1, [pc, #200]	; (80090a8 <ai_platform_network_get_error+0x20c>)
 8008fde:	4b33      	ldr	r3, [pc, #204]	; (80090ac <ai_platform_network_get_error+0x210>)
 8008fe0:	6011      	str	r1, [r2, #0]
 8008fe2:	6812      	ldr	r2, [r2, #0]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d011      	beq.n	800900c <ai_platform_network_get_error+0x170>
 8008fe8:	e7fe      	b.n	8008fe8 <ai_platform_network_get_error+0x14c>
 8008fea:	e7fe      	b.n	8008fea <ai_platform_network_get_error+0x14e>
 8008fec:	4a30      	ldr	r2, [pc, #192]	; (80090b0 <ai_platform_network_get_error+0x214>)
 8008fee:	2301      	movs	r3, #1
 8008ff0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008ff4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1fb      	bne.n	8008ff4 <ai_platform_network_get_error+0x158>
 8008ffc:	492a      	ldr	r1, [pc, #168]	; (80090a8 <ai_platform_network_get_error+0x20c>)
 8008ffe:	4b2b      	ldr	r3, [pc, #172]	; (80090ac <ai_platform_network_get_error+0x210>)
 8009000:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009004:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009008:	429a      	cmp	r2, r3
 800900a:	d107      	bne.n	800901c <ai_platform_network_get_error+0x180>
 800900c:	f7ff fba2 	bl	8008754 <_ai_platform_release_crc>
 8009010:	f104 0010 	add.w	r0, r4, #16
 8009014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009018:	f001 be6a 	b.w	800acf0 <core_get_error>
 800901c:	e7fe      	b.n	800901c <ai_platform_network_get_error+0x180>
 800901e:	4a24      	ldr	r2, [pc, #144]	; (80090b0 <ai_platform_network_get_error+0x214>)
 8009020:	2301      	movs	r3, #1
 8009022:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009026:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1fb      	bne.n	8009026 <ai_platform_network_get_error+0x18a>
 800902e:	491e      	ldr	r1, [pc, #120]	; (80090a8 <ai_platform_network_get_error+0x20c>)
 8009030:	4b1e      	ldr	r3, [pc, #120]	; (80090ac <ai_platform_network_get_error+0x210>)
 8009032:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009036:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800903a:	429a      	cmp	r2, r3
 800903c:	d0c3      	beq.n	8008fc6 <ai_platform_network_get_error+0x12a>
 800903e:	e7fe      	b.n	800903e <ai_platform_network_get_error+0x1a2>
 8009040:	4a1b      	ldr	r2, [pc, #108]	; (80090b0 <ai_platform_network_get_error+0x214>)
 8009042:	2301      	movs	r3, #1
 8009044:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009048:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1fb      	bne.n	8009048 <ai_platform_network_get_error+0x1ac>
 8009050:	4915      	ldr	r1, [pc, #84]	; (80090a8 <ai_platform_network_get_error+0x20c>)
 8009052:	4b16      	ldr	r3, [pc, #88]	; (80090ac <ai_platform_network_get_error+0x210>)
 8009054:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009058:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800905c:	429a      	cmp	r2, r3
 800905e:	d0d5      	beq.n	800900c <ai_platform_network_get_error+0x170>
 8009060:	e7fe      	b.n	8009060 <ai_platform_network_get_error+0x1c4>
 8009062:	4a10      	ldr	r2, [pc, #64]	; (80090a4 <ai_platform_network_get_error+0x208>)
 8009064:	2301      	movs	r3, #1
 8009066:	6093      	str	r3, [r2, #8]
 8009068:	6893      	ldr	r3, [r2, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1fc      	bne.n	8009068 <ai_platform_network_get_error+0x1cc>
 800906e:	490e      	ldr	r1, [pc, #56]	; (80090a8 <ai_platform_network_get_error+0x20c>)
 8009070:	4b0e      	ldr	r3, [pc, #56]	; (80090ac <ai_platform_network_get_error+0x210>)
 8009072:	6011      	str	r1, [r2, #0]
 8009074:	6812      	ldr	r2, [r2, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d0a5      	beq.n	8008fc6 <ai_platform_network_get_error+0x12a>
 800907a:	e7fe      	b.n	800907a <ai_platform_network_get_error+0x1de>
 800907c:	4a09      	ldr	r2, [pc, #36]	; (80090a4 <ai_platform_network_get_error+0x208>)
 800907e:	2301      	movs	r3, #1
 8009080:	6093      	str	r3, [r2, #8]
 8009082:	6893      	ldr	r3, [r2, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1fc      	bne.n	8009082 <ai_platform_network_get_error+0x1e6>
 8009088:	4907      	ldr	r1, [pc, #28]	; (80090a8 <ai_platform_network_get_error+0x20c>)
 800908a:	4b08      	ldr	r3, [pc, #32]	; (80090ac <ai_platform_network_get_error+0x210>)
 800908c:	6011      	str	r1, [r2, #0]
 800908e:	6812      	ldr	r2, [r2, #0]
 8009090:	429a      	cmp	r2, r3
 8009092:	d0bb      	beq.n	800900c <ai_platform_network_get_error+0x170>
 8009094:	e7fe      	b.n	8009094 <ai_platform_network_get_error+0x1f8>
 8009096:	bf00      	nop
 8009098:	a1c00100 	.word	0xa1c00100
 800909c:	e0042000 	.word	0xe0042000
 80090a0:	5c001000 	.word	0x5c001000
 80090a4:	40023000 	.word	0x40023000
 80090a8:	f407a5c2 	.word	0xf407a5c2
 80090ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80090b0:	58024000 	.word	0x58024000

080090b4 <ai_platform_network_set_error>:
 80090b4:	b110      	cbz	r0, 80090bc <ai_platform_network_set_error+0x8>
 80090b6:	3010      	adds	r0, #16
 80090b8:	f001 be20 	b.w	800acfc <core_set_error>
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop

080090c0 <ai_platform_api_get_network_report>:
 80090c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c4:	b089      	sub	sp, #36	; 0x24
 80090c6:	4607      	mov	r7, r0
 80090c8:	9101      	str	r1, [sp, #4]
 80090ca:	b120      	cbz	r0, 80090d6 <ai_platform_api_get_network_report+0x16>
 80090cc:	4b87      	ldr	r3, [pc, #540]	; (80092ec <ai_platform_api_get_network_report+0x22c>)
 80090ce:	6802      	ldr	r2, [r0, #0]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	bf18      	it	ne
 80090d4:	2700      	movne	r7, #0
 80090d6:	f7ff fb3b 	bl	8008750 <_ai_platform_acquire_crc>
 80090da:	4b85      	ldr	r3, [pc, #532]	; (80092f0 <ai_platform_api_get_network_report+0x230>)
 80090dc:	f46f 698a 	mvn.w	r9, #1104	; 0x450
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090e6:	eb03 0209 	add.w	r2, r3, r9
 80090ea:	2a01      	cmp	r2, #1
 80090ec:	d92b      	bls.n	8009146 <ai_platform_api_get_network_report+0x86>
 80090ee:	f240 4249 	movw	r2, #1097	; 0x449
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d027      	beq.n	8009146 <ai_platform_api_get_network_report+0x86>
 80090f6:	4a7f      	ldr	r2, [pc, #508]	; (80092f4 <ai_platform_api_get_network_report+0x234>)
 80090f8:	6813      	ldr	r3, [r2, #0]
 80090fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80090fe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009102:	d02d      	beq.n	8009160 <ai_platform_api_get_network_report+0xa0>
 8009104:	6813      	ldr	r3, [r2, #0]
 8009106:	f240 4183 	movw	r1, #1155	; 0x483
 800910a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800910e:	428b      	cmp	r3, r1
 8009110:	f000 80c6 	beq.w	80092a0 <ai_platform_api_get_network_report+0x1e0>
 8009114:	6813      	ldr	r3, [r2, #0]
 8009116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800911a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800911e:	f000 80ab 	beq.w	8009278 <ai_platform_api_get_network_report+0x1b8>
 8009122:	6813      	ldr	r3, [r2, #0]
 8009124:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009128:	2b00      	cmp	r3, #0
 800912a:	d129      	bne.n	8009180 <ai_platform_api_get_network_report+0xc0>
 800912c:	4a72      	ldr	r2, [pc, #456]	; (80092f8 <ai_platform_api_get_network_report+0x238>)
 800912e:	2301      	movs	r3, #1
 8009130:	6093      	str	r3, [r2, #8]
 8009132:	6893      	ldr	r3, [r2, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d1fc      	bne.n	8009132 <ai_platform_api_get_network_report+0x72>
 8009138:	4b70      	ldr	r3, [pc, #448]	; (80092fc <ai_platform_api_get_network_report+0x23c>)
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	4b70      	ldr	r3, [pc, #448]	; (8009300 <ai_platform_api_get_network_report+0x240>)
 800913e:	6812      	ldr	r2, [r2, #0]
 8009140:	429a      	cmp	r2, r3
 8009142:	d01d      	beq.n	8009180 <ai_platform_api_get_network_report+0xc0>
 8009144:	e7fe      	b.n	8009144 <ai_platform_api_get_network_report+0x84>
 8009146:	4a6c      	ldr	r2, [pc, #432]	; (80092f8 <ai_platform_api_get_network_report+0x238>)
 8009148:	2301      	movs	r3, #1
 800914a:	6093      	str	r3, [r2, #8]
 800914c:	6893      	ldr	r3, [r2, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d1fc      	bne.n	800914c <ai_platform_api_get_network_report+0x8c>
 8009152:	4b6a      	ldr	r3, [pc, #424]	; (80092fc <ai_platform_api_get_network_report+0x23c>)
 8009154:	6013      	str	r3, [r2, #0]
 8009156:	4b6a      	ldr	r3, [pc, #424]	; (8009300 <ai_platform_api_get_network_report+0x240>)
 8009158:	6812      	ldr	r2, [r2, #0]
 800915a:	429a      	cmp	r2, r3
 800915c:	d010      	beq.n	8009180 <ai_platform_api_get_network_report+0xc0>
 800915e:	e7fe      	b.n	800915e <ai_platform_api_get_network_report+0x9e>
 8009160:	4a68      	ldr	r2, [pc, #416]	; (8009304 <ai_platform_api_get_network_report+0x244>)
 8009162:	2301      	movs	r3, #1
 8009164:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009168:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1fb      	bne.n	8009168 <ai_platform_api_get_network_report+0xa8>
 8009170:	4b62      	ldr	r3, [pc, #392]	; (80092fc <ai_platform_api_get_network_report+0x23c>)
 8009172:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009176:	4b62      	ldr	r3, [pc, #392]	; (8009300 <ai_platform_api_get_network_report+0x240>)
 8009178:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800917c:	429a      	cmp	r2, r3
 800917e:	d16c      	bne.n	800925a <ai_platform_api_get_network_report+0x19a>
 8009180:	f7ff fae8 	bl	8008754 <_ai_platform_release_crc>
 8009184:	9801      	ldr	r0, [sp, #4]
 8009186:	2800      	cmp	r0, #0
 8009188:	bf18      	it	ne
 800918a:	2f00      	cmpne	r7, #0
 800918c:	bf0c      	ite	eq
 800918e:	2301      	moveq	r3, #1
 8009190:	2300      	movne	r3, #0
 8009192:	9302      	str	r3, [sp, #8]
 8009194:	d07e      	beq.n	8009294 <ai_platform_api_get_network_report+0x1d4>
 8009196:	6743      	str	r3, [r0, #116]	; 0x74
 8009198:	4619      	mov	r1, r3
 800919a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800919c:	b13b      	cbz	r3, 80091ae <ai_platform_api_get_network_report+0xee>
 800919e:	3101      	adds	r1, #1
 80091a0:	6741      	str	r1, [r0, #116]	; 0x74
 80091a2:	691a      	ldr	r2, [r3, #16]
 80091a4:	b11a      	cbz	r2, 80091ae <ai_platform_api_get_network_report+0xee>
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d001      	beq.n	80091ae <ai_platform_api_get_network_report+0xee>
 80091aa:	4613      	mov	r3, r2
 80091ac:	e7f6      	b.n	800919c <ai_platform_api_get_network_report+0xdc>
 80091ae:	2900      	cmp	r1, #0
 80091b0:	f000 8165 	beq.w	800947e <ai_platform_api_get_network_report+0x3be>
 80091b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d050      	beq.n	800925c <ai_platform_api_get_network_report+0x19c>
 80091ba:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 80091be:	f1b9 0f00 	cmp.w	r9, #0
 80091c2:	d04b      	beq.n	800925c <ai_platform_api_get_network_report+0x19c>
 80091c4:	f04f 0a00 	mov.w	sl, #0
 80091c8:	9703      	str	r7, [sp, #12]
 80091ca:	4655      	mov	r5, sl
 80091cc:	e016      	b.n	80091fc <ai_platform_api_get_network_report+0x13c>
 80091ce:	2201      	movs	r2, #1
 80091d0:	f847 200e 	str.w	r2, [r7, lr]
 80091d4:	69b2      	ldr	r2, [r6, #24]
 80091d6:	6852      	ldr	r2, [r2, #4]
 80091d8:	3501      	adds	r5, #1
 80091da:	60a3      	str	r3, [r4, #8]
 80091dc:	f04f 0301 	mov.w	r3, #1
 80091e0:	f10a 0a1c 	add.w	sl, sl, #28
 80091e4:	6122      	str	r2, [r4, #16]
 80091e6:	7523      	strb	r3, [r4, #20]
 80091e8:	2300      	movs	r3, #0
 80091ea:	f8c4 8018 	str.w	r8, [r4, #24]
 80091ee:	60e3      	str	r3, [r4, #12]
 80091f0:	6963      	ldr	r3, [r4, #20]
 80091f2:	f36b 231f 	bfi	r3, fp, #8, #24
 80091f6:	e9c4 0100 	strd	r0, r1, [r4]
 80091fa:	6163      	str	r3, [r4, #20]
 80091fc:	f8b9 3000 	ldrh.w	r3, [r9]
 8009200:	b2aa      	uxth	r2, r5
 8009202:	42ab      	cmp	r3, r5
 8009204:	d95e      	bls.n	80092c4 <ai_platform_api_get_network_report+0x204>
 8009206:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d05a      	beq.n	80092c4 <ai_platform_api_get_network_report+0x204>
 800920e:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8009212:	2e00      	cmp	r6, #0
 8009214:	d056      	beq.n	80092c4 <ai_platform_api_get_network_report+0x204>
 8009216:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800921a:	69b2      	ldr	r2, [r6, #24]
 800921c:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8009220:	6810      	ldr	r0, [r2, #0]
 8009222:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8009226:	68b3      	ldr	r3, [r6, #8]
 8009228:	4454      	add	r4, sl
 800922a:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800922e:	f7ff f903 	bl	8008438 <ai_array_to_buffer_fmt>
 8009232:	69b2      	ldr	r2, [r6, #24]
 8009234:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8009238:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 800923c:	6891      	ldr	r1, [r2, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d0c9      	beq.n	80091d6 <ai_platform_api_get_network_report+0x116>
 8009242:	2200      	movs	r2, #0
 8009244:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8009248:	6832      	ldr	r2, [r6, #0]
 800924a:	605a      	str	r2, [r3, #4]
 800924c:	b112      	cbz	r2, 8009254 <ai_platform_api_get_network_report+0x194>
 800924e:	8852      	ldrh	r2, [r2, #2]
 8009250:	2a00      	cmp	r2, #0
 8009252:	d1bc      	bne.n	80091ce <ai_platform_api_get_network_report+0x10e>
 8009254:	69b2      	ldr	r2, [r6, #24]
 8009256:	2300      	movs	r3, #0
 8009258:	e7bd      	b.n	80091d6 <ai_platform_api_get_network_report+0x116>
 800925a:	e7fe      	b.n	800925a <ai_platform_api_get_network_report+0x19a>
 800925c:	9901      	ldr	r1, [sp, #4]
 800925e:	2300      	movs	r3, #0
 8009260:	2218      	movs	r2, #24
 8009262:	f107 0010 	add.w	r0, r7, #16
 8009266:	634b      	str	r3, [r1, #52]	; 0x34
 8009268:	860b      	strh	r3, [r1, #48]	; 0x30
 800926a:	2112      	movs	r1, #18
 800926c:	f001 fd46 	bl	800acfc <core_set_error>
 8009270:	9802      	ldr	r0, [sp, #8]
 8009272:	b009      	add	sp, #36	; 0x24
 8009274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009278:	4a1f      	ldr	r2, [pc, #124]	; (80092f8 <ai_platform_api_get_network_report+0x238>)
 800927a:	2301      	movs	r3, #1
 800927c:	6093      	str	r3, [r2, #8]
 800927e:	6893      	ldr	r3, [r2, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1fc      	bne.n	800927e <ai_platform_api_get_network_report+0x1be>
 8009284:	4b1d      	ldr	r3, [pc, #116]	; (80092fc <ai_platform_api_get_network_report+0x23c>)
 8009286:	6013      	str	r3, [r2, #0]
 8009288:	4b1d      	ldr	r3, [pc, #116]	; (8009300 <ai_platform_api_get_network_report+0x240>)
 800928a:	6812      	ldr	r2, [r2, #0]
 800928c:	429a      	cmp	r2, r3
 800928e:	f43f af77 	beq.w	8009180 <ai_platform_api_get_network_report+0xc0>
 8009292:	e7fe      	b.n	8009292 <ai_platform_api_get_network_report+0x1d2>
 8009294:	2300      	movs	r3, #0
 8009296:	9302      	str	r3, [sp, #8]
 8009298:	9802      	ldr	r0, [sp, #8]
 800929a:	b009      	add	sp, #36	; 0x24
 800929c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092a0:	4a18      	ldr	r2, [pc, #96]	; (8009304 <ai_platform_api_get_network_report+0x244>)
 80092a2:	2301      	movs	r3, #1
 80092a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80092a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1fb      	bne.n	80092a8 <ai_platform_api_get_network_report+0x1e8>
 80092b0:	4b12      	ldr	r3, [pc, #72]	; (80092fc <ai_platform_api_get_network_report+0x23c>)
 80092b2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80092b6:	4b12      	ldr	r3, [pc, #72]	; (8009300 <ai_platform_api_get_network_report+0x240>)
 80092b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80092bc:	429a      	cmp	r2, r3
 80092be:	f43f af5f 	beq.w	8009180 <ai_platform_api_get_network_report+0xc0>
 80092c2:	e7fe      	b.n	80092c2 <ai_platform_api_get_network_report+0x202>
 80092c4:	9f03      	ldr	r7, [sp, #12]
 80092c6:	2a00      	cmp	r2, #0
 80092c8:	d0c8      	beq.n	800925c <ai_platform_api_get_network_report+0x19c>
 80092ca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80092ce:	9901      	ldr	r1, [sp, #4]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	860a      	strh	r2, [r1, #48]	; 0x30
 80092d4:	634b      	str	r3, [r1, #52]	; 0x34
 80092d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80092d8:	2b01      	cmp	r3, #1
 80092da:	f240 80c5 	bls.w	8009468 <ai_platform_api_get_network_report+0x3a8>
 80092de:	f04f 0a00 	mov.w	sl, #0
 80092e2:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 80092e6:	9703      	str	r7, [sp, #12]
 80092e8:	4655      	mov	r5, sl
 80092ea:	e024      	b.n	8009336 <ai_platform_api_get_network_report+0x276>
 80092ec:	a1c00100 	.word	0xa1c00100
 80092f0:	e0042000 	.word	0xe0042000
 80092f4:	5c001000 	.word	0x5c001000
 80092f8:	40023000 	.word	0x40023000
 80092fc:	f407a5c2 	.word	0xf407a5c2
 8009300:	b5e8b5cd 	.word	0xb5e8b5cd
 8009304:	58024000 	.word	0x58024000
 8009308:	2201      	movs	r2, #1
 800930a:	f847 200e 	str.w	r2, [r7, lr]
 800930e:	69b2      	ldr	r2, [r6, #24]
 8009310:	6852      	ldr	r2, [r2, #4]
 8009312:	3501      	adds	r5, #1
 8009314:	60a3      	str	r3, [r4, #8]
 8009316:	f04f 0301 	mov.w	r3, #1
 800931a:	f10a 0a1c 	add.w	sl, sl, #28
 800931e:	6122      	str	r2, [r4, #16]
 8009320:	7523      	strb	r3, [r4, #20]
 8009322:	2300      	movs	r3, #0
 8009324:	f8c4 8018 	str.w	r8, [r4, #24]
 8009328:	60e3      	str	r3, [r4, #12]
 800932a:	6963      	ldr	r3, [r4, #20]
 800932c:	f36b 231f 	bfi	r3, fp, #8, #24
 8009330:	e9c4 0100 	strd	r0, r1, [r4]
 8009334:	6163      	str	r3, [r4, #20]
 8009336:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800933a:	b2aa      	uxth	r2, r5
 800933c:	42ab      	cmp	r3, r5
 800933e:	d927      	bls.n	8009390 <ai_platform_api_get_network_report+0x2d0>
 8009340:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009344:	b323      	cbz	r3, 8009390 <ai_platform_api_get_network_report+0x2d0>
 8009346:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800934a:	b30e      	cbz	r6, 8009390 <ai_platform_api_get_network_report+0x2d0>
 800934c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8009350:	69b2      	ldr	r2, [r6, #24]
 8009352:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8009356:	6810      	ldr	r0, [r2, #0]
 8009358:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800935c:	68b3      	ldr	r3, [r6, #8]
 800935e:	4454      	add	r4, sl
 8009360:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8009364:	f7ff f868 	bl	8008438 <ai_array_to_buffer_fmt>
 8009368:	69b2      	ldr	r2, [r6, #24]
 800936a:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800936e:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8009372:	6891      	ldr	r1, [r2, #8]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d0cb      	beq.n	8009310 <ai_platform_api_get_network_report+0x250>
 8009378:	2200      	movs	r2, #0
 800937a:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 800937e:	6832      	ldr	r2, [r6, #0]
 8009380:	605a      	str	r2, [r3, #4]
 8009382:	b112      	cbz	r2, 800938a <ai_platform_api_get_network_report+0x2ca>
 8009384:	8852      	ldrh	r2, [r2, #2]
 8009386:	2a00      	cmp	r2, #0
 8009388:	d1be      	bne.n	8009308 <ai_platform_api_get_network_report+0x248>
 800938a:	69b2      	ldr	r2, [r6, #24]
 800938c:	2300      	movs	r3, #0
 800938e:	e7bf      	b.n	8009310 <ai_platform_api_get_network_report+0x250>
 8009390:	9f03      	ldr	r7, [sp, #12]
 8009392:	2a00      	cmp	r2, #0
 8009394:	d068      	beq.n	8009468 <ai_platform_api_get_network_report+0x3a8>
 8009396:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800939a:	f107 0524 	add.w	r5, r7, #36	; 0x24
 800939e:	9901      	ldr	r1, [sp, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	4628      	mov	r0, r5
 80093a4:	864a      	strh	r2, [r1, #50]	; 0x32
 80093a6:	638b      	str	r3, [r1, #56]	; 0x38
 80093a8:	f7ff f926 	bl	80085f8 <ai_buffer_array_sane>
 80093ac:	9002      	str	r0, [sp, #8]
 80093ae:	b960      	cbnz	r0, 80093ca <ai_platform_api_get_network_report+0x30a>
 80093b0:	4628      	mov	r0, r5
 80093b2:	f7ff f921 	bl	80085f8 <ai_buffer_array_sane>
 80093b6:	b140      	cbz	r0, 80093ca <ai_platform_api_get_network_report+0x30a>
 80093b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80093ba:	b133      	cbz	r3, 80093ca <ai_platform_api_get_network_report+0x30a>
 80093bc:	2213      	movs	r2, #19
 80093be:	2111      	movs	r1, #17
 80093c0:	f107 0010 	add.w	r0, r7, #16
 80093c4:	f001 fc9a 	bl	800acfc <core_set_error>
 80093c8:	e752      	b.n	8009270 <ai_platform_api_get_network_report+0x1b0>
 80093ca:	f107 061c 	add.w	r6, r7, #28
 80093ce:	4630      	mov	r0, r6
 80093d0:	f7ff f912 	bl	80085f8 <ai_buffer_array_sane>
 80093d4:	9002      	str	r0, [sp, #8]
 80093d6:	b960      	cbnz	r0, 80093f2 <ai_platform_api_get_network_report+0x332>
 80093d8:	4630      	mov	r0, r6
 80093da:	f7ff f90d 	bl	80085f8 <ai_buffer_array_sane>
 80093de:	b140      	cbz	r0, 80093f2 <ai_platform_api_get_network_report+0x332>
 80093e0:	8bfb      	ldrh	r3, [r7, #30]
 80093e2:	b133      	cbz	r3, 80093f2 <ai_platform_api_get_network_report+0x332>
 80093e4:	2212      	movs	r2, #18
 80093e6:	2111      	movs	r1, #17
 80093e8:	f107 0010 	add.w	r0, r7, #16
 80093ec:	f001 fc86 	bl	800acfc <core_set_error>
 80093f0:	e73e      	b.n	8009270 <ai_platform_api_get_network_report+0x1b0>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f46f 688a 	mvn.w	r8, #1104	; 0x450
 80093f8:	9a01      	ldr	r2, [sp, #4]
 80093fa:	6793      	str	r3, [r2, #120]	; 0x78
 80093fc:	f7ff f9a8 	bl	8008750 <_ai_platform_acquire_crc>
 8009400:	4b88      	ldr	r3, [pc, #544]	; (8009624 <ai_platform_api_get_network_report+0x564>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009408:	eb03 0208 	add.w	r2, r3, r8
 800940c:	2a01      	cmp	r2, #1
 800940e:	d93d      	bls.n	800948c <ai_platform_api_get_network_report+0x3cc>
 8009410:	f240 4249 	movw	r2, #1097	; 0x449
 8009414:	4293      	cmp	r3, r2
 8009416:	d039      	beq.n	800948c <ai_platform_api_get_network_report+0x3cc>
 8009418:	4b83      	ldr	r3, [pc, #524]	; (8009628 <ai_platform_api_get_network_report+0x568>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8009420:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8009424:	d03f      	beq.n	80094a6 <ai_platform_api_get_network_report+0x3e6>
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	f240 4183 	movw	r1, #1155	; 0x483
 800942c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8009430:	428a      	cmp	r2, r1
 8009432:	f000 80e4 	beq.w	80095fe <ai_platform_api_get_network_report+0x53e>
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800943c:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 8009440:	f000 814a 	beq.w	80096d8 <ai_platform_api_get_network_report+0x618>
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800944a:	2b00      	cmp	r3, #0
 800944c:	d13c      	bne.n	80094c8 <ai_platform_api_get_network_report+0x408>
 800944e:	4b77      	ldr	r3, [pc, #476]	; (800962c <ai_platform_api_get_network_report+0x56c>)
 8009450:	2201      	movs	r2, #1
 8009452:	609a      	str	r2, [r3, #8]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	2a00      	cmp	r2, #0
 8009458:	d1fc      	bne.n	8009454 <ai_platform_api_get_network_report+0x394>
 800945a:	4a75      	ldr	r2, [pc, #468]	; (8009630 <ai_platform_api_get_network_report+0x570>)
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	4b74      	ldr	r3, [pc, #464]	; (8009634 <ai_platform_api_get_network_report+0x574>)
 8009462:	429a      	cmp	r2, r3
 8009464:	d030      	beq.n	80094c8 <ai_platform_api_get_network_report+0x408>
 8009466:	e7fe      	b.n	8009466 <ai_platform_api_get_network_report+0x3a6>
 8009468:	9901      	ldr	r1, [sp, #4]
 800946a:	2300      	movs	r3, #0
 800946c:	2218      	movs	r2, #24
 800946e:	f107 0010 	add.w	r0, r7, #16
 8009472:	638b      	str	r3, [r1, #56]	; 0x38
 8009474:	864b      	strh	r3, [r1, #50]	; 0x32
 8009476:	2113      	movs	r1, #19
 8009478:	f001 fc40 	bl	800acfc <core_set_error>
 800947c:	e6f8      	b.n	8009270 <ai_platform_api_get_network_report+0x1b0>
 800947e:	2218      	movs	r2, #24
 8009480:	2111      	movs	r1, #17
 8009482:	f107 0010 	add.w	r0, r7, #16
 8009486:	f001 fc39 	bl	800acfc <core_set_error>
 800948a:	e6f1      	b.n	8009270 <ai_platform_api_get_network_report+0x1b0>
 800948c:	4a67      	ldr	r2, [pc, #412]	; (800962c <ai_platform_api_get_network_report+0x56c>)
 800948e:	2301      	movs	r3, #1
 8009490:	6093      	str	r3, [r2, #8]
 8009492:	6893      	ldr	r3, [r2, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1fc      	bne.n	8009492 <ai_platform_api_get_network_report+0x3d2>
 8009498:	4b65      	ldr	r3, [pc, #404]	; (8009630 <ai_platform_api_get_network_report+0x570>)
 800949a:	6013      	str	r3, [r2, #0]
 800949c:	4b65      	ldr	r3, [pc, #404]	; (8009634 <ai_platform_api_get_network_report+0x574>)
 800949e:	6812      	ldr	r2, [r2, #0]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d011      	beq.n	80094c8 <ai_platform_api_get_network_report+0x408>
 80094a4:	e7fe      	b.n	80094a4 <ai_platform_api_get_network_report+0x3e4>
 80094a6:	4b64      	ldr	r3, [pc, #400]	; (8009638 <ai_platform_api_get_network_report+0x578>)
 80094a8:	2201      	movs	r2, #1
 80094aa:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80094ae:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80094b2:	2a00      	cmp	r2, #0
 80094b4:	d1fb      	bne.n	80094ae <ai_platform_api_get_network_report+0x3ee>
 80094b6:	4a5e      	ldr	r2, [pc, #376]	; (8009630 <ai_platform_api_get_network_report+0x570>)
 80094b8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80094bc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80094c0:	4b5c      	ldr	r3, [pc, #368]	; (8009634 <ai_platform_api_get_network_report+0x574>)
 80094c2:	429a      	cmp	r2, r3
 80094c4:	f040 809a 	bne.w	80095fc <ai_platform_api_get_network_report+0x53c>
 80094c8:	f7ff f944 	bl	8008754 <_ai_platform_release_crc>
 80094cc:	4b5b      	ldr	r3, [pc, #364]	; (800963c <ai_platform_api_get_network_report+0x57c>)
 80094ce:	9a01      	ldr	r2, [sp, #4]
 80094d0:	6113      	str	r3, [r2, #16]
 80094d2:	f7ff f93d 	bl	8008750 <_ai_platform_acquire_crc>
 80094d6:	4b53      	ldr	r3, [pc, #332]	; (8009624 <ai_platform_api_get_network_report+0x564>)
 80094d8:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094e2:	eb03 020e 	add.w	r2, r3, lr
 80094e6:	2a01      	cmp	r2, #1
 80094e8:	d92b      	bls.n	8009542 <ai_platform_api_get_network_report+0x482>
 80094ea:	f240 4249 	movw	r2, #1097	; 0x449
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d027      	beq.n	8009542 <ai_platform_api_get_network_report+0x482>
 80094f2:	4b4d      	ldr	r3, [pc, #308]	; (8009628 <ai_platform_api_get_network_report+0x568>)
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80094fa:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80094fe:	d02d      	beq.n	800955c <ai_platform_api_get_network_report+0x49c>
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	f240 4183 	movw	r1, #1155	; 0x483
 8009506:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800950a:	428a      	cmp	r2, r1
 800950c:	f000 8111 	beq.w	8009732 <ai_platform_api_get_network_report+0x672>
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8009516:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 800951a:	f000 80fc 	beq.w	8009716 <ai_platform_api_get_network_report+0x656>
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009524:	2b00      	cmp	r3, #0
 8009526:	d12a      	bne.n	800957e <ai_platform_api_get_network_report+0x4be>
 8009528:	4b40      	ldr	r3, [pc, #256]	; (800962c <ai_platform_api_get_network_report+0x56c>)
 800952a:	2201      	movs	r2, #1
 800952c:	609a      	str	r2, [r3, #8]
 800952e:	689a      	ldr	r2, [r3, #8]
 8009530:	2a00      	cmp	r2, #0
 8009532:	d1fc      	bne.n	800952e <ai_platform_api_get_network_report+0x46e>
 8009534:	4a3e      	ldr	r2, [pc, #248]	; (8009630 <ai_platform_api_get_network_report+0x570>)
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	4b3e      	ldr	r3, [pc, #248]	; (8009634 <ai_platform_api_get_network_report+0x574>)
 800953c:	429a      	cmp	r2, r3
 800953e:	d01e      	beq.n	800957e <ai_platform_api_get_network_report+0x4be>
 8009540:	e7fe      	b.n	8009540 <ai_platform_api_get_network_report+0x480>
 8009542:	4a3a      	ldr	r2, [pc, #232]	; (800962c <ai_platform_api_get_network_report+0x56c>)
 8009544:	2301      	movs	r3, #1
 8009546:	6093      	str	r3, [r2, #8]
 8009548:	6893      	ldr	r3, [r2, #8]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1fc      	bne.n	8009548 <ai_platform_api_get_network_report+0x488>
 800954e:	4b38      	ldr	r3, [pc, #224]	; (8009630 <ai_platform_api_get_network_report+0x570>)
 8009550:	6013      	str	r3, [r2, #0]
 8009552:	4b38      	ldr	r3, [pc, #224]	; (8009634 <ai_platform_api_get_network_report+0x574>)
 8009554:	6812      	ldr	r2, [r2, #0]
 8009556:	429a      	cmp	r2, r3
 8009558:	d011      	beq.n	800957e <ai_platform_api_get_network_report+0x4be>
 800955a:	e7fe      	b.n	800955a <ai_platform_api_get_network_report+0x49a>
 800955c:	4b36      	ldr	r3, [pc, #216]	; (8009638 <ai_platform_api_get_network_report+0x578>)
 800955e:	2201      	movs	r2, #1
 8009560:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8009564:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8009568:	2a00      	cmp	r2, #0
 800956a:	d1fb      	bne.n	8009564 <ai_platform_api_get_network_report+0x4a4>
 800956c:	4a30      	ldr	r2, [pc, #192]	; (8009630 <ai_platform_api_get_network_report+0x570>)
 800956e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8009572:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8009576:	4b2f      	ldr	r3, [pc, #188]	; (8009634 <ai_platform_api_get_network_report+0x574>)
 8009578:	429a      	cmp	r2, r3
 800957a:	f040 80ac 	bne.w	80096d6 <ai_platform_api_get_network_report+0x616>
 800957e:	f7ff f8e9 	bl	8008754 <_ai_platform_release_crc>
 8009582:	f240 3307 	movw	r3, #775	; 0x307
 8009586:	9a01      	ldr	r2, [sp, #4]
 8009588:	6153      	str	r3, [r2, #20]
 800958a:	f7ff f8e1 	bl	8008750 <_ai_platform_acquire_crc>
 800958e:	4b25      	ldr	r3, [pc, #148]	; (8009624 <ai_platform_api_get_network_report+0x564>)
 8009590:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800959a:	eb03 020c 	add.w	r2, r3, ip
 800959e:	2a01      	cmp	r2, #1
 80095a0:	d94e      	bls.n	8009640 <ai_platform_api_get_network_report+0x580>
 80095a2:	f240 4249 	movw	r2, #1097	; 0x449
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d04a      	beq.n	8009640 <ai_platform_api_get_network_report+0x580>
 80095aa:	4b1f      	ldr	r3, [pc, #124]	; (8009628 <ai_platform_api_get_network_report+0x568>)
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80095b2:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80095b6:	f000 809d 	beq.w	80096f4 <ai_platform_api_get_network_report+0x634>
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	f240 4183 	movw	r1, #1155	; 0x483
 80095c0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80095c4:	428a      	cmp	r2, r1
 80095c6:	f000 80fe 	beq.w	80097c6 <ai_platform_api_get_network_report+0x706>
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80095d0:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 80095d4:	f000 80e9 	beq.w	80097aa <ai_platform_api_get_network_report+0x6ea>
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d13a      	bne.n	8009658 <ai_platform_api_get_network_report+0x598>
 80095e2:	4b12      	ldr	r3, [pc, #72]	; (800962c <ai_platform_api_get_network_report+0x56c>)
 80095e4:	2201      	movs	r2, #1
 80095e6:	609a      	str	r2, [r3, #8]
 80095e8:	689a      	ldr	r2, [r3, #8]
 80095ea:	2a00      	cmp	r2, #0
 80095ec:	d1fc      	bne.n	80095e8 <ai_platform_api_get_network_report+0x528>
 80095ee:	4a10      	ldr	r2, [pc, #64]	; (8009630 <ai_platform_api_get_network_report+0x570>)
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	4b0f      	ldr	r3, [pc, #60]	; (8009634 <ai_platform_api_get_network_report+0x574>)
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d02e      	beq.n	8009658 <ai_platform_api_get_network_report+0x598>
 80095fa:	e7fe      	b.n	80095fa <ai_platform_api_get_network_report+0x53a>
 80095fc:	e7fe      	b.n	80095fc <ai_platform_api_get_network_report+0x53c>
 80095fe:	4b0e      	ldr	r3, [pc, #56]	; (8009638 <ai_platform_api_get_network_report+0x578>)
 8009600:	2201      	movs	r2, #1
 8009602:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8009606:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800960a:	2a00      	cmp	r2, #0
 800960c:	d1fb      	bne.n	8009606 <ai_platform_api_get_network_report+0x546>
 800960e:	4a08      	ldr	r2, [pc, #32]	; (8009630 <ai_platform_api_get_network_report+0x570>)
 8009610:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8009614:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8009618:	4b06      	ldr	r3, [pc, #24]	; (8009634 <ai_platform_api_get_network_report+0x574>)
 800961a:	429a      	cmp	r2, r3
 800961c:	f43f af54 	beq.w	80094c8 <ai_platform_api_get_network_report+0x408>
 8009620:	e7fe      	b.n	8009620 <ai_platform_api_get_network_report+0x560>
 8009622:	bf00      	nop
 8009624:	e0042000 	.word	0xe0042000
 8009628:	5c001000 	.word	0x5c001000
 800962c:	40023000 	.word	0x40023000
 8009630:	f407a5c2 	.word	0xf407a5c2
 8009634:	b5e8b5cd 	.word	0xb5e8b5cd
 8009638:	58024000 	.word	0x58024000
 800963c:	0806f7f4 	.word	0x0806f7f4
 8009640:	4ba5      	ldr	r3, [pc, #660]	; (80098d8 <ai_platform_api_get_network_report+0x818>)
 8009642:	2201      	movs	r2, #1
 8009644:	609a      	str	r2, [r3, #8]
 8009646:	689a      	ldr	r2, [r3, #8]
 8009648:	2a00      	cmp	r2, #0
 800964a:	d1fc      	bne.n	8009646 <ai_platform_api_get_network_report+0x586>
 800964c:	4aa3      	ldr	r2, [pc, #652]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	4ba3      	ldr	r3, [pc, #652]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 8009654:	429a      	cmp	r2, r3
 8009656:	d13d      	bne.n	80096d4 <ai_platform_api_get_network_report+0x614>
 8009658:	f7ff f87c 	bl	8008754 <_ai_platform_release_crc>
 800965c:	f240 2301 	movw	r3, #513	; 0x201
 8009660:	9a01      	ldr	r2, [sp, #4]
 8009662:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 8009666:	6253      	str	r3, [r2, #36]	; 0x24
 8009668:	f7ff f872 	bl	8008750 <_ai_platform_acquire_crc>
 800966c:	4b9d      	ldr	r3, [pc, #628]	; (80098e4 <ai_platform_api_get_network_report+0x824>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009674:	191a      	adds	r2, r3, r4
 8009676:	2a01      	cmp	r2, #1
 8009678:	d96d      	bls.n	8009756 <ai_platform_api_get_network_report+0x696>
 800967a:	f240 4249 	movw	r2, #1097	; 0x449
 800967e:	4293      	cmp	r3, r2
 8009680:	d069      	beq.n	8009756 <ai_platform_api_get_network_report+0x696>
 8009682:	4b99      	ldr	r3, [pc, #612]	; (80098e8 <ai_platform_api_get_network_report+0x828>)
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800968a:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800968e:	f000 80ca 	beq.w	8009826 <ai_platform_api_get_network_report+0x766>
 8009692:	681a      	ldr	r2, [r3, #0]
 8009694:	f240 4183 	movw	r1, #1155	; 0x483
 8009698:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800969c:	428a      	cmp	r2, r1
 800969e:	f000 80b1 	beq.w	8009804 <ai_platform_api_get_network_report+0x744>
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80096a8:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 80096ac:	f000 809d 	beq.w	80097ea <ai_platform_api_get_network_report+0x72a>
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d159      	bne.n	800976e <ai_platform_api_get_network_report+0x6ae>
 80096ba:	4b87      	ldr	r3, [pc, #540]	; (80098d8 <ai_platform_api_get_network_report+0x818>)
 80096bc:	2201      	movs	r2, #1
 80096be:	609a      	str	r2, [r3, #8]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	2a00      	cmp	r2, #0
 80096c4:	d1fc      	bne.n	80096c0 <ai_platform_api_get_network_report+0x600>
 80096c6:	4a85      	ldr	r2, [pc, #532]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	4b84      	ldr	r3, [pc, #528]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d04d      	beq.n	800976e <ai_platform_api_get_network_report+0x6ae>
 80096d2:	e7fe      	b.n	80096d2 <ai_platform_api_get_network_report+0x612>
 80096d4:	e7fe      	b.n	80096d4 <ai_platform_api_get_network_report+0x614>
 80096d6:	e7fe      	b.n	80096d6 <ai_platform_api_get_network_report+0x616>
 80096d8:	4b7f      	ldr	r3, [pc, #508]	; (80098d8 <ai_platform_api_get_network_report+0x818>)
 80096da:	2201      	movs	r2, #1
 80096dc:	609a      	str	r2, [r3, #8]
 80096de:	689a      	ldr	r2, [r3, #8]
 80096e0:	2a00      	cmp	r2, #0
 80096e2:	d1fc      	bne.n	80096de <ai_platform_api_get_network_report+0x61e>
 80096e4:	4a7d      	ldr	r2, [pc, #500]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	4b7d      	ldr	r3, [pc, #500]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 80096ec:	429a      	cmp	r2, r3
 80096ee:	f43f aeeb 	beq.w	80094c8 <ai_platform_api_get_network_report+0x408>
 80096f2:	e7fe      	b.n	80096f2 <ai_platform_api_get_network_report+0x632>
 80096f4:	4b7d      	ldr	r3, [pc, #500]	; (80098ec <ai_platform_api_get_network_report+0x82c>)
 80096f6:	2201      	movs	r2, #1
 80096f8:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80096fc:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8009700:	2a00      	cmp	r2, #0
 8009702:	d1fb      	bne.n	80096fc <ai_platform_api_get_network_report+0x63c>
 8009704:	4a75      	ldr	r2, [pc, #468]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 8009706:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800970a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800970e:	4b74      	ldr	r3, [pc, #464]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 8009710:	429a      	cmp	r2, r3
 8009712:	d0a1      	beq.n	8009658 <ai_platform_api_get_network_report+0x598>
 8009714:	e7fe      	b.n	8009714 <ai_platform_api_get_network_report+0x654>
 8009716:	4b70      	ldr	r3, [pc, #448]	; (80098d8 <ai_platform_api_get_network_report+0x818>)
 8009718:	2201      	movs	r2, #1
 800971a:	609a      	str	r2, [r3, #8]
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	2a00      	cmp	r2, #0
 8009720:	d1fc      	bne.n	800971c <ai_platform_api_get_network_report+0x65c>
 8009722:	4a6e      	ldr	r2, [pc, #440]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	4b6d      	ldr	r3, [pc, #436]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 800972a:	429a      	cmp	r2, r3
 800972c:	f43f af27 	beq.w	800957e <ai_platform_api_get_network_report+0x4be>
 8009730:	e7fe      	b.n	8009730 <ai_platform_api_get_network_report+0x670>
 8009732:	4b6e      	ldr	r3, [pc, #440]	; (80098ec <ai_platform_api_get_network_report+0x82c>)
 8009734:	2201      	movs	r2, #1
 8009736:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800973a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800973e:	2a00      	cmp	r2, #0
 8009740:	d1fb      	bne.n	800973a <ai_platform_api_get_network_report+0x67a>
 8009742:	4a66      	ldr	r2, [pc, #408]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 8009744:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8009748:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800974c:	4b64      	ldr	r3, [pc, #400]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 800974e:	429a      	cmp	r2, r3
 8009750:	f43f af15 	beq.w	800957e <ai_platform_api_get_network_report+0x4be>
 8009754:	e7fe      	b.n	8009754 <ai_platform_api_get_network_report+0x694>
 8009756:	4b60      	ldr	r3, [pc, #384]	; (80098d8 <ai_platform_api_get_network_report+0x818>)
 8009758:	2201      	movs	r2, #1
 800975a:	609a      	str	r2, [r3, #8]
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	2a00      	cmp	r2, #0
 8009760:	d1fc      	bne.n	800975c <ai_platform_api_get_network_report+0x69c>
 8009762:	4a5e      	ldr	r2, [pc, #376]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	4b5d      	ldr	r3, [pc, #372]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 800976a:	429a      	cmp	r2, r3
 800976c:	d11c      	bne.n	80097a8 <ai_platform_api_get_network_report+0x6e8>
 800976e:	f7fe fff1 	bl	8008754 <_ai_platform_release_crc>
 8009772:	9c01      	ldr	r4, [sp, #4]
 8009774:	f240 5301 	movw	r3, #1281	; 0x501
 8009778:	62a3      	str	r3, [r4, #40]	; 0x28
 800977a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800977c:	f7fe fe20 	bl	80083c0 <ai_platform_version_get>
 8009780:	4b5b      	ldr	r3, [pc, #364]	; (80098f0 <ai_platform_api_get_network_report+0x830>)
 8009782:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009784:	6220      	str	r0, [r4, #32]
 8009786:	429a      	cmp	r2, r3
 8009788:	d15e      	bne.n	8009848 <ai_platform_api_get_network_report+0x788>
 800978a:	f104 0248 	add.w	r2, r4, #72	; 0x48
 800978e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009792:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009796:	e882 0003 	stmia.w	r2, {r0, r1}
 800979a:	2201      	movs	r2, #1
 800979c:	e896 0003 	ldmia.w	r6, {r0, r1}
 80097a0:	9202      	str	r2, [sp, #8]
 80097a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80097a6:	e563      	b.n	8009270 <ai_platform_api_get_network_report+0x1b0>
 80097a8:	e7fe      	b.n	80097a8 <ai_platform_api_get_network_report+0x6e8>
 80097aa:	4b4b      	ldr	r3, [pc, #300]	; (80098d8 <ai_platform_api_get_network_report+0x818>)
 80097ac:	2201      	movs	r2, #1
 80097ae:	609a      	str	r2, [r3, #8]
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	2a00      	cmp	r2, #0
 80097b4:	d1fc      	bne.n	80097b0 <ai_platform_api_get_network_report+0x6f0>
 80097b6:	4a49      	ldr	r2, [pc, #292]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 80097b8:	601a      	str	r2, [r3, #0]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	4b48      	ldr	r3, [pc, #288]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 80097be:	429a      	cmp	r2, r3
 80097c0:	f43f af4a 	beq.w	8009658 <ai_platform_api_get_network_report+0x598>
 80097c4:	e7fe      	b.n	80097c4 <ai_platform_api_get_network_report+0x704>
 80097c6:	4b49      	ldr	r3, [pc, #292]	; (80098ec <ai_platform_api_get_network_report+0x82c>)
 80097c8:	2201      	movs	r2, #1
 80097ca:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80097ce:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80097d2:	2a00      	cmp	r2, #0
 80097d4:	d1fb      	bne.n	80097ce <ai_platform_api_get_network_report+0x70e>
 80097d6:	4a41      	ldr	r2, [pc, #260]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 80097d8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80097dc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80097e0:	4b3f      	ldr	r3, [pc, #252]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 80097e2:	429a      	cmp	r2, r3
 80097e4:	f43f af38 	beq.w	8009658 <ai_platform_api_get_network_report+0x598>
 80097e8:	e7fe      	b.n	80097e8 <ai_platform_api_get_network_report+0x728>
 80097ea:	4b3b      	ldr	r3, [pc, #236]	; (80098d8 <ai_platform_api_get_network_report+0x818>)
 80097ec:	2201      	movs	r2, #1
 80097ee:	609a      	str	r2, [r3, #8]
 80097f0:	689a      	ldr	r2, [r3, #8]
 80097f2:	2a00      	cmp	r2, #0
 80097f4:	d1fc      	bne.n	80097f0 <ai_platform_api_get_network_report+0x730>
 80097f6:	4a39      	ldr	r2, [pc, #228]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	4b38      	ldr	r3, [pc, #224]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 80097fe:	429a      	cmp	r2, r3
 8009800:	d0b5      	beq.n	800976e <ai_platform_api_get_network_report+0x6ae>
 8009802:	e7fe      	b.n	8009802 <ai_platform_api_get_network_report+0x742>
 8009804:	4b39      	ldr	r3, [pc, #228]	; (80098ec <ai_platform_api_get_network_report+0x82c>)
 8009806:	2201      	movs	r2, #1
 8009808:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800980c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8009810:	2a00      	cmp	r2, #0
 8009812:	d1fb      	bne.n	800980c <ai_platform_api_get_network_report+0x74c>
 8009814:	4a31      	ldr	r2, [pc, #196]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 8009816:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800981a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800981e:	4b30      	ldr	r3, [pc, #192]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 8009820:	429a      	cmp	r2, r3
 8009822:	d0a4      	beq.n	800976e <ai_platform_api_get_network_report+0x6ae>
 8009824:	e7fe      	b.n	8009824 <ai_platform_api_get_network_report+0x764>
 8009826:	4b31      	ldr	r3, [pc, #196]	; (80098ec <ai_platform_api_get_network_report+0x82c>)
 8009828:	2201      	movs	r2, #1
 800982a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800982e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8009832:	2a00      	cmp	r2, #0
 8009834:	d1fb      	bne.n	800982e <ai_platform_api_get_network_report+0x76e>
 8009836:	4a29      	ldr	r2, [pc, #164]	; (80098dc <ai_platform_api_get_network_report+0x81c>)
 8009838:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800983c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8009840:	4b27      	ldr	r3, [pc, #156]	; (80098e0 <ai_platform_api_get_network_report+0x820>)
 8009842:	429a      	cmp	r2, r3
 8009844:	d093      	beq.n	800976e <ai_platform_api_get_network_report+0x6ae>
 8009846:	e7fe      	b.n	8009846 <ai_platform_api_get_network_report+0x786>
 8009848:	9901      	ldr	r1, [sp, #4]
 800984a:	2200      	movs	r2, #0
 800984c:	f10d 0910 	add.w	r9, sp, #16
 8009850:	4b28      	ldr	r3, [pc, #160]	; (80098f4 <ai_platform_api_get_network_report+0x834>)
 8009852:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 8009856:	f101 0858 	add.w	r8, r1, #88	; 0x58
 800985a:	f8c1 9054 	str.w	r9, [r1, #84]	; 0x54
 800985e:	46a6      	mov	lr, r4
 8009860:	46c4      	mov	ip, r8
 8009862:	e9c1 2210 	strd	r2, r2, [r1, #64]	; 0x40
 8009866:	e9c1 2212 	strd	r2, r2, [r1, #72]	; 0x48
 800986a:	4a23      	ldr	r2, [pc, #140]	; (80098f8 <ai_platform_api_get_network_report+0x838>)
 800986c:	63ca      	str	r2, [r1, #60]	; 0x3c
 800986e:	f240 4201 	movw	r2, #1025	; 0x401
 8009872:	650a      	str	r2, [r1, #80]	; 0x50
 8009874:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009876:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 800987a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800987e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009882:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8009886:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800988a:	4628      	mov	r0, r5
 800988c:	f7fe feb4 	bl	80085f8 <ai_buffer_array_sane>
 8009890:	b990      	cbnz	r0, 80098b8 <ai_platform_api_get_network_report+0x7f8>
 8009892:	4630      	mov	r0, r6
 8009894:	f7fe feb0 	bl	80085f8 <ai_buffer_array_sane>
 8009898:	b910      	cbnz	r0, 80098a0 <ai_platform_api_get_network_report+0x7e0>
 800989a:	2301      	movs	r3, #1
 800989c:	9302      	str	r3, [sp, #8]
 800989e:	e4e7      	b.n	8009270 <ai_platform_api_get_network_report+0x1b0>
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7fe fea9 	bl	80085f8 <ai_buffer_array_sane>
 80098a6:	b348      	cbz	r0, 80098fc <ai_platform_api_get_network_report+0x83c>
 80098a8:	6a3d      	ldr	r5, [r7, #32]
 80098aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80098b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80098b6:	e7f0      	b.n	800989a <ai_platform_api_get_network_report+0x7da>
 80098b8:	4628      	mov	r0, r5
 80098ba:	f7fe fe9d 	bl	80085f8 <ai_buffer_array_sane>
 80098be:	b328      	cbz	r0, 800990c <ai_platform_api_get_network_report+0x84c>
 80098c0:	f8d7 c028 	ldr.w	ip, [r7, #40]	; 0x28
 80098c4:	4645      	mov	r5, r8
 80098c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80098ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098cc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80098d0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80098d4:	e7dd      	b.n	8009892 <ai_platform_api_get_network_report+0x7d2>
 80098d6:	bf00      	nop
 80098d8:	40023000 	.word	0x40023000
 80098dc:	f407a5c2 	.word	0xf407a5c2
 80098e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80098e4:	e0042000 	.word	0xe0042000
 80098e8:	5c001000 	.word	0x5c001000
 80098ec:	58024000 	.word	0x58024000
 80098f0:	a1facade 	.word	0xa1facade
 80098f4:	08010334 	.word	0x08010334
 80098f8:	00040440 	.word	0x00040440
 80098fc:	4605      	mov	r5, r0
 80098fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009902:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800990a:	deff      	udf	#255	; 0xff
 800990c:	4604      	mov	r4, r0
 800990e:	4645      	mov	r5, r8
 8009910:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009912:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009914:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8009918:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800991c:	deff      	udf	#255	; 0xff
 800991e:	bf00      	nop

08009920 <ai_platform_network_create>:
 8009920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009924:	b083      	sub	sp, #12
 8009926:	4604      	mov	r4, r0
 8009928:	4615      	mov	r5, r2
 800992a:	461e      	mov	r6, r3
 800992c:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8009930:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8009934:	f7fe ff0c 	bl	8008750 <_ai_platform_acquire_crc>
 8009938:	2800      	cmp	r0, #0
 800993a:	f000 80bd 	beq.w	8009ab8 <ai_platform_network_create+0x198>
 800993e:	4ba5      	ldr	r3, [pc, #660]	; (8009bd4 <ai_platform_network_create+0x2b4>)
 8009940:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8009944:	4601      	mov	r1, r0
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800994c:	eb03 020c 	add.w	r2, r3, ip
 8009950:	2a01      	cmp	r2, #1
 8009952:	f240 80a8 	bls.w	8009aa6 <ai_platform_network_create+0x186>
 8009956:	f240 4249 	movw	r2, #1097	; 0x449
 800995a:	4293      	cmp	r3, r2
 800995c:	f000 80a3 	beq.w	8009aa6 <ai_platform_network_create+0x186>
 8009960:	4a9d      	ldr	r2, [pc, #628]	; (8009bd8 <ai_platform_network_create+0x2b8>)
 8009962:	6813      	ldr	r3, [r2, #0]
 8009964:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009968:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800996c:	f000 80b9 	beq.w	8009ae2 <ai_platform_network_create+0x1c2>
 8009970:	6813      	ldr	r3, [r2, #0]
 8009972:	f240 4c83 	movw	ip, #1155	; 0x483
 8009976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800997a:	4563      	cmp	r3, ip
 800997c:	f000 80a1 	beq.w	8009ac2 <ai_platform_network_create+0x1a2>
 8009980:	6813      	ldr	r3, [r2, #0]
 8009982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009986:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800998a:	f000 8153 	beq.w	8009c34 <ai_platform_network_create+0x314>
 800998e:	6813      	ldr	r3, [r2, #0]
 8009990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009994:	2b00      	cmp	r3, #0
 8009996:	f040 808d 	bne.w	8009ab4 <ai_platform_network_create+0x194>
 800999a:	4a90      	ldr	r2, [pc, #576]	; (8009bdc <ai_platform_network_create+0x2bc>)
 800999c:	2318      	movs	r3, #24
 800999e:	6093      	str	r3, [r2, #8]
 80099a0:	6893      	ldr	r3, [r2, #8]
 80099a2:	2b18      	cmp	r3, #24
 80099a4:	f040 8086 	bne.w	8009ab4 <ai_platform_network_create+0x194>
 80099a8:	2301      	movs	r3, #1
 80099aa:	6093      	str	r3, [r2, #8]
 80099ac:	6893      	ldr	r3, [r2, #8]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1fc      	bne.n	80099ac <ai_platform_network_create+0x8c>
 80099b2:	4608      	mov	r0, r1
 80099b4:	f7fe fece 	bl	8008754 <_ai_platform_release_crc>
 80099b8:	f7fe feca 	bl	8008750 <_ai_platform_acquire_crc>
 80099bc:	4b85      	ldr	r3, [pc, #532]	; (8009bd4 <ai_platform_network_create+0x2b4>)
 80099be:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099c8:	189a      	adds	r2, r3, r2
 80099ca:	2a01      	cmp	r2, #1
 80099cc:	f240 809f 	bls.w	8009b0e <ai_platform_network_create+0x1ee>
 80099d0:	f240 4249 	movw	r2, #1097	; 0x449
 80099d4:	4293      	cmp	r3, r2
 80099d6:	f000 809a 	beq.w	8009b0e <ai_platform_network_create+0x1ee>
 80099da:	4a7f      	ldr	r2, [pc, #508]	; (8009bd8 <ai_platform_network_create+0x2b8>)
 80099dc:	6813      	ldr	r3, [r2, #0]
 80099de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099e2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80099e6:	f000 80a0 	beq.w	8009b2a <ai_platform_network_create+0x20a>
 80099ea:	6813      	ldr	r3, [r2, #0]
 80099ec:	f240 4183 	movw	r1, #1155	; 0x483
 80099f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80099f4:	428b      	cmp	r3, r1
 80099f6:	f000 80bf 	beq.w	8009b78 <ai_platform_network_create+0x258>
 80099fa:	6813      	ldr	r3, [r2, #0]
 80099fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a00:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009a04:	f000 8123 	beq.w	8009c4e <ai_platform_network_create+0x32e>
 8009a08:	6813      	ldr	r3, [r2, #0]
 8009a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 80c4 	beq.w	8009b9c <ai_platform_network_create+0x27c>
 8009a14:	f7fe fe9e 	bl	8008754 <_ai_platform_release_crc>
 8009a18:	2c00      	cmp	r4, #0
 8009a1a:	f000 80aa 	beq.w	8009b72 <ai_platform_network_create+0x252>
 8009a1e:	4b70      	ldr	r3, [pc, #448]	; (8009be0 <ai_platform_network_create+0x2c0>)
 8009a20:	602b      	str	r3, [r5, #0]
 8009a22:	6025      	str	r5, [r4, #0]
 8009a24:	f001 f962 	bl	800acec <core_init>
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	f000 8090 	beq.w	8009b4e <ai_platform_network_create+0x22e>
 8009a2e:	f7fe fe8f 	bl	8008750 <_ai_platform_acquire_crc>
 8009a32:	4b68      	ldr	r3, [pc, #416]	; (8009bd4 <ai_platform_network_create+0x2b4>)
 8009a34:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a3e:	185a      	adds	r2, r3, r1
 8009a40:	2a01      	cmp	r2, #1
 8009a42:	f240 80b9 	bls.w	8009bb8 <ai_platform_network_create+0x298>
 8009a46:	f240 4249 	movw	r2, #1097	; 0x449
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	f000 80b4 	beq.w	8009bb8 <ai_platform_network_create+0x298>
 8009a50:	4a61      	ldr	r2, [pc, #388]	; (8009bd8 <ai_platform_network_create+0x2b8>)
 8009a52:	6813      	ldr	r3, [r2, #0]
 8009a54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a58:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009a5c:	f000 80c8 	beq.w	8009bf0 <ai_platform_network_create+0x2d0>
 8009a60:	6813      	ldr	r3, [r2, #0]
 8009a62:	f240 4183 	movw	r1, #1155	; 0x483
 8009a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a6a:	428b      	cmp	r3, r1
 8009a6c:	f000 8107 	beq.w	8009c7e <ai_platform_network_create+0x35e>
 8009a70:	6813      	ldr	r3, [r2, #0]
 8009a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a76:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009a7a:	f000 8111 	beq.w	8009ca0 <ai_platform_network_create+0x380>
 8009a7e:	6813      	ldr	r3, [r2, #0]
 8009a80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f040 80c3 	bne.w	8009c10 <ai_platform_network_create+0x2f0>
 8009a8a:	4b54      	ldr	r3, [pc, #336]	; (8009bdc <ai_platform_network_create+0x2bc>)
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	609a      	str	r2, [r3, #8]
 8009a90:	689a      	ldr	r2, [r3, #8]
 8009a92:	2a00      	cmp	r2, #0
 8009a94:	d1fc      	bne.n	8009a90 <ai_platform_network_create+0x170>
 8009a96:	4a53      	ldr	r2, [pc, #332]	; (8009be4 <ai_platform_network_create+0x2c4>)
 8009a98:	601a      	str	r2, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	4b52      	ldr	r3, [pc, #328]	; (8009be8 <ai_platform_network_create+0x2c8>)
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	f000 80b6 	beq.w	8009c10 <ai_platform_network_create+0x2f0>
 8009aa4:	e7fe      	b.n	8009aa4 <ai_platform_network_create+0x184>
 8009aa6:	4b4d      	ldr	r3, [pc, #308]	; (8009bdc <ai_platform_network_create+0x2bc>)
 8009aa8:	2218      	movs	r2, #24
 8009aaa:	609a      	str	r2, [r3, #8]
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	2a18      	cmp	r2, #24
 8009ab0:	d027      	beq.n	8009b02 <ai_platform_network_create+0x1e2>
 8009ab2:	4608      	mov	r0, r1
 8009ab4:	f7fe fe4e 	bl	8008754 <_ai_platform_release_crc>
 8009ab8:	f244 1033 	movw	r0, #16691	; 0x4133
 8009abc:	b003      	add	sp, #12
 8009abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ac2:	4a4a      	ldr	r2, [pc, #296]	; (8009bec <ai_platform_network_create+0x2cc>)
 8009ac4:	2318      	movs	r3, #24
 8009ac6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009aca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009ace:	2b18      	cmp	r3, #24
 8009ad0:	d1f0      	bne.n	8009ab4 <ai_platform_network_create+0x194>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009ad8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d1fb      	bne.n	8009ad8 <ai_platform_network_create+0x1b8>
 8009ae0:	e767      	b.n	80099b2 <ai_platform_network_create+0x92>
 8009ae2:	4a42      	ldr	r2, [pc, #264]	; (8009bec <ai_platform_network_create+0x2cc>)
 8009ae4:	2318      	movs	r3, #24
 8009ae6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009aea:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009aee:	2b18      	cmp	r3, #24
 8009af0:	d1e0      	bne.n	8009ab4 <ai_platform_network_create+0x194>
 8009af2:	2301      	movs	r3, #1
 8009af4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009af8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1fb      	bne.n	8009af8 <ai_platform_network_create+0x1d8>
 8009b00:	e757      	b.n	80099b2 <ai_platform_network_create+0x92>
 8009b02:	2201      	movs	r2, #1
 8009b04:	609a      	str	r2, [r3, #8]
 8009b06:	689a      	ldr	r2, [r3, #8]
 8009b08:	2a00      	cmp	r2, #0
 8009b0a:	d1fc      	bne.n	8009b06 <ai_platform_network_create+0x1e6>
 8009b0c:	e751      	b.n	80099b2 <ai_platform_network_create+0x92>
 8009b0e:	4a33      	ldr	r2, [pc, #204]	; (8009bdc <ai_platform_network_create+0x2bc>)
 8009b10:	2301      	movs	r3, #1
 8009b12:	6093      	str	r3, [r2, #8]
 8009b14:	6891      	ldr	r1, [r2, #8]
 8009b16:	2900      	cmp	r1, #0
 8009b18:	d1fc      	bne.n	8009b14 <ai_platform_network_create+0x1f4>
 8009b1a:	4b32      	ldr	r3, [pc, #200]	; (8009be4 <ai_platform_network_create+0x2c4>)
 8009b1c:	6013      	str	r3, [r2, #0]
 8009b1e:	4b32      	ldr	r3, [pc, #200]	; (8009be8 <ai_platform_network_create+0x2c8>)
 8009b20:	6812      	ldr	r2, [r2, #0]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	f43f af76 	beq.w	8009a14 <ai_platform_network_create+0xf4>
 8009b28:	e7fe      	b.n	8009b28 <ai_platform_network_create+0x208>
 8009b2a:	4a30      	ldr	r2, [pc, #192]	; (8009bec <ai_platform_network_create+0x2cc>)
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009b32:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1fb      	bne.n	8009b32 <ai_platform_network_create+0x212>
 8009b3a:	4b2a      	ldr	r3, [pc, #168]	; (8009be4 <ai_platform_network_create+0x2c4>)
 8009b3c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009b40:	4b29      	ldr	r3, [pc, #164]	; (8009be8 <ai_platform_network_create+0x2c8>)
 8009b42:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009b46:	429a      	cmp	r2, r3
 8009b48:	f43f af64 	beq.w	8009a14 <ai_platform_network_create+0xf4>
 8009b4c:	e7fe      	b.n	8009b4c <ai_platform_network_create+0x22c>
 8009b4e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8009b52:	2300      	movs	r3, #0
 8009b54:	6023      	str	r3, [r4, #0]
 8009b56:	2410      	movs	r4, #16
 8009b58:	4642      	mov	r2, r8
 8009b5a:	4639      	mov	r1, r7
 8009b5c:	4630      	mov	r0, r6
 8009b5e:	f7fe fc29 	bl	80083b4 <ai_version_get>
 8009b62:	4603      	mov	r3, r0
 8009b64:	2000      	movs	r0, #0
 8009b66:	64ab      	str	r3, [r5, #72]	; 0x48
 8009b68:	f369 0007 	bfi	r0, r9, #0, #8
 8009b6c:	f364 201f 	bfi	r0, r4, #8, #24
 8009b70:	e7a4      	b.n	8009abc <ai_platform_network_create+0x19c>
 8009b72:	f241 0010 	movw	r0, #4112	; 0x1010
 8009b76:	e7a1      	b.n	8009abc <ai_platform_network_create+0x19c>
 8009b78:	4a1c      	ldr	r2, [pc, #112]	; (8009bec <ai_platform_network_create+0x2cc>)
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009b80:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1fb      	bne.n	8009b80 <ai_platform_network_create+0x260>
 8009b88:	4b16      	ldr	r3, [pc, #88]	; (8009be4 <ai_platform_network_create+0x2c4>)
 8009b8a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009b8e:	4b16      	ldr	r3, [pc, #88]	; (8009be8 <ai_platform_network_create+0x2c8>)
 8009b90:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009b94:	429a      	cmp	r2, r3
 8009b96:	f43f af3d 	beq.w	8009a14 <ai_platform_network_create+0xf4>
 8009b9a:	e7fe      	b.n	8009b9a <ai_platform_network_create+0x27a>
 8009b9c:	4a0f      	ldr	r2, [pc, #60]	; (8009bdc <ai_platform_network_create+0x2bc>)
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	6093      	str	r3, [r2, #8]
 8009ba2:	6893      	ldr	r3, [r2, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1fc      	bne.n	8009ba2 <ai_platform_network_create+0x282>
 8009ba8:	4b0e      	ldr	r3, [pc, #56]	; (8009be4 <ai_platform_network_create+0x2c4>)
 8009baa:	6013      	str	r3, [r2, #0]
 8009bac:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <ai_platform_network_create+0x2c8>)
 8009bae:	6812      	ldr	r2, [r2, #0]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	f43f af2f 	beq.w	8009a14 <ai_platform_network_create+0xf4>
 8009bb6:	e7fe      	b.n	8009bb6 <ai_platform_network_create+0x296>
 8009bb8:	4a08      	ldr	r2, [pc, #32]	; (8009bdc <ai_platform_network_create+0x2bc>)
 8009bba:	2301      	movs	r3, #1
 8009bbc:	6093      	str	r3, [r2, #8]
 8009bbe:	6893      	ldr	r3, [r2, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1fc      	bne.n	8009bbe <ai_platform_network_create+0x29e>
 8009bc4:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <ai_platform_network_create+0x2c4>)
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	4b07      	ldr	r3, [pc, #28]	; (8009be8 <ai_platform_network_create+0x2c8>)
 8009bca:	6812      	ldr	r2, [r2, #0]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d01f      	beq.n	8009c10 <ai_platform_network_create+0x2f0>
 8009bd0:	e7fe      	b.n	8009bd0 <ai_platform_network_create+0x2b0>
 8009bd2:	bf00      	nop
 8009bd4:	e0042000 	.word	0xe0042000
 8009bd8:	5c001000 	.word	0x5c001000
 8009bdc:	40023000 	.word	0x40023000
 8009be0:	a1c00100 	.word	0xa1c00100
 8009be4:	f407a5c2 	.word	0xf407a5c2
 8009be8:	b5e8b5cd 	.word	0xb5e8b5cd
 8009bec:	58024000 	.word	0x58024000
 8009bf0:	4a33      	ldr	r2, [pc, #204]	; (8009cc0 <ai_platform_network_create+0x3a0>)
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009bf8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1fb      	bne.n	8009bf8 <ai_platform_network_create+0x2d8>
 8009c00:	4b30      	ldr	r3, [pc, #192]	; (8009cc4 <ai_platform_network_create+0x3a4>)
 8009c02:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8009c06:	4b30      	ldr	r3, [pc, #192]	; (8009cc8 <ai_platform_network_create+0x3a8>)
 8009c08:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d12c      	bne.n	8009c6a <ai_platform_network_create+0x34a>
 8009c10:	f7fe fda0 	bl	8008754 <_ai_platform_release_crc>
 8009c14:	2200      	movs	r2, #0
 8009c16:	4639      	mov	r1, r7
 8009c18:	4630      	mov	r0, r6
 8009c1a:	f7fe fbcb 	bl	80083b4 <ai_version_get>
 8009c1e:	4681      	mov	r9, r0
 8009c20:	2200      	movs	r2, #0
 8009c22:	2105      	movs	r1, #5
 8009c24:	2001      	movs	r0, #1
 8009c26:	f7fe fbc5 	bl	80083b4 <ai_version_get>
 8009c2a:	4581      	cmp	r9, r0
 8009c2c:	d01e      	beq.n	8009c6c <ai_platform_network_create+0x34c>
 8009c2e:	f04f 0901 	mov.w	r9, #1
 8009c32:	e78e      	b.n	8009b52 <ai_platform_network_create+0x232>
 8009c34:	4b25      	ldr	r3, [pc, #148]	; (8009ccc <ai_platform_network_create+0x3ac>)
 8009c36:	2218      	movs	r2, #24
 8009c38:	609a      	str	r2, [r3, #8]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	2a18      	cmp	r2, #24
 8009c3e:	f47f af39 	bne.w	8009ab4 <ai_platform_network_create+0x194>
 8009c42:	2201      	movs	r2, #1
 8009c44:	609a      	str	r2, [r3, #8]
 8009c46:	689a      	ldr	r2, [r3, #8]
 8009c48:	2a00      	cmp	r2, #0
 8009c4a:	d1fc      	bne.n	8009c46 <ai_platform_network_create+0x326>
 8009c4c:	e6b1      	b.n	80099b2 <ai_platform_network_create+0x92>
 8009c4e:	4a1f      	ldr	r2, [pc, #124]	; (8009ccc <ai_platform_network_create+0x3ac>)
 8009c50:	2301      	movs	r3, #1
 8009c52:	6093      	str	r3, [r2, #8]
 8009c54:	6893      	ldr	r3, [r2, #8]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1fc      	bne.n	8009c54 <ai_platform_network_create+0x334>
 8009c5a:	4b1a      	ldr	r3, [pc, #104]	; (8009cc4 <ai_platform_network_create+0x3a4>)
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	4b1a      	ldr	r3, [pc, #104]	; (8009cc8 <ai_platform_network_create+0x3a8>)
 8009c60:	6812      	ldr	r2, [r2, #0]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	f43f aed6 	beq.w	8009a14 <ai_platform_network_create+0xf4>
 8009c68:	e7fe      	b.n	8009c68 <ai_platform_network_create+0x348>
 8009c6a:	e7fe      	b.n	8009c6a <ai_platform_network_create+0x34a>
 8009c6c:	4b18      	ldr	r3, [pc, #96]	; (8009cd0 <ai_platform_network_create+0x3b0>)
 8009c6e:	a801      	add	r0, sp, #4
 8009c70:	9301      	str	r3, [sp, #4]
 8009c72:	f003 f851 	bl	800cd18 <ai_check_custom_types>
 8009c76:	b300      	cbz	r0, 8009cba <ai_platform_network_create+0x39a>
 8009c78:	2400      	movs	r4, #0
 8009c7a:	46a1      	mov	r9, r4
 8009c7c:	e76c      	b.n	8009b58 <ai_platform_network_create+0x238>
 8009c7e:	4b10      	ldr	r3, [pc, #64]	; (8009cc0 <ai_platform_network_create+0x3a0>)
 8009c80:	2201      	movs	r2, #1
 8009c82:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8009c86:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8009c8a:	2a00      	cmp	r2, #0
 8009c8c:	d1fb      	bne.n	8009c86 <ai_platform_network_create+0x366>
 8009c8e:	4a0d      	ldr	r2, [pc, #52]	; (8009cc4 <ai_platform_network_create+0x3a4>)
 8009c90:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8009c94:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8009c98:	4b0b      	ldr	r3, [pc, #44]	; (8009cc8 <ai_platform_network_create+0x3a8>)
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d0b8      	beq.n	8009c10 <ai_platform_network_create+0x2f0>
 8009c9e:	e7fe      	b.n	8009c9e <ai_platform_network_create+0x37e>
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	; (8009ccc <ai_platform_network_create+0x3ac>)
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	609a      	str	r2, [r3, #8]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	2a00      	cmp	r2, #0
 8009caa:	d1fc      	bne.n	8009ca6 <ai_platform_network_create+0x386>
 8009cac:	4a05      	ldr	r2, [pc, #20]	; (8009cc4 <ai_platform_network_create+0x3a4>)
 8009cae:	601a      	str	r2, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	4b05      	ldr	r3, [pc, #20]	; (8009cc8 <ai_platform_network_create+0x3a8>)
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d0ab      	beq.n	8009c10 <ai_platform_network_create+0x2f0>
 8009cb8:	e7fe      	b.n	8009cb8 <ai_platform_network_create+0x398>
 8009cba:	f04f 0902 	mov.w	r9, #2
 8009cbe:	e748      	b.n	8009b52 <ai_platform_network_create+0x232>
 8009cc0:	58024000 	.word	0x58024000
 8009cc4:	f407a5c2 	.word	0xf407a5c2
 8009cc8:	b5e8b5cd 	.word	0xb5e8b5cd
 8009ccc:	40023000 	.word	0x40023000
 8009cd0:	84048403 	.word	0x84048403

08009cd4 <ai_platform_network_destroy>:
 8009cd4:	b510      	push	{r4, lr}
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	d03d      	beq.n	8009d58 <ai_platform_network_destroy+0x84>
 8009cdc:	4b7a      	ldr	r3, [pc, #488]	; (8009ec8 <ai_platform_network_destroy+0x1f4>)
 8009cde:	6802      	ldr	r2, [r0, #0]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d139      	bne.n	8009d58 <ai_platform_network_destroy+0x84>
 8009ce4:	f7fe fd34 	bl	8008750 <_ai_platform_acquire_crc>
 8009ce8:	4b78      	ldr	r3, [pc, #480]	; (8009ecc <ai_platform_network_destroy+0x1f8>)
 8009cea:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cf4:	189a      	adds	r2, r3, r2
 8009cf6:	2a01      	cmp	r2, #1
 8009cf8:	f240 8084 	bls.w	8009e04 <ai_platform_network_destroy+0x130>
 8009cfc:	f240 4249 	movw	r2, #1097	; 0x449
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d07f      	beq.n	8009e04 <ai_platform_network_destroy+0x130>
 8009d04:	4a72      	ldr	r2, [pc, #456]	; (8009ed0 <ai_platform_network_destroy+0x1fc>)
 8009d06:	6813      	ldr	r3, [r2, #0]
 8009d08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d0c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009d10:	f000 8086 	beq.w	8009e20 <ai_platform_network_destroy+0x14c>
 8009d14:	6813      	ldr	r3, [r2, #0]
 8009d16:	f240 4183 	movw	r1, #1155	; 0x483
 8009d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d1e:	428b      	cmp	r3, r1
 8009d20:	f000 80a7 	beq.w	8009e72 <ai_platform_network_destroy+0x19e>
 8009d24:	6813      	ldr	r3, [r2, #0]
 8009d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d2a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009d2e:	f000 80be 	beq.w	8009eae <ai_platform_network_destroy+0x1da>
 8009d32:	6813      	ldr	r3, [r2, #0]
 8009d34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	f040 8081 	bne.w	8009e40 <ai_platform_network_destroy+0x16c>
 8009d3e:	4a65      	ldr	r2, [pc, #404]	; (8009ed4 <ai_platform_network_destroy+0x200>)
 8009d40:	2301      	movs	r3, #1
 8009d42:	6093      	str	r3, [r2, #8]
 8009d44:	6893      	ldr	r3, [r2, #8]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d1fc      	bne.n	8009d44 <ai_platform_network_destroy+0x70>
 8009d4a:	4963      	ldr	r1, [pc, #396]	; (8009ed8 <ai_platform_network_destroy+0x204>)
 8009d4c:	4b63      	ldr	r3, [pc, #396]	; (8009edc <ai_platform_network_destroy+0x208>)
 8009d4e:	6011      	str	r1, [r2, #0]
 8009d50:	6812      	ldr	r2, [r2, #0]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d074      	beq.n	8009e40 <ai_platform_network_destroy+0x16c>
 8009d56:	e7fe      	b.n	8009d56 <ai_platform_network_destroy+0x82>
 8009d58:	f7fe fcfa 	bl	8008750 <_ai_platform_acquire_crc>
 8009d5c:	4b5b      	ldr	r3, [pc, #364]	; (8009ecc <ai_platform_network_destroy+0x1f8>)
 8009d5e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d68:	185a      	adds	r2, r3, r1
 8009d6a:	2a01      	cmp	r2, #1
 8009d6c:	d929      	bls.n	8009dc2 <ai_platform_network_destroy+0xee>
 8009d6e:	f240 4249 	movw	r2, #1097	; 0x449
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d025      	beq.n	8009dc2 <ai_platform_network_destroy+0xee>
 8009d76:	4a56      	ldr	r2, [pc, #344]	; (8009ed0 <ai_platform_network_destroy+0x1fc>)
 8009d78:	6813      	ldr	r3, [r2, #0]
 8009d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d7e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009d82:	d02b      	beq.n	8009ddc <ai_platform_network_destroy+0x108>
 8009d84:	6813      	ldr	r3, [r2, #0]
 8009d86:	f240 4183 	movw	r1, #1155	; 0x483
 8009d8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d8e:	428b      	cmp	r3, r1
 8009d90:	d05e      	beq.n	8009e50 <ai_platform_network_destroy+0x17c>
 8009d92:	6813      	ldr	r3, [r2, #0]
 8009d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d98:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009d9c:	d07a      	beq.n	8009e94 <ai_platform_network_destroy+0x1c0>
 8009d9e:	6813      	ldr	r3, [r2, #0]
 8009da0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d129      	bne.n	8009dfc <ai_platform_network_destroy+0x128>
 8009da8:	4a4a      	ldr	r2, [pc, #296]	; (8009ed4 <ai_platform_network_destroy+0x200>)
 8009daa:	2301      	movs	r3, #1
 8009dac:	6093      	str	r3, [r2, #8]
 8009dae:	6893      	ldr	r3, [r2, #8]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1fc      	bne.n	8009dae <ai_platform_network_destroy+0xda>
 8009db4:	4948      	ldr	r1, [pc, #288]	; (8009ed8 <ai_platform_network_destroy+0x204>)
 8009db6:	4b49      	ldr	r3, [pc, #292]	; (8009edc <ai_platform_network_destroy+0x208>)
 8009db8:	6011      	str	r1, [r2, #0]
 8009dba:	6812      	ldr	r2, [r2, #0]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d01d      	beq.n	8009dfc <ai_platform_network_destroy+0x128>
 8009dc0:	e7fe      	b.n	8009dc0 <ai_platform_network_destroy+0xec>
 8009dc2:	4a44      	ldr	r2, [pc, #272]	; (8009ed4 <ai_platform_network_destroy+0x200>)
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	6093      	str	r3, [r2, #8]
 8009dc8:	6893      	ldr	r3, [r2, #8]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1fc      	bne.n	8009dc8 <ai_platform_network_destroy+0xf4>
 8009dce:	4942      	ldr	r1, [pc, #264]	; (8009ed8 <ai_platform_network_destroy+0x204>)
 8009dd0:	4b42      	ldr	r3, [pc, #264]	; (8009edc <ai_platform_network_destroy+0x208>)
 8009dd2:	6011      	str	r1, [r2, #0]
 8009dd4:	6812      	ldr	r2, [r2, #0]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d010      	beq.n	8009dfc <ai_platform_network_destroy+0x128>
 8009dda:	e7fe      	b.n	8009dda <ai_platform_network_destroy+0x106>
 8009ddc:	4a40      	ldr	r2, [pc, #256]	; (8009ee0 <ai_platform_network_destroy+0x20c>)
 8009dde:	2301      	movs	r3, #1
 8009de0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009de4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1fb      	bne.n	8009de4 <ai_platform_network_destroy+0x110>
 8009dec:	493a      	ldr	r1, [pc, #232]	; (8009ed8 <ai_platform_network_destroy+0x204>)
 8009dee:	4b3b      	ldr	r3, [pc, #236]	; (8009edc <ai_platform_network_destroy+0x208>)
 8009df0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009df4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d110      	bne.n	8009e1e <ai_platform_network_destroy+0x14a>
 8009dfc:	f7fe fcaa 	bl	8008754 <_ai_platform_release_crc>
 8009e00:	4620      	mov	r0, r4
 8009e02:	bd10      	pop	{r4, pc}
 8009e04:	4a33      	ldr	r2, [pc, #204]	; (8009ed4 <ai_platform_network_destroy+0x200>)
 8009e06:	2301      	movs	r3, #1
 8009e08:	6093      	str	r3, [r2, #8]
 8009e0a:	6893      	ldr	r3, [r2, #8]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1fc      	bne.n	8009e0a <ai_platform_network_destroy+0x136>
 8009e10:	4931      	ldr	r1, [pc, #196]	; (8009ed8 <ai_platform_network_destroy+0x204>)
 8009e12:	4b32      	ldr	r3, [pc, #200]	; (8009edc <ai_platform_network_destroy+0x208>)
 8009e14:	6011      	str	r1, [r2, #0]
 8009e16:	6812      	ldr	r2, [r2, #0]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d011      	beq.n	8009e40 <ai_platform_network_destroy+0x16c>
 8009e1c:	e7fe      	b.n	8009e1c <ai_platform_network_destroy+0x148>
 8009e1e:	e7fe      	b.n	8009e1e <ai_platform_network_destroy+0x14a>
 8009e20:	4a2f      	ldr	r2, [pc, #188]	; (8009ee0 <ai_platform_network_destroy+0x20c>)
 8009e22:	2301      	movs	r3, #1
 8009e24:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009e28:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1fb      	bne.n	8009e28 <ai_platform_network_destroy+0x154>
 8009e30:	4929      	ldr	r1, [pc, #164]	; (8009ed8 <ai_platform_network_destroy+0x204>)
 8009e32:	4b2a      	ldr	r3, [pc, #168]	; (8009edc <ai_platform_network_destroy+0x208>)
 8009e34:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009e38:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d106      	bne.n	8009e4e <ai_platform_network_destroy+0x17a>
 8009e40:	f7fe fc88 	bl	8008754 <_ai_platform_release_crc>
 8009e44:	4620      	mov	r0, r4
 8009e46:	f002 fff9 	bl	800ce3c <ai_layers_destroy_all>
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	bd10      	pop	{r4, pc}
 8009e4e:	e7fe      	b.n	8009e4e <ai_platform_network_destroy+0x17a>
 8009e50:	4a23      	ldr	r2, [pc, #140]	; (8009ee0 <ai_platform_network_destroy+0x20c>)
 8009e52:	2301      	movs	r3, #1
 8009e54:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009e58:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d1fb      	bne.n	8009e58 <ai_platform_network_destroy+0x184>
 8009e60:	491d      	ldr	r1, [pc, #116]	; (8009ed8 <ai_platform_network_destroy+0x204>)
 8009e62:	4b1e      	ldr	r3, [pc, #120]	; (8009edc <ai_platform_network_destroy+0x208>)
 8009e64:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009e68:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d0c5      	beq.n	8009dfc <ai_platform_network_destroy+0x128>
 8009e70:	e7fe      	b.n	8009e70 <ai_platform_network_destroy+0x19c>
 8009e72:	4a1b      	ldr	r2, [pc, #108]	; (8009ee0 <ai_platform_network_destroy+0x20c>)
 8009e74:	2301      	movs	r3, #1
 8009e76:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8009e7a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1fb      	bne.n	8009e7a <ai_platform_network_destroy+0x1a6>
 8009e82:	4915      	ldr	r1, [pc, #84]	; (8009ed8 <ai_platform_network_destroy+0x204>)
 8009e84:	4b15      	ldr	r3, [pc, #84]	; (8009edc <ai_platform_network_destroy+0x208>)
 8009e86:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8009e8a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d0d6      	beq.n	8009e40 <ai_platform_network_destroy+0x16c>
 8009e92:	e7fe      	b.n	8009e92 <ai_platform_network_destroy+0x1be>
 8009e94:	4a0f      	ldr	r2, [pc, #60]	; (8009ed4 <ai_platform_network_destroy+0x200>)
 8009e96:	2301      	movs	r3, #1
 8009e98:	6093      	str	r3, [r2, #8]
 8009e9a:	6893      	ldr	r3, [r2, #8]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d1fc      	bne.n	8009e9a <ai_platform_network_destroy+0x1c6>
 8009ea0:	490d      	ldr	r1, [pc, #52]	; (8009ed8 <ai_platform_network_destroy+0x204>)
 8009ea2:	4b0e      	ldr	r3, [pc, #56]	; (8009edc <ai_platform_network_destroy+0x208>)
 8009ea4:	6011      	str	r1, [r2, #0]
 8009ea6:	6812      	ldr	r2, [r2, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d0a7      	beq.n	8009dfc <ai_platform_network_destroy+0x128>
 8009eac:	e7fe      	b.n	8009eac <ai_platform_network_destroy+0x1d8>
 8009eae:	4a09      	ldr	r2, [pc, #36]	; (8009ed4 <ai_platform_network_destroy+0x200>)
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	6093      	str	r3, [r2, #8]
 8009eb4:	6893      	ldr	r3, [r2, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1fc      	bne.n	8009eb4 <ai_platform_network_destroy+0x1e0>
 8009eba:	4907      	ldr	r1, [pc, #28]	; (8009ed8 <ai_platform_network_destroy+0x204>)
 8009ebc:	4b07      	ldr	r3, [pc, #28]	; (8009edc <ai_platform_network_destroy+0x208>)
 8009ebe:	6011      	str	r1, [r2, #0]
 8009ec0:	6812      	ldr	r2, [r2, #0]
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d0bc      	beq.n	8009e40 <ai_platform_network_destroy+0x16c>
 8009ec6:	e7fe      	b.n	8009ec6 <ai_platform_network_destroy+0x1f2>
 8009ec8:	a1c00100 	.word	0xa1c00100
 8009ecc:	e0042000 	.word	0xe0042000
 8009ed0:	5c001000 	.word	0x5c001000
 8009ed4:	40023000 	.word	0x40023000
 8009ed8:	f407a5c2 	.word	0xf407a5c2
 8009edc:	b5e8b5cd 	.word	0xb5e8b5cd
 8009ee0:	58024000 	.word	0x58024000

08009ee4 <ai_platform_network_init>:
 8009ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ee8:	2800      	cmp	r0, #0
 8009eea:	d052      	beq.n	8009f92 <ai_platform_network_init+0xae>
 8009eec:	4bab      	ldr	r3, [pc, #684]	; (800a19c <ai_platform_network_init+0x2b8>)
 8009eee:	4604      	mov	r4, r0
 8009ef0:	6802      	ldr	r2, [r0, #0]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d14d      	bne.n	8009f92 <ai_platform_network_init+0xae>
 8009ef6:	460d      	mov	r5, r1
 8009ef8:	f7fe fc2a 	bl	8008750 <_ai_platform_acquire_crc>
 8009efc:	4ba8      	ldr	r3, [pc, #672]	; (800a1a0 <ai_platform_network_init+0x2bc>)
 8009efe:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f08:	189a      	adds	r2, r3, r2
 8009f0a:	2a01      	cmp	r2, #1
 8009f0c:	f240 809b 	bls.w	800a046 <ai_platform_network_init+0x162>
 8009f10:	f240 4249 	movw	r2, #1097	; 0x449
 8009f14:	4293      	cmp	r3, r2
 8009f16:	f000 8096 	beq.w	800a046 <ai_platform_network_init+0x162>
 8009f1a:	4aa2      	ldr	r2, [pc, #648]	; (800a1a4 <ai_platform_network_init+0x2c0>)
 8009f1c:	6813      	ldr	r3, [r2, #0]
 8009f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f22:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009f26:	f000 809d 	beq.w	800a064 <ai_platform_network_init+0x180>
 8009f2a:	6813      	ldr	r3, [r2, #0]
 8009f2c:	f240 4183 	movw	r1, #1155	; 0x483
 8009f30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f34:	428b      	cmp	r3, r1
 8009f36:	f000 80e4 	beq.w	800a102 <ai_platform_network_init+0x21e>
 8009f3a:	6813      	ldr	r3, [r2, #0]
 8009f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f40:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009f44:	f000 811b 	beq.w	800a17e <ai_platform_network_init+0x29a>
 8009f48:	6813      	ldr	r3, [r2, #0]
 8009f4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 80f9 	beq.w	800a146 <ai_platform_network_init+0x262>
 8009f54:	f7fe fbfe 	bl	8008754 <_ai_platform_release_crc>
 8009f58:	2d00      	cmp	r5, #0
 8009f5a:	f000 8147 	beq.w	800a1ec <ai_platform_network_init+0x308>
 8009f5e:	4b92      	ldr	r3, [pc, #584]	; (800a1a8 <ai_platform_network_init+0x2c4>)
 8009f60:	682a      	ldr	r2, [r5, #0]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	f040 8090 	bne.w	800a088 <ai_platform_network_init+0x1a4>
 8009f68:	692b      	ldr	r3, [r5, #16]
 8009f6a:	89ae      	ldrh	r6, [r5, #12]
 8009f6c:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8009f70:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8009f74:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f76:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	84a6      	strh	r6, [r4, #36]	; 0x24
 8009f7e:	4626      	mov	r6, r4
 8009f80:	4620      	mov	r0, r4
 8009f82:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8009f86:	60e3      	str	r3, [r4, #12]
 8009f88:	f002 feee 	bl	800cd68 <ai_layers_init_all>
 8009f8c:	4630      	mov	r0, r6
 8009f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f92:	f7fe fbdd 	bl	8008750 <_ai_platform_acquire_crc>
 8009f96:	4b82      	ldr	r3, [pc, #520]	; (800a1a0 <ai_platform_network_init+0x2bc>)
 8009f98:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fa2:	185a      	adds	r2, r3, r1
 8009fa4:	2a01      	cmp	r2, #1
 8009fa6:	d92b      	bls.n	800a000 <ai_platform_network_init+0x11c>
 8009fa8:	f240 4249 	movw	r2, #1097	; 0x449
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d027      	beq.n	800a000 <ai_platform_network_init+0x11c>
 8009fb0:	4a7c      	ldr	r2, [pc, #496]	; (800a1a4 <ai_platform_network_init+0x2c0>)
 8009fb2:	6813      	ldr	r3, [r2, #0]
 8009fb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fb8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8009fbc:	d02d      	beq.n	800a01a <ai_platform_network_init+0x136>
 8009fbe:	6813      	ldr	r3, [r2, #0]
 8009fc0:	f240 4183 	movw	r1, #1155	; 0x483
 8009fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fc8:	428b      	cmp	r3, r1
 8009fca:	f000 8089 	beq.w	800a0e0 <ai_platform_network_init+0x1fc>
 8009fce:	6813      	ldr	r3, [r2, #0]
 8009fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fd4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8009fd8:	f000 80c3 	beq.w	800a162 <ai_platform_network_init+0x27e>
 8009fdc:	6813      	ldr	r3, [r2, #0]
 8009fde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d129      	bne.n	800a03a <ai_platform_network_init+0x156>
 8009fe6:	4a71      	ldr	r2, [pc, #452]	; (800a1ac <ai_platform_network_init+0x2c8>)
 8009fe8:	2301      	movs	r3, #1
 8009fea:	6093      	str	r3, [r2, #8]
 8009fec:	6893      	ldr	r3, [r2, #8]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d1fc      	bne.n	8009fec <ai_platform_network_init+0x108>
 8009ff2:	496f      	ldr	r1, [pc, #444]	; (800a1b0 <ai_platform_network_init+0x2cc>)
 8009ff4:	4b6f      	ldr	r3, [pc, #444]	; (800a1b4 <ai_platform_network_init+0x2d0>)
 8009ff6:	6011      	str	r1, [r2, #0]
 8009ff8:	6812      	ldr	r2, [r2, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d01d      	beq.n	800a03a <ai_platform_network_init+0x156>
 8009ffe:	e7fe      	b.n	8009ffe <ai_platform_network_init+0x11a>
 800a000:	4a6a      	ldr	r2, [pc, #424]	; (800a1ac <ai_platform_network_init+0x2c8>)
 800a002:	2301      	movs	r3, #1
 800a004:	6093      	str	r3, [r2, #8]
 800a006:	6893      	ldr	r3, [r2, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1fc      	bne.n	800a006 <ai_platform_network_init+0x122>
 800a00c:	4968      	ldr	r1, [pc, #416]	; (800a1b0 <ai_platform_network_init+0x2cc>)
 800a00e:	4b69      	ldr	r3, [pc, #420]	; (800a1b4 <ai_platform_network_init+0x2d0>)
 800a010:	6011      	str	r1, [r2, #0]
 800a012:	6812      	ldr	r2, [r2, #0]
 800a014:	429a      	cmp	r2, r3
 800a016:	d010      	beq.n	800a03a <ai_platform_network_init+0x156>
 800a018:	e7fe      	b.n	800a018 <ai_platform_network_init+0x134>
 800a01a:	4a67      	ldr	r2, [pc, #412]	; (800a1b8 <ai_platform_network_init+0x2d4>)
 800a01c:	2301      	movs	r3, #1
 800a01e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a022:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1fb      	bne.n	800a022 <ai_platform_network_init+0x13e>
 800a02a:	4961      	ldr	r1, [pc, #388]	; (800a1b0 <ai_platform_network_init+0x2cc>)
 800a02c:	4b61      	ldr	r3, [pc, #388]	; (800a1b4 <ai_platform_network_init+0x2d0>)
 800a02e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a032:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a036:	429a      	cmp	r2, r3
 800a038:	d113      	bne.n	800a062 <ai_platform_network_init+0x17e>
 800a03a:	2600      	movs	r6, #0
 800a03c:	f7fe fb8a 	bl	8008754 <_ai_platform_release_crc>
 800a040:	4630      	mov	r0, r6
 800a042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a046:	4a59      	ldr	r2, [pc, #356]	; (800a1ac <ai_platform_network_init+0x2c8>)
 800a048:	2301      	movs	r3, #1
 800a04a:	6093      	str	r3, [r2, #8]
 800a04c:	6893      	ldr	r3, [r2, #8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1fc      	bne.n	800a04c <ai_platform_network_init+0x168>
 800a052:	4b57      	ldr	r3, [pc, #348]	; (800a1b0 <ai_platform_network_init+0x2cc>)
 800a054:	6013      	str	r3, [r2, #0]
 800a056:	4b57      	ldr	r3, [pc, #348]	; (800a1b4 <ai_platform_network_init+0x2d0>)
 800a058:	6812      	ldr	r2, [r2, #0]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	f43f af7a 	beq.w	8009f54 <ai_platform_network_init+0x70>
 800a060:	e7fe      	b.n	800a060 <ai_platform_network_init+0x17c>
 800a062:	e7fe      	b.n	800a062 <ai_platform_network_init+0x17e>
 800a064:	4a54      	ldr	r2, [pc, #336]	; (800a1b8 <ai_platform_network_init+0x2d4>)
 800a066:	2301      	movs	r3, #1
 800a068:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a06c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1fb      	bne.n	800a06c <ai_platform_network_init+0x188>
 800a074:	4b4e      	ldr	r3, [pc, #312]	; (800a1b0 <ai_platform_network_init+0x2cc>)
 800a076:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a07a:	4b4e      	ldr	r3, [pc, #312]	; (800a1b4 <ai_platform_network_init+0x2d0>)
 800a07c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a080:	429a      	cmp	r2, r3
 800a082:	f43f af67 	beq.w	8009f54 <ai_platform_network_init+0x70>
 800a086:	e7fe      	b.n	800a086 <ai_platform_network_init+0x1a2>
 800a088:	2101      	movs	r1, #1
 800a08a:	4628      	mov	r0, r5
 800a08c:	f105 081c 	add.w	r8, r5, #28
 800a090:	686e      	ldr	r6, [r5, #4]
 800a092:	f7fe fa75 	bl	8008580 <ai_buffer_get_size>
 800a096:	4607      	mov	r7, r0
 800a098:	2101      	movs	r1, #1
 800a09a:	4640      	mov	r0, r8
 800a09c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800a0a0:	f7fe fa6e 	bl	8008580 <ai_buffer_get_size>
 800a0a4:	2f00      	cmp	r7, #0
 800a0a6:	d13e      	bne.n	800a126 <ai_platform_network_init+0x242>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	f000 808e 	beq.w	800a1ca <ai_platform_network_init+0x2e6>
 800a0ae:	f1b9 0f00 	cmp.w	r9, #0
 800a0b2:	f000 8094 	beq.w	800a1de <ai_platform_network_init+0x2fa>
 800a0b6:	f04f 0c01 	mov.w	ip, #1
 800a0ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a0bc:	2600      	movs	r6, #0
 800a0be:	83e7      	strh	r7, [r4, #30]
 800a0c0:	4563      	cmp	r3, ip
 800a0c2:	83a6      	strh	r6, [r4, #28]
 800a0c4:	d37a      	bcc.n	800a1bc <ai_platform_network_init+0x2d8>
 800a0c6:	f1bc 0f00 	cmp.w	ip, #0
 800a0ca:	f000 809c 	beq.w	800a206 <ai_platform_network_init+0x322>
 800a0ce:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a0d0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800a0d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a0d6:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800a0da:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a0de:	e74c      	b.n	8009f7a <ai_platform_network_init+0x96>
 800a0e0:	4a35      	ldr	r2, [pc, #212]	; (800a1b8 <ai_platform_network_init+0x2d4>)
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a0e8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d1fb      	bne.n	800a0e8 <ai_platform_network_init+0x204>
 800a0f0:	492f      	ldr	r1, [pc, #188]	; (800a1b0 <ai_platform_network_init+0x2cc>)
 800a0f2:	4b30      	ldr	r3, [pc, #192]	; (800a1b4 <ai_platform_network_init+0x2d0>)
 800a0f4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a0f8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d09c      	beq.n	800a03a <ai_platform_network_init+0x156>
 800a100:	e7fe      	b.n	800a100 <ai_platform_network_init+0x21c>
 800a102:	4a2d      	ldr	r2, [pc, #180]	; (800a1b8 <ai_platform_network_init+0x2d4>)
 800a104:	2301      	movs	r3, #1
 800a106:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a10a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1fb      	bne.n	800a10a <ai_platform_network_init+0x226>
 800a112:	4b27      	ldr	r3, [pc, #156]	; (800a1b0 <ai_platform_network_init+0x2cc>)
 800a114:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a118:	4b26      	ldr	r3, [pc, #152]	; (800a1b4 <ai_platform_network_init+0x2d0>)
 800a11a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a11e:	429a      	cmp	r2, r3
 800a120:	f43f af18 	beq.w	8009f54 <ai_platform_network_init+0x70>
 800a124:	e7fe      	b.n	800a124 <ai_platform_network_init+0x240>
 800a126:	2800      	cmp	r0, #0
 800a128:	d153      	bne.n	800a1d2 <ai_platform_network_init+0x2ee>
 800a12a:	4680      	mov	r8, r0
 800a12c:	4684      	mov	ip, r0
 800a12e:	2e00      	cmp	r6, #0
 800a130:	d063      	beq.n	800a1fa <ai_platform_network_init+0x316>
 800a132:	8be6      	ldrh	r6, [r4, #30]
 800a134:	2e00      	cmp	r6, #0
 800a136:	d168      	bne.n	800a20a <ai_platform_network_init+0x326>
 800a138:	2212      	movs	r2, #18
 800a13a:	2116      	movs	r1, #22
 800a13c:	f104 0010 	add.w	r0, r4, #16
 800a140:	f000 fddc 	bl	800acfc <core_set_error>
 800a144:	e77c      	b.n	800a040 <ai_platform_network_init+0x15c>
 800a146:	4a19      	ldr	r2, [pc, #100]	; (800a1ac <ai_platform_network_init+0x2c8>)
 800a148:	2301      	movs	r3, #1
 800a14a:	6093      	str	r3, [r2, #8]
 800a14c:	6893      	ldr	r3, [r2, #8]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d1fc      	bne.n	800a14c <ai_platform_network_init+0x268>
 800a152:	4b17      	ldr	r3, [pc, #92]	; (800a1b0 <ai_platform_network_init+0x2cc>)
 800a154:	6013      	str	r3, [r2, #0]
 800a156:	4b17      	ldr	r3, [pc, #92]	; (800a1b4 <ai_platform_network_init+0x2d0>)
 800a158:	6812      	ldr	r2, [r2, #0]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	f43f aefa 	beq.w	8009f54 <ai_platform_network_init+0x70>
 800a160:	e7fe      	b.n	800a160 <ai_platform_network_init+0x27c>
 800a162:	4a12      	ldr	r2, [pc, #72]	; (800a1ac <ai_platform_network_init+0x2c8>)
 800a164:	2301      	movs	r3, #1
 800a166:	6093      	str	r3, [r2, #8]
 800a168:	6893      	ldr	r3, [r2, #8]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1fc      	bne.n	800a168 <ai_platform_network_init+0x284>
 800a16e:	4910      	ldr	r1, [pc, #64]	; (800a1b0 <ai_platform_network_init+0x2cc>)
 800a170:	4b10      	ldr	r3, [pc, #64]	; (800a1b4 <ai_platform_network_init+0x2d0>)
 800a172:	6011      	str	r1, [r2, #0]
 800a174:	6812      	ldr	r2, [r2, #0]
 800a176:	429a      	cmp	r2, r3
 800a178:	f43f af5f 	beq.w	800a03a <ai_platform_network_init+0x156>
 800a17c:	e7fe      	b.n	800a17c <ai_platform_network_init+0x298>
 800a17e:	4a0b      	ldr	r2, [pc, #44]	; (800a1ac <ai_platform_network_init+0x2c8>)
 800a180:	2301      	movs	r3, #1
 800a182:	6093      	str	r3, [r2, #8]
 800a184:	6893      	ldr	r3, [r2, #8]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1fc      	bne.n	800a184 <ai_platform_network_init+0x2a0>
 800a18a:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <ai_platform_network_init+0x2cc>)
 800a18c:	6013      	str	r3, [r2, #0]
 800a18e:	4b09      	ldr	r3, [pc, #36]	; (800a1b4 <ai_platform_network_init+0x2d0>)
 800a190:	6812      	ldr	r2, [r2, #0]
 800a192:	429a      	cmp	r2, r3
 800a194:	f43f aede 	beq.w	8009f54 <ai_platform_network_init+0x70>
 800a198:	e7fe      	b.n	800a198 <ai_platform_network_init+0x2b4>
 800a19a:	bf00      	nop
 800a19c:	a1c00100 	.word	0xa1c00100
 800a1a0:	e0042000 	.word	0xe0042000
 800a1a4:	5c001000 	.word	0x5c001000
 800a1a8:	a1facade 	.word	0xa1facade
 800a1ac:	40023000 	.word	0x40023000
 800a1b0:	f407a5c2 	.word	0xf407a5c2
 800a1b4:	b5e8b5cd 	.word	0xb5e8b5cd
 800a1b8:	58024000 	.word	0x58024000
 800a1bc:	2213      	movs	r2, #19
 800a1be:	2116      	movs	r1, #22
 800a1c0:	f104 0010 	add.w	r0, r4, #16
 800a1c4:	f000 fd9a 	bl	800acfc <core_set_error>
 800a1c8:	e73a      	b.n	800a040 <ai_platform_network_init+0x15c>
 800a1ca:	4607      	mov	r7, r0
 800a1cc:	4680      	mov	r8, r0
 800a1ce:	4684      	mov	ip, r0
 800a1d0:	e773      	b.n	800a0ba <ai_platform_network_init+0x1d6>
 800a1d2:	f1b9 0f00 	cmp.w	r9, #0
 800a1d6:	d002      	beq.n	800a1de <ai_platform_network_init+0x2fa>
 800a1d8:	f04f 0c01 	mov.w	ip, #1
 800a1dc:	e7a7      	b.n	800a12e <ai_platform_network_init+0x24a>
 800a1de:	2110      	movs	r1, #16
 800a1e0:	2213      	movs	r2, #19
 800a1e2:	2600      	movs	r6, #0
 800a1e4:	1860      	adds	r0, r4, r1
 800a1e6:	f000 fd89 	bl	800acfc <core_set_error>
 800a1ea:	e729      	b.n	800a040 <ai_platform_network_init+0x15c>
 800a1ec:	2110      	movs	r1, #16
 800a1ee:	2211      	movs	r2, #17
 800a1f0:	462e      	mov	r6, r5
 800a1f2:	1860      	adds	r0, r4, r1
 800a1f4:	f000 fd82 	bl	800acfc <core_set_error>
 800a1f8:	e722      	b.n	800a040 <ai_platform_network_init+0x15c>
 800a1fa:	2110      	movs	r1, #16
 800a1fc:	2212      	movs	r2, #18
 800a1fe:	1860      	adds	r0, r4, r1
 800a200:	f000 fd7c 	bl	800acfc <core_set_error>
 800a204:	e71c      	b.n	800a040 <ai_platform_network_init+0x15c>
 800a206:	4666      	mov	r6, ip
 800a208:	e6b7      	b.n	8009f7a <ai_platform_network_init+0x96>
 800a20a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a20c:	6a26      	ldr	r6, [r4, #32]
 800a20e:	2701      	movs	r7, #1
 800a210:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a212:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a216:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800a21a:	e74e      	b.n	800a0ba <ai_platform_network_init+0x1d6>

0800a21c <ai_platform_network_post_init>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	2800      	cmp	r0, #0
 800a220:	d04e      	beq.n	800a2c0 <ai_platform_network_post_init+0xa4>
 800a222:	4b8c      	ldr	r3, [pc, #560]	; (800a454 <ai_platform_network_post_init+0x238>)
 800a224:	4604      	mov	r4, r0
 800a226:	6802      	ldr	r2, [r0, #0]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d149      	bne.n	800a2c0 <ai_platform_network_post_init+0xa4>
 800a22c:	f7fe fa90 	bl	8008750 <_ai_platform_acquire_crc>
 800a230:	4b89      	ldr	r3, [pc, #548]	; (800a458 <ai_platform_network_post_init+0x23c>)
 800a232:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a23c:	189a      	adds	r2, r3, r2
 800a23e:	2a01      	cmp	r2, #1
 800a240:	f240 8095 	bls.w	800a36e <ai_platform_network_post_init+0x152>
 800a244:	f240 4249 	movw	r2, #1097	; 0x449
 800a248:	4293      	cmp	r3, r2
 800a24a:	f000 8090 	beq.w	800a36e <ai_platform_network_post_init+0x152>
 800a24e:	4a83      	ldr	r2, [pc, #524]	; (800a45c <ai_platform_network_post_init+0x240>)
 800a250:	6813      	ldr	r3, [r2, #0]
 800a252:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a256:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a25a:	f000 8096 	beq.w	800a38a <ai_platform_network_post_init+0x16e>
 800a25e:	6813      	ldr	r3, [r2, #0]
 800a260:	f240 4183 	movw	r1, #1155	; 0x483
 800a264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a268:	428b      	cmp	r3, r1
 800a26a:	f000 80b8 	beq.w	800a3de <ai_platform_network_post_init+0x1c2>
 800a26e:	6813      	ldr	r3, [r2, #0]
 800a270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a274:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800a278:	f000 80de 	beq.w	800a438 <ai_platform_network_post_init+0x21c>
 800a27c:	6813      	ldr	r3, [r2, #0]
 800a27e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a282:	2b00      	cmp	r3, #0
 800a284:	f000 80bd 	beq.w	800a402 <ai_platform_network_post_init+0x1e6>
 800a288:	f7fe fa64 	bl	8008754 <_ai_platform_release_crc>
 800a28c:	68e3      	ldr	r3, [r4, #12]
 800a28e:	f013 0502 	ands.w	r5, r3, #2
 800a292:	f000 808c 	beq.w	800a3ae <ai_platform_network_post_init+0x192>
 800a296:	4620      	mov	r0, r4
 800a298:	f002 fd74 	bl	800cd84 <ai_layers_post_init_all>
 800a29c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a29e:	b16b      	cbz	r3, 800a2bc <ai_platform_network_post_init+0xa0>
 800a2a0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800a2a2:	e007      	b.n	800a2b4 <ai_platform_network_post_init+0x98>
 800a2a4:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800a2a8:	4798      	blx	r3
 800a2aa:	692b      	ldr	r3, [r5, #16]
 800a2ac:	b133      	cbz	r3, 800a2bc <ai_platform_network_post_init+0xa0>
 800a2ae:	42ab      	cmp	r3, r5
 800a2b0:	461d      	mov	r5, r3
 800a2b2:	d003      	beq.n	800a2bc <ai_platform_network_post_init+0xa0>
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	2d00      	cmp	r5, #0
 800a2ba:	d1f3      	bne.n	800a2a4 <ai_platform_network_post_init+0x88>
 800a2bc:	2001      	movs	r0, #1
 800a2be:	bd38      	pop	{r3, r4, r5, pc}
 800a2c0:	f7fe fa46 	bl	8008750 <_ai_platform_acquire_crc>
 800a2c4:	4b64      	ldr	r3, [pc, #400]	; (800a458 <ai_platform_network_post_init+0x23c>)
 800a2c6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2d0:	185a      	adds	r2, r3, r1
 800a2d2:	2a01      	cmp	r2, #1
 800a2d4:	d92a      	bls.n	800a32c <ai_platform_network_post_init+0x110>
 800a2d6:	f240 4249 	movw	r2, #1097	; 0x449
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d026      	beq.n	800a32c <ai_platform_network_post_init+0x110>
 800a2de:	4a5f      	ldr	r2, [pc, #380]	; (800a45c <ai_platform_network_post_init+0x240>)
 800a2e0:	6813      	ldr	r3, [r2, #0]
 800a2e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2e6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a2ea:	d02c      	beq.n	800a346 <ai_platform_network_post_init+0x12a>
 800a2ec:	6813      	ldr	r3, [r2, #0]
 800a2ee:	f240 4183 	movw	r1, #1155	; 0x483
 800a2f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a2f6:	428b      	cmp	r3, r1
 800a2f8:	d060      	beq.n	800a3bc <ai_platform_network_post_init+0x1a0>
 800a2fa:	6813      	ldr	r3, [r2, #0]
 800a2fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a300:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800a304:	f000 808b 	beq.w	800a41e <ai_platform_network_post_init+0x202>
 800a308:	6813      	ldr	r3, [r2, #0]
 800a30a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d129      	bne.n	800a366 <ai_platform_network_post_init+0x14a>
 800a312:	4a53      	ldr	r2, [pc, #332]	; (800a460 <ai_platform_network_post_init+0x244>)
 800a314:	2301      	movs	r3, #1
 800a316:	6093      	str	r3, [r2, #8]
 800a318:	6893      	ldr	r3, [r2, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1fc      	bne.n	800a318 <ai_platform_network_post_init+0xfc>
 800a31e:	4951      	ldr	r1, [pc, #324]	; (800a464 <ai_platform_network_post_init+0x248>)
 800a320:	4b51      	ldr	r3, [pc, #324]	; (800a468 <ai_platform_network_post_init+0x24c>)
 800a322:	6011      	str	r1, [r2, #0]
 800a324:	6812      	ldr	r2, [r2, #0]
 800a326:	429a      	cmp	r2, r3
 800a328:	d01d      	beq.n	800a366 <ai_platform_network_post_init+0x14a>
 800a32a:	e7fe      	b.n	800a32a <ai_platform_network_post_init+0x10e>
 800a32c:	4a4c      	ldr	r2, [pc, #304]	; (800a460 <ai_platform_network_post_init+0x244>)
 800a32e:	2301      	movs	r3, #1
 800a330:	6093      	str	r3, [r2, #8]
 800a332:	6893      	ldr	r3, [r2, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1fc      	bne.n	800a332 <ai_platform_network_post_init+0x116>
 800a338:	494a      	ldr	r1, [pc, #296]	; (800a464 <ai_platform_network_post_init+0x248>)
 800a33a:	4b4b      	ldr	r3, [pc, #300]	; (800a468 <ai_platform_network_post_init+0x24c>)
 800a33c:	6011      	str	r1, [r2, #0]
 800a33e:	6812      	ldr	r2, [r2, #0]
 800a340:	429a      	cmp	r2, r3
 800a342:	d010      	beq.n	800a366 <ai_platform_network_post_init+0x14a>
 800a344:	e7fe      	b.n	800a344 <ai_platform_network_post_init+0x128>
 800a346:	4a49      	ldr	r2, [pc, #292]	; (800a46c <ai_platform_network_post_init+0x250>)
 800a348:	2301      	movs	r3, #1
 800a34a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a34e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a352:	2b00      	cmp	r3, #0
 800a354:	d1fb      	bne.n	800a34e <ai_platform_network_post_init+0x132>
 800a356:	4943      	ldr	r1, [pc, #268]	; (800a464 <ai_platform_network_post_init+0x248>)
 800a358:	4b43      	ldr	r3, [pc, #268]	; (800a468 <ai_platform_network_post_init+0x24c>)
 800a35a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a35e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a362:	429a      	cmp	r2, r3
 800a364:	d110      	bne.n	800a388 <ai_platform_network_post_init+0x16c>
 800a366:	f7fe f9f5 	bl	8008754 <_ai_platform_release_crc>
 800a36a:	2000      	movs	r0, #0
 800a36c:	bd38      	pop	{r3, r4, r5, pc}
 800a36e:	4a3c      	ldr	r2, [pc, #240]	; (800a460 <ai_platform_network_post_init+0x244>)
 800a370:	2301      	movs	r3, #1
 800a372:	6093      	str	r3, [r2, #8]
 800a374:	6893      	ldr	r3, [r2, #8]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1fc      	bne.n	800a374 <ai_platform_network_post_init+0x158>
 800a37a:	493a      	ldr	r1, [pc, #232]	; (800a464 <ai_platform_network_post_init+0x248>)
 800a37c:	4b3a      	ldr	r3, [pc, #232]	; (800a468 <ai_platform_network_post_init+0x24c>)
 800a37e:	6011      	str	r1, [r2, #0]
 800a380:	6812      	ldr	r2, [r2, #0]
 800a382:	429a      	cmp	r2, r3
 800a384:	d080      	beq.n	800a288 <ai_platform_network_post_init+0x6c>
 800a386:	e7fe      	b.n	800a386 <ai_platform_network_post_init+0x16a>
 800a388:	e7fe      	b.n	800a388 <ai_platform_network_post_init+0x16c>
 800a38a:	4a38      	ldr	r2, [pc, #224]	; (800a46c <ai_platform_network_post_init+0x250>)
 800a38c:	2301      	movs	r3, #1
 800a38e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a392:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1fb      	bne.n	800a392 <ai_platform_network_post_init+0x176>
 800a39a:	4932      	ldr	r1, [pc, #200]	; (800a464 <ai_platform_network_post_init+0x248>)
 800a39c:	4b32      	ldr	r3, [pc, #200]	; (800a468 <ai_platform_network_post_init+0x24c>)
 800a39e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a3a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	f43f af6e 	beq.w	800a288 <ai_platform_network_post_init+0x6c>
 800a3ac:	e7fe      	b.n	800a3ac <ai_platform_network_post_init+0x190>
 800a3ae:	2210      	movs	r2, #16
 800a3b0:	2111      	movs	r1, #17
 800a3b2:	18a0      	adds	r0, r4, r2
 800a3b4:	f000 fca2 	bl	800acfc <core_set_error>
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	bd38      	pop	{r3, r4, r5, pc}
 800a3bc:	4a2b      	ldr	r2, [pc, #172]	; (800a46c <ai_platform_network_post_init+0x250>)
 800a3be:	2301      	movs	r3, #1
 800a3c0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a3c4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1fb      	bne.n	800a3c4 <ai_platform_network_post_init+0x1a8>
 800a3cc:	4925      	ldr	r1, [pc, #148]	; (800a464 <ai_platform_network_post_init+0x248>)
 800a3ce:	4b26      	ldr	r3, [pc, #152]	; (800a468 <ai_platform_network_post_init+0x24c>)
 800a3d0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a3d4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d0c4      	beq.n	800a366 <ai_platform_network_post_init+0x14a>
 800a3dc:	e7fe      	b.n	800a3dc <ai_platform_network_post_init+0x1c0>
 800a3de:	4a23      	ldr	r2, [pc, #140]	; (800a46c <ai_platform_network_post_init+0x250>)
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a3e6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d1fb      	bne.n	800a3e6 <ai_platform_network_post_init+0x1ca>
 800a3ee:	491d      	ldr	r1, [pc, #116]	; (800a464 <ai_platform_network_post_init+0x248>)
 800a3f0:	4b1d      	ldr	r3, [pc, #116]	; (800a468 <ai_platform_network_post_init+0x24c>)
 800a3f2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800a3f6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	f43f af44 	beq.w	800a288 <ai_platform_network_post_init+0x6c>
 800a400:	e7fe      	b.n	800a400 <ai_platform_network_post_init+0x1e4>
 800a402:	4a17      	ldr	r2, [pc, #92]	; (800a460 <ai_platform_network_post_init+0x244>)
 800a404:	2301      	movs	r3, #1
 800a406:	6093      	str	r3, [r2, #8]
 800a408:	6893      	ldr	r3, [r2, #8]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1fc      	bne.n	800a408 <ai_platform_network_post_init+0x1ec>
 800a40e:	4915      	ldr	r1, [pc, #84]	; (800a464 <ai_platform_network_post_init+0x248>)
 800a410:	4b15      	ldr	r3, [pc, #84]	; (800a468 <ai_platform_network_post_init+0x24c>)
 800a412:	6011      	str	r1, [r2, #0]
 800a414:	6812      	ldr	r2, [r2, #0]
 800a416:	429a      	cmp	r2, r3
 800a418:	f43f af36 	beq.w	800a288 <ai_platform_network_post_init+0x6c>
 800a41c:	e7fe      	b.n	800a41c <ai_platform_network_post_init+0x200>
 800a41e:	4a10      	ldr	r2, [pc, #64]	; (800a460 <ai_platform_network_post_init+0x244>)
 800a420:	2301      	movs	r3, #1
 800a422:	6093      	str	r3, [r2, #8]
 800a424:	6893      	ldr	r3, [r2, #8]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d1fc      	bne.n	800a424 <ai_platform_network_post_init+0x208>
 800a42a:	490e      	ldr	r1, [pc, #56]	; (800a464 <ai_platform_network_post_init+0x248>)
 800a42c:	4b0e      	ldr	r3, [pc, #56]	; (800a468 <ai_platform_network_post_init+0x24c>)
 800a42e:	6011      	str	r1, [r2, #0]
 800a430:	6812      	ldr	r2, [r2, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d097      	beq.n	800a366 <ai_platform_network_post_init+0x14a>
 800a436:	e7fe      	b.n	800a436 <ai_platform_network_post_init+0x21a>
 800a438:	4a09      	ldr	r2, [pc, #36]	; (800a460 <ai_platform_network_post_init+0x244>)
 800a43a:	2301      	movs	r3, #1
 800a43c:	6093      	str	r3, [r2, #8]
 800a43e:	6893      	ldr	r3, [r2, #8]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d1fc      	bne.n	800a43e <ai_platform_network_post_init+0x222>
 800a444:	4907      	ldr	r1, [pc, #28]	; (800a464 <ai_platform_network_post_init+0x248>)
 800a446:	4b08      	ldr	r3, [pc, #32]	; (800a468 <ai_platform_network_post_init+0x24c>)
 800a448:	6011      	str	r1, [r2, #0]
 800a44a:	6812      	ldr	r2, [r2, #0]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	f43f af1b 	beq.w	800a288 <ai_platform_network_post_init+0x6c>
 800a452:	e7fe      	b.n	800a452 <ai_platform_network_post_init+0x236>
 800a454:	a1c00100 	.word	0xa1c00100
 800a458:	e0042000 	.word	0xe0042000
 800a45c:	5c001000 	.word	0x5c001000
 800a460:	40023000 	.word	0x40023000
 800a464:	f407a5c2 	.word	0xf407a5c2
 800a468:	b5e8b5cd 	.word	0xb5e8b5cd
 800a46c:	58024000 	.word	0x58024000

0800a470 <ai_platform_network_process>:
 800a470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	b085      	sub	sp, #20
 800a476:	460e      	mov	r6, r1
 800a478:	4605      	mov	r5, r0
 800a47a:	9201      	str	r2, [sp, #4]
 800a47c:	b120      	cbz	r0, 800a488 <ai_platform_network_process+0x18>
 800a47e:	4b24      	ldr	r3, [pc, #144]	; (800a510 <ai_platform_network_process+0xa0>)
 800a480:	6802      	ldr	r2, [r0, #0]
 800a482:	429a      	cmp	r2, r3
 800a484:	bf18      	it	ne
 800a486:	2500      	movne	r5, #0
 800a488:	f7fe f962 	bl	8008750 <_ai_platform_acquire_crc>
 800a48c:	4b21      	ldr	r3, [pc, #132]	; (800a514 <ai_platform_network_process+0xa4>)
 800a48e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a498:	185a      	adds	r2, r3, r1
 800a49a:	2a01      	cmp	r2, #1
 800a49c:	d92b      	bls.n	800a4f6 <ai_platform_network_process+0x86>
 800a49e:	f240 4249 	movw	r2, #1097	; 0x449
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d027      	beq.n	800a4f6 <ai_platform_network_process+0x86>
 800a4a6:	4a1c      	ldr	r2, [pc, #112]	; (800a518 <ai_platform_network_process+0xa8>)
 800a4a8:	6813      	ldr	r3, [r2, #0]
 800a4aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4ae:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800a4b2:	d039      	beq.n	800a528 <ai_platform_network_process+0xb8>
 800a4b4:	6813      	ldr	r3, [r2, #0]
 800a4b6:	f240 4183 	movw	r1, #1155	; 0x483
 800a4ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4be:	428b      	cmp	r3, r1
 800a4c0:	f000 819c 	beq.w	800a7fc <ai_platform_network_process+0x38c>
 800a4c4:	6813      	ldr	r3, [r2, #0]
 800a4c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4ca:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800a4ce:	f000 8179 	beq.w	800a7c4 <ai_platform_network_process+0x354>
 800a4d2:	6813      	ldr	r3, [r2, #0]
 800a4d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d136      	bne.n	800a54a <ai_platform_network_process+0xda>
 800a4dc:	4a0f      	ldr	r2, [pc, #60]	; (800a51c <ai_platform_network_process+0xac>)
 800a4de:	2301      	movs	r3, #1
 800a4e0:	6093      	str	r3, [r2, #8]
 800a4e2:	6893      	ldr	r3, [r2, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1fc      	bne.n	800a4e2 <ai_platform_network_process+0x72>
 800a4e8:	4b0d      	ldr	r3, [pc, #52]	; (800a520 <ai_platform_network_process+0xb0>)
 800a4ea:	6013      	str	r3, [r2, #0]
 800a4ec:	4b0d      	ldr	r3, [pc, #52]	; (800a524 <ai_platform_network_process+0xb4>)
 800a4ee:	6812      	ldr	r2, [r2, #0]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d02a      	beq.n	800a54a <ai_platform_network_process+0xda>
 800a4f4:	e7fe      	b.n	800a4f4 <ai_platform_network_process+0x84>
 800a4f6:	4a09      	ldr	r2, [pc, #36]	; (800a51c <ai_platform_network_process+0xac>)
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	6093      	str	r3, [r2, #8]
 800a4fc:	6893      	ldr	r3, [r2, #8]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d1fc      	bne.n	800a4fc <ai_platform_network_process+0x8c>
 800a502:	4b07      	ldr	r3, [pc, #28]	; (800a520 <ai_platform_network_process+0xb0>)
 800a504:	6013      	str	r3, [r2, #0]
 800a506:	4b07      	ldr	r3, [pc, #28]	; (800a524 <ai_platform_network_process+0xb4>)
 800a508:	6812      	ldr	r2, [r2, #0]
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d01d      	beq.n	800a54a <ai_platform_network_process+0xda>
 800a50e:	e7fe      	b.n	800a50e <ai_platform_network_process+0x9e>
 800a510:	a1c00100 	.word	0xa1c00100
 800a514:	e0042000 	.word	0xe0042000
 800a518:	5c001000 	.word	0x5c001000
 800a51c:	40023000 	.word	0x40023000
 800a520:	f407a5c2 	.word	0xf407a5c2
 800a524:	b5e8b5cd 	.word	0xb5e8b5cd
 800a528:	4ab0      	ldr	r2, [pc, #704]	; (800a7ec <ai_platform_network_process+0x37c>)
 800a52a:	2301      	movs	r3, #1
 800a52c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a530:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1fb      	bne.n	800a530 <ai_platform_network_process+0xc0>
 800a538:	4bad      	ldr	r3, [pc, #692]	; (800a7f0 <ai_platform_network_process+0x380>)
 800a53a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a53e:	4bad      	ldr	r3, [pc, #692]	; (800a7f4 <ai_platform_network_process+0x384>)
 800a540:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a544:	429a      	cmp	r2, r3
 800a546:	f040 812b 	bne.w	800a7a0 <ai_platform_network_process+0x330>
 800a54a:	f7fe f903 	bl	8008754 <_ai_platform_release_crc>
 800a54e:	2d00      	cmp	r5, #0
 800a550:	f000 8172 	beq.w	800a838 <ai_platform_network_process+0x3c8>
 800a554:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800a556:	2b00      	cmp	r3, #0
 800a558:	f000 8123 	beq.w	800a7a2 <ai_platform_network_process+0x332>
 800a55c:	68eb      	ldr	r3, [r5, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 800a564:	f003 0303 	and.w	r3, r3, #3
 800a568:	616a      	str	r2, [r5, #20]
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	f040 811f 	bne.w	800a7ae <ai_platform_network_process+0x33e>
 800a570:	2e00      	cmp	r6, #0
 800a572:	f000 8156 	beq.w	800a822 <ai_platform_network_process+0x3b2>
 800a576:	fab8 f788 	clz	r7, r8
 800a57a:	097f      	lsrs	r7, r7, #5
 800a57c:	f1b8 0f00 	cmp.w	r8, #0
 800a580:	f000 814f 	beq.w	800a822 <ai_platform_network_process+0x3b2>
 800a584:	f8b8 3000 	ldrh.w	r3, [r8]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 814a 	beq.w	800a822 <ai_platform_network_process+0x3b2>
 800a58e:	69b3      	ldr	r3, [r6, #24]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	e9cd 3502 	strd	r3, r5, [sp, #8]
 800a596:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d072      	beq.n	800a684 <ai_platform_network_process+0x214>
 800a59e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800a5a2:	2c00      	cmp	r4, #0
 800a5a4:	d06e      	beq.n	800a684 <ai_platform_network_process+0x214>
 800a5a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5aa:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800a5ae:	f8d3 a000 	ldr.w	sl, [r3]
 800a5b2:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 800a5b6:	f000 8133 	beq.w	800a820 <ai_platform_network_process+0x3b0>
 800a5ba:	69a3      	ldr	r3, [r4, #24]
 800a5bc:	2101      	movs	r1, #1
 800a5be:	4630      	mov	r0, r6
 800a5c0:	685d      	ldr	r5, [r3, #4]
 800a5c2:	f7fd ffdd 	bl	8008580 <ai_buffer_get_size>
 800a5c6:	4285      	cmp	r5, r0
 800a5c8:	f0c0 8138 	bcc.w	800a83c <ai_platform_network_process+0x3cc>
 800a5cc:	68e0      	ldr	r0, [r4, #12]
 800a5ce:	69b1      	ldr	r1, [r6, #24]
 800a5d0:	68c2      	ldr	r2, [r0, #12]
 800a5d2:	68cb      	ldr	r3, [r1, #12]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	f040 8131 	bne.w	800a83c <ai_platform_network_process+0x3cc>
 800a5da:	6882      	ldr	r2, [r0, #8]
 800a5dc:	688b      	ldr	r3, [r1, #8]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	f040 812c 	bne.w	800a83c <ai_platform_network_process+0x3cc>
 800a5e4:	6842      	ldr	r2, [r0, #4]
 800a5e6:	684b      	ldr	r3, [r1, #4]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	f040 8127 	bne.w	800a83c <ai_platform_network_process+0x3cc>
 800a5ee:	69a3      	ldr	r3, [r4, #24]
 800a5f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5f4:	f7fd ffb4 	bl	8008560 <ai_array_get_data_byte_size>
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	f7fd ff06 	bl	800840c <get_tensor_byte_size>
 800a600:	4285      	cmp	r5, r0
 800a602:	f0c0 811b 	bcc.w	800a83c <ai_platform_network_process+0x3cc>
 800a606:	69a3      	ldr	r3, [r4, #24]
 800a608:	6818      	ldr	r0, [r3, #0]
 800a60a:	f7fd ff15 	bl	8008438 <ai_array_to_buffer_fmt>
 800a60e:	6833      	ldr	r3, [r6, #0]
 800a610:	4058      	eors	r0, r3
 800a612:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800a616:	f040 81ca 	bne.w	800a9ae <ai_platform_network_process+0x53e>
 800a61a:	6873      	ldr	r3, [r6, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 81bd 	beq.w	800a99c <ai_platform_network_process+0x52c>
 800a622:	69b3      	ldr	r3, [r6, #24]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 81ca 	beq.w	800a9c0 <ai_platform_network_process+0x550>
 800a62c:	9a02      	ldr	r2, [sp, #8]
 800a62e:	4620      	mov	r0, r4
 800a630:	3701      	adds	r7, #1
 800a632:	361c      	adds	r6, #28
 800a634:	429a      	cmp	r2, r3
 800a636:	bf38      	it	cc
 800a638:	461a      	movcc	r2, r3
 800a63a:	9202      	str	r2, [sp, #8]
 800a63c:	f7fd fee6 	bl	800840c <get_tensor_byte_size>
 800a640:	f8c9 0008 	str.w	r0, [r9, #8]
 800a644:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	fb00 f303 	mul.w	r3, r0, r3
 800a64e:	f8c9 300c 	str.w	r3, [r9, #12]
 800a652:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800a656:	440b      	add	r3, r1
 800a658:	f8c9 1004 	str.w	r1, [r9, #4]
 800a65c:	f84a 300b 	str.w	r3, [sl, fp]
 800a660:	69a0      	ldr	r0, [r4, #24]
 800a662:	6803      	ldr	r3, [r0, #0]
 800a664:	009a      	lsls	r2, r3, #2
 800a666:	f100 80bb 	bmi.w	800a7e0 <ai_platform_network_process+0x370>
 800a66a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a66e:	1a9b      	subs	r3, r3, r2
 800a670:	4419      	add	r1, r3
 800a672:	6081      	str	r1, [r0, #8]
 800a674:	69a3      	ldr	r3, [r4, #24]
 800a676:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800a67a:	60da      	str	r2, [r3, #12]
 800a67c:	f8b8 3000 	ldrh.w	r3, [r8]
 800a680:	42bb      	cmp	r3, r7
 800a682:	d888      	bhi.n	800a596 <ai_platform_network_process+0x126>
 800a684:	9d03      	ldr	r5, [sp, #12]
 800a686:	9b01      	ldr	r3, [sp, #4]
 800a688:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f000 81a1 	beq.w	800a9d2 <ai_platform_network_process+0x562>
 800a690:	2a01      	cmp	r2, #1
 800a692:	f240 817b 	bls.w	800a98c <ai_platform_network_process+0x51c>
 800a696:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 800a69a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	f000 8174 	beq.w	800a98c <ai_platform_network_process+0x51c>
 800a6a4:	9e01      	ldr	r6, [sp, #4]
 800a6a6:	2700      	movs	r7, #0
 800a6a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 80d3 	beq.w	800a858 <ai_platform_network_process+0x3e8>
 800a6b2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800a6b6:	2c00      	cmp	r4, #0
 800a6b8:	f000 80ce 	beq.w	800a858 <ai_platform_network_process+0x3e8>
 800a6bc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a6c0:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800a6c4:	f8d3 8000 	ldr.w	r8, [r3]
 800a6c8:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 800a6cc:	f000 819f 	beq.w	800aa0e <ai_platform_network_process+0x59e>
 800a6d0:	69a3      	ldr	r3, [r4, #24]
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	9301      	str	r3, [sp, #4]
 800a6da:	f7fd ff51 	bl	8008580 <ai_buffer_get_size>
 800a6de:	9b01      	ldr	r3, [sp, #4]
 800a6e0:	4283      	cmp	r3, r0
 800a6e2:	f0c0 8153 	bcc.w	800a98c <ai_platform_network_process+0x51c>
 800a6e6:	68e0      	ldr	r0, [r4, #12]
 800a6e8:	69b1      	ldr	r1, [r6, #24]
 800a6ea:	68c2      	ldr	r2, [r0, #12]
 800a6ec:	68cb      	ldr	r3, [r1, #12]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	f040 814c 	bne.w	800a98c <ai_platform_network_process+0x51c>
 800a6f4:	6882      	ldr	r2, [r0, #8]
 800a6f6:	688b      	ldr	r3, [r1, #8]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	f040 8147 	bne.w	800a98c <ai_platform_network_process+0x51c>
 800a6fe:	6842      	ldr	r2, [r0, #4]
 800a700:	684b      	ldr	r3, [r1, #4]
 800a702:	429a      	cmp	r2, r3
 800a704:	f040 8142 	bne.w	800a98c <ai_platform_network_process+0x51c>
 800a708:	69a3      	ldr	r3, [r4, #24]
 800a70a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a70e:	f7fd ff27 	bl	8008560 <ai_array_get_data_byte_size>
 800a712:	9001      	str	r0, [sp, #4]
 800a714:	4620      	mov	r0, r4
 800a716:	f7fd fe79 	bl	800840c <get_tensor_byte_size>
 800a71a:	9b01      	ldr	r3, [sp, #4]
 800a71c:	4283      	cmp	r3, r0
 800a71e:	f0c0 8135 	bcc.w	800a98c <ai_platform_network_process+0x51c>
 800a722:	69a3      	ldr	r3, [r4, #24]
 800a724:	6818      	ldr	r0, [r3, #0]
 800a726:	f7fd fe87 	bl	8008438 <ai_array_to_buffer_fmt>
 800a72a:	6833      	ldr	r3, [r6, #0]
 800a72c:	4058      	eors	r0, r3
 800a72e:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800a732:	f040 815c 	bne.w	800a9ee <ai_platform_network_process+0x57e>
 800a736:	6873      	ldr	r3, [r6, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 8150 	beq.w	800a9de <ai_platform_network_process+0x56e>
 800a73e:	69b3      	ldr	r3, [r6, #24]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	f000 815b 	beq.w	800a9fe <ai_platform_network_process+0x58e>
 800a748:	9a02      	ldr	r2, [sp, #8]
 800a74a:	4620      	mov	r0, r4
 800a74c:	3701      	adds	r7, #1
 800a74e:	361c      	adds	r6, #28
 800a750:	429a      	cmp	r2, r3
 800a752:	bf38      	it	cc
 800a754:	461a      	movcc	r2, r3
 800a756:	9202      	str	r2, [sp, #8]
 800a758:	f7fd fe58 	bl	800840c <get_tensor_byte_size>
 800a75c:	f8ca 0008 	str.w	r0, [sl, #8]
 800a760:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	fb00 f303 	mul.w	r3, r0, r3
 800a76a:	f8ca 300c 	str.w	r3, [sl, #12]
 800a76e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800a772:	440b      	add	r3, r1
 800a774:	f8ca 1004 	str.w	r1, [sl, #4]
 800a778:	f848 300b 	str.w	r3, [r8, fp]
 800a77c:	69a0      	ldr	r0, [r4, #24]
 800a77e:	6803      	ldr	r3, [r0, #0]
 800a780:	009b      	lsls	r3, r3, #2
 800a782:	d464      	bmi.n	800a84e <ai_platform_network_process+0x3de>
 800a784:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800a788:	1a9b      	subs	r3, r3, r2
 800a78a:	4419      	add	r1, r3
 800a78c:	6081      	str	r1, [r0, #8]
 800a78e:	69a3      	ldr	r3, [r4, #24]
 800a790:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a794:	60da      	str	r2, [r3, #12]
 800a796:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a79a:	429f      	cmp	r7, r3
 800a79c:	d384      	bcc.n	800a6a8 <ai_platform_network_process+0x238>
 800a79e:	e05b      	b.n	800a858 <ai_platform_network_process+0x3e8>
 800a7a0:	e7fe      	b.n	800a7a0 <ai_platform_network_process+0x330>
 800a7a2:	68ea      	ldr	r2, [r5, #12]
 800a7a4:	616b      	str	r3, [r5, #20]
 800a7a6:	f002 0203 	and.w	r2, r2, #3
 800a7aa:	2a03      	cmp	r2, #3
 800a7ac:	d039      	beq.n	800a822 <ai_platform_network_process+0x3b2>
 800a7ae:	2230      	movs	r2, #48	; 0x30
 800a7b0:	2111      	movs	r1, #17
 800a7b2:	f105 0010 	add.w	r0, r5, #16
 800a7b6:	2400      	movs	r4, #0
 800a7b8:	f000 faa0 	bl	800acfc <core_set_error>
 800a7bc:	4620      	mov	r0, r4
 800a7be:	b005      	add	sp, #20
 800a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c4:	4a0c      	ldr	r2, [pc, #48]	; (800a7f8 <ai_platform_network_process+0x388>)
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	6093      	str	r3, [r2, #8]
 800a7ca:	6893      	ldr	r3, [r2, #8]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1fc      	bne.n	800a7ca <ai_platform_network_process+0x35a>
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <ai_platform_network_process+0x380>)
 800a7d2:	6013      	str	r3, [r2, #0]
 800a7d4:	4b07      	ldr	r3, [pc, #28]	; (800a7f4 <ai_platform_network_process+0x384>)
 800a7d6:	6812      	ldr	r2, [r2, #0]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	f43f aeb6 	beq.w	800a54a <ai_platform_network_process+0xda>
 800a7de:	e7fe      	b.n	800a7de <ai_platform_network_process+0x36e>
 800a7e0:	f8b8 3000 	ldrh.w	r3, [r8]
 800a7e4:	429f      	cmp	r7, r3
 800a7e6:	f4ff aed6 	bcc.w	800a596 <ai_platform_network_process+0x126>
 800a7ea:	e74b      	b.n	800a684 <ai_platform_network_process+0x214>
 800a7ec:	58024000 	.word	0x58024000
 800a7f0:	f407a5c2 	.word	0xf407a5c2
 800a7f4:	b5e8b5cd 	.word	0xb5e8b5cd
 800a7f8:	40023000 	.word	0x40023000
 800a7fc:	4a88      	ldr	r2, [pc, #544]	; (800aa20 <ai_platform_network_process+0x5b0>)
 800a7fe:	2301      	movs	r3, #1
 800a800:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800a804:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1fb      	bne.n	800a804 <ai_platform_network_process+0x394>
 800a80c:	4b85      	ldr	r3, [pc, #532]	; (800aa24 <ai_platform_network_process+0x5b4>)
 800a80e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800a812:	4b85      	ldr	r3, [pc, #532]	; (800aa28 <ai_platform_network_process+0x5b8>)
 800a814:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800a818:	429a      	cmp	r2, r3
 800a81a:	f43f ae96 	beq.w	800a54a <ai_platform_network_process+0xda>
 800a81e:	e7fe      	b.n	800a81e <ai_platform_network_process+0x3ae>
 800a820:	9d03      	ldr	r5, [sp, #12]
 800a822:	2400      	movs	r4, #0
 800a824:	2217      	movs	r2, #23
 800a826:	2112      	movs	r1, #18
 800a828:	f105 0010 	add.w	r0, r5, #16
 800a82c:	f000 fa66 	bl	800acfc <core_set_error>
 800a830:	4620      	mov	r0, r4
 800a832:	b005      	add	sp, #20
 800a834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a838:	462c      	mov	r4, r5
 800a83a:	e7bf      	b.n	800a7bc <ai_platform_network_process+0x34c>
 800a83c:	9d03      	ldr	r5, [sp, #12]
 800a83e:	2218      	movs	r2, #24
 800a840:	2112      	movs	r1, #18
 800a842:	2400      	movs	r4, #0
 800a844:	f105 0010 	add.w	r0, r5, #16
 800a848:	f000 fa58 	bl	800acfc <core_set_error>
 800a84c:	e7b6      	b.n	800a7bc <ai_platform_network_process+0x34c>
 800a84e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800a852:	429f      	cmp	r7, r3
 800a854:	f4ff af28 	bcc.w	800a6a8 <ai_platform_network_process+0x238>
 800a858:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800a85c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800a85e:	82ab      	strh	r3, [r5, #20]
 800a860:	2a00      	cmp	r2, #0
 800a862:	f040 808d 	bne.w	800a980 <ai_platform_network_process+0x510>
 800a866:	4616      	mov	r6, r2
 800a868:	4617      	mov	r7, r2
 800a86a:	8aec      	ldrh	r4, [r5, #22]
 800a86c:	429c      	cmp	r4, r3
 800a86e:	d2a5      	bcs.n	800a7bc <ai_platform_network_process+0x34c>
 800a870:	46ab      	mov	fp, r5
 800a872:	2e00      	cmp	r6, #0
 800a874:	d030      	beq.n	800a8d8 <ai_platform_network_process+0x468>
 800a876:	f04f 0800 	mov.w	r8, #0
 800a87a:	e014      	b.n	800a8a6 <ai_platform_network_process+0x436>
 800a87c:	6882      	ldr	r2, [r0, #8]
 800a87e:	68c5      	ldr	r5, [r0, #12]
 800a880:	6863      	ldr	r3, [r4, #4]
 800a882:	1b52      	subs	r2, r2, r5
 800a884:	4413      	add	r3, r2
 800a886:	6083      	str	r3, [r0, #8]
 800a888:	698b      	ldr	r3, [r1, #24]
 800a88a:	6862      	ldr	r2, [r4, #4]
 800a88c:	60da      	str	r2, [r3, #12]
 800a88e:	f859 200a 	ldr.w	r2, [r9, sl]
 800a892:	f108 0801 	add.w	r8, r8, #1
 800a896:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 800a89a:	440b      	add	r3, r1
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d301      	bcc.n	800a8a4 <ai_platform_network_process+0x434>
 800a8a0:	68e3      	ldr	r3, [r4, #12]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	6063      	str	r3, [r4, #4]
 800a8a6:	8833      	ldrh	r3, [r6, #0]
 800a8a8:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800a8ac:	4543      	cmp	r3, r8
 800a8ae:	d913      	bls.n	800a8d8 <ai_platform_network_process+0x468>
 800a8b0:	6873      	ldr	r3, [r6, #4]
 800a8b2:	b18b      	cbz	r3, 800a8d8 <ai_platform_network_process+0x468>
 800a8b4:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 800a8b8:	b171      	cbz	r1, 800a8d8 <ai_platform_network_process+0x468>
 800a8ba:	6988      	ldr	r0, [r1, #24]
 800a8bc:	68b2      	ldr	r2, [r6, #8]
 800a8be:	6803      	ldr	r3, [r0, #0]
 800a8c0:	f8d2 9000 	ldr.w	r9, [r2]
 800a8c4:	009d      	lsls	r5, r3, #2
 800a8c6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 800a8ca:	d5d7      	bpl.n	800a87c <ai_platform_network_process+0x40c>
 800a8cc:	6880      	ldr	r0, [r0, #8]
 800a8ce:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800a8d2:	f002 fc21 	bl	800d118 <memcpy>
 800a8d6:	e7da      	b.n	800a88e <ai_platform_network_process+0x41e>
 800a8d8:	4658      	mov	r0, fp
 800a8da:	f002 fa67 	bl	800cdac <ai_layers_forward_all>
 800a8de:	2f00      	cmp	r7, #0
 800a8e0:	d03f      	beq.n	800a962 <ai_platform_network_process+0x4f2>
 800a8e2:	2400      	movs	r4, #0
 800a8e4:	e016      	b.n	800a914 <ai_platform_network_process+0x4a4>
 800a8e6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 800a8ea:	f859 100a 	ldr.w	r1, [r9, sl]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	428b      	cmp	r3, r1
 800a8f2:	d302      	bcc.n	800a8fa <ai_platform_network_process+0x48a>
 800a8f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a8f8:	1acb      	subs	r3, r1, r3
 800a8fa:	f8c8 3004 	str.w	r3, [r8, #4]
 800a8fe:	6981      	ldr	r1, [r0, #24]
 800a900:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800a904:	1b52      	subs	r2, r2, r5
 800a906:	4413      	add	r3, r2
 800a908:	608b      	str	r3, [r1, #8]
 800a90a:	6983      	ldr	r3, [r0, #24]
 800a90c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a910:	60da      	str	r2, [r3, #12]
 800a912:	3401      	adds	r4, #1
 800a914:	883b      	ldrh	r3, [r7, #0]
 800a916:	42a3      	cmp	r3, r4
 800a918:	d923      	bls.n	800a962 <ai_platform_network_process+0x4f2>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	b30b      	cbz	r3, 800a962 <ai_platform_network_process+0x4f2>
 800a91e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a922:	b1f0      	cbz	r0, 800a962 <ai_platform_network_process+0x4f2>
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 800a92a:	6983      	ldr	r3, [r0, #24]
 800a92c:	f8d2 9000 	ldr.w	r9, [r2]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800a936:	0092      	lsls	r2, r2, #2
 800a938:	d5d5      	bpl.n	800a8e6 <ai_platform_network_process+0x476>
 800a93a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800a93e:	6899      	ldr	r1, [r3, #8]
 800a940:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a944:	f002 fbe8 	bl	800d118 <memcpy>
 800a948:	f859 200a 	ldr.w	r2, [r9, sl]
 800a94c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 800a950:	440b      	add	r3, r1
 800a952:	4293      	cmp	r3, r2
 800a954:	d302      	bcc.n	800a95c <ai_platform_network_process+0x4ec>
 800a956:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	f8c8 3004 	str.w	r3, [r8, #4]
 800a960:	e7d7      	b.n	800a912 <ai_platform_network_process+0x4a2>
 800a962:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800a966:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800a96a:	3401      	adds	r4, #1
 800a96c:	b2a4      	uxth	r4, r4
 800a96e:	42a3      	cmp	r3, r4
 800a970:	f8ab 4016 	strh.w	r4, [fp, #22]
 800a974:	f63f af7d 	bhi.w	800a872 <ai_platform_network_process+0x402>
 800a978:	4620      	mov	r0, r4
 800a97a:	b005      	add	sp, #20
 800a97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a980:	2a01      	cmp	r2, #1
 800a982:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800a984:	d029      	beq.n	800a9da <ai_platform_network_process+0x56a>
 800a986:	f106 070c 	add.w	r7, r6, #12
 800a98a:	e76e      	b.n	800a86a <ai_platform_network_process+0x3fa>
 800a98c:	2218      	movs	r2, #24
 800a98e:	2113      	movs	r1, #19
 800a990:	f105 0010 	add.w	r0, r5, #16
 800a994:	2400      	movs	r4, #0
 800a996:	f000 f9b1 	bl	800acfc <core_set_error>
 800a99a:	e70f      	b.n	800a7bc <ai_platform_network_process+0x34c>
 800a99c:	9d03      	ldr	r5, [sp, #12]
 800a99e:	4604      	mov	r4, r0
 800a9a0:	2217      	movs	r2, #23
 800a9a2:	2112      	movs	r1, #18
 800a9a4:	f105 0010 	add.w	r0, r5, #16
 800a9a8:	f000 f9a8 	bl	800acfc <core_set_error>
 800a9ac:	e706      	b.n	800a7bc <ai_platform_network_process+0x34c>
 800a9ae:	9d03      	ldr	r5, [sp, #12]
 800a9b0:	2219      	movs	r2, #25
 800a9b2:	2112      	movs	r1, #18
 800a9b4:	2400      	movs	r4, #0
 800a9b6:	f105 0010 	add.w	r0, r5, #16
 800a9ba:	f000 f99f 	bl	800acfc <core_set_error>
 800a9be:	e6fd      	b.n	800a7bc <ai_platform_network_process+0x34c>
 800a9c0:	9d03      	ldr	r5, [sp, #12]
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	2221      	movs	r2, #33	; 0x21
 800a9c6:	2112      	movs	r1, #18
 800a9c8:	f105 0010 	add.w	r0, r5, #16
 800a9cc:	f000 f996 	bl	800acfc <core_set_error>
 800a9d0:	e6f4      	b.n	800a7bc <ai_platform_network_process+0x34c>
 800a9d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800a9d6:	82ab      	strh	r3, [r5, #20]
 800a9d8:	e742      	b.n	800a860 <ai_platform_network_process+0x3f0>
 800a9da:	2700      	movs	r7, #0
 800a9dc:	e745      	b.n	800a86a <ai_platform_network_process+0x3fa>
 800a9de:	4604      	mov	r4, r0
 800a9e0:	2217      	movs	r2, #23
 800a9e2:	2113      	movs	r1, #19
 800a9e4:	f105 0010 	add.w	r0, r5, #16
 800a9e8:	f000 f988 	bl	800acfc <core_set_error>
 800a9ec:	e6e6      	b.n	800a7bc <ai_platform_network_process+0x34c>
 800a9ee:	2219      	movs	r2, #25
 800a9f0:	2113      	movs	r1, #19
 800a9f2:	f105 0010 	add.w	r0, r5, #16
 800a9f6:	2400      	movs	r4, #0
 800a9f8:	f000 f980 	bl	800acfc <core_set_error>
 800a9fc:	e6de      	b.n	800a7bc <ai_platform_network_process+0x34c>
 800a9fe:	4604      	mov	r4, r0
 800aa00:	2221      	movs	r2, #33	; 0x21
 800aa02:	2113      	movs	r1, #19
 800aa04:	f105 0010 	add.w	r0, r5, #16
 800aa08:	f000 f978 	bl	800acfc <core_set_error>
 800aa0c:	e6d6      	b.n	800a7bc <ai_platform_network_process+0x34c>
 800aa0e:	2217      	movs	r2, #23
 800aa10:	2113      	movs	r1, #19
 800aa12:	f105 0010 	add.w	r0, r5, #16
 800aa16:	4654      	mov	r4, sl
 800aa18:	f000 f970 	bl	800acfc <core_set_error>
 800aa1c:	e6ce      	b.n	800a7bc <ai_platform_network_process+0x34c>
 800aa1e:	bf00      	nop
 800aa20:	58024000 	.word	0x58024000
 800aa24:	f407a5c2 	.word	0xf407a5c2
 800aa28:	b5e8b5cd 	.word	0xb5e8b5cd

0800aa2c <ai_platform_observer_register_s>:
 800aa2c:	b570      	push	{r4, r5, r6, lr}
 800aa2e:	4604      	mov	r4, r0
 800aa30:	460d      	mov	r5, r1
 800aa32:	b120      	cbz	r0, 800aa3e <ai_platform_observer_register_s+0x12>
 800aa34:	4b56      	ldr	r3, [pc, #344]	; (800ab90 <ai_platform_observer_register_s+0x164>)
 800aa36:	6802      	ldr	r2, [r0, #0]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	bf18      	it	ne
 800aa3c:	2400      	movne	r4, #0
 800aa3e:	f7fd fe87 	bl	8008750 <_ai_platform_acquire_crc>
 800aa42:	4b54      	ldr	r3, [pc, #336]	; (800ab94 <ai_platform_observer_register_s+0x168>)
 800aa44:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa4e:	189a      	adds	r2, r3, r2
 800aa50:	2a01      	cmp	r2, #1
 800aa52:	d929      	bls.n	800aaa8 <ai_platform_observer_register_s+0x7c>
 800aa54:	f240 4249 	movw	r2, #1097	; 0x449
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d025      	beq.n	800aaa8 <ai_platform_observer_register_s+0x7c>
 800aa5c:	4a4e      	ldr	r2, [pc, #312]	; (800ab98 <ai_platform_observer_register_s+0x16c>)
 800aa5e:	6813      	ldr	r3, [r2, #0]
 800aa60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa64:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800aa68:	d02b      	beq.n	800aac2 <ai_platform_observer_register_s+0x96>
 800aa6a:	6813      	ldr	r3, [r2, #0]
 800aa6c:	f240 4183 	movw	r1, #1155	; 0x483
 800aa70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa74:	428b      	cmp	r3, r1
 800aa76:	d077      	beq.n	800ab68 <ai_platform_observer_register_s+0x13c>
 800aa78:	6813      	ldr	r3, [r2, #0]
 800aa7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa7e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800aa82:	d05c      	beq.n	800ab3e <ai_platform_observer_register_s+0x112>
 800aa84:	6813      	ldr	r3, [r2, #0]
 800aa86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d129      	bne.n	800aae2 <ai_platform_observer_register_s+0xb6>
 800aa8e:	4a43      	ldr	r2, [pc, #268]	; (800ab9c <ai_platform_observer_register_s+0x170>)
 800aa90:	2301      	movs	r3, #1
 800aa92:	6093      	str	r3, [r2, #8]
 800aa94:	6893      	ldr	r3, [r2, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1fc      	bne.n	800aa94 <ai_platform_observer_register_s+0x68>
 800aa9a:	4b41      	ldr	r3, [pc, #260]	; (800aba0 <ai_platform_observer_register_s+0x174>)
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	4b41      	ldr	r3, [pc, #260]	; (800aba4 <ai_platform_observer_register_s+0x178>)
 800aaa0:	6812      	ldr	r2, [r2, #0]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d01d      	beq.n	800aae2 <ai_platform_observer_register_s+0xb6>
 800aaa6:	e7fe      	b.n	800aaa6 <ai_platform_observer_register_s+0x7a>
 800aaa8:	4a3c      	ldr	r2, [pc, #240]	; (800ab9c <ai_platform_observer_register_s+0x170>)
 800aaaa:	2301      	movs	r3, #1
 800aaac:	6093      	str	r3, [r2, #8]
 800aaae:	6893      	ldr	r3, [r2, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1fc      	bne.n	800aaae <ai_platform_observer_register_s+0x82>
 800aab4:	4b3a      	ldr	r3, [pc, #232]	; (800aba0 <ai_platform_observer_register_s+0x174>)
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	4b3a      	ldr	r3, [pc, #232]	; (800aba4 <ai_platform_observer_register_s+0x178>)
 800aaba:	6812      	ldr	r2, [r2, #0]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d010      	beq.n	800aae2 <ai_platform_observer_register_s+0xb6>
 800aac0:	e7fe      	b.n	800aac0 <ai_platform_observer_register_s+0x94>
 800aac2:	4a39      	ldr	r2, [pc, #228]	; (800aba8 <ai_platform_observer_register_s+0x17c>)
 800aac4:	2301      	movs	r3, #1
 800aac6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800aaca:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d1fb      	bne.n	800aaca <ai_platform_observer_register_s+0x9e>
 800aad2:	4b33      	ldr	r3, [pc, #204]	; (800aba0 <ai_platform_observer_register_s+0x174>)
 800aad4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800aad8:	4b32      	ldr	r3, [pc, #200]	; (800aba4 <ai_platform_observer_register_s+0x178>)
 800aada:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800aade:	429a      	cmp	r2, r3
 800aae0:	d124      	bne.n	800ab2c <ai_platform_observer_register_s+0x100>
 800aae2:	f7fd fe37 	bl	8008754 <_ai_platform_release_crc>
 800aae6:	2d00      	cmp	r5, #0
 800aae8:	bf18      	it	ne
 800aaea:	2c00      	cmpne	r4, #0
 800aaec:	bf0c      	ite	eq
 800aaee:	2601      	moveq	r6, #1
 800aaf0:	2600      	movne	r6, #0
 800aaf2:	d031      	beq.n	800ab58 <ai_platform_observer_register_s+0x12c>
 800aaf4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aaf6:	b9d3      	cbnz	r3, 800ab2e <ai_platform_observer_register_s+0x102>
 800aaf8:	81eb      	strh	r3, [r5, #14]
 800aafa:	2101      	movs	r1, #1
 800aafc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aafe:	e006      	b.n	800ab0e <ai_platform_observer_register_s+0xe2>
 800ab00:	81e9      	strh	r1, [r5, #14]
 800ab02:	b281      	uxth	r1, r0
 800ab04:	691a      	ldr	r2, [r3, #16]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	4613      	mov	r3, r2
 800ab0a:	d003      	beq.n	800ab14 <ai_platform_observer_register_s+0xe8>
 800ab0c:	b112      	cbz	r2, 800ab14 <ai_platform_observer_register_s+0xe8>
 800ab0e:	1c48      	adds	r0, r1, #1
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1f5      	bne.n	800ab00 <ai_platform_observer_register_s+0xd4>
 800ab14:	7a2b      	ldrb	r3, [r5, #8]
 800ab16:	2100      	movs	r1, #0
 800ab18:	4a24      	ldr	r2, [pc, #144]	; (800abac <ai_platform_observer_register_s+0x180>)
 800ab1a:	2601      	movs	r6, #1
 800ab1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ab20:	81a9      	strh	r1, [r5, #12]
 800ab22:	4630      	mov	r0, r6
 800ab24:	60ab      	str	r3, [r5, #8]
 800ab26:	e9c4 250f 	strd	r2, r5, [r4, #60]	; 0x3c
 800ab2a:	bd70      	pop	{r4, r5, r6, pc}
 800ab2c:	e7fe      	b.n	800ab2c <ai_platform_observer_register_s+0x100>
 800ab2e:	2240      	movs	r2, #64	; 0x40
 800ab30:	2111      	movs	r1, #17
 800ab32:	f104 0010 	add.w	r0, r4, #16
 800ab36:	f000 f8e1 	bl	800acfc <core_set_error>
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	bd70      	pop	{r4, r5, r6, pc}
 800ab3e:	4a17      	ldr	r2, [pc, #92]	; (800ab9c <ai_platform_observer_register_s+0x170>)
 800ab40:	2301      	movs	r3, #1
 800ab42:	6093      	str	r3, [r2, #8]
 800ab44:	6893      	ldr	r3, [r2, #8]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1fc      	bne.n	800ab44 <ai_platform_observer_register_s+0x118>
 800ab4a:	4b15      	ldr	r3, [pc, #84]	; (800aba0 <ai_platform_observer_register_s+0x174>)
 800ab4c:	6013      	str	r3, [r2, #0]
 800ab4e:	4b15      	ldr	r3, [pc, #84]	; (800aba4 <ai_platform_observer_register_s+0x178>)
 800ab50:	6812      	ldr	r2, [r2, #0]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d0c5      	beq.n	800aae2 <ai_platform_observer_register_s+0xb6>
 800ab56:	e7fe      	b.n	800ab56 <ai_platform_observer_register_s+0x12a>
 800ab58:	b1bc      	cbz	r4, 800ab8a <ai_platform_observer_register_s+0x15e>
 800ab5a:	2110      	movs	r1, #16
 800ab5c:	2211      	movs	r2, #17
 800ab5e:	2600      	movs	r6, #0
 800ab60:	1860      	adds	r0, r4, r1
 800ab62:	f000 f8cb 	bl	800acfc <core_set_error>
 800ab66:	e7e8      	b.n	800ab3a <ai_platform_observer_register_s+0x10e>
 800ab68:	4a0f      	ldr	r2, [pc, #60]	; (800aba8 <ai_platform_observer_register_s+0x17c>)
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ab70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d1fb      	bne.n	800ab70 <ai_platform_observer_register_s+0x144>
 800ab78:	4b09      	ldr	r3, [pc, #36]	; (800aba0 <ai_platform_observer_register_s+0x174>)
 800ab7a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ab7e:	4b09      	ldr	r3, [pc, #36]	; (800aba4 <ai_platform_observer_register_s+0x178>)
 800ab80:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d0ac      	beq.n	800aae2 <ai_platform_observer_register_s+0xb6>
 800ab88:	e7fe      	b.n	800ab88 <ai_platform_observer_register_s+0x15c>
 800ab8a:	4626      	mov	r6, r4
 800ab8c:	e7d5      	b.n	800ab3a <ai_platform_observer_register_s+0x10e>
 800ab8e:	bf00      	nop
 800ab90:	a1c00100 	.word	0xa1c00100
 800ab94:	e0042000 	.word	0xe0042000
 800ab98:	5c001000 	.word	0x5c001000
 800ab9c:	40023000 	.word	0x40023000
 800aba0:	f407a5c2 	.word	0xf407a5c2
 800aba4:	b5e8b5cd 	.word	0xb5e8b5cd
 800aba8:	58024000 	.word	0x58024000
 800abac:	0800862d 	.word	0x0800862d

0800abb0 <ai_platform_observer_unregister_s>:
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	4604      	mov	r4, r0
 800abb4:	460d      	mov	r5, r1
 800abb6:	b120      	cbz	r0, 800abc2 <ai_platform_observer_unregister_s+0x12>
 800abb8:	4b45      	ldr	r3, [pc, #276]	; (800acd0 <ai_platform_observer_unregister_s+0x120>)
 800abba:	6802      	ldr	r2, [r0, #0]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	bf18      	it	ne
 800abc0:	2400      	movne	r4, #0
 800abc2:	f7fd fdc5 	bl	8008750 <_ai_platform_acquire_crc>
 800abc6:	4b43      	ldr	r3, [pc, #268]	; (800acd4 <ai_platform_observer_unregister_s+0x124>)
 800abc8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abd2:	189a      	adds	r2, r3, r2
 800abd4:	2a01      	cmp	r2, #1
 800abd6:	d929      	bls.n	800ac2c <ai_platform_observer_unregister_s+0x7c>
 800abd8:	f240 4249 	movw	r2, #1097	; 0x449
 800abdc:	4293      	cmp	r3, r2
 800abde:	d025      	beq.n	800ac2c <ai_platform_observer_unregister_s+0x7c>
 800abe0:	4a3d      	ldr	r2, [pc, #244]	; (800acd8 <ai_platform_observer_unregister_s+0x128>)
 800abe2:	6813      	ldr	r3, [r2, #0]
 800abe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abe8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800abec:	d02b      	beq.n	800ac46 <ai_platform_observer_unregister_s+0x96>
 800abee:	6813      	ldr	r3, [r2, #0]
 800abf0:	f240 4183 	movw	r1, #1155	; 0x483
 800abf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800abf8:	428b      	cmp	r3, r1
 800abfa:	d04d      	beq.n	800ac98 <ai_platform_observer_unregister_s+0xe8>
 800abfc:	6813      	ldr	r3, [r2, #0]
 800abfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac02:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800ac06:	d03a      	beq.n	800ac7e <ai_platform_observer_unregister_s+0xce>
 800ac08:	6813      	ldr	r3, [r2, #0]
 800ac0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d129      	bne.n	800ac66 <ai_platform_observer_unregister_s+0xb6>
 800ac12:	4a32      	ldr	r2, [pc, #200]	; (800acdc <ai_platform_observer_unregister_s+0x12c>)
 800ac14:	2301      	movs	r3, #1
 800ac16:	6093      	str	r3, [r2, #8]
 800ac18:	6893      	ldr	r3, [r2, #8]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d1fc      	bne.n	800ac18 <ai_platform_observer_unregister_s+0x68>
 800ac1e:	4b30      	ldr	r3, [pc, #192]	; (800ace0 <ai_platform_observer_unregister_s+0x130>)
 800ac20:	6013      	str	r3, [r2, #0]
 800ac22:	4b30      	ldr	r3, [pc, #192]	; (800ace4 <ai_platform_observer_unregister_s+0x134>)
 800ac24:	6812      	ldr	r2, [r2, #0]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d01d      	beq.n	800ac66 <ai_platform_observer_unregister_s+0xb6>
 800ac2a:	e7fe      	b.n	800ac2a <ai_platform_observer_unregister_s+0x7a>
 800ac2c:	4a2b      	ldr	r2, [pc, #172]	; (800acdc <ai_platform_observer_unregister_s+0x12c>)
 800ac2e:	2301      	movs	r3, #1
 800ac30:	6093      	str	r3, [r2, #8]
 800ac32:	6893      	ldr	r3, [r2, #8]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d1fc      	bne.n	800ac32 <ai_platform_observer_unregister_s+0x82>
 800ac38:	4b29      	ldr	r3, [pc, #164]	; (800ace0 <ai_platform_observer_unregister_s+0x130>)
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	4b29      	ldr	r3, [pc, #164]	; (800ace4 <ai_platform_observer_unregister_s+0x134>)
 800ac3e:	6812      	ldr	r2, [r2, #0]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d010      	beq.n	800ac66 <ai_platform_observer_unregister_s+0xb6>
 800ac44:	e7fe      	b.n	800ac44 <ai_platform_observer_unregister_s+0x94>
 800ac46:	4a28      	ldr	r2, [pc, #160]	; (800ace8 <ai_platform_observer_unregister_s+0x138>)
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800ac4e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1fb      	bne.n	800ac4e <ai_platform_observer_unregister_s+0x9e>
 800ac56:	4b22      	ldr	r3, [pc, #136]	; (800ace0 <ai_platform_observer_unregister_s+0x130>)
 800ac58:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800ac5c:	4b21      	ldr	r3, [pc, #132]	; (800ace4 <ai_platform_observer_unregister_s+0x134>)
 800ac5e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d10a      	bne.n	800ac7c <ai_platform_observer_unregister_s+0xcc>
 800ac66:	f7fd fd75 	bl	8008754 <_ai_platform_release_crc>
 800ac6a:	b374      	cbz	r4, 800acca <ai_platform_observer_unregister_s+0x11a>
 800ac6c:	fab5 f385 	clz	r3, r5
 800ac70:	095b      	lsrs	r3, r3, #5
 800ac72:	b315      	cbz	r5, 800acba <ai_platform_observer_unregister_s+0x10a>
 800ac74:	2001      	movs	r0, #1
 800ac76:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 800ac7a:	bd38      	pop	{r3, r4, r5, pc}
 800ac7c:	e7fe      	b.n	800ac7c <ai_platform_observer_unregister_s+0xcc>
 800ac7e:	4a17      	ldr	r2, [pc, #92]	; (800acdc <ai_platform_observer_unregister_s+0x12c>)
 800ac80:	2301      	movs	r3, #1
 800ac82:	6093      	str	r3, [r2, #8]
 800ac84:	6893      	ldr	r3, [r2, #8]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1fc      	bne.n	800ac84 <ai_platform_observer_unregister_s+0xd4>
 800ac8a:	4b15      	ldr	r3, [pc, #84]	; (800ace0 <ai_platform_observer_unregister_s+0x130>)
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	4b15      	ldr	r3, [pc, #84]	; (800ace4 <ai_platform_observer_unregister_s+0x134>)
 800ac90:	6812      	ldr	r2, [r2, #0]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d0e7      	beq.n	800ac66 <ai_platform_observer_unregister_s+0xb6>
 800ac96:	e7fe      	b.n	800ac96 <ai_platform_observer_unregister_s+0xe6>
 800ac98:	4a13      	ldr	r2, [pc, #76]	; (800ace8 <ai_platform_observer_unregister_s+0x138>)
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800aca0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1fb      	bne.n	800aca0 <ai_platform_observer_unregister_s+0xf0>
 800aca8:	4b0d      	ldr	r3, [pc, #52]	; (800ace0 <ai_platform_observer_unregister_s+0x130>)
 800acaa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800acae:	4b0d      	ldr	r3, [pc, #52]	; (800ace4 <ai_platform_observer_unregister_s+0x134>)
 800acb0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d0d6      	beq.n	800ac66 <ai_platform_observer_unregister_s+0xb6>
 800acb8:	e7fe      	b.n	800acb8 <ai_platform_observer_unregister_s+0x108>
 800acba:	b134      	cbz	r4, 800acca <ai_platform_observer_unregister_s+0x11a>
 800acbc:	2110      	movs	r1, #16
 800acbe:	2211      	movs	r2, #17
 800acc0:	1860      	adds	r0, r4, r1
 800acc2:	f000 f81b 	bl	800acfc <core_set_error>
 800acc6:	2000      	movs	r0, #0
 800acc8:	bd38      	pop	{r3, r4, r5, pc}
 800acca:	4620      	mov	r0, r4
 800accc:	bd38      	pop	{r3, r4, r5, pc}
 800acce:	bf00      	nop
 800acd0:	a1c00100 	.word	0xa1c00100
 800acd4:	e0042000 	.word	0xe0042000
 800acd8:	5c001000 	.word	0x5c001000
 800acdc:	40023000 	.word	0x40023000
 800ace0:	f407a5c2 	.word	0xf407a5c2
 800ace4:	b5e8b5cd 	.word	0xb5e8b5cd
 800ace8:	58024000 	.word	0x58024000

0800acec <core_init>:
 800acec:	2001      	movs	r0, #1
 800acee:	4770      	bx	lr

0800acf0 <core_get_error>:
 800acf0:	4603      	mov	r3, r0
 800acf2:	2200      	movs	r2, #0
 800acf4:	6800      	ldr	r0, [r0, #0]
 800acf6:	601a      	str	r2, [r3, #0]
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop

0800acfc <core_set_error>:
 800acfc:	4603      	mov	r3, r0
 800acfe:	7800      	ldrb	r0, [r0, #0]
 800ad00:	b108      	cbz	r0, 800ad06 <core_set_error+0xa>
 800ad02:	2000      	movs	r0, #0
 800ad04:	4770      	bx	lr
 800ad06:	7019      	strb	r1, [r3, #0]
 800ad08:	2001      	movs	r0, #1
 800ad0a:	6819      	ldr	r1, [r3, #0]
 800ad0c:	f362 211f 	bfi	r1, r2, #8, #24
 800ad10:	6019      	str	r1, [r3, #0]
 800ad12:	4770      	bx	lr

0800ad14 <func_dummy>:
 800ad14:	4770      	bx	lr
 800ad16:	bf00      	nop

0800ad18 <ai_conv2d_stripe_f32.constprop.0>:
 800ad18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad1c:	ed2d 8b0e 	vpush	{d8-d14}
 800ad20:	b09d      	sub	sp, #116	; 0x74
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	f8d7 90ec 	ldr.w	r9, [r7, #236]	; 0xec
 800ad28:	66f8      	str	r0, [r7, #108]	; 0x6c
 800ad2a:	f1b9 0f01 	cmp.w	r9, #1
 800ad2e:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800ad32:	f8d7 50e4 	ldr.w	r5, [r7, #228]	; 0xe4
 800ad36:	f8d7 c0fc 	ldr.w	ip, [r7, #252]	; 0xfc
 800ad3a:	f9b7 e104 	ldrsh.w	lr, [r7, #260]	; 0x104
 800ad3e:	6579      	str	r1, [r7, #84]	; 0x54
 800ad40:	e9c7 3219 	strd	r3, r2, [r7, #100]	; 0x64
 800ad44:	f8b7 30e8 	ldrh.w	r3, [r7, #232]	; 0xe8
 800ad48:	f9b7 2108 	ldrsh.w	r2, [r7, #264]	; 0x108
 800ad4c:	663b      	str	r3, [r7, #96]	; 0x60
 800ad4e:	e9d7 303c 	ldrd	r3, r0, [r7, #240]	; 0xf0
 800ad52:	f000 812f 	beq.w	800afb4 <ai_conv2d_stripe_f32.constprop.0+0x29c>
 800ad56:	45b1      	cmp	r9, r6
 800ad58:	f000 8278 	beq.w	800b24c <ai_conv2d_stripe_f32.constprop.0+0x534>
 800ad5c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800ad60:	2900      	cmp	r1, #0
 800ad62:	f000 8114 	beq.w	800af8e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800ad66:	eba0 0803 	sub.w	r8, r0, r3
 800ad6a:	1898      	adds	r0, r3, r2
 800ad6c:	eddf 6a90 	vldr	s13, [pc, #576]	; 800afb0 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800ad70:	3801      	subs	r0, #1
 800ad72:	fb93 f1f2 	sdiv	r1, r3, r2
 800ad76:	fb90 f0f2 	sdiv	r0, r0, r2
 800ad7a:	fb02 3111 	mls	r1, r2, r1, r3
 800ad7e:	eba2 0a01 	sub.w	sl, r2, r1
 800ad82:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800ad86:	fb01 f100 	mul.w	r1, r1, r0
 800ad8a:	fb9a f0f2 	sdiv	r0, sl, r2
 800ad8e:	fb02 a010 	mls	r0, r2, r0, sl
 800ad92:	62b9      	str	r1, [r7, #40]	; 0x28
 800ad94:	4403      	add	r3, r0
 800ad96:	eba8 0100 	sub.w	r1, r8, r0
 800ad9a:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800ad9e:	4463      	add	r3, ip
 800ada0:	4411      	add	r1, r2
 800ada2:	fb00 f303 	mul.w	r3, r0, r3
 800ada6:	3901      	subs	r1, #1
 800ada8:	fbb6 f4f9 	udiv	r4, r6, r9
 800adac:	623b      	str	r3, [r7, #32]
 800adae:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800adb2:	fb00 f302 	mul.w	r3, r0, r2
 800adb6:	f8c7 a014 	str.w	sl, [r7, #20]
 800adba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800adbc:	fb0e f306 	mul.w	r3, lr, r6
 800adc0:	1b1b      	subs	r3, r3, r4
 800adc2:	fb91 fbf2 	sdiv	fp, r1, r2
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	eba5 020b 	sub.w	r2, r5, fp
 800adcc:	00b1      	lsls	r1, r6, #2
 800adce:	46dc      	mov	ip, fp
 800add0:	64bb      	str	r3, [r7, #72]	; 0x48
 800add2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800add6:	61f9      	str	r1, [r7, #28]
 800add8:	fb04 f303 	mul.w	r3, r4, r3
 800addc:	fb02 f303 	mul.w	r3, r2, r3
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	627b      	str	r3, [r7, #36]	; 0x24
 800ade4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ade8:	fbb3 f3f9 	udiv	r3, r3, r9
 800adec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	633b      	str	r3, [r7, #48]	; 0x30
 800adf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800adfa:	f1c3 0800 	rsb	r8, r3, #0
 800adfe:	ebae 0303 	sub.w	r3, lr, r3
 800ae02:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae04:	2300      	movs	r3, #0
 800ae06:	653b      	str	r3, [r7, #80]	; 0x50
 800ae08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	f2c0 80c4 	blt.w	800af9a <ai_conv2d_stripe_f32.constprop.0+0x282>
 800ae12:	2000      	movs	r0, #0
 800ae14:	4673      	mov	r3, lr
 800ae16:	4672      	mov	r2, lr
 800ae18:	4601      	mov	r1, r0
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800ae1e:	f8d7 5100 	ldr.w	r5, [r7, #256]	; 0x100
 800ae22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae26:	fb93 f3fe 	sdiv	r3, r3, lr
 800ae2a:	4423      	add	r3, r4
 800ae2c:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 800ae2e:	fb0a 4303 	mla	r3, sl, r3, r4
 800ae32:	fb92 f4fe 	sdiv	r4, r2, lr
 800ae36:	fb0e 2214 	mls	r2, lr, r4, r2
 800ae3a:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800ae3e:	4444      	add	r4, r8
 800ae40:	42ac      	cmp	r4, r5
 800ae42:	bf94      	ite	ls
 800ae44:	ebc1 0104 	rsbls	r1, r1, r4
 800ae48:	ebc1 0105 	rsbhi	r1, r1, r5
 800ae4c:	6a3c      	ldr	r4, [r7, #32]
 800ae4e:	1a89      	subs	r1, r1, r2
 800ae50:	4471      	add	r1, lr
 800ae52:	3901      	subs	r1, #1
 800ae54:	fb91 f6fe 	sdiv	r6, r1, lr
 800ae58:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800ae5c:	4421      	add	r1, r4
 800ae5e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800ae60:	4401      	add	r1, r0
 800ae62:	69f8      	ldr	r0, [r7, #28]
 800ae64:	4411      	add	r1, r2
 800ae66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae68:	fb00 2201 	mla	r2, r0, r1, r2
 800ae6c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ae6e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800ae70:	460a      	mov	r2, r1
 800ae72:	2900      	cmp	r1, #0
 800ae74:	bf08      	it	eq
 800ae76:	4622      	moveq	r2, r4
 800ae78:	42a2      	cmp	r2, r4
 800ae7a:	637a      	str	r2, [r7, #52]	; 0x34
 800ae7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae7e:	fe06 7a87 	vseleq.f32	s14, s13, s14
 800ae82:	fb0e 2116 	mls	r1, lr, r6, r2
 800ae86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ae8a:	1b92      	subs	r2, r2, r6
 800ae8c:	f1b9 0f00 	cmp.w	r9, #0
 800ae90:	d066      	beq.n	800af60 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800ae92:	fb0a f202 	mul.w	r2, sl, r2
 800ae96:	fb00 f101 	mul.w	r1, r0, r1
 800ae9a:	643a      	str	r2, [r7, #64]	; 0x40
 800ae9c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800aea0:	6479      	str	r1, [r7, #68]	; 0x44
 800aea2:	4591      	cmp	r9, r2
 800aea4:	d85c      	bhi.n	800af60 <ai_conv2d_stripe_f32.constprop.0+0x248>
 800aea6:	2500      	movs	r5, #0
 800aea8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aeaa:	46ab      	mov	fp, r5
 800aeac:	3a01      	subs	r2, #1
 800aeae:	e9c7 e803 	strd	lr, r8, [r7, #12]
 800aeb2:	61ba      	str	r2, [r7, #24]
 800aeb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aeb6:	f04f 0800 	mov.w	r8, #0
 800aeba:	f8c7 b008 	str.w	fp, [r7, #8]
 800aebe:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800aec2:	63ba      	str	r2, [r7, #56]	; 0x38
 800aec4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aec6:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800aeca:	63fa      	str	r2, [r7, #60]	; 0x3c
 800aecc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aece:	f1bc 0f00 	cmp.w	ip, #0
 800aed2:	ecf2 7a01 	vldmia	r2!, {s15}
 800aed6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aeda:	63ba      	str	r2, [r7, #56]	; 0x38
 800aedc:	dd21      	ble.n	800af22 <ai_conv2d_stripe_f32.constprop.0+0x20a>
 800aede:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aee0:	2100      	movs	r1, #0
 800aee2:	2e00      	cmp	r6, #0
 800aee4:	dd16      	ble.n	800af14 <ai_conv2d_stripe_f32.constprop.0+0x1fc>
 800aee6:	2000      	movs	r0, #0
 800aee8:	eb02 040a 	add.w	r4, r2, sl
 800aeec:	4294      	cmp	r4, r2
 800aeee:	d90c      	bls.n	800af0a <ai_conv2d_stripe_f32.constprop.0+0x1f2>
 800aef0:	4696      	mov	lr, r2
 800aef2:	469b      	mov	fp, r3
 800aef4:	ecbe 6a01 	vldmia	lr!, {s12}
 800aef8:	ecfb 5a01 	vldmia	fp!, {s11}
 800aefc:	4574      	cmp	r4, lr
 800aefe:	eee5 7a86 	vfma.f32	s15, s11, s12
 800af02:	d8f7      	bhi.n	800aef4 <ai_conv2d_stripe_f32.constprop.0+0x1dc>
 800af04:	697c      	ldr	r4, [r7, #20]
 800af06:	4423      	add	r3, r4
 800af08:	4422      	add	r2, r4
 800af0a:	3001      	adds	r0, #1
 800af0c:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800af0e:	4286      	cmp	r6, r0
 800af10:	4422      	add	r2, r4
 800af12:	d1e9      	bne.n	800aee8 <ai_conv2d_stripe_f32.constprop.0+0x1d0>
 800af14:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af16:	3101      	adds	r1, #1
 800af18:	4402      	add	r2, r0
 800af1a:	458c      	cmp	ip, r1
 800af1c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800af1e:	4403      	add	r3, r0
 800af20:	d1df      	bne.n	800aee2 <ai_conv2d_stripe_f32.constprop.0+0x1ca>
 800af22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af24:	f108 0801 	add.w	r8, r8, #1
 800af28:	ece2 7a01 	vstmia	r2!, {s15}
 800af2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800af2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af30:	4413      	add	r3, r2
 800af32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af34:	4542      	cmp	r2, r8
 800af36:	d8c9      	bhi.n	800aecc <ai_conv2d_stripe_f32.constprop.0+0x1b4>
 800af38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800af3a:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800af3e:	4452      	add	r2, sl
 800af40:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800af44:	f10b 0b01 	add.w	fp, fp, #1
 800af48:	65fa      	str	r2, [r7, #92]	; 0x5c
 800af4a:	69ba      	ldr	r2, [r7, #24]
 800af4c:	4589      	cmp	r9, r1
 800af4e:	bf88      	it	hi
 800af50:	2200      	movhi	r2, #0
 800af52:	45d9      	cmp	r9, fp
 800af54:	f102 0201 	add.w	r2, r2, #1
 800af58:	4415      	add	r5, r2
 800af5a:	d1ab      	bne.n	800aeb4 <ai_conv2d_stripe_f32.constprop.0+0x19c>
 800af5c:	e9d7 e803 	ldrd	lr, r8, [r7, #12]
 800af60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af66:	440a      	add	r2, r1
 800af68:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 800af6c:	3301      	adds	r3, #1
 800af6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800af70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af72:	653b      	str	r3, [r7, #80]	; 0x50
 800af74:	4411      	add	r1, r2
 800af76:	eba8 0802 	sub.w	r8, r8, r2
 800af7a:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800af7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af80:	1a8a      	subs	r2, r1, r2
 800af82:	65ba      	str	r2, [r7, #88]	; 0x58
 800af84:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800af88:	429a      	cmp	r2, r3
 800af8a:	f47f af3d 	bne.w	800ae08 <ai_conv2d_stripe_f32.constprop.0+0xf0>
 800af8e:	3774      	adds	r7, #116	; 0x74
 800af90:	46bd      	mov	sp, r7
 800af92:	ecbd 8b0e 	vpop	{d8-d14}
 800af96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9a:	fb98 f2fe 	sdiv	r2, r8, lr
 800af9e:	fb0e 8212 	mls	r2, lr, r2, r8
 800afa2:	4641      	mov	r1, r8
 800afa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800afa6:	4640      	mov	r0, r8
 800afa8:	ebae 0202 	sub.w	r2, lr, r2
 800afac:	e735      	b.n	800ae1a <ai_conv2d_stripe_f32.constprop.0+0x102>
 800afae:	bf00      	nop
 800afb0:	00000000 	.word	0x00000000
 800afb4:	fb0e f102 	mul.w	r1, lr, r2
 800afb8:	2901      	cmp	r1, #1
 800afba:	f47f aecf 	bne.w	800ad5c <ai_conv2d_stripe_f32.constprop.0+0x44>
 800afbe:	1ac2      	subs	r2, r0, r3
 800afc0:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800afc4:	00b0      	lsls	r0, r6, #2
 800afc6:	eb0c 0103 	add.w	r1, ip, r3
 800afca:	65fa      	str	r2, [r7, #92]	; 0x5c
 800afcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afce:	63b8      	str	r0, [r7, #56]	; 0x38
 800afd0:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800afd4:	fb00 f004 	mul.w	r0, r0, r4
 800afd8:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800afda:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800afde:	fb00 4101 	mla	r1, r0, r1, r4
 800afe2:	65b9      	str	r1, [r7, #88]	; 0x58
 800afe4:	f080 8263 	bcs.w	800b4ae <ai_conv2d_stripe_f32.constprop.0+0x796>
 800afe8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800afec:	2a00      	cmp	r2, #0
 800afee:	d0ce      	beq.n	800af8e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800aff0:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800aff4:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800aff8:	fb05 f202 	mul.w	r2, r5, r2
 800affc:	ed1f 6a14 	vldr	s12, [pc, #-80]	; 800afb0 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800b000:	fb00 f303 	mul.w	r3, r0, r3
 800b004:	64bb      	str	r3, [r7, #72]	; 0x48
 800b006:	fb06 f302 	mul.w	r3, r6, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	643b      	str	r3, [r7, #64]	; 0x40
 800b00e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b010:	fb03 f306 	mul.w	r3, r3, r6
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	627b      	str	r3, [r7, #36]	; 0x24
 800b018:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b01c:	fb03 f306 	mul.w	r3, r3, r6
 800b020:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b024:	62bb      	str	r3, [r7, #40]	; 0x28
 800b026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b02e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b030:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b032:	2300      	movs	r3, #0
 800b034:	653b      	str	r3, [r7, #80]	; 0x50
 800b036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 8104 	beq.w	800b246 <ai_conv2d_stripe_f32.constprop.0+0x52e>
 800b03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b040:	ecf3 6a01 	vldmia	r3!, {s13}
 800b044:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 80e8 	beq.w	800b220 <ai_conv2d_stripe_f32.constprop.0+0x508>
 800b050:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b054:	f04f 0b00 	mov.w	fp, #0
 800b058:	f8d7 90f8 	ldr.w	r9, [r7, #248]	; 0xf8
 800b05c:	425d      	negs	r5, r3
 800b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b060:	657b      	str	r3, [r7, #84]	; 0x54
 800b062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b064:	647b      	str	r3, [r7, #68]	; 0x44
 800b066:	f1b9 0f00 	cmp.w	r9, #0
 800b06a:	f2c0 8219 	blt.w	800b4a0 <ai_conv2d_stripe_f32.constprop.0+0x788>
 800b06e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b070:	2300      	movs	r3, #0
 800b072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b074:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800b076:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800b078:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800b07c:	fb02 0c06 	mla	ip, r2, r6, r0
 800b080:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800b084:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b088:	4428      	add	r0, r5
 800b08a:	42a0      	cmp	r0, r4
 800b08c:	bf94      	ite	ls
 800b08e:	ebc3 0300 	rsbls	r3, r3, r0
 800b092:	ebc3 0304 	rsbhi	r3, r3, r4
 800b096:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800b09a:	1ac4      	subs	r4, r0, r3
 800b09c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800b0a0:	1ac0      	subs	r0, r0, r3
 800b0a2:	fb02 f303 	mul.w	r3, r2, r3
 800b0a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0a8:	2a00      	cmp	r2, #0
 800b0aa:	f340 81f6 	ble.w	800b49a <ai_conv2d_stripe_f32.constprop.0+0x782>
 800b0ae:	fb06 f204 	mul.w	r2, r6, r4
 800b0b2:	f023 040f 	bic.w	r4, r3, #15
 800b0b6:	eeb0 7a66 	vmov.f32	s14, s13
 800b0ba:	637a      	str	r2, [r7, #52]	; 0x34
 800b0bc:	fb06 f200 	mul.w	r2, r6, r0
 800b0c0:	1e60      	subs	r0, r4, #1
 800b0c2:	2600      	movs	r6, #0
 800b0c4:	0900      	lsrs	r0, r0, #4
 800b0c6:	633a      	str	r2, [r7, #48]	; 0x30
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	0102      	lsls	r2, r0, #4
 800b0cc:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800b0d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b0d2:	4662      	mov	r2, ip
 800b0d4:	2c00      	cmp	r4, #0
 800b0d6:	f340 81e8 	ble.w	800b4aa <ai_conv2d_stripe_f32.constprop.0+0x792>
 800b0da:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800b0de:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800b0e2:	f04f 0800 	mov.w	r8, #0
 800b0e6:	ed50 5a0f 	vldr	s11, [r0, #-60]	; 0xffffffc4
 800b0ea:	f108 0810 	add.w	r8, r8, #16
 800b0ee:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800b0f2:	3040      	adds	r0, #64	; 0x40
 800b0f4:	ed5c 3a10 	vldr	s7, [ip, #-64]	; 0xffffffc0
 800b0f8:	45a0      	cmp	r8, r4
 800b0fa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b0fe:	ed10 4a20 	vldr	s8, [r0, #-128]	; 0xffffff80
 800b102:	ed5c 4a0e 	vldr	s9, [ip, #-56]	; 0xffffffc8
 800b106:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800b10a:	ed10 5a1e 	vldr	s10, [r0, #-120]	; 0xffffff88
 800b10e:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b112:	ed50 5a1d 	vldr	s11, [r0, #-116]	; 0xffffff8c
 800b116:	ed1c ea1d 	vldr	s28, [ip, #-116]	; 0xffffff8c
 800b11a:	ed5c da1c 	vldr	s27, [ip, #-112]	; 0xffffff90
 800b11e:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800b122:	ed5c ca1b 	vldr	s25, [ip, #-108]	; 0xffffff94
 800b126:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800b12a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b12e:	ed5c ba1a 	vldr	s23, [ip, #-104]	; 0xffffff98
 800b132:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800b136:	ed5c aa19 	vldr	s21, [ip, #-100]	; 0xffffff9c
 800b13a:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800b13e:	ed5c 9a18 	vldr	s19, [ip, #-96]	; 0xffffffa0
 800b142:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800b146:	eeee 7a25 	vfma.f32	s15, s28, s11
 800b14a:	ed5c 8a17 	vldr	s17, [ip, #-92]	; 0xffffffa4
 800b14e:	ed10 8a17 	vldr	s16, [r0, #-92]	; 0xffffffa4
 800b152:	ed1c 0a16 	vldr	s0, [ip, #-88]	; 0xffffffa8
 800b156:	ed50 0a16 	vldr	s1, [r0, #-88]	; 0xffffffa8
 800b15a:	ed1c 1a15 	vldr	s2, [ip, #-84]	; 0xffffffac
 800b15e:	ed50 1a15 	vldr	s3, [r0, #-84]	; 0xffffffac
 800b162:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b166:	ed1c 2a14 	vldr	s4, [ip, #-80]	; 0xffffffb0
 800b16a:	ed50 2a14 	vldr	s5, [r0, #-80]	; 0xffffffb0
 800b16e:	ed1c 3a13 	vldr	s6, [ip, #-76]	; 0xffffffb4
 800b172:	ed50 3a13 	vldr	s7, [r0, #-76]	; 0xffffffb4
 800b176:	ed1c 4a12 	vldr	s8, [ip, #-72]	; 0xffffffb8
 800b17a:	ed50 4a12 	vldr	s9, [r0, #-72]	; 0xffffffb8
 800b17e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b182:	ed1c 5a11 	vldr	s10, [ip, #-68]	; 0xffffffbc
 800b186:	ed50 5a11 	vldr	s11, [r0, #-68]	; 0xffffffbc
 800b18a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b18e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b192:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b196:	eee8 7a88 	vfma.f32	s15, s17, s16
 800b19a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800b19e:	eee1 7a21 	vfma.f32	s15, s2, s3
 800b1a2:	eee2 7a22 	vfma.f32	s15, s4, s5
 800b1a6:	eee3 7a23 	vfma.f32	s15, s6, s7
 800b1aa:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b1ae:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b1b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b1b6:	db96      	blt.n	800b0e6 <ai_conv2d_stripe_f32.constprop.0+0x3ce>
 800b1b8:	4471      	add	r1, lr
 800b1ba:	4472      	add	r2, lr
 800b1bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b1be:	4283      	cmp	r3, r0
 800b1c0:	dd11      	ble.n	800b1e6 <ai_conv2d_stripe_f32.constprop.0+0x4ce>
 800b1c2:	4684      	mov	ip, r0
 800b1c4:	468a      	mov	sl, r1
 800b1c6:	4690      	mov	r8, r2
 800b1c8:	f10c 0c01 	add.w	ip, ip, #1
 800b1cc:	ecf8 5a01 	vldmia	r8!, {s11}
 800b1d0:	ecfa 7a01 	vldmia	sl!, {s15}
 800b1d4:	4563      	cmp	r3, ip
 800b1d6:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b1da:	d1f5      	bne.n	800b1c8 <ai_conv2d_stripe_f32.constprop.0+0x4b0>
 800b1dc:	1a18      	subs	r0, r3, r0
 800b1de:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b1e2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800b1e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b1e8:	3601      	adds	r6, #1
 800b1ea:	4401      	add	r1, r0
 800b1ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1ee:	4402      	add	r2, r0
 800b1f0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b1f2:	42b0      	cmp	r0, r6
 800b1f4:	f47f af6e 	bne.w	800b0d4 <ai_conv2d_stripe_f32.constprop.0+0x3bc>
 800b1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1fa:	f10b 0b01 	add.w	fp, fp, #1
 800b1fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b200:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b202:	ed83 7a00 	vstr	s14, [r3]
 800b206:	440b      	add	r3, r1
 800b208:	4491      	add	r9, r2
 800b20a:	1aad      	subs	r5, r5, r2
 800b20c:	647b      	str	r3, [r7, #68]	; 0x44
 800b20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b212:	4413      	add	r3, r2
 800b214:	657b      	str	r3, [r7, #84]	; 0x54
 800b216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b21a:	455b      	cmp	r3, fp
 800b21c:	f47f af23 	bne.w	800b066 <ai_conv2d_stripe_f32.constprop.0+0x34e>
 800b220:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b222:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b226:	440a      	add	r2, r1
 800b228:	3301      	adds	r3, #1
 800b22a:	66ba      	str	r2, [r7, #104]	; 0x68
 800b22c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b22e:	653b      	str	r3, [r7, #80]	; 0x50
 800b230:	3204      	adds	r2, #4
 800b232:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b234:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b238:	429a      	cmp	r2, r3
 800b23a:	f43f aea8 	beq.w	800af8e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800b23e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b240:	2b00      	cmp	r3, #0
 800b242:	f47f aefc 	bne.w	800b03e <ai_conv2d_stripe_f32.constprop.0+0x326>
 800b246:	eef0 6a46 	vmov.f32	s13, s12
 800b24a:	e6fc      	b.n	800b046 <ai_conv2d_stripe_f32.constprop.0+0x32e>
 800b24c:	fb0e f102 	mul.w	r1, lr, r2
 800b250:	2901      	cmp	r1, #1
 800b252:	f47f ad83 	bne.w	800ad5c <ai_conv2d_stripe_f32.constprop.0+0x44>
 800b256:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b25a:	2a00      	cmp	r2, #0
 800b25c:	f43f ae97 	beq.w	800af8e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800b260:	eb0c 0203 	add.w	r2, ip, r3
 800b264:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800b268:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 800b26c:	ed5f 3ab0 	vldr	s7, [pc, #-704]	; 800afb0 <ai_conv2d_stripe_f32.constprop.0+0x298>
 800b270:	fb01 f202 	mul.w	r2, r1, r2
 800b274:	1ac1      	subs	r1, r0, r3
 800b276:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800b27a:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800b27e:	61fa      	str	r2, [r7, #28]
 800b280:	1a1a      	subs	r2, r3, r0
 800b282:	64f9      	str	r1, [r7, #76]	; 0x4c
 800b284:	ea4f 1a06 	mov.w	sl, r6, lsl #4
 800b288:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800b28c:	442a      	add	r2, r5
 800b28e:	fb03 f301 	mul.w	r3, r3, r1
 800b292:	fb01 f202 	mul.w	r2, r1, r2
 800b296:	64bb      	str	r3, [r7, #72]	; 0x48
 800b298:	0093      	lsls	r3, r2, #2
 800b29a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b29c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2a0:	fbb3 f3f6 	udiv	r3, r3, r6
 800b2a4:	61bb      	str	r3, [r7, #24]
 800b2a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b2b2:	f1c3 0b00 	rsb	fp, r3, #0
 800b2b6:	00f3      	lsls	r3, r6, #3
 800b2b8:	623b      	str	r3, [r7, #32]
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	653b      	str	r3, [r7, #80]	; 0x50
 800b2be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f2c0 80e3 	blt.w	800b48e <ai_conv2d_stripe_f32.constprop.0+0x776>
 800b2c8:	2500      	movs	r5, #0
 800b2ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b2cc:	462b      	mov	r3, r5
 800b2ce:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800b2d2:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800b2d6:	445a      	add	r2, fp
 800b2d8:	69fc      	ldr	r4, [r7, #28]
 800b2da:	6e7e      	ldr	r6, [r7, #100]	; 0x64
 800b2dc:	4282      	cmp	r2, r0
 800b2de:	bf28      	it	cs
 800b2e0:	4602      	movcs	r2, r0
 800b2e2:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800b2e6:	1ad2      	subs	r2, r2, r3
 800b2e8:	1904      	adds	r4, r0, r4
 800b2ea:	2e00      	cmp	r6, #0
 800b2ec:	f000 8228 	beq.w	800b740 <ai_conv2d_stripe_f32.constprop.0+0xa28>
 800b2f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2f2:	647e      	str	r6, [r7, #68]	; 0x44
 800b2f4:	429e      	cmp	r6, r3
 800b2f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2f8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b2fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b300:	fe03 3aa2 	vseleq.f32	s6, s7, s5
 800b304:	1a98      	subs	r0, r3, r2
 800b306:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b30a:	fb03 f000 	mul.w	r0, r3, r0
 800b30e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b312:	1a9b      	subs	r3, r3, r2
 800b314:	442c      	add	r4, r5
 800b316:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800b318:	fb08 5e04 	mla	lr, r8, r4, r5
 800b31c:	eb0e 0408 	add.w	r4, lr, r8
 800b320:	45a6      	cmp	lr, r4
 800b322:	62bc      	str	r4, [r7, #40]	; 0x28
 800b324:	f080 809a 	bcs.w	800b45c <ai_conv2d_stripe_f32.constprop.0+0x744>
 800b328:	0080      	lsls	r0, r0, #2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	6378      	str	r0, [r7, #52]	; 0x34
 800b32e:	633b      	str	r3, [r7, #48]	; 0x30
 800b330:	f022 0303 	bic.w	r3, r2, #3
 800b334:	e9d7 0434 	ldrd	r0, r4, [r7, #208]	; 0xd0
 800b338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b33a:	42a0      	cmp	r0, r4
 800b33c:	f200 808e 	bhi.w	800b45c <ai_conv2d_stripe_f32.constprop.0+0x744>
 800b340:	1e58      	subs	r0, r3, #1
 800b342:	f04f 0900 	mov.w	r9, #0
 800b346:	0880      	lsrs	r0, r0, #2
 800b348:	f8c7 903c 	str.w	r9, [r7, #60]	; 0x3c
 800b34c:	1c43      	adds	r3, r0, #1
 800b34e:	fb00 a00a 	mla	r0, r0, sl, sl
 800b352:	6138      	str	r0, [r7, #16]
 800b354:	0118      	lsls	r0, r3, #4
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	6178      	str	r0, [r7, #20]
 800b35a:	e9c7 b302 	strd	fp, r3, [r7, #8]
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b362:	4499      	add	r9, r3
 800b364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b366:	181c      	adds	r4, r3, r0
 800b368:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b36c:	65bc      	str	r4, [r7, #88]	; 0x58
 800b36e:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800b370:	627b      	str	r3, [r7, #36]	; 0x24
 800b372:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800b376:	1820      	adds	r0, r4, r0
 800b378:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b37a:	6438      	str	r0, [r7, #64]	; 0x40
 800b37c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b37e:	ecb3 7a01 	vldmia	r3!, {s14}
 800b382:	65bb      	str	r3, [r7, #88]	; 0x58
 800b384:	ee27 7a03 	vmul.f32	s14, s14, s6
 800b388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	dd55      	ble.n	800b43a <ai_conv2d_stripe_f32.constprop.0+0x722>
 800b38e:	4675      	mov	r5, lr
 800b390:	f04f 0b00 	mov.w	fp, #0
 800b394:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b396:	2b00      	cmp	r3, #0
 800b398:	f340 81d0 	ble.w	800b73c <ai_conv2d_stripe_f32.constprop.0+0xa24>
 800b39c:	6a38      	ldr	r0, [r7, #32]
 800b39e:	f101 0310 	add.w	r3, r1, #16
 800b3a2:	2600      	movs	r6, #0
 800b3a4:	607a      	str	r2, [r7, #4]
 800b3a6:	182c      	adds	r4, r5, r0
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	eb00 0c08 	add.w	ip, r0, r8
 800b3ae:	ed13 4a03 	vldr	s8, [r3, #-12]
 800b3b2:	ed53 4a04 	vldr	s9, [r3, #-16]
 800b3b6:	3604      	adds	r6, #4
 800b3b8:	eddc 7a00 	vldr	s15, [ip]
 800b3bc:	eb04 0c08 	add.w	ip, r4, r8
 800b3c0:	ed90 5a00 	vldr	s10, [r0]
 800b3c4:	3310      	adds	r3, #16
 800b3c6:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b3ca:	edd4 6a00 	vldr	s13, [r4]
 800b3ce:	ed53 5a06 	vldr	s11, [r3, #-24]	; 0xffffffe8
 800b3d2:	4450      	add	r0, sl
 800b3d4:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 800b3d8:	4454      	add	r4, sl
 800b3da:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b3de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3e0:	4296      	cmp	r6, r2
 800b3e2:	eee5 7aa6 	vfma.f32	s15, s11, s13
 800b3e6:	eddc 6a00 	vldr	s13, [ip]
 800b3ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b3ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3f2:	dbda      	blt.n	800b3aa <ai_conv2d_stripe_f32.constprop.0+0x692>
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	687a      	ldr	r2, [r7, #4]
 800b3f8:	441d      	add	r5, r3
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	68fc      	ldr	r4, [r7, #12]
 800b3fe:	4419      	add	r1, r3
 800b400:	42a2      	cmp	r2, r4
 800b402:	dd11      	ble.n	800b428 <ai_conv2d_stripe_f32.constprop.0+0x710>
 800b404:	4620      	mov	r0, r4
 800b406:	462b      	mov	r3, r5
 800b408:	460e      	mov	r6, r1
 800b40a:	3001      	adds	r0, #1
 800b40c:	edd3 7a00 	vldr	s15, [r3]
 800b410:	ecf6 6a01 	vldmia	r6!, {s13}
 800b414:	4443      	add	r3, r8
 800b416:	4290      	cmp	r0, r2
 800b418:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b41c:	d1f5      	bne.n	800b40a <ai_conv2d_stripe_f32.constprop.0+0x6f2>
 800b41e:	1b14      	subs	r4, r2, r4
 800b420:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b424:	fb04 5508 	mla	r5, r4, r8, r5
 800b428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b42a:	f10b 0b01 	add.w	fp, fp, #1
 800b42e:	441d      	add	r5, r3
 800b430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b432:	4419      	add	r1, r3
 800b434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b436:	459b      	cmp	fp, r3
 800b438:	d1ac      	bne.n	800b394 <ai_conv2d_stripe_f32.constprop.0+0x67c>
 800b43a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b43c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b43e:	eca3 7a01 	vstmia	r3!, {s14}
 800b442:	643b      	str	r3, [r7, #64]	; 0x40
 800b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b446:	4419      	add	r1, r3
 800b448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44a:	4283      	cmp	r3, r0
 800b44c:	d196      	bne.n	800b37c <ai_conv2d_stripe_f32.constprop.0+0x664>
 800b44e:	f10e 0e04 	add.w	lr, lr, #4
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	459e      	cmp	lr, r3
 800b456:	d382      	bcc.n	800b35e <ai_conv2d_stripe_f32.constprop.0+0x646>
 800b458:	f8d7 b008 	ldr.w	fp, [r7, #8]
 800b45c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b45e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b460:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b462:	440a      	add	r2, r1
 800b464:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b466:	3301      	adds	r3, #1
 800b468:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b46a:	ebab 0b01 	sub.w	fp, fp, r1
 800b46e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800b472:	653b      	str	r3, [r7, #80]	; 0x50
 800b474:	440a      	add	r2, r1
 800b476:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 800b47a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b47e:	429a      	cmp	r2, r3
 800b480:	f43f ad85 	beq.w	800af8e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800b484:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f6bf af1d 	bge.w	800b2c8 <ai_conv2d_stripe_f32.constprop.0+0x5b0>
 800b48e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b490:	465b      	mov	r3, fp
 800b492:	465d      	mov	r5, fp
 800b494:	eb02 010b 	add.w	r1, r2, fp
 800b498:	e719      	b.n	800b2ce <ai_conv2d_stripe_f32.constprop.0+0x5b6>
 800b49a:	eeb0 7a66 	vmov.f32	s14, s13
 800b49e:	e6ab      	b.n	800b1f8 <ai_conv2d_stripe_f32.constprop.0+0x4e0>
 800b4a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4a2:	462b      	mov	r3, r5
 800b4a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b4a6:	442a      	add	r2, r5
 800b4a8:	e5e4      	b.n	800b074 <ai_conv2d_stripe_f32.constprop.0+0x35c>
 800b4aa:	2000      	movs	r0, #0
 800b4ac:	e687      	b.n	800b1be <ai_conv2d_stripe_f32.constprop.0+0x4a6>
 800b4ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b4b2:	4669      	mov	r1, sp
 800b4b4:	fb05 f202 	mul.w	r2, r5, r2
 800b4b8:	ee0e 1a90 	vmov	s29, r1
 800b4bc:	fb06 f202 	mul.w	r2, r6, r2
 800b4c0:	0095      	lsls	r5, r2, #2
 800b4c2:	637a      	str	r2, [r7, #52]	; 0x34
 800b4c4:	1dea      	adds	r2, r5, #7
 800b4c6:	f022 0207 	bic.w	r2, r2, #7
 800b4ca:	ebad 0d02 	sub.w	sp, sp, r2
 800b4ce:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b4d2:	46e9      	mov	r9, sp
 800b4d4:	2a00      	cmp	r2, #0
 800b4d6:	f000 812d 	beq.w	800b734 <ai_conv2d_stripe_f32.constprop.0+0xa1c>
 800b4da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b4de:	46ca      	mov	sl, r9
 800b4e0:	ed9f 8aa7 	vldr	s16, [pc, #668]	; 800b780 <ai_conv2d_stripe_f32.constprop.0+0xa68>
 800b4e4:	46a9      	mov	r9, r5
 800b4e6:	fb02 f303 	mul.w	r3, r2, r3
 800b4ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4ec:	f8c7 60d0 	str.w	r6, [r7, #208]	; 0xd0
 800b4f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b4f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4f4:	fb03 f306 	mul.w	r3, r3, r6
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	623b      	str	r3, [r7, #32]
 800b4fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b500:	fb03 f306 	mul.w	r3, r3, r6
 800b504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b508:	627b      	str	r3, [r7, #36]	; 0x24
 800b50a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b512:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b514:	64bb      	str	r3, [r7, #72]	; 0x48
 800b516:	2300      	movs	r3, #0
 800b518:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b51c:	b123      	cbz	r3, 800b528 <ai_conv2d_stripe_f32.constprop.0+0x810>
 800b51e:	464a      	mov	r2, r9
 800b520:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b522:	4650      	mov	r0, sl
 800b524:	f001 fdf8 	bl	800d118 <memcpy>
 800b528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	f000 811c 	beq.w	800b768 <ai_conv2d_stripe_f32.constprop.0+0xa50>
 800b530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b532:	ecf3 6a01 	vldmia	r3!, {s13}
 800b536:	64bb      	str	r3, [r7, #72]	; 0x48
 800b538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f000 80eb 	beq.w	800b718 <ai_conv2d_stripe_f32.constprop.0+0xa00>
 800b542:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b546:	f8c7 901c 	str.w	r9, [r7, #28]
 800b54a:	425d      	negs	r5, r3
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54e:	653b      	str	r3, [r7, #80]	; 0x50
 800b550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b552:	643b      	str	r3, [r7, #64]	; 0x40
 800b554:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b558:	657b      	str	r3, [r7, #84]	; 0x54
 800b55a:	2300      	movs	r3, #0
 800b55c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b55e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b560:	2b00      	cmp	r3, #0
 800b562:	f2c0 8107 	blt.w	800b774 <ai_conv2d_stripe_f32.constprop.0+0xa5c>
 800b566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b568:	2300      	movs	r3, #0
 800b56a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b56c:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800b570:	f8d7 60e0 	ldr.w	r6, [r7, #224]	; 0xe0
 800b574:	4428      	add	r0, r5
 800b576:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800b578:	42b0      	cmp	r0, r6
 800b57a:	bf94      	ite	ls
 800b57c:	ebc3 0300 	rsbls	r3, r3, r0
 800b580:	ebc3 0306 	rsbhi	r3, r3, r6
 800b584:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 800b588:	fb02 a204 	mla	r2, r2, r4, sl
 800b58c:	eba0 0c03 	sub.w	ip, r0, r3
 800b590:	1af0      	subs	r0, r6, r3
 800b592:	f8d7 60d0 	ldr.w	r6, [r7, #208]	; 0xd0
 800b596:	fb06 f303 	mul.w	r3, r6, r3
 800b59a:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 800b59c:	2e00      	cmp	r6, #0
 800b59e:	f340 80e6 	ble.w	800b76e <ai_conv2d_stripe_f32.constprop.0+0xa56>
 800b5a2:	fb04 f000 	mul.w	r0, r4, r0
 800b5a6:	eeb0 7a66 	vmov.f32	s14, s13
 800b5aa:	fb04 fc0c 	mul.w	ip, r4, ip
 800b5ae:	f023 040f 	bic.w	r4, r3, #15
 800b5b2:	6338      	str	r0, [r7, #48]	; 0x30
 800b5b4:	2600      	movs	r6, #0
 800b5b6:	1e60      	subs	r0, r4, #1
 800b5b8:	0900      	lsrs	r0, r0, #4
 800b5ba:	3001      	adds	r0, #1
 800b5bc:	ea4f 1880 	mov.w	r8, r0, lsl #6
 800b5c0:	0100      	lsls	r0, r0, #4
 800b5c2:	62b8      	str	r0, [r7, #40]	; 0x28
 800b5c4:	2c00      	cmp	r4, #0
 800b5c6:	f340 80cd 	ble.w	800b764 <ai_conv2d_stripe_f32.constprop.0+0xa4c>
 800b5ca:	f101 0e40 	add.w	lr, r1, #64	; 0x40
 800b5ce:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800b5d2:	f04f 0900 	mov.w	r9, #0
 800b5d6:	ed10 6a0f 	vldr	s12, [r0, #-60]	; 0xffffffc4
 800b5da:	f109 0910 	add.w	r9, r9, #16
 800b5de:	ed5e 7a0f 	vldr	s15, [lr, #-60]	; 0xffffffc4
 800b5e2:	3040      	adds	r0, #64	; 0x40
 800b5e4:	ed1e 4a10 	vldr	s8, [lr, #-64]	; 0xffffffc0
 800b5e8:	45a1      	cmp	r9, r4
 800b5ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b5ee:	ed50 4a20 	vldr	s9, [r0, #-128]	; 0xffffff80
 800b5f2:	ed1e 5a0e 	vldr	s10, [lr, #-56]	; 0xffffffc8
 800b5f6:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 800b5fa:	ed50 5a1e 	vldr	s11, [r0, #-120]	; 0xffffff88
 800b5fe:	eee4 7a24 	vfma.f32	s15, s8, s9
 800b602:	ed10 6a1d 	vldr	s12, [r0, #-116]	; 0xffffff8c
 800b606:	ed1e ea1d 	vldr	s28, [lr, #-116]	; 0xffffff8c
 800b60a:	ed5e da1c 	vldr	s27, [lr, #-112]	; 0xffffff90
 800b60e:	ed10 da1c 	vldr	s26, [r0, #-112]	; 0xffffff90
 800b612:	ed5e ca1b 	vldr	s25, [lr, #-108]	; 0xffffff94
 800b616:	ed10 ca1b 	vldr	s24, [r0, #-108]	; 0xffffff94
 800b61a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800b61e:	ed5e ba1a 	vldr	s23, [lr, #-104]	; 0xffffff98
 800b622:	ed10 ba1a 	vldr	s22, [r0, #-104]	; 0xffffff98
 800b626:	ed5e aa19 	vldr	s21, [lr, #-100]	; 0xffffff9c
 800b62a:	ed10 aa19 	vldr	s20, [r0, #-100]	; 0xffffff9c
 800b62e:	ed5e 9a18 	vldr	s19, [lr, #-96]	; 0xffffffa0
 800b632:	ed10 9a18 	vldr	s18, [r0, #-96]	; 0xffffffa0
 800b636:	eeee 7a06 	vfma.f32	s15, s28, s12
 800b63a:	ed5e 8a17 	vldr	s17, [lr, #-92]	; 0xffffffa4
 800b63e:	ed10 0a17 	vldr	s0, [r0, #-92]	; 0xffffffa4
 800b642:	ed5e 0a16 	vldr	s1, [lr, #-88]	; 0xffffffa8
 800b646:	ed10 1a16 	vldr	s2, [r0, #-88]	; 0xffffffa8
 800b64a:	ed5e 1a15 	vldr	s3, [lr, #-84]	; 0xffffffac
 800b64e:	ed10 2a15 	vldr	s4, [r0, #-84]	; 0xffffffac
 800b652:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800b656:	ed5e 2a14 	vldr	s5, [lr, #-80]	; 0xffffffb0
 800b65a:	ed10 3a14 	vldr	s6, [r0, #-80]	; 0xffffffb0
 800b65e:	ed5e 3a13 	vldr	s7, [lr, #-76]	; 0xffffffb4
 800b662:	ed10 4a13 	vldr	s8, [r0, #-76]	; 0xffffffb4
 800b666:	ed5e 4a12 	vldr	s9, [lr, #-72]	; 0xffffffb8
 800b66a:	ed10 5a12 	vldr	s10, [r0, #-72]	; 0xffffffb8
 800b66e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800b672:	ed5e 5a11 	vldr	s11, [lr, #-68]	; 0xffffffbc
 800b676:	ed10 6a11 	vldr	s12, [r0, #-68]	; 0xffffffbc
 800b67a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800b67e:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800b682:	eee9 7a89 	vfma.f32	s15, s19, s18
 800b686:	eee8 7a80 	vfma.f32	s15, s17, s0
 800b68a:	eee0 7a81 	vfma.f32	s15, s1, s2
 800b68e:	eee1 7a82 	vfma.f32	s15, s3, s4
 800b692:	eee2 7a83 	vfma.f32	s15, s5, s6
 800b696:	eee3 7a84 	vfma.f32	s15, s7, s8
 800b69a:	eee4 7a85 	vfma.f32	s15, s9, s10
 800b69e:	eee5 7a86 	vfma.f32	s15, s11, s12
 800b6a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b6a6:	db96      	blt.n	800b5d6 <ai_conv2d_stripe_f32.constprop.0+0x8be>
 800b6a8:	4441      	add	r1, r8
 800b6aa:	4442      	add	r2, r8
 800b6ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b6ae:	4283      	cmp	r3, r0
 800b6b0:	dd11      	ble.n	800b6d6 <ai_conv2d_stripe_f32.constprop.0+0x9be>
 800b6b2:	4686      	mov	lr, r0
 800b6b4:	468b      	mov	fp, r1
 800b6b6:	4691      	mov	r9, r2
 800b6b8:	f10e 0e01 	add.w	lr, lr, #1
 800b6bc:	ecb9 6a01 	vldmia	r9!, {s12}
 800b6c0:	ecfb 7a01 	vldmia	fp!, {s15}
 800b6c4:	4573      	cmp	r3, lr
 800b6c6:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b6ca:	d1f5      	bne.n	800b6b8 <ai_conv2d_stripe_f32.constprop.0+0x9a0>
 800b6cc:	1a18      	subs	r0, r3, r0
 800b6ce:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800b6d2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800b6d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6d8:	3601      	adds	r6, #1
 800b6da:	4461      	add	r1, ip
 800b6dc:	4402      	add	r2, r0
 800b6de:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b6e0:	42b0      	cmp	r0, r6
 800b6e2:	f47f af6f 	bne.w	800b5c4 <ai_conv2d_stripe_f32.constprop.0+0x8ac>
 800b6e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6e8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800b6ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6ec:	4401      	add	r1, r0
 800b6ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f0:	ed82 7a00 	vstr	s14, [r2]
 800b6f4:	1a2d      	subs	r5, r5, r0
 800b6f6:	6579      	str	r1, [r7, #84]	; 0x54
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6fe:	440a      	add	r2, r1
 800b700:	6a39      	ldr	r1, [r7, #32]
 800b702:	643a      	str	r2, [r7, #64]	; 0x40
 800b704:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b706:	440a      	add	r2, r1
 800b708:	653a      	str	r2, [r7, #80]	; 0x50
 800b70a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b70e:	429a      	cmp	r2, r3
 800b710:	f47f af25 	bne.w	800b55e <ai_conv2d_stripe_f32.constprop.0+0x846>
 800b714:	f8d7 901c 	ldr.w	r9, [r7, #28]
 800b718:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b71a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b71c:	444a      	add	r2, r9
 800b71e:	3301      	adds	r3, #1
 800b720:	66ba      	str	r2, [r7, #104]	; 0x68
 800b722:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b724:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b726:	3204      	adds	r2, #4
 800b728:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b72a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b72e:	429a      	cmp	r2, r3
 800b730:	f47f aef3 	bne.w	800b51a <ai_conv2d_stripe_f32.constprop.0+0x802>
 800b734:	ee1e 3a90 	vmov	r3, s29
 800b738:	469d      	mov	sp, r3
 800b73a:	e428      	b.n	800af8e <ai_conv2d_stripe_f32.constprop.0+0x276>
 800b73c:	2400      	movs	r4, #0
 800b73e:	e65f      	b.n	800b400 <ai_conv2d_stripe_f32.constprop.0+0x6e8>
 800b740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b742:	eeb0 3a63 	vmov.f32	s6, s7
 800b746:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800b74a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b74c:	647b      	str	r3, [r7, #68]	; 0x44
 800b74e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b752:	1a98      	subs	r0, r3, r2
 800b754:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b758:	fb03 f000 	mul.w	r0, r3, r0
 800b75c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b760:	1a9b      	subs	r3, r3, r2
 800b762:	e5d7      	b.n	800b314 <ai_conv2d_stripe_f32.constprop.0+0x5fc>
 800b764:	2000      	movs	r0, #0
 800b766:	e7a2      	b.n	800b6ae <ai_conv2d_stripe_f32.constprop.0+0x996>
 800b768:	eef0 6a48 	vmov.f32	s13, s16
 800b76c:	e6e4      	b.n	800b538 <ai_conv2d_stripe_f32.constprop.0+0x820>
 800b76e:	eeb0 7a66 	vmov.f32	s14, s13
 800b772:	e7b8      	b.n	800b6e6 <ai_conv2d_stripe_f32.constprop.0+0x9ce>
 800b774:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b776:	462b      	mov	r3, r5
 800b778:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b77a:	442a      	add	r2, r5
 800b77c:	e6f6      	b.n	800b56c <ai_conv2d_stripe_f32.constprop.0+0x854>
 800b77e:	bf00      	nop
 800b780:	00000000 	.word	0x00000000

0800b784 <ai_dict_decompress_f32>:
 800b784:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b788:	9d08      	ldr	r5, [sp, #32]
 800b78a:	2b04      	cmp	r3, #4
 800b78c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800b790:	d00e      	beq.n	800b7b0 <ai_dict_decompress_f32+0x2c>
 800b792:	2b08      	cmp	r3, #8
 800b794:	d10a      	bne.n	800b7ac <ai_dict_decompress_f32+0x28>
 800b796:	42a8      	cmp	r0, r5
 800b798:	d208      	bcs.n	800b7ac <ai_dict_decompress_f32+0x28>
 800b79a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b79e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f840 3b04 	str.w	r3, [r0], #4
 800b7a8:	4285      	cmp	r5, r0
 800b7aa:	d8f6      	bhi.n	800b79a <ai_dict_decompress_f32+0x16>
 800b7ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7b0:	9b07      	ldr	r3, [sp, #28]
 800b7b2:	085e      	lsrs	r6, r3, #1
 800b7b4:	f003 0701 	and.w	r7, r3, #1
 800b7b8:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 800b7bc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800b7c0:	42a8      	cmp	r0, r5
 800b7c2:	d2f3      	bcs.n	800b7ac <ai_dict_decompress_f32+0x28>
 800b7c4:	b33e      	cbz	r6, 800b816 <ai_dict_decompress_f32+0x92>
 800b7c6:	f100 0e08 	add.w	lr, r0, #8
 800b7ca:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800b7ce:	eb01 0408 	add.w	r4, r1, r8
 800b7d2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800b7d6:	f10e 0e08 	add.w	lr, lr, #8
 800b7da:	091b      	lsrs	r3, r3, #4
 800b7dc:	4564      	cmp	r4, ip
 800b7de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f84e 3c10 	str.w	r3, [lr, #-16]
 800b7e8:	f89c 3000 	ldrb.w	r3, [ip]
 800b7ec:	f003 030f 	and.w	r3, r3, #15
 800b7f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f84e 3c0c 	str.w	r3, [lr, #-12]
 800b7fa:	d1ea      	bne.n	800b7d2 <ai_dict_decompress_f32+0x4e>
 800b7fc:	4431      	add	r1, r6
 800b7fe:	4448      	add	r0, r9
 800b800:	2f00      	cmp	r7, #0
 800b802:	d0dd      	beq.n	800b7c0 <ai_dict_decompress_f32+0x3c>
 800b804:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b808:	091b      	lsrs	r3, r3, #4
 800b80a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f840 3b04 	str.w	r3, [r0], #4
 800b814:	e7d4      	b.n	800b7c0 <ai_dict_decompress_f32+0x3c>
 800b816:	2f00      	cmp	r7, #0
 800b818:	d1f4      	bne.n	800b804 <ai_dict_decompress_f32+0x80>
 800b81a:	42a8      	cmp	r0, r5
 800b81c:	d3fd      	bcc.n	800b81a <ai_dict_decompress_f32+0x96>
 800b81e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b822:	bf00      	nop

0800b824 <forward_conv2d_nl_pool>:
 800b824:	6981      	ldr	r1, [r0, #24]
 800b826:	880b      	ldrh	r3, [r1, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f000 814a 	beq.w	800bac2 <forward_conv2d_nl_pool+0x29e>
 800b82e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b832:	ed2d 8b04 	vpush	{d8-d9}
 800b836:	684e      	ldr	r6, [r1, #4]
 800b838:	b0b9      	sub	sp, #228	; 0xe4
 800b83a:	4604      	mov	r4, r0
 800b83c:	6872      	ldr	r2, [r6, #4]
 800b83e:	b102      	cbz	r2, 800b842 <forward_conv2d_nl_pool+0x1e>
 800b840:	6812      	ldr	r2, [r2, #0]
 800b842:	2b01      	cmp	r3, #1
 800b844:	f000 824d 	beq.w	800bce2 <forward_conv2d_nl_pool+0x4be>
 800b848:	6930      	ldr	r0, [r6, #16]
 800b84a:	9011      	str	r0, [sp, #68]	; 0x44
 800b84c:	b108      	cbz	r0, 800b852 <forward_conv2d_nl_pool+0x2e>
 800b84e:	6800      	ldr	r0, [r0, #0]
 800b850:	9011      	str	r0, [sp, #68]	; 0x44
 800b852:	2b02      	cmp	r3, #2
 800b854:	f000 8137 	beq.w	800bac6 <forward_conv2d_nl_pool+0x2a2>
 800b858:	69f0      	ldr	r0, [r6, #28]
 800b85a:	2800      	cmp	r0, #0
 800b85c:	f000 8231 	beq.w	800bcc2 <forward_conv2d_nl_pool+0x49e>
 800b860:	8b37      	ldrh	r7, [r6, #24]
 800b862:	6806      	ldr	r6, [r0, #0]
 800b864:	2f01      	cmp	r7, #1
 800b866:	f240 8233 	bls.w	800bcd0 <forward_conv2d_nl_pool+0x4ac>
 800b86a:	6845      	ldr	r5, [r0, #4]
 800b86c:	ee08 5a10 	vmov	s16, r5
 800b870:	6880      	ldr	r0, [r0, #8]
 800b872:	f8d2 800c 	ldr.w	r8, [r2, #12]
 800b876:	6992      	ldr	r2, [r2, #24]
 800b878:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b87c:	6892      	ldr	r2, [r2, #8]
 800b87e:	952a      	str	r5, [sp, #168]	; 0xa8
 800b880:	ee09 2a10 	vmov	s18, r2
 800b884:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b886:	f8d4 e03c 	ldr.w	lr, [r4, #60]	; 0x3c
 800b88a:	f8d2 900c 	ldr.w	r9, [r2, #12]
 800b88e:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800b892:	f8d9 500c 	ldr.w	r5, [r9, #12]
 800b896:	6d67      	ldr	r7, [r4, #84]	; 0x54
 800b898:	951d      	str	r5, [sp, #116]	; 0x74
 800b89a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800b89e:	69b2      	ldr	r2, [r6, #24]
 800b8a0:	951f      	str	r5, [sp, #124]	; 0x7c
 800b8a2:	f8d8 500c 	ldr.w	r5, [r8, #12]
 800b8a6:	f8d9 b004 	ldr.w	fp, [r9, #4]
 800b8aa:	9527      	str	r5, [sp, #156]	; 0x9c
 800b8ac:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800b8b0:	952e      	str	r5, [sp, #184]	; 0xb8
 800b8b2:	8d25      	ldrh	r5, [r4, #40]	; 0x28
 800b8b4:	952f      	str	r5, [sp, #188]	; 0xbc
 800b8b6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800b8b8:	9513      	str	r5, [sp, #76]	; 0x4c
 800b8ba:	f8de 5000 	ldr.w	r5, [lr]
 800b8be:	9515      	str	r5, [sp, #84]	; 0x54
 800b8c0:	e9de a501 	ldrd	sl, r5, [lr, #4]
 800b8c4:	9516      	str	r5, [sp, #88]	; 0x58
 800b8c6:	69e5      	ldr	r5, [r4, #28]
 800b8c8:	9530      	str	r5, [sp, #192]	; 0xc0
 800b8ca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800b8cc:	9526      	str	r5, [sp, #152]	; 0x98
 800b8ce:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800b8d0:	9512      	str	r5, [sp, #72]	; 0x48
 800b8d2:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800b8d6:	9528      	str	r5, [sp, #160]	; 0xa0
 800b8d8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800b8dc:	9529      	str	r5, [sp, #164]	; 0xa4
 800b8de:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800b8e0:	9522      	str	r5, [sp, #136]	; 0x88
 800b8e2:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800b8e4:	9523      	str	r5, [sp, #140]	; 0x8c
 800b8e6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800b8e8:	951a      	str	r5, [sp, #104]	; 0x68
 800b8ea:	e9d7 8500 	ldrd	r8, r5, [r7]
 800b8ee:	9524      	str	r5, [sp, #144]	; 0x90
 800b8f0:	6895      	ldr	r5, [r2, #8]
 800b8f2:	ee08 5a90 	vmov	s17, r5
 800b8f6:	ee18 5a10 	vmov	r5, s16
 800b8fa:	b11d      	cbz	r5, 800b904 <forward_conv2d_nl_pool+0xe0>
 800b8fc:	69af      	ldr	r7, [r5, #24]
 800b8fe:	68bd      	ldr	r5, [r7, #8]
 800b900:	ee08 5a10 	vmov	s16, r5
 800b904:	f8d4 9020 	ldr.w	r9, [r4, #32]
 800b908:	2800      	cmp	r0, #0
 800b90a:	f000 81c7 	beq.w	800bc9c <forward_conv2d_nl_pool+0x478>
 800b90e:	6987      	ldr	r7, [r0, #24]
 800b910:	2f00      	cmp	r7, #0
 800b912:	f000 81cc 	beq.w	800bcae <forward_conv2d_nl_pool+0x48a>
 800b916:	6943      	ldr	r3, [r0, #20]
 800b918:	f8d7 9008 	ldr.w	r9, [r7, #8]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b922:	9333      	str	r3, [sp, #204]	; 0xcc
 800b924:	f7fc fdf4 	bl	8008510 <ai_array_get_byte_size>
 800b928:	69a1      	ldr	r1, [r4, #24]
 800b92a:	69b2      	ldr	r2, [r6, #24]
 800b92c:	880b      	ldrh	r3, [r1, #0]
 800b92e:	9014      	str	r0, [sp, #80]	; 0x50
 800b930:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b932:	902d      	str	r0, [sp, #180]	; 0xb4
 800b934:	2800      	cmp	r0, #0
 800b936:	f000 81ae 	beq.w	800bc96 <forward_conv2d_nl_pool+0x472>
 800b93a:	fa1f f58a 	uxth.w	r5, sl
 800b93e:	f8bd 0054 	ldrh.w	r0, [sp, #84]	; 0x54
 800b942:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 800b946:	9517      	str	r5, [sp, #92]	; 0x5c
 800b948:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800b94a:	9015      	str	r0, [sp, #84]	; 0x54
 800b94c:	fa10 f085 	uxtah	r0, r0, r5
 800b950:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800b952:	961b      	str	r6, [sp, #108]	; 0x6c
 800b954:	4428      	add	r0, r5
 800b956:	f8bd 6048 	ldrh.w	r6, [sp, #72]	; 0x48
 800b95a:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800b95c:	3e01      	subs	r6, #1
 800b95e:	1e6f      	subs	r7, r5, #1
 800b960:	fb07 5506 	mla	r5, r7, r6, r5
 800b964:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b966:	1b40      	subs	r0, r0, r5
 800b968:	952b      	str	r5, [sp, #172]	; 0xac
 800b96a:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800b96c:	fbb0 f0f6 	udiv	r0, r0, r6
 800b970:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
 800b974:	1e6f      	subs	r7, r5, #1
 800b976:	9013      	str	r0, [sp, #76]	; 0x4c
 800b978:	3e01      	subs	r6, #1
 800b97a:	6810      	ldr	r0, [r2, #0]
 800b97c:	fb07 5506 	mla	r5, r7, r6, r5
 800b980:	f3c0 4643 	ubfx	r6, r0, #17, #4
 800b984:	952c      	str	r5, [sp, #176]	; 0xb0
 800b986:	2e04      	cmp	r6, #4
 800b988:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800b98a:	9520      	str	r5, [sp, #128]	; 0x80
 800b98c:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800b98e:	9519      	str	r5, [sp, #100]	; 0x64
 800b990:	f000 8148 	beq.w	800bc24 <forward_conv2d_nl_pool+0x400>
 800b994:	2e08      	cmp	r6, #8
 800b996:	f000 8145 	beq.w	800bc24 <forward_conv2d_nl_pool+0x400>
 800b99a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	fa0f f888 	sxth.w	r8, r8
 800b9a2:	6992      	ldr	r2, [r2, #24]
 800b9a4:	921c      	str	r2, [sp, #112]	; 0x70
 800b9a6:	f240 81a1 	bls.w	800bcec <forward_conv2d_nl_pool+0x4c8>
 800b9aa:	684b      	ldr	r3, [r1, #4]
 800b9ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f000 819f 	beq.w	800bcf2 <forward_conv2d_nl_pool+0x4ce>
 800b9b4:	681e      	ldr	r6, [r3, #0]
 800b9b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b9ba:	425b      	negs	r3, r3
 800b9bc:	9316      	str	r3, [sp, #88]	; 0x58
 800b9be:	68f3      	ldr	r3, [r6, #12]
 800b9c0:	f8d3 a008 	ldr.w	sl, [r3, #8]
 800b9c4:	69b3      	ldr	r3, [r6, #24]
 800b9c6:	689c      	ldr	r4, [r3, #8]
 800b9c8:	2a00      	cmp	r2, #0
 800b9ca:	d070      	beq.n	800baae <forward_conv2d_nl_pool+0x28a>
 800b9cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9ce:	fb0a f20b 	mul.w	r2, sl, fp
 800b9d2:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 800b9d6:	425b      	negs	r3, r3
 800b9d8:	9236      	str	r2, [sp, #216]	; 0xd8
 800b9da:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800b9de:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 800b9e2:	9331      	str	r3, [sp, #196]	; 0xc4
 800b9e4:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 800b9e8:	9234      	str	r2, [sp, #208]	; 0xd0
 800b9ea:	9332      	str	r3, [sp, #200]	; 0xc8
 800b9ec:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b9ee:	fb03 f30b 	mul.w	r3, r3, fp
 800b9f2:	fb0a f303 	mul.w	r3, sl, r3
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	9335      	str	r3, [sp, #212]	; 0xd4
 800b9fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b9fc:	fb03 f30b 	mul.w	r3, r3, fp
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	9325      	str	r3, [sp, #148]	; 0x94
 800ba04:	2300      	movs	r3, #0
 800ba06:	9317      	str	r3, [sp, #92]	; 0x5c
 800ba08:	931e      	str	r3, [sp, #120]	; 0x78
 800ba0a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 800ba0e:	9337      	str	r3, [sp, #220]	; 0xdc
 800ba10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba12:	3301      	adds	r3, #1
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	dc6b      	bgt.n	800baf0 <forward_conv2d_nl_pool+0x2cc>
 800ba18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f2c0 80d4 	blt.w	800bbc8 <forward_conv2d_nl_pool+0x3a4>
 800ba20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba22:	4598      	cmp	r8, r3
 800ba24:	d352      	bcc.n	800bacc <forward_conv2d_nl_pool+0x2a8>
 800ba26:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800ba28:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ba2a:	69b0      	ldr	r0, [r6, #24]
 800ba2c:	440a      	add	r2, r1
 800ba2e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800ba30:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800ba32:	9216      	str	r2, [sp, #88]	; 0x58
 800ba34:	3701      	adds	r7, #1
 800ba36:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba38:	9717      	str	r7, [sp, #92]	; 0x5c
 800ba3a:	3a01      	subs	r2, #1
 800ba3c:	9213      	str	r2, [sp, #76]	; 0x4c
 800ba3e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba40:	1a52      	subs	r2, r2, r1
 800ba42:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ba44:	9215      	str	r2, [sp, #84]	; 0x54
 800ba46:	b29a      	uxth	r2, r3
 800ba48:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 800ba4c:	9201      	str	r2, [sp, #4]
 800ba4e:	1a52      	subs	r2, r2, r1
 800ba50:	eba8 0803 	sub.w	r8, r8, r3
 800ba54:	9305      	str	r3, [sp, #20]
 800ba56:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800ba58:	b292      	uxth	r2, r2
 800ba5a:	fa1f f18a 	uxth.w	r1, sl
 800ba5e:	9308      	str	r3, [sp, #32]
 800ba60:	fa0f f888 	sxth.w	r8, r8
 800ba64:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800ba68:	9303      	str	r3, [sp, #12]
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	9307      	str	r3, [sp, #28]
 800ba6e:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 800ba72:	9306      	str	r3, [sp, #24]
 800ba74:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800ba78:	9304      	str	r3, [sp, #16]
 800ba7a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 800ba7e:	9302      	str	r3, [sp, #8]
 800ba80:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	fa1f f38b 	uxth.w	r3, fp
 800ba8a:	47a8      	blx	r5
 800ba8c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ba8e:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 800ba92:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ba94:	1acb      	subs	r3, r1, r3
 800ba96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ba9a:	b219      	sxth	r1, r3
 800ba9c:	6893      	ldr	r3, [r2, #8]
 800ba9e:	9118      	str	r1, [sp, #96]	; 0x60
 800baa0:	9925      	ldr	r1, [sp, #148]	; 0x94
 800baa2:	440b      	add	r3, r1
 800baa4:	6093      	str	r3, [r2, #8]
 800baa6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800baa8:	42bb      	cmp	r3, r7
 800baaa:	d8b1      	bhi.n	800ba10 <forward_conv2d_nl_pool+0x1ec>
 800baac:	69b3      	ldr	r3, [r6, #24]
 800baae:	68da      	ldr	r2, [r3, #12]
 800bab0:	609a      	str	r2, [r3, #8]
 800bab2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bab4:	68d3      	ldr	r3, [r2, #12]
 800bab6:	6093      	str	r3, [r2, #8]
 800bab8:	b039      	add	sp, #228	; 0xe4
 800baba:	ecbd 8b04 	vpop	{d8-d9}
 800babe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	deff      	udf	#255	; 0xff
 800bac6:	2300      	movs	r3, #0
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	deff      	udf	#255	; 0xff
 800bacc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bace:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bad0:	4413      	add	r3, r2
 800bad2:	9316      	str	r3, [sp, #88]	; 0x58
 800bad4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bad6:	3b01      	subs	r3, #1
 800bad8:	9313      	str	r3, [sp, #76]	; 0x4c
 800bada:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800badc:	1a9b      	subs	r3, r3, r2
 800bade:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bae0:	9315      	str	r3, [sp, #84]	; 0x54
 800bae2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d9e1      	bls.n	800baac <forward_conv2d_nl_pool+0x288>
 800bae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800baea:	3301      	adds	r3, #1
 800baec:	2b00      	cmp	r3, #0
 800baee:	dd93      	ble.n	800ba18 <forward_conv2d_nl_pool+0x1f4>
 800baf0:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800baf2:	ee19 1a10 	vmov	r1, s18
 800baf6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800baf8:	4620      	mov	r0, r4
 800bafa:	920e      	str	r2, [sp, #56]	; 0x38
 800bafc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bb04:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800bb06:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bb08:	930a      	str	r3, [sp, #40]	; 0x28
 800bb0a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800bb0c:	9307      	str	r3, [sp, #28]
 800bb0e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800bb10:	9306      	str	r3, [sp, #24]
 800bb12:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bb14:	9305      	str	r3, [sp, #20]
 800bb16:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800bb18:	e9cd a303 	strd	sl, r3, [sp, #12]
 800bb1c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800bb1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bb22:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800bb24:	9300      	str	r3, [sp, #0]
 800bb26:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800bb28:	4413      	add	r3, r2
 800bb2a:	bfa8      	it	ge
 800bb2c:	2200      	movge	r2, #0
 800bb2e:	9208      	str	r2, [sp, #32]
 800bb30:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800bb32:	4293      	cmp	r3, r2
 800bb34:	bf28      	it	cs
 800bb36:	4613      	movcs	r3, r2
 800bb38:	ee18 2a90 	vmov	r2, s17
 800bb3c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb3e:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
 800bb42:	930d      	str	r3, [sp, #52]	; 0x34
 800bb44:	ee18 3a10 	vmov	r3, s16
 800bb48:	f7ff f8e6 	bl	800ad18 <ai_conv2d_stripe_f32.constprop.0>
 800bb4c:	69b2      	ldr	r2, [r6, #24]
 800bb4e:	f1ba 0f00 	cmp.w	sl, #0
 800bb52:	f000 809e 	beq.w	800bc92 <forward_conv2d_nl_pool+0x46e>
 800bb56:	4611      	mov	r1, r2
 800bb58:	4630      	mov	r0, r6
 800bb5a:	465a      	mov	r2, fp
 800bb5c:	4656      	mov	r6, sl
 800bb5e:	f8cd 8084 	str.w	r8, [sp, #132]	; 0x84
 800bb62:	2700      	movs	r7, #0
 800bb64:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bb66:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 800bb6a:	e9dd ba33 	ldrd	fp, sl, [sp, #204]	; 0xcc
 800bb6e:	462b      	mov	r3, r5
 800bb70:	608c      	str	r4, [r1, #8]
 800bb72:	4601      	mov	r1, r0
 800bb74:	445d      	add	r5, fp
 800bb76:	9212      	str	r2, [sp, #72]	; 0x48
 800bb78:	4454      	add	r4, sl
 800bb7a:	9011      	str	r0, [sp, #68]	; 0x44
 800bb7c:	47c0      	blx	r8
 800bb7e:	9811      	ldr	r0, [sp, #68]	; 0x44
 800bb80:	eba5 0309 	sub.w	r3, r5, r9
 800bb84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb86:	3701      	adds	r7, #1
 800bb88:	6981      	ldr	r1, [r0, #24]
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	bfa8      	it	ge
 800bb8e:	464d      	movge	r5, r9
 800bb90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bb92:	684b      	ldr	r3, [r1, #4]
 800bb94:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800bb98:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800bb9c:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800bba0:	429c      	cmp	r4, r3
 800bba2:	bf28      	it	cs
 800bba4:	eba4 040e 	subcs.w	r4, r4, lr
 800bba8:	42be      	cmp	r6, r7
 800bbaa:	d1e0      	bne.n	800bb6e <forward_conv2d_nl_pool+0x34a>
 800bbac:	4693      	mov	fp, r2
 800bbae:	46b2      	mov	sl, r6
 800bbb0:	460a      	mov	r2, r1
 800bbb2:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800bbb6:	4661      	mov	r1, ip
 800bbb8:	4606      	mov	r6, r0
 800bbba:	9511      	str	r5, [sp, #68]	; 0x44
 800bbbc:	f108 0801 	add.w	r8, r8, #1
 800bbc0:	6091      	str	r1, [r2, #8]
 800bbc2:	fa0f f888 	sxth.w	r8, r8
 800bbc6:	e72b      	b.n	800ba20 <forward_conv2d_nl_pool+0x1fc>
 800bbc8:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800bbca:	fb03 f208 	mul.w	r2, r3, r8
 800bbce:	69b3      	ldr	r3, [r6, #24]
 800bbd0:	eba4 0282 	sub.w	r2, r4, r2, lsl #2
 800bbd4:	68d9      	ldr	r1, [r3, #12]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	4291      	cmp	r1, r2
 800bbda:	bf88      	it	hi
 800bbdc:	eb02 0283 	addhi.w	r2, r2, r3, lsl #2
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4291      	cmp	r1, r2
 800bbe4:	d21c      	bcs.n	800bc20 <forward_conv2d_nl_pool+0x3fc>
 800bbe6:	9837      	ldr	r0, [sp, #220]	; 0xdc
 800bbe8:	4419      	add	r1, r3
 800bbea:	4540      	cmp	r0, r8
 800bbec:	d13f      	bne.n	800bc6e <forward_conv2d_nl_pool+0x44a>
 800bbee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800bbf0:	fa1f f888 	uxth.w	r8, r8
 800bbf4:	9819      	ldr	r0, [sp, #100]	; 0x64
 800bbf6:	4402      	add	r2, r0
 800bbf8:	9835      	ldr	r0, [sp, #212]	; 0xd4
 800bbfa:	eba2 0208 	sub.w	r2, r2, r8
 800bbfe:	4404      	add	r4, r0
 800bc00:	981a      	ldr	r0, [sp, #104]	; 0x68
 800bc02:	b212      	sxth	r2, r2
 800bc04:	428c      	cmp	r4, r1
 800bc06:	4480      	add	r8, r0
 800bc08:	921e      	str	r2, [sp, #120]	; 0x78
 800bc0a:	fa0f f888 	sxth.w	r8, r8
 800bc0e:	f4ff af07 	bcc.w	800ba20 <forward_conv2d_nl_pool+0x1fc>
 800bc12:	425b      	negs	r3, r3
 800bc14:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bc16:	441c      	add	r4, r3
 800bc18:	428c      	cmp	r4, r1
 800bc1a:	d2fc      	bcs.n	800bc16 <forward_conv2d_nl_pool+0x3f2>
 800bc1c:	9511      	str	r5, [sp, #68]	; 0x44
 800bc1e:	e6ff      	b.n	800ba20 <forward_conv2d_nl_pool+0x1fc>
 800bc20:	4419      	add	r1, r3
 800bc22:	e7e4      	b.n	800bbee <forward_conv2d_nl_pool+0x3ca>
 800bc24:	68d6      	ldr	r6, [r2, #12]
 800bc26:	2e00      	cmp	r6, #0
 800bc28:	f43f aeb7 	beq.w	800b99a <forward_conv2d_nl_pool+0x176>
 800bc2c:	2b03      	cmp	r3, #3
 800bc2e:	d962      	bls.n	800bcf6 <forward_conv2d_nl_pool+0x4d2>
 800bc30:	684b      	ldr	r3, [r1, #4]
 800bc32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d04f      	beq.n	800bcd8 <forward_conv2d_nl_pool+0x4b4>
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d04c      	beq.n	800bcd8 <forward_conv2d_nl_pool+0x4b4>
 800bc3e:	699f      	ldr	r7, [r3, #24]
 800bc40:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800bc44:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800bc48:	6891      	ldr	r1, [r2, #8]
 800bc4a:	4632      	mov	r2, r6
 800bc4c:	4103      	asrs	r3, r0
 800bc4e:	e9d7 0601 	ldrd	r0, r6, [r7, #4]
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	9001      	str	r0, [sp, #4]
 800bc56:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800bc58:	9000      	str	r0, [sp, #0]
 800bc5a:	4630      	mov	r0, r6
 800bc5c:	f7ff fd92 	bl	800b784 <ai_dict_decompress_f32>
 800bc60:	69a1      	ldr	r1, [r4, #24]
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	d03b      	beq.n	800bcde <forward_conv2d_nl_pool+0x4ba>
 800bc66:	ee08 6a90 	vmov	s17, r6
 800bc6a:	880b      	ldrh	r3, [r1, #0]
 800bc6c:	e695      	b.n	800b99a <forward_conv2d_nl_pool+0x176>
 800bc6e:	428a      	cmp	r2, r1
 800bc70:	d2bd      	bcs.n	800bbee <forward_conv2d_nl_pool+0x3ca>
 800bc72:	4620      	mov	r0, r4
 800bc74:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800bc76:	f852 3b04 	ldr.w	r3, [r2], #4
 800bc7a:	f840 3b04 	str.w	r3, [r0], #4
 800bc7e:	69b1      	ldr	r1, [r6, #24]
 800bc80:	684b      	ldr	r3, [r1, #4]
 800bc82:	68c9      	ldr	r1, [r1, #12]
 800bc84:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4291      	cmp	r1, r2
 800bc8c:	d8f3      	bhi.n	800bc76 <forward_conv2d_nl_pool+0x452>
 800bc8e:	9511      	str	r5, [sp, #68]	; 0x44
 800bc90:	e7ad      	b.n	800bbee <forward_conv2d_nl_pool+0x3ca>
 800bc92:	68d1      	ldr	r1, [r2, #12]
 800bc94:	e792      	b.n	800bbbc <forward_conv2d_nl_pool+0x398>
 800bc96:	4819      	ldr	r0, [pc, #100]	; (800bcfc <forward_conv2d_nl_pool+0x4d8>)
 800bc98:	902d      	str	r0, [sp, #180]	; 0xb4
 800bc9a:	e64e      	b.n	800b93a <forward_conv2d_nl_pool+0x116>
 800bc9c:	f1b9 0f00 	cmp.w	r9, #0
 800bca0:	d00b      	beq.n	800bcba <forward_conv2d_nl_pool+0x496>
 800bca2:	9033      	str	r0, [sp, #204]	; 0xcc
 800bca4:	2001      	movs	r0, #1
 800bca6:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800bcaa:	9014      	str	r0, [sp, #80]	; 0x50
 800bcac:	e640      	b.n	800b930 <forward_conv2d_nl_pool+0x10c>
 800bcae:	f1b9 0f00 	cmp.w	r9, #0
 800bcb2:	d001      	beq.n	800bcb8 <forward_conv2d_nl_pool+0x494>
 800bcb4:	f8d9 9008 	ldr.w	r9, [r9, #8]
 800bcb8:	2000      	movs	r0, #0
 800bcba:	9033      	str	r0, [sp, #204]	; 0xcc
 800bcbc:	2001      	movs	r0, #1
 800bcbe:	9014      	str	r0, [sp, #80]	; 0x50
 800bcc0:	e636      	b.n	800b930 <forward_conv2d_nl_pool+0x10c>
 800bcc2:	8b36      	ldrh	r6, [r6, #24]
 800bcc4:	2e01      	cmp	r6, #1
 800bcc6:	d90f      	bls.n	800bce8 <forward_conv2d_nl_pool+0x4c4>
 800bcc8:	ee08 0a10 	vmov	s16, r0
 800bccc:	4606      	mov	r6, r0
 800bcce:	e5d0      	b.n	800b872 <forward_conv2d_nl_pool+0x4e>
 800bcd0:	2500      	movs	r5, #0
 800bcd2:	ee08 5a10 	vmov	s16, r5
 800bcd6:	e5cb      	b.n	800b870 <forward_conv2d_nl_pool+0x4c>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	699b      	ldr	r3, [r3, #24]
 800bcdc:	deff      	udf	#255	; 0xff
 800bcde:	880b      	ldrh	r3, [r1, #0]
 800bce0:	e65b      	b.n	800b99a <forward_conv2d_nl_pool+0x176>
 800bce2:	2300      	movs	r3, #0
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	deff      	udf	#255	; 0xff
 800bce8:	68c3      	ldr	r3, [r0, #12]
 800bcea:	deff      	udf	#255	; 0xff
 800bcec:	2300      	movs	r3, #0
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	deff      	udf	#255	; 0xff
 800bcf2:	68db      	ldr	r3, [r3, #12]
 800bcf4:	deff      	udf	#255	; 0xff
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	deff      	udf	#255	; 0xff
 800bcfc:	0800ad15 	.word	0x0800ad15

0800bd00 <forward_dense>:
 800bd00:	6983      	ldr	r3, [r0, #24]
 800bd02:	881a      	ldrh	r2, [r3, #0]
 800bd04:	2a00      	cmp	r2, #0
 800bd06:	f000 80f0 	beq.w	800beea <forward_dense+0x1ea>
 800bd0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0e:	ed2d 8b02 	vpush	{d8}
 800bd12:	6858      	ldr	r0, [r3, #4]
 800bd14:	b09b      	sub	sp, #108	; 0x6c
 800bd16:	6845      	ldr	r5, [r0, #4]
 800bd18:	b105      	cbz	r5, 800bd1c <forward_dense+0x1c>
 800bd1a:	682d      	ldr	r5, [r5, #0]
 800bd1c:	2a01      	cmp	r2, #1
 800bd1e:	f000 840a 	beq.w	800c536 <forward_dense+0x836>
 800bd22:	6906      	ldr	r6, [r0, #16]
 800bd24:	b106      	cbz	r6, 800bd28 <forward_dense+0x28>
 800bd26:	6836      	ldr	r6, [r6, #0]
 800bd28:	2a02      	cmp	r2, #2
 800bd2a:	f000 80e0 	beq.w	800beee <forward_dense+0x1ee>
 800bd2e:	69c3      	ldr	r3, [r0, #28]
 800bd30:	930d      	str	r3, [sp, #52]	; 0x34
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f000 83f1 	beq.w	800c51a <forward_dense+0x81a>
 800bd38:	4619      	mov	r1, r3
 800bd3a:	8b03      	ldrh	r3, [r0, #24]
 800bd3c:	6809      	ldr	r1, [r1, #0]
 800bd3e:	2b01      	cmp	r3, #1
 800bd40:	910f      	str	r1, [sp, #60]	; 0x3c
 800bd42:	f240 83ec 	bls.w	800c51e <forward_dense+0x81e>
 800bd46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	930d      	str	r3, [sp, #52]	; 0x34
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800bd52:	2a03      	cmp	r2, #3
 800bd54:	68eb      	ldr	r3, [r5, #12]
 800bd56:	68f7      	ldr	r7, [r6, #12]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	687c      	ldr	r4, [r7, #4]
 800bd5c:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd5e:	f8d8 3000 	ldr.w	r3, [r8]
 800bd62:	4621      	mov	r1, r4
 800bd64:	9419      	str	r4, [sp, #100]	; 0x64
 800bd66:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800bd6a:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800bd6e:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800bd72:	fb01 f404 	mul.w	r4, r1, r4
 800bd76:	fa4e f10c 	asr.w	r1, lr, ip
 800bd7a:	9116      	str	r1, [sp, #88]	; 0x58
 800bd7c:	f000 83d8 	beq.w	800c530 <forward_dense+0x830>
 800bd80:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800bd82:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800bd86:	2a00      	cmp	r2, #0
 800bd88:	f000 83c2 	beq.w	800c510 <forward_dense+0x810>
 800bd8c:	6812      	ldr	r2, [r2, #0]
 800bd8e:	2a00      	cmp	r2, #0
 800bd90:	f000 83be 	beq.w	800c510 <forward_dense+0x810>
 800bd94:	2b04      	cmp	r3, #4
 800bd96:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800bd9a:	f000 83a8 	beq.w	800c4ee <forward_dense+0x7ee>
 800bd9e:	2b08      	cmp	r3, #8
 800bda0:	f000 83a5 	beq.w	800c4ee <forward_dense+0x7ee>
 800bda4:	f04f 0a00 	mov.w	sl, #0
 800bda8:	69ab      	ldr	r3, [r5, #24]
 800bdaa:	fb07 f404 	mul.w	r4, r7, r4
 800bdae:	69b2      	ldr	r2, [r6, #24]
 800bdb0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 800bdb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bdb6:	6892      	ldr	r2, [r2, #8]
 800bdb8:	695b      	ldr	r3, [r3, #20]
 800bdba:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800bdbe:	9206      	str	r2, [sp, #24]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	428a      	cmp	r2, r1
 800bdc4:	9110      	str	r1, [sp, #64]	; 0x40
 800bdc6:	9304      	str	r3, [sp, #16]
 800bdc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bdca:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800bdce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bdd2:	900e      	str	r0, [sp, #56]	; 0x38
 800bdd4:	9303      	str	r3, [sp, #12]
 800bdd6:	f080 8380 	bcs.w	800c4da <forward_dense+0x7da>
 800bdda:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bddc:	4654      	mov	r4, sl
 800bdde:	4bb9      	ldr	r3, [pc, #740]	; (800c0c4 <forward_dense+0x3c4>)
 800bde0:	46ca      	mov	sl, r9
 800bde2:	08d0      	lsrs	r0, r2, #3
 800bde4:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 800c0c8 <forward_dense+0x3c8>
 800bde8:	4413      	add	r3, r2
 800bdea:	9009      	str	r0, [sp, #36]	; 0x24
 800bdec:	0099      	lsls	r1, r3, #2
 800bdee:	f022 0301 	bic.w	r3, r2, #1
 800bdf2:	f002 0201 	and.w	r2, r2, #1
 800bdf6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800bdfa:	9118      	str	r1, [sp, #96]	; 0x60
 800bdfc:	920a      	str	r2, [sp, #40]	; 0x28
 800bdfe:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800be02:	9305      	str	r3, [sp, #20]
 800be04:	f101 0320 	add.w	r3, r1, #32
 800be08:	9207      	str	r2, [sp, #28]
 800be0a:	9311      	str	r3, [sp, #68]	; 0x44
 800be0c:	444b      	add	r3, r9
 800be0e:	469b      	mov	fp, r3
 800be10:	930b      	str	r3, [sp, #44]	; 0x2c
 800be12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	689a      	ldr	r2, [r3, #8]
 800be18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be1a:	b10b      	cbz	r3, 800be20 <forward_dense+0x120>
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	689b      	ldr	r3, [r3, #8]
 800be20:	2c00      	cmp	r4, #0
 800be22:	f000 834b 	beq.w	800c4bc <forward_dense+0x7bc>
 800be26:	9916      	ldr	r1, [sp, #88]	; 0x58
 800be28:	2904      	cmp	r1, #4
 800be2a:	f000 826a 	beq.w	800c302 <forward_dense+0x602>
 800be2e:	9903      	ldr	r1, [sp, #12]
 800be30:	9806      	ldr	r0, [sp, #24]
 800be32:	4281      	cmp	r1, r0
 800be34:	f240 8356 	bls.w	800c4e4 <forward_dense+0x7e4>
 800be38:	4686      	mov	lr, r0
 800be3a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800be3c:	eb00 090a 	add.w	r9, r0, sl
 800be40:	0941      	lsrs	r1, r0, #5
 800be42:	f10a 0004 	add.w	r0, sl, #4
 800be46:	f8cd 9020 	str.w	r9, [sp, #32]
 800be4a:	9012      	str	r0, [sp, #72]	; 0x48
 800be4c:	1c48      	adds	r0, r1, #1
 800be4e:	00c9      	lsls	r1, r1, #3
 800be50:	3110      	adds	r1, #16
 800be52:	9115      	str	r1, [sp, #84]	; 0x54
 800be54:	00c1      	lsls	r1, r0, #3
 800be56:	9113      	str	r1, [sp, #76]	; 0x4c
 800be58:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 800be5c:	9114      	str	r1, [sp, #80]	; 0x50
 800be5e:	f1a9 0104 	sub.w	r1, r9, #4
 800be62:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800be66:	910c      	str	r1, [sp, #48]	; 0x30
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 8128 	beq.w	800c0be <forward_dense+0x3be>
 800be6e:	ecb3 5a01 	vldmia	r3!, {s10}
 800be72:	f1b9 0f07 	cmp.w	r9, #7
 800be76:	d83d      	bhi.n	800bef4 <forward_dense+0x1f4>
 800be78:	45da      	cmp	sl, fp
 800be7a:	d211      	bcs.n	800bea0 <forward_dense+0x1a0>
 800be7c:	eddf 7a92 	vldr	s15, [pc, #584]	; 800c0c8 <forward_dense+0x3c8>
 800be80:	4650      	mov	r0, sl
 800be82:	4615      	mov	r5, r2
 800be84:	f815 1b01 	ldrb.w	r1, [r5], #1
 800be88:	ecb0 7a01 	vldmia	r0!, {s14}
 800be8c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800be90:	4558      	cmp	r0, fp
 800be92:	edd1 6a00 	vldr	s13, [r1]
 800be96:	eee6 7a87 	vfma.f32	s15, s13, s14
 800be9a:	d3f3      	bcc.n	800be84 <forward_dense+0x184>
 800be9c:	ee35 5a27 	vadd.f32	s10, s10, s15
 800bea0:	9904      	ldr	r1, [sp, #16]
 800bea2:	ecae 5a01 	vstmia	lr!, {s10}
 800bea6:	440a      	add	r2, r1
 800bea8:	9903      	ldr	r1, [sp, #12]
 800beaa:	458e      	cmp	lr, r1
 800beac:	d3dc      	bcc.n	800be68 <forward_dense+0x168>
 800beae:	9a06      	ldr	r2, [sp, #24]
 800beb0:	1a8b      	subs	r3, r1, r2
 800beb2:	3b01      	subs	r3, #1
 800beb4:	f023 0303 	bic.w	r3, r3, #3
 800beb8:	3304      	adds	r3, #4
 800beba:	18d3      	adds	r3, r2, r3
 800bebc:	4619      	mov	r1, r3
 800bebe:	9306      	str	r3, [sp, #24]
 800bec0:	9b03      	ldr	r3, [sp, #12]
 800bec2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bec4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bec6:	4413      	add	r3, r2
 800bec8:	9a07      	ldr	r2, [sp, #28]
 800beca:	4281      	cmp	r1, r0
 800becc:	9303      	str	r3, [sp, #12]
 800bece:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bed0:	441a      	add	r2, r3
 800bed2:	449b      	add	fp, r3
 800bed4:	9207      	str	r2, [sp, #28]
 800bed6:	9a05      	ldr	r2, [sp, #20]
 800bed8:	441a      	add	r2, r3
 800beda:	9205      	str	r2, [sp, #20]
 800bedc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bede:	4692      	mov	sl, r2
 800bee0:	f080 82fb 	bcs.w	800c4da <forward_dense+0x7da>
 800bee4:	441a      	add	r2, r3
 800bee6:	920b      	str	r2, [sp, #44]	; 0x2c
 800bee8:	e793      	b.n	800be12 <forward_dense+0x112>
 800beea:	6853      	ldr	r3, [r2, #4]
 800beec:	deff      	udf	#255	; 0xff
 800beee:	2300      	movs	r3, #0
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	deff      	udf	#255	; 0xff
 800bef4:	f002 0103 	and.w	r1, r2, #3
 800bef8:	2902      	cmp	r1, #2
 800befa:	f000 81e6 	beq.w	800c2ca <forward_dense+0x5ca>
 800befe:	2903      	cmp	r1, #3
 800bf00:	f000 80e4 	beq.w	800c0cc <forward_dense+0x3cc>
 800bf04:	2901      	cmp	r1, #1
 800bf06:	f000 81ef 	beq.w	800c2e8 <forward_dense+0x5e8>
 800bf0a:	9908      	ldr	r1, [sp, #32]
 800bf0c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800c0c8 <forward_dense+0x3c8>
 800bf10:	458a      	cmp	sl, r1
 800bf12:	f200 82e9 	bhi.w	800c4e8 <forward_dense+0x7e8>
 800bf16:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800bf18:	f102 0108 	add.w	r1, r2, #8
 800bf1c:	f10a 0020 	add.w	r0, sl, #32
 800bf20:	18ae      	adds	r6, r5, r2
 800bf22:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800bf26:	3108      	adds	r1, #8
 800bf28:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800bf2c:	3020      	adds	r0, #32
 800bf2e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bf32:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800bf36:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800bf3a:	edd5 7a00 	vldr	s15, [r5]
 800bf3e:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800bf42:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800bf46:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800bf4a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bf4e:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800bf52:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800bf56:	edd5 2a00 	vldr	s5, [r5]
 800bf5a:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800bf5e:	eee2 7a83 	vfma.f32	s15, s5, s6
 800bf62:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800bf66:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bf6a:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800bf6e:	ed95 3a00 	vldr	s6, [r5]
 800bf72:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800bf76:	eee3 7a23 	vfma.f32	s15, s6, s7
 800bf7a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bf7e:	edd5 3a00 	vldr	s7, [r5]
 800bf82:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800bf86:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bf8a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800bf8e:	ed95 4a00 	vldr	s8, [r5]
 800bf92:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800bf96:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bf9a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800bf9e:	edd5 4a00 	vldr	s9, [r5]
 800bfa2:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800bfa6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bfaa:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800bfae:	edd5 5a00 	vldr	s11, [r5]
 800bfb2:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800bfb6:	428e      	cmp	r6, r1
 800bfb8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bfbc:	eee5 7a86 	vfma.f32	s15, s11, s12
 800bfc0:	ed95 6a00 	vldr	s12, [r5]
 800bfc4:	eee6 7a26 	vfma.f32	s15, s12, s13
 800bfc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bfcc:	d1a9      	bne.n	800bf22 <forward_dense+0x222>
 800bfce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bfd0:	1850      	adds	r0, r2, r1
 800bfd2:	9914      	ldr	r1, [sp, #80]	; 0x50
 800bfd4:	4559      	cmp	r1, fp
 800bfd6:	d26f      	bcs.n	800c0b8 <forward_dense+0x3b8>
 800bfd8:	7805      	ldrb	r5, [r0, #0]
 800bfda:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bfde:	edd5 7a00 	vldr	s15, [r5]
 800bfe2:	460d      	mov	r5, r1
 800bfe4:	ecf5 6a01 	vldmia	r5!, {s13}
 800bfe8:	45ab      	cmp	fp, r5
 800bfea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800bfee:	d963      	bls.n	800c0b8 <forward_dense+0x3b8>
 800bff0:	7845      	ldrb	r5, [r0, #1]
 800bff2:	edd1 6a01 	vldr	s13, [r1, #4]
 800bff6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800bffa:	edd5 7a00 	vldr	s15, [r5]
 800bffe:	f101 0508 	add.w	r5, r1, #8
 800c002:	45ab      	cmp	fp, r5
 800c004:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c008:	d956      	bls.n	800c0b8 <forward_dense+0x3b8>
 800c00a:	7885      	ldrb	r5, [r0, #2]
 800c00c:	edd1 6a02 	vldr	s13, [r1, #8]
 800c010:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c014:	edd5 7a00 	vldr	s15, [r5]
 800c018:	f101 050c 	add.w	r5, r1, #12
 800c01c:	45ab      	cmp	fp, r5
 800c01e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c022:	d949      	bls.n	800c0b8 <forward_dense+0x3b8>
 800c024:	78c5      	ldrb	r5, [r0, #3]
 800c026:	edd1 6a03 	vldr	s13, [r1, #12]
 800c02a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c02e:	edd5 7a00 	vldr	s15, [r5]
 800c032:	f101 0510 	add.w	r5, r1, #16
 800c036:	45ab      	cmp	fp, r5
 800c038:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c03c:	d93c      	bls.n	800c0b8 <forward_dense+0x3b8>
 800c03e:	7905      	ldrb	r5, [r0, #4]
 800c040:	edd1 6a04 	vldr	s13, [r1, #16]
 800c044:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c048:	edd5 7a00 	vldr	s15, [r5]
 800c04c:	f101 0514 	add.w	r5, r1, #20
 800c050:	45ab      	cmp	fp, r5
 800c052:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c056:	d92f      	bls.n	800c0b8 <forward_dense+0x3b8>
 800c058:	7945      	ldrb	r5, [r0, #5]
 800c05a:	edd1 6a05 	vldr	s13, [r1, #20]
 800c05e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c062:	edd5 7a00 	vldr	s15, [r5]
 800c066:	f101 0518 	add.w	r5, r1, #24
 800c06a:	45ab      	cmp	fp, r5
 800c06c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c070:	d922      	bls.n	800c0b8 <forward_dense+0x3b8>
 800c072:	7985      	ldrb	r5, [r0, #6]
 800c074:	edd1 6a06 	vldr	s13, [r1, #24]
 800c078:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c07c:	edd5 7a00 	vldr	s15, [r5]
 800c080:	f101 051c 	add.w	r5, r1, #28
 800c084:	45ab      	cmp	fp, r5
 800c086:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c08a:	d915      	bls.n	800c0b8 <forward_dense+0x3b8>
 800c08c:	79c5      	ldrb	r5, [r0, #7]
 800c08e:	edd1 6a07 	vldr	s13, [r1, #28]
 800c092:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c096:	edd5 7a00 	vldr	s15, [r5]
 800c09a:	f101 0520 	add.w	r5, r1, #32
 800c09e:	45ab      	cmp	fp, r5
 800c0a0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c0a4:	d908      	bls.n	800c0b8 <forward_dense+0x3b8>
 800c0a6:	edd1 7a08 	vldr	s15, [r1, #32]
 800c0aa:	7a01      	ldrb	r1, [r0, #8]
 800c0ac:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c0b0:	edd1 6a00 	vldr	s13, [r1]
 800c0b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c0b8:	ee35 5a07 	vadd.f32	s10, s10, s14
 800c0bc:	e6f0      	b.n	800bea0 <forward_dense+0x1a0>
 800c0be:	ed9f 5a02 	vldr	s10, [pc, #8]	; 800c0c8 <forward_dense+0x3c8>
 800c0c2:	e6d6      	b.n	800be72 <forward_dense+0x172>
 800c0c4:	3ffffff8 	.word	0x3ffffff8
 800c0c8:	00000000 	.word	0x00000000
 800c0cc:	eeb0 7a48 	vmov.f32	s14, s16
 800c0d0:	4650      	mov	r0, sl
 800c0d2:	4611      	mov	r1, r2
 800c0d4:	468c      	mov	ip, r1
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	f81c 5b01 	ldrb.w	r5, [ip], #1
 800c0dc:	ecf6 7a01 	vldmia	r6!, {s15}
 800c0e0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c0e4:	edd5 6a00 	vldr	s13, [r5]
 800c0e8:	9d08      	ldr	r5, [sp, #32]
 800c0ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c0ee:	42ae      	cmp	r6, r5
 800c0f0:	d866      	bhi.n	800c1c0 <forward_dense+0x4c0>
 800c0f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0f4:	f101 0711 	add.w	r7, r1, #17
 800c0f8:	3109      	adds	r1, #9
 800c0fa:	eba5 0800 	sub.w	r8, r5, r0
 800c0fe:	3024      	adds	r0, #36	; 0x24
 800c100:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800c104:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800c108:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 800c10c:	3108      	adds	r1, #8
 800c10e:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800c112:	3020      	adds	r0, #32
 800c114:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c118:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 800c11c:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800c120:	edd5 7a00 	vldr	s15, [r5]
 800c124:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800c128:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800c12c:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800c130:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c134:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800c138:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800c13c:	edd5 2a00 	vldr	s5, [r5]
 800c140:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800c144:	eee2 7a83 	vfma.f32	s15, s5, s6
 800c148:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800c14c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c150:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800c154:	ed95 3a00 	vldr	s6, [r5]
 800c158:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800c15c:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c160:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c164:	edd5 3a00 	vldr	s7, [r5]
 800c168:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800c16c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c170:	eee3 7a84 	vfma.f32	s15, s7, s8
 800c174:	ed95 4a00 	vldr	s8, [r5]
 800c178:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800c17c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c180:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c184:	edd5 4a00 	vldr	s9, [r5]
 800c188:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800c18c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c190:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800c194:	edd5 5a00 	vldr	s11, [r5]
 800c198:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800c19c:	428f      	cmp	r7, r1
 800c19e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c1a2:	eee5 7a86 	vfma.f32	s15, s11, s12
 800c1a6:	ed95 6a00 	vldr	s12, [r5]
 800c1aa:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c1ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1b2:	d1a9      	bne.n	800c108 <forward_dense+0x408>
 800c1b4:	f108 0801 	add.w	r8, r8, #1
 800c1b8:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800c1bc:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800c1c0:	455e      	cmp	r6, fp
 800c1c2:	f4bf af79 	bcs.w	800c0b8 <forward_dense+0x3b8>
 800c1c6:	f89c 1000 	ldrb.w	r1, [ip]
 800c1ca:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c1ce:	edd1 7a00 	vldr	s15, [r1]
 800c1d2:	4631      	mov	r1, r6
 800c1d4:	ecf1 6a01 	vldmia	r1!, {s13}
 800c1d8:	458b      	cmp	fp, r1
 800c1da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c1de:	f67f af6b 	bls.w	800c0b8 <forward_dense+0x3b8>
 800c1e2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 800c1e6:	edd6 6a01 	vldr	s13, [r6, #4]
 800c1ea:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c1ee:	edd1 7a00 	vldr	s15, [r1]
 800c1f2:	f106 0108 	add.w	r1, r6, #8
 800c1f6:	458b      	cmp	fp, r1
 800c1f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c1fc:	f67f af5c 	bls.w	800c0b8 <forward_dense+0x3b8>
 800c200:	f89c 1002 	ldrb.w	r1, [ip, #2]
 800c204:	edd6 6a02 	vldr	s13, [r6, #8]
 800c208:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c20c:	edd1 7a00 	vldr	s15, [r1]
 800c210:	f106 010c 	add.w	r1, r6, #12
 800c214:	458b      	cmp	fp, r1
 800c216:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c21a:	f67f af4d 	bls.w	800c0b8 <forward_dense+0x3b8>
 800c21e:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800c222:	edd6 6a03 	vldr	s13, [r6, #12]
 800c226:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c22a:	edd1 7a00 	vldr	s15, [r1]
 800c22e:	f106 0110 	add.w	r1, r6, #16
 800c232:	458b      	cmp	fp, r1
 800c234:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c238:	f67f af3e 	bls.w	800c0b8 <forward_dense+0x3b8>
 800c23c:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800c240:	edd6 6a04 	vldr	s13, [r6, #16]
 800c244:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c248:	edd1 7a00 	vldr	s15, [r1]
 800c24c:	f106 0114 	add.w	r1, r6, #20
 800c250:	458b      	cmp	fp, r1
 800c252:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c256:	f67f af2f 	bls.w	800c0b8 <forward_dense+0x3b8>
 800c25a:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800c25e:	edd6 6a05 	vldr	s13, [r6, #20]
 800c262:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c266:	edd1 7a00 	vldr	s15, [r1]
 800c26a:	f106 0118 	add.w	r1, r6, #24
 800c26e:	458b      	cmp	fp, r1
 800c270:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c274:	f67f af20 	bls.w	800c0b8 <forward_dense+0x3b8>
 800c278:	f89c 1006 	ldrb.w	r1, [ip, #6]
 800c27c:	edd6 6a06 	vldr	s13, [r6, #24]
 800c280:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c284:	edd1 7a00 	vldr	s15, [r1]
 800c288:	f106 011c 	add.w	r1, r6, #28
 800c28c:	458b      	cmp	fp, r1
 800c28e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c292:	f67f af11 	bls.w	800c0b8 <forward_dense+0x3b8>
 800c296:	f89c 1007 	ldrb.w	r1, [ip, #7]
 800c29a:	edd6 6a07 	vldr	s13, [r6, #28]
 800c29e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c2a2:	edd1 7a00 	vldr	s15, [r1]
 800c2a6:	f106 0120 	add.w	r1, r6, #32
 800c2aa:	458b      	cmp	fp, r1
 800c2ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2b0:	f67f af02 	bls.w	800c0b8 <forward_dense+0x3b8>
 800c2b4:	f89c 1008 	ldrb.w	r1, [ip, #8]
 800c2b8:	edd6 7a08 	vldr	s15, [r6, #32]
 800c2bc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c2c0:	edd1 6a00 	vldr	s13, [r1]
 800c2c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2c8:	e6f6      	b.n	800c0b8 <forward_dense+0x3b8>
 800c2ca:	eeb0 7a48 	vmov.f32	s14, s16
 800c2ce:	4650      	mov	r0, sl
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	f811 5b01 	ldrb.w	r5, [r1], #1
 800c2d6:	ecf0 7a01 	vldmia	r0!, {s15}
 800c2da:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c2de:	edd5 6a00 	vldr	s13, [r5]
 800c2e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c2e6:	e6f5      	b.n	800c0d4 <forward_dense+0x3d4>
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	edda 7a00 	vldr	s15, [sl]
 800c2ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 800c2f0:	f811 5b01 	ldrb.w	r5, [r1], #1
 800c2f4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c2f8:	ed95 7a00 	vldr	s14, [r5]
 800c2fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c300:	e7e7      	b.n	800c2d2 <forward_dense+0x5d2>
 800c302:	9803      	ldr	r0, [sp, #12]
 800c304:	9906      	ldr	r1, [sp, #24]
 800c306:	4288      	cmp	r0, r1
 800c308:	f67f adda 	bls.w	800bec0 <forward_dense+0x1c0>
 800c30c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c30e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800c312:	468b      	mov	fp, r1
 800c314:	f100 0c01 	add.w	ip, r0, #1
 800c318:	9805      	ldr	r0, [sp, #20]
 800c31a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800c31e:	3801      	subs	r0, #1
 800c320:	9008      	str	r0, [sp, #32]
 800c322:	2b00      	cmp	r3, #0
 800c324:	f000 80bf 	beq.w	800c4a6 <forward_dense+0x7a6>
 800c328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c32a:	ecf3 2a01 	vldmia	r3!, {s5}
 800c32e:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 800c0c8 <forward_dense+0x3c8>
 800c332:	2900      	cmp	r1, #0
 800c334:	f000 80bf 	beq.w	800c4b6 <forward_dense+0x7b6>
 800c338:	1d10      	adds	r0, r2, #4
 800c33a:	f10a 0120 	add.w	r1, sl, #32
 800c33e:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800c342:	3004      	adds	r0, #4
 800c344:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800c348:	3120      	adds	r1, #32
 800c34a:	f007 0e0f 	and.w	lr, r7, #15
 800c34e:	093f      	lsrs	r7, r7, #4
 800c350:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 800c354:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 800c358:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 800c35c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800c360:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 800c364:	edde 7a00 	vldr	s15, [lr]
 800c368:	ed97 3a00 	vldr	s6, [r7]
 800c36c:	0937      	lsrs	r7, r6, #4
 800c36e:	ee67 7a82 	vmul.f32	s15, s15, s4
 800c372:	f006 060f 	and.w	r6, r6, #15
 800c376:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800c37a:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800c37e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c382:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 800c386:	eee3 7a04 	vfma.f32	s15, s6, s8
 800c38a:	ed97 3a00 	vldr	s6, [r7]
 800c38e:	ed96 4a00 	vldr	s8, [r6]
 800c392:	092e      	lsrs	r6, r5, #4
 800c394:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 800c398:	f005 050f 	and.w	r5, r5, #15
 800c39c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c3a0:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 800c3a4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c3a8:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 800c3ac:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800c3b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 800c3b4:	eee4 7a05 	vfma.f32	s15, s8, s10
 800c3b8:	ed96 4a00 	vldr	s8, [r6]
 800c3bc:	ed95 5a00 	vldr	s10, [r5]
 800c3c0:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 800c3c4:	4560      	cmp	r0, ip
 800c3c6:	ea4f 1615 	mov.w	r6, r5, lsr #4
 800c3ca:	f005 050f 	and.w	r5, r5, #15
 800c3ce:	eee4 7a24 	vfma.f32	s15, s8, s9
 800c3d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c3d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c3da:	eee5 7a06 	vfma.f32	s15, s10, s12
 800c3de:	ed96 5a00 	vldr	s10, [r6]
 800c3e2:	ed95 6a00 	vldr	s12, [r5]
 800c3e6:	eee5 7a25 	vfma.f32	s15, s10, s11
 800c3ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c3ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c3f2:	d1a4      	bne.n	800c33e <forward_dense+0x63e>
 800c3f4:	f1ac 0804 	sub.w	r8, ip, #4
 800c3f8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800c3fc:	9905      	ldr	r1, [sp, #20]
 800c3fe:	458e      	cmp	lr, r1
 800c400:	d229      	bcs.n	800c456 <forward_dense+0x756>
 800c402:	9908      	ldr	r1, [sp, #32]
 800c404:	f10e 0008 	add.w	r0, lr, #8
 800c408:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800c40c:	eba1 070e 	sub.w	r7, r1, lr
 800c410:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 800c414:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800c418:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c41c:	3008      	adds	r0, #8
 800c41e:	ed50 5a03 	vldr	s11, [r0, #-12]
 800c422:	f001 050f 	and.w	r5, r1, #15
 800c426:	0909      	lsrs	r1, r1, #4
 800c428:	ed50 6a04 	vldr	s13, [r0, #-16]
 800c42c:	42b7      	cmp	r7, r6
 800c42e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800c432:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c436:	edd5 7a00 	vldr	s15, [r5]
 800c43a:	ed91 6a00 	vldr	s12, [r1]
 800c43e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800c442:	eee6 7a26 	vfma.f32	s15, s12, s13
 800c446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c44a:	d1e5      	bne.n	800c418 <forward_dense+0x718>
 800c44c:	f109 0901 	add.w	r9, r9, #1
 800c450:	44c8      	add	r8, r9
 800c452:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800c456:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c458:	b1c1      	cbz	r1, 800c48c <forward_dense+0x78c>
 800c45a:	f898 1000 	ldrb.w	r1, [r8]
 800c45e:	edde 7a00 	vldr	s15, [lr]
 800c462:	0909      	lsrs	r1, r1, #4
 800c464:	9804      	ldr	r0, [sp, #16]
 800c466:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800c46a:	4402      	add	r2, r0
 800c46c:	4484      	add	ip, r0
 800c46e:	edd1 6a00 	vldr	s13, [r1]
 800c472:	9903      	ldr	r1, [sp, #12]
 800c474:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c478:	ee72 2a87 	vadd.f32	s5, s5, s14
 800c47c:	eceb 2a01 	vstmia	fp!, {s5}
 800c480:	4559      	cmp	r1, fp
 800c482:	f63f af4e 	bhi.w	800c322 <forward_dense+0x622>
 800c486:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800c48a:	e510      	b.n	800beae <forward_dense+0x1ae>
 800c48c:	9904      	ldr	r1, [sp, #16]
 800c48e:	ee32 7a87 	vadd.f32	s14, s5, s14
 800c492:	440a      	add	r2, r1
 800c494:	448c      	add	ip, r1
 800c496:	9903      	ldr	r1, [sp, #12]
 800c498:	ecab 7a01 	vstmia	fp!, {s14}
 800c49c:	458b      	cmp	fp, r1
 800c49e:	d2f2      	bcs.n	800c486 <forward_dense+0x786>
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f47f af41 	bne.w	800c328 <forward_dense+0x628>
 800c4a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4a8:	eef0 2a48 	vmov.f32	s5, s16
 800c4ac:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800c53c <forward_dense+0x83c>
 800c4b0:	2900      	cmp	r1, #0
 800c4b2:	f47f af41 	bne.w	800c338 <forward_dense+0x638>
 800c4b6:	46d6      	mov	lr, sl
 800c4b8:	4690      	mov	r8, r2
 800c4ba:	e79f      	b.n	800c3fc <forward_dense+0x6fc>
 800c4bc:	9819      	ldr	r0, [sp, #100]	; 0x64
 800c4be:	4651      	mov	r1, sl
 800c4c0:	9d06      	ldr	r5, [sp, #24]
 800c4c2:	9001      	str	r0, [sp, #4]
 800c4c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c4c6:	9000      	str	r0, [sp, #0]
 800c4c8:	4628      	mov	r0, r5
 800c4ca:	f000 fccb 	bl	800ce64 <lite_dense_if32of32wf32>
 800c4ce:	462b      	mov	r3, r5
 800c4d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4d2:	4413      	add	r3, r2
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	9306      	str	r3, [sp, #24]
 800c4d8:	e4f2      	b.n	800bec0 <forward_dense+0x1c0>
 800c4da:	b01b      	add	sp, #108	; 0x6c
 800c4dc:	ecbd 8b02 	vpop	{d8}
 800c4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e4:	4601      	mov	r1, r0
 800c4e6:	e4eb      	b.n	800bec0 <forward_dense+0x1c0>
 800c4e8:	4651      	mov	r1, sl
 800c4ea:	4610      	mov	r0, r2
 800c4ec:	e572      	b.n	800bfd4 <forward_dense+0x2d4>
 800c4ee:	f8d8 800c 	ldr.w	r8, [r8, #12]
 800c4f2:	f1b9 0f00 	cmp.w	r9, #0
 800c4f6:	d016      	beq.n	800c526 <forward_dense+0x826>
 800c4f8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c4fc:	f7fc f808 	bl	8008510 <ai_array_get_byte_size>
 800c500:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 800c504:	4602      	mov	r2, r0
 800c506:	4641      	mov	r1, r8
 800c508:	4650      	mov	r0, sl
 800c50a:	f000 fe05 	bl	800d118 <memcpy>
 800c50e:	e44b      	b.n	800bda8 <forward_dense+0xa8>
 800c510:	2b04      	cmp	r3, #4
 800c512:	d00a      	beq.n	800c52a <forward_dense+0x82a>
 800c514:	f04f 0900 	mov.w	r9, #0
 800c518:	e441      	b.n	800bd9e <forward_dense+0x9e>
 800c51a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c51c:	e417      	b.n	800bd4e <forward_dense+0x4e>
 800c51e:	2300      	movs	r3, #0
 800c520:	930d      	str	r3, [sp, #52]	; 0x34
 800c522:	460b      	mov	r3, r1
 800c524:	e413      	b.n	800bd4e <forward_dense+0x4e>
 800c526:	46c2      	mov	sl, r8
 800c528:	e43e      	b.n	800bda8 <forward_dense+0xa8>
 800c52a:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800c52e:	e43b      	b.n	800bda8 <forward_dense+0xa8>
 800c530:	2300      	movs	r3, #0
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	deff      	udf	#255	; 0xff
 800c536:	2300      	movs	r3, #0
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	deff      	udf	#255	; 0xff
 800c53c:	00000000 	.word	0x00000000

0800c540 <pool_func_mp_array_f32>:
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	b093      	sub	sp, #76	; 0x4c
 800c546:	468a      	mov	sl, r1
 800c548:	461f      	mov	r7, r3
 800c54a:	4693      	mov	fp, r2
 800c54c:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 800c550:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c552:	9104      	str	r1, [sp, #16]
 800c554:	f8bd 1074 	ldrh.w	r1, [sp, #116]	; 0x74
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	9100      	str	r1, [sp, #0]
 800c55c:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 800c560:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 800c564:	9105      	str	r1, [sp, #20]
 800c566:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 800c56a:	9303      	str	r3, [sp, #12]
 800c56c:	9106      	str	r1, [sp, #24]
 800c56e:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800c572:	f8bd 1088 	ldrh.w	r1, [sp, #136]	; 0x88
 800c576:	ea52 0c03 	orrs.w	ip, r2, r3
 800c57a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 800c57e:	9101      	str	r1, [sp, #4]
 800c580:	f8bd 108c 	ldrh.w	r1, [sp, #140]	; 0x8c
 800c584:	9102      	str	r1, [sp, #8]
 800c586:	d173      	bne.n	800c670 <pool_func_mp_array_f32+0x130>
 800c588:	9904      	ldr	r1, [sp, #16]
 800c58a:	9d01      	ldr	r5, [sp, #4]
 800c58c:	eba1 000a 	sub.w	r0, r1, sl
 800c590:	9e05      	ldr	r6, [sp, #20]
 800c592:	1e69      	subs	r1, r5, #1
 800c594:	3801      	subs	r0, #1
 800c596:	fb11 0106 	smlabb	r1, r1, r6, r0
 800c59a:	0408      	lsls	r0, r1, #16
 800c59c:	d568      	bpl.n	800c670 <pool_func_mp_array_f32+0x130>
 800c59e:	9900      	ldr	r1, [sp, #0]
 800c5a0:	9e02      	ldr	r6, [sp, #8]
 800c5a2:	eba1 000b 	sub.w	r0, r1, fp
 800c5a6:	9c06      	ldr	r4, [sp, #24]
 800c5a8:	1e71      	subs	r1, r6, #1
 800c5aa:	3801      	subs	r0, #1
 800c5ac:	fb11 0104 	smlabb	r1, r1, r4, r0
 800c5b0:	0409      	lsls	r1, r1, #16
 800c5b2:	d55d      	bpl.n	800c670 <pool_func_mp_array_f32+0x130>
 800c5b4:	2e00      	cmp	r6, #0
 800c5b6:	d058      	beq.n	800c66a <pool_func_mp_array_f32+0x12a>
 800c5b8:	2d00      	cmp	r5, #0
 800c5ba:	d056      	beq.n	800c66a <pool_func_mp_array_f32+0x12a>
 800c5bc:	2f00      	cmp	r7, #0
 800c5be:	d054      	beq.n	800c66a <pool_func_mp_array_f32+0x12a>
 800c5c0:	2f01      	cmp	r7, #1
 800c5c2:	f040 815b 	bne.w	800c87c <pool_func_mp_array_f32+0x33c>
 800c5c6:	46e3      	mov	fp, ip
 800c5c8:	4663      	mov	r3, ip
 800c5ca:	f8cd c01c 	str.w	ip, [sp, #28]
 800c5ce:	9a01      	ldr	r2, [sp, #4]
 800c5d0:	2700      	movs	r7, #0
 800c5d2:	f9bd 6000 	ldrsh.w	r6, [sp]
 800c5d6:	fb02 f303 	mul.w	r3, r2, r3
 800c5da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c5de:	46be      	mov	lr, r7
 800c5e0:	46bc      	mov	ip, r7
 800c5e2:	9308      	str	r3, [sp, #32]
 800c5e4:	fa0f f38b 	sxth.w	r3, fp
 800c5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800c5ec:	b23d      	sxth	r5, r7
 800c5ee:	9b08      	ldr	r3, [sp, #32]
 800c5f0:	fa0f f088 	sxth.w	r0, r8
 800c5f4:	42b4      	cmp	r4, r6
 800c5f6:	eddf 7aa0 	vldr	s15, [pc, #640]	; 800c878 <pool_func_mp_array_f32+0x338>
 800c5fa:	449c      	add	ip, r3
 800c5fc:	da12      	bge.n	800c624 <pool_func_mp_array_f32+0xe4>
 800c5fe:	4285      	cmp	r5, r0
 800c600:	da0c      	bge.n	800c61c <pool_func_mp_array_f32+0xdc>
 800c602:	fb04 520a 	mla	r2, r4, sl, r5
 800c606:	462b      	mov	r3, r5
 800c608:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800c60c:	3301      	adds	r3, #1
 800c60e:	ecb2 7a01 	vldmia	r2!, {s14}
 800c612:	b219      	sxth	r1, r3
 800c614:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800c618:	4281      	cmp	r1, r0
 800c61a:	dbf7      	blt.n	800c60c <pool_func_mp_array_f32+0xcc>
 800c61c:	3401      	adds	r4, #1
 800c61e:	b224      	sxth	r4, r4
 800c620:	42b4      	cmp	r4, r6
 800c622:	dbec      	blt.n	800c5fe <pool_func_mp_array_f32+0xbe>
 800c624:	9b03      	ldr	r3, [sp, #12]
 800c626:	f10e 0e01 	add.w	lr, lr, #1
 800c62a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800c62e:	9b05      	ldr	r3, [sp, #20]
 800c630:	fa0f fe8e 	sxth.w	lr, lr
 800c634:	4498      	add	r8, r3
 800c636:	441f      	add	r7, r3
 800c638:	9b01      	ldr	r3, [sp, #4]
 800c63a:	edcc 7a00 	vstr	s15, [ip]
 800c63e:	fa1f f888 	uxth.w	r8, r8
 800c642:	4573      	cmp	r3, lr
 800c644:	b2bf      	uxth	r7, r7
 800c646:	46f4      	mov	ip, lr
 800c648:	dccf      	bgt.n	800c5ea <pool_func_mp_array_f32+0xaa>
 800c64a:	9a07      	ldr	r2, [sp, #28]
 800c64c:	9906      	ldr	r1, [sp, #24]
 800c64e:	9b00      	ldr	r3, [sp, #0]
 800c650:	3201      	adds	r2, #1
 800c652:	448b      	add	fp, r1
 800c654:	b212      	sxth	r2, r2
 800c656:	440b      	add	r3, r1
 800c658:	9902      	ldr	r1, [sp, #8]
 800c65a:	fa1f fb8b 	uxth.w	fp, fp
 800c65e:	b29b      	uxth	r3, r3
 800c660:	9207      	str	r2, [sp, #28]
 800c662:	4291      	cmp	r1, r2
 800c664:	9300      	str	r3, [sp, #0]
 800c666:	4613      	mov	r3, r2
 800c668:	dcb1      	bgt.n	800c5ce <pool_func_mp_array_f32+0x8e>
 800c66a:	b013      	add	sp, #76	; 0x4c
 800c66c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c670:	9902      	ldr	r1, [sp, #8]
 800c672:	2900      	cmp	r1, #0
 800c674:	d0f9      	beq.n	800c66a <pool_func_mp_array_f32+0x12a>
 800c676:	9901      	ldr	r1, [sp, #4]
 800c678:	2900      	cmp	r1, #0
 800c67a:	d0f6      	beq.n	800c66a <pool_func_mp_array_f32+0x12a>
 800c67c:	2f00      	cmp	r7, #0
 800c67e:	d0f4      	beq.n	800c66a <pool_func_mp_array_f32+0x12a>
 800c680:	2f01      	cmp	r7, #1
 800c682:	9900      	ldr	r1, [sp, #0]
 800c684:	d16a      	bne.n	800c75c <pool_func_mp_array_f32+0x21c>
 800c686:	1a8a      	subs	r2, r1, r2
 800c688:	9904      	ldr	r1, [sp, #16]
 800c68a:	1ac9      	subs	r1, r1, r3
 800c68c:	425b      	negs	r3, r3
 800c68e:	b292      	uxth	r2, r2
 800c690:	b29b      	uxth	r3, r3
 800c692:	9207      	str	r2, [sp, #28]
 800c694:	b28a      	uxth	r2, r1
 800c696:	930c      	str	r3, [sp, #48]	; 0x30
 800c698:	2300      	movs	r3, #0
 800c69a:	920b      	str	r2, [sp, #44]	; 0x2c
 800c69c:	9308      	str	r3, [sp, #32]
 800c69e:	9a01      	ldr	r2, [sp, #4]
 800c6a0:	f04f 0c00 	mov.w	ip, #0
 800c6a4:	fb02 f303 	mul.w	r3, r2, r3
 800c6a8:	9a07      	ldr	r2, [sp, #28]
 800c6aa:	46e6      	mov	lr, ip
 800c6ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c6ae:	b217      	sxth	r7, r2
 800c6b0:	9b00      	ldr	r3, [sp, #0]
 800c6b2:	1ad3      	subs	r3, r2, r3
 800c6b4:	b21b      	sxth	r3, r3
 800c6b6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6b8:	e9dd 830b 	ldrd	r8, r3, [sp, #44]	; 0x2c
 800c6bc:	9304      	str	r3, [sp, #16]
 800c6be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c6c0:	fa0f f488 	sxth.w	r4, r8
 800c6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c6:	4287      	cmp	r7, r0
 800c6c8:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800c6cc:	449e      	add	lr, r3
 800c6ce:	eddf 7a6a 	vldr	s15, [pc, #424]	; 800c878 <pool_func_mp_array_f32+0x338>
 800c6d2:	dd1e      	ble.n	800c712 <pool_func_mp_array_f32+0x1d2>
 800c6d4:	42a6      	cmp	r6, r4
 800c6d6:	da18      	bge.n	800c70a <pool_func_mp_array_f32+0x1ca>
 800c6d8:	43c1      	mvns	r1, r0
 800c6da:	4583      	cmp	fp, r0
 800c6dc:	fb00 f20a 	mul.w	r2, r0, sl
 800c6e0:	ea4f 71d1 	mov.w	r1, r1, lsr #31
 800c6e4:	dd11      	ble.n	800c70a <pool_func_mp_array_f32+0x1ca>
 800c6e6:	4432      	add	r2, r6
 800c6e8:	4633      	mov	r3, r6
 800c6ea:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800c6ee:	041d      	lsls	r5, r3, #16
 800c6f0:	d406      	bmi.n	800c700 <pool_func_mp_array_f32+0x1c0>
 800c6f2:	b129      	cbz	r1, 800c700 <pool_func_mp_array_f32+0x1c0>
 800c6f4:	459a      	cmp	sl, r3
 800c6f6:	dd03      	ble.n	800c700 <pool_func_mp_array_f32+0x1c0>
 800c6f8:	ed92 7a00 	vldr	s14, [r2]
 800c6fc:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800c700:	3301      	adds	r3, #1
 800c702:	3204      	adds	r2, #4
 800c704:	b21d      	sxth	r5, r3
 800c706:	42a5      	cmp	r5, r4
 800c708:	dbf1      	blt.n	800c6ee <pool_func_mp_array_f32+0x1ae>
 800c70a:	3001      	adds	r0, #1
 800c70c:	b200      	sxth	r0, r0
 800c70e:	42b8      	cmp	r0, r7
 800c710:	dbe0      	blt.n	800c6d4 <pool_func_mp_array_f32+0x194>
 800c712:	9b03      	ldr	r3, [sp, #12]
 800c714:	f10c 0c01 	add.w	ip, ip, #1
 800c718:	9a05      	ldr	r2, [sp, #20]
 800c71a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
 800c71e:	9b04      	ldr	r3, [sp, #16]
 800c720:	fa0f fc8c 	sxth.w	ip, ip
 800c724:	4490      	add	r8, r2
 800c726:	4413      	add	r3, r2
 800c728:	edce 7a00 	vstr	s15, [lr]
 800c72c:	fa1f f888 	uxth.w	r8, r8
 800c730:	46e6      	mov	lr, ip
 800c732:	b29b      	uxth	r3, r3
 800c734:	9304      	str	r3, [sp, #16]
 800c736:	9b01      	ldr	r3, [sp, #4]
 800c738:	4563      	cmp	r3, ip
 800c73a:	dcc0      	bgt.n	800c6be <pool_func_mp_array_f32+0x17e>
 800c73c:	9a08      	ldr	r2, [sp, #32]
 800c73e:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 800c742:	3201      	adds	r2, #1
 800c744:	440b      	add	r3, r1
 800c746:	9902      	ldr	r1, [sp, #8]
 800c748:	b212      	sxth	r2, r2
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	4291      	cmp	r1, r2
 800c74e:	9208      	str	r2, [sp, #32]
 800c750:	9307      	str	r3, [sp, #28]
 800c752:	4613      	mov	r3, r2
 800c754:	dca3      	bgt.n	800c69e <pool_func_mp_array_f32+0x15e>
 800c756:	b013      	add	sp, #76	; 0x4c
 800c758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c75c:	1a88      	subs	r0, r1, r2
 800c75e:	9904      	ldr	r1, [sp, #16]
 800c760:	4252      	negs	r2, r2
 800c762:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c766:	1ac9      	subs	r1, r1, r3
 800c768:	425b      	negs	r3, r3
 800c76a:	b292      	uxth	r2, r2
 800c76c:	46b9      	mov	r9, r7
 800c76e:	b29b      	uxth	r3, r3
 800c770:	b280      	uxth	r0, r0
 800c772:	9208      	str	r2, [sp, #32]
 800c774:	9311      	str	r3, [sp, #68]	; 0x44
 800c776:	b28a      	uxth	r2, r1
 800c778:	2300      	movs	r3, #0
 800c77a:	ea4f 0887 	mov.w	r8, r7, lsl #2
 800c77e:	9007      	str	r0, [sp, #28]
 800c780:	9210      	str	r2, [sp, #64]	; 0x40
 800c782:	930c      	str	r3, [sp, #48]	; 0x30
 800c784:	9a01      	ldr	r2, [sp, #4]
 800c786:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 800c78a:	fb02 f303 	mul.w	r3, r2, r3
 800c78e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 800c792:	920b      	str	r2, [sp, #44]	; 0x2c
 800c794:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c796:	930f      	str	r3, [sp, #60]	; 0x3c
 800c798:	2300      	movs	r3, #0
 800c79a:	9200      	str	r2, [sp, #0]
 800c79c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c79e:	930d      	str	r3, [sp, #52]	; 0x34
 800c7a0:	9204      	str	r2, [sp, #16]
 800c7a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c7a4:	f04f 0e00 	mov.w	lr, #0
 800c7a8:	f9bd 6010 	ldrsh.w	r6, [sp, #16]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	f9bd 4000 	ldrsh.w	r4, [sp]
 800c7b2:	46f4      	mov	ip, lr
 800c7b4:	fb09 f303 	mul.w	r3, r9, r3
 800c7b8:	930a      	str	r3, [sp, #40]	; 0x28
 800c7ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c7bc:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800c878 <pool_func_mp_array_f32+0x338>
 800c7c0:	42b8      	cmp	r0, r7
 800c7c2:	da26      	bge.n	800c812 <pool_func_mp_array_f32+0x2d2>
 800c7c4:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 800c7c8:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
 800c7cc:	42a6      	cmp	r6, r4
 800c7ce:	da1a      	bge.n	800c806 <pool_func_mp_array_f32+0x2c6>
 800c7d0:	43c5      	mvns	r5, r0
 800c7d2:	4558      	cmp	r0, fp
 800c7d4:	fb00 f30a 	mul.w	r3, r0, sl
 800c7d8:	ea4f 75d5 	mov.w	r5, r5, lsr #31
 800c7dc:	da13      	bge.n	800c806 <pool_func_mp_array_f32+0x2c6>
 800c7de:	199a      	adds	r2, r3, r6
 800c7e0:	4633      	mov	r3, r6
 800c7e2:	fb09 c202 	mla	r2, r9, r2, ip
 800c7e6:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 800c7ea:	0419      	lsls	r1, r3, #16
 800c7ec:	d406      	bmi.n	800c7fc <pool_func_mp_array_f32+0x2bc>
 800c7ee:	b12d      	cbz	r5, 800c7fc <pool_func_mp_array_f32+0x2bc>
 800c7f0:	459a      	cmp	sl, r3
 800c7f2:	dd03      	ble.n	800c7fc <pool_func_mp_array_f32+0x2bc>
 800c7f4:	ed92 7a00 	vldr	s14, [r2]
 800c7f8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	4442      	add	r2, r8
 800c800:	b219      	sxth	r1, r3
 800c802:	42a1      	cmp	r1, r4
 800c804:	dbf1      	blt.n	800c7ea <pool_func_mp_array_f32+0x2aa>
 800c806:	3001      	adds	r0, #1
 800c808:	b200      	sxth	r0, r0
 800c80a:	42b8      	cmp	r0, r7
 800c80c:	dbde      	blt.n	800c7cc <pool_func_mp_array_f32+0x28c>
 800c80e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 800c812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c814:	f10e 0e01 	add.w	lr, lr, #1
 800c818:	9a03      	ldr	r2, [sp, #12]
 800c81a:	4463      	add	r3, ip
 800c81c:	fa0f fe8e 	sxth.w	lr, lr
 800c820:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c824:	45ce      	cmp	lr, r9
 800c826:	46f4      	mov	ip, lr
 800c828:	edc3 7a00 	vstr	s15, [r3]
 800c82c:	dbc5      	blt.n	800c7ba <pool_func_mp_array_f32+0x27a>
 800c82e:	9a00      	ldr	r2, [sp, #0]
 800c830:	9805      	ldr	r0, [sp, #20]
 800c832:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c834:	4402      	add	r2, r0
 800c836:	9b04      	ldr	r3, [sp, #16]
 800c838:	3101      	adds	r1, #1
 800c83a:	b292      	uxth	r2, r2
 800c83c:	4403      	add	r3, r0
 800c83e:	b209      	sxth	r1, r1
 800c840:	9200      	str	r2, [sp, #0]
 800c842:	b29b      	uxth	r3, r3
 800c844:	9a01      	ldr	r2, [sp, #4]
 800c846:	9304      	str	r3, [sp, #16]
 800c848:	460b      	mov	r3, r1
 800c84a:	428a      	cmp	r2, r1
 800c84c:	910d      	str	r1, [sp, #52]	; 0x34
 800c84e:	dca8      	bgt.n	800c7a2 <pool_func_mp_array_f32+0x262>
 800c850:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c852:	9b08      	ldr	r3, [sp, #32]
 800c854:	3101      	adds	r1, #1
 800c856:	e9dd 0206 	ldrd	r0, r2, [sp, #24]
 800c85a:	b209      	sxth	r1, r1
 800c85c:	4402      	add	r2, r0
 800c85e:	4403      	add	r3, r0
 800c860:	910c      	str	r1, [sp, #48]	; 0x30
 800c862:	b292      	uxth	r2, r2
 800c864:	b29b      	uxth	r3, r3
 800c866:	9207      	str	r2, [sp, #28]
 800c868:	9a02      	ldr	r2, [sp, #8]
 800c86a:	9308      	str	r3, [sp, #32]
 800c86c:	460b      	mov	r3, r1
 800c86e:	428a      	cmp	r2, r1
 800c870:	dc88      	bgt.n	800c784 <pool_func_mp_array_f32+0x244>
 800c872:	b013      	add	sp, #76	; 0x4c
 800c874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c878:	cf000000 	.word	0xcf000000
 800c87c:	4663      	mov	r3, ip
 800c87e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 800c882:	f8cd c020 	str.w	ip, [sp, #32]
 800c886:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800c88a:	9a01      	ldr	r2, [sp, #4]
 800c88c:	f04f 0800 	mov.w	r8, #0
 800c890:	f9bd c000 	ldrsh.w	ip, [sp]
 800c894:	fb02 f303 	mul.w	r3, r2, r3
 800c898:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800c89c:	930c      	str	r3, [sp, #48]	; 0x30
 800c89e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 800c8a2:	930d      	str	r3, [sp, #52]	; 0x34
 800c8a4:	9b04      	ldr	r3, [sp, #16]
 800c8a6:	9307      	str	r3, [sp, #28]
 800c8a8:	4643      	mov	r3, r8
 800c8aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c8ac:	f04f 0e00 	mov.w	lr, #0
 800c8b0:	fa0f f588 	sxth.w	r5, r8
 800c8b4:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	4676      	mov	r6, lr
 800c8bc:	fb07 f303 	mul.w	r3, r7, r3
 800c8c0:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8c2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800c8c4:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 800c878 <pool_func_mp_array_f32+0x338>
 800c8c8:	4564      	cmp	r4, ip
 800c8ca:	da15      	bge.n	800c8f8 <pool_func_mp_array_f32+0x3b8>
 800c8cc:	4285      	cmp	r5, r0
 800c8ce:	da0f      	bge.n	800c8f0 <pool_func_mp_array_f32+0x3b0>
 800c8d0:	fb0a 5304 	mla	r3, sl, r4, r5
 800c8d4:	462a      	mov	r2, r5
 800c8d6:	fb07 6303 	mla	r3, r7, r3, r6
 800c8da:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800c8de:	3201      	adds	r2, #1
 800c8e0:	ed93 7a00 	vldr	s14, [r3]
 800c8e4:	445b      	add	r3, fp
 800c8e6:	b211      	sxth	r1, r2
 800c8e8:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800c8ec:	4281      	cmp	r1, r0
 800c8ee:	dbf6      	blt.n	800c8de <pool_func_mp_array_f32+0x39e>
 800c8f0:	3401      	adds	r4, #1
 800c8f2:	b224      	sxth	r4, r4
 800c8f4:	4564      	cmp	r4, ip
 800c8f6:	dbe9      	blt.n	800c8cc <pool_func_mp_array_f32+0x38c>
 800c8f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8fa:	f10e 0e01 	add.w	lr, lr, #1
 800c8fe:	9a03      	ldr	r2, [sp, #12]
 800c900:	4433      	add	r3, r6
 800c902:	fa0f fe8e 	sxth.w	lr, lr
 800c906:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c90a:	45be      	cmp	lr, r7
 800c90c:	4676      	mov	r6, lr
 800c90e:	edc3 7a00 	vstr	s15, [r3]
 800c912:	dbd6      	blt.n	800c8c2 <pool_func_mp_array_f32+0x382>
 800c914:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c916:	9905      	ldr	r1, [sp, #20]
 800c918:	9b07      	ldr	r3, [sp, #28]
 800c91a:	3201      	adds	r2, #1
 800c91c:	4488      	add	r8, r1
 800c91e:	b212      	sxth	r2, r2
 800c920:	440b      	add	r3, r1
 800c922:	9901      	ldr	r1, [sp, #4]
 800c924:	fa1f f888 	uxth.w	r8, r8
 800c928:	b29b      	uxth	r3, r3
 800c92a:	920a      	str	r2, [sp, #40]	; 0x28
 800c92c:	4291      	cmp	r1, r2
 800c92e:	9307      	str	r3, [sp, #28]
 800c930:	4613      	mov	r3, r2
 800c932:	dcba      	bgt.n	800c8aa <pool_func_mp_array_f32+0x36a>
 800c934:	9a00      	ldr	r2, [sp, #0]
 800c936:	9806      	ldr	r0, [sp, #24]
 800c938:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c93a:	4402      	add	r2, r0
 800c93c:	9b08      	ldr	r3, [sp, #32]
 800c93e:	3101      	adds	r1, #1
 800c940:	b292      	uxth	r2, r2
 800c942:	4403      	add	r3, r0
 800c944:	b209      	sxth	r1, r1
 800c946:	9200      	str	r2, [sp, #0]
 800c948:	b29b      	uxth	r3, r3
 800c94a:	9a02      	ldr	r2, [sp, #8]
 800c94c:	9308      	str	r3, [sp, #32]
 800c94e:	460b      	mov	r3, r1
 800c950:	428a      	cmp	r2, r1
 800c952:	9109      	str	r1, [sp, #36]	; 0x24
 800c954:	dc99      	bgt.n	800c88a <pool_func_mp_array_f32+0x34a>
 800c956:	e688      	b.n	800c66a <pool_func_mp_array_f32+0x12a>

0800c958 <nl_func_relu_array_f32>:
 800c958:	b410      	push	{r4}
 800c95a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c95e:	698c      	ldr	r4, [r1, #24]
 800c960:	6981      	ldr	r1, [r0, #24]
 800c962:	4413      	add	r3, r2
 800c964:	68a0      	ldr	r0, [r4, #8]
 800c966:	6889      	ldr	r1, [r1, #8]
 800c968:	009a      	lsls	r2, r3, #2
 800c96a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800c96e:	4298      	cmp	r0, r3
 800c970:	d80f      	bhi.n	800c992 <nl_func_relu_array_f32+0x3a>
 800c972:	3204      	adds	r2, #4
 800c974:	3304      	adds	r3, #4
 800c976:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800c998 <nl_func_relu_array_f32+0x40>
 800c97a:	4411      	add	r1, r2
 800c97c:	461a      	mov	r2, r3
 800c97e:	ed73 7a01 	vldmdb	r3!, {s15}
 800c982:	3a08      	subs	r2, #8
 800c984:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800c988:	ed61 7a01 	vstmdb	r1!, {s15}
 800c98c:	68a0      	ldr	r0, [r4, #8]
 800c98e:	4290      	cmp	r0, r2
 800c990:	d9f4      	bls.n	800c97c <nl_func_relu_array_f32+0x24>
 800c992:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	00000000 	.word	0x00000000

0800c99c <forward_relu>:
 800c99c:	6982      	ldr	r2, [r0, #24]
 800c99e:	8813      	ldrh	r3, [r2, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d05b      	beq.n	800ca5c <forward_relu+0xc0>
 800c9a4:	6851      	ldr	r1, [r2, #4]
 800c9a6:	684a      	ldr	r2, [r1, #4]
 800c9a8:	b102      	cbz	r2, 800c9ac <forward_relu+0x10>
 800c9aa:	6812      	ldr	r2, [r2, #0]
 800c9ac:	2b01      	cmp	r3, #1
 800c9ae:	f000 8123 	beq.w	800cbf8 <forward_relu+0x25c>
 800c9b2:	b470      	push	{r4, r5, r6}
 800c9b4:	690b      	ldr	r3, [r1, #16]
 800c9b6:	b103      	cbz	r3, 800c9ba <forward_relu+0x1e>
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	69c6      	ldr	r6, [r0, #28]
 800c9bc:	2e00      	cmp	r6, #0
 800c9be:	f000 809e 	beq.w	800cafe <forward_relu+0x162>
 800c9c2:	6871      	ldr	r1, [r6, #4]
 800c9c4:	6998      	ldr	r0, [r3, #24]
 800c9c6:	2901      	cmp	r1, #1
 800c9c8:	f000 80c3 	beq.w	800cb52 <forward_relu+0x1b6>
 800c9cc:	6893      	ldr	r3, [r2, #8]
 800c9ce:	6991      	ldr	r1, [r2, #24]
 800c9d0:	0a1b      	lsrs	r3, r3, #8
 800c9d2:	6880      	ldr	r0, [r0, #8]
 800c9d4:	688d      	ldr	r5, [r1, #8]
 800c9d6:	f000 80f2 	beq.w	800cbbe <forward_relu+0x222>
 800c9da:	68d4      	ldr	r4, [r2, #12]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c9e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9e6:	42a3      	cmp	r3, r4
 800c9e8:	fb01 f202 	mul.w	r2, r1, r2
 800c9ec:	d1f9      	bne.n	800c9e2 <forward_relu+0x46>
 800c9ee:	68b3      	ldr	r3, [r6, #8]
 800c9f0:	ed93 7a02 	vldr	s14, [r3, #8]
 800c9f4:	edd3 6a00 	vldr	s13, [r3]
 800c9f8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800c9fc:	ed93 6a01 	vldr	s12, [r3, #4]
 800ca00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca04:	d42c      	bmi.n	800ca60 <forward_relu+0xc4>
 800ca06:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ca0a:	4413      	add	r3, r2
 800ca0c:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800ca10:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800ca14:	4295      	cmp	r5, r2
 800ca16:	d81f      	bhi.n	800ca58 <forward_relu+0xbc>
 800ca18:	3204      	adds	r2, #4
 800ca1a:	1d01      	adds	r1, r0, #4
 800ca1c:	e00d      	b.n	800ca3a <forward_relu+0x9e>
 800ca1e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800ca22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca26:	db03      	blt.n	800ca30 <forward_relu+0x94>
 800ca28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ca2c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ca30:	3b08      	subs	r3, #8
 800ca32:	ed61 7a01 	vstmdb	r1!, {s15}
 800ca36:	429d      	cmp	r5, r3
 800ca38:	d80e      	bhi.n	800ca58 <forward_relu+0xbc>
 800ca3a:	4613      	mov	r3, r2
 800ca3c:	ed72 7a01 	vldmdb	r2!, {s15}
 800ca40:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca48:	d9e9      	bls.n	800ca1e <forward_relu+0x82>
 800ca4a:	3b08      	subs	r3, #8
 800ca4c:	eef0 7a47 	vmov.f32	s15, s14
 800ca50:	429d      	cmp	r5, r3
 800ca52:	ed61 7a01 	vstmdb	r1!, {s15}
 800ca56:	d9f0      	bls.n	800ca3a <forward_relu+0x9e>
 800ca58:	bc70      	pop	{r4, r5, r6}
 800ca5a:	4770      	bx	lr
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	deff      	udf	#255	; 0xff
 800ca60:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ca64:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 800ca68:	4411      	add	r1, r2
 800ca6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca6e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800ca72:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ca76:	d11f      	bne.n	800cab8 <forward_relu+0x11c>
 800ca78:	429d      	cmp	r5, r3
 800ca7a:	d8ed      	bhi.n	800ca58 <forward_relu+0xbc>
 800ca7c:	1b5d      	subs	r5, r3, r5
 800ca7e:	1d1a      	adds	r2, r3, #4
 800ca80:	1d01      	adds	r1, r0, #4
 800ca82:	2000      	movs	r0, #0
 800ca84:	f025 0503 	bic.w	r5, r5, #3
 800ca88:	1b5b      	subs	r3, r3, r5
 800ca8a:	ed72 7a01 	vldmdb	r2!, {s15}
 800ca8e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800ca92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca96:	dc0a      	bgt.n	800caae <forward_relu+0x112>
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	f841 0d04 	str.w	r0, [r1, #-4]!
 800ca9e:	d0db      	beq.n	800ca58 <forward_relu+0xbc>
 800caa0:	ed72 7a01 	vldmdb	r2!, {s15}
 800caa4:	eef4 7ae6 	vcmpe.f32	s15, s13
 800caa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caac:	ddf4      	ble.n	800ca98 <forward_relu+0xfc>
 800caae:	429a      	cmp	r2, r3
 800cab0:	ed61 7a01 	vstmdb	r1!, {s15}
 800cab4:	d1e9      	bne.n	800ca8a <forward_relu+0xee>
 800cab6:	e7cf      	b.n	800ca58 <forward_relu+0xbc>
 800cab8:	429d      	cmp	r5, r3
 800caba:	d8cd      	bhi.n	800ca58 <forward_relu+0xbc>
 800cabc:	1b5d      	subs	r5, r3, r5
 800cabe:	1d1a      	adds	r2, r3, #4
 800cac0:	1d01      	adds	r1, r0, #4
 800cac2:	f025 0503 	bic.w	r5, r5, #3
 800cac6:	1b5b      	subs	r3, r3, r5
 800cac8:	ed72 7a01 	vldmdb	r2!, {s15}
 800cacc:	eef4 6ae7 	vcmpe.f32	s13, s15
 800cad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad4:	db0e      	blt.n	800caf4 <forward_relu+0x158>
 800cad6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800cada:	4293      	cmp	r3, r2
 800cadc:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cae0:	ed61 7a01 	vstmdb	r1!, {s15}
 800cae4:	d0b8      	beq.n	800ca58 <forward_relu+0xbc>
 800cae6:	ed72 7a01 	vldmdb	r2!, {s15}
 800caea:	eef4 6ae7 	vcmpe.f32	s13, s15
 800caee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf2:	daf0      	bge.n	800cad6 <forward_relu+0x13a>
 800caf4:	4293      	cmp	r3, r2
 800caf6:	ed61 7a01 	vstmdb	r1!, {s15}
 800cafa:	d1e5      	bne.n	800cac8 <forward_relu+0x12c>
 800cafc:	e7ac      	b.n	800ca58 <forward_relu+0xbc>
 800cafe:	6999      	ldr	r1, [r3, #24]
 800cb00:	6893      	ldr	r3, [r2, #8]
 800cb02:	6990      	ldr	r0, [r2, #24]
 800cb04:	0a1b      	lsrs	r3, r3, #8
 800cb06:	6889      	ldr	r1, [r1, #8]
 800cb08:	6884      	ldr	r4, [r0, #8]
 800cb0a:	d06e      	beq.n	800cbea <forward_relu+0x24e>
 800cb0c:	68d5      	ldr	r5, [r2, #12]
 800cb0e:	2201      	movs	r2, #1
 800cb10:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cb14:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800cb18:	429d      	cmp	r5, r3
 800cb1a:	fb00 f202 	mul.w	r2, r0, r2
 800cb1e:	d1f9      	bne.n	800cb14 <forward_relu+0x178>
 800cb20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800cb24:	4413      	add	r3, r2
 800cb26:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800cb2a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800cb2e:	4294      	cmp	r4, r2
 800cb30:	d892      	bhi.n	800ca58 <forward_relu+0xbc>
 800cb32:	3204      	adds	r2, #4
 800cb34:	3104      	adds	r1, #4
 800cb36:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800cc00 <forward_relu+0x264>
 800cb3a:	4613      	mov	r3, r2
 800cb3c:	ed72 7a01 	vldmdb	r2!, {s15}
 800cb40:	3b08      	subs	r3, #8
 800cb42:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800cb46:	ed61 7a01 	vstmdb	r1!, {s15}
 800cb4a:	429c      	cmp	r4, r3
 800cb4c:	d9f5      	bls.n	800cb3a <forward_relu+0x19e>
 800cb4e:	bc70      	pop	{r4, r5, r6}
 800cb50:	4770      	bx	lr
 800cb52:	6993      	ldr	r3, [r2, #24]
 800cb54:	6880      	ldr	r0, [r0, #8]
 800cb56:	689c      	ldr	r4, [r3, #8]
 800cb58:	6893      	ldr	r3, [r2, #8]
 800cb5a:	0a1b      	lsrs	r3, r3, #8
 800cb5c:	d047      	beq.n	800cbee <forward_relu+0x252>
 800cb5e:	68d5      	ldr	r5, [r2, #12]
 800cb60:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cb64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb68:	42ab      	cmp	r3, r5
 800cb6a:	fb02 f101 	mul.w	r1, r2, r1
 800cb6e:	d1f9      	bne.n	800cb64 <forward_relu+0x1c8>
 800cb70:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800cb74:	68b3      	ldr	r3, [r6, #8]
 800cb76:	440a      	add	r2, r1
 800cb78:	ed93 7a00 	vldr	s14, [r3]
 800cb7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb80:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800cb84:	429c      	cmp	r4, r3
 800cb86:	f63f af67 	bhi.w	800ca58 <forward_relu+0xbc>
 800cb8a:	1d02      	adds	r2, r0, #4
 800cb8c:	3304      	adds	r3, #4
 800cb8e:	2000      	movs	r0, #0
 800cb90:	ed53 7a01 	vldr	s15, [r3, #-4]
 800cb94:	1f19      	subs	r1, r3, #4
 800cb96:	3b08      	subs	r3, #8
 800cb98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cb9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba0:	d406      	bmi.n	800cbb0 <forward_relu+0x214>
 800cba2:	429c      	cmp	r4, r3
 800cba4:	f842 0d04 	str.w	r0, [r2, #-4]!
 800cba8:	f63f af56 	bhi.w	800ca58 <forward_relu+0xbc>
 800cbac:	460b      	mov	r3, r1
 800cbae:	e7ef      	b.n	800cb90 <forward_relu+0x1f4>
 800cbb0:	429c      	cmp	r4, r3
 800cbb2:	ed62 7a01 	vstmdb	r2!, {s15}
 800cbb6:	f63f af4f 	bhi.w	800ca58 <forward_relu+0xbc>
 800cbba:	460b      	mov	r3, r1
 800cbbc:	e7e8      	b.n	800cb90 <forward_relu+0x1f4>
 800cbbe:	68b3      	ldr	r3, [r6, #8]
 800cbc0:	ed93 7a02 	vldr	s14, [r3, #8]
 800cbc4:	edd3 6a00 	vldr	s13, [r3]
 800cbc8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800cbcc:	ed93 6a01 	vldr	s12, [r3, #4]
 800cbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd4:	d401      	bmi.n	800cbda <forward_relu+0x23e>
 800cbd6:	462a      	mov	r2, r5
 800cbd8:	e71e      	b.n	800ca18 <forward_relu+0x7c>
 800cbda:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cbde:	462b      	mov	r3, r5
 800cbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe4:	f47f af6a 	bne.w	800cabc <forward_relu+0x120>
 800cbe8:	e748      	b.n	800ca7c <forward_relu+0xe0>
 800cbea:	4622      	mov	r2, r4
 800cbec:	e7a1      	b.n	800cb32 <forward_relu+0x196>
 800cbee:	68b2      	ldr	r2, [r6, #8]
 800cbf0:	4623      	mov	r3, r4
 800cbf2:	ed92 7a00 	vldr	s14, [r2]
 800cbf6:	e7c8      	b.n	800cb8a <forward_relu+0x1ee>
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	deff      	udf	#255	; 0xff
 800cbfe:	bf00      	nop
 800cc00:	00000000 	.word	0x00000000

0800cc04 <forward_sm>:
 800cc04:	6982      	ldr	r2, [r0, #24]
 800cc06:	8813      	ldrh	r3, [r2, #0]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d078      	beq.n	800ccfe <forward_sm+0xfa>
 800cc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc10:	ed2d 8b04 	vpush	{d8-d9}
 800cc14:	6852      	ldr	r2, [r2, #4]
 800cc16:	b085      	sub	sp, #20
 800cc18:	6854      	ldr	r4, [r2, #4]
 800cc1a:	b104      	cbz	r4, 800cc1e <forward_sm+0x1a>
 800cc1c:	6824      	ldr	r4, [r4, #0]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d072      	beq.n	800cd08 <forward_sm+0x104>
 800cc22:	6913      	ldr	r3, [r2, #16]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d072      	beq.n	800cd0e <forward_sm+0x10a>
 800cc28:	681e      	ldr	r6, [r3, #0]
 800cc2a:	68a3      	ldr	r3, [r4, #8]
 800cc2c:	68e0      	ldr	r0, [r4, #12]
 800cc2e:	68f2      	ldr	r2, [r6, #12]
 800cc30:	0a1b      	lsrs	r3, r3, #8
 800cc32:	6845      	ldr	r5, [r0, #4]
 800cc34:	6857      	ldr	r7, [r2, #4]
 800cc36:	d064      	beq.n	800cd02 <forward_sm+0xfe>
 800cc38:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc42:	4298      	cmp	r0, r3
 800cc44:	fb01 f202 	mul.w	r2, r1, r2
 800cc48:	d1f9      	bne.n	800cc3e <forward_sm+0x3a>
 800cc4a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800cc4e:	69a2      	ldr	r2, [r4, #24]
 800cc50:	69b3      	ldr	r3, [r6, #24]
 800cc52:	6892      	ldr	r2, [r2, #8]
 800cc54:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800cc58:	eb02 0309 	add.w	r3, r2, r9
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	d248      	bcs.n	800ccf4 <forward_sm+0xf0>
 800cc62:	00bb      	lsls	r3, r7, #2
 800cc64:	2d01      	cmp	r5, #1
 800cc66:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800cc6a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800cc6e:	9303      	str	r3, [sp, #12]
 800cc70:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800cc74:	463e      	mov	r6, r7
 800cc76:	ed92 8a00 	vldr	s16, [r2]
 800cc7a:	9302      	str	r3, [sp, #8]
 800cc7c:	d937      	bls.n	800ccee <forward_sm+0xea>
 800cc7e:	1d13      	adds	r3, r2, #4
 800cc80:	ecf3 7a01 	vldmia	r3!, {s15}
 800cc84:	429e      	cmp	r6, r3
 800cc86:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 800cc8a:	d1f9      	bne.n	800cc80 <forward_sm+0x7c>
 800cc8c:	4692      	mov	sl, r2
 800cc8e:	46c3      	mov	fp, r8
 800cc90:	46c1      	mov	r9, r8
 800cc92:	eddf 8a20 	vldr	s17, [pc, #128]	; 800cd14 <forward_sm+0x110>
 800cc96:	2400      	movs	r4, #0
 800cc98:	ecba 0a01 	vldmia	sl!, {s0}
 800cc9c:	3401      	adds	r4, #1
 800cc9e:	ee30 0a48 	vsub.f32	s0, s0, s16
 800cca2:	f002 fee5 	bl	800fa70 <expf>
 800cca6:	42a5      	cmp	r5, r4
 800cca8:	ee78 8a80 	vadd.f32	s17, s17, s0
 800ccac:	eca9 0a01 	vstmia	r9!, {s0}
 800ccb0:	d8f2      	bhi.n	800cc98 <forward_sm+0x94>
 800ccb2:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ccb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccba:	d00b      	beq.n	800ccd4 <forward_sm+0xd0>
 800ccbc:	ee89 7a28 	vdiv.f32	s14, s18, s17
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	eddb 7a00 	vldr	s15, [fp]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	429d      	cmp	r5, r3
 800ccca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccce:	eceb 7a01 	vstmia	fp!, {s15}
 800ccd2:	d8f6      	bhi.n	800ccc2 <forward_sm+0xbe>
 800ccd4:	9b03      	ldr	r3, [sp, #12]
 800ccd6:	463a      	mov	r2, r7
 800ccd8:	9901      	ldr	r1, [sp, #4]
 800ccda:	4498      	add	r8, r3
 800ccdc:	9b02      	ldr	r3, [sp, #8]
 800ccde:	42b9      	cmp	r1, r7
 800cce0:	441e      	add	r6, r3
 800cce2:	d907      	bls.n	800ccf4 <forward_sm+0xf0>
 800cce4:	2d01      	cmp	r5, #1
 800cce6:	441f      	add	r7, r3
 800cce8:	ed92 8a00 	vldr	s16, [r2]
 800ccec:	d8c7      	bhi.n	800cc7e <forward_sm+0x7a>
 800ccee:	2d00      	cmp	r5, #0
 800ccf0:	d0f0      	beq.n	800ccd4 <forward_sm+0xd0>
 800ccf2:	e7cb      	b.n	800cc8c <forward_sm+0x88>
 800ccf4:	b005      	add	sp, #20
 800ccf6:	ecbd 8b04 	vpop	{d8-d9}
 800ccfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	deff      	udf	#255	; 0xff
 800cd02:	f04f 0904 	mov.w	r9, #4
 800cd06:	e7a2      	b.n	800cc4e <forward_sm+0x4a>
 800cd08:	2300      	movs	r3, #0
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	deff      	udf	#255	; 0xff
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	deff      	udf	#255	; 0xff
 800cd12:	bf00      	nop
 800cd14:	00000000 	.word	0x00000000

0800cd18 <ai_check_custom_types>:
 800cd18:	b082      	sub	sp, #8
 800cd1a:	4b12      	ldr	r3, [pc, #72]	; (800cd64 <ai_check_custom_types+0x4c>)
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	b118      	cbz	r0, 800cd28 <ai_check_custom_types+0x10>
 800cd20:	7803      	ldrb	r3, [r0, #0]
 800cd22:	2b03      	cmp	r3, #3
 800cd24:	d002      	beq.n	800cd2c <ai_check_custom_types+0x14>
 800cd26:	2000      	movs	r0, #0
 800cd28:	b002      	add	sp, #8
 800cd2a:	4770      	bx	lr
 800cd2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d004      	beq.n	800cd3e <ai_check_custom_types+0x26>
 800cd34:	2001      	movs	r0, #1
 800cd36:	f080 0001 	eor.w	r0, r0, #1
 800cd3a:	b002      	add	sp, #8
 800cd3c:	4770      	bx	lr
 800cd3e:	7842      	ldrb	r2, [r0, #1]
 800cd40:	3001      	adds	r0, #1
 800cd42:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d1f4      	bne.n	800cd34 <ai_check_custom_types+0x1c>
 800cd4a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800cd4e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d1ee      	bne.n	800cd34 <ai_check_custom_types+0x1c>
 800cd56:	7842      	ldrb	r2, [r0, #1]
 800cd58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d1e9      	bne.n	800cd34 <ai_check_custom_types+0x1c>
 800cd60:	2000      	movs	r0, #0
 800cd62:	e7e8      	b.n	800cd36 <ai_check_custom_types+0x1e>
 800cd64:	84048403 	.word	0x84048403

0800cd68 <ai_layers_init_all>:
 800cd68:	2100      	movs	r1, #0
 800cd6a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd6c:	b13b      	cbz	r3, 800cd7e <ai_layers_init_all+0x16>
 800cd6e:	691a      	ldr	r2, [r3, #16]
 800cd70:	3101      	adds	r1, #1
 800cd72:	60d8      	str	r0, [r3, #12]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	4613      	mov	r3, r2
 800cd78:	d001      	beq.n	800cd7e <ai_layers_init_all+0x16>
 800cd7a:	2a00      	cmp	r2, #0
 800cd7c:	d1f6      	bne.n	800cd6c <ai_layers_init_all+0x4>
 800cd7e:	4608      	mov	r0, r1
 800cd80:	4770      	bx	lr
 800cd82:	bf00      	nop

0800cd84 <ai_layers_post_init_all>:
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	2500      	movs	r5, #0
 800cd88:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800cd8a:	b16c      	cbz	r4, 800cda8 <ai_layers_post_init_all+0x24>
 800cd8c:	6863      	ldr	r3, [r4, #4]
 800cd8e:	07db      	lsls	r3, r3, #31
 800cd90:	d504      	bpl.n	800cd9c <ai_layers_post_init_all+0x18>
 800cd92:	6a23      	ldr	r3, [r4, #32]
 800cd94:	4620      	mov	r0, r4
 800cd96:	b10b      	cbz	r3, 800cd9c <ai_layers_post_init_all+0x18>
 800cd98:	3501      	adds	r5, #1
 800cd9a:	4798      	blx	r3
 800cd9c:	6923      	ldr	r3, [r4, #16]
 800cd9e:	42a3      	cmp	r3, r4
 800cda0:	461c      	mov	r4, r3
 800cda2:	d001      	beq.n	800cda8 <ai_layers_post_init_all+0x24>
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d1f0      	bne.n	800cd8a <ai_layers_post_init_all+0x6>
 800cda8:	4628      	mov	r0, r5
 800cdaa:	bd38      	pop	{r3, r4, r5, pc}

0800cdac <ai_layers_forward_all>:
 800cdac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdb0:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 800cdb4:	4604      	mov	r4, r0
 800cdb6:	f1b8 0f00 	cmp.w	r8, #0
 800cdba:	d02a      	beq.n	800ce12 <ai_layers_forward_all+0x66>
 800cdbc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800cdbe:	6381      	str	r1, [r0, #56]	; 0x38
 800cdc0:	b319      	cbz	r1, 800ce0a <ai_layers_forward_all+0x5e>
 800cdc2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800cdc4:	2001      	movs	r0, #1
 800cdc6:	47c0      	blx	r8
 800cdc8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800cdca:	b1f6      	cbz	r6, 800ce0a <ai_layers_forward_all+0x5e>
 800cdcc:	2700      	movs	r7, #0
 800cdce:	4631      	mov	r1, r6
 800cdd0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cdd2:	2002      	movs	r0, #2
 800cdd4:	47c0      	blx	r8
 800cdd6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800cdd8:	4628      	mov	r0, r5
 800cdda:	696b      	ldr	r3, [r5, #20]
 800cddc:	4798      	blx	r3
 800cdde:	692e      	ldr	r6, [r5, #16]
 800cde0:	2003      	movs	r0, #3
 800cde2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cde4:	42b5      	cmp	r5, r6
 800cde6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cde8:	d007      	beq.n	800cdfa <ai_layers_forward_all+0x4e>
 800cdea:	47c0      	blx	r8
 800cdec:	3701      	adds	r7, #1
 800cdee:	63a6      	str	r6, [r4, #56]	; 0x38
 800cdf0:	2e00      	cmp	r6, #0
 800cdf2:	d1ec      	bne.n	800cdce <ai_layers_forward_all+0x22>
 800cdf4:	4638      	mov	r0, r7
 800cdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdfa:	2003      	movs	r0, #3
 800cdfc:	3701      	adds	r7, #1
 800cdfe:	47c0      	blx	r8
 800ce00:	2300      	movs	r3, #0
 800ce02:	4638      	mov	r0, r7
 800ce04:	63a3      	str	r3, [r4, #56]	; 0x38
 800ce06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce0a:	2700      	movs	r7, #0
 800ce0c:	4638      	mov	r0, r7
 800ce0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce12:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800ce14:	6385      	str	r5, [r0, #56]	; 0x38
 800ce16:	2d00      	cmp	r5, #0
 800ce18:	d0f7      	beq.n	800ce0a <ai_layers_forward_all+0x5e>
 800ce1a:	4647      	mov	r7, r8
 800ce1c:	696b      	ldr	r3, [r5, #20]
 800ce1e:	4628      	mov	r0, r5
 800ce20:	4798      	blx	r3
 800ce22:	462b      	mov	r3, r5
 800ce24:	692d      	ldr	r5, [r5, #16]
 800ce26:	429d      	cmp	r5, r3
 800ce28:	d004      	beq.n	800ce34 <ai_layers_forward_all+0x88>
 800ce2a:	3701      	adds	r7, #1
 800ce2c:	63a5      	str	r5, [r4, #56]	; 0x38
 800ce2e:	2d00      	cmp	r5, #0
 800ce30:	d1f4      	bne.n	800ce1c <ai_layers_forward_all+0x70>
 800ce32:	e7df      	b.n	800cdf4 <ai_layers_forward_all+0x48>
 800ce34:	2300      	movs	r3, #0
 800ce36:	3701      	adds	r7, #1
 800ce38:	63a3      	str	r3, [r4, #56]	; 0x38
 800ce3a:	e7db      	b.n	800cdf4 <ai_layers_forward_all+0x48>

0800ce3c <ai_layers_destroy_all>:
 800ce3c:	b538      	push	{r3, r4, r5, lr}
 800ce3e:	2500      	movs	r5, #0
 800ce40:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800ce42:	b16c      	cbz	r4, 800ce60 <ai_layers_destroy_all+0x24>
 800ce44:	6863      	ldr	r3, [r4, #4]
 800ce46:	075b      	lsls	r3, r3, #29
 800ce48:	d504      	bpl.n	800ce54 <ai_layers_destroy_all+0x18>
 800ce4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	b10b      	cbz	r3, 800ce54 <ai_layers_destroy_all+0x18>
 800ce50:	3501      	adds	r5, #1
 800ce52:	4798      	blx	r3
 800ce54:	6923      	ldr	r3, [r4, #16]
 800ce56:	42a3      	cmp	r3, r4
 800ce58:	461c      	mov	r4, r3
 800ce5a:	d001      	beq.n	800ce60 <ai_layers_destroy_all+0x24>
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d1f0      	bne.n	800ce42 <ai_layers_destroy_all+0x6>
 800ce60:	4628      	mov	r0, r5
 800ce62:	bd38      	pop	{r3, r4, r5, pc}

0800ce64 <lite_dense_if32of32wf32>:
 800ce64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce68:	ed2d 8b0c 	vpush	{d8-d13}
 800ce6c:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 800ce70:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 800ce74:	4287      	cmp	r7, r0
 800ce76:	f240 8105 	bls.w	800d084 <lite_dense_if32of32wf32+0x220>
 800ce7a:	f1a6 0810 	sub.w	r8, r6, #16
 800ce7e:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800ce82:	4605      	mov	r5, r0
 800ce84:	f006 0b0f 	and.w	fp, r6, #15
 800ce88:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800ce8c:	f108 0801 	add.w	r8, r8, #1
 800ce90:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 800ce94:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800ce98:	2e0f      	cmp	r6, #15
 800ce9a:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800d0b0 <lite_dense_if32of32wf32+0x24c>
 800ce9e:	f240 8102 	bls.w	800d0a6 <lite_dense_if32of32wf32+0x242>
 800cea2:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800cea6:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800ceaa:	46b6      	mov	lr, r6
 800ceac:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 800ceb0:	f1ae 0e10 	sub.w	lr, lr, #16
 800ceb4:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800ceb8:	3440      	adds	r4, #64	; 0x40
 800ceba:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 800cebe:	f1be 0f0f 	cmp.w	lr, #15
 800cec2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cec6:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 800ceca:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800cece:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800ced2:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 800ced6:	eee4 7a85 	vfma.f32	s15, s9, s10
 800ceda:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 800cede:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 800cee2:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 800cee6:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 800ceea:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 800ceee:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 800cef2:	eee5 7a86 	vfma.f32	s15, s11, s12
 800cef6:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 800cefa:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 800cefe:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 800cf02:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 800cf06:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 800cf0a:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 800cf0e:	eeed 7a26 	vfma.f32	s15, s26, s13
 800cf12:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 800cf16:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 800cf1a:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 800cf1e:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 800cf22:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 800cf26:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800cf2a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800cf2e:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800cf32:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800cf36:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800cf3a:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800cf3e:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 800cf42:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800cf46:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800cf4a:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800cf4e:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 800cf52:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800cf56:	eee9 7a89 	vfma.f32	s15, s19, s18
 800cf5a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800cf5e:	eee0 7a20 	vfma.f32	s15, s0, s1
 800cf62:	eee1 7a21 	vfma.f32	s15, s2, s3
 800cf66:	eee2 7a22 	vfma.f32	s15, s4, s5
 800cf6a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800cf6e:	eee4 7a24 	vfma.f32	s15, s8, s9
 800cf72:	eee5 7a25 	vfma.f32	s15, s10, s11
 800cf76:	eee6 7a26 	vfma.f32	s15, s12, s13
 800cf7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf7e:	d895      	bhi.n	800ceac <lite_dense_if32of32wf32+0x48>
 800cf80:	eb02 0e0a 	add.w	lr, r2, sl
 800cf84:	465c      	mov	r4, fp
 800cf86:	46c4      	mov	ip, r8
 800cf88:	2c00      	cmp	r4, #0
 800cf8a:	d075      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800cf8c:	eddc 6a00 	vldr	s13, [ip]
 800cf90:	2c01      	cmp	r4, #1
 800cf92:	edde 7a00 	vldr	s15, [lr]
 800cf96:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cf9a:	d06d      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800cf9c:	eddc 6a01 	vldr	s13, [ip, #4]
 800cfa0:	2c02      	cmp	r4, #2
 800cfa2:	edde 7a01 	vldr	s15, [lr, #4]
 800cfa6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cfaa:	d065      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800cfac:	eddc 6a02 	vldr	s13, [ip, #8]
 800cfb0:	2c03      	cmp	r4, #3
 800cfb2:	edde 7a02 	vldr	s15, [lr, #8]
 800cfb6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cfba:	d05d      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800cfbc:	eddc 6a03 	vldr	s13, [ip, #12]
 800cfc0:	2c04      	cmp	r4, #4
 800cfc2:	edde 7a03 	vldr	s15, [lr, #12]
 800cfc6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cfca:	d055      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800cfcc:	eddc 6a04 	vldr	s13, [ip, #16]
 800cfd0:	2c05      	cmp	r4, #5
 800cfd2:	edde 7a04 	vldr	s15, [lr, #16]
 800cfd6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cfda:	d04d      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800cfdc:	eddc 6a05 	vldr	s13, [ip, #20]
 800cfe0:	2c06      	cmp	r4, #6
 800cfe2:	edde 7a05 	vldr	s15, [lr, #20]
 800cfe6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cfea:	d045      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800cfec:	eddc 6a06 	vldr	s13, [ip, #24]
 800cff0:	2c07      	cmp	r4, #7
 800cff2:	edde 7a06 	vldr	s15, [lr, #24]
 800cff6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cffa:	d03d      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800cffc:	eddc 6a07 	vldr	s13, [ip, #28]
 800d000:	2c08      	cmp	r4, #8
 800d002:	edde 7a07 	vldr	s15, [lr, #28]
 800d006:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d00a:	d035      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800d00c:	eddc 6a08 	vldr	s13, [ip, #32]
 800d010:	2c09      	cmp	r4, #9
 800d012:	edde 7a08 	vldr	s15, [lr, #32]
 800d016:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d01a:	d02d      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800d01c:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800d020:	2c0a      	cmp	r4, #10
 800d022:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800d026:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d02a:	d025      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800d02c:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 800d030:	2c0b      	cmp	r4, #11
 800d032:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800d036:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d03a:	d01d      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800d03c:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 800d040:	2c0c      	cmp	r4, #12
 800d042:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800d046:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d04a:	d015      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800d04c:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 800d050:	3c0d      	subs	r4, #13
 800d052:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800d056:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d05a:	d00d      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800d05c:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 800d060:	2c01      	cmp	r4, #1
 800d062:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800d066:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d06a:	d005      	beq.n	800d078 <lite_dense_if32of32wf32+0x214>
 800d06c:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 800d070:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 800d074:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800d078:	eca5 7a01 	vstmia	r5!, {s14}
 800d07c:	42af      	cmp	r7, r5
 800d07e:	444a      	add	r2, r9
 800d080:	f63f af0a 	bhi.w	800ce98 <lite_dense_if32of32wf32+0x34>
 800d084:	b15b      	cbz	r3, 800d09e <lite_dense_if32of32wf32+0x23a>
 800d086:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d088:	b14a      	cbz	r2, 800d09e <lite_dense_if32of32wf32+0x23a>
 800d08a:	edd0 7a00 	vldr	s15, [r0]
 800d08e:	ecb3 7a01 	vldmia	r3!, {s14}
 800d092:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d096:	ece0 7a01 	vstmia	r0!, {s15}
 800d09a:	4287      	cmp	r7, r0
 800d09c:	d1f5      	bne.n	800d08a <lite_dense_if32of32wf32+0x226>
 800d09e:	ecbd 8b0c 	vpop	{d8-d13}
 800d0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0a6:	4634      	mov	r4, r6
 800d0a8:	4696      	mov	lr, r2
 800d0aa:	468c      	mov	ip, r1
 800d0ac:	e76c      	b.n	800cf88 <lite_dense_if32of32wf32+0x124>
 800d0ae:	bf00      	nop
 800d0b0:	00000000 	.word	0x00000000

0800d0b4 <__errno>:
 800d0b4:	4b01      	ldr	r3, [pc, #4]	; (800d0bc <__errno+0x8>)
 800d0b6:	6818      	ldr	r0, [r3, #0]
 800d0b8:	4770      	bx	lr
 800d0ba:	bf00      	nop
 800d0bc:	200012c4 	.word	0x200012c4

0800d0c0 <__libc_init_array>:
 800d0c0:	b570      	push	{r4, r5, r6, lr}
 800d0c2:	4d0d      	ldr	r5, [pc, #52]	; (800d0f8 <__libc_init_array+0x38>)
 800d0c4:	4c0d      	ldr	r4, [pc, #52]	; (800d0fc <__libc_init_array+0x3c>)
 800d0c6:	1b64      	subs	r4, r4, r5
 800d0c8:	10a4      	asrs	r4, r4, #2
 800d0ca:	2600      	movs	r6, #0
 800d0cc:	42a6      	cmp	r6, r4
 800d0ce:	d109      	bne.n	800d0e4 <__libc_init_array+0x24>
 800d0d0:	4d0b      	ldr	r5, [pc, #44]	; (800d100 <__libc_init_array+0x40>)
 800d0d2:	4c0c      	ldr	r4, [pc, #48]	; (800d104 <__libc_init_array+0x44>)
 800d0d4:	f002 fd7a 	bl	800fbcc <_init>
 800d0d8:	1b64      	subs	r4, r4, r5
 800d0da:	10a4      	asrs	r4, r4, #2
 800d0dc:	2600      	movs	r6, #0
 800d0de:	42a6      	cmp	r6, r4
 800d0e0:	d105      	bne.n	800d0ee <__libc_init_array+0x2e>
 800d0e2:	bd70      	pop	{r4, r5, r6, pc}
 800d0e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0e8:	4798      	blx	r3
 800d0ea:	3601      	adds	r6, #1
 800d0ec:	e7ee      	b.n	800d0cc <__libc_init_array+0xc>
 800d0ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0f2:	4798      	blx	r3
 800d0f4:	3601      	adds	r6, #1
 800d0f6:	e7f2      	b.n	800d0de <__libc_init_array+0x1e>
 800d0f8:	0806fd30 	.word	0x0806fd30
 800d0fc:	0806fd30 	.word	0x0806fd30
 800d100:	0806fd30 	.word	0x0806fd30
 800d104:	0806fd34 	.word	0x0806fd34

0800d108 <malloc>:
 800d108:	4b02      	ldr	r3, [pc, #8]	; (800d114 <malloc+0xc>)
 800d10a:	4601      	mov	r1, r0
 800d10c:	6818      	ldr	r0, [r3, #0]
 800d10e:	f000 b885 	b.w	800d21c <_malloc_r>
 800d112:	bf00      	nop
 800d114:	200012c4 	.word	0x200012c4

0800d118 <memcpy>:
 800d118:	440a      	add	r2, r1
 800d11a:	4291      	cmp	r1, r2
 800d11c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d120:	d100      	bne.n	800d124 <memcpy+0xc>
 800d122:	4770      	bx	lr
 800d124:	b510      	push	{r4, lr}
 800d126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d12a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d12e:	4291      	cmp	r1, r2
 800d130:	d1f9      	bne.n	800d126 <memcpy+0xe>
 800d132:	bd10      	pop	{r4, pc}

0800d134 <memset>:
 800d134:	4402      	add	r2, r0
 800d136:	4603      	mov	r3, r0
 800d138:	4293      	cmp	r3, r2
 800d13a:	d100      	bne.n	800d13e <memset+0xa>
 800d13c:	4770      	bx	lr
 800d13e:	f803 1b01 	strb.w	r1, [r3], #1
 800d142:	e7f9      	b.n	800d138 <memset+0x4>

0800d144 <_free_r>:
 800d144:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d146:	2900      	cmp	r1, #0
 800d148:	d044      	beq.n	800d1d4 <_free_r+0x90>
 800d14a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d14e:	9001      	str	r0, [sp, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	f1a1 0404 	sub.w	r4, r1, #4
 800d156:	bfb8      	it	lt
 800d158:	18e4      	addlt	r4, r4, r3
 800d15a:	f001 fb3b 	bl	800e7d4 <__malloc_lock>
 800d15e:	4a1e      	ldr	r2, [pc, #120]	; (800d1d8 <_free_r+0x94>)
 800d160:	9801      	ldr	r0, [sp, #4]
 800d162:	6813      	ldr	r3, [r2, #0]
 800d164:	b933      	cbnz	r3, 800d174 <_free_r+0x30>
 800d166:	6063      	str	r3, [r4, #4]
 800d168:	6014      	str	r4, [r2, #0]
 800d16a:	b003      	add	sp, #12
 800d16c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d170:	f001 bb36 	b.w	800e7e0 <__malloc_unlock>
 800d174:	42a3      	cmp	r3, r4
 800d176:	d908      	bls.n	800d18a <_free_r+0x46>
 800d178:	6825      	ldr	r5, [r4, #0]
 800d17a:	1961      	adds	r1, r4, r5
 800d17c:	428b      	cmp	r3, r1
 800d17e:	bf01      	itttt	eq
 800d180:	6819      	ldreq	r1, [r3, #0]
 800d182:	685b      	ldreq	r3, [r3, #4]
 800d184:	1949      	addeq	r1, r1, r5
 800d186:	6021      	streq	r1, [r4, #0]
 800d188:	e7ed      	b.n	800d166 <_free_r+0x22>
 800d18a:	461a      	mov	r2, r3
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	b10b      	cbz	r3, 800d194 <_free_r+0x50>
 800d190:	42a3      	cmp	r3, r4
 800d192:	d9fa      	bls.n	800d18a <_free_r+0x46>
 800d194:	6811      	ldr	r1, [r2, #0]
 800d196:	1855      	adds	r5, r2, r1
 800d198:	42a5      	cmp	r5, r4
 800d19a:	d10b      	bne.n	800d1b4 <_free_r+0x70>
 800d19c:	6824      	ldr	r4, [r4, #0]
 800d19e:	4421      	add	r1, r4
 800d1a0:	1854      	adds	r4, r2, r1
 800d1a2:	42a3      	cmp	r3, r4
 800d1a4:	6011      	str	r1, [r2, #0]
 800d1a6:	d1e0      	bne.n	800d16a <_free_r+0x26>
 800d1a8:	681c      	ldr	r4, [r3, #0]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	6053      	str	r3, [r2, #4]
 800d1ae:	4421      	add	r1, r4
 800d1b0:	6011      	str	r1, [r2, #0]
 800d1b2:	e7da      	b.n	800d16a <_free_r+0x26>
 800d1b4:	d902      	bls.n	800d1bc <_free_r+0x78>
 800d1b6:	230c      	movs	r3, #12
 800d1b8:	6003      	str	r3, [r0, #0]
 800d1ba:	e7d6      	b.n	800d16a <_free_r+0x26>
 800d1bc:	6825      	ldr	r5, [r4, #0]
 800d1be:	1961      	adds	r1, r4, r5
 800d1c0:	428b      	cmp	r3, r1
 800d1c2:	bf04      	itt	eq
 800d1c4:	6819      	ldreq	r1, [r3, #0]
 800d1c6:	685b      	ldreq	r3, [r3, #4]
 800d1c8:	6063      	str	r3, [r4, #4]
 800d1ca:	bf04      	itt	eq
 800d1cc:	1949      	addeq	r1, r1, r5
 800d1ce:	6021      	streq	r1, [r4, #0]
 800d1d0:	6054      	str	r4, [r2, #4]
 800d1d2:	e7ca      	b.n	800d16a <_free_r+0x26>
 800d1d4:	b003      	add	sp, #12
 800d1d6:	bd30      	pop	{r4, r5, pc}
 800d1d8:	20008f3c 	.word	0x20008f3c

0800d1dc <sbrk_aligned>:
 800d1dc:	b570      	push	{r4, r5, r6, lr}
 800d1de:	4e0e      	ldr	r6, [pc, #56]	; (800d218 <sbrk_aligned+0x3c>)
 800d1e0:	460c      	mov	r4, r1
 800d1e2:	6831      	ldr	r1, [r6, #0]
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	b911      	cbnz	r1, 800d1ee <sbrk_aligned+0x12>
 800d1e8:	f000 fcd0 	bl	800db8c <_sbrk_r>
 800d1ec:	6030      	str	r0, [r6, #0]
 800d1ee:	4621      	mov	r1, r4
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	f000 fccb 	bl	800db8c <_sbrk_r>
 800d1f6:	1c43      	adds	r3, r0, #1
 800d1f8:	d00a      	beq.n	800d210 <sbrk_aligned+0x34>
 800d1fa:	1cc4      	adds	r4, r0, #3
 800d1fc:	f024 0403 	bic.w	r4, r4, #3
 800d200:	42a0      	cmp	r0, r4
 800d202:	d007      	beq.n	800d214 <sbrk_aligned+0x38>
 800d204:	1a21      	subs	r1, r4, r0
 800d206:	4628      	mov	r0, r5
 800d208:	f000 fcc0 	bl	800db8c <_sbrk_r>
 800d20c:	3001      	adds	r0, #1
 800d20e:	d101      	bne.n	800d214 <sbrk_aligned+0x38>
 800d210:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d214:	4620      	mov	r0, r4
 800d216:	bd70      	pop	{r4, r5, r6, pc}
 800d218:	20008f40 	.word	0x20008f40

0800d21c <_malloc_r>:
 800d21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d220:	1ccd      	adds	r5, r1, #3
 800d222:	f025 0503 	bic.w	r5, r5, #3
 800d226:	3508      	adds	r5, #8
 800d228:	2d0c      	cmp	r5, #12
 800d22a:	bf38      	it	cc
 800d22c:	250c      	movcc	r5, #12
 800d22e:	2d00      	cmp	r5, #0
 800d230:	4607      	mov	r7, r0
 800d232:	db01      	blt.n	800d238 <_malloc_r+0x1c>
 800d234:	42a9      	cmp	r1, r5
 800d236:	d905      	bls.n	800d244 <_malloc_r+0x28>
 800d238:	230c      	movs	r3, #12
 800d23a:	603b      	str	r3, [r7, #0]
 800d23c:	2600      	movs	r6, #0
 800d23e:	4630      	mov	r0, r6
 800d240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d244:	4e2e      	ldr	r6, [pc, #184]	; (800d300 <_malloc_r+0xe4>)
 800d246:	f001 fac5 	bl	800e7d4 <__malloc_lock>
 800d24a:	6833      	ldr	r3, [r6, #0]
 800d24c:	461c      	mov	r4, r3
 800d24e:	bb34      	cbnz	r4, 800d29e <_malloc_r+0x82>
 800d250:	4629      	mov	r1, r5
 800d252:	4638      	mov	r0, r7
 800d254:	f7ff ffc2 	bl	800d1dc <sbrk_aligned>
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	4604      	mov	r4, r0
 800d25c:	d14d      	bne.n	800d2fa <_malloc_r+0xde>
 800d25e:	6834      	ldr	r4, [r6, #0]
 800d260:	4626      	mov	r6, r4
 800d262:	2e00      	cmp	r6, #0
 800d264:	d140      	bne.n	800d2e8 <_malloc_r+0xcc>
 800d266:	6823      	ldr	r3, [r4, #0]
 800d268:	4631      	mov	r1, r6
 800d26a:	4638      	mov	r0, r7
 800d26c:	eb04 0803 	add.w	r8, r4, r3
 800d270:	f000 fc8c 	bl	800db8c <_sbrk_r>
 800d274:	4580      	cmp	r8, r0
 800d276:	d13a      	bne.n	800d2ee <_malloc_r+0xd2>
 800d278:	6821      	ldr	r1, [r4, #0]
 800d27a:	3503      	adds	r5, #3
 800d27c:	1a6d      	subs	r5, r5, r1
 800d27e:	f025 0503 	bic.w	r5, r5, #3
 800d282:	3508      	adds	r5, #8
 800d284:	2d0c      	cmp	r5, #12
 800d286:	bf38      	it	cc
 800d288:	250c      	movcc	r5, #12
 800d28a:	4629      	mov	r1, r5
 800d28c:	4638      	mov	r0, r7
 800d28e:	f7ff ffa5 	bl	800d1dc <sbrk_aligned>
 800d292:	3001      	adds	r0, #1
 800d294:	d02b      	beq.n	800d2ee <_malloc_r+0xd2>
 800d296:	6823      	ldr	r3, [r4, #0]
 800d298:	442b      	add	r3, r5
 800d29a:	6023      	str	r3, [r4, #0]
 800d29c:	e00e      	b.n	800d2bc <_malloc_r+0xa0>
 800d29e:	6822      	ldr	r2, [r4, #0]
 800d2a0:	1b52      	subs	r2, r2, r5
 800d2a2:	d41e      	bmi.n	800d2e2 <_malloc_r+0xc6>
 800d2a4:	2a0b      	cmp	r2, #11
 800d2a6:	d916      	bls.n	800d2d6 <_malloc_r+0xba>
 800d2a8:	1961      	adds	r1, r4, r5
 800d2aa:	42a3      	cmp	r3, r4
 800d2ac:	6025      	str	r5, [r4, #0]
 800d2ae:	bf18      	it	ne
 800d2b0:	6059      	strne	r1, [r3, #4]
 800d2b2:	6863      	ldr	r3, [r4, #4]
 800d2b4:	bf08      	it	eq
 800d2b6:	6031      	streq	r1, [r6, #0]
 800d2b8:	5162      	str	r2, [r4, r5]
 800d2ba:	604b      	str	r3, [r1, #4]
 800d2bc:	4638      	mov	r0, r7
 800d2be:	f104 060b 	add.w	r6, r4, #11
 800d2c2:	f001 fa8d 	bl	800e7e0 <__malloc_unlock>
 800d2c6:	f026 0607 	bic.w	r6, r6, #7
 800d2ca:	1d23      	adds	r3, r4, #4
 800d2cc:	1af2      	subs	r2, r6, r3
 800d2ce:	d0b6      	beq.n	800d23e <_malloc_r+0x22>
 800d2d0:	1b9b      	subs	r3, r3, r6
 800d2d2:	50a3      	str	r3, [r4, r2]
 800d2d4:	e7b3      	b.n	800d23e <_malloc_r+0x22>
 800d2d6:	6862      	ldr	r2, [r4, #4]
 800d2d8:	42a3      	cmp	r3, r4
 800d2da:	bf0c      	ite	eq
 800d2dc:	6032      	streq	r2, [r6, #0]
 800d2de:	605a      	strne	r2, [r3, #4]
 800d2e0:	e7ec      	b.n	800d2bc <_malloc_r+0xa0>
 800d2e2:	4623      	mov	r3, r4
 800d2e4:	6864      	ldr	r4, [r4, #4]
 800d2e6:	e7b2      	b.n	800d24e <_malloc_r+0x32>
 800d2e8:	4634      	mov	r4, r6
 800d2ea:	6876      	ldr	r6, [r6, #4]
 800d2ec:	e7b9      	b.n	800d262 <_malloc_r+0x46>
 800d2ee:	230c      	movs	r3, #12
 800d2f0:	603b      	str	r3, [r7, #0]
 800d2f2:	4638      	mov	r0, r7
 800d2f4:	f001 fa74 	bl	800e7e0 <__malloc_unlock>
 800d2f8:	e7a1      	b.n	800d23e <_malloc_r+0x22>
 800d2fa:	6025      	str	r5, [r4, #0]
 800d2fc:	e7de      	b.n	800d2bc <_malloc_r+0xa0>
 800d2fe:	bf00      	nop
 800d300:	20008f3c 	.word	0x20008f3c

0800d304 <__cvt>:
 800d304:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d306:	ed2d 8b02 	vpush	{d8}
 800d30a:	eeb0 8b40 	vmov.f64	d8, d0
 800d30e:	b085      	sub	sp, #20
 800d310:	4617      	mov	r7, r2
 800d312:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d314:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d316:	ee18 2a90 	vmov	r2, s17
 800d31a:	f025 0520 	bic.w	r5, r5, #32
 800d31e:	2a00      	cmp	r2, #0
 800d320:	bfb6      	itet	lt
 800d322:	222d      	movlt	r2, #45	; 0x2d
 800d324:	2200      	movge	r2, #0
 800d326:	eeb1 8b40 	vneglt.f64	d8, d0
 800d32a:	2d46      	cmp	r5, #70	; 0x46
 800d32c:	460c      	mov	r4, r1
 800d32e:	701a      	strb	r2, [r3, #0]
 800d330:	d004      	beq.n	800d33c <__cvt+0x38>
 800d332:	2d45      	cmp	r5, #69	; 0x45
 800d334:	d100      	bne.n	800d338 <__cvt+0x34>
 800d336:	3401      	adds	r4, #1
 800d338:	2102      	movs	r1, #2
 800d33a:	e000      	b.n	800d33e <__cvt+0x3a>
 800d33c:	2103      	movs	r1, #3
 800d33e:	ab03      	add	r3, sp, #12
 800d340:	9301      	str	r3, [sp, #4]
 800d342:	ab02      	add	r3, sp, #8
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	4622      	mov	r2, r4
 800d348:	4633      	mov	r3, r6
 800d34a:	eeb0 0b48 	vmov.f64	d0, d8
 800d34e:	f000 fccf 	bl	800dcf0 <_dtoa_r>
 800d352:	2d47      	cmp	r5, #71	; 0x47
 800d354:	d101      	bne.n	800d35a <__cvt+0x56>
 800d356:	07fb      	lsls	r3, r7, #31
 800d358:	d51a      	bpl.n	800d390 <__cvt+0x8c>
 800d35a:	2d46      	cmp	r5, #70	; 0x46
 800d35c:	eb00 0204 	add.w	r2, r0, r4
 800d360:	d10c      	bne.n	800d37c <__cvt+0x78>
 800d362:	7803      	ldrb	r3, [r0, #0]
 800d364:	2b30      	cmp	r3, #48	; 0x30
 800d366:	d107      	bne.n	800d378 <__cvt+0x74>
 800d368:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d36c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d370:	bf1c      	itt	ne
 800d372:	f1c4 0401 	rsbne	r4, r4, #1
 800d376:	6034      	strne	r4, [r6, #0]
 800d378:	6833      	ldr	r3, [r6, #0]
 800d37a:	441a      	add	r2, r3
 800d37c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d384:	bf08      	it	eq
 800d386:	9203      	streq	r2, [sp, #12]
 800d388:	2130      	movs	r1, #48	; 0x30
 800d38a:	9b03      	ldr	r3, [sp, #12]
 800d38c:	4293      	cmp	r3, r2
 800d38e:	d307      	bcc.n	800d3a0 <__cvt+0x9c>
 800d390:	9b03      	ldr	r3, [sp, #12]
 800d392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d394:	1a1b      	subs	r3, r3, r0
 800d396:	6013      	str	r3, [r2, #0]
 800d398:	b005      	add	sp, #20
 800d39a:	ecbd 8b02 	vpop	{d8}
 800d39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3a0:	1c5c      	adds	r4, r3, #1
 800d3a2:	9403      	str	r4, [sp, #12]
 800d3a4:	7019      	strb	r1, [r3, #0]
 800d3a6:	e7f0      	b.n	800d38a <__cvt+0x86>

0800d3a8 <__exponent>:
 800d3a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2900      	cmp	r1, #0
 800d3ae:	bfb8      	it	lt
 800d3b0:	4249      	neglt	r1, r1
 800d3b2:	f803 2b02 	strb.w	r2, [r3], #2
 800d3b6:	bfb4      	ite	lt
 800d3b8:	222d      	movlt	r2, #45	; 0x2d
 800d3ba:	222b      	movge	r2, #43	; 0x2b
 800d3bc:	2909      	cmp	r1, #9
 800d3be:	7042      	strb	r2, [r0, #1]
 800d3c0:	dd2a      	ble.n	800d418 <__exponent+0x70>
 800d3c2:	f10d 0407 	add.w	r4, sp, #7
 800d3c6:	46a4      	mov	ip, r4
 800d3c8:	270a      	movs	r7, #10
 800d3ca:	46a6      	mov	lr, r4
 800d3cc:	460a      	mov	r2, r1
 800d3ce:	fb91 f6f7 	sdiv	r6, r1, r7
 800d3d2:	fb07 1516 	mls	r5, r7, r6, r1
 800d3d6:	3530      	adds	r5, #48	; 0x30
 800d3d8:	2a63      	cmp	r2, #99	; 0x63
 800d3da:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d3de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d3e2:	4631      	mov	r1, r6
 800d3e4:	dcf1      	bgt.n	800d3ca <__exponent+0x22>
 800d3e6:	3130      	adds	r1, #48	; 0x30
 800d3e8:	f1ae 0502 	sub.w	r5, lr, #2
 800d3ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d3f0:	1c44      	adds	r4, r0, #1
 800d3f2:	4629      	mov	r1, r5
 800d3f4:	4561      	cmp	r1, ip
 800d3f6:	d30a      	bcc.n	800d40e <__exponent+0x66>
 800d3f8:	f10d 0209 	add.w	r2, sp, #9
 800d3fc:	eba2 020e 	sub.w	r2, r2, lr
 800d400:	4565      	cmp	r5, ip
 800d402:	bf88      	it	hi
 800d404:	2200      	movhi	r2, #0
 800d406:	4413      	add	r3, r2
 800d408:	1a18      	subs	r0, r3, r0
 800d40a:	b003      	add	sp, #12
 800d40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d40e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d412:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d416:	e7ed      	b.n	800d3f4 <__exponent+0x4c>
 800d418:	2330      	movs	r3, #48	; 0x30
 800d41a:	3130      	adds	r1, #48	; 0x30
 800d41c:	7083      	strb	r3, [r0, #2]
 800d41e:	70c1      	strb	r1, [r0, #3]
 800d420:	1d03      	adds	r3, r0, #4
 800d422:	e7f1      	b.n	800d408 <__exponent+0x60>
 800d424:	0000      	movs	r0, r0
	...

0800d428 <_printf_float>:
 800d428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d42c:	b08b      	sub	sp, #44	; 0x2c
 800d42e:	460c      	mov	r4, r1
 800d430:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d434:	4616      	mov	r6, r2
 800d436:	461f      	mov	r7, r3
 800d438:	4605      	mov	r5, r0
 800d43a:	f001 f9c7 	bl	800e7cc <_localeconv_r>
 800d43e:	f8d0 b000 	ldr.w	fp, [r0]
 800d442:	4658      	mov	r0, fp
 800d444:	f7f2 fefc 	bl	8000240 <strlen>
 800d448:	2300      	movs	r3, #0
 800d44a:	9308      	str	r3, [sp, #32]
 800d44c:	f8d8 3000 	ldr.w	r3, [r8]
 800d450:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d454:	6822      	ldr	r2, [r4, #0]
 800d456:	3307      	adds	r3, #7
 800d458:	f023 0307 	bic.w	r3, r3, #7
 800d45c:	f103 0108 	add.w	r1, r3, #8
 800d460:	f8c8 1000 	str.w	r1, [r8]
 800d464:	4682      	mov	sl, r0
 800d466:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d46a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d46e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d6d0 <_printf_float+0x2a8>
 800d472:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d476:	eeb0 6bc0 	vabs.f64	d6, d0
 800d47a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d482:	dd24      	ble.n	800d4ce <_printf_float+0xa6>
 800d484:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d48c:	d502      	bpl.n	800d494 <_printf_float+0x6c>
 800d48e:	232d      	movs	r3, #45	; 0x2d
 800d490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d494:	4b90      	ldr	r3, [pc, #576]	; (800d6d8 <_printf_float+0x2b0>)
 800d496:	4891      	ldr	r0, [pc, #580]	; (800d6dc <_printf_float+0x2b4>)
 800d498:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d49c:	bf94      	ite	ls
 800d49e:	4698      	movls	r8, r3
 800d4a0:	4680      	movhi	r8, r0
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	6123      	str	r3, [r4, #16]
 800d4a6:	f022 0204 	bic.w	r2, r2, #4
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	6022      	str	r2, [r4, #0]
 800d4ae:	9304      	str	r3, [sp, #16]
 800d4b0:	9700      	str	r7, [sp, #0]
 800d4b2:	4633      	mov	r3, r6
 800d4b4:	aa09      	add	r2, sp, #36	; 0x24
 800d4b6:	4621      	mov	r1, r4
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	f000 f9d3 	bl	800d864 <_printf_common>
 800d4be:	3001      	adds	r0, #1
 800d4c0:	f040 808a 	bne.w	800d5d8 <_printf_float+0x1b0>
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4c8:	b00b      	add	sp, #44	; 0x2c
 800d4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ce:	eeb4 0b40 	vcmp.f64	d0, d0
 800d4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d4d6:	d709      	bvc.n	800d4ec <_printf_float+0xc4>
 800d4d8:	ee10 3a90 	vmov	r3, s1
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	bfbc      	itt	lt
 800d4e0:	232d      	movlt	r3, #45	; 0x2d
 800d4e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d4e6:	487e      	ldr	r0, [pc, #504]	; (800d6e0 <_printf_float+0x2b8>)
 800d4e8:	4b7e      	ldr	r3, [pc, #504]	; (800d6e4 <_printf_float+0x2bc>)
 800d4ea:	e7d5      	b.n	800d498 <_printf_float+0x70>
 800d4ec:	6863      	ldr	r3, [r4, #4]
 800d4ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d4f2:	9104      	str	r1, [sp, #16]
 800d4f4:	1c59      	adds	r1, r3, #1
 800d4f6:	d13c      	bne.n	800d572 <_printf_float+0x14a>
 800d4f8:	2306      	movs	r3, #6
 800d4fa:	6063      	str	r3, [r4, #4]
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	9303      	str	r3, [sp, #12]
 800d500:	ab08      	add	r3, sp, #32
 800d502:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d506:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d50a:	ab07      	add	r3, sp, #28
 800d50c:	6861      	ldr	r1, [r4, #4]
 800d50e:	9300      	str	r3, [sp, #0]
 800d510:	6022      	str	r2, [r4, #0]
 800d512:	f10d 031b 	add.w	r3, sp, #27
 800d516:	4628      	mov	r0, r5
 800d518:	f7ff fef4 	bl	800d304 <__cvt>
 800d51c:	9b04      	ldr	r3, [sp, #16]
 800d51e:	9907      	ldr	r1, [sp, #28]
 800d520:	2b47      	cmp	r3, #71	; 0x47
 800d522:	4680      	mov	r8, r0
 800d524:	d108      	bne.n	800d538 <_printf_float+0x110>
 800d526:	1cc8      	adds	r0, r1, #3
 800d528:	db02      	blt.n	800d530 <_printf_float+0x108>
 800d52a:	6863      	ldr	r3, [r4, #4]
 800d52c:	4299      	cmp	r1, r3
 800d52e:	dd41      	ble.n	800d5b4 <_printf_float+0x18c>
 800d530:	f1a9 0902 	sub.w	r9, r9, #2
 800d534:	fa5f f989 	uxtb.w	r9, r9
 800d538:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d53c:	d820      	bhi.n	800d580 <_printf_float+0x158>
 800d53e:	3901      	subs	r1, #1
 800d540:	464a      	mov	r2, r9
 800d542:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d546:	9107      	str	r1, [sp, #28]
 800d548:	f7ff ff2e 	bl	800d3a8 <__exponent>
 800d54c:	9a08      	ldr	r2, [sp, #32]
 800d54e:	9004      	str	r0, [sp, #16]
 800d550:	1813      	adds	r3, r2, r0
 800d552:	2a01      	cmp	r2, #1
 800d554:	6123      	str	r3, [r4, #16]
 800d556:	dc02      	bgt.n	800d55e <_printf_float+0x136>
 800d558:	6822      	ldr	r2, [r4, #0]
 800d55a:	07d2      	lsls	r2, r2, #31
 800d55c:	d501      	bpl.n	800d562 <_printf_float+0x13a>
 800d55e:	3301      	adds	r3, #1
 800d560:	6123      	str	r3, [r4, #16]
 800d562:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d0a2      	beq.n	800d4b0 <_printf_float+0x88>
 800d56a:	232d      	movs	r3, #45	; 0x2d
 800d56c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d570:	e79e      	b.n	800d4b0 <_printf_float+0x88>
 800d572:	9904      	ldr	r1, [sp, #16]
 800d574:	2947      	cmp	r1, #71	; 0x47
 800d576:	d1c1      	bne.n	800d4fc <_printf_float+0xd4>
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1bf      	bne.n	800d4fc <_printf_float+0xd4>
 800d57c:	2301      	movs	r3, #1
 800d57e:	e7bc      	b.n	800d4fa <_printf_float+0xd2>
 800d580:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d584:	d118      	bne.n	800d5b8 <_printf_float+0x190>
 800d586:	2900      	cmp	r1, #0
 800d588:	6863      	ldr	r3, [r4, #4]
 800d58a:	dd0b      	ble.n	800d5a4 <_printf_float+0x17c>
 800d58c:	6121      	str	r1, [r4, #16]
 800d58e:	b913      	cbnz	r3, 800d596 <_printf_float+0x16e>
 800d590:	6822      	ldr	r2, [r4, #0]
 800d592:	07d0      	lsls	r0, r2, #31
 800d594:	d502      	bpl.n	800d59c <_printf_float+0x174>
 800d596:	3301      	adds	r3, #1
 800d598:	440b      	add	r3, r1
 800d59a:	6123      	str	r3, [r4, #16]
 800d59c:	2300      	movs	r3, #0
 800d59e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d5a0:	9304      	str	r3, [sp, #16]
 800d5a2:	e7de      	b.n	800d562 <_printf_float+0x13a>
 800d5a4:	b913      	cbnz	r3, 800d5ac <_printf_float+0x184>
 800d5a6:	6822      	ldr	r2, [r4, #0]
 800d5a8:	07d2      	lsls	r2, r2, #31
 800d5aa:	d501      	bpl.n	800d5b0 <_printf_float+0x188>
 800d5ac:	3302      	adds	r3, #2
 800d5ae:	e7f4      	b.n	800d59a <_printf_float+0x172>
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	e7f2      	b.n	800d59a <_printf_float+0x172>
 800d5b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d5b8:	9b08      	ldr	r3, [sp, #32]
 800d5ba:	4299      	cmp	r1, r3
 800d5bc:	db05      	blt.n	800d5ca <_printf_float+0x1a2>
 800d5be:	6823      	ldr	r3, [r4, #0]
 800d5c0:	6121      	str	r1, [r4, #16]
 800d5c2:	07d8      	lsls	r0, r3, #31
 800d5c4:	d5ea      	bpl.n	800d59c <_printf_float+0x174>
 800d5c6:	1c4b      	adds	r3, r1, #1
 800d5c8:	e7e7      	b.n	800d59a <_printf_float+0x172>
 800d5ca:	2900      	cmp	r1, #0
 800d5cc:	bfd4      	ite	le
 800d5ce:	f1c1 0202 	rsble	r2, r1, #2
 800d5d2:	2201      	movgt	r2, #1
 800d5d4:	4413      	add	r3, r2
 800d5d6:	e7e0      	b.n	800d59a <_printf_float+0x172>
 800d5d8:	6823      	ldr	r3, [r4, #0]
 800d5da:	055a      	lsls	r2, r3, #21
 800d5dc:	d407      	bmi.n	800d5ee <_printf_float+0x1c6>
 800d5de:	6923      	ldr	r3, [r4, #16]
 800d5e0:	4642      	mov	r2, r8
 800d5e2:	4631      	mov	r1, r6
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	47b8      	blx	r7
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	d12a      	bne.n	800d642 <_printf_float+0x21a>
 800d5ec:	e76a      	b.n	800d4c4 <_printf_float+0x9c>
 800d5ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d5f2:	f240 80e2 	bls.w	800d7ba <_printf_float+0x392>
 800d5f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d5fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d602:	d133      	bne.n	800d66c <_printf_float+0x244>
 800d604:	4a38      	ldr	r2, [pc, #224]	; (800d6e8 <_printf_float+0x2c0>)
 800d606:	2301      	movs	r3, #1
 800d608:	4631      	mov	r1, r6
 800d60a:	4628      	mov	r0, r5
 800d60c:	47b8      	blx	r7
 800d60e:	3001      	adds	r0, #1
 800d610:	f43f af58 	beq.w	800d4c4 <_printf_float+0x9c>
 800d614:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d618:	429a      	cmp	r2, r3
 800d61a:	db02      	blt.n	800d622 <_printf_float+0x1fa>
 800d61c:	6823      	ldr	r3, [r4, #0]
 800d61e:	07d8      	lsls	r0, r3, #31
 800d620:	d50f      	bpl.n	800d642 <_printf_float+0x21a>
 800d622:	4653      	mov	r3, sl
 800d624:	465a      	mov	r2, fp
 800d626:	4631      	mov	r1, r6
 800d628:	4628      	mov	r0, r5
 800d62a:	47b8      	blx	r7
 800d62c:	3001      	adds	r0, #1
 800d62e:	f43f af49 	beq.w	800d4c4 <_printf_float+0x9c>
 800d632:	f04f 0800 	mov.w	r8, #0
 800d636:	f104 091a 	add.w	r9, r4, #26
 800d63a:	9b08      	ldr	r3, [sp, #32]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	4543      	cmp	r3, r8
 800d640:	dc09      	bgt.n	800d656 <_printf_float+0x22e>
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	079b      	lsls	r3, r3, #30
 800d646:	f100 8108 	bmi.w	800d85a <_printf_float+0x432>
 800d64a:	68e0      	ldr	r0, [r4, #12]
 800d64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d64e:	4298      	cmp	r0, r3
 800d650:	bfb8      	it	lt
 800d652:	4618      	movlt	r0, r3
 800d654:	e738      	b.n	800d4c8 <_printf_float+0xa0>
 800d656:	2301      	movs	r3, #1
 800d658:	464a      	mov	r2, r9
 800d65a:	4631      	mov	r1, r6
 800d65c:	4628      	mov	r0, r5
 800d65e:	47b8      	blx	r7
 800d660:	3001      	adds	r0, #1
 800d662:	f43f af2f 	beq.w	800d4c4 <_printf_float+0x9c>
 800d666:	f108 0801 	add.w	r8, r8, #1
 800d66a:	e7e6      	b.n	800d63a <_printf_float+0x212>
 800d66c:	9b07      	ldr	r3, [sp, #28]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	dc3c      	bgt.n	800d6ec <_printf_float+0x2c4>
 800d672:	4a1d      	ldr	r2, [pc, #116]	; (800d6e8 <_printf_float+0x2c0>)
 800d674:	2301      	movs	r3, #1
 800d676:	4631      	mov	r1, r6
 800d678:	4628      	mov	r0, r5
 800d67a:	47b8      	blx	r7
 800d67c:	3001      	adds	r0, #1
 800d67e:	f43f af21 	beq.w	800d4c4 <_printf_float+0x9c>
 800d682:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d686:	4313      	orrs	r3, r2
 800d688:	d102      	bne.n	800d690 <_printf_float+0x268>
 800d68a:	6823      	ldr	r3, [r4, #0]
 800d68c:	07d9      	lsls	r1, r3, #31
 800d68e:	d5d8      	bpl.n	800d642 <_printf_float+0x21a>
 800d690:	4653      	mov	r3, sl
 800d692:	465a      	mov	r2, fp
 800d694:	4631      	mov	r1, r6
 800d696:	4628      	mov	r0, r5
 800d698:	47b8      	blx	r7
 800d69a:	3001      	adds	r0, #1
 800d69c:	f43f af12 	beq.w	800d4c4 <_printf_float+0x9c>
 800d6a0:	f04f 0900 	mov.w	r9, #0
 800d6a4:	f104 0a1a 	add.w	sl, r4, #26
 800d6a8:	9b07      	ldr	r3, [sp, #28]
 800d6aa:	425b      	negs	r3, r3
 800d6ac:	454b      	cmp	r3, r9
 800d6ae:	dc01      	bgt.n	800d6b4 <_printf_float+0x28c>
 800d6b0:	9b08      	ldr	r3, [sp, #32]
 800d6b2:	e795      	b.n	800d5e0 <_printf_float+0x1b8>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	4652      	mov	r2, sl
 800d6b8:	4631      	mov	r1, r6
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	47b8      	blx	r7
 800d6be:	3001      	adds	r0, #1
 800d6c0:	f43f af00 	beq.w	800d4c4 <_printf_float+0x9c>
 800d6c4:	f109 0901 	add.w	r9, r9, #1
 800d6c8:	e7ee      	b.n	800d6a8 <_printf_float+0x280>
 800d6ca:	bf00      	nop
 800d6cc:	f3af 8000 	nop.w
 800d6d0:	ffffffff 	.word	0xffffffff
 800d6d4:	7fefffff 	.word	0x7fefffff
 800d6d8:	0806f808 	.word	0x0806f808
 800d6dc:	0806f80c 	.word	0x0806f80c
 800d6e0:	0806f814 	.word	0x0806f814
 800d6e4:	0806f810 	.word	0x0806f810
 800d6e8:	08010380 	.word	0x08010380
 800d6ec:	9a08      	ldr	r2, [sp, #32]
 800d6ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	bfa8      	it	ge
 800d6f4:	461a      	movge	r2, r3
 800d6f6:	2a00      	cmp	r2, #0
 800d6f8:	4691      	mov	r9, r2
 800d6fa:	dc38      	bgt.n	800d76e <_printf_float+0x346>
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	9305      	str	r3, [sp, #20]
 800d700:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d704:	f104 021a 	add.w	r2, r4, #26
 800d708:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d70a:	9905      	ldr	r1, [sp, #20]
 800d70c:	9304      	str	r3, [sp, #16]
 800d70e:	eba3 0309 	sub.w	r3, r3, r9
 800d712:	428b      	cmp	r3, r1
 800d714:	dc33      	bgt.n	800d77e <_printf_float+0x356>
 800d716:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	db3c      	blt.n	800d798 <_printf_float+0x370>
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	07da      	lsls	r2, r3, #31
 800d722:	d439      	bmi.n	800d798 <_printf_float+0x370>
 800d724:	9b08      	ldr	r3, [sp, #32]
 800d726:	9a04      	ldr	r2, [sp, #16]
 800d728:	9907      	ldr	r1, [sp, #28]
 800d72a:	1a9a      	subs	r2, r3, r2
 800d72c:	eba3 0901 	sub.w	r9, r3, r1
 800d730:	4591      	cmp	r9, r2
 800d732:	bfa8      	it	ge
 800d734:	4691      	movge	r9, r2
 800d736:	f1b9 0f00 	cmp.w	r9, #0
 800d73a:	dc35      	bgt.n	800d7a8 <_printf_float+0x380>
 800d73c:	f04f 0800 	mov.w	r8, #0
 800d740:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d744:	f104 0a1a 	add.w	sl, r4, #26
 800d748:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d74c:	1a9b      	subs	r3, r3, r2
 800d74e:	eba3 0309 	sub.w	r3, r3, r9
 800d752:	4543      	cmp	r3, r8
 800d754:	f77f af75 	ble.w	800d642 <_printf_float+0x21a>
 800d758:	2301      	movs	r3, #1
 800d75a:	4652      	mov	r2, sl
 800d75c:	4631      	mov	r1, r6
 800d75e:	4628      	mov	r0, r5
 800d760:	47b8      	blx	r7
 800d762:	3001      	adds	r0, #1
 800d764:	f43f aeae 	beq.w	800d4c4 <_printf_float+0x9c>
 800d768:	f108 0801 	add.w	r8, r8, #1
 800d76c:	e7ec      	b.n	800d748 <_printf_float+0x320>
 800d76e:	4613      	mov	r3, r2
 800d770:	4631      	mov	r1, r6
 800d772:	4642      	mov	r2, r8
 800d774:	4628      	mov	r0, r5
 800d776:	47b8      	blx	r7
 800d778:	3001      	adds	r0, #1
 800d77a:	d1bf      	bne.n	800d6fc <_printf_float+0x2d4>
 800d77c:	e6a2      	b.n	800d4c4 <_printf_float+0x9c>
 800d77e:	2301      	movs	r3, #1
 800d780:	4631      	mov	r1, r6
 800d782:	4628      	mov	r0, r5
 800d784:	9204      	str	r2, [sp, #16]
 800d786:	47b8      	blx	r7
 800d788:	3001      	adds	r0, #1
 800d78a:	f43f ae9b 	beq.w	800d4c4 <_printf_float+0x9c>
 800d78e:	9b05      	ldr	r3, [sp, #20]
 800d790:	9a04      	ldr	r2, [sp, #16]
 800d792:	3301      	adds	r3, #1
 800d794:	9305      	str	r3, [sp, #20]
 800d796:	e7b7      	b.n	800d708 <_printf_float+0x2e0>
 800d798:	4653      	mov	r3, sl
 800d79a:	465a      	mov	r2, fp
 800d79c:	4631      	mov	r1, r6
 800d79e:	4628      	mov	r0, r5
 800d7a0:	47b8      	blx	r7
 800d7a2:	3001      	adds	r0, #1
 800d7a4:	d1be      	bne.n	800d724 <_printf_float+0x2fc>
 800d7a6:	e68d      	b.n	800d4c4 <_printf_float+0x9c>
 800d7a8:	9a04      	ldr	r2, [sp, #16]
 800d7aa:	464b      	mov	r3, r9
 800d7ac:	4442      	add	r2, r8
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	47b8      	blx	r7
 800d7b4:	3001      	adds	r0, #1
 800d7b6:	d1c1      	bne.n	800d73c <_printf_float+0x314>
 800d7b8:	e684      	b.n	800d4c4 <_printf_float+0x9c>
 800d7ba:	9a08      	ldr	r2, [sp, #32]
 800d7bc:	2a01      	cmp	r2, #1
 800d7be:	dc01      	bgt.n	800d7c4 <_printf_float+0x39c>
 800d7c0:	07db      	lsls	r3, r3, #31
 800d7c2:	d537      	bpl.n	800d834 <_printf_float+0x40c>
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	4642      	mov	r2, r8
 800d7c8:	4631      	mov	r1, r6
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	47b8      	blx	r7
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	f43f ae78 	beq.w	800d4c4 <_printf_float+0x9c>
 800d7d4:	4653      	mov	r3, sl
 800d7d6:	465a      	mov	r2, fp
 800d7d8:	4631      	mov	r1, r6
 800d7da:	4628      	mov	r0, r5
 800d7dc:	47b8      	blx	r7
 800d7de:	3001      	adds	r0, #1
 800d7e0:	f43f ae70 	beq.w	800d4c4 <_printf_float+0x9c>
 800d7e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d7e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f0:	d01b      	beq.n	800d82a <_printf_float+0x402>
 800d7f2:	9b08      	ldr	r3, [sp, #32]
 800d7f4:	f108 0201 	add.w	r2, r8, #1
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	4631      	mov	r1, r6
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	47b8      	blx	r7
 800d800:	3001      	adds	r0, #1
 800d802:	d10e      	bne.n	800d822 <_printf_float+0x3fa>
 800d804:	e65e      	b.n	800d4c4 <_printf_float+0x9c>
 800d806:	2301      	movs	r3, #1
 800d808:	464a      	mov	r2, r9
 800d80a:	4631      	mov	r1, r6
 800d80c:	4628      	mov	r0, r5
 800d80e:	47b8      	blx	r7
 800d810:	3001      	adds	r0, #1
 800d812:	f43f ae57 	beq.w	800d4c4 <_printf_float+0x9c>
 800d816:	f108 0801 	add.w	r8, r8, #1
 800d81a:	9b08      	ldr	r3, [sp, #32]
 800d81c:	3b01      	subs	r3, #1
 800d81e:	4543      	cmp	r3, r8
 800d820:	dcf1      	bgt.n	800d806 <_printf_float+0x3de>
 800d822:	9b04      	ldr	r3, [sp, #16]
 800d824:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d828:	e6db      	b.n	800d5e2 <_printf_float+0x1ba>
 800d82a:	f04f 0800 	mov.w	r8, #0
 800d82e:	f104 091a 	add.w	r9, r4, #26
 800d832:	e7f2      	b.n	800d81a <_printf_float+0x3f2>
 800d834:	2301      	movs	r3, #1
 800d836:	4642      	mov	r2, r8
 800d838:	e7df      	b.n	800d7fa <_printf_float+0x3d2>
 800d83a:	2301      	movs	r3, #1
 800d83c:	464a      	mov	r2, r9
 800d83e:	4631      	mov	r1, r6
 800d840:	4628      	mov	r0, r5
 800d842:	47b8      	blx	r7
 800d844:	3001      	adds	r0, #1
 800d846:	f43f ae3d 	beq.w	800d4c4 <_printf_float+0x9c>
 800d84a:	f108 0801 	add.w	r8, r8, #1
 800d84e:	68e3      	ldr	r3, [r4, #12]
 800d850:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d852:	1a5b      	subs	r3, r3, r1
 800d854:	4543      	cmp	r3, r8
 800d856:	dcf0      	bgt.n	800d83a <_printf_float+0x412>
 800d858:	e6f7      	b.n	800d64a <_printf_float+0x222>
 800d85a:	f04f 0800 	mov.w	r8, #0
 800d85e:	f104 0919 	add.w	r9, r4, #25
 800d862:	e7f4      	b.n	800d84e <_printf_float+0x426>

0800d864 <_printf_common>:
 800d864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d868:	4616      	mov	r6, r2
 800d86a:	4699      	mov	r9, r3
 800d86c:	688a      	ldr	r2, [r1, #8]
 800d86e:	690b      	ldr	r3, [r1, #16]
 800d870:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d874:	4293      	cmp	r3, r2
 800d876:	bfb8      	it	lt
 800d878:	4613      	movlt	r3, r2
 800d87a:	6033      	str	r3, [r6, #0]
 800d87c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d880:	4607      	mov	r7, r0
 800d882:	460c      	mov	r4, r1
 800d884:	b10a      	cbz	r2, 800d88a <_printf_common+0x26>
 800d886:	3301      	adds	r3, #1
 800d888:	6033      	str	r3, [r6, #0]
 800d88a:	6823      	ldr	r3, [r4, #0]
 800d88c:	0699      	lsls	r1, r3, #26
 800d88e:	bf42      	ittt	mi
 800d890:	6833      	ldrmi	r3, [r6, #0]
 800d892:	3302      	addmi	r3, #2
 800d894:	6033      	strmi	r3, [r6, #0]
 800d896:	6825      	ldr	r5, [r4, #0]
 800d898:	f015 0506 	ands.w	r5, r5, #6
 800d89c:	d106      	bne.n	800d8ac <_printf_common+0x48>
 800d89e:	f104 0a19 	add.w	sl, r4, #25
 800d8a2:	68e3      	ldr	r3, [r4, #12]
 800d8a4:	6832      	ldr	r2, [r6, #0]
 800d8a6:	1a9b      	subs	r3, r3, r2
 800d8a8:	42ab      	cmp	r3, r5
 800d8aa:	dc26      	bgt.n	800d8fa <_printf_common+0x96>
 800d8ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8b0:	1e13      	subs	r3, r2, #0
 800d8b2:	6822      	ldr	r2, [r4, #0]
 800d8b4:	bf18      	it	ne
 800d8b6:	2301      	movne	r3, #1
 800d8b8:	0692      	lsls	r2, r2, #26
 800d8ba:	d42b      	bmi.n	800d914 <_printf_common+0xb0>
 800d8bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8c0:	4649      	mov	r1, r9
 800d8c2:	4638      	mov	r0, r7
 800d8c4:	47c0      	blx	r8
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	d01e      	beq.n	800d908 <_printf_common+0xa4>
 800d8ca:	6823      	ldr	r3, [r4, #0]
 800d8cc:	68e5      	ldr	r5, [r4, #12]
 800d8ce:	6832      	ldr	r2, [r6, #0]
 800d8d0:	f003 0306 	and.w	r3, r3, #6
 800d8d4:	2b04      	cmp	r3, #4
 800d8d6:	bf08      	it	eq
 800d8d8:	1aad      	subeq	r5, r5, r2
 800d8da:	68a3      	ldr	r3, [r4, #8]
 800d8dc:	6922      	ldr	r2, [r4, #16]
 800d8de:	bf0c      	ite	eq
 800d8e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8e4:	2500      	movne	r5, #0
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	bfc4      	itt	gt
 800d8ea:	1a9b      	subgt	r3, r3, r2
 800d8ec:	18ed      	addgt	r5, r5, r3
 800d8ee:	2600      	movs	r6, #0
 800d8f0:	341a      	adds	r4, #26
 800d8f2:	42b5      	cmp	r5, r6
 800d8f4:	d11a      	bne.n	800d92c <_printf_common+0xc8>
 800d8f6:	2000      	movs	r0, #0
 800d8f8:	e008      	b.n	800d90c <_printf_common+0xa8>
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	4652      	mov	r2, sl
 800d8fe:	4649      	mov	r1, r9
 800d900:	4638      	mov	r0, r7
 800d902:	47c0      	blx	r8
 800d904:	3001      	adds	r0, #1
 800d906:	d103      	bne.n	800d910 <_printf_common+0xac>
 800d908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d910:	3501      	adds	r5, #1
 800d912:	e7c6      	b.n	800d8a2 <_printf_common+0x3e>
 800d914:	18e1      	adds	r1, r4, r3
 800d916:	1c5a      	adds	r2, r3, #1
 800d918:	2030      	movs	r0, #48	; 0x30
 800d91a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d91e:	4422      	add	r2, r4
 800d920:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d924:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d928:	3302      	adds	r3, #2
 800d92a:	e7c7      	b.n	800d8bc <_printf_common+0x58>
 800d92c:	2301      	movs	r3, #1
 800d92e:	4622      	mov	r2, r4
 800d930:	4649      	mov	r1, r9
 800d932:	4638      	mov	r0, r7
 800d934:	47c0      	blx	r8
 800d936:	3001      	adds	r0, #1
 800d938:	d0e6      	beq.n	800d908 <_printf_common+0xa4>
 800d93a:	3601      	adds	r6, #1
 800d93c:	e7d9      	b.n	800d8f2 <_printf_common+0x8e>
	...

0800d940 <_printf_i>:
 800d940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d944:	7e0f      	ldrb	r7, [r1, #24]
 800d946:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d948:	2f78      	cmp	r7, #120	; 0x78
 800d94a:	4691      	mov	r9, r2
 800d94c:	4680      	mov	r8, r0
 800d94e:	460c      	mov	r4, r1
 800d950:	469a      	mov	sl, r3
 800d952:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d956:	d807      	bhi.n	800d968 <_printf_i+0x28>
 800d958:	2f62      	cmp	r7, #98	; 0x62
 800d95a:	d80a      	bhi.n	800d972 <_printf_i+0x32>
 800d95c:	2f00      	cmp	r7, #0
 800d95e:	f000 80d8 	beq.w	800db12 <_printf_i+0x1d2>
 800d962:	2f58      	cmp	r7, #88	; 0x58
 800d964:	f000 80a3 	beq.w	800daae <_printf_i+0x16e>
 800d968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d96c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d970:	e03a      	b.n	800d9e8 <_printf_i+0xa8>
 800d972:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d976:	2b15      	cmp	r3, #21
 800d978:	d8f6      	bhi.n	800d968 <_printf_i+0x28>
 800d97a:	a101      	add	r1, pc, #4	; (adr r1, 800d980 <_printf_i+0x40>)
 800d97c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d980:	0800d9d9 	.word	0x0800d9d9
 800d984:	0800d9ed 	.word	0x0800d9ed
 800d988:	0800d969 	.word	0x0800d969
 800d98c:	0800d969 	.word	0x0800d969
 800d990:	0800d969 	.word	0x0800d969
 800d994:	0800d969 	.word	0x0800d969
 800d998:	0800d9ed 	.word	0x0800d9ed
 800d99c:	0800d969 	.word	0x0800d969
 800d9a0:	0800d969 	.word	0x0800d969
 800d9a4:	0800d969 	.word	0x0800d969
 800d9a8:	0800d969 	.word	0x0800d969
 800d9ac:	0800daf9 	.word	0x0800daf9
 800d9b0:	0800da1d 	.word	0x0800da1d
 800d9b4:	0800dadb 	.word	0x0800dadb
 800d9b8:	0800d969 	.word	0x0800d969
 800d9bc:	0800d969 	.word	0x0800d969
 800d9c0:	0800db1b 	.word	0x0800db1b
 800d9c4:	0800d969 	.word	0x0800d969
 800d9c8:	0800da1d 	.word	0x0800da1d
 800d9cc:	0800d969 	.word	0x0800d969
 800d9d0:	0800d969 	.word	0x0800d969
 800d9d4:	0800dae3 	.word	0x0800dae3
 800d9d8:	682b      	ldr	r3, [r5, #0]
 800d9da:	1d1a      	adds	r2, r3, #4
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	602a      	str	r2, [r5, #0]
 800d9e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e0a3      	b.n	800db34 <_printf_i+0x1f4>
 800d9ec:	6820      	ldr	r0, [r4, #0]
 800d9ee:	6829      	ldr	r1, [r5, #0]
 800d9f0:	0606      	lsls	r6, r0, #24
 800d9f2:	f101 0304 	add.w	r3, r1, #4
 800d9f6:	d50a      	bpl.n	800da0e <_printf_i+0xce>
 800d9f8:	680e      	ldr	r6, [r1, #0]
 800d9fa:	602b      	str	r3, [r5, #0]
 800d9fc:	2e00      	cmp	r6, #0
 800d9fe:	da03      	bge.n	800da08 <_printf_i+0xc8>
 800da00:	232d      	movs	r3, #45	; 0x2d
 800da02:	4276      	negs	r6, r6
 800da04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da08:	485e      	ldr	r0, [pc, #376]	; (800db84 <_printf_i+0x244>)
 800da0a:	230a      	movs	r3, #10
 800da0c:	e019      	b.n	800da42 <_printf_i+0x102>
 800da0e:	680e      	ldr	r6, [r1, #0]
 800da10:	602b      	str	r3, [r5, #0]
 800da12:	f010 0f40 	tst.w	r0, #64	; 0x40
 800da16:	bf18      	it	ne
 800da18:	b236      	sxthne	r6, r6
 800da1a:	e7ef      	b.n	800d9fc <_printf_i+0xbc>
 800da1c:	682b      	ldr	r3, [r5, #0]
 800da1e:	6820      	ldr	r0, [r4, #0]
 800da20:	1d19      	adds	r1, r3, #4
 800da22:	6029      	str	r1, [r5, #0]
 800da24:	0601      	lsls	r1, r0, #24
 800da26:	d501      	bpl.n	800da2c <_printf_i+0xec>
 800da28:	681e      	ldr	r6, [r3, #0]
 800da2a:	e002      	b.n	800da32 <_printf_i+0xf2>
 800da2c:	0646      	lsls	r6, r0, #25
 800da2e:	d5fb      	bpl.n	800da28 <_printf_i+0xe8>
 800da30:	881e      	ldrh	r6, [r3, #0]
 800da32:	4854      	ldr	r0, [pc, #336]	; (800db84 <_printf_i+0x244>)
 800da34:	2f6f      	cmp	r7, #111	; 0x6f
 800da36:	bf0c      	ite	eq
 800da38:	2308      	moveq	r3, #8
 800da3a:	230a      	movne	r3, #10
 800da3c:	2100      	movs	r1, #0
 800da3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da42:	6865      	ldr	r5, [r4, #4]
 800da44:	60a5      	str	r5, [r4, #8]
 800da46:	2d00      	cmp	r5, #0
 800da48:	bfa2      	ittt	ge
 800da4a:	6821      	ldrge	r1, [r4, #0]
 800da4c:	f021 0104 	bicge.w	r1, r1, #4
 800da50:	6021      	strge	r1, [r4, #0]
 800da52:	b90e      	cbnz	r6, 800da58 <_printf_i+0x118>
 800da54:	2d00      	cmp	r5, #0
 800da56:	d04d      	beq.n	800daf4 <_printf_i+0x1b4>
 800da58:	4615      	mov	r5, r2
 800da5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800da5e:	fb03 6711 	mls	r7, r3, r1, r6
 800da62:	5dc7      	ldrb	r7, [r0, r7]
 800da64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da68:	4637      	mov	r7, r6
 800da6a:	42bb      	cmp	r3, r7
 800da6c:	460e      	mov	r6, r1
 800da6e:	d9f4      	bls.n	800da5a <_printf_i+0x11a>
 800da70:	2b08      	cmp	r3, #8
 800da72:	d10b      	bne.n	800da8c <_printf_i+0x14c>
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	07de      	lsls	r6, r3, #31
 800da78:	d508      	bpl.n	800da8c <_printf_i+0x14c>
 800da7a:	6923      	ldr	r3, [r4, #16]
 800da7c:	6861      	ldr	r1, [r4, #4]
 800da7e:	4299      	cmp	r1, r3
 800da80:	bfde      	ittt	le
 800da82:	2330      	movle	r3, #48	; 0x30
 800da84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800da8c:	1b52      	subs	r2, r2, r5
 800da8e:	6122      	str	r2, [r4, #16]
 800da90:	f8cd a000 	str.w	sl, [sp]
 800da94:	464b      	mov	r3, r9
 800da96:	aa03      	add	r2, sp, #12
 800da98:	4621      	mov	r1, r4
 800da9a:	4640      	mov	r0, r8
 800da9c:	f7ff fee2 	bl	800d864 <_printf_common>
 800daa0:	3001      	adds	r0, #1
 800daa2:	d14c      	bne.n	800db3e <_printf_i+0x1fe>
 800daa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800daa8:	b004      	add	sp, #16
 800daaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daae:	4835      	ldr	r0, [pc, #212]	; (800db84 <_printf_i+0x244>)
 800dab0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dab4:	6829      	ldr	r1, [r5, #0]
 800dab6:	6823      	ldr	r3, [r4, #0]
 800dab8:	f851 6b04 	ldr.w	r6, [r1], #4
 800dabc:	6029      	str	r1, [r5, #0]
 800dabe:	061d      	lsls	r5, r3, #24
 800dac0:	d514      	bpl.n	800daec <_printf_i+0x1ac>
 800dac2:	07df      	lsls	r7, r3, #31
 800dac4:	bf44      	itt	mi
 800dac6:	f043 0320 	orrmi.w	r3, r3, #32
 800daca:	6023      	strmi	r3, [r4, #0]
 800dacc:	b91e      	cbnz	r6, 800dad6 <_printf_i+0x196>
 800dace:	6823      	ldr	r3, [r4, #0]
 800dad0:	f023 0320 	bic.w	r3, r3, #32
 800dad4:	6023      	str	r3, [r4, #0]
 800dad6:	2310      	movs	r3, #16
 800dad8:	e7b0      	b.n	800da3c <_printf_i+0xfc>
 800dada:	6823      	ldr	r3, [r4, #0]
 800dadc:	f043 0320 	orr.w	r3, r3, #32
 800dae0:	6023      	str	r3, [r4, #0]
 800dae2:	2378      	movs	r3, #120	; 0x78
 800dae4:	4828      	ldr	r0, [pc, #160]	; (800db88 <_printf_i+0x248>)
 800dae6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800daea:	e7e3      	b.n	800dab4 <_printf_i+0x174>
 800daec:	0659      	lsls	r1, r3, #25
 800daee:	bf48      	it	mi
 800daf0:	b2b6      	uxthmi	r6, r6
 800daf2:	e7e6      	b.n	800dac2 <_printf_i+0x182>
 800daf4:	4615      	mov	r5, r2
 800daf6:	e7bb      	b.n	800da70 <_printf_i+0x130>
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	6826      	ldr	r6, [r4, #0]
 800dafc:	6961      	ldr	r1, [r4, #20]
 800dafe:	1d18      	adds	r0, r3, #4
 800db00:	6028      	str	r0, [r5, #0]
 800db02:	0635      	lsls	r5, r6, #24
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	d501      	bpl.n	800db0c <_printf_i+0x1cc>
 800db08:	6019      	str	r1, [r3, #0]
 800db0a:	e002      	b.n	800db12 <_printf_i+0x1d2>
 800db0c:	0670      	lsls	r0, r6, #25
 800db0e:	d5fb      	bpl.n	800db08 <_printf_i+0x1c8>
 800db10:	8019      	strh	r1, [r3, #0]
 800db12:	2300      	movs	r3, #0
 800db14:	6123      	str	r3, [r4, #16]
 800db16:	4615      	mov	r5, r2
 800db18:	e7ba      	b.n	800da90 <_printf_i+0x150>
 800db1a:	682b      	ldr	r3, [r5, #0]
 800db1c:	1d1a      	adds	r2, r3, #4
 800db1e:	602a      	str	r2, [r5, #0]
 800db20:	681d      	ldr	r5, [r3, #0]
 800db22:	6862      	ldr	r2, [r4, #4]
 800db24:	2100      	movs	r1, #0
 800db26:	4628      	mov	r0, r5
 800db28:	f7f2 fb92 	bl	8000250 <memchr>
 800db2c:	b108      	cbz	r0, 800db32 <_printf_i+0x1f2>
 800db2e:	1b40      	subs	r0, r0, r5
 800db30:	6060      	str	r0, [r4, #4]
 800db32:	6863      	ldr	r3, [r4, #4]
 800db34:	6123      	str	r3, [r4, #16]
 800db36:	2300      	movs	r3, #0
 800db38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db3c:	e7a8      	b.n	800da90 <_printf_i+0x150>
 800db3e:	6923      	ldr	r3, [r4, #16]
 800db40:	462a      	mov	r2, r5
 800db42:	4649      	mov	r1, r9
 800db44:	4640      	mov	r0, r8
 800db46:	47d0      	blx	sl
 800db48:	3001      	adds	r0, #1
 800db4a:	d0ab      	beq.n	800daa4 <_printf_i+0x164>
 800db4c:	6823      	ldr	r3, [r4, #0]
 800db4e:	079b      	lsls	r3, r3, #30
 800db50:	d413      	bmi.n	800db7a <_printf_i+0x23a>
 800db52:	68e0      	ldr	r0, [r4, #12]
 800db54:	9b03      	ldr	r3, [sp, #12]
 800db56:	4298      	cmp	r0, r3
 800db58:	bfb8      	it	lt
 800db5a:	4618      	movlt	r0, r3
 800db5c:	e7a4      	b.n	800daa8 <_printf_i+0x168>
 800db5e:	2301      	movs	r3, #1
 800db60:	4632      	mov	r2, r6
 800db62:	4649      	mov	r1, r9
 800db64:	4640      	mov	r0, r8
 800db66:	47d0      	blx	sl
 800db68:	3001      	adds	r0, #1
 800db6a:	d09b      	beq.n	800daa4 <_printf_i+0x164>
 800db6c:	3501      	adds	r5, #1
 800db6e:	68e3      	ldr	r3, [r4, #12]
 800db70:	9903      	ldr	r1, [sp, #12]
 800db72:	1a5b      	subs	r3, r3, r1
 800db74:	42ab      	cmp	r3, r5
 800db76:	dcf2      	bgt.n	800db5e <_printf_i+0x21e>
 800db78:	e7eb      	b.n	800db52 <_printf_i+0x212>
 800db7a:	2500      	movs	r5, #0
 800db7c:	f104 0619 	add.w	r6, r4, #25
 800db80:	e7f5      	b.n	800db6e <_printf_i+0x22e>
 800db82:	bf00      	nop
 800db84:	0806f818 	.word	0x0806f818
 800db88:	0806f829 	.word	0x0806f829

0800db8c <_sbrk_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4d06      	ldr	r5, [pc, #24]	; (800dba8 <_sbrk_r+0x1c>)
 800db90:	2300      	movs	r3, #0
 800db92:	4604      	mov	r4, r0
 800db94:	4608      	mov	r0, r1
 800db96:	602b      	str	r3, [r5, #0]
 800db98:	f7f3 fe56 	bl	8001848 <_sbrk>
 800db9c:	1c43      	adds	r3, r0, #1
 800db9e:	d102      	bne.n	800dba6 <_sbrk_r+0x1a>
 800dba0:	682b      	ldr	r3, [r5, #0]
 800dba2:	b103      	cbz	r3, 800dba6 <_sbrk_r+0x1a>
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	bd38      	pop	{r3, r4, r5, pc}
 800dba8:	20008f44 	.word	0x20008f44

0800dbac <strncmp>:
 800dbac:	b510      	push	{r4, lr}
 800dbae:	b17a      	cbz	r2, 800dbd0 <strncmp+0x24>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	3901      	subs	r1, #1
 800dbb4:	1884      	adds	r4, r0, r2
 800dbb6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dbba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dbbe:	4290      	cmp	r0, r2
 800dbc0:	d101      	bne.n	800dbc6 <strncmp+0x1a>
 800dbc2:	42a3      	cmp	r3, r4
 800dbc4:	d101      	bne.n	800dbca <strncmp+0x1e>
 800dbc6:	1a80      	subs	r0, r0, r2
 800dbc8:	bd10      	pop	{r4, pc}
 800dbca:	2800      	cmp	r0, #0
 800dbcc:	d1f3      	bne.n	800dbb6 <strncmp+0xa>
 800dbce:	e7fa      	b.n	800dbc6 <strncmp+0x1a>
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	e7f9      	b.n	800dbc8 <strncmp+0x1c>

0800dbd4 <quorem>:
 800dbd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbd8:	6903      	ldr	r3, [r0, #16]
 800dbda:	690c      	ldr	r4, [r1, #16]
 800dbdc:	42a3      	cmp	r3, r4
 800dbde:	4607      	mov	r7, r0
 800dbe0:	f2c0 8081 	blt.w	800dce6 <quorem+0x112>
 800dbe4:	3c01      	subs	r4, #1
 800dbe6:	f101 0814 	add.w	r8, r1, #20
 800dbea:	f100 0514 	add.w	r5, r0, #20
 800dbee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbf2:	9301      	str	r3, [sp, #4]
 800dbf4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dbf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbfc:	3301      	adds	r3, #1
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dc04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc08:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc0c:	d331      	bcc.n	800dc72 <quorem+0x9e>
 800dc0e:	f04f 0e00 	mov.w	lr, #0
 800dc12:	4640      	mov	r0, r8
 800dc14:	46ac      	mov	ip, r5
 800dc16:	46f2      	mov	sl, lr
 800dc18:	f850 2b04 	ldr.w	r2, [r0], #4
 800dc1c:	b293      	uxth	r3, r2
 800dc1e:	fb06 e303 	mla	r3, r6, r3, lr
 800dc22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	ebaa 0303 	sub.w	r3, sl, r3
 800dc2c:	f8dc a000 	ldr.w	sl, [ip]
 800dc30:	0c12      	lsrs	r2, r2, #16
 800dc32:	fa13 f38a 	uxtah	r3, r3, sl
 800dc36:	fb06 e202 	mla	r2, r6, r2, lr
 800dc3a:	9300      	str	r3, [sp, #0]
 800dc3c:	9b00      	ldr	r3, [sp, #0]
 800dc3e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dc42:	b292      	uxth	r2, r2
 800dc44:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dc48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc4c:	f8bd 3000 	ldrh.w	r3, [sp]
 800dc50:	4581      	cmp	r9, r0
 800dc52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc56:	f84c 3b04 	str.w	r3, [ip], #4
 800dc5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dc5e:	d2db      	bcs.n	800dc18 <quorem+0x44>
 800dc60:	f855 300b 	ldr.w	r3, [r5, fp]
 800dc64:	b92b      	cbnz	r3, 800dc72 <quorem+0x9e>
 800dc66:	9b01      	ldr	r3, [sp, #4]
 800dc68:	3b04      	subs	r3, #4
 800dc6a:	429d      	cmp	r5, r3
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	d32e      	bcc.n	800dcce <quorem+0xfa>
 800dc70:	613c      	str	r4, [r7, #16]
 800dc72:	4638      	mov	r0, r7
 800dc74:	f001 f83c 	bl	800ecf0 <__mcmp>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	db24      	blt.n	800dcc6 <quorem+0xf2>
 800dc7c:	3601      	adds	r6, #1
 800dc7e:	4628      	mov	r0, r5
 800dc80:	f04f 0c00 	mov.w	ip, #0
 800dc84:	f858 2b04 	ldr.w	r2, [r8], #4
 800dc88:	f8d0 e000 	ldr.w	lr, [r0]
 800dc8c:	b293      	uxth	r3, r2
 800dc8e:	ebac 0303 	sub.w	r3, ip, r3
 800dc92:	0c12      	lsrs	r2, r2, #16
 800dc94:	fa13 f38e 	uxtah	r3, r3, lr
 800dc98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dc9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dca6:	45c1      	cmp	r9, r8
 800dca8:	f840 3b04 	str.w	r3, [r0], #4
 800dcac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dcb0:	d2e8      	bcs.n	800dc84 <quorem+0xb0>
 800dcb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcba:	b922      	cbnz	r2, 800dcc6 <quorem+0xf2>
 800dcbc:	3b04      	subs	r3, #4
 800dcbe:	429d      	cmp	r5, r3
 800dcc0:	461a      	mov	r2, r3
 800dcc2:	d30a      	bcc.n	800dcda <quorem+0x106>
 800dcc4:	613c      	str	r4, [r7, #16]
 800dcc6:	4630      	mov	r0, r6
 800dcc8:	b003      	add	sp, #12
 800dcca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcce:	6812      	ldr	r2, [r2, #0]
 800dcd0:	3b04      	subs	r3, #4
 800dcd2:	2a00      	cmp	r2, #0
 800dcd4:	d1cc      	bne.n	800dc70 <quorem+0x9c>
 800dcd6:	3c01      	subs	r4, #1
 800dcd8:	e7c7      	b.n	800dc6a <quorem+0x96>
 800dcda:	6812      	ldr	r2, [r2, #0]
 800dcdc:	3b04      	subs	r3, #4
 800dcde:	2a00      	cmp	r2, #0
 800dce0:	d1f0      	bne.n	800dcc4 <quorem+0xf0>
 800dce2:	3c01      	subs	r4, #1
 800dce4:	e7eb      	b.n	800dcbe <quorem+0xea>
 800dce6:	2000      	movs	r0, #0
 800dce8:	e7ee      	b.n	800dcc8 <quorem+0xf4>
 800dcea:	0000      	movs	r0, r0
 800dcec:	0000      	movs	r0, r0
	...

0800dcf0 <_dtoa_r>:
 800dcf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcf4:	ed2d 8b02 	vpush	{d8}
 800dcf8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dcfa:	b091      	sub	sp, #68	; 0x44
 800dcfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd00:	ec59 8b10 	vmov	r8, r9, d0
 800dd04:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800dd06:	9106      	str	r1, [sp, #24]
 800dd08:	4606      	mov	r6, r0
 800dd0a:	9208      	str	r2, [sp, #32]
 800dd0c:	930c      	str	r3, [sp, #48]	; 0x30
 800dd0e:	b975      	cbnz	r5, 800dd2e <_dtoa_r+0x3e>
 800dd10:	2010      	movs	r0, #16
 800dd12:	f7f7 fea9 	bl	8005a68 <__wrap_malloc>
 800dd16:	4602      	mov	r2, r0
 800dd18:	6270      	str	r0, [r6, #36]	; 0x24
 800dd1a:	b920      	cbnz	r0, 800dd26 <_dtoa_r+0x36>
 800dd1c:	4baa      	ldr	r3, [pc, #680]	; (800dfc8 <_dtoa_r+0x2d8>)
 800dd1e:	21ea      	movs	r1, #234	; 0xea
 800dd20:	48aa      	ldr	r0, [pc, #680]	; (800dfcc <_dtoa_r+0x2dc>)
 800dd22:	f001 f8fd 	bl	800ef20 <__assert_func>
 800dd26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dd2a:	6005      	str	r5, [r0, #0]
 800dd2c:	60c5      	str	r5, [r0, #12]
 800dd2e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd30:	6819      	ldr	r1, [r3, #0]
 800dd32:	b151      	cbz	r1, 800dd4a <_dtoa_r+0x5a>
 800dd34:	685a      	ldr	r2, [r3, #4]
 800dd36:	604a      	str	r2, [r1, #4]
 800dd38:	2301      	movs	r3, #1
 800dd3a:	4093      	lsls	r3, r2
 800dd3c:	608b      	str	r3, [r1, #8]
 800dd3e:	4630      	mov	r0, r6
 800dd40:	f000 fd94 	bl	800e86c <_Bfree>
 800dd44:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dd46:	2200      	movs	r2, #0
 800dd48:	601a      	str	r2, [r3, #0]
 800dd4a:	f1b9 0300 	subs.w	r3, r9, #0
 800dd4e:	bfbb      	ittet	lt
 800dd50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dd54:	9303      	strlt	r3, [sp, #12]
 800dd56:	2300      	movge	r3, #0
 800dd58:	2201      	movlt	r2, #1
 800dd5a:	bfac      	ite	ge
 800dd5c:	6023      	strge	r3, [r4, #0]
 800dd5e:	6022      	strlt	r2, [r4, #0]
 800dd60:	4b9b      	ldr	r3, [pc, #620]	; (800dfd0 <_dtoa_r+0x2e0>)
 800dd62:	9c03      	ldr	r4, [sp, #12]
 800dd64:	43a3      	bics	r3, r4
 800dd66:	d11c      	bne.n	800dda2 <_dtoa_r+0xb2>
 800dd68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dd6a:	f242 730f 	movw	r3, #9999	; 0x270f
 800dd6e:	6013      	str	r3, [r2, #0]
 800dd70:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800dd74:	ea53 0308 	orrs.w	r3, r3, r8
 800dd78:	f000 84fd 	beq.w	800e776 <_dtoa_r+0xa86>
 800dd7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800dd7e:	b963      	cbnz	r3, 800dd9a <_dtoa_r+0xaa>
 800dd80:	4b94      	ldr	r3, [pc, #592]	; (800dfd4 <_dtoa_r+0x2e4>)
 800dd82:	e01f      	b.n	800ddc4 <_dtoa_r+0xd4>
 800dd84:	4b94      	ldr	r3, [pc, #592]	; (800dfd8 <_dtoa_r+0x2e8>)
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	3308      	adds	r3, #8
 800dd8a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800dd8c:	6013      	str	r3, [r2, #0]
 800dd8e:	9801      	ldr	r0, [sp, #4]
 800dd90:	b011      	add	sp, #68	; 0x44
 800dd92:	ecbd 8b02 	vpop	{d8}
 800dd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd9a:	4b8e      	ldr	r3, [pc, #568]	; (800dfd4 <_dtoa_r+0x2e4>)
 800dd9c:	9301      	str	r3, [sp, #4]
 800dd9e:	3303      	adds	r3, #3
 800dda0:	e7f3      	b.n	800dd8a <_dtoa_r+0x9a>
 800dda2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800dda6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ddaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddae:	d10b      	bne.n	800ddc8 <_dtoa_r+0xd8>
 800ddb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	6013      	str	r3, [r2, #0]
 800ddb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	f000 84d9 	beq.w	800e770 <_dtoa_r+0xa80>
 800ddbe:	4887      	ldr	r0, [pc, #540]	; (800dfdc <_dtoa_r+0x2ec>)
 800ddc0:	6018      	str	r0, [r3, #0]
 800ddc2:	1e43      	subs	r3, r0, #1
 800ddc4:	9301      	str	r3, [sp, #4]
 800ddc6:	e7e2      	b.n	800dd8e <_dtoa_r+0x9e>
 800ddc8:	a90f      	add	r1, sp, #60	; 0x3c
 800ddca:	aa0e      	add	r2, sp, #56	; 0x38
 800ddcc:	4630      	mov	r0, r6
 800ddce:	eeb0 0b48 	vmov.f64	d0, d8
 800ddd2:	f001 f833 	bl	800ee3c <__d2b>
 800ddd6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ddda:	4605      	mov	r5, r0
 800dddc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ddde:	2900      	cmp	r1, #0
 800dde0:	d046      	beq.n	800de70 <_dtoa_r+0x180>
 800dde2:	ee18 4a90 	vmov	r4, s17
 800dde6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ddea:	ec53 2b18 	vmov	r2, r3, d8
 800ddee:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ddf2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ddf6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ddfa:	2400      	movs	r4, #0
 800ddfc:	ec43 2b16 	vmov	d6, r2, r3
 800de00:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800de04:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800dfb0 <_dtoa_r+0x2c0>
 800de08:	ee36 7b47 	vsub.f64	d7, d6, d7
 800de0c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800dfb8 <_dtoa_r+0x2c8>
 800de10:	eea7 6b05 	vfma.f64	d6, d7, d5
 800de14:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800dfc0 <_dtoa_r+0x2d0>
 800de18:	ee07 1a90 	vmov	s15, r1
 800de1c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800de20:	eeb0 7b46 	vmov.f64	d7, d6
 800de24:	eea4 7b05 	vfma.f64	d7, d4, d5
 800de28:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800de2c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800de30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de34:	ee16 ba90 	vmov	fp, s13
 800de38:	940a      	str	r4, [sp, #40]	; 0x28
 800de3a:	d508      	bpl.n	800de4e <_dtoa_r+0x15e>
 800de3c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800de40:	eeb4 6b47 	vcmp.f64	d6, d7
 800de44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de48:	bf18      	it	ne
 800de4a:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800de4e:	f1bb 0f16 	cmp.w	fp, #22
 800de52:	d82f      	bhi.n	800deb4 <_dtoa_r+0x1c4>
 800de54:	4b62      	ldr	r3, [pc, #392]	; (800dfe0 <_dtoa_r+0x2f0>)
 800de56:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800de5a:	ed93 7b00 	vldr	d7, [r3]
 800de5e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800de62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de66:	d501      	bpl.n	800de6c <_dtoa_r+0x17c>
 800de68:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800de6c:	2300      	movs	r3, #0
 800de6e:	e022      	b.n	800deb6 <_dtoa_r+0x1c6>
 800de70:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800de72:	4401      	add	r1, r0
 800de74:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800de78:	2b20      	cmp	r3, #32
 800de7a:	bfc1      	itttt	gt
 800de7c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800de80:	fa04 f303 	lslgt.w	r3, r4, r3
 800de84:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800de88:	fa28 f804 	lsrgt.w	r8, r8, r4
 800de8c:	bfd6      	itet	le
 800de8e:	f1c3 0320 	rsble	r3, r3, #32
 800de92:	ea43 0808 	orrgt.w	r8, r3, r8
 800de96:	fa08 f803 	lslle.w	r8, r8, r3
 800de9a:	ee07 8a90 	vmov	s15, r8
 800de9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dea2:	3901      	subs	r1, #1
 800dea4:	ee17 4a90 	vmov	r4, s15
 800dea8:	ec53 2b17 	vmov	r2, r3, d7
 800deac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800deb0:	2401      	movs	r4, #1
 800deb2:	e7a3      	b.n	800ddfc <_dtoa_r+0x10c>
 800deb4:	2301      	movs	r3, #1
 800deb6:	930b      	str	r3, [sp, #44]	; 0x2c
 800deb8:	1a43      	subs	r3, r0, r1
 800deba:	1e5a      	subs	r2, r3, #1
 800debc:	bf45      	ittet	mi
 800debe:	f1c3 0301 	rsbmi	r3, r3, #1
 800dec2:	9304      	strmi	r3, [sp, #16]
 800dec4:	2300      	movpl	r3, #0
 800dec6:	2300      	movmi	r3, #0
 800dec8:	9205      	str	r2, [sp, #20]
 800deca:	bf54      	ite	pl
 800decc:	9304      	strpl	r3, [sp, #16]
 800dece:	9305      	strmi	r3, [sp, #20]
 800ded0:	f1bb 0f00 	cmp.w	fp, #0
 800ded4:	db18      	blt.n	800df08 <_dtoa_r+0x218>
 800ded6:	9b05      	ldr	r3, [sp, #20]
 800ded8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800dedc:	445b      	add	r3, fp
 800dede:	9305      	str	r3, [sp, #20]
 800dee0:	2300      	movs	r3, #0
 800dee2:	9a06      	ldr	r2, [sp, #24]
 800dee4:	2a09      	cmp	r2, #9
 800dee6:	d849      	bhi.n	800df7c <_dtoa_r+0x28c>
 800dee8:	2a05      	cmp	r2, #5
 800deea:	bfc4      	itt	gt
 800deec:	3a04      	subgt	r2, #4
 800deee:	9206      	strgt	r2, [sp, #24]
 800def0:	9a06      	ldr	r2, [sp, #24]
 800def2:	f1a2 0202 	sub.w	r2, r2, #2
 800def6:	bfcc      	ite	gt
 800def8:	2400      	movgt	r4, #0
 800defa:	2401      	movle	r4, #1
 800defc:	2a03      	cmp	r2, #3
 800defe:	d848      	bhi.n	800df92 <_dtoa_r+0x2a2>
 800df00:	e8df f002 	tbb	[pc, r2]
 800df04:	3a2c2e0b 	.word	0x3a2c2e0b
 800df08:	9b04      	ldr	r3, [sp, #16]
 800df0a:	2200      	movs	r2, #0
 800df0c:	eba3 030b 	sub.w	r3, r3, fp
 800df10:	9304      	str	r3, [sp, #16]
 800df12:	9209      	str	r2, [sp, #36]	; 0x24
 800df14:	f1cb 0300 	rsb	r3, fp, #0
 800df18:	e7e3      	b.n	800dee2 <_dtoa_r+0x1f2>
 800df1a:	2200      	movs	r2, #0
 800df1c:	9207      	str	r2, [sp, #28]
 800df1e:	9a08      	ldr	r2, [sp, #32]
 800df20:	2a00      	cmp	r2, #0
 800df22:	dc39      	bgt.n	800df98 <_dtoa_r+0x2a8>
 800df24:	f04f 0a01 	mov.w	sl, #1
 800df28:	46d1      	mov	r9, sl
 800df2a:	4652      	mov	r2, sl
 800df2c:	f8cd a020 	str.w	sl, [sp, #32]
 800df30:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800df32:	2100      	movs	r1, #0
 800df34:	6079      	str	r1, [r7, #4]
 800df36:	2004      	movs	r0, #4
 800df38:	f100 0c14 	add.w	ip, r0, #20
 800df3c:	4594      	cmp	ip, r2
 800df3e:	6879      	ldr	r1, [r7, #4]
 800df40:	d92f      	bls.n	800dfa2 <_dtoa_r+0x2b2>
 800df42:	4630      	mov	r0, r6
 800df44:	930d      	str	r3, [sp, #52]	; 0x34
 800df46:	f000 fc51 	bl	800e7ec <_Balloc>
 800df4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df4c:	9001      	str	r0, [sp, #4]
 800df4e:	4602      	mov	r2, r0
 800df50:	2800      	cmp	r0, #0
 800df52:	d149      	bne.n	800dfe8 <_dtoa_r+0x2f8>
 800df54:	4b23      	ldr	r3, [pc, #140]	; (800dfe4 <_dtoa_r+0x2f4>)
 800df56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800df5a:	e6e1      	b.n	800dd20 <_dtoa_r+0x30>
 800df5c:	2201      	movs	r2, #1
 800df5e:	e7dd      	b.n	800df1c <_dtoa_r+0x22c>
 800df60:	2200      	movs	r2, #0
 800df62:	9207      	str	r2, [sp, #28]
 800df64:	9a08      	ldr	r2, [sp, #32]
 800df66:	eb0b 0a02 	add.w	sl, fp, r2
 800df6a:	f10a 0901 	add.w	r9, sl, #1
 800df6e:	464a      	mov	r2, r9
 800df70:	2a01      	cmp	r2, #1
 800df72:	bfb8      	it	lt
 800df74:	2201      	movlt	r2, #1
 800df76:	e7db      	b.n	800df30 <_dtoa_r+0x240>
 800df78:	2201      	movs	r2, #1
 800df7a:	e7f2      	b.n	800df62 <_dtoa_r+0x272>
 800df7c:	2401      	movs	r4, #1
 800df7e:	2200      	movs	r2, #0
 800df80:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800df84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800df88:	2100      	movs	r1, #0
 800df8a:	46d1      	mov	r9, sl
 800df8c:	2212      	movs	r2, #18
 800df8e:	9108      	str	r1, [sp, #32]
 800df90:	e7ce      	b.n	800df30 <_dtoa_r+0x240>
 800df92:	2201      	movs	r2, #1
 800df94:	9207      	str	r2, [sp, #28]
 800df96:	e7f5      	b.n	800df84 <_dtoa_r+0x294>
 800df98:	f8dd a020 	ldr.w	sl, [sp, #32]
 800df9c:	46d1      	mov	r9, sl
 800df9e:	4652      	mov	r2, sl
 800dfa0:	e7c6      	b.n	800df30 <_dtoa_r+0x240>
 800dfa2:	3101      	adds	r1, #1
 800dfa4:	6079      	str	r1, [r7, #4]
 800dfa6:	0040      	lsls	r0, r0, #1
 800dfa8:	e7c6      	b.n	800df38 <_dtoa_r+0x248>
 800dfaa:	bf00      	nop
 800dfac:	f3af 8000 	nop.w
 800dfb0:	636f4361 	.word	0x636f4361
 800dfb4:	3fd287a7 	.word	0x3fd287a7
 800dfb8:	8b60c8b3 	.word	0x8b60c8b3
 800dfbc:	3fc68a28 	.word	0x3fc68a28
 800dfc0:	509f79fb 	.word	0x509f79fb
 800dfc4:	3fd34413 	.word	0x3fd34413
 800dfc8:	0806f847 	.word	0x0806f847
 800dfcc:	0806f85e 	.word	0x0806f85e
 800dfd0:	7ff00000 	.word	0x7ff00000
 800dfd4:	0806f843 	.word	0x0806f843
 800dfd8:	0806f83a 	.word	0x0806f83a
 800dfdc:	08010381 	.word	0x08010381
 800dfe0:	0806f950 	.word	0x0806f950
 800dfe4:	0806f8b9 	.word	0x0806f8b9
 800dfe8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800dfea:	9901      	ldr	r1, [sp, #4]
 800dfec:	6011      	str	r1, [r2, #0]
 800dfee:	f1b9 0f0e 	cmp.w	r9, #14
 800dff2:	d86c      	bhi.n	800e0ce <_dtoa_r+0x3de>
 800dff4:	2c00      	cmp	r4, #0
 800dff6:	d06a      	beq.n	800e0ce <_dtoa_r+0x3de>
 800dff8:	f1bb 0f00 	cmp.w	fp, #0
 800dffc:	f340 80a0 	ble.w	800e140 <_dtoa_r+0x450>
 800e000:	49c1      	ldr	r1, [pc, #772]	; (800e308 <_dtoa_r+0x618>)
 800e002:	f00b 020f 	and.w	r2, fp, #15
 800e006:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e00a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e00e:	ed92 7b00 	vldr	d7, [r2]
 800e012:	ea4f 112b 	mov.w	r1, fp, asr #4
 800e016:	f000 8087 	beq.w	800e128 <_dtoa_r+0x438>
 800e01a:	4abc      	ldr	r2, [pc, #752]	; (800e30c <_dtoa_r+0x61c>)
 800e01c:	ed92 6b08 	vldr	d6, [r2, #32]
 800e020:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800e024:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e028:	f001 010f 	and.w	r1, r1, #15
 800e02c:	2203      	movs	r2, #3
 800e02e:	48b7      	ldr	r0, [pc, #732]	; (800e30c <_dtoa_r+0x61c>)
 800e030:	2900      	cmp	r1, #0
 800e032:	d17b      	bne.n	800e12c <_dtoa_r+0x43c>
 800e034:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e038:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e03c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e040:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e042:	2900      	cmp	r1, #0
 800e044:	f000 80a2 	beq.w	800e18c <_dtoa_r+0x49c>
 800e048:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e04c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e050:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e058:	f140 8098 	bpl.w	800e18c <_dtoa_r+0x49c>
 800e05c:	f1b9 0f00 	cmp.w	r9, #0
 800e060:	f000 8094 	beq.w	800e18c <_dtoa_r+0x49c>
 800e064:	f1ba 0f00 	cmp.w	sl, #0
 800e068:	dd2f      	ble.n	800e0ca <_dtoa_r+0x3da>
 800e06a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800e06e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e072:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e076:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800e07a:	3201      	adds	r2, #1
 800e07c:	4650      	mov	r0, sl
 800e07e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e082:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800e086:	ee07 2a90 	vmov	s15, r2
 800e08a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e08e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800e092:	ee15 4a90 	vmov	r4, s11
 800e096:	ec52 1b15 	vmov	r1, r2, d5
 800e09a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	d177      	bne.n	800e192 <_dtoa_r+0x4a2>
 800e0a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e0a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e0aa:	ec42 1b17 	vmov	d7, r1, r2
 800e0ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0b6:	f300 8263 	bgt.w	800e580 <_dtoa_r+0x890>
 800e0ba:	eeb1 7b47 	vneg.f64	d7, d7
 800e0be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0c6:	f100 8258 	bmi.w	800e57a <_dtoa_r+0x88a>
 800e0ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e0ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e0d0:	2a00      	cmp	r2, #0
 800e0d2:	f2c0 811d 	blt.w	800e310 <_dtoa_r+0x620>
 800e0d6:	f1bb 0f0e 	cmp.w	fp, #14
 800e0da:	f300 8119 	bgt.w	800e310 <_dtoa_r+0x620>
 800e0de:	4b8a      	ldr	r3, [pc, #552]	; (800e308 <_dtoa_r+0x618>)
 800e0e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e0e4:	ed93 6b00 	vldr	d6, [r3]
 800e0e8:	9b08      	ldr	r3, [sp, #32]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	f280 80b7 	bge.w	800e25e <_dtoa_r+0x56e>
 800e0f0:	f1b9 0f00 	cmp.w	r9, #0
 800e0f4:	f300 80b3 	bgt.w	800e25e <_dtoa_r+0x56e>
 800e0f8:	f040 823f 	bne.w	800e57a <_dtoa_r+0x88a>
 800e0fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800e100:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e104:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e108:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e110:	464c      	mov	r4, r9
 800e112:	464f      	mov	r7, r9
 800e114:	f280 8215 	bge.w	800e542 <_dtoa_r+0x852>
 800e118:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e11c:	2331      	movs	r3, #49	; 0x31
 800e11e:	f808 3b01 	strb.w	r3, [r8], #1
 800e122:	f10b 0b01 	add.w	fp, fp, #1
 800e126:	e211      	b.n	800e54c <_dtoa_r+0x85c>
 800e128:	2202      	movs	r2, #2
 800e12a:	e780      	b.n	800e02e <_dtoa_r+0x33e>
 800e12c:	07cc      	lsls	r4, r1, #31
 800e12e:	d504      	bpl.n	800e13a <_dtoa_r+0x44a>
 800e130:	ed90 6b00 	vldr	d6, [r0]
 800e134:	3201      	adds	r2, #1
 800e136:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e13a:	1049      	asrs	r1, r1, #1
 800e13c:	3008      	adds	r0, #8
 800e13e:	e777      	b.n	800e030 <_dtoa_r+0x340>
 800e140:	d022      	beq.n	800e188 <_dtoa_r+0x498>
 800e142:	f1cb 0100 	rsb	r1, fp, #0
 800e146:	4a70      	ldr	r2, [pc, #448]	; (800e308 <_dtoa_r+0x618>)
 800e148:	f001 000f 	and.w	r0, r1, #15
 800e14c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e150:	ed92 7b00 	vldr	d7, [r2]
 800e154:	ee28 7b07 	vmul.f64	d7, d8, d7
 800e158:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e15c:	486b      	ldr	r0, [pc, #428]	; (800e30c <_dtoa_r+0x61c>)
 800e15e:	1109      	asrs	r1, r1, #4
 800e160:	2400      	movs	r4, #0
 800e162:	2202      	movs	r2, #2
 800e164:	b929      	cbnz	r1, 800e172 <_dtoa_r+0x482>
 800e166:	2c00      	cmp	r4, #0
 800e168:	f43f af6a 	beq.w	800e040 <_dtoa_r+0x350>
 800e16c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e170:	e766      	b.n	800e040 <_dtoa_r+0x350>
 800e172:	07cf      	lsls	r7, r1, #31
 800e174:	d505      	bpl.n	800e182 <_dtoa_r+0x492>
 800e176:	ed90 6b00 	vldr	d6, [r0]
 800e17a:	3201      	adds	r2, #1
 800e17c:	2401      	movs	r4, #1
 800e17e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e182:	1049      	asrs	r1, r1, #1
 800e184:	3008      	adds	r0, #8
 800e186:	e7ed      	b.n	800e164 <_dtoa_r+0x474>
 800e188:	2202      	movs	r2, #2
 800e18a:	e759      	b.n	800e040 <_dtoa_r+0x350>
 800e18c:	465f      	mov	r7, fp
 800e18e:	4648      	mov	r0, r9
 800e190:	e775      	b.n	800e07e <_dtoa_r+0x38e>
 800e192:	ec42 1b17 	vmov	d7, r1, r2
 800e196:	4a5c      	ldr	r2, [pc, #368]	; (800e308 <_dtoa_r+0x618>)
 800e198:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800e19c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800e1a0:	9a01      	ldr	r2, [sp, #4]
 800e1a2:	1814      	adds	r4, r2, r0
 800e1a4:	9a07      	ldr	r2, [sp, #28]
 800e1a6:	b352      	cbz	r2, 800e1fe <_dtoa_r+0x50e>
 800e1a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800e1ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800e1b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e1b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e1b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e1bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e1c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e1c4:	ee14 2a90 	vmov	r2, s9
 800e1c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e1cc:	3230      	adds	r2, #48	; 0x30
 800e1ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e1d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1da:	f808 2b01 	strb.w	r2, [r8], #1
 800e1de:	d439      	bmi.n	800e254 <_dtoa_r+0x564>
 800e1e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e1e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1ec:	d472      	bmi.n	800e2d4 <_dtoa_r+0x5e4>
 800e1ee:	45a0      	cmp	r8, r4
 800e1f0:	f43f af6b 	beq.w	800e0ca <_dtoa_r+0x3da>
 800e1f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e1f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e1fc:	e7e0      	b.n	800e1c0 <_dtoa_r+0x4d0>
 800e1fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e202:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e206:	4621      	mov	r1, r4
 800e208:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e20c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e210:	ee14 2a90 	vmov	r2, s9
 800e214:	3230      	adds	r2, #48	; 0x30
 800e216:	f808 2b01 	strb.w	r2, [r8], #1
 800e21a:	45a0      	cmp	r8, r4
 800e21c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e220:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e224:	d118      	bne.n	800e258 <_dtoa_r+0x568>
 800e226:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e22a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e22e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e236:	dc4d      	bgt.n	800e2d4 <_dtoa_r+0x5e4>
 800e238:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e23c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e244:	f57f af41 	bpl.w	800e0ca <_dtoa_r+0x3da>
 800e248:	4688      	mov	r8, r1
 800e24a:	3901      	subs	r1, #1
 800e24c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e250:	2b30      	cmp	r3, #48	; 0x30
 800e252:	d0f9      	beq.n	800e248 <_dtoa_r+0x558>
 800e254:	46bb      	mov	fp, r7
 800e256:	e02a      	b.n	800e2ae <_dtoa_r+0x5be>
 800e258:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e25c:	e7d6      	b.n	800e20c <_dtoa_r+0x51c>
 800e25e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e262:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e266:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e26a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e26e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e272:	ee15 3a10 	vmov	r3, s10
 800e276:	3330      	adds	r3, #48	; 0x30
 800e278:	f808 3b01 	strb.w	r3, [r8], #1
 800e27c:	9b01      	ldr	r3, [sp, #4]
 800e27e:	eba8 0303 	sub.w	r3, r8, r3
 800e282:	4599      	cmp	r9, r3
 800e284:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e288:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e28c:	d133      	bne.n	800e2f6 <_dtoa_r+0x606>
 800e28e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e292:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e29a:	dc1a      	bgt.n	800e2d2 <_dtoa_r+0x5e2>
 800e29c:	eeb4 7b46 	vcmp.f64	d7, d6
 800e2a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2a4:	d103      	bne.n	800e2ae <_dtoa_r+0x5be>
 800e2a6:	ee15 3a10 	vmov	r3, s10
 800e2aa:	07d9      	lsls	r1, r3, #31
 800e2ac:	d411      	bmi.n	800e2d2 <_dtoa_r+0x5e2>
 800e2ae:	4629      	mov	r1, r5
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f000 fadb 	bl	800e86c <_Bfree>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2ba:	f888 3000 	strb.w	r3, [r8]
 800e2be:	f10b 0301 	add.w	r3, fp, #1
 800e2c2:	6013      	str	r3, [r2, #0]
 800e2c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	f43f ad61 	beq.w	800dd8e <_dtoa_r+0x9e>
 800e2cc:	f8c3 8000 	str.w	r8, [r3]
 800e2d0:	e55d      	b.n	800dd8e <_dtoa_r+0x9e>
 800e2d2:	465f      	mov	r7, fp
 800e2d4:	4643      	mov	r3, r8
 800e2d6:	4698      	mov	r8, r3
 800e2d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2dc:	2a39      	cmp	r2, #57	; 0x39
 800e2de:	d106      	bne.n	800e2ee <_dtoa_r+0x5fe>
 800e2e0:	9a01      	ldr	r2, [sp, #4]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d1f7      	bne.n	800e2d6 <_dtoa_r+0x5e6>
 800e2e6:	9901      	ldr	r1, [sp, #4]
 800e2e8:	2230      	movs	r2, #48	; 0x30
 800e2ea:	3701      	adds	r7, #1
 800e2ec:	700a      	strb	r2, [r1, #0]
 800e2ee:	781a      	ldrb	r2, [r3, #0]
 800e2f0:	3201      	adds	r2, #1
 800e2f2:	701a      	strb	r2, [r3, #0]
 800e2f4:	e7ae      	b.n	800e254 <_dtoa_r+0x564>
 800e2f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e2fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e302:	d1b2      	bne.n	800e26a <_dtoa_r+0x57a>
 800e304:	e7d3      	b.n	800e2ae <_dtoa_r+0x5be>
 800e306:	bf00      	nop
 800e308:	0806f950 	.word	0x0806f950
 800e30c:	0806f928 	.word	0x0806f928
 800e310:	9907      	ldr	r1, [sp, #28]
 800e312:	2900      	cmp	r1, #0
 800e314:	f000 80d0 	beq.w	800e4b8 <_dtoa_r+0x7c8>
 800e318:	9906      	ldr	r1, [sp, #24]
 800e31a:	2901      	cmp	r1, #1
 800e31c:	f300 80b4 	bgt.w	800e488 <_dtoa_r+0x798>
 800e320:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e322:	2900      	cmp	r1, #0
 800e324:	f000 80ac 	beq.w	800e480 <_dtoa_r+0x790>
 800e328:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e32c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e330:	461c      	mov	r4, r3
 800e332:	930a      	str	r3, [sp, #40]	; 0x28
 800e334:	9b04      	ldr	r3, [sp, #16]
 800e336:	4413      	add	r3, r2
 800e338:	9304      	str	r3, [sp, #16]
 800e33a:	9b05      	ldr	r3, [sp, #20]
 800e33c:	2101      	movs	r1, #1
 800e33e:	4413      	add	r3, r2
 800e340:	4630      	mov	r0, r6
 800e342:	9305      	str	r3, [sp, #20]
 800e344:	f000 fb4a 	bl	800e9dc <__i2b>
 800e348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e34a:	4607      	mov	r7, r0
 800e34c:	f1b8 0f00 	cmp.w	r8, #0
 800e350:	dd0d      	ble.n	800e36e <_dtoa_r+0x67e>
 800e352:	9a05      	ldr	r2, [sp, #20]
 800e354:	2a00      	cmp	r2, #0
 800e356:	dd0a      	ble.n	800e36e <_dtoa_r+0x67e>
 800e358:	4542      	cmp	r2, r8
 800e35a:	9904      	ldr	r1, [sp, #16]
 800e35c:	bfa8      	it	ge
 800e35e:	4642      	movge	r2, r8
 800e360:	1a89      	subs	r1, r1, r2
 800e362:	9104      	str	r1, [sp, #16]
 800e364:	9905      	ldr	r1, [sp, #20]
 800e366:	eba8 0802 	sub.w	r8, r8, r2
 800e36a:	1a8a      	subs	r2, r1, r2
 800e36c:	9205      	str	r2, [sp, #20]
 800e36e:	b303      	cbz	r3, 800e3b2 <_dtoa_r+0x6c2>
 800e370:	9a07      	ldr	r2, [sp, #28]
 800e372:	2a00      	cmp	r2, #0
 800e374:	f000 80a5 	beq.w	800e4c2 <_dtoa_r+0x7d2>
 800e378:	2c00      	cmp	r4, #0
 800e37a:	dd13      	ble.n	800e3a4 <_dtoa_r+0x6b4>
 800e37c:	4639      	mov	r1, r7
 800e37e:	4622      	mov	r2, r4
 800e380:	4630      	mov	r0, r6
 800e382:	930d      	str	r3, [sp, #52]	; 0x34
 800e384:	f000 fbea 	bl	800eb5c <__pow5mult>
 800e388:	462a      	mov	r2, r5
 800e38a:	4601      	mov	r1, r0
 800e38c:	4607      	mov	r7, r0
 800e38e:	4630      	mov	r0, r6
 800e390:	f000 fb3a 	bl	800ea08 <__multiply>
 800e394:	4629      	mov	r1, r5
 800e396:	900a      	str	r0, [sp, #40]	; 0x28
 800e398:	4630      	mov	r0, r6
 800e39a:	f000 fa67 	bl	800e86c <_Bfree>
 800e39e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3a2:	4615      	mov	r5, r2
 800e3a4:	1b1a      	subs	r2, r3, r4
 800e3a6:	d004      	beq.n	800e3b2 <_dtoa_r+0x6c2>
 800e3a8:	4629      	mov	r1, r5
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	f000 fbd6 	bl	800eb5c <__pow5mult>
 800e3b0:	4605      	mov	r5, r0
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	f000 fb11 	bl	800e9dc <__i2b>
 800e3ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	4604      	mov	r4, r0
 800e3c0:	f340 8081 	ble.w	800e4c6 <_dtoa_r+0x7d6>
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	4601      	mov	r1, r0
 800e3c8:	4630      	mov	r0, r6
 800e3ca:	f000 fbc7 	bl	800eb5c <__pow5mult>
 800e3ce:	9b06      	ldr	r3, [sp, #24]
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	dd7a      	ble.n	800e4cc <_dtoa_r+0x7dc>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	930a      	str	r3, [sp, #40]	; 0x28
 800e3da:	6922      	ldr	r2, [r4, #16]
 800e3dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e3e0:	6910      	ldr	r0, [r2, #16]
 800e3e2:	f000 faab 	bl	800e93c <__hi0bits>
 800e3e6:	f1c0 0020 	rsb	r0, r0, #32
 800e3ea:	9b05      	ldr	r3, [sp, #20]
 800e3ec:	4418      	add	r0, r3
 800e3ee:	f010 001f 	ands.w	r0, r0, #31
 800e3f2:	f000 808c 	beq.w	800e50e <_dtoa_r+0x81e>
 800e3f6:	f1c0 0220 	rsb	r2, r0, #32
 800e3fa:	2a04      	cmp	r2, #4
 800e3fc:	f340 8085 	ble.w	800e50a <_dtoa_r+0x81a>
 800e400:	f1c0 001c 	rsb	r0, r0, #28
 800e404:	9b04      	ldr	r3, [sp, #16]
 800e406:	4403      	add	r3, r0
 800e408:	9304      	str	r3, [sp, #16]
 800e40a:	9b05      	ldr	r3, [sp, #20]
 800e40c:	4403      	add	r3, r0
 800e40e:	4480      	add	r8, r0
 800e410:	9305      	str	r3, [sp, #20]
 800e412:	9b04      	ldr	r3, [sp, #16]
 800e414:	2b00      	cmp	r3, #0
 800e416:	dd05      	ble.n	800e424 <_dtoa_r+0x734>
 800e418:	4629      	mov	r1, r5
 800e41a:	461a      	mov	r2, r3
 800e41c:	4630      	mov	r0, r6
 800e41e:	f000 fbf7 	bl	800ec10 <__lshift>
 800e422:	4605      	mov	r5, r0
 800e424:	9b05      	ldr	r3, [sp, #20]
 800e426:	2b00      	cmp	r3, #0
 800e428:	dd05      	ble.n	800e436 <_dtoa_r+0x746>
 800e42a:	4621      	mov	r1, r4
 800e42c:	461a      	mov	r2, r3
 800e42e:	4630      	mov	r0, r6
 800e430:	f000 fbee 	bl	800ec10 <__lshift>
 800e434:	4604      	mov	r4, r0
 800e436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d06a      	beq.n	800e512 <_dtoa_r+0x822>
 800e43c:	4621      	mov	r1, r4
 800e43e:	4628      	mov	r0, r5
 800e440:	f000 fc56 	bl	800ecf0 <__mcmp>
 800e444:	2800      	cmp	r0, #0
 800e446:	da64      	bge.n	800e512 <_dtoa_r+0x822>
 800e448:	2300      	movs	r3, #0
 800e44a:	4629      	mov	r1, r5
 800e44c:	220a      	movs	r2, #10
 800e44e:	4630      	mov	r0, r6
 800e450:	f000 fa2e 	bl	800e8b0 <__multadd>
 800e454:	9b07      	ldr	r3, [sp, #28]
 800e456:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e45a:	4605      	mov	r5, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f000 8191 	beq.w	800e784 <_dtoa_r+0xa94>
 800e462:	4639      	mov	r1, r7
 800e464:	2300      	movs	r3, #0
 800e466:	220a      	movs	r2, #10
 800e468:	4630      	mov	r0, r6
 800e46a:	f000 fa21 	bl	800e8b0 <__multadd>
 800e46e:	f1ba 0f00 	cmp.w	sl, #0
 800e472:	4607      	mov	r7, r0
 800e474:	f300 808d 	bgt.w	800e592 <_dtoa_r+0x8a2>
 800e478:	9b06      	ldr	r3, [sp, #24]
 800e47a:	2b02      	cmp	r3, #2
 800e47c:	dc50      	bgt.n	800e520 <_dtoa_r+0x830>
 800e47e:	e088      	b.n	800e592 <_dtoa_r+0x8a2>
 800e480:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e482:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e486:	e751      	b.n	800e32c <_dtoa_r+0x63c>
 800e488:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800e48c:	42a3      	cmp	r3, r4
 800e48e:	bfbf      	itttt	lt
 800e490:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800e492:	1ae3      	sublt	r3, r4, r3
 800e494:	18d2      	addlt	r2, r2, r3
 800e496:	9209      	strlt	r2, [sp, #36]	; 0x24
 800e498:	bfb6      	itet	lt
 800e49a:	4623      	movlt	r3, r4
 800e49c:	1b1c      	subge	r4, r3, r4
 800e49e:	2400      	movlt	r4, #0
 800e4a0:	f1b9 0f00 	cmp.w	r9, #0
 800e4a4:	bfb5      	itete	lt
 800e4a6:	9a04      	ldrlt	r2, [sp, #16]
 800e4a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800e4ac:	eba2 0809 	sublt.w	r8, r2, r9
 800e4b0:	464a      	movge	r2, r9
 800e4b2:	bfb8      	it	lt
 800e4b4:	2200      	movlt	r2, #0
 800e4b6:	e73c      	b.n	800e332 <_dtoa_r+0x642>
 800e4b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e4bc:	9f07      	ldr	r7, [sp, #28]
 800e4be:	461c      	mov	r4, r3
 800e4c0:	e744      	b.n	800e34c <_dtoa_r+0x65c>
 800e4c2:	461a      	mov	r2, r3
 800e4c4:	e770      	b.n	800e3a8 <_dtoa_r+0x6b8>
 800e4c6:	9b06      	ldr	r3, [sp, #24]
 800e4c8:	2b01      	cmp	r3, #1
 800e4ca:	dc18      	bgt.n	800e4fe <_dtoa_r+0x80e>
 800e4cc:	9b02      	ldr	r3, [sp, #8]
 800e4ce:	b9b3      	cbnz	r3, 800e4fe <_dtoa_r+0x80e>
 800e4d0:	9b03      	ldr	r3, [sp, #12]
 800e4d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e4d6:	b9a2      	cbnz	r2, 800e502 <_dtoa_r+0x812>
 800e4d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e4dc:	0d12      	lsrs	r2, r2, #20
 800e4de:	0512      	lsls	r2, r2, #20
 800e4e0:	b18a      	cbz	r2, 800e506 <_dtoa_r+0x816>
 800e4e2:	9b04      	ldr	r3, [sp, #16]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	9304      	str	r3, [sp, #16]
 800e4e8:	9b05      	ldr	r3, [sp, #20]
 800e4ea:	3301      	adds	r3, #1
 800e4ec:	9305      	str	r3, [sp, #20]
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	930a      	str	r3, [sp, #40]	; 0x28
 800e4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f47f af70 	bne.w	800e3da <_dtoa_r+0x6ea>
 800e4fa:	2001      	movs	r0, #1
 800e4fc:	e775      	b.n	800e3ea <_dtoa_r+0x6fa>
 800e4fe:	2300      	movs	r3, #0
 800e500:	e7f6      	b.n	800e4f0 <_dtoa_r+0x800>
 800e502:	9b02      	ldr	r3, [sp, #8]
 800e504:	e7f4      	b.n	800e4f0 <_dtoa_r+0x800>
 800e506:	920a      	str	r2, [sp, #40]	; 0x28
 800e508:	e7f3      	b.n	800e4f2 <_dtoa_r+0x802>
 800e50a:	d082      	beq.n	800e412 <_dtoa_r+0x722>
 800e50c:	4610      	mov	r0, r2
 800e50e:	301c      	adds	r0, #28
 800e510:	e778      	b.n	800e404 <_dtoa_r+0x714>
 800e512:	f1b9 0f00 	cmp.w	r9, #0
 800e516:	dc37      	bgt.n	800e588 <_dtoa_r+0x898>
 800e518:	9b06      	ldr	r3, [sp, #24]
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	dd34      	ble.n	800e588 <_dtoa_r+0x898>
 800e51e:	46ca      	mov	sl, r9
 800e520:	f1ba 0f00 	cmp.w	sl, #0
 800e524:	d10d      	bne.n	800e542 <_dtoa_r+0x852>
 800e526:	4621      	mov	r1, r4
 800e528:	4653      	mov	r3, sl
 800e52a:	2205      	movs	r2, #5
 800e52c:	4630      	mov	r0, r6
 800e52e:	f000 f9bf 	bl	800e8b0 <__multadd>
 800e532:	4601      	mov	r1, r0
 800e534:	4604      	mov	r4, r0
 800e536:	4628      	mov	r0, r5
 800e538:	f000 fbda 	bl	800ecf0 <__mcmp>
 800e53c:	2800      	cmp	r0, #0
 800e53e:	f73f adeb 	bgt.w	800e118 <_dtoa_r+0x428>
 800e542:	9b08      	ldr	r3, [sp, #32]
 800e544:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e548:	ea6f 0b03 	mvn.w	fp, r3
 800e54c:	f04f 0900 	mov.w	r9, #0
 800e550:	4621      	mov	r1, r4
 800e552:	4630      	mov	r0, r6
 800e554:	f000 f98a 	bl	800e86c <_Bfree>
 800e558:	2f00      	cmp	r7, #0
 800e55a:	f43f aea8 	beq.w	800e2ae <_dtoa_r+0x5be>
 800e55e:	f1b9 0f00 	cmp.w	r9, #0
 800e562:	d005      	beq.n	800e570 <_dtoa_r+0x880>
 800e564:	45b9      	cmp	r9, r7
 800e566:	d003      	beq.n	800e570 <_dtoa_r+0x880>
 800e568:	4649      	mov	r1, r9
 800e56a:	4630      	mov	r0, r6
 800e56c:	f000 f97e 	bl	800e86c <_Bfree>
 800e570:	4639      	mov	r1, r7
 800e572:	4630      	mov	r0, r6
 800e574:	f000 f97a 	bl	800e86c <_Bfree>
 800e578:	e699      	b.n	800e2ae <_dtoa_r+0x5be>
 800e57a:	2400      	movs	r4, #0
 800e57c:	4627      	mov	r7, r4
 800e57e:	e7e0      	b.n	800e542 <_dtoa_r+0x852>
 800e580:	46bb      	mov	fp, r7
 800e582:	4604      	mov	r4, r0
 800e584:	4607      	mov	r7, r0
 800e586:	e5c7      	b.n	800e118 <_dtoa_r+0x428>
 800e588:	9b07      	ldr	r3, [sp, #28]
 800e58a:	46ca      	mov	sl, r9
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f000 8100 	beq.w	800e792 <_dtoa_r+0xaa2>
 800e592:	f1b8 0f00 	cmp.w	r8, #0
 800e596:	dd05      	ble.n	800e5a4 <_dtoa_r+0x8b4>
 800e598:	4639      	mov	r1, r7
 800e59a:	4642      	mov	r2, r8
 800e59c:	4630      	mov	r0, r6
 800e59e:	f000 fb37 	bl	800ec10 <__lshift>
 800e5a2:	4607      	mov	r7, r0
 800e5a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d05d      	beq.n	800e666 <_dtoa_r+0x976>
 800e5aa:	6879      	ldr	r1, [r7, #4]
 800e5ac:	4630      	mov	r0, r6
 800e5ae:	f000 f91d 	bl	800e7ec <_Balloc>
 800e5b2:	4680      	mov	r8, r0
 800e5b4:	b928      	cbnz	r0, 800e5c2 <_dtoa_r+0x8d2>
 800e5b6:	4b82      	ldr	r3, [pc, #520]	; (800e7c0 <_dtoa_r+0xad0>)
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e5be:	f7ff bbaf 	b.w	800dd20 <_dtoa_r+0x30>
 800e5c2:	693a      	ldr	r2, [r7, #16]
 800e5c4:	3202      	adds	r2, #2
 800e5c6:	0092      	lsls	r2, r2, #2
 800e5c8:	f107 010c 	add.w	r1, r7, #12
 800e5cc:	300c      	adds	r0, #12
 800e5ce:	f7fe fda3 	bl	800d118 <memcpy>
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	4641      	mov	r1, r8
 800e5d6:	4630      	mov	r0, r6
 800e5d8:	f000 fb1a 	bl	800ec10 <__lshift>
 800e5dc:	9b01      	ldr	r3, [sp, #4]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	9304      	str	r3, [sp, #16]
 800e5e2:	9b01      	ldr	r3, [sp, #4]
 800e5e4:	4453      	add	r3, sl
 800e5e6:	9308      	str	r3, [sp, #32]
 800e5e8:	9b02      	ldr	r3, [sp, #8]
 800e5ea:	f003 0301 	and.w	r3, r3, #1
 800e5ee:	46b9      	mov	r9, r7
 800e5f0:	9307      	str	r3, [sp, #28]
 800e5f2:	4607      	mov	r7, r0
 800e5f4:	9b04      	ldr	r3, [sp, #16]
 800e5f6:	4621      	mov	r1, r4
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	4628      	mov	r0, r5
 800e5fc:	9302      	str	r3, [sp, #8]
 800e5fe:	f7ff fae9 	bl	800dbd4 <quorem>
 800e602:	4603      	mov	r3, r0
 800e604:	3330      	adds	r3, #48	; 0x30
 800e606:	9005      	str	r0, [sp, #20]
 800e608:	4649      	mov	r1, r9
 800e60a:	4628      	mov	r0, r5
 800e60c:	9309      	str	r3, [sp, #36]	; 0x24
 800e60e:	f000 fb6f 	bl	800ecf0 <__mcmp>
 800e612:	463a      	mov	r2, r7
 800e614:	4682      	mov	sl, r0
 800e616:	4621      	mov	r1, r4
 800e618:	4630      	mov	r0, r6
 800e61a:	f000 fb85 	bl	800ed28 <__mdiff>
 800e61e:	68c2      	ldr	r2, [r0, #12]
 800e620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e622:	4680      	mov	r8, r0
 800e624:	bb0a      	cbnz	r2, 800e66a <_dtoa_r+0x97a>
 800e626:	4601      	mov	r1, r0
 800e628:	4628      	mov	r0, r5
 800e62a:	f000 fb61 	bl	800ecf0 <__mcmp>
 800e62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e630:	4602      	mov	r2, r0
 800e632:	4641      	mov	r1, r8
 800e634:	4630      	mov	r0, r6
 800e636:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800e63a:	f000 f917 	bl	800e86c <_Bfree>
 800e63e:	9b06      	ldr	r3, [sp, #24]
 800e640:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e642:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800e646:	ea43 0102 	orr.w	r1, r3, r2
 800e64a:	9b07      	ldr	r3, [sp, #28]
 800e64c:	430b      	orrs	r3, r1
 800e64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e650:	d10d      	bne.n	800e66e <_dtoa_r+0x97e>
 800e652:	2b39      	cmp	r3, #57	; 0x39
 800e654:	d029      	beq.n	800e6aa <_dtoa_r+0x9ba>
 800e656:	f1ba 0f00 	cmp.w	sl, #0
 800e65a:	dd01      	ble.n	800e660 <_dtoa_r+0x970>
 800e65c:	9b05      	ldr	r3, [sp, #20]
 800e65e:	3331      	adds	r3, #49	; 0x31
 800e660:	9a02      	ldr	r2, [sp, #8]
 800e662:	7013      	strb	r3, [r2, #0]
 800e664:	e774      	b.n	800e550 <_dtoa_r+0x860>
 800e666:	4638      	mov	r0, r7
 800e668:	e7b8      	b.n	800e5dc <_dtoa_r+0x8ec>
 800e66a:	2201      	movs	r2, #1
 800e66c:	e7e1      	b.n	800e632 <_dtoa_r+0x942>
 800e66e:	f1ba 0f00 	cmp.w	sl, #0
 800e672:	db06      	blt.n	800e682 <_dtoa_r+0x992>
 800e674:	9906      	ldr	r1, [sp, #24]
 800e676:	ea41 0a0a 	orr.w	sl, r1, sl
 800e67a:	9907      	ldr	r1, [sp, #28]
 800e67c:	ea5a 0101 	orrs.w	r1, sl, r1
 800e680:	d120      	bne.n	800e6c4 <_dtoa_r+0x9d4>
 800e682:	2a00      	cmp	r2, #0
 800e684:	ddec      	ble.n	800e660 <_dtoa_r+0x970>
 800e686:	4629      	mov	r1, r5
 800e688:	2201      	movs	r2, #1
 800e68a:	4630      	mov	r0, r6
 800e68c:	9304      	str	r3, [sp, #16]
 800e68e:	f000 fabf 	bl	800ec10 <__lshift>
 800e692:	4621      	mov	r1, r4
 800e694:	4605      	mov	r5, r0
 800e696:	f000 fb2b 	bl	800ecf0 <__mcmp>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	9b04      	ldr	r3, [sp, #16]
 800e69e:	dc02      	bgt.n	800e6a6 <_dtoa_r+0x9b6>
 800e6a0:	d1de      	bne.n	800e660 <_dtoa_r+0x970>
 800e6a2:	07da      	lsls	r2, r3, #31
 800e6a4:	d5dc      	bpl.n	800e660 <_dtoa_r+0x970>
 800e6a6:	2b39      	cmp	r3, #57	; 0x39
 800e6a8:	d1d8      	bne.n	800e65c <_dtoa_r+0x96c>
 800e6aa:	9a02      	ldr	r2, [sp, #8]
 800e6ac:	2339      	movs	r3, #57	; 0x39
 800e6ae:	7013      	strb	r3, [r2, #0]
 800e6b0:	4643      	mov	r3, r8
 800e6b2:	4698      	mov	r8, r3
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e6ba:	2a39      	cmp	r2, #57	; 0x39
 800e6bc:	d051      	beq.n	800e762 <_dtoa_r+0xa72>
 800e6be:	3201      	adds	r2, #1
 800e6c0:	701a      	strb	r2, [r3, #0]
 800e6c2:	e745      	b.n	800e550 <_dtoa_r+0x860>
 800e6c4:	2a00      	cmp	r2, #0
 800e6c6:	dd03      	ble.n	800e6d0 <_dtoa_r+0x9e0>
 800e6c8:	2b39      	cmp	r3, #57	; 0x39
 800e6ca:	d0ee      	beq.n	800e6aa <_dtoa_r+0x9ba>
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	e7c7      	b.n	800e660 <_dtoa_r+0x970>
 800e6d0:	9a04      	ldr	r2, [sp, #16]
 800e6d2:	9908      	ldr	r1, [sp, #32]
 800e6d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e6d8:	428a      	cmp	r2, r1
 800e6da:	d02b      	beq.n	800e734 <_dtoa_r+0xa44>
 800e6dc:	4629      	mov	r1, r5
 800e6de:	2300      	movs	r3, #0
 800e6e0:	220a      	movs	r2, #10
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	f000 f8e4 	bl	800e8b0 <__multadd>
 800e6e8:	45b9      	cmp	r9, r7
 800e6ea:	4605      	mov	r5, r0
 800e6ec:	f04f 0300 	mov.w	r3, #0
 800e6f0:	f04f 020a 	mov.w	r2, #10
 800e6f4:	4649      	mov	r1, r9
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	d107      	bne.n	800e70a <_dtoa_r+0xa1a>
 800e6fa:	f000 f8d9 	bl	800e8b0 <__multadd>
 800e6fe:	4681      	mov	r9, r0
 800e700:	4607      	mov	r7, r0
 800e702:	9b04      	ldr	r3, [sp, #16]
 800e704:	3301      	adds	r3, #1
 800e706:	9304      	str	r3, [sp, #16]
 800e708:	e774      	b.n	800e5f4 <_dtoa_r+0x904>
 800e70a:	f000 f8d1 	bl	800e8b0 <__multadd>
 800e70e:	4639      	mov	r1, r7
 800e710:	4681      	mov	r9, r0
 800e712:	2300      	movs	r3, #0
 800e714:	220a      	movs	r2, #10
 800e716:	4630      	mov	r0, r6
 800e718:	f000 f8ca 	bl	800e8b0 <__multadd>
 800e71c:	4607      	mov	r7, r0
 800e71e:	e7f0      	b.n	800e702 <_dtoa_r+0xa12>
 800e720:	f1ba 0f00 	cmp.w	sl, #0
 800e724:	9a01      	ldr	r2, [sp, #4]
 800e726:	bfcc      	ite	gt
 800e728:	46d0      	movgt	r8, sl
 800e72a:	f04f 0801 	movle.w	r8, #1
 800e72e:	4490      	add	r8, r2
 800e730:	f04f 0900 	mov.w	r9, #0
 800e734:	4629      	mov	r1, r5
 800e736:	2201      	movs	r2, #1
 800e738:	4630      	mov	r0, r6
 800e73a:	9302      	str	r3, [sp, #8]
 800e73c:	f000 fa68 	bl	800ec10 <__lshift>
 800e740:	4621      	mov	r1, r4
 800e742:	4605      	mov	r5, r0
 800e744:	f000 fad4 	bl	800ecf0 <__mcmp>
 800e748:	2800      	cmp	r0, #0
 800e74a:	dcb1      	bgt.n	800e6b0 <_dtoa_r+0x9c0>
 800e74c:	d102      	bne.n	800e754 <_dtoa_r+0xa64>
 800e74e:	9b02      	ldr	r3, [sp, #8]
 800e750:	07db      	lsls	r3, r3, #31
 800e752:	d4ad      	bmi.n	800e6b0 <_dtoa_r+0x9c0>
 800e754:	4643      	mov	r3, r8
 800e756:	4698      	mov	r8, r3
 800e758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e75c:	2a30      	cmp	r2, #48	; 0x30
 800e75e:	d0fa      	beq.n	800e756 <_dtoa_r+0xa66>
 800e760:	e6f6      	b.n	800e550 <_dtoa_r+0x860>
 800e762:	9a01      	ldr	r2, [sp, #4]
 800e764:	429a      	cmp	r2, r3
 800e766:	d1a4      	bne.n	800e6b2 <_dtoa_r+0x9c2>
 800e768:	f10b 0b01 	add.w	fp, fp, #1
 800e76c:	2331      	movs	r3, #49	; 0x31
 800e76e:	e778      	b.n	800e662 <_dtoa_r+0x972>
 800e770:	4b14      	ldr	r3, [pc, #80]	; (800e7c4 <_dtoa_r+0xad4>)
 800e772:	f7ff bb27 	b.w	800ddc4 <_dtoa_r+0xd4>
 800e776:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e778:	2b00      	cmp	r3, #0
 800e77a:	f47f ab03 	bne.w	800dd84 <_dtoa_r+0x94>
 800e77e:	4b12      	ldr	r3, [pc, #72]	; (800e7c8 <_dtoa_r+0xad8>)
 800e780:	f7ff bb20 	b.w	800ddc4 <_dtoa_r+0xd4>
 800e784:	f1ba 0f00 	cmp.w	sl, #0
 800e788:	dc03      	bgt.n	800e792 <_dtoa_r+0xaa2>
 800e78a:	9b06      	ldr	r3, [sp, #24]
 800e78c:	2b02      	cmp	r3, #2
 800e78e:	f73f aec7 	bgt.w	800e520 <_dtoa_r+0x830>
 800e792:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e796:	4621      	mov	r1, r4
 800e798:	4628      	mov	r0, r5
 800e79a:	f7ff fa1b 	bl	800dbd4 <quorem>
 800e79e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e7a2:	f808 3b01 	strb.w	r3, [r8], #1
 800e7a6:	9a01      	ldr	r2, [sp, #4]
 800e7a8:	eba8 0202 	sub.w	r2, r8, r2
 800e7ac:	4592      	cmp	sl, r2
 800e7ae:	ddb7      	ble.n	800e720 <_dtoa_r+0xa30>
 800e7b0:	4629      	mov	r1, r5
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	220a      	movs	r2, #10
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f000 f87a 	bl	800e8b0 <__multadd>
 800e7bc:	4605      	mov	r5, r0
 800e7be:	e7ea      	b.n	800e796 <_dtoa_r+0xaa6>
 800e7c0:	0806f8b9 	.word	0x0806f8b9
 800e7c4:	08010380 	.word	0x08010380
 800e7c8:	0806f83a 	.word	0x0806f83a

0800e7cc <_localeconv_r>:
 800e7cc:	4800      	ldr	r0, [pc, #0]	; (800e7d0 <_localeconv_r+0x4>)
 800e7ce:	4770      	bx	lr
 800e7d0:	20001418 	.word	0x20001418

0800e7d4 <__malloc_lock>:
 800e7d4:	4801      	ldr	r0, [pc, #4]	; (800e7dc <__malloc_lock+0x8>)
 800e7d6:	f000 bbd4 	b.w	800ef82 <__retarget_lock_acquire_recursive>
 800e7da:	bf00      	nop
 800e7dc:	20008f48 	.word	0x20008f48

0800e7e0 <__malloc_unlock>:
 800e7e0:	4801      	ldr	r0, [pc, #4]	; (800e7e8 <__malloc_unlock+0x8>)
 800e7e2:	f000 bbcf 	b.w	800ef84 <__retarget_lock_release_recursive>
 800e7e6:	bf00      	nop
 800e7e8:	20008f48 	.word	0x20008f48

0800e7ec <_Balloc>:
 800e7ec:	b570      	push	{r4, r5, r6, lr}
 800e7ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e7f0:	4604      	mov	r4, r0
 800e7f2:	460d      	mov	r5, r1
 800e7f4:	b976      	cbnz	r6, 800e814 <_Balloc+0x28>
 800e7f6:	2010      	movs	r0, #16
 800e7f8:	f7f7 f936 	bl	8005a68 <__wrap_malloc>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	6260      	str	r0, [r4, #36]	; 0x24
 800e800:	b920      	cbnz	r0, 800e80c <_Balloc+0x20>
 800e802:	4b18      	ldr	r3, [pc, #96]	; (800e864 <_Balloc+0x78>)
 800e804:	4818      	ldr	r0, [pc, #96]	; (800e868 <_Balloc+0x7c>)
 800e806:	2166      	movs	r1, #102	; 0x66
 800e808:	f000 fb8a 	bl	800ef20 <__assert_func>
 800e80c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e810:	6006      	str	r6, [r0, #0]
 800e812:	60c6      	str	r6, [r0, #12]
 800e814:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e816:	68f3      	ldr	r3, [r6, #12]
 800e818:	b183      	cbz	r3, 800e83c <_Balloc+0x50>
 800e81a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e822:	b9b8      	cbnz	r0, 800e854 <_Balloc+0x68>
 800e824:	2101      	movs	r1, #1
 800e826:	fa01 f605 	lsl.w	r6, r1, r5
 800e82a:	1d72      	adds	r2, r6, #5
 800e82c:	0092      	lsls	r2, r2, #2
 800e82e:	4620      	mov	r0, r4
 800e830:	f000 fb60 	bl	800eef4 <_calloc_r>
 800e834:	b160      	cbz	r0, 800e850 <_Balloc+0x64>
 800e836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e83a:	e00e      	b.n	800e85a <_Balloc+0x6e>
 800e83c:	2221      	movs	r2, #33	; 0x21
 800e83e:	2104      	movs	r1, #4
 800e840:	4620      	mov	r0, r4
 800e842:	f000 fb57 	bl	800eef4 <_calloc_r>
 800e846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e848:	60f0      	str	r0, [r6, #12]
 800e84a:	68db      	ldr	r3, [r3, #12]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d1e4      	bne.n	800e81a <_Balloc+0x2e>
 800e850:	2000      	movs	r0, #0
 800e852:	bd70      	pop	{r4, r5, r6, pc}
 800e854:	6802      	ldr	r2, [r0, #0]
 800e856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e85a:	2300      	movs	r3, #0
 800e85c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e860:	e7f7      	b.n	800e852 <_Balloc+0x66>
 800e862:	bf00      	nop
 800e864:	0806f847 	.word	0x0806f847
 800e868:	0806f8ca 	.word	0x0806f8ca

0800e86c <_Bfree>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e870:	4605      	mov	r5, r0
 800e872:	460c      	mov	r4, r1
 800e874:	b976      	cbnz	r6, 800e894 <_Bfree+0x28>
 800e876:	2010      	movs	r0, #16
 800e878:	f7f7 f8f6 	bl	8005a68 <__wrap_malloc>
 800e87c:	4602      	mov	r2, r0
 800e87e:	6268      	str	r0, [r5, #36]	; 0x24
 800e880:	b920      	cbnz	r0, 800e88c <_Bfree+0x20>
 800e882:	4b09      	ldr	r3, [pc, #36]	; (800e8a8 <_Bfree+0x3c>)
 800e884:	4809      	ldr	r0, [pc, #36]	; (800e8ac <_Bfree+0x40>)
 800e886:	218a      	movs	r1, #138	; 0x8a
 800e888:	f000 fb4a 	bl	800ef20 <__assert_func>
 800e88c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e890:	6006      	str	r6, [r0, #0]
 800e892:	60c6      	str	r6, [r0, #12]
 800e894:	b13c      	cbz	r4, 800e8a6 <_Bfree+0x3a>
 800e896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e898:	6862      	ldr	r2, [r4, #4]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e8a0:	6021      	str	r1, [r4, #0]
 800e8a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e8a6:	bd70      	pop	{r4, r5, r6, pc}
 800e8a8:	0806f847 	.word	0x0806f847
 800e8ac:	0806f8ca 	.word	0x0806f8ca

0800e8b0 <__multadd>:
 800e8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b4:	690d      	ldr	r5, [r1, #16]
 800e8b6:	4607      	mov	r7, r0
 800e8b8:	460c      	mov	r4, r1
 800e8ba:	461e      	mov	r6, r3
 800e8bc:	f101 0c14 	add.w	ip, r1, #20
 800e8c0:	2000      	movs	r0, #0
 800e8c2:	f8dc 3000 	ldr.w	r3, [ip]
 800e8c6:	b299      	uxth	r1, r3
 800e8c8:	fb02 6101 	mla	r1, r2, r1, r6
 800e8cc:	0c1e      	lsrs	r6, r3, #16
 800e8ce:	0c0b      	lsrs	r3, r1, #16
 800e8d0:	fb02 3306 	mla	r3, r2, r6, r3
 800e8d4:	b289      	uxth	r1, r1
 800e8d6:	3001      	adds	r0, #1
 800e8d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e8dc:	4285      	cmp	r5, r0
 800e8de:	f84c 1b04 	str.w	r1, [ip], #4
 800e8e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e8e6:	dcec      	bgt.n	800e8c2 <__multadd+0x12>
 800e8e8:	b30e      	cbz	r6, 800e92e <__multadd+0x7e>
 800e8ea:	68a3      	ldr	r3, [r4, #8]
 800e8ec:	42ab      	cmp	r3, r5
 800e8ee:	dc19      	bgt.n	800e924 <__multadd+0x74>
 800e8f0:	6861      	ldr	r1, [r4, #4]
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	3101      	adds	r1, #1
 800e8f6:	f7ff ff79 	bl	800e7ec <_Balloc>
 800e8fa:	4680      	mov	r8, r0
 800e8fc:	b928      	cbnz	r0, 800e90a <__multadd+0x5a>
 800e8fe:	4602      	mov	r2, r0
 800e900:	4b0c      	ldr	r3, [pc, #48]	; (800e934 <__multadd+0x84>)
 800e902:	480d      	ldr	r0, [pc, #52]	; (800e938 <__multadd+0x88>)
 800e904:	21b5      	movs	r1, #181	; 0xb5
 800e906:	f000 fb0b 	bl	800ef20 <__assert_func>
 800e90a:	6922      	ldr	r2, [r4, #16]
 800e90c:	3202      	adds	r2, #2
 800e90e:	f104 010c 	add.w	r1, r4, #12
 800e912:	0092      	lsls	r2, r2, #2
 800e914:	300c      	adds	r0, #12
 800e916:	f7fe fbff 	bl	800d118 <memcpy>
 800e91a:	4621      	mov	r1, r4
 800e91c:	4638      	mov	r0, r7
 800e91e:	f7ff ffa5 	bl	800e86c <_Bfree>
 800e922:	4644      	mov	r4, r8
 800e924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e928:	3501      	adds	r5, #1
 800e92a:	615e      	str	r6, [r3, #20]
 800e92c:	6125      	str	r5, [r4, #16]
 800e92e:	4620      	mov	r0, r4
 800e930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e934:	0806f8b9 	.word	0x0806f8b9
 800e938:	0806f8ca 	.word	0x0806f8ca

0800e93c <__hi0bits>:
 800e93c:	0c03      	lsrs	r3, r0, #16
 800e93e:	041b      	lsls	r3, r3, #16
 800e940:	b9d3      	cbnz	r3, 800e978 <__hi0bits+0x3c>
 800e942:	0400      	lsls	r0, r0, #16
 800e944:	2310      	movs	r3, #16
 800e946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e94a:	bf04      	itt	eq
 800e94c:	0200      	lsleq	r0, r0, #8
 800e94e:	3308      	addeq	r3, #8
 800e950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e954:	bf04      	itt	eq
 800e956:	0100      	lsleq	r0, r0, #4
 800e958:	3304      	addeq	r3, #4
 800e95a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e95e:	bf04      	itt	eq
 800e960:	0080      	lsleq	r0, r0, #2
 800e962:	3302      	addeq	r3, #2
 800e964:	2800      	cmp	r0, #0
 800e966:	db05      	blt.n	800e974 <__hi0bits+0x38>
 800e968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e96c:	f103 0301 	add.w	r3, r3, #1
 800e970:	bf08      	it	eq
 800e972:	2320      	moveq	r3, #32
 800e974:	4618      	mov	r0, r3
 800e976:	4770      	bx	lr
 800e978:	2300      	movs	r3, #0
 800e97a:	e7e4      	b.n	800e946 <__hi0bits+0xa>

0800e97c <__lo0bits>:
 800e97c:	6803      	ldr	r3, [r0, #0]
 800e97e:	f013 0207 	ands.w	r2, r3, #7
 800e982:	4601      	mov	r1, r0
 800e984:	d00b      	beq.n	800e99e <__lo0bits+0x22>
 800e986:	07da      	lsls	r2, r3, #31
 800e988:	d423      	bmi.n	800e9d2 <__lo0bits+0x56>
 800e98a:	0798      	lsls	r0, r3, #30
 800e98c:	bf49      	itett	mi
 800e98e:	085b      	lsrmi	r3, r3, #1
 800e990:	089b      	lsrpl	r3, r3, #2
 800e992:	2001      	movmi	r0, #1
 800e994:	600b      	strmi	r3, [r1, #0]
 800e996:	bf5c      	itt	pl
 800e998:	600b      	strpl	r3, [r1, #0]
 800e99a:	2002      	movpl	r0, #2
 800e99c:	4770      	bx	lr
 800e99e:	b298      	uxth	r0, r3
 800e9a0:	b9a8      	cbnz	r0, 800e9ce <__lo0bits+0x52>
 800e9a2:	0c1b      	lsrs	r3, r3, #16
 800e9a4:	2010      	movs	r0, #16
 800e9a6:	b2da      	uxtb	r2, r3
 800e9a8:	b90a      	cbnz	r2, 800e9ae <__lo0bits+0x32>
 800e9aa:	3008      	adds	r0, #8
 800e9ac:	0a1b      	lsrs	r3, r3, #8
 800e9ae:	071a      	lsls	r2, r3, #28
 800e9b0:	bf04      	itt	eq
 800e9b2:	091b      	lsreq	r3, r3, #4
 800e9b4:	3004      	addeq	r0, #4
 800e9b6:	079a      	lsls	r2, r3, #30
 800e9b8:	bf04      	itt	eq
 800e9ba:	089b      	lsreq	r3, r3, #2
 800e9bc:	3002      	addeq	r0, #2
 800e9be:	07da      	lsls	r2, r3, #31
 800e9c0:	d403      	bmi.n	800e9ca <__lo0bits+0x4e>
 800e9c2:	085b      	lsrs	r3, r3, #1
 800e9c4:	f100 0001 	add.w	r0, r0, #1
 800e9c8:	d005      	beq.n	800e9d6 <__lo0bits+0x5a>
 800e9ca:	600b      	str	r3, [r1, #0]
 800e9cc:	4770      	bx	lr
 800e9ce:	4610      	mov	r0, r2
 800e9d0:	e7e9      	b.n	800e9a6 <__lo0bits+0x2a>
 800e9d2:	2000      	movs	r0, #0
 800e9d4:	4770      	bx	lr
 800e9d6:	2020      	movs	r0, #32
 800e9d8:	4770      	bx	lr
	...

0800e9dc <__i2b>:
 800e9dc:	b510      	push	{r4, lr}
 800e9de:	460c      	mov	r4, r1
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	f7ff ff03 	bl	800e7ec <_Balloc>
 800e9e6:	4602      	mov	r2, r0
 800e9e8:	b928      	cbnz	r0, 800e9f6 <__i2b+0x1a>
 800e9ea:	4b05      	ldr	r3, [pc, #20]	; (800ea00 <__i2b+0x24>)
 800e9ec:	4805      	ldr	r0, [pc, #20]	; (800ea04 <__i2b+0x28>)
 800e9ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e9f2:	f000 fa95 	bl	800ef20 <__assert_func>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	6144      	str	r4, [r0, #20]
 800e9fa:	6103      	str	r3, [r0, #16]
 800e9fc:	bd10      	pop	{r4, pc}
 800e9fe:	bf00      	nop
 800ea00:	0806f8b9 	.word	0x0806f8b9
 800ea04:	0806f8ca 	.word	0x0806f8ca

0800ea08 <__multiply>:
 800ea08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea0c:	4691      	mov	r9, r2
 800ea0e:	690a      	ldr	r2, [r1, #16]
 800ea10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea14:	429a      	cmp	r2, r3
 800ea16:	bfb8      	it	lt
 800ea18:	460b      	movlt	r3, r1
 800ea1a:	460c      	mov	r4, r1
 800ea1c:	bfbc      	itt	lt
 800ea1e:	464c      	movlt	r4, r9
 800ea20:	4699      	movlt	r9, r3
 800ea22:	6927      	ldr	r7, [r4, #16]
 800ea24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea28:	68a3      	ldr	r3, [r4, #8]
 800ea2a:	6861      	ldr	r1, [r4, #4]
 800ea2c:	eb07 060a 	add.w	r6, r7, sl
 800ea30:	42b3      	cmp	r3, r6
 800ea32:	b085      	sub	sp, #20
 800ea34:	bfb8      	it	lt
 800ea36:	3101      	addlt	r1, #1
 800ea38:	f7ff fed8 	bl	800e7ec <_Balloc>
 800ea3c:	b930      	cbnz	r0, 800ea4c <__multiply+0x44>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	4b44      	ldr	r3, [pc, #272]	; (800eb54 <__multiply+0x14c>)
 800ea42:	4845      	ldr	r0, [pc, #276]	; (800eb58 <__multiply+0x150>)
 800ea44:	f240 115d 	movw	r1, #349	; 0x15d
 800ea48:	f000 fa6a 	bl	800ef20 <__assert_func>
 800ea4c:	f100 0514 	add.w	r5, r0, #20
 800ea50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea54:	462b      	mov	r3, r5
 800ea56:	2200      	movs	r2, #0
 800ea58:	4543      	cmp	r3, r8
 800ea5a:	d321      	bcc.n	800eaa0 <__multiply+0x98>
 800ea5c:	f104 0314 	add.w	r3, r4, #20
 800ea60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea64:	f109 0314 	add.w	r3, r9, #20
 800ea68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea6c:	9202      	str	r2, [sp, #8]
 800ea6e:	1b3a      	subs	r2, r7, r4
 800ea70:	3a15      	subs	r2, #21
 800ea72:	f022 0203 	bic.w	r2, r2, #3
 800ea76:	3204      	adds	r2, #4
 800ea78:	f104 0115 	add.w	r1, r4, #21
 800ea7c:	428f      	cmp	r7, r1
 800ea7e:	bf38      	it	cc
 800ea80:	2204      	movcc	r2, #4
 800ea82:	9201      	str	r2, [sp, #4]
 800ea84:	9a02      	ldr	r2, [sp, #8]
 800ea86:	9303      	str	r3, [sp, #12]
 800ea88:	429a      	cmp	r2, r3
 800ea8a:	d80c      	bhi.n	800eaa6 <__multiply+0x9e>
 800ea8c:	2e00      	cmp	r6, #0
 800ea8e:	dd03      	ble.n	800ea98 <__multiply+0x90>
 800ea90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d05a      	beq.n	800eb4e <__multiply+0x146>
 800ea98:	6106      	str	r6, [r0, #16]
 800ea9a:	b005      	add	sp, #20
 800ea9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa0:	f843 2b04 	str.w	r2, [r3], #4
 800eaa4:	e7d8      	b.n	800ea58 <__multiply+0x50>
 800eaa6:	f8b3 a000 	ldrh.w	sl, [r3]
 800eaaa:	f1ba 0f00 	cmp.w	sl, #0
 800eaae:	d024      	beq.n	800eafa <__multiply+0xf2>
 800eab0:	f104 0e14 	add.w	lr, r4, #20
 800eab4:	46a9      	mov	r9, r5
 800eab6:	f04f 0c00 	mov.w	ip, #0
 800eaba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eabe:	f8d9 1000 	ldr.w	r1, [r9]
 800eac2:	fa1f fb82 	uxth.w	fp, r2
 800eac6:	b289      	uxth	r1, r1
 800eac8:	fb0a 110b 	mla	r1, sl, fp, r1
 800eacc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ead0:	f8d9 2000 	ldr.w	r2, [r9]
 800ead4:	4461      	add	r1, ip
 800ead6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eada:	fb0a c20b 	mla	r2, sl, fp, ip
 800eade:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eae2:	b289      	uxth	r1, r1
 800eae4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eae8:	4577      	cmp	r7, lr
 800eaea:	f849 1b04 	str.w	r1, [r9], #4
 800eaee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eaf2:	d8e2      	bhi.n	800eaba <__multiply+0xb2>
 800eaf4:	9a01      	ldr	r2, [sp, #4]
 800eaf6:	f845 c002 	str.w	ip, [r5, r2]
 800eafa:	9a03      	ldr	r2, [sp, #12]
 800eafc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb00:	3304      	adds	r3, #4
 800eb02:	f1b9 0f00 	cmp.w	r9, #0
 800eb06:	d020      	beq.n	800eb4a <__multiply+0x142>
 800eb08:	6829      	ldr	r1, [r5, #0]
 800eb0a:	f104 0c14 	add.w	ip, r4, #20
 800eb0e:	46ae      	mov	lr, r5
 800eb10:	f04f 0a00 	mov.w	sl, #0
 800eb14:	f8bc b000 	ldrh.w	fp, [ip]
 800eb18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb1c:	fb09 220b 	mla	r2, r9, fp, r2
 800eb20:	4492      	add	sl, r2
 800eb22:	b289      	uxth	r1, r1
 800eb24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800eb28:	f84e 1b04 	str.w	r1, [lr], #4
 800eb2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800eb30:	f8be 1000 	ldrh.w	r1, [lr]
 800eb34:	0c12      	lsrs	r2, r2, #16
 800eb36:	fb09 1102 	mla	r1, r9, r2, r1
 800eb3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800eb3e:	4567      	cmp	r7, ip
 800eb40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb44:	d8e6      	bhi.n	800eb14 <__multiply+0x10c>
 800eb46:	9a01      	ldr	r2, [sp, #4]
 800eb48:	50a9      	str	r1, [r5, r2]
 800eb4a:	3504      	adds	r5, #4
 800eb4c:	e79a      	b.n	800ea84 <__multiply+0x7c>
 800eb4e:	3e01      	subs	r6, #1
 800eb50:	e79c      	b.n	800ea8c <__multiply+0x84>
 800eb52:	bf00      	nop
 800eb54:	0806f8b9 	.word	0x0806f8b9
 800eb58:	0806f8ca 	.word	0x0806f8ca

0800eb5c <__pow5mult>:
 800eb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb60:	4615      	mov	r5, r2
 800eb62:	f012 0203 	ands.w	r2, r2, #3
 800eb66:	4606      	mov	r6, r0
 800eb68:	460f      	mov	r7, r1
 800eb6a:	d007      	beq.n	800eb7c <__pow5mult+0x20>
 800eb6c:	4c25      	ldr	r4, [pc, #148]	; (800ec04 <__pow5mult+0xa8>)
 800eb6e:	3a01      	subs	r2, #1
 800eb70:	2300      	movs	r3, #0
 800eb72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb76:	f7ff fe9b 	bl	800e8b0 <__multadd>
 800eb7a:	4607      	mov	r7, r0
 800eb7c:	10ad      	asrs	r5, r5, #2
 800eb7e:	d03d      	beq.n	800ebfc <__pow5mult+0xa0>
 800eb80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eb82:	b97c      	cbnz	r4, 800eba4 <__pow5mult+0x48>
 800eb84:	2010      	movs	r0, #16
 800eb86:	f7f6 ff6f 	bl	8005a68 <__wrap_malloc>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	6270      	str	r0, [r6, #36]	; 0x24
 800eb8e:	b928      	cbnz	r0, 800eb9c <__pow5mult+0x40>
 800eb90:	4b1d      	ldr	r3, [pc, #116]	; (800ec08 <__pow5mult+0xac>)
 800eb92:	481e      	ldr	r0, [pc, #120]	; (800ec0c <__pow5mult+0xb0>)
 800eb94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eb98:	f000 f9c2 	bl	800ef20 <__assert_func>
 800eb9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eba0:	6004      	str	r4, [r0, #0]
 800eba2:	60c4      	str	r4, [r0, #12]
 800eba4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eba8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebac:	b94c      	cbnz	r4, 800ebc2 <__pow5mult+0x66>
 800ebae:	f240 2171 	movw	r1, #625	; 0x271
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f7ff ff12 	bl	800e9dc <__i2b>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebbe:	4604      	mov	r4, r0
 800ebc0:	6003      	str	r3, [r0, #0]
 800ebc2:	f04f 0900 	mov.w	r9, #0
 800ebc6:	07eb      	lsls	r3, r5, #31
 800ebc8:	d50a      	bpl.n	800ebe0 <__pow5mult+0x84>
 800ebca:	4639      	mov	r1, r7
 800ebcc:	4622      	mov	r2, r4
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f7ff ff1a 	bl	800ea08 <__multiply>
 800ebd4:	4639      	mov	r1, r7
 800ebd6:	4680      	mov	r8, r0
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f7ff fe47 	bl	800e86c <_Bfree>
 800ebde:	4647      	mov	r7, r8
 800ebe0:	106d      	asrs	r5, r5, #1
 800ebe2:	d00b      	beq.n	800ebfc <__pow5mult+0xa0>
 800ebe4:	6820      	ldr	r0, [r4, #0]
 800ebe6:	b938      	cbnz	r0, 800ebf8 <__pow5mult+0x9c>
 800ebe8:	4622      	mov	r2, r4
 800ebea:	4621      	mov	r1, r4
 800ebec:	4630      	mov	r0, r6
 800ebee:	f7ff ff0b 	bl	800ea08 <__multiply>
 800ebf2:	6020      	str	r0, [r4, #0]
 800ebf4:	f8c0 9000 	str.w	r9, [r0]
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	e7e4      	b.n	800ebc6 <__pow5mult+0x6a>
 800ebfc:	4638      	mov	r0, r7
 800ebfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec02:	bf00      	nop
 800ec04:	0806fa18 	.word	0x0806fa18
 800ec08:	0806f847 	.word	0x0806f847
 800ec0c:	0806f8ca 	.word	0x0806f8ca

0800ec10 <__lshift>:
 800ec10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec14:	460c      	mov	r4, r1
 800ec16:	6849      	ldr	r1, [r1, #4]
 800ec18:	6923      	ldr	r3, [r4, #16]
 800ec1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec1e:	68a3      	ldr	r3, [r4, #8]
 800ec20:	4607      	mov	r7, r0
 800ec22:	4691      	mov	r9, r2
 800ec24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec28:	f108 0601 	add.w	r6, r8, #1
 800ec2c:	42b3      	cmp	r3, r6
 800ec2e:	db0b      	blt.n	800ec48 <__lshift+0x38>
 800ec30:	4638      	mov	r0, r7
 800ec32:	f7ff fddb 	bl	800e7ec <_Balloc>
 800ec36:	4605      	mov	r5, r0
 800ec38:	b948      	cbnz	r0, 800ec4e <__lshift+0x3e>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	4b2a      	ldr	r3, [pc, #168]	; (800ece8 <__lshift+0xd8>)
 800ec3e:	482b      	ldr	r0, [pc, #172]	; (800ecec <__lshift+0xdc>)
 800ec40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ec44:	f000 f96c 	bl	800ef20 <__assert_func>
 800ec48:	3101      	adds	r1, #1
 800ec4a:	005b      	lsls	r3, r3, #1
 800ec4c:	e7ee      	b.n	800ec2c <__lshift+0x1c>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	f100 0114 	add.w	r1, r0, #20
 800ec54:	f100 0210 	add.w	r2, r0, #16
 800ec58:	4618      	mov	r0, r3
 800ec5a:	4553      	cmp	r3, sl
 800ec5c:	db37      	blt.n	800ecce <__lshift+0xbe>
 800ec5e:	6920      	ldr	r0, [r4, #16]
 800ec60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec64:	f104 0314 	add.w	r3, r4, #20
 800ec68:	f019 091f 	ands.w	r9, r9, #31
 800ec6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ec74:	d02f      	beq.n	800ecd6 <__lshift+0xc6>
 800ec76:	f1c9 0e20 	rsb	lr, r9, #32
 800ec7a:	468a      	mov	sl, r1
 800ec7c:	f04f 0c00 	mov.w	ip, #0
 800ec80:	681a      	ldr	r2, [r3, #0]
 800ec82:	fa02 f209 	lsl.w	r2, r2, r9
 800ec86:	ea42 020c 	orr.w	r2, r2, ip
 800ec8a:	f84a 2b04 	str.w	r2, [sl], #4
 800ec8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec92:	4298      	cmp	r0, r3
 800ec94:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ec98:	d8f2      	bhi.n	800ec80 <__lshift+0x70>
 800ec9a:	1b03      	subs	r3, r0, r4
 800ec9c:	3b15      	subs	r3, #21
 800ec9e:	f023 0303 	bic.w	r3, r3, #3
 800eca2:	3304      	adds	r3, #4
 800eca4:	f104 0215 	add.w	r2, r4, #21
 800eca8:	4290      	cmp	r0, r2
 800ecaa:	bf38      	it	cc
 800ecac:	2304      	movcc	r3, #4
 800ecae:	f841 c003 	str.w	ip, [r1, r3]
 800ecb2:	f1bc 0f00 	cmp.w	ip, #0
 800ecb6:	d001      	beq.n	800ecbc <__lshift+0xac>
 800ecb8:	f108 0602 	add.w	r6, r8, #2
 800ecbc:	3e01      	subs	r6, #1
 800ecbe:	4638      	mov	r0, r7
 800ecc0:	612e      	str	r6, [r5, #16]
 800ecc2:	4621      	mov	r1, r4
 800ecc4:	f7ff fdd2 	bl	800e86c <_Bfree>
 800ecc8:	4628      	mov	r0, r5
 800ecca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecce:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	e7c1      	b.n	800ec5a <__lshift+0x4a>
 800ecd6:	3904      	subs	r1, #4
 800ecd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecdc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ece0:	4298      	cmp	r0, r3
 800ece2:	d8f9      	bhi.n	800ecd8 <__lshift+0xc8>
 800ece4:	e7ea      	b.n	800ecbc <__lshift+0xac>
 800ece6:	bf00      	nop
 800ece8:	0806f8b9 	.word	0x0806f8b9
 800ecec:	0806f8ca 	.word	0x0806f8ca

0800ecf0 <__mcmp>:
 800ecf0:	b530      	push	{r4, r5, lr}
 800ecf2:	6902      	ldr	r2, [r0, #16]
 800ecf4:	690c      	ldr	r4, [r1, #16]
 800ecf6:	1b12      	subs	r2, r2, r4
 800ecf8:	d10e      	bne.n	800ed18 <__mcmp+0x28>
 800ecfa:	f100 0314 	add.w	r3, r0, #20
 800ecfe:	3114      	adds	r1, #20
 800ed00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ed04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ed08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ed0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ed10:	42a5      	cmp	r5, r4
 800ed12:	d003      	beq.n	800ed1c <__mcmp+0x2c>
 800ed14:	d305      	bcc.n	800ed22 <__mcmp+0x32>
 800ed16:	2201      	movs	r2, #1
 800ed18:	4610      	mov	r0, r2
 800ed1a:	bd30      	pop	{r4, r5, pc}
 800ed1c:	4283      	cmp	r3, r0
 800ed1e:	d3f3      	bcc.n	800ed08 <__mcmp+0x18>
 800ed20:	e7fa      	b.n	800ed18 <__mcmp+0x28>
 800ed22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed26:	e7f7      	b.n	800ed18 <__mcmp+0x28>

0800ed28 <__mdiff>:
 800ed28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed2c:	460c      	mov	r4, r1
 800ed2e:	4606      	mov	r6, r0
 800ed30:	4611      	mov	r1, r2
 800ed32:	4620      	mov	r0, r4
 800ed34:	4690      	mov	r8, r2
 800ed36:	f7ff ffdb 	bl	800ecf0 <__mcmp>
 800ed3a:	1e05      	subs	r5, r0, #0
 800ed3c:	d110      	bne.n	800ed60 <__mdiff+0x38>
 800ed3e:	4629      	mov	r1, r5
 800ed40:	4630      	mov	r0, r6
 800ed42:	f7ff fd53 	bl	800e7ec <_Balloc>
 800ed46:	b930      	cbnz	r0, 800ed56 <__mdiff+0x2e>
 800ed48:	4b3a      	ldr	r3, [pc, #232]	; (800ee34 <__mdiff+0x10c>)
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	f240 2132 	movw	r1, #562	; 0x232
 800ed50:	4839      	ldr	r0, [pc, #228]	; (800ee38 <__mdiff+0x110>)
 800ed52:	f000 f8e5 	bl	800ef20 <__assert_func>
 800ed56:	2301      	movs	r3, #1
 800ed58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ed5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed60:	bfa4      	itt	ge
 800ed62:	4643      	movge	r3, r8
 800ed64:	46a0      	movge	r8, r4
 800ed66:	4630      	mov	r0, r6
 800ed68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ed6c:	bfa6      	itte	ge
 800ed6e:	461c      	movge	r4, r3
 800ed70:	2500      	movge	r5, #0
 800ed72:	2501      	movlt	r5, #1
 800ed74:	f7ff fd3a 	bl	800e7ec <_Balloc>
 800ed78:	b920      	cbnz	r0, 800ed84 <__mdiff+0x5c>
 800ed7a:	4b2e      	ldr	r3, [pc, #184]	; (800ee34 <__mdiff+0x10c>)
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ed82:	e7e5      	b.n	800ed50 <__mdiff+0x28>
 800ed84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ed88:	6926      	ldr	r6, [r4, #16]
 800ed8a:	60c5      	str	r5, [r0, #12]
 800ed8c:	f104 0914 	add.w	r9, r4, #20
 800ed90:	f108 0514 	add.w	r5, r8, #20
 800ed94:	f100 0e14 	add.w	lr, r0, #20
 800ed98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ed9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800eda0:	f108 0210 	add.w	r2, r8, #16
 800eda4:	46f2      	mov	sl, lr
 800eda6:	2100      	movs	r1, #0
 800eda8:	f859 3b04 	ldr.w	r3, [r9], #4
 800edac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800edb0:	fa1f f883 	uxth.w	r8, r3
 800edb4:	fa11 f18b 	uxtah	r1, r1, fp
 800edb8:	0c1b      	lsrs	r3, r3, #16
 800edba:	eba1 0808 	sub.w	r8, r1, r8
 800edbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800edc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800edc6:	fa1f f888 	uxth.w	r8, r8
 800edca:	1419      	asrs	r1, r3, #16
 800edcc:	454e      	cmp	r6, r9
 800edce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800edd2:	f84a 3b04 	str.w	r3, [sl], #4
 800edd6:	d8e7      	bhi.n	800eda8 <__mdiff+0x80>
 800edd8:	1b33      	subs	r3, r6, r4
 800edda:	3b15      	subs	r3, #21
 800eddc:	f023 0303 	bic.w	r3, r3, #3
 800ede0:	3304      	adds	r3, #4
 800ede2:	3415      	adds	r4, #21
 800ede4:	42a6      	cmp	r6, r4
 800ede6:	bf38      	it	cc
 800ede8:	2304      	movcc	r3, #4
 800edea:	441d      	add	r5, r3
 800edec:	4473      	add	r3, lr
 800edee:	469e      	mov	lr, r3
 800edf0:	462e      	mov	r6, r5
 800edf2:	4566      	cmp	r6, ip
 800edf4:	d30e      	bcc.n	800ee14 <__mdiff+0xec>
 800edf6:	f10c 0203 	add.w	r2, ip, #3
 800edfa:	1b52      	subs	r2, r2, r5
 800edfc:	f022 0203 	bic.w	r2, r2, #3
 800ee00:	3d03      	subs	r5, #3
 800ee02:	45ac      	cmp	ip, r5
 800ee04:	bf38      	it	cc
 800ee06:	2200      	movcc	r2, #0
 800ee08:	441a      	add	r2, r3
 800ee0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ee0e:	b17b      	cbz	r3, 800ee30 <__mdiff+0x108>
 800ee10:	6107      	str	r7, [r0, #16]
 800ee12:	e7a3      	b.n	800ed5c <__mdiff+0x34>
 800ee14:	f856 8b04 	ldr.w	r8, [r6], #4
 800ee18:	fa11 f288 	uxtah	r2, r1, r8
 800ee1c:	1414      	asrs	r4, r2, #16
 800ee1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee22:	b292      	uxth	r2, r2
 800ee24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ee28:	f84e 2b04 	str.w	r2, [lr], #4
 800ee2c:	1421      	asrs	r1, r4, #16
 800ee2e:	e7e0      	b.n	800edf2 <__mdiff+0xca>
 800ee30:	3f01      	subs	r7, #1
 800ee32:	e7ea      	b.n	800ee0a <__mdiff+0xe2>
 800ee34:	0806f8b9 	.word	0x0806f8b9
 800ee38:	0806f8ca 	.word	0x0806f8ca

0800ee3c <__d2b>:
 800ee3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee40:	4689      	mov	r9, r1
 800ee42:	2101      	movs	r1, #1
 800ee44:	ec57 6b10 	vmov	r6, r7, d0
 800ee48:	4690      	mov	r8, r2
 800ee4a:	f7ff fccf 	bl	800e7ec <_Balloc>
 800ee4e:	4604      	mov	r4, r0
 800ee50:	b930      	cbnz	r0, 800ee60 <__d2b+0x24>
 800ee52:	4602      	mov	r2, r0
 800ee54:	4b25      	ldr	r3, [pc, #148]	; (800eeec <__d2b+0xb0>)
 800ee56:	4826      	ldr	r0, [pc, #152]	; (800eef0 <__d2b+0xb4>)
 800ee58:	f240 310a 	movw	r1, #778	; 0x30a
 800ee5c:	f000 f860 	bl	800ef20 <__assert_func>
 800ee60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ee64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ee68:	bb35      	cbnz	r5, 800eeb8 <__d2b+0x7c>
 800ee6a:	2e00      	cmp	r6, #0
 800ee6c:	9301      	str	r3, [sp, #4]
 800ee6e:	d028      	beq.n	800eec2 <__d2b+0x86>
 800ee70:	4668      	mov	r0, sp
 800ee72:	9600      	str	r6, [sp, #0]
 800ee74:	f7ff fd82 	bl	800e97c <__lo0bits>
 800ee78:	9900      	ldr	r1, [sp, #0]
 800ee7a:	b300      	cbz	r0, 800eebe <__d2b+0x82>
 800ee7c:	9a01      	ldr	r2, [sp, #4]
 800ee7e:	f1c0 0320 	rsb	r3, r0, #32
 800ee82:	fa02 f303 	lsl.w	r3, r2, r3
 800ee86:	430b      	orrs	r3, r1
 800ee88:	40c2      	lsrs	r2, r0
 800ee8a:	6163      	str	r3, [r4, #20]
 800ee8c:	9201      	str	r2, [sp, #4]
 800ee8e:	9b01      	ldr	r3, [sp, #4]
 800ee90:	61a3      	str	r3, [r4, #24]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	bf14      	ite	ne
 800ee96:	2202      	movne	r2, #2
 800ee98:	2201      	moveq	r2, #1
 800ee9a:	6122      	str	r2, [r4, #16]
 800ee9c:	b1d5      	cbz	r5, 800eed4 <__d2b+0x98>
 800ee9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800eea2:	4405      	add	r5, r0
 800eea4:	f8c9 5000 	str.w	r5, [r9]
 800eea8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800eeac:	f8c8 0000 	str.w	r0, [r8]
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	b003      	add	sp, #12
 800eeb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eeb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eebc:	e7d5      	b.n	800ee6a <__d2b+0x2e>
 800eebe:	6161      	str	r1, [r4, #20]
 800eec0:	e7e5      	b.n	800ee8e <__d2b+0x52>
 800eec2:	a801      	add	r0, sp, #4
 800eec4:	f7ff fd5a 	bl	800e97c <__lo0bits>
 800eec8:	9b01      	ldr	r3, [sp, #4]
 800eeca:	6163      	str	r3, [r4, #20]
 800eecc:	2201      	movs	r2, #1
 800eece:	6122      	str	r2, [r4, #16]
 800eed0:	3020      	adds	r0, #32
 800eed2:	e7e3      	b.n	800ee9c <__d2b+0x60>
 800eed4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800eed8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eedc:	f8c9 0000 	str.w	r0, [r9]
 800eee0:	6918      	ldr	r0, [r3, #16]
 800eee2:	f7ff fd2b 	bl	800e93c <__hi0bits>
 800eee6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800eeea:	e7df      	b.n	800eeac <__d2b+0x70>
 800eeec:	0806f8b9 	.word	0x0806f8b9
 800eef0:	0806f8ca 	.word	0x0806f8ca

0800eef4 <_calloc_r>:
 800eef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eef6:	fba1 2402 	umull	r2, r4, r1, r2
 800eefa:	b94c      	cbnz	r4, 800ef10 <_calloc_r+0x1c>
 800eefc:	4611      	mov	r1, r2
 800eefe:	9201      	str	r2, [sp, #4]
 800ef00:	f7fe f98c 	bl	800d21c <_malloc_r>
 800ef04:	9a01      	ldr	r2, [sp, #4]
 800ef06:	4605      	mov	r5, r0
 800ef08:	b930      	cbnz	r0, 800ef18 <_calloc_r+0x24>
 800ef0a:	4628      	mov	r0, r5
 800ef0c:	b003      	add	sp, #12
 800ef0e:	bd30      	pop	{r4, r5, pc}
 800ef10:	220c      	movs	r2, #12
 800ef12:	6002      	str	r2, [r0, #0]
 800ef14:	2500      	movs	r5, #0
 800ef16:	e7f8      	b.n	800ef0a <_calloc_r+0x16>
 800ef18:	4621      	mov	r1, r4
 800ef1a:	f7fe f90b 	bl	800d134 <memset>
 800ef1e:	e7f4      	b.n	800ef0a <_calloc_r+0x16>

0800ef20 <__assert_func>:
 800ef20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef22:	4614      	mov	r4, r2
 800ef24:	461a      	mov	r2, r3
 800ef26:	4b09      	ldr	r3, [pc, #36]	; (800ef4c <__assert_func+0x2c>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	68d8      	ldr	r0, [r3, #12]
 800ef2e:	b14c      	cbz	r4, 800ef44 <__assert_func+0x24>
 800ef30:	4b07      	ldr	r3, [pc, #28]	; (800ef50 <__assert_func+0x30>)
 800ef32:	9100      	str	r1, [sp, #0]
 800ef34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef38:	4906      	ldr	r1, [pc, #24]	; (800ef54 <__assert_func+0x34>)
 800ef3a:	462b      	mov	r3, r5
 800ef3c:	f000 f80e 	bl	800ef5c <fiprintf>
 800ef40:	f000 fa5a 	bl	800f3f8 <abort>
 800ef44:	4b04      	ldr	r3, [pc, #16]	; (800ef58 <__assert_func+0x38>)
 800ef46:	461c      	mov	r4, r3
 800ef48:	e7f3      	b.n	800ef32 <__assert_func+0x12>
 800ef4a:	bf00      	nop
 800ef4c:	200012c4 	.word	0x200012c4
 800ef50:	0806fa24 	.word	0x0806fa24
 800ef54:	0806fa31 	.word	0x0806fa31
 800ef58:	0806fa5f 	.word	0x0806fa5f

0800ef5c <fiprintf>:
 800ef5c:	b40e      	push	{r1, r2, r3}
 800ef5e:	b503      	push	{r0, r1, lr}
 800ef60:	4601      	mov	r1, r0
 800ef62:	ab03      	add	r3, sp, #12
 800ef64:	4805      	ldr	r0, [pc, #20]	; (800ef7c <fiprintf+0x20>)
 800ef66:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef6a:	6800      	ldr	r0, [r0, #0]
 800ef6c:	9301      	str	r3, [sp, #4]
 800ef6e:	f000 f845 	bl	800effc <_vfiprintf_r>
 800ef72:	b002      	add	sp, #8
 800ef74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef78:	b003      	add	sp, #12
 800ef7a:	4770      	bx	lr
 800ef7c:	200012c4 	.word	0x200012c4

0800ef80 <__retarget_lock_init_recursive>:
 800ef80:	4770      	bx	lr

0800ef82 <__retarget_lock_acquire_recursive>:
 800ef82:	4770      	bx	lr

0800ef84 <__retarget_lock_release_recursive>:
 800ef84:	4770      	bx	lr

0800ef86 <__ascii_mbtowc>:
 800ef86:	b082      	sub	sp, #8
 800ef88:	b901      	cbnz	r1, 800ef8c <__ascii_mbtowc+0x6>
 800ef8a:	a901      	add	r1, sp, #4
 800ef8c:	b142      	cbz	r2, 800efa0 <__ascii_mbtowc+0x1a>
 800ef8e:	b14b      	cbz	r3, 800efa4 <__ascii_mbtowc+0x1e>
 800ef90:	7813      	ldrb	r3, [r2, #0]
 800ef92:	600b      	str	r3, [r1, #0]
 800ef94:	7812      	ldrb	r2, [r2, #0]
 800ef96:	1e10      	subs	r0, r2, #0
 800ef98:	bf18      	it	ne
 800ef9a:	2001      	movne	r0, #1
 800ef9c:	b002      	add	sp, #8
 800ef9e:	4770      	bx	lr
 800efa0:	4610      	mov	r0, r2
 800efa2:	e7fb      	b.n	800ef9c <__ascii_mbtowc+0x16>
 800efa4:	f06f 0001 	mvn.w	r0, #1
 800efa8:	e7f8      	b.n	800ef9c <__ascii_mbtowc+0x16>

0800efaa <__sfputc_r>:
 800efaa:	6893      	ldr	r3, [r2, #8]
 800efac:	3b01      	subs	r3, #1
 800efae:	2b00      	cmp	r3, #0
 800efb0:	b410      	push	{r4}
 800efb2:	6093      	str	r3, [r2, #8]
 800efb4:	da08      	bge.n	800efc8 <__sfputc_r+0x1e>
 800efb6:	6994      	ldr	r4, [r2, #24]
 800efb8:	42a3      	cmp	r3, r4
 800efba:	db01      	blt.n	800efc0 <__sfputc_r+0x16>
 800efbc:	290a      	cmp	r1, #10
 800efbe:	d103      	bne.n	800efc8 <__sfputc_r+0x1e>
 800efc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efc4:	f000 b94a 	b.w	800f25c <__swbuf_r>
 800efc8:	6813      	ldr	r3, [r2, #0]
 800efca:	1c58      	adds	r0, r3, #1
 800efcc:	6010      	str	r0, [r2, #0]
 800efce:	7019      	strb	r1, [r3, #0]
 800efd0:	4608      	mov	r0, r1
 800efd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efd6:	4770      	bx	lr

0800efd8 <__sfputs_r>:
 800efd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efda:	4606      	mov	r6, r0
 800efdc:	460f      	mov	r7, r1
 800efde:	4614      	mov	r4, r2
 800efe0:	18d5      	adds	r5, r2, r3
 800efe2:	42ac      	cmp	r4, r5
 800efe4:	d101      	bne.n	800efea <__sfputs_r+0x12>
 800efe6:	2000      	movs	r0, #0
 800efe8:	e007      	b.n	800effa <__sfputs_r+0x22>
 800efea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efee:	463a      	mov	r2, r7
 800eff0:	4630      	mov	r0, r6
 800eff2:	f7ff ffda 	bl	800efaa <__sfputc_r>
 800eff6:	1c43      	adds	r3, r0, #1
 800eff8:	d1f3      	bne.n	800efe2 <__sfputs_r+0xa>
 800effa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800effc <_vfiprintf_r>:
 800effc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f000:	460d      	mov	r5, r1
 800f002:	b09d      	sub	sp, #116	; 0x74
 800f004:	4614      	mov	r4, r2
 800f006:	4698      	mov	r8, r3
 800f008:	4606      	mov	r6, r0
 800f00a:	b118      	cbz	r0, 800f014 <_vfiprintf_r+0x18>
 800f00c:	6983      	ldr	r3, [r0, #24]
 800f00e:	b90b      	cbnz	r3, 800f014 <_vfiprintf_r+0x18>
 800f010:	f000 fb14 	bl	800f63c <__sinit>
 800f014:	4b89      	ldr	r3, [pc, #548]	; (800f23c <_vfiprintf_r+0x240>)
 800f016:	429d      	cmp	r5, r3
 800f018:	d11b      	bne.n	800f052 <_vfiprintf_r+0x56>
 800f01a:	6875      	ldr	r5, [r6, #4]
 800f01c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f01e:	07d9      	lsls	r1, r3, #31
 800f020:	d405      	bmi.n	800f02e <_vfiprintf_r+0x32>
 800f022:	89ab      	ldrh	r3, [r5, #12]
 800f024:	059a      	lsls	r2, r3, #22
 800f026:	d402      	bmi.n	800f02e <_vfiprintf_r+0x32>
 800f028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f02a:	f7ff ffaa 	bl	800ef82 <__retarget_lock_acquire_recursive>
 800f02e:	89ab      	ldrh	r3, [r5, #12]
 800f030:	071b      	lsls	r3, r3, #28
 800f032:	d501      	bpl.n	800f038 <_vfiprintf_r+0x3c>
 800f034:	692b      	ldr	r3, [r5, #16]
 800f036:	b9eb      	cbnz	r3, 800f074 <_vfiprintf_r+0x78>
 800f038:	4629      	mov	r1, r5
 800f03a:	4630      	mov	r0, r6
 800f03c:	f000 f96e 	bl	800f31c <__swsetup_r>
 800f040:	b1c0      	cbz	r0, 800f074 <_vfiprintf_r+0x78>
 800f042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f044:	07dc      	lsls	r4, r3, #31
 800f046:	d50e      	bpl.n	800f066 <_vfiprintf_r+0x6a>
 800f048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f04c:	b01d      	add	sp, #116	; 0x74
 800f04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f052:	4b7b      	ldr	r3, [pc, #492]	; (800f240 <_vfiprintf_r+0x244>)
 800f054:	429d      	cmp	r5, r3
 800f056:	d101      	bne.n	800f05c <_vfiprintf_r+0x60>
 800f058:	68b5      	ldr	r5, [r6, #8]
 800f05a:	e7df      	b.n	800f01c <_vfiprintf_r+0x20>
 800f05c:	4b79      	ldr	r3, [pc, #484]	; (800f244 <_vfiprintf_r+0x248>)
 800f05e:	429d      	cmp	r5, r3
 800f060:	bf08      	it	eq
 800f062:	68f5      	ldreq	r5, [r6, #12]
 800f064:	e7da      	b.n	800f01c <_vfiprintf_r+0x20>
 800f066:	89ab      	ldrh	r3, [r5, #12]
 800f068:	0598      	lsls	r0, r3, #22
 800f06a:	d4ed      	bmi.n	800f048 <_vfiprintf_r+0x4c>
 800f06c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f06e:	f7ff ff89 	bl	800ef84 <__retarget_lock_release_recursive>
 800f072:	e7e9      	b.n	800f048 <_vfiprintf_r+0x4c>
 800f074:	2300      	movs	r3, #0
 800f076:	9309      	str	r3, [sp, #36]	; 0x24
 800f078:	2320      	movs	r3, #32
 800f07a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f07e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f082:	2330      	movs	r3, #48	; 0x30
 800f084:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f248 <_vfiprintf_r+0x24c>
 800f088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f08c:	f04f 0901 	mov.w	r9, #1
 800f090:	4623      	mov	r3, r4
 800f092:	469a      	mov	sl, r3
 800f094:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f098:	b10a      	cbz	r2, 800f09e <_vfiprintf_r+0xa2>
 800f09a:	2a25      	cmp	r2, #37	; 0x25
 800f09c:	d1f9      	bne.n	800f092 <_vfiprintf_r+0x96>
 800f09e:	ebba 0b04 	subs.w	fp, sl, r4
 800f0a2:	d00b      	beq.n	800f0bc <_vfiprintf_r+0xc0>
 800f0a4:	465b      	mov	r3, fp
 800f0a6:	4622      	mov	r2, r4
 800f0a8:	4629      	mov	r1, r5
 800f0aa:	4630      	mov	r0, r6
 800f0ac:	f7ff ff94 	bl	800efd8 <__sfputs_r>
 800f0b0:	3001      	adds	r0, #1
 800f0b2:	f000 80aa 	beq.w	800f20a <_vfiprintf_r+0x20e>
 800f0b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0b8:	445a      	add	r2, fp
 800f0ba:	9209      	str	r2, [sp, #36]	; 0x24
 800f0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	f000 80a2 	beq.w	800f20a <_vfiprintf_r+0x20e>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0d0:	f10a 0a01 	add.w	sl, sl, #1
 800f0d4:	9304      	str	r3, [sp, #16]
 800f0d6:	9307      	str	r3, [sp, #28]
 800f0d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0dc:	931a      	str	r3, [sp, #104]	; 0x68
 800f0de:	4654      	mov	r4, sl
 800f0e0:	2205      	movs	r2, #5
 800f0e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0e6:	4858      	ldr	r0, [pc, #352]	; (800f248 <_vfiprintf_r+0x24c>)
 800f0e8:	f7f1 f8b2 	bl	8000250 <memchr>
 800f0ec:	9a04      	ldr	r2, [sp, #16]
 800f0ee:	b9d8      	cbnz	r0, 800f128 <_vfiprintf_r+0x12c>
 800f0f0:	06d1      	lsls	r1, r2, #27
 800f0f2:	bf44      	itt	mi
 800f0f4:	2320      	movmi	r3, #32
 800f0f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0fa:	0713      	lsls	r3, r2, #28
 800f0fc:	bf44      	itt	mi
 800f0fe:	232b      	movmi	r3, #43	; 0x2b
 800f100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f104:	f89a 3000 	ldrb.w	r3, [sl]
 800f108:	2b2a      	cmp	r3, #42	; 0x2a
 800f10a:	d015      	beq.n	800f138 <_vfiprintf_r+0x13c>
 800f10c:	9a07      	ldr	r2, [sp, #28]
 800f10e:	4654      	mov	r4, sl
 800f110:	2000      	movs	r0, #0
 800f112:	f04f 0c0a 	mov.w	ip, #10
 800f116:	4621      	mov	r1, r4
 800f118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f11c:	3b30      	subs	r3, #48	; 0x30
 800f11e:	2b09      	cmp	r3, #9
 800f120:	d94e      	bls.n	800f1c0 <_vfiprintf_r+0x1c4>
 800f122:	b1b0      	cbz	r0, 800f152 <_vfiprintf_r+0x156>
 800f124:	9207      	str	r2, [sp, #28]
 800f126:	e014      	b.n	800f152 <_vfiprintf_r+0x156>
 800f128:	eba0 0308 	sub.w	r3, r0, r8
 800f12c:	fa09 f303 	lsl.w	r3, r9, r3
 800f130:	4313      	orrs	r3, r2
 800f132:	9304      	str	r3, [sp, #16]
 800f134:	46a2      	mov	sl, r4
 800f136:	e7d2      	b.n	800f0de <_vfiprintf_r+0xe2>
 800f138:	9b03      	ldr	r3, [sp, #12]
 800f13a:	1d19      	adds	r1, r3, #4
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	9103      	str	r1, [sp, #12]
 800f140:	2b00      	cmp	r3, #0
 800f142:	bfbb      	ittet	lt
 800f144:	425b      	neglt	r3, r3
 800f146:	f042 0202 	orrlt.w	r2, r2, #2
 800f14a:	9307      	strge	r3, [sp, #28]
 800f14c:	9307      	strlt	r3, [sp, #28]
 800f14e:	bfb8      	it	lt
 800f150:	9204      	strlt	r2, [sp, #16]
 800f152:	7823      	ldrb	r3, [r4, #0]
 800f154:	2b2e      	cmp	r3, #46	; 0x2e
 800f156:	d10c      	bne.n	800f172 <_vfiprintf_r+0x176>
 800f158:	7863      	ldrb	r3, [r4, #1]
 800f15a:	2b2a      	cmp	r3, #42	; 0x2a
 800f15c:	d135      	bne.n	800f1ca <_vfiprintf_r+0x1ce>
 800f15e:	9b03      	ldr	r3, [sp, #12]
 800f160:	1d1a      	adds	r2, r3, #4
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	9203      	str	r2, [sp, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	bfb8      	it	lt
 800f16a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f16e:	3402      	adds	r4, #2
 800f170:	9305      	str	r3, [sp, #20]
 800f172:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f258 <_vfiprintf_r+0x25c>
 800f176:	7821      	ldrb	r1, [r4, #0]
 800f178:	2203      	movs	r2, #3
 800f17a:	4650      	mov	r0, sl
 800f17c:	f7f1 f868 	bl	8000250 <memchr>
 800f180:	b140      	cbz	r0, 800f194 <_vfiprintf_r+0x198>
 800f182:	2340      	movs	r3, #64	; 0x40
 800f184:	eba0 000a 	sub.w	r0, r0, sl
 800f188:	fa03 f000 	lsl.w	r0, r3, r0
 800f18c:	9b04      	ldr	r3, [sp, #16]
 800f18e:	4303      	orrs	r3, r0
 800f190:	3401      	adds	r4, #1
 800f192:	9304      	str	r3, [sp, #16]
 800f194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f198:	482c      	ldr	r0, [pc, #176]	; (800f24c <_vfiprintf_r+0x250>)
 800f19a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f19e:	2206      	movs	r2, #6
 800f1a0:	f7f1 f856 	bl	8000250 <memchr>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	d03f      	beq.n	800f228 <_vfiprintf_r+0x22c>
 800f1a8:	4b29      	ldr	r3, [pc, #164]	; (800f250 <_vfiprintf_r+0x254>)
 800f1aa:	bb1b      	cbnz	r3, 800f1f4 <_vfiprintf_r+0x1f8>
 800f1ac:	9b03      	ldr	r3, [sp, #12]
 800f1ae:	3307      	adds	r3, #7
 800f1b0:	f023 0307 	bic.w	r3, r3, #7
 800f1b4:	3308      	adds	r3, #8
 800f1b6:	9303      	str	r3, [sp, #12]
 800f1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1ba:	443b      	add	r3, r7
 800f1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f1be:	e767      	b.n	800f090 <_vfiprintf_r+0x94>
 800f1c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1c4:	460c      	mov	r4, r1
 800f1c6:	2001      	movs	r0, #1
 800f1c8:	e7a5      	b.n	800f116 <_vfiprintf_r+0x11a>
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	3401      	adds	r4, #1
 800f1ce:	9305      	str	r3, [sp, #20]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	f04f 0c0a 	mov.w	ip, #10
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1dc:	3a30      	subs	r2, #48	; 0x30
 800f1de:	2a09      	cmp	r2, #9
 800f1e0:	d903      	bls.n	800f1ea <_vfiprintf_r+0x1ee>
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d0c5      	beq.n	800f172 <_vfiprintf_r+0x176>
 800f1e6:	9105      	str	r1, [sp, #20]
 800f1e8:	e7c3      	b.n	800f172 <_vfiprintf_r+0x176>
 800f1ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1ee:	4604      	mov	r4, r0
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	e7f0      	b.n	800f1d6 <_vfiprintf_r+0x1da>
 800f1f4:	ab03      	add	r3, sp, #12
 800f1f6:	9300      	str	r3, [sp, #0]
 800f1f8:	462a      	mov	r2, r5
 800f1fa:	4b16      	ldr	r3, [pc, #88]	; (800f254 <_vfiprintf_r+0x258>)
 800f1fc:	a904      	add	r1, sp, #16
 800f1fe:	4630      	mov	r0, r6
 800f200:	f7fe f912 	bl	800d428 <_printf_float>
 800f204:	4607      	mov	r7, r0
 800f206:	1c78      	adds	r0, r7, #1
 800f208:	d1d6      	bne.n	800f1b8 <_vfiprintf_r+0x1bc>
 800f20a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f20c:	07d9      	lsls	r1, r3, #31
 800f20e:	d405      	bmi.n	800f21c <_vfiprintf_r+0x220>
 800f210:	89ab      	ldrh	r3, [r5, #12]
 800f212:	059a      	lsls	r2, r3, #22
 800f214:	d402      	bmi.n	800f21c <_vfiprintf_r+0x220>
 800f216:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f218:	f7ff feb4 	bl	800ef84 <__retarget_lock_release_recursive>
 800f21c:	89ab      	ldrh	r3, [r5, #12]
 800f21e:	065b      	lsls	r3, r3, #25
 800f220:	f53f af12 	bmi.w	800f048 <_vfiprintf_r+0x4c>
 800f224:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f226:	e711      	b.n	800f04c <_vfiprintf_r+0x50>
 800f228:	ab03      	add	r3, sp, #12
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	462a      	mov	r2, r5
 800f22e:	4b09      	ldr	r3, [pc, #36]	; (800f254 <_vfiprintf_r+0x258>)
 800f230:	a904      	add	r1, sp, #16
 800f232:	4630      	mov	r0, r6
 800f234:	f7fe fb84 	bl	800d940 <_printf_i>
 800f238:	e7e4      	b.n	800f204 <_vfiprintf_r+0x208>
 800f23a:	bf00      	nop
 800f23c:	0806fb9c 	.word	0x0806fb9c
 800f240:	0806fbbc 	.word	0x0806fbbc
 800f244:	0806fb7c 	.word	0x0806fb7c
 800f248:	0806fa6a 	.word	0x0806fa6a
 800f24c:	0806fa74 	.word	0x0806fa74
 800f250:	0800d429 	.word	0x0800d429
 800f254:	0800efd9 	.word	0x0800efd9
 800f258:	0806fa70 	.word	0x0806fa70

0800f25c <__swbuf_r>:
 800f25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f25e:	460e      	mov	r6, r1
 800f260:	4614      	mov	r4, r2
 800f262:	4605      	mov	r5, r0
 800f264:	b118      	cbz	r0, 800f26e <__swbuf_r+0x12>
 800f266:	6983      	ldr	r3, [r0, #24]
 800f268:	b90b      	cbnz	r3, 800f26e <__swbuf_r+0x12>
 800f26a:	f000 f9e7 	bl	800f63c <__sinit>
 800f26e:	4b21      	ldr	r3, [pc, #132]	; (800f2f4 <__swbuf_r+0x98>)
 800f270:	429c      	cmp	r4, r3
 800f272:	d12b      	bne.n	800f2cc <__swbuf_r+0x70>
 800f274:	686c      	ldr	r4, [r5, #4]
 800f276:	69a3      	ldr	r3, [r4, #24]
 800f278:	60a3      	str	r3, [r4, #8]
 800f27a:	89a3      	ldrh	r3, [r4, #12]
 800f27c:	071a      	lsls	r2, r3, #28
 800f27e:	d52f      	bpl.n	800f2e0 <__swbuf_r+0x84>
 800f280:	6923      	ldr	r3, [r4, #16]
 800f282:	b36b      	cbz	r3, 800f2e0 <__swbuf_r+0x84>
 800f284:	6923      	ldr	r3, [r4, #16]
 800f286:	6820      	ldr	r0, [r4, #0]
 800f288:	1ac0      	subs	r0, r0, r3
 800f28a:	6963      	ldr	r3, [r4, #20]
 800f28c:	b2f6      	uxtb	r6, r6
 800f28e:	4283      	cmp	r3, r0
 800f290:	4637      	mov	r7, r6
 800f292:	dc04      	bgt.n	800f29e <__swbuf_r+0x42>
 800f294:	4621      	mov	r1, r4
 800f296:	4628      	mov	r0, r5
 800f298:	f000 f93c 	bl	800f514 <_fflush_r>
 800f29c:	bb30      	cbnz	r0, 800f2ec <__swbuf_r+0x90>
 800f29e:	68a3      	ldr	r3, [r4, #8]
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	60a3      	str	r3, [r4, #8]
 800f2a4:	6823      	ldr	r3, [r4, #0]
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	6022      	str	r2, [r4, #0]
 800f2aa:	701e      	strb	r6, [r3, #0]
 800f2ac:	6963      	ldr	r3, [r4, #20]
 800f2ae:	3001      	adds	r0, #1
 800f2b0:	4283      	cmp	r3, r0
 800f2b2:	d004      	beq.n	800f2be <__swbuf_r+0x62>
 800f2b4:	89a3      	ldrh	r3, [r4, #12]
 800f2b6:	07db      	lsls	r3, r3, #31
 800f2b8:	d506      	bpl.n	800f2c8 <__swbuf_r+0x6c>
 800f2ba:	2e0a      	cmp	r6, #10
 800f2bc:	d104      	bne.n	800f2c8 <__swbuf_r+0x6c>
 800f2be:	4621      	mov	r1, r4
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	f000 f927 	bl	800f514 <_fflush_r>
 800f2c6:	b988      	cbnz	r0, 800f2ec <__swbuf_r+0x90>
 800f2c8:	4638      	mov	r0, r7
 800f2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2cc:	4b0a      	ldr	r3, [pc, #40]	; (800f2f8 <__swbuf_r+0x9c>)
 800f2ce:	429c      	cmp	r4, r3
 800f2d0:	d101      	bne.n	800f2d6 <__swbuf_r+0x7a>
 800f2d2:	68ac      	ldr	r4, [r5, #8]
 800f2d4:	e7cf      	b.n	800f276 <__swbuf_r+0x1a>
 800f2d6:	4b09      	ldr	r3, [pc, #36]	; (800f2fc <__swbuf_r+0xa0>)
 800f2d8:	429c      	cmp	r4, r3
 800f2da:	bf08      	it	eq
 800f2dc:	68ec      	ldreq	r4, [r5, #12]
 800f2de:	e7ca      	b.n	800f276 <__swbuf_r+0x1a>
 800f2e0:	4621      	mov	r1, r4
 800f2e2:	4628      	mov	r0, r5
 800f2e4:	f000 f81a 	bl	800f31c <__swsetup_r>
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	d0cb      	beq.n	800f284 <__swbuf_r+0x28>
 800f2ec:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f2f0:	e7ea      	b.n	800f2c8 <__swbuf_r+0x6c>
 800f2f2:	bf00      	nop
 800f2f4:	0806fb9c 	.word	0x0806fb9c
 800f2f8:	0806fbbc 	.word	0x0806fbbc
 800f2fc:	0806fb7c 	.word	0x0806fb7c

0800f300 <__ascii_wctomb>:
 800f300:	b149      	cbz	r1, 800f316 <__ascii_wctomb+0x16>
 800f302:	2aff      	cmp	r2, #255	; 0xff
 800f304:	bf85      	ittet	hi
 800f306:	238a      	movhi	r3, #138	; 0x8a
 800f308:	6003      	strhi	r3, [r0, #0]
 800f30a:	700a      	strbls	r2, [r1, #0]
 800f30c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f310:	bf98      	it	ls
 800f312:	2001      	movls	r0, #1
 800f314:	4770      	bx	lr
 800f316:	4608      	mov	r0, r1
 800f318:	4770      	bx	lr
	...

0800f31c <__swsetup_r>:
 800f31c:	4b32      	ldr	r3, [pc, #200]	; (800f3e8 <__swsetup_r+0xcc>)
 800f31e:	b570      	push	{r4, r5, r6, lr}
 800f320:	681d      	ldr	r5, [r3, #0]
 800f322:	4606      	mov	r6, r0
 800f324:	460c      	mov	r4, r1
 800f326:	b125      	cbz	r5, 800f332 <__swsetup_r+0x16>
 800f328:	69ab      	ldr	r3, [r5, #24]
 800f32a:	b913      	cbnz	r3, 800f332 <__swsetup_r+0x16>
 800f32c:	4628      	mov	r0, r5
 800f32e:	f000 f985 	bl	800f63c <__sinit>
 800f332:	4b2e      	ldr	r3, [pc, #184]	; (800f3ec <__swsetup_r+0xd0>)
 800f334:	429c      	cmp	r4, r3
 800f336:	d10f      	bne.n	800f358 <__swsetup_r+0x3c>
 800f338:	686c      	ldr	r4, [r5, #4]
 800f33a:	89a3      	ldrh	r3, [r4, #12]
 800f33c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f340:	0719      	lsls	r1, r3, #28
 800f342:	d42c      	bmi.n	800f39e <__swsetup_r+0x82>
 800f344:	06dd      	lsls	r5, r3, #27
 800f346:	d411      	bmi.n	800f36c <__swsetup_r+0x50>
 800f348:	2309      	movs	r3, #9
 800f34a:	6033      	str	r3, [r6, #0]
 800f34c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f350:	81a3      	strh	r3, [r4, #12]
 800f352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f356:	e03e      	b.n	800f3d6 <__swsetup_r+0xba>
 800f358:	4b25      	ldr	r3, [pc, #148]	; (800f3f0 <__swsetup_r+0xd4>)
 800f35a:	429c      	cmp	r4, r3
 800f35c:	d101      	bne.n	800f362 <__swsetup_r+0x46>
 800f35e:	68ac      	ldr	r4, [r5, #8]
 800f360:	e7eb      	b.n	800f33a <__swsetup_r+0x1e>
 800f362:	4b24      	ldr	r3, [pc, #144]	; (800f3f4 <__swsetup_r+0xd8>)
 800f364:	429c      	cmp	r4, r3
 800f366:	bf08      	it	eq
 800f368:	68ec      	ldreq	r4, [r5, #12]
 800f36a:	e7e6      	b.n	800f33a <__swsetup_r+0x1e>
 800f36c:	0758      	lsls	r0, r3, #29
 800f36e:	d512      	bpl.n	800f396 <__swsetup_r+0x7a>
 800f370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f372:	b141      	cbz	r1, 800f386 <__swsetup_r+0x6a>
 800f374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f378:	4299      	cmp	r1, r3
 800f37a:	d002      	beq.n	800f382 <__swsetup_r+0x66>
 800f37c:	4630      	mov	r0, r6
 800f37e:	f7fd fee1 	bl	800d144 <_free_r>
 800f382:	2300      	movs	r3, #0
 800f384:	6363      	str	r3, [r4, #52]	; 0x34
 800f386:	89a3      	ldrh	r3, [r4, #12]
 800f388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f38c:	81a3      	strh	r3, [r4, #12]
 800f38e:	2300      	movs	r3, #0
 800f390:	6063      	str	r3, [r4, #4]
 800f392:	6923      	ldr	r3, [r4, #16]
 800f394:	6023      	str	r3, [r4, #0]
 800f396:	89a3      	ldrh	r3, [r4, #12]
 800f398:	f043 0308 	orr.w	r3, r3, #8
 800f39c:	81a3      	strh	r3, [r4, #12]
 800f39e:	6923      	ldr	r3, [r4, #16]
 800f3a0:	b94b      	cbnz	r3, 800f3b6 <__swsetup_r+0x9a>
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f3a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3ac:	d003      	beq.n	800f3b6 <__swsetup_r+0x9a>
 800f3ae:	4621      	mov	r1, r4
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f000 fa05 	bl	800f7c0 <__smakebuf_r>
 800f3b6:	89a0      	ldrh	r0, [r4, #12]
 800f3b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f3bc:	f010 0301 	ands.w	r3, r0, #1
 800f3c0:	d00a      	beq.n	800f3d8 <__swsetup_r+0xbc>
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	60a3      	str	r3, [r4, #8]
 800f3c6:	6963      	ldr	r3, [r4, #20]
 800f3c8:	425b      	negs	r3, r3
 800f3ca:	61a3      	str	r3, [r4, #24]
 800f3cc:	6923      	ldr	r3, [r4, #16]
 800f3ce:	b943      	cbnz	r3, 800f3e2 <__swsetup_r+0xc6>
 800f3d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f3d4:	d1ba      	bne.n	800f34c <__swsetup_r+0x30>
 800f3d6:	bd70      	pop	{r4, r5, r6, pc}
 800f3d8:	0781      	lsls	r1, r0, #30
 800f3da:	bf58      	it	pl
 800f3dc:	6963      	ldrpl	r3, [r4, #20]
 800f3de:	60a3      	str	r3, [r4, #8]
 800f3e0:	e7f4      	b.n	800f3cc <__swsetup_r+0xb0>
 800f3e2:	2000      	movs	r0, #0
 800f3e4:	e7f7      	b.n	800f3d6 <__swsetup_r+0xba>
 800f3e6:	bf00      	nop
 800f3e8:	200012c4 	.word	0x200012c4
 800f3ec:	0806fb9c 	.word	0x0806fb9c
 800f3f0:	0806fbbc 	.word	0x0806fbbc
 800f3f4:	0806fb7c 	.word	0x0806fb7c

0800f3f8 <abort>:
 800f3f8:	b508      	push	{r3, lr}
 800f3fa:	2006      	movs	r0, #6
 800f3fc:	f000 fa48 	bl	800f890 <raise>
 800f400:	2001      	movs	r0, #1
 800f402:	f000 fbe1 	bl	800fbc8 <_exit>
	...

0800f408 <__sflush_r>:
 800f408:	898a      	ldrh	r2, [r1, #12]
 800f40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f40e:	4605      	mov	r5, r0
 800f410:	0710      	lsls	r0, r2, #28
 800f412:	460c      	mov	r4, r1
 800f414:	d458      	bmi.n	800f4c8 <__sflush_r+0xc0>
 800f416:	684b      	ldr	r3, [r1, #4]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	dc05      	bgt.n	800f428 <__sflush_r+0x20>
 800f41c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f41e:	2b00      	cmp	r3, #0
 800f420:	dc02      	bgt.n	800f428 <__sflush_r+0x20>
 800f422:	2000      	movs	r0, #0
 800f424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f42a:	2e00      	cmp	r6, #0
 800f42c:	d0f9      	beq.n	800f422 <__sflush_r+0x1a>
 800f42e:	2300      	movs	r3, #0
 800f430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f434:	682f      	ldr	r7, [r5, #0]
 800f436:	602b      	str	r3, [r5, #0]
 800f438:	d032      	beq.n	800f4a0 <__sflush_r+0x98>
 800f43a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f43c:	89a3      	ldrh	r3, [r4, #12]
 800f43e:	075a      	lsls	r2, r3, #29
 800f440:	d505      	bpl.n	800f44e <__sflush_r+0x46>
 800f442:	6863      	ldr	r3, [r4, #4]
 800f444:	1ac0      	subs	r0, r0, r3
 800f446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f448:	b10b      	cbz	r3, 800f44e <__sflush_r+0x46>
 800f44a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f44c:	1ac0      	subs	r0, r0, r3
 800f44e:	2300      	movs	r3, #0
 800f450:	4602      	mov	r2, r0
 800f452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f454:	6a21      	ldr	r1, [r4, #32]
 800f456:	4628      	mov	r0, r5
 800f458:	47b0      	blx	r6
 800f45a:	1c43      	adds	r3, r0, #1
 800f45c:	89a3      	ldrh	r3, [r4, #12]
 800f45e:	d106      	bne.n	800f46e <__sflush_r+0x66>
 800f460:	6829      	ldr	r1, [r5, #0]
 800f462:	291d      	cmp	r1, #29
 800f464:	d82c      	bhi.n	800f4c0 <__sflush_r+0xb8>
 800f466:	4a2a      	ldr	r2, [pc, #168]	; (800f510 <__sflush_r+0x108>)
 800f468:	40ca      	lsrs	r2, r1
 800f46a:	07d6      	lsls	r6, r2, #31
 800f46c:	d528      	bpl.n	800f4c0 <__sflush_r+0xb8>
 800f46e:	2200      	movs	r2, #0
 800f470:	6062      	str	r2, [r4, #4]
 800f472:	04d9      	lsls	r1, r3, #19
 800f474:	6922      	ldr	r2, [r4, #16]
 800f476:	6022      	str	r2, [r4, #0]
 800f478:	d504      	bpl.n	800f484 <__sflush_r+0x7c>
 800f47a:	1c42      	adds	r2, r0, #1
 800f47c:	d101      	bne.n	800f482 <__sflush_r+0x7a>
 800f47e:	682b      	ldr	r3, [r5, #0]
 800f480:	b903      	cbnz	r3, 800f484 <__sflush_r+0x7c>
 800f482:	6560      	str	r0, [r4, #84]	; 0x54
 800f484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f486:	602f      	str	r7, [r5, #0]
 800f488:	2900      	cmp	r1, #0
 800f48a:	d0ca      	beq.n	800f422 <__sflush_r+0x1a>
 800f48c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f490:	4299      	cmp	r1, r3
 800f492:	d002      	beq.n	800f49a <__sflush_r+0x92>
 800f494:	4628      	mov	r0, r5
 800f496:	f7fd fe55 	bl	800d144 <_free_r>
 800f49a:	2000      	movs	r0, #0
 800f49c:	6360      	str	r0, [r4, #52]	; 0x34
 800f49e:	e7c1      	b.n	800f424 <__sflush_r+0x1c>
 800f4a0:	6a21      	ldr	r1, [r4, #32]
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	4628      	mov	r0, r5
 800f4a6:	47b0      	blx	r6
 800f4a8:	1c41      	adds	r1, r0, #1
 800f4aa:	d1c7      	bne.n	800f43c <__sflush_r+0x34>
 800f4ac:	682b      	ldr	r3, [r5, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d0c4      	beq.n	800f43c <__sflush_r+0x34>
 800f4b2:	2b1d      	cmp	r3, #29
 800f4b4:	d001      	beq.n	800f4ba <__sflush_r+0xb2>
 800f4b6:	2b16      	cmp	r3, #22
 800f4b8:	d101      	bne.n	800f4be <__sflush_r+0xb6>
 800f4ba:	602f      	str	r7, [r5, #0]
 800f4bc:	e7b1      	b.n	800f422 <__sflush_r+0x1a>
 800f4be:	89a3      	ldrh	r3, [r4, #12]
 800f4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4c4:	81a3      	strh	r3, [r4, #12]
 800f4c6:	e7ad      	b.n	800f424 <__sflush_r+0x1c>
 800f4c8:	690f      	ldr	r7, [r1, #16]
 800f4ca:	2f00      	cmp	r7, #0
 800f4cc:	d0a9      	beq.n	800f422 <__sflush_r+0x1a>
 800f4ce:	0793      	lsls	r3, r2, #30
 800f4d0:	680e      	ldr	r6, [r1, #0]
 800f4d2:	bf08      	it	eq
 800f4d4:	694b      	ldreq	r3, [r1, #20]
 800f4d6:	600f      	str	r7, [r1, #0]
 800f4d8:	bf18      	it	ne
 800f4da:	2300      	movne	r3, #0
 800f4dc:	eba6 0807 	sub.w	r8, r6, r7
 800f4e0:	608b      	str	r3, [r1, #8]
 800f4e2:	f1b8 0f00 	cmp.w	r8, #0
 800f4e6:	dd9c      	ble.n	800f422 <__sflush_r+0x1a>
 800f4e8:	6a21      	ldr	r1, [r4, #32]
 800f4ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4ec:	4643      	mov	r3, r8
 800f4ee:	463a      	mov	r2, r7
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	47b0      	blx	r6
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	dc06      	bgt.n	800f506 <__sflush_r+0xfe>
 800f4f8:	89a3      	ldrh	r3, [r4, #12]
 800f4fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4fe:	81a3      	strh	r3, [r4, #12]
 800f500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f504:	e78e      	b.n	800f424 <__sflush_r+0x1c>
 800f506:	4407      	add	r7, r0
 800f508:	eba8 0800 	sub.w	r8, r8, r0
 800f50c:	e7e9      	b.n	800f4e2 <__sflush_r+0xda>
 800f50e:	bf00      	nop
 800f510:	20400001 	.word	0x20400001

0800f514 <_fflush_r>:
 800f514:	b538      	push	{r3, r4, r5, lr}
 800f516:	690b      	ldr	r3, [r1, #16]
 800f518:	4605      	mov	r5, r0
 800f51a:	460c      	mov	r4, r1
 800f51c:	b913      	cbnz	r3, 800f524 <_fflush_r+0x10>
 800f51e:	2500      	movs	r5, #0
 800f520:	4628      	mov	r0, r5
 800f522:	bd38      	pop	{r3, r4, r5, pc}
 800f524:	b118      	cbz	r0, 800f52e <_fflush_r+0x1a>
 800f526:	6983      	ldr	r3, [r0, #24]
 800f528:	b90b      	cbnz	r3, 800f52e <_fflush_r+0x1a>
 800f52a:	f000 f887 	bl	800f63c <__sinit>
 800f52e:	4b14      	ldr	r3, [pc, #80]	; (800f580 <_fflush_r+0x6c>)
 800f530:	429c      	cmp	r4, r3
 800f532:	d11b      	bne.n	800f56c <_fflush_r+0x58>
 800f534:	686c      	ldr	r4, [r5, #4]
 800f536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d0ef      	beq.n	800f51e <_fflush_r+0xa>
 800f53e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f540:	07d0      	lsls	r0, r2, #31
 800f542:	d404      	bmi.n	800f54e <_fflush_r+0x3a>
 800f544:	0599      	lsls	r1, r3, #22
 800f546:	d402      	bmi.n	800f54e <_fflush_r+0x3a>
 800f548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f54a:	f7ff fd1a 	bl	800ef82 <__retarget_lock_acquire_recursive>
 800f54e:	4628      	mov	r0, r5
 800f550:	4621      	mov	r1, r4
 800f552:	f7ff ff59 	bl	800f408 <__sflush_r>
 800f556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f558:	07da      	lsls	r2, r3, #31
 800f55a:	4605      	mov	r5, r0
 800f55c:	d4e0      	bmi.n	800f520 <_fflush_r+0xc>
 800f55e:	89a3      	ldrh	r3, [r4, #12]
 800f560:	059b      	lsls	r3, r3, #22
 800f562:	d4dd      	bmi.n	800f520 <_fflush_r+0xc>
 800f564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f566:	f7ff fd0d 	bl	800ef84 <__retarget_lock_release_recursive>
 800f56a:	e7d9      	b.n	800f520 <_fflush_r+0xc>
 800f56c:	4b05      	ldr	r3, [pc, #20]	; (800f584 <_fflush_r+0x70>)
 800f56e:	429c      	cmp	r4, r3
 800f570:	d101      	bne.n	800f576 <_fflush_r+0x62>
 800f572:	68ac      	ldr	r4, [r5, #8]
 800f574:	e7df      	b.n	800f536 <_fflush_r+0x22>
 800f576:	4b04      	ldr	r3, [pc, #16]	; (800f588 <_fflush_r+0x74>)
 800f578:	429c      	cmp	r4, r3
 800f57a:	bf08      	it	eq
 800f57c:	68ec      	ldreq	r4, [r5, #12]
 800f57e:	e7da      	b.n	800f536 <_fflush_r+0x22>
 800f580:	0806fb9c 	.word	0x0806fb9c
 800f584:	0806fbbc 	.word	0x0806fbbc
 800f588:	0806fb7c 	.word	0x0806fb7c

0800f58c <std>:
 800f58c:	2300      	movs	r3, #0
 800f58e:	b510      	push	{r4, lr}
 800f590:	4604      	mov	r4, r0
 800f592:	e9c0 3300 	strd	r3, r3, [r0]
 800f596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f59a:	6083      	str	r3, [r0, #8]
 800f59c:	8181      	strh	r1, [r0, #12]
 800f59e:	6643      	str	r3, [r0, #100]	; 0x64
 800f5a0:	81c2      	strh	r2, [r0, #14]
 800f5a2:	6183      	str	r3, [r0, #24]
 800f5a4:	4619      	mov	r1, r3
 800f5a6:	2208      	movs	r2, #8
 800f5a8:	305c      	adds	r0, #92	; 0x5c
 800f5aa:	f7fd fdc3 	bl	800d134 <memset>
 800f5ae:	4b05      	ldr	r3, [pc, #20]	; (800f5c4 <std+0x38>)
 800f5b0:	6263      	str	r3, [r4, #36]	; 0x24
 800f5b2:	4b05      	ldr	r3, [pc, #20]	; (800f5c8 <std+0x3c>)
 800f5b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800f5b6:	4b05      	ldr	r3, [pc, #20]	; (800f5cc <std+0x40>)
 800f5b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f5ba:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <std+0x44>)
 800f5bc:	6224      	str	r4, [r4, #32]
 800f5be:	6323      	str	r3, [r4, #48]	; 0x30
 800f5c0:	bd10      	pop	{r4, pc}
 800f5c2:	bf00      	nop
 800f5c4:	0800f8c9 	.word	0x0800f8c9
 800f5c8:	0800f8eb 	.word	0x0800f8eb
 800f5cc:	0800f923 	.word	0x0800f923
 800f5d0:	0800f947 	.word	0x0800f947

0800f5d4 <_cleanup_r>:
 800f5d4:	4901      	ldr	r1, [pc, #4]	; (800f5dc <_cleanup_r+0x8>)
 800f5d6:	f000 b8af 	b.w	800f738 <_fwalk_reent>
 800f5da:	bf00      	nop
 800f5dc:	0800f515 	.word	0x0800f515

0800f5e0 <__sfmoreglue>:
 800f5e0:	b570      	push	{r4, r5, r6, lr}
 800f5e2:	2268      	movs	r2, #104	; 0x68
 800f5e4:	1e4d      	subs	r5, r1, #1
 800f5e6:	4355      	muls	r5, r2
 800f5e8:	460e      	mov	r6, r1
 800f5ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f5ee:	f7fd fe15 	bl	800d21c <_malloc_r>
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	b140      	cbz	r0, 800f608 <__sfmoreglue+0x28>
 800f5f6:	2100      	movs	r1, #0
 800f5f8:	e9c0 1600 	strd	r1, r6, [r0]
 800f5fc:	300c      	adds	r0, #12
 800f5fe:	60a0      	str	r0, [r4, #8]
 800f600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f604:	f7fd fd96 	bl	800d134 <memset>
 800f608:	4620      	mov	r0, r4
 800f60a:	bd70      	pop	{r4, r5, r6, pc}

0800f60c <__sfp_lock_acquire>:
 800f60c:	4801      	ldr	r0, [pc, #4]	; (800f614 <__sfp_lock_acquire+0x8>)
 800f60e:	f7ff bcb8 	b.w	800ef82 <__retarget_lock_acquire_recursive>
 800f612:	bf00      	nop
 800f614:	20008f49 	.word	0x20008f49

0800f618 <__sfp_lock_release>:
 800f618:	4801      	ldr	r0, [pc, #4]	; (800f620 <__sfp_lock_release+0x8>)
 800f61a:	f7ff bcb3 	b.w	800ef84 <__retarget_lock_release_recursive>
 800f61e:	bf00      	nop
 800f620:	20008f49 	.word	0x20008f49

0800f624 <__sinit_lock_acquire>:
 800f624:	4801      	ldr	r0, [pc, #4]	; (800f62c <__sinit_lock_acquire+0x8>)
 800f626:	f7ff bcac 	b.w	800ef82 <__retarget_lock_acquire_recursive>
 800f62a:	bf00      	nop
 800f62c:	20008f4a 	.word	0x20008f4a

0800f630 <__sinit_lock_release>:
 800f630:	4801      	ldr	r0, [pc, #4]	; (800f638 <__sinit_lock_release+0x8>)
 800f632:	f7ff bca7 	b.w	800ef84 <__retarget_lock_release_recursive>
 800f636:	bf00      	nop
 800f638:	20008f4a 	.word	0x20008f4a

0800f63c <__sinit>:
 800f63c:	b510      	push	{r4, lr}
 800f63e:	4604      	mov	r4, r0
 800f640:	f7ff fff0 	bl	800f624 <__sinit_lock_acquire>
 800f644:	69a3      	ldr	r3, [r4, #24]
 800f646:	b11b      	cbz	r3, 800f650 <__sinit+0x14>
 800f648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f64c:	f7ff bff0 	b.w	800f630 <__sinit_lock_release>
 800f650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f654:	6523      	str	r3, [r4, #80]	; 0x50
 800f656:	4b13      	ldr	r3, [pc, #76]	; (800f6a4 <__sinit+0x68>)
 800f658:	4a13      	ldr	r2, [pc, #76]	; (800f6a8 <__sinit+0x6c>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f65e:	42a3      	cmp	r3, r4
 800f660:	bf04      	itt	eq
 800f662:	2301      	moveq	r3, #1
 800f664:	61a3      	streq	r3, [r4, #24]
 800f666:	4620      	mov	r0, r4
 800f668:	f000 f820 	bl	800f6ac <__sfp>
 800f66c:	6060      	str	r0, [r4, #4]
 800f66e:	4620      	mov	r0, r4
 800f670:	f000 f81c 	bl	800f6ac <__sfp>
 800f674:	60a0      	str	r0, [r4, #8]
 800f676:	4620      	mov	r0, r4
 800f678:	f000 f818 	bl	800f6ac <__sfp>
 800f67c:	2200      	movs	r2, #0
 800f67e:	60e0      	str	r0, [r4, #12]
 800f680:	2104      	movs	r1, #4
 800f682:	6860      	ldr	r0, [r4, #4]
 800f684:	f7ff ff82 	bl	800f58c <std>
 800f688:	68a0      	ldr	r0, [r4, #8]
 800f68a:	2201      	movs	r2, #1
 800f68c:	2109      	movs	r1, #9
 800f68e:	f7ff ff7d 	bl	800f58c <std>
 800f692:	68e0      	ldr	r0, [r4, #12]
 800f694:	2202      	movs	r2, #2
 800f696:	2112      	movs	r1, #18
 800f698:	f7ff ff78 	bl	800f58c <std>
 800f69c:	2301      	movs	r3, #1
 800f69e:	61a3      	str	r3, [r4, #24]
 800f6a0:	e7d2      	b.n	800f648 <__sinit+0xc>
 800f6a2:	bf00      	nop
 800f6a4:	0806f804 	.word	0x0806f804
 800f6a8:	0800f5d5 	.word	0x0800f5d5

0800f6ac <__sfp>:
 800f6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ae:	4607      	mov	r7, r0
 800f6b0:	f7ff ffac 	bl	800f60c <__sfp_lock_acquire>
 800f6b4:	4b1e      	ldr	r3, [pc, #120]	; (800f730 <__sfp+0x84>)
 800f6b6:	681e      	ldr	r6, [r3, #0]
 800f6b8:	69b3      	ldr	r3, [r6, #24]
 800f6ba:	b913      	cbnz	r3, 800f6c2 <__sfp+0x16>
 800f6bc:	4630      	mov	r0, r6
 800f6be:	f7ff ffbd 	bl	800f63c <__sinit>
 800f6c2:	3648      	adds	r6, #72	; 0x48
 800f6c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	d503      	bpl.n	800f6d4 <__sfp+0x28>
 800f6cc:	6833      	ldr	r3, [r6, #0]
 800f6ce:	b30b      	cbz	r3, 800f714 <__sfp+0x68>
 800f6d0:	6836      	ldr	r6, [r6, #0]
 800f6d2:	e7f7      	b.n	800f6c4 <__sfp+0x18>
 800f6d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f6d8:	b9d5      	cbnz	r5, 800f710 <__sfp+0x64>
 800f6da:	4b16      	ldr	r3, [pc, #88]	; (800f734 <__sfp+0x88>)
 800f6dc:	60e3      	str	r3, [r4, #12]
 800f6de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f6e2:	6665      	str	r5, [r4, #100]	; 0x64
 800f6e4:	f7ff fc4c 	bl	800ef80 <__retarget_lock_init_recursive>
 800f6e8:	f7ff ff96 	bl	800f618 <__sfp_lock_release>
 800f6ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f6f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f6f4:	6025      	str	r5, [r4, #0]
 800f6f6:	61a5      	str	r5, [r4, #24]
 800f6f8:	2208      	movs	r2, #8
 800f6fa:	4629      	mov	r1, r5
 800f6fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f700:	f7fd fd18 	bl	800d134 <memset>
 800f704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f70c:	4620      	mov	r0, r4
 800f70e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f710:	3468      	adds	r4, #104	; 0x68
 800f712:	e7d9      	b.n	800f6c8 <__sfp+0x1c>
 800f714:	2104      	movs	r1, #4
 800f716:	4638      	mov	r0, r7
 800f718:	f7ff ff62 	bl	800f5e0 <__sfmoreglue>
 800f71c:	4604      	mov	r4, r0
 800f71e:	6030      	str	r0, [r6, #0]
 800f720:	2800      	cmp	r0, #0
 800f722:	d1d5      	bne.n	800f6d0 <__sfp+0x24>
 800f724:	f7ff ff78 	bl	800f618 <__sfp_lock_release>
 800f728:	230c      	movs	r3, #12
 800f72a:	603b      	str	r3, [r7, #0]
 800f72c:	e7ee      	b.n	800f70c <__sfp+0x60>
 800f72e:	bf00      	nop
 800f730:	0806f804 	.word	0x0806f804
 800f734:	ffff0001 	.word	0xffff0001

0800f738 <_fwalk_reent>:
 800f738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f73c:	4606      	mov	r6, r0
 800f73e:	4688      	mov	r8, r1
 800f740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f744:	2700      	movs	r7, #0
 800f746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f74a:	f1b9 0901 	subs.w	r9, r9, #1
 800f74e:	d505      	bpl.n	800f75c <_fwalk_reent+0x24>
 800f750:	6824      	ldr	r4, [r4, #0]
 800f752:	2c00      	cmp	r4, #0
 800f754:	d1f7      	bne.n	800f746 <_fwalk_reent+0xe>
 800f756:	4638      	mov	r0, r7
 800f758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f75c:	89ab      	ldrh	r3, [r5, #12]
 800f75e:	2b01      	cmp	r3, #1
 800f760:	d907      	bls.n	800f772 <_fwalk_reent+0x3a>
 800f762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f766:	3301      	adds	r3, #1
 800f768:	d003      	beq.n	800f772 <_fwalk_reent+0x3a>
 800f76a:	4629      	mov	r1, r5
 800f76c:	4630      	mov	r0, r6
 800f76e:	47c0      	blx	r8
 800f770:	4307      	orrs	r7, r0
 800f772:	3568      	adds	r5, #104	; 0x68
 800f774:	e7e9      	b.n	800f74a <_fwalk_reent+0x12>

0800f776 <__swhatbuf_r>:
 800f776:	b570      	push	{r4, r5, r6, lr}
 800f778:	460e      	mov	r6, r1
 800f77a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f77e:	2900      	cmp	r1, #0
 800f780:	b096      	sub	sp, #88	; 0x58
 800f782:	4614      	mov	r4, r2
 800f784:	461d      	mov	r5, r3
 800f786:	da08      	bge.n	800f79a <__swhatbuf_r+0x24>
 800f788:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f78c:	2200      	movs	r2, #0
 800f78e:	602a      	str	r2, [r5, #0]
 800f790:	061a      	lsls	r2, r3, #24
 800f792:	d410      	bmi.n	800f7b6 <__swhatbuf_r+0x40>
 800f794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f798:	e00e      	b.n	800f7b8 <__swhatbuf_r+0x42>
 800f79a:	466a      	mov	r2, sp
 800f79c:	f000 f8fa 	bl	800f994 <_fstat_r>
 800f7a0:	2800      	cmp	r0, #0
 800f7a2:	dbf1      	blt.n	800f788 <__swhatbuf_r+0x12>
 800f7a4:	9a01      	ldr	r2, [sp, #4]
 800f7a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f7aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f7ae:	425a      	negs	r2, r3
 800f7b0:	415a      	adcs	r2, r3
 800f7b2:	602a      	str	r2, [r5, #0]
 800f7b4:	e7ee      	b.n	800f794 <__swhatbuf_r+0x1e>
 800f7b6:	2340      	movs	r3, #64	; 0x40
 800f7b8:	2000      	movs	r0, #0
 800f7ba:	6023      	str	r3, [r4, #0]
 800f7bc:	b016      	add	sp, #88	; 0x58
 800f7be:	bd70      	pop	{r4, r5, r6, pc}

0800f7c0 <__smakebuf_r>:
 800f7c0:	898b      	ldrh	r3, [r1, #12]
 800f7c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7c4:	079d      	lsls	r5, r3, #30
 800f7c6:	4606      	mov	r6, r0
 800f7c8:	460c      	mov	r4, r1
 800f7ca:	d507      	bpl.n	800f7dc <__smakebuf_r+0x1c>
 800f7cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f7d0:	6023      	str	r3, [r4, #0]
 800f7d2:	6123      	str	r3, [r4, #16]
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	6163      	str	r3, [r4, #20]
 800f7d8:	b002      	add	sp, #8
 800f7da:	bd70      	pop	{r4, r5, r6, pc}
 800f7dc:	ab01      	add	r3, sp, #4
 800f7de:	466a      	mov	r2, sp
 800f7e0:	f7ff ffc9 	bl	800f776 <__swhatbuf_r>
 800f7e4:	9900      	ldr	r1, [sp, #0]
 800f7e6:	4605      	mov	r5, r0
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	f7fd fd17 	bl	800d21c <_malloc_r>
 800f7ee:	b948      	cbnz	r0, 800f804 <__smakebuf_r+0x44>
 800f7f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7f4:	059a      	lsls	r2, r3, #22
 800f7f6:	d4ef      	bmi.n	800f7d8 <__smakebuf_r+0x18>
 800f7f8:	f023 0303 	bic.w	r3, r3, #3
 800f7fc:	f043 0302 	orr.w	r3, r3, #2
 800f800:	81a3      	strh	r3, [r4, #12]
 800f802:	e7e3      	b.n	800f7cc <__smakebuf_r+0xc>
 800f804:	4b0d      	ldr	r3, [pc, #52]	; (800f83c <__smakebuf_r+0x7c>)
 800f806:	62b3      	str	r3, [r6, #40]	; 0x28
 800f808:	89a3      	ldrh	r3, [r4, #12]
 800f80a:	6020      	str	r0, [r4, #0]
 800f80c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f810:	81a3      	strh	r3, [r4, #12]
 800f812:	9b00      	ldr	r3, [sp, #0]
 800f814:	6163      	str	r3, [r4, #20]
 800f816:	9b01      	ldr	r3, [sp, #4]
 800f818:	6120      	str	r0, [r4, #16]
 800f81a:	b15b      	cbz	r3, 800f834 <__smakebuf_r+0x74>
 800f81c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f820:	4630      	mov	r0, r6
 800f822:	f000 f8c9 	bl	800f9b8 <_isatty_r>
 800f826:	b128      	cbz	r0, 800f834 <__smakebuf_r+0x74>
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	f023 0303 	bic.w	r3, r3, #3
 800f82e:	f043 0301 	orr.w	r3, r3, #1
 800f832:	81a3      	strh	r3, [r4, #12]
 800f834:	89a0      	ldrh	r0, [r4, #12]
 800f836:	4305      	orrs	r5, r0
 800f838:	81a5      	strh	r5, [r4, #12]
 800f83a:	e7cd      	b.n	800f7d8 <__smakebuf_r+0x18>
 800f83c:	0800f5d5 	.word	0x0800f5d5

0800f840 <_raise_r>:
 800f840:	291f      	cmp	r1, #31
 800f842:	b538      	push	{r3, r4, r5, lr}
 800f844:	4604      	mov	r4, r0
 800f846:	460d      	mov	r5, r1
 800f848:	d904      	bls.n	800f854 <_raise_r+0x14>
 800f84a:	2316      	movs	r3, #22
 800f84c:	6003      	str	r3, [r0, #0]
 800f84e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f852:	bd38      	pop	{r3, r4, r5, pc}
 800f854:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f856:	b112      	cbz	r2, 800f85e <_raise_r+0x1e>
 800f858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f85c:	b94b      	cbnz	r3, 800f872 <_raise_r+0x32>
 800f85e:	4620      	mov	r0, r4
 800f860:	f000 f830 	bl	800f8c4 <_getpid_r>
 800f864:	462a      	mov	r2, r5
 800f866:	4601      	mov	r1, r0
 800f868:	4620      	mov	r0, r4
 800f86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f86e:	f000 b817 	b.w	800f8a0 <_kill_r>
 800f872:	2b01      	cmp	r3, #1
 800f874:	d00a      	beq.n	800f88c <_raise_r+0x4c>
 800f876:	1c59      	adds	r1, r3, #1
 800f878:	d103      	bne.n	800f882 <_raise_r+0x42>
 800f87a:	2316      	movs	r3, #22
 800f87c:	6003      	str	r3, [r0, #0]
 800f87e:	2001      	movs	r0, #1
 800f880:	e7e7      	b.n	800f852 <_raise_r+0x12>
 800f882:	2400      	movs	r4, #0
 800f884:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f888:	4628      	mov	r0, r5
 800f88a:	4798      	blx	r3
 800f88c:	2000      	movs	r0, #0
 800f88e:	e7e0      	b.n	800f852 <_raise_r+0x12>

0800f890 <raise>:
 800f890:	4b02      	ldr	r3, [pc, #8]	; (800f89c <raise+0xc>)
 800f892:	4601      	mov	r1, r0
 800f894:	6818      	ldr	r0, [r3, #0]
 800f896:	f7ff bfd3 	b.w	800f840 <_raise_r>
 800f89a:	bf00      	nop
 800f89c:	200012c4 	.word	0x200012c4

0800f8a0 <_kill_r>:
 800f8a0:	b538      	push	{r3, r4, r5, lr}
 800f8a2:	4d07      	ldr	r5, [pc, #28]	; (800f8c0 <_kill_r+0x20>)
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	4608      	mov	r0, r1
 800f8aa:	4611      	mov	r1, r2
 800f8ac:	602b      	str	r3, [r5, #0]
 800f8ae:	f000 f973 	bl	800fb98 <_kill>
 800f8b2:	1c43      	adds	r3, r0, #1
 800f8b4:	d102      	bne.n	800f8bc <_kill_r+0x1c>
 800f8b6:	682b      	ldr	r3, [r5, #0]
 800f8b8:	b103      	cbz	r3, 800f8bc <_kill_r+0x1c>
 800f8ba:	6023      	str	r3, [r4, #0]
 800f8bc:	bd38      	pop	{r3, r4, r5, pc}
 800f8be:	bf00      	nop
 800f8c0:	20008f44 	.word	0x20008f44

0800f8c4 <_getpid_r>:
 800f8c4:	f000 b958 	b.w	800fb78 <_getpid>

0800f8c8 <__sread>:
 800f8c8:	b510      	push	{r4, lr}
 800f8ca:	460c      	mov	r4, r1
 800f8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8d0:	f000 f894 	bl	800f9fc <_read_r>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	bfab      	itete	ge
 800f8d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f8da:	89a3      	ldrhlt	r3, [r4, #12]
 800f8dc:	181b      	addge	r3, r3, r0
 800f8de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f8e2:	bfac      	ite	ge
 800f8e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f8e6:	81a3      	strhlt	r3, [r4, #12]
 800f8e8:	bd10      	pop	{r4, pc}

0800f8ea <__swrite>:
 800f8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ee:	461f      	mov	r7, r3
 800f8f0:	898b      	ldrh	r3, [r1, #12]
 800f8f2:	05db      	lsls	r3, r3, #23
 800f8f4:	4605      	mov	r5, r0
 800f8f6:	460c      	mov	r4, r1
 800f8f8:	4616      	mov	r6, r2
 800f8fa:	d505      	bpl.n	800f908 <__swrite+0x1e>
 800f8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f900:	2302      	movs	r3, #2
 800f902:	2200      	movs	r2, #0
 800f904:	f000 f868 	bl	800f9d8 <_lseek_r>
 800f908:	89a3      	ldrh	r3, [r4, #12]
 800f90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f90e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f912:	81a3      	strh	r3, [r4, #12]
 800f914:	4632      	mov	r2, r6
 800f916:	463b      	mov	r3, r7
 800f918:	4628      	mov	r0, r5
 800f91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f91e:	f000 b817 	b.w	800f950 <_write_r>

0800f922 <__sseek>:
 800f922:	b510      	push	{r4, lr}
 800f924:	460c      	mov	r4, r1
 800f926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f92a:	f000 f855 	bl	800f9d8 <_lseek_r>
 800f92e:	1c43      	adds	r3, r0, #1
 800f930:	89a3      	ldrh	r3, [r4, #12]
 800f932:	bf15      	itete	ne
 800f934:	6560      	strne	r0, [r4, #84]	; 0x54
 800f936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f93e:	81a3      	strheq	r3, [r4, #12]
 800f940:	bf18      	it	ne
 800f942:	81a3      	strhne	r3, [r4, #12]
 800f944:	bd10      	pop	{r4, pc}

0800f946 <__sclose>:
 800f946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f94a:	f000 b813 	b.w	800f974 <_close_r>
	...

0800f950 <_write_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	4d07      	ldr	r5, [pc, #28]	; (800f970 <_write_r+0x20>)
 800f954:	4604      	mov	r4, r0
 800f956:	4608      	mov	r0, r1
 800f958:	4611      	mov	r1, r2
 800f95a:	2200      	movs	r2, #0
 800f95c:	602a      	str	r2, [r5, #0]
 800f95e:	461a      	mov	r2, r3
 800f960:	f7f6 f850 	bl	8005a04 <_write>
 800f964:	1c43      	adds	r3, r0, #1
 800f966:	d102      	bne.n	800f96e <_write_r+0x1e>
 800f968:	682b      	ldr	r3, [r5, #0]
 800f96a:	b103      	cbz	r3, 800f96e <_write_r+0x1e>
 800f96c:	6023      	str	r3, [r4, #0]
 800f96e:	bd38      	pop	{r3, r4, r5, pc}
 800f970:	20008f44 	.word	0x20008f44

0800f974 <_close_r>:
 800f974:	b538      	push	{r3, r4, r5, lr}
 800f976:	4d06      	ldr	r5, [pc, #24]	; (800f990 <_close_r+0x1c>)
 800f978:	2300      	movs	r3, #0
 800f97a:	4604      	mov	r4, r0
 800f97c:	4608      	mov	r0, r1
 800f97e:	602b      	str	r3, [r5, #0]
 800f980:	f000 f8ea 	bl	800fb58 <_close>
 800f984:	1c43      	adds	r3, r0, #1
 800f986:	d102      	bne.n	800f98e <_close_r+0x1a>
 800f988:	682b      	ldr	r3, [r5, #0]
 800f98a:	b103      	cbz	r3, 800f98e <_close_r+0x1a>
 800f98c:	6023      	str	r3, [r4, #0]
 800f98e:	bd38      	pop	{r3, r4, r5, pc}
 800f990:	20008f44 	.word	0x20008f44

0800f994 <_fstat_r>:
 800f994:	b538      	push	{r3, r4, r5, lr}
 800f996:	4d07      	ldr	r5, [pc, #28]	; (800f9b4 <_fstat_r+0x20>)
 800f998:	2300      	movs	r3, #0
 800f99a:	4604      	mov	r4, r0
 800f99c:	4608      	mov	r0, r1
 800f99e:	4611      	mov	r1, r2
 800f9a0:	602b      	str	r3, [r5, #0]
 800f9a2:	f000 f8e1 	bl	800fb68 <_fstat>
 800f9a6:	1c43      	adds	r3, r0, #1
 800f9a8:	d102      	bne.n	800f9b0 <_fstat_r+0x1c>
 800f9aa:	682b      	ldr	r3, [r5, #0]
 800f9ac:	b103      	cbz	r3, 800f9b0 <_fstat_r+0x1c>
 800f9ae:	6023      	str	r3, [r4, #0]
 800f9b0:	bd38      	pop	{r3, r4, r5, pc}
 800f9b2:	bf00      	nop
 800f9b4:	20008f44 	.word	0x20008f44

0800f9b8 <_isatty_r>:
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	4d06      	ldr	r5, [pc, #24]	; (800f9d4 <_isatty_r+0x1c>)
 800f9bc:	2300      	movs	r3, #0
 800f9be:	4604      	mov	r4, r0
 800f9c0:	4608      	mov	r0, r1
 800f9c2:	602b      	str	r3, [r5, #0]
 800f9c4:	f000 f8e0 	bl	800fb88 <_isatty>
 800f9c8:	1c43      	adds	r3, r0, #1
 800f9ca:	d102      	bne.n	800f9d2 <_isatty_r+0x1a>
 800f9cc:	682b      	ldr	r3, [r5, #0]
 800f9ce:	b103      	cbz	r3, 800f9d2 <_isatty_r+0x1a>
 800f9d0:	6023      	str	r3, [r4, #0]
 800f9d2:	bd38      	pop	{r3, r4, r5, pc}
 800f9d4:	20008f44 	.word	0x20008f44

0800f9d8 <_lseek_r>:
 800f9d8:	b538      	push	{r3, r4, r5, lr}
 800f9da:	4d07      	ldr	r5, [pc, #28]	; (800f9f8 <_lseek_r+0x20>)
 800f9dc:	4604      	mov	r4, r0
 800f9de:	4608      	mov	r0, r1
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	602a      	str	r2, [r5, #0]
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	f000 f8de 	bl	800fba8 <_lseek>
 800f9ec:	1c43      	adds	r3, r0, #1
 800f9ee:	d102      	bne.n	800f9f6 <_lseek_r+0x1e>
 800f9f0:	682b      	ldr	r3, [r5, #0]
 800f9f2:	b103      	cbz	r3, 800f9f6 <_lseek_r+0x1e>
 800f9f4:	6023      	str	r3, [r4, #0]
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	20008f44 	.word	0x20008f44

0800f9fc <_read_r>:
 800f9fc:	b538      	push	{r3, r4, r5, lr}
 800f9fe:	4d07      	ldr	r5, [pc, #28]	; (800fa1c <_read_r+0x20>)
 800fa00:	4604      	mov	r4, r0
 800fa02:	4608      	mov	r0, r1
 800fa04:	4611      	mov	r1, r2
 800fa06:	2200      	movs	r2, #0
 800fa08:	602a      	str	r2, [r5, #0]
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	f000 f8d4 	bl	800fbb8 <_read>
 800fa10:	1c43      	adds	r3, r0, #1
 800fa12:	d102      	bne.n	800fa1a <_read_r+0x1e>
 800fa14:	682b      	ldr	r3, [r5, #0]
 800fa16:	b103      	cbz	r3, 800fa1a <_read_r+0x1e>
 800fa18:	6023      	str	r3, [r4, #0]
 800fa1a:	bd38      	pop	{r3, r4, r5, pc}
 800fa1c:	20008f44 	.word	0x20008f44

0800fa20 <with_errnof>:
 800fa20:	b513      	push	{r0, r1, r4, lr}
 800fa22:	4604      	mov	r4, r0
 800fa24:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fa28:	f7fd fb44 	bl	800d0b4 <__errno>
 800fa2c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fa30:	6004      	str	r4, [r0, #0]
 800fa32:	b002      	add	sp, #8
 800fa34:	bd10      	pop	{r4, pc}

0800fa36 <xflowf>:
 800fa36:	b130      	cbz	r0, 800fa46 <xflowf+0x10>
 800fa38:	eef1 7a40 	vneg.f32	s15, s0
 800fa3c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fa40:	2022      	movs	r0, #34	; 0x22
 800fa42:	f7ff bfed 	b.w	800fa20 <with_errnof>
 800fa46:	eef0 7a40 	vmov.f32	s15, s0
 800fa4a:	e7f7      	b.n	800fa3c <xflowf+0x6>

0800fa4c <__math_uflowf>:
 800fa4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fa54 <__math_uflowf+0x8>
 800fa50:	f7ff bff1 	b.w	800fa36 <xflowf>
 800fa54:	10000000 	.word	0x10000000

0800fa58 <__math_may_uflowf>:
 800fa58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fa60 <__math_may_uflowf+0x8>
 800fa5c:	f7ff bfeb 	b.w	800fa36 <xflowf>
 800fa60:	1a200000 	.word	0x1a200000

0800fa64 <__math_oflowf>:
 800fa64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fa6c <__math_oflowf+0x8>
 800fa68:	f7ff bfe5 	b.w	800fa36 <xflowf>
 800fa6c:	70000000 	.word	0x70000000

0800fa70 <expf>:
 800fa70:	ee10 2a10 	vmov	r2, s0
 800fa74:	f240 412a 	movw	r1, #1066	; 0x42a
 800fa78:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800fa7c:	428b      	cmp	r3, r1
 800fa7e:	b430      	push	{r4, r5}
 800fa80:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800fa84:	d92a      	bls.n	800fadc <expf+0x6c>
 800fa86:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800fa8a:	d058      	beq.n	800fb3e <expf+0xce>
 800fa8c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800fa90:	d303      	bcc.n	800fa9a <expf+0x2a>
 800fa92:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fa96:	bc30      	pop	{r4, r5}
 800fa98:	4770      	bx	lr
 800fa9a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800fb44 <expf+0xd4>
 800fa9e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800faa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faa6:	dd03      	ble.n	800fab0 <expf+0x40>
 800faa8:	bc30      	pop	{r4, r5}
 800faaa:	2000      	movs	r0, #0
 800faac:	f7ff bfda 	b.w	800fa64 <__math_oflowf>
 800fab0:	eddf 7a25 	vldr	s15, [pc, #148]	; 800fb48 <expf+0xd8>
 800fab4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800fab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fabc:	d503      	bpl.n	800fac6 <expf+0x56>
 800fabe:	bc30      	pop	{r4, r5}
 800fac0:	2000      	movs	r0, #0
 800fac2:	f7ff bfc3 	b.w	800fa4c <__math_uflowf>
 800fac6:	eddf 7a21 	vldr	s15, [pc, #132]	; 800fb4c <expf+0xdc>
 800faca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800face:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fad2:	d503      	bpl.n	800fadc <expf+0x6c>
 800fad4:	bc30      	pop	{r4, r5}
 800fad6:	2000      	movs	r0, #0
 800fad8:	f7ff bfbe 	b.w	800fa58 <__math_may_uflowf>
 800fadc:	4b1c      	ldr	r3, [pc, #112]	; (800fb50 <expf+0xe0>)
 800fade:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fae2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800fae6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800faea:	eeb0 7b44 	vmov.f64	d7, d4
 800faee:	eea5 7b06 	vfma.f64	d7, d5, d6
 800faf2:	ee17 0a10 	vmov	r0, s14
 800faf6:	ee37 7b44 	vsub.f64	d7, d7, d4
 800fafa:	f000 021f 	and.w	r2, r0, #31
 800fafe:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800fb02:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800fb06:	ee27 4b07 	vmul.f64	d4, d7, d7
 800fb0a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800fb0e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800fb12:	eea5 6b07 	vfma.f64	d6, d5, d7
 800fb16:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800fb1a:	684d      	ldr	r5, [r1, #4]
 800fb1c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800fb20:	2100      	movs	r1, #0
 800fb22:	190a      	adds	r2, r1, r4
 800fb24:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800fb28:	eea5 0b07 	vfma.f64	d0, d5, d7
 800fb2c:	ec43 2b17 	vmov	d7, r2, r3
 800fb30:	eea6 0b04 	vfma.f64	d0, d6, d4
 800fb34:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fb38:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fb3c:	e7ab      	b.n	800fa96 <expf+0x26>
 800fb3e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800fb54 <expf+0xe4>
 800fb42:	e7a8      	b.n	800fa96 <expf+0x26>
 800fb44:	42b17217 	.word	0x42b17217
 800fb48:	c2cff1b4 	.word	0xc2cff1b4
 800fb4c:	c2ce8ecf 	.word	0xc2ce8ecf
 800fb50:	0806fbe0 	.word	0x0806fbe0
 800fb54:	00000000 	.word	0x00000000

0800fb58 <_close>:
 800fb58:	4b02      	ldr	r3, [pc, #8]	; (800fb64 <_close+0xc>)
 800fb5a:	2258      	movs	r2, #88	; 0x58
 800fb5c:	601a      	str	r2, [r3, #0]
 800fb5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb62:	4770      	bx	lr
 800fb64:	20008f44 	.word	0x20008f44

0800fb68 <_fstat>:
 800fb68:	4b02      	ldr	r3, [pc, #8]	; (800fb74 <_fstat+0xc>)
 800fb6a:	2258      	movs	r2, #88	; 0x58
 800fb6c:	601a      	str	r2, [r3, #0]
 800fb6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb72:	4770      	bx	lr
 800fb74:	20008f44 	.word	0x20008f44

0800fb78 <_getpid>:
 800fb78:	4b02      	ldr	r3, [pc, #8]	; (800fb84 <_getpid+0xc>)
 800fb7a:	2258      	movs	r2, #88	; 0x58
 800fb7c:	601a      	str	r2, [r3, #0]
 800fb7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb82:	4770      	bx	lr
 800fb84:	20008f44 	.word	0x20008f44

0800fb88 <_isatty>:
 800fb88:	4b02      	ldr	r3, [pc, #8]	; (800fb94 <_isatty+0xc>)
 800fb8a:	2258      	movs	r2, #88	; 0x58
 800fb8c:	601a      	str	r2, [r3, #0]
 800fb8e:	2000      	movs	r0, #0
 800fb90:	4770      	bx	lr
 800fb92:	bf00      	nop
 800fb94:	20008f44 	.word	0x20008f44

0800fb98 <_kill>:
 800fb98:	4b02      	ldr	r3, [pc, #8]	; (800fba4 <_kill+0xc>)
 800fb9a:	2258      	movs	r2, #88	; 0x58
 800fb9c:	601a      	str	r2, [r3, #0]
 800fb9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fba2:	4770      	bx	lr
 800fba4:	20008f44 	.word	0x20008f44

0800fba8 <_lseek>:
 800fba8:	4b02      	ldr	r3, [pc, #8]	; (800fbb4 <_lseek+0xc>)
 800fbaa:	2258      	movs	r2, #88	; 0x58
 800fbac:	601a      	str	r2, [r3, #0]
 800fbae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbb2:	4770      	bx	lr
 800fbb4:	20008f44 	.word	0x20008f44

0800fbb8 <_read>:
 800fbb8:	4b02      	ldr	r3, [pc, #8]	; (800fbc4 <_read+0xc>)
 800fbba:	2258      	movs	r2, #88	; 0x58
 800fbbc:	601a      	str	r2, [r3, #0]
 800fbbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbc2:	4770      	bx	lr
 800fbc4:	20008f44 	.word	0x20008f44

0800fbc8 <_exit>:
 800fbc8:	e7fe      	b.n	800fbc8 <_exit>
	...

0800fbcc <_init>:
 800fbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbce:	bf00      	nop
 800fbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbd2:	bc08      	pop	{r3}
 800fbd4:	469e      	mov	lr, r3
 800fbd6:	4770      	bx	lr

0800fbd8 <_fini>:
 800fbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbda:	bf00      	nop
 800fbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbde:	bc08      	pop	{r3}
 800fbe0:	469e      	mov	lr, r3
 800fbe2:	4770      	bx	lr
