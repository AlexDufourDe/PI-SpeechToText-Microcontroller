
Microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdc0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800bfb8  0800bfb8  0001bfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bfec  0800bfec  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  0800bfec  0800bfec  0001bfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bff4  0800bff4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bff4  0800bff4  0001bff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bff8  0800bff8  0001bff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0800bffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007020  20000040  0800c03c  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20007060  0800c03c  00027060  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027085  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049f1  00000000  00000000  000470f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f10  00000000  00000000  0004bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d30  00000000  00000000  0004d9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00034f43  00000000  00000000  0004f728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027a3c  00000000  00000000  0008466b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00135ac0  00000000  00000000  000ac0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e1b67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008434  00000000  00000000  001e1bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000040 	.word	0x20000040
 8000214:	00000000 	.word	0x00000000
 8000218:	0800bfa0 	.word	0x0800bfa0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000044 	.word	0x20000044
 8000234:	0800bfa0 	.word	0x0800bfa0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000540:	f003 fbb1 	bl	8003ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000544:	f000 f83a 	bl	80005bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000548:	f000 f8a6 	bl	8000698 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fcce 	bl	8000eec <MX_GPIO_Init>
  MX_ADC3_Init();
 8000550:	f000 f8d0 	bl	80006f4 <MX_ADC3_Init>
  MX_DSIHOST_DSI_Init();
 8000554:	f000 f9fc 	bl	8000950 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000558:	f000 fc7a 	bl	8000e50 <MX_FMC_Init>
  MX_SAI1_Init();
 800055c:	f000 fae0 	bl	8000b20 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000560:	f000 fb5e 	bl	8000c20 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 8000564:	f000 fb7c 	bl	8000c60 <MX_SPDIFRX_Init>
  MX_USART1_UART_Init();
 8000568:	f000 fbac 	bl	8000cc4 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800056c:	f000 fbda 	bl	8000d24 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000570:	f000 fc06 	bl	8000d80 <MX_USB_OTG_HS_PCD_Init>
  MX_DFSDM1_Init();
 8000574:	f000 f910 	bl	8000798 <MX_DFSDM1_Init>
  MX_DMA_Init();
 8000578:	f000 fc34 	bl	8000de4 <MX_DMA_Init>
  MX_FATFS_Init();
 800057c:	f00b fa2e 	bl	800b9dc <MX_FATFS_Init>
  MX_RTC_Init();
 8000580:	f000 fa9e 	bl	8000ac0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058a:	480a      	ldr	r0, [pc, #40]	; (80005b4 <main+0x78>)
 800058c:	f005 fb54 	bl	8005c38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <main+0x7c>)
 8000596:	f005 fb4f 	bl	8005c38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2102      	movs	r1, #2
 800059e:	4806      	ldr	r0, [pc, #24]	; (80005b8 <main+0x7c>)
 80005a0:	f005 fb4a 	bl	8005c38 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2108      	movs	r1, #8
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <main+0x7c>)
 80005aa:	f005 fb45 	bl	8005c38 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  checkMicrophone();
 80005ae:	f001 fdf1 	bl	8002194 <checkMicrophone>
 80005b2:	e7fc      	b.n	80005ae <main+0x72>
 80005b4:	40022000 	.word	0x40022000
 80005b8:	40022400 	.word	0x40022400

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2234      	movs	r2, #52	; 0x34
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f00b fce0 	bl	800bf90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 0308 	add.w	r3, r7, #8
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005e0:	f006 fa36 	bl	8006a50 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <SystemClock_Config+0xd4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a29      	ldr	r2, [pc, #164]	; (8000690 <SystemClock_Config+0xd4>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b27      	ldr	r3, [pc, #156]	; (8000690 <SystemClock_Config+0xd4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <SystemClock_Config+0xd8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000604:	4a23      	ldr	r2, [pc, #140]	; (8000694 <SystemClock_Config+0xd8>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <SystemClock_Config+0xd8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000618:	2309      	movs	r3, #9
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000622:	2301      	movs	r3, #1
 8000624:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000630:	2319      	movs	r3, #25
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000634:	23c0      	movs	r3, #192	; 0xc0
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000638:	2304      	movs	r3, #4
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000640:	2302      	movs	r3, #2
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4618      	mov	r0, r3
 800064a:	f006 fa11 	bl	8006a70 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000654:	f000 feca 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000664:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000668:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800066e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2101      	movs	r1, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f006 fca8 	bl	8006fcc <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000682:	f000 feb3 	bl	80013ec <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0a4      	sub	sp, #144	; 0x90
 800069c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800069e:	463b      	mov	r3, r7
 80006a0:	2290      	movs	r2, #144	; 0x90
 80006a2:	2100      	movs	r1, #0
 80006a4:	4618      	mov	r0, r3
 80006a6:	f00b fc73 	bl	800bf90 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <PeriphCommonClock_Config+0x58>)
 80006ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80006ae:	23c0      	movs	r3, #192	; 0xc0
 80006b0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 80006b6:	2303      	movs	r3, #3
 80006b8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80006c2:	2300      	movs	r3, #0
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80006c6:	2300      	movs	r3, #0
 80006c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006d6:	463b      	mov	r3, r7
 80006d8:	4618      	mov	r0, r3
 80006da:	f006 fe5d 	bl	8007398 <HAL_RCCEx_PeriphCLKConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80006e4:	f000 fe82 	bl	80013ec <Error_Handler>
  }
}
 80006e8:	bf00      	nop
 80006ea:	3790      	adds	r7, #144	; 0x90
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	18280000 	.word	0x18280000

080006f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC3_Init+0x98>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_ADC3_Init+0x9c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ADC3_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000712:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_ADC3_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000718:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ADC3_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_ADC3_Init+0x98>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000724:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ADC3_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ADC3_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_ADC3_Init+0x98>)
 8000734:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_ADC3_Init+0xa0>)
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_ADC3_Init+0x98>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_ADC3_Init+0x98>)
 8000740:	2201      	movs	r2, #1
 8000742:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ADC3_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_ADC3_Init+0x98>)
 800074e:	2201      	movs	r2, #1
 8000750:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <MX_ADC3_Init+0x98>)
 8000754:	f003 fb28 	bl	8003da8 <HAL_ADC_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800075e:	f000 fe45 	bl	80013ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000762:	2308      	movs	r3, #8
 8000764:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000766:	2301      	movs	r3, #1
 8000768:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	4619      	mov	r1, r3
 8000772:	4806      	ldr	r0, [pc, #24]	; (800078c <MX_ADC3_Init+0x98>)
 8000774:	f003 fb5c 	bl	8003e30 <HAL_ADC_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800077e:	f000 fe35 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	3710      	adds	r7, #16
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20006074 	.word	0x20006074
 8000790:	40012200 	.word	0x40012200
 8000794:	0f000001 	.word	0x0f000001

08000798 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800079c:	4b63      	ldr	r3, [pc, #396]	; (800092c <MX_DFSDM1_Init+0x194>)
 800079e:	4a64      	ldr	r2, [pc, #400]	; (8000930 <MX_DFSDM1_Init+0x198>)
 80007a0:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007a2:	4b62      	ldr	r3, [pc, #392]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 80007a8:	4b60      	ldr	r3, [pc, #384]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 80007ae:	4b5f      	ldr	r3, [pc, #380]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80007b4:	4b5d      	ldr	r3, [pc, #372]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 80007ba:	4b5c      	ldr	r3, [pc, #368]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007bc:	2200      	movs	r2, #0
 80007be:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 80007c0:	4b5a      	ldr	r3, [pc, #360]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80007c6:	4b59      	ldr	r3, [pc, #356]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80007cc:	4b57      	ldr	r3, [pc, #348]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007d2:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80007d4:	4b55      	ldr	r3, [pc, #340]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007d6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80007da:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 80007dc:	4b53      	ldr	r3, [pc, #332]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007de:	2240      	movs	r2, #64	; 0x40
 80007e0:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 80007e2:	4b52      	ldr	r3, [pc, #328]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 80007e8:	4850      	ldr	r0, [pc, #320]	; (800092c <MX_DFSDM1_Init+0x194>)
 80007ea:	f003 ff43 	bl	8004674 <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80007ee:	4b51      	ldr	r3, [pc, #324]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 80007f0:	4a51      	ldr	r2, [pc, #324]	; (8000938 <MX_DFSDM1_Init+0x1a0>)
 80007f2:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 80007f4:	4b4f      	ldr	r3, [pc, #316]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80007fa:	4b4e      	ldr	r3, [pc, #312]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 8000800:	4b4c      	ldr	r3, [pc, #304]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 8000802:	2200      	movs	r2, #0
 8000804:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000806:	4b4b      	ldr	r3, [pc, #300]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 800080c:	4b49      	ldr	r3, [pc, #292]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 800080e:	2201      	movs	r2, #1
 8000810:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 8000812:	4b48      	ldr	r3, [pc, #288]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 8000814:	2200      	movs	r2, #0
 8000816:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000818:	4b46      	ldr	r3, [pc, #280]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 800081e:	4b45      	ldr	r3, [pc, #276]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 8000820:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000824:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000826:	4b43      	ldr	r3, [pc, #268]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 8000828:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800082c:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 800082e:	4b41      	ldr	r3, [pc, #260]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 8000830:	2240      	movs	r2, #64	; 0x40
 8000832:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000834:	4b3f      	ldr	r3, [pc, #252]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 8000836:	2201      	movs	r2, #1
 8000838:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 800083a:	483e      	ldr	r0, [pc, #248]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 800083c:	f003 ff1a 	bl	8004674 <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000840:	4b3e      	ldr	r3, [pc, #248]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 8000842:	4a3f      	ldr	r2, [pc, #252]	; (8000940 <MX_DFSDM1_Init+0x1a8>)
 8000844:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000846:	4b3d      	ldr	r3, [pc, #244]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 8000848:	2201      	movs	r2, #1
 800084a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 800084c:	4b3b      	ldr	r3, [pc, #236]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 800084e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000852:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 8000854:	4b39      	ldr	r3, [pc, #228]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 8000856:	2204      	movs	r2, #4
 8000858:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800085a:	4b38      	ldr	r3, [pc, #224]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000860:	4b36      	ldr	r3, [pc, #216]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000866:	4b35      	ldr	r3, [pc, #212]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 8000868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800086c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 800086e:	4b33      	ldr	r3, [pc, #204]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 8000870:	2201      	movs	r2, #1
 8000872:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000874:	4b31      	ldr	r3, [pc, #196]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 8000876:	2204      	movs	r2, #4
 8000878:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800087a:	4b30      	ldr	r3, [pc, #192]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 10;
 8000880:	4b2e      	ldr	r3, [pc, #184]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 8000882:	220a      	movs	r2, #10
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 8000888:	2200      	movs	r2, #0
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 800088e:	2202      	movs	r2, #2
 8000890:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000892:	482a      	ldr	r0, [pc, #168]	; (800093c <MX_DFSDM1_Init+0x1a4>)
 8000894:	f003 fe2e 	bl	80044f4 <HAL_DFSDM_ChannelInit>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 800089e:	f000 fda5 	bl	80013ec <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008a4:	4a28      	ldr	r2, [pc, #160]	; (8000948 <MX_DFSDM1_Init+0x1b0>)
 80008a6:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 80008ae:	4b25      	ldr	r3, [pc, #148]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008b8:	2204      	movs	r2, #4
 80008ba:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008bc:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008c2:	4b20      	ldr	r3, [pc, #128]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008e2:	220a      	movs	r2, #10
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008f2:	4814      	ldr	r0, [pc, #80]	; (8000944 <MX_DFSDM1_Init+0x1ac>)
 80008f4:	f003 fdfe 	bl	80044f4 <HAL_DFSDM_ChannelInit>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 80008fe:	f000 fd75 	bl	80013ec <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_OFF);
 8000902:	2200      	movs	r2, #0
 8000904:	4911      	ldr	r1, [pc, #68]	; (800094c <MX_DFSDM1_Init+0x1b4>)
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_DFSDM1_Init+0x194>)
 8000908:	f003 ff8e 	bl	8004828 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 800090c:	490f      	ldr	r1, [pc, #60]	; (800094c <MX_DFSDM1_Init+0x1b4>)
 800090e:	4807      	ldr	r0, [pc, #28]	; (800092c <MX_DFSDM1_Init+0x194>)
 8000910:	f003 ffd0 	bl	80048b4 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_OFF);
 8000914:	2200      	movs	r2, #0
 8000916:	490d      	ldr	r1, [pc, #52]	; (800094c <MX_DFSDM1_Init+0x1b4>)
 8000918:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 800091a:	f003 ff85 	bl	8004828 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 800091e:	2101      	movs	r1, #1
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_DFSDM1_Init+0x19c>)
 8000922:	f003 ffc7 	bl	80048b4 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	200060bc 	.word	0x200060bc
 8000930:	40017500 	.word	0x40017500
 8000934:	20006110 	.word	0x20006110
 8000938:	40017580 	.word	0x40017580
 800093c:	20006164 	.word	0x20006164
 8000940:	40017400 	.word	0x40017400
 8000944:	2000619c 	.word	0x2000619c
 8000948:	40017420 	.word	0x40017420
 800094c:	00010002 	.word	0x00010002

08000950 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0a0      	sub	sp, #128	; 0x80
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000956:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000962:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000966:	2224      	movs	r2, #36	; 0x24
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f00b fb10 	bl	800bf90 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000970:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2234      	movs	r2, #52	; 0x34
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f00b fb01 	bl	800bf90 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 800098e:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <MX_DSIHOST_DSI_Init+0x168>)
 8000990:	4a4a      	ldr	r2, [pc, #296]	; (8000abc <MX_DSIHOST_DSI_Init+0x16c>)
 8000992:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000994:	4b48      	ldr	r3, [pc, #288]	; (8000ab8 <MX_DSIHOST_DSI_Init+0x168>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800099a:	4b47      	ldr	r3, [pc, #284]	; (8000ab8 <MX_DSIHOST_DSI_Init+0x168>)
 800099c:	2204      	movs	r2, #4
 800099e:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 80009a0:	4b45      	ldr	r3, [pc, #276]	; (8000ab8 <MX_DSIHOST_DSI_Init+0x168>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 80009a6:	2314      	movs	r3, #20
 80009a8:	677b      	str	r3, [r7, #116]	; 0x74
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	67bb      	str	r3, [r7, #120]	; 0x78
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 80009ae:	2300      	movs	r3, #0
 80009b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80009b6:	4619      	mov	r1, r3
 80009b8:	483f      	ldr	r0, [pc, #252]	; (8000ab8 <MX_DSIHOST_DSI_Init+0x168>)
 80009ba:	f004 fbbb 	bl	8005134 <HAL_DSI_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_DSIHOST_DSI_Init+0x78>
  {
    Error_Handler();
 80009c4:	f000 fd12 	bl	80013ec <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	653b      	str	r3, [r7, #80]	; 0x50
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	657b      	str	r3, [r7, #84]	; 0x54
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	65bb      	str	r3, [r7, #88]	; 0x58
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  HostTimeouts.LowPowerReadTimeout = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	663b      	str	r3, [r7, #96]	; 0x60
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	667b      	str	r3, [r7, #100]	; 0x64
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	66bb      	str	r3, [r7, #104]	; 0x68
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  HostTimeouts.BTATimeout = 0;
 80009e8:	2300      	movs	r3, #0
 80009ea:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80009f0:	4619      	mov	r1, r3
 80009f2:	4831      	ldr	r0, [pc, #196]	; (8000ab8 <MX_DSIHOST_DSI_Init+0x168>)
 80009f4:	f004 fe66 	bl	80056c4 <HAL_DSI_ConfigHostTimeouts>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_DSIHOST_DSI_Init+0xb2>
  {
    Error_Handler();
 80009fe:	f000 fcf5 	bl	80013ec <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000a02:	231c      	movs	r3, #28
 8000a04:	63bb      	str	r3, [r7, #56]	; 0x38
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000a06:	2321      	movs	r3, #33	; 0x21
 8000a08:	63fb      	str	r3, [r7, #60]	; 0x3c
  PhyTimings.DataLaneHS2LPTime = 15;
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	643b      	str	r3, [r7, #64]	; 0x40
  PhyTimings.DataLaneLP2HSTime = 25;
 8000a0e:	2319      	movs	r3, #25
 8000a10:	647b      	str	r3, [r7, #68]	; 0x44
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	64bb      	str	r3, [r7, #72]	; 0x48
  PhyTimings.StopWaitTime = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4825      	ldr	r0, [pc, #148]	; (8000ab8 <MX_DSIHOST_DSI_Init+0x168>)
 8000a22:	f004 fde5 	bl	80055f0 <HAL_DSI_ConfigPhyTimer>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_DSIHOST_DSI_Init+0xe0>
  {
    Error_Handler();
 8000a2c:	f000 fcde 	bl	80013ec <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a30:	2104      	movs	r1, #4
 8000a32:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <MX_DSIHOST_DSI_Init+0x168>)
 8000a34:	f004 fdb4 	bl	80055a0 <HAL_DSI_ConfigFlowControl>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_DSIHOST_DSI_Init+0xf2>
  {
    Error_Handler();
 8000a3e:	f000 fcd5 	bl	80013ec <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a42:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a46:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <MX_DSIHOST_DSI_Init+0x168>)
 8000a48:	f004 ff04 	bl	8005854 <HAL_DSI_SetLowPowerRXFilter>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_DSIHOST_DSI_Init+0x106>
  {
    Error_Handler();
 8000a52:	f000 fccb 	bl	80013ec <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4817      	ldr	r0, [pc, #92]	; (8000ab8 <MX_DSIHOST_DSI_Init+0x168>)
 8000a5a:	f004 fc87 	bl	800536c <HAL_DSI_ConfigErrorMonitor>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_DSIHOST_DSI_Init+0x118>
  {
    Error_Handler();
 8000a64:	f000 fcc2 	bl	80013ec <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_DSIHOST_DSI_Init+0x168>)
 8000aa2:	f004 fd1f 	bl	80054e4 <HAL_DSI_ConfigCommand>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_DSIHOST_DSI_Init+0x160>
  {
    Error_Handler();
 8000aac:	f000 fc9e 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	3780      	adds	r7, #128	; 0x80
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20006294 	.word	0x20006294
 8000abc:	40016c00 	.word	0x40016c00

08000ac0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_RTC_Init+0x58>)
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <MX_RTC_Init+0x5c>)
 8000adc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_RTC_Init+0x58>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_RTC_Init+0x58>)
 8000ae6:	227f      	movs	r2, #127	; 0x7f
 8000ae8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_RTC_Init+0x58>)
 8000aec:	22ff      	movs	r2, #255	; 0xff
 8000aee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_RTC_Init+0x58>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_RTC_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_RTC_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_RTC_Init+0x58>)
 8000b04:	f007 f9e2 	bl	8007ecc <HAL_RTC_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 fc6d 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	200062b0 	.word	0x200062b0
 8000b1c:	40002800 	.word	0x40002800

08000b20 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000b20:	b598      	push	{r3, r4, r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b24:	4b3a      	ldr	r3, [pc, #232]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b26:	4a3b      	ldr	r2, [pc, #236]	; (8000c14 <MX_SAI1_Init+0xf4>)
 8000b28:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b2a:	4b39      	ldr	r3, [pc, #228]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b30:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000b36:	4b36      	ldr	r3, [pc, #216]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b3c:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b42:	4b33      	ldr	r3, [pc, #204]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b48:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b4e:	4b30      	ldr	r3, [pc, #192]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b54:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b62:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000b66:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b74:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b7a:	4b25      	ldr	r3, [pc, #148]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 32;
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b82:	2220      	movs	r2, #32
 8000b84:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 16;
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b88:	2210      	movs	r2, #16
 8000b8a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b92:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b94:	4b1e      	ldr	r3, [pc, #120]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000b9a:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000b9c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ba0:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 2;
 8000bae:	4b18      	ldr	r3, [pc, #96]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000003;
 8000bb4:	4b16      	ldr	r3, [pc, #88]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000bb6:	2203      	movs	r2, #3
 8000bb8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000bba:	4815      	ldr	r0, [pc, #84]	; (8000c10 <MX_SAI1_Init+0xf0>)
 8000bbc:	f007 fa8e 	bl	80080dc <HAL_SAI_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000bc6:	f000 fc11 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if(WM8994_ID != wm8994_drv.ReadID(AUDIO_I2C_ADDRESS))
 8000bca:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <MX_SAI1_Init+0xf8>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	2034      	movs	r0, #52	; 0x34
 8000bd0:	4798      	blx	r3
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f648 1294 	movw	r2, #35220	; 0x8994
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d001      	beq.n	8000be0 <MX_SAI1_Init+0xc0>
      {
        Error_Handler();
 8000bdc:	f000 fc06 	bl	80013ec <Error_Handler>
      }

      audio_drv = &wm8994_drv;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_SAI1_Init+0xfc>)
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <MX_SAI1_Init+0xf8>)
 8000be4:	601a      	str	r2, [r3, #0]
      audio_drv->Reset(AUDIO_I2C_ADDRESS);
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <MX_SAI1_Init+0xfc>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bec:	2034      	movs	r0, #52	; 0x34
 8000bee:	4798      	blx	r3
      if(0 != audio_drv->Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 100, AUDIO_FREQUENCY_22K))
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_SAI1_Init+0xfc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681c      	ldr	r4, [r3, #0]
 8000bf6:	f245 6322 	movw	r3, #22050	; 0x5622
 8000bfa:	2264      	movs	r2, #100	; 0x64
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	2034      	movs	r0, #52	; 0x34
 8000c00:	47a0      	blx	r4
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_SAI1_Init+0xec>
      {
        Error_Handler();
 8000c08:	f000 fbf0 	bl	80013ec <Error_Handler>
      }

  /* USER CODE END SAI1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	bd98      	pop	{r3, r4, r7, pc}
 8000c10:	200062d0 	.word	0x200062d0
 8000c14:	40015804 	.word	0x40015804
 8000c18:	20000004 	.word	0x20000004
 8000c1c:	20006070 	.word	0x20006070

08000c20 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_SDMMC1_SD_Init+0x38>)
 8000c26:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <MX_SDMMC1_SD_Init+0x3c>)
 8000c28:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_SDMMC1_SD_Init+0x38>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_SDMMC1_SD_Init+0x38>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_SDMMC1_SD_Init+0x38>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_SDMMC1_SD_Init+0x38>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <MX_SDMMC1_SD_Init+0x38>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <MX_SDMMC1_SD_Init+0x38>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	20006354 	.word	0x20006354
 8000c5c:	40012c00 	.word	0x40012c00

08000c60 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000c66:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000c6a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c72:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_SPDIFRX_Init+0x60>)
 8000cac:	f009 f8a2 	bl	8009df4 <HAL_SPDIFRX_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 8000cb6:	f000 fb99 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20006498 	.word	0x20006498

08000cc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cca:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <MX_USART1_UART_Init+0x5c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USART1_UART_Init+0x58>)
 8000d08:	f009 f8d0 	bl	8009eac <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d12:	f000 fb6b 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200064e4 	.word	0x200064e4
 8000d20:	40011000 	.word	0x40011000

08000d24 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d32:	2206      	movs	r2, #6
 8000d34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d38:	2202      	movs	r2, #2
 8000d3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d44:	2202      	movs	r2, #2
 8000d46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d68:	f005 fd2a 	bl	80067c0 <HAL_PCD_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d72:	f000 fb3b 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000656c 	.word	0x2000656c

08000d80 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000d84:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d86:	4a16      	ldr	r2, [pc, #88]	; (8000de0 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000d88:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d8c:	2209      	movs	r2, #9
 8000d8e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000dc8:	f005 fcfa 	bl	80067c0 <HAL_PCD_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000dd2:	f000 fb0b 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20006a74 	.word	0x20006a74
 8000de0:	40040000 	.word	0x40040000

08000de4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <MX_DMA_Init+0x68>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <MX_DMA_Init+0x68>)
 8000df0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <MX_DMA_Init+0x68>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	2038      	movs	r0, #56	; 0x38
 8000e08:	f003 fb3d 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e0c:	2038      	movs	r0, #56	; 0x38
 8000e0e:	f003 fb56 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2039      	movs	r0, #57	; 0x39
 8000e18:	f003 fb35 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e1c:	2039      	movs	r0, #57	; 0x39
 8000e1e:	f003 fb4e 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	203b      	movs	r0, #59	; 0x3b
 8000e28:	f003 fb2d 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000e2c:	203b      	movs	r0, #59	; 0x3b
 8000e2e:	f003 fb46 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2100      	movs	r1, #0
 8000e36:	2045      	movs	r0, #69	; 0x45
 8000e38:	f003 fb25 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e3c:	2045      	movs	r0, #69	; 0x45
 8000e3e:	f003 fb3e 	bl	80044be <HAL_NVIC_EnableIRQ>

}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023800 	.word	0x40023800

08000e50 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]
 8000e66:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000e6a:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <MX_FMC_Init+0x98>)
 8000e6c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000e7c:	2208      	movs	r2, #8
 8000e7e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000e82:	2220      	movs	r2, #32
 8000e84:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000e88:	2240      	movs	r2, #64	; 0x40
 8000e8a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000eae:	2310      	movs	r3, #16
 8000eb0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000eb2:	2310      	movs	r3, #16
 8000eb4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000eb6:	2310      	movs	r3, #16
 8000eb8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000eba:	2310      	movs	r3, #16
 8000ebc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000ebe:	2310      	movs	r3, #16
 8000ec0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000ec2:	2310      	movs	r3, #16
 8000ec4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <MX_FMC_Init+0x94>)
 8000ecc:	f008 ff5d 	bl	8009d8a <HAL_SDRAM_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000ed6:	f000 fa89 	bl	80013ec <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000eda:	bf00      	nop
 8000edc:	3720      	adds	r7, #32
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20006f7c 	.word	0x20006f7c
 8000ee8:	a0000140 	.word	0xa0000140

08000eec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b090      	sub	sp, #64	; 0x40
 8000ef0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f02:	4bad      	ldr	r3, [pc, #692]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4aac      	ldr	r2, [pc, #688]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4baa      	ldr	r3, [pc, #680]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f1a:	4ba7      	ldr	r3, [pc, #668]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4aa6      	ldr	r2, [pc, #664]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4ba4      	ldr	r3, [pc, #656]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4ba1      	ldr	r3, [pc, #644]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4aa0      	ldr	r2, [pc, #640]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b9e      	ldr	r3, [pc, #632]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	623b      	str	r3, [r7, #32]
 8000f48:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4a:	4b9b      	ldr	r3, [pc, #620]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a9a      	ldr	r2, [pc, #616]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b98      	ldr	r3, [pc, #608]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b95      	ldr	r3, [pc, #596]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a94      	ldr	r2, [pc, #592]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b92      	ldr	r3, [pc, #584]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b8f      	ldr	r3, [pc, #572]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	4a8e      	ldr	r2, [pc, #568]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	; 0x30
 8000f86:	4b8c      	ldr	r3, [pc, #560]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	617b      	str	r3, [r7, #20]
 8000f90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000f92:	4b89      	ldr	r3, [pc, #548]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a88      	ldr	r2, [pc, #544]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b86      	ldr	r3, [pc, #536]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000faa:	4b83      	ldr	r3, [pc, #524]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a82      	ldr	r2, [pc, #520]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b80      	ldr	r3, [pc, #512]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fc2:	4b7d      	ldr	r3, [pc, #500]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a7c      	ldr	r2, [pc, #496]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000fc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b7a      	ldr	r3, [pc, #488]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fda:	4b77      	ldr	r3, [pc, #476]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	4a76      	ldr	r2, [pc, #472]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000fe0:	f043 0320 	orr.w	r3, r3, #32
 8000fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe6:	4b74      	ldr	r3, [pc, #464]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	f003 0320 	and.w	r3, r3, #32
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff2:	4b71      	ldr	r3, [pc, #452]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a70      	ldr	r2, [pc, #448]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8000ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b6e      	ldr	r3, [pc, #440]	; (80011b8 <MX_GPIO_Init+0x2cc>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 800100a:	2200      	movs	r2, #0
 800100c:	f243 010b 	movw	r1, #12299	; 0x300b
 8001010:	486a      	ldr	r0, [pc, #424]	; (80011bc <MX_GPIO_Init+0x2d0>)
 8001012:	f004 fe11 	bl	8005c38 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101c:	4868      	ldr	r0, [pc, #416]	; (80011c0 <MX_GPIO_Init+0x2d4>)
 800101e:	f004 fe0b 	bl	8005c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001022:	2304      	movs	r3, #4
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001026:	2302      	movs	r3, #2
 8001028:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001032:	230b      	movs	r3, #11
 8001034:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800103a:	4619      	mov	r1, r3
 800103c:	4861      	ldr	r0, [pc, #388]	; (80011c4 <MX_GPIO_Init+0x2d8>)
 800103e:	f004 fc37 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TXD1_Pin MII_TXD0_Pin MII_TX_EN_Pin */
  GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 8001042:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001054:	230b      	movs	r3, #11
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001058:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105c:	4619      	mov	r1, r3
 800105e:	485a      	ldr	r0, [pc, #360]	; (80011c8 <MX_GPIO_Init+0x2dc>)
 8001060:	f004 fc26 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106a:	2312      	movs	r3, #18
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001072:	2303      	movs	r3, #3
 8001074:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001076:	2304      	movs	r3, #4
 8001078:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107e:	4619      	mov	r1, r3
 8001080:	4852      	ldr	r0, [pc, #328]	; (80011cc <MX_GPIO_Init+0x2e0>)
 8001082:	f004 fc15 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD2_D3_Pin SD2_D2_Pin */
  GPIO_InitStruct.Pin = SD2_D3_Pin|SD2_D2_Pin;
 8001086:	2318      	movs	r3, #24
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8001096:	230a      	movs	r3, #10
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109e:	4619      	mov	r1, r3
 80010a0:	484a      	ldr	r0, [pc, #296]	; (80011cc <MX_GPIO_Init+0x2e0>)
 80010a2:	f004 fc05 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD2_CMD_Pin */
  GPIO_InitStruct.Pin = SD2_CMD_Pin;
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80010b6:	230b      	movs	r3, #11
 80010b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SD2_CMD_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010be:	4619      	mov	r1, r3
 80010c0:	4843      	ldr	r0, [pc, #268]	; (80011d0 <MX_GPIO_Init+0x2e4>)
 80010c2:	f004 fbf5 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_MCLKB_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKB_Pin;
 80010c6:	2340      	movs	r3, #64	; 0x40
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80010d6:	230a      	movs	r3, #10
 80010d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_MCLKB_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010de:	4619      	mov	r1, r3
 80010e0:	4838      	ldr	r0, [pc, #224]	; (80011c4 <MX_GPIO_Init+0x2d8>)
 80010e2:	f004 fbe5 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAR_VSYNC_Pin */
  GPIO_InitStruct.Pin = PAR_VSYNC_Pin;
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80010f6:	230d      	movs	r3, #13
 80010f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PAR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010fe:	4619      	mov	r1, r3
 8001100:	4832      	ldr	r0, [pc, #200]	; (80011cc <MX_GPIO_Init+0x2e0>)
 8001102:	f004 fbd5 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001106:	2340      	movs	r3, #64	; 0x40
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001116:	230a      	movs	r3, #10
 8001118:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111e:	4619      	mov	r1, r3
 8001120:	482a      	ldr	r0, [pc, #168]	; (80011cc <MX_GPIO_Init+0x2e0>)
 8001122:	f004 fbc5 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_GPIO_Pin MII_MDIO_GPIO_Pin LED3_Pin LED1_Pin
                           LED2_Pin */
  GPIO_InitStruct.Pin = MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 8001126:	f243 030b 	movw	r3, #12299	; 0x300b
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	2300      	movs	r3, #0
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	481f      	ldr	r0, [pc, #124]	; (80011bc <MX_GPIO_Init+0x2d0>)
 8001140:	f004 fbb6 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXPANDER_INT_Pin */
  GPIO_InitStruct.Pin = EXPANDER_INT_Pin;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXPANDER_INT_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001158:	4619      	mov	r1, r3
 800115a:	4819      	ldr	r0, [pc, #100]	; (80011c0 <MX_GPIO_Init+0x2d4>)
 800115c:	f004 fba8 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001160:	23f8      	movs	r3, #248	; 0xf8
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001170:	230e      	movs	r3, #14
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001174:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001178:	4619      	mov	r1, r3
 800117a:	4816      	ldr	r0, [pc, #88]	; (80011d4 <MX_GPIO_Init+0x2e8>)
 800117c:	f004 fb98 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD2_D1_Pin */
  GPIO_InitStruct.Pin = SD2_D1_Pin;
 8001180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8001192:	230b      	movs	r3, #11
 8001194:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SD2_D1_GPIO_Port, &GPIO_InitStruct);
 8001196:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119a:	4619      	mov	r1, r3
 800119c:	480a      	ldr	r0, [pc, #40]	; (80011c8 <MX_GPIO_Init+0x2dc>)
 800119e:	f004 fb87 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B2_Pin LCD_B3_Pin LCD_R5_Pin LCD_R6_Pin */
  GPIO_InitStruct.Pin = LCD_B2_Pin|LCD_B3_Pin|LCD_R5_Pin|LCD_R6_Pin;
 80011a2:	f24c 0330 	movw	r3, #49200	; 0xc030
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80011b4:	e010      	b.n	80011d8 <MX_GPIO_Init+0x2ec>
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40022400 	.word	0x40022400
 80011c0:	40022000 	.word	0x40022000
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40021800 	.word	0x40021800
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40022800 	.word	0x40022800
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011d8:	230e      	movs	r3, #14
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80011dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e0:	4619      	mov	r1, r3
 80011e2:	487a      	ldr	r0, [pc, #488]	; (80013cc <MX_GPIO_Init+0x4e0>)
 80011e4:	f004 fb64 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TAMPER_WKUP_KEY_Pin */
  GPIO_InitStruct.Pin = TAMPER_WKUP_KEY_Pin;
 80011e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TAMPER_WKUP_KEY_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011fc:	4619      	mov	r1, r3
 80011fe:	4874      	ldr	r0, [pc, #464]	; (80013d0 <MX_GPIO_Init+0x4e4>)
 8001200:	f004 fb56 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_FSB_Pin */
  GPIO_InitStruct.Pin = SAI2_FSB_Pin;
 8001204:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001216:	230a      	movs	r3, #10
 8001218:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_FSB_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121e:	4619      	mov	r1, r3
 8001220:	486c      	ldr	r0, [pc, #432]	; (80013d4 <MX_GPIO_Init+0x4e8>)
 8001222:	f004 fb45 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin;
 8001226:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001234:	2300      	movs	r3, #0
 8001236:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001238:	230e      	movs	r3, #14
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800123c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001240:	4619      	mov	r1, r3
 8001242:	4865      	ldr	r0, [pc, #404]	; (80013d8 <MX_GPIO_Init+0x4ec>)
 8001244:	f004 fb34 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_MCO_Pin */
  GPIO_InitStruct.Pin = MII_MCO_Pin;
 8001248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124e:	2302      	movs	r3, #2
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800125a:	2300      	movs	r3, #0
 800125c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_MCO_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001262:	4619      	mov	r1, r3
 8001264:	485d      	ldr	r0, [pc, #372]	; (80013dc <MX_GPIO_Init+0x4f0>)
 8001266:	f004 fb23 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800126a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001280:	4619      	mov	r1, r3
 8001282:	4855      	ldr	r0, [pc, #340]	; (80013d8 <MX_GPIO_Init+0x4ec>)
 8001284:	f004 fb14 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128c:	2302      	movs	r3, #2
 800128e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	2303      	movs	r3, #3
 8001296:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001298:	2309      	movs	r3, #9
 800129a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a0:	4619      	mov	r1, r3
 80012a2:	484f      	ldr	r0, [pc, #316]	; (80013e0 <MX_GPIO_Init+0x4f4>)
 80012a4:	f004 fb04 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 80012a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ae:	2302      	movs	r3, #2
 80012b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b6:	2303      	movs	r3, #3
 80012b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012ba:	230a      	movs	r3, #10
 80012bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c2:	4619      	mov	r1, r3
 80012c4:	4846      	ldr	r0, [pc, #280]	; (80013e0 <MX_GPIO_Init+0x4f4>)
 80012c6:	f004 faf3 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_CLK_Pin MII_TXD2_Pin MII_RXD0_Pin MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_TX_CLK_Pin|MII_TXD2_Pin|MII_RXD0_Pin|MII_RXD1_Pin;
 80012ca:	233c      	movs	r3, #60	; 0x3c
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012da:	230b      	movs	r3, #11
 80012dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e2:	4619      	mov	r1, r3
 80012e4:	483a      	ldr	r0, [pc, #232]	; (80013d0 <MX_GPIO_Init+0x4e4>)
 80012e6:	f004 fae3 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80012ea:	2304      	movs	r3, #4
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f6:	2303      	movs	r3, #3
 80012f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80012fa:	2309      	movs	r3, #9
 80012fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001302:	4619      	mov	r1, r3
 8001304:	4837      	ldr	r0, [pc, #220]	; (80013e4 <MX_GPIO_Init+0x4f8>)
 8001306:	f004 fad3 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_RX_CLK_Pin|MII_RX_DV_Pin;
 800130a:	2382      	movs	r3, #130	; 0x82
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800131a:	230b      	movs	r3, #11
 800131c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001322:	4619      	mov	r1, r3
 8001324:	482d      	ldr	r0, [pc, #180]	; (80013dc <MX_GPIO_Init+0x4f0>)
 8001326:	f004 fac3 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800132a:	2301      	movs	r3, #1
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800133a:	230a      	movs	r3, #10
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001342:	4619      	mov	r1, r3
 8001344:	4825      	ldr	r0, [pc, #148]	; (80013dc <MX_GPIO_Init+0x4f0>)
 8001346:	f004 fab3 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAR_HSYNC_Pin PAR_PCLK_Pin */
  GPIO_InitStruct.Pin = PAR_HSYNC_Pin|PAR_PCLK_Pin;
 800134a:	2350      	movs	r3, #80	; 0x50
 800134c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800135a:	230d      	movs	r3, #13
 800135c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001362:	4619      	mov	r1, r3
 8001364:	481d      	ldr	r0, [pc, #116]	; (80013dc <MX_GPIO_Init+0x4f0>)
 8001366:	f004 faa3 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RXD3_Pin MII_RXD2_Pin */
  GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 800136a:	23c0      	movs	r3, #192	; 0xc0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800137a:	230b      	movs	r3, #11
 800137c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800137e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001382:	4619      	mov	r1, r3
 8001384:	4818      	ldr	r0, [pc, #96]	; (80013e8 <MX_GPIO_Init+0x4fc>)
 8001386:	f004 fa93 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SCKB_Pin */
  GPIO_InitStruct.Pin = SAI2_SCKB_Pin;
 800138a:	2304      	movs	r3, #4
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138e:	2302      	movs	r3, #2
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2300      	movs	r3, #0
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 800139a:	2308      	movs	r3, #8
 800139c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SCKB_GPIO_Port, &GPIO_InitStruct);
 800139e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a2:	4619      	mov	r1, r3
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_GPIO_Init+0x4f0>)
 80013a6:	f004 fa83 	bl	80058b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80013aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013bc:	4619      	mov	r1, r3
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <MX_GPIO_Init+0x4f8>)
 80013c0:	f004 fa76 	bl	80058b0 <HAL_GPIO_Init>

}
 80013c4:	bf00      	nop
 80013c6:	3740      	adds	r7, #64	; 0x40
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40022400 	.word	0x40022400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40021800 	.word	0x40021800
 80013d8:	40022000 	.word	0x40022000
 80013dc:	40020000 	.word	0x40020000
 80013e0:	40021400 	.word	0x40021400
 80013e4:	40020400 	.word	0x40020400
 80013e8:	40021c00 	.word	0x40021c00

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <Error_Handler+0x8>
	...

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_MspInit+0x44>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <HAL_MspInit+0x44>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <HAL_MspInit+0x44>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_MspInit+0x44>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_MspInit+0x44>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_MspInit+0x44>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08a      	sub	sp, #40	; 0x28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a15      	ldr	r2, [pc, #84]	; (80014b4 <HAL_ADC_MspInit+0x74>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d124      	bne.n	80014ac <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <HAL_ADC_MspInit+0x78>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <HAL_ADC_MspInit+0x78>)
 8001468:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_ADC_MspInit+0x78>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_ADC_MspInit+0x78>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a0e      	ldr	r2, [pc, #56]	; (80014b8 <HAL_ADC_MspInit+0x78>)
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_ADC_MspInit+0x78>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 8001492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001496:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001498:	2303      	movs	r3, #3
 800149a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <HAL_ADC_MspInit+0x7c>)
 80014a8:	f004 fa02 	bl	80058b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80014ac:	bf00      	nop
 80014ae:	3728      	adds	r7, #40	; 0x28
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40012200 	.word	0x40012200
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40021400 	.word	0x40021400

080014c0 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80014d8:	4b63      	ldr	r3, [pc, #396]	; (8001668 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d145      	bne.n	800156c <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80014e0:	4b62      	ldr	r3, [pc, #392]	; (800166c <HAL_DFSDM_FilterMspInit+0x1ac>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	3301      	adds	r3, #1
 80014e6:	4a61      	ldr	r2, [pc, #388]	; (800166c <HAL_DFSDM_FilterMspInit+0x1ac>)
 80014e8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80014ea:	4b60      	ldr	r3, [pc, #384]	; (800166c <HAL_DFSDM_FilterMspInit+0x1ac>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d10b      	bne.n	800150a <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80014f2:	4b5f      	ldr	r3, [pc, #380]	; (8001670 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	4a5e      	ldr	r2, [pc, #376]	; (8001670 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80014f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014fc:	6453      	str	r3, [r2, #68]	; 0x44
 80014fe:	4b5c      	ldr	r3, [pc, #368]	; (8001670 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800150a:	4b59      	ldr	r3, [pc, #356]	; (8001670 <HAL_DFSDM_FilterMspInit+0x1b0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a58      	ldr	r2, [pc, #352]	; (8001670 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b56      	ldr	r3, [pc, #344]	; (8001670 <HAL_DFSDM_FilterMspInit+0x1b0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001522:	2340      	movs	r3, #64	; 0x40
 8001524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001532:	230a      	movs	r3, #10
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	484d      	ldr	r0, [pc, #308]	; (8001674 <HAL_DFSDM_FilterMspInit+0x1b4>)
 800153e:	f004 f9b7 	bl	80058b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001542:	2308      	movs	r3, #8
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001552:	2303      	movs	r3, #3
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4845      	ldr	r0, [pc, #276]	; (8001674 <HAL_DFSDM_FilterMspInit+0x1b4>)
 800155e:	f004 f9a7 	bl	80058b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	4a3f      	ldr	r2, [pc, #252]	; (8001668 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800156a:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a41      	ldr	r2, [pc, #260]	; (8001678 <HAL_DFSDM_FilterMspInit+0x1b8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d136      	bne.n	80015e4 <HAL_DFSDM_FilterMspInit+0x124>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001578:	4a41      	ldr	r2, [pc, #260]	; (8001680 <HAL_DFSDM_FilterMspInit+0x1c0>)
 800157a:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 800157c:	4b3f      	ldr	r3, [pc, #252]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800157e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001582:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001584:	4b3d      	ldr	r3, [pc, #244]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800158a:	4b3c      	ldr	r3, [pc, #240]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001590:	4b3a      	ldr	r3, [pc, #232]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001596:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 800159a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800159e:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015a0:	4b36      	ldr	r3, [pc, #216]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 80015a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015a6:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80015a8:	4b34      	ldr	r3, [pc, #208]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 80015b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015b4:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b6:	4b31      	ldr	r3, [pc, #196]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80015bc:	482f      	ldr	r0, [pc, #188]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 80015be:	f003 fa13 	bl	80049e8 <HAL_DMA_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_DFSDM_FilterMspInit+0x10c>
    {
      Error_Handler();
 80015c8:	f7ff ff10 	bl	80013ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a2b      	ldr	r2, [pc, #172]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 80015d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d2:	4a2a      	ldr	r2, [pc, #168]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a28      	ldr	r2, [pc, #160]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 80015dc:	629a      	str	r2, [r3, #40]	; 0x28
 80015de:	4a27      	ldr	r2, [pc, #156]	; (800167c <HAL_DFSDM_FilterMspInit+0x1bc>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a26      	ldr	r2, [pc, #152]	; (8001684 <HAL_DFSDM_FilterMspInit+0x1c4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d137      	bne.n	800165e <HAL_DFSDM_FilterMspInit+0x19e>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80015ee:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80015f0:	4a26      	ldr	r2, [pc, #152]	; (800168c <HAL_DFSDM_FilterMspInit+0x1cc>)
 80015f2:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80015f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015fa:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001608:	4b1f      	ldr	r3, [pc, #124]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800160a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001616:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800161a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800161e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001626:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8001628:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800162a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800162e:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001632:	2200      	movs	r2, #0
 8001634:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8001636:	4814      	ldr	r0, [pc, #80]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001638:	f003 f9d6 	bl	80049e8 <HAL_DMA_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_DFSDM_FilterMspInit+0x186>
    {
      Error_Handler();
 8001642:	f7ff fed3 	bl	80013ec <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001656:	629a      	str	r2, [r3, #40]	; 0x28
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 800165e:	bf00      	nop
 8001660:	3728      	adds	r7, #40	; 0x28
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20006fb4 	.word	0x20006fb4
 800166c:	20006fb0 	.word	0x20006fb0
 8001670:	40023800 	.word	0x40023800
 8001674:	40020c00 	.word	0x40020c00
 8001678:	40017500 	.word	0x40017500
 800167c:	200061d4 	.word	0x200061d4
 8001680:	40026410 	.word	0x40026410
 8001684:	40017580 	.word	0x40017580
 8001688:	20006234 	.word	0x20006234
 800168c:	40026428 	.word	0x40026428

08001690 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80016a8:	4b26      	ldr	r3, [pc, #152]	; (8001744 <HAL_DFSDM_ChannelMspInit+0xb4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d145      	bne.n	800173c <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80016b0:	4b25      	ldr	r3, [pc, #148]	; (8001748 <HAL_DFSDM_ChannelMspInit+0xb8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	4a24      	ldr	r2, [pc, #144]	; (8001748 <HAL_DFSDM_ChannelMspInit+0xb8>)
 80016b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_DFSDM_ChannelMspInit+0xb8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d10b      	bne.n	80016da <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80016c2:	4b22      	ldr	r3, [pc, #136]	; (800174c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	4a21      	ldr	r2, [pc, #132]	; (800174c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016cc:	6453      	str	r3, [r2, #68]	; 0x44
 80016ce:	4b1f      	ldr	r3, [pc, #124]	; (800174c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_DFSDM_ChannelMspInit+0xbc>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016f2:	2340      	movs	r3, #64	; 0x40
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 8001702:	230a      	movs	r3, #10
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	4810      	ldr	r0, [pc, #64]	; (8001750 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800170e:	f004 f8cf 	bl	80058b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001712:	2308      	movs	r3, #8
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8001722:	2303      	movs	r3, #3
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4808      	ldr	r0, [pc, #32]	; (8001750 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800172e:	f004 f8bf 	bl	80058b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	4a02      	ldr	r2, [pc, #8]	; (8001744 <HAL_DFSDM_ChannelMspInit+0xb4>)
 800173a:	6013      	str	r3, [r2, #0]
  }

}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20006fb4 	.word	0x20006fb4
 8001748:	20006fb0 	.word	0x20006fb0
 800174c:	40023800 	.word	0x40023800
 8001750:	40020c00 	.word	0x40020c00

08001754 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_DSI_MspInit+0x7c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d127      	bne.n	80017c6 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001776:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <HAL_DSI_MspInit+0x80>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a16      	ldr	r2, [pc, #88]	; (80017d4 <HAL_DSI_MspInit+0x80>)
 800177c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <HAL_DSI_MspInit+0x80>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_DSI_MspInit+0x80>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <HAL_DSI_MspInit+0x80>)
 8001794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_DSI_MspInit+0x80>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80017a6:	2304      	movs	r3, #4
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80017b6:	230d      	movs	r3, #13
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	4805      	ldr	r0, [pc, #20]	; (80017d8 <HAL_DSI_MspInit+0x84>)
 80017c2:	f004 f875 	bl	80058b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	; 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40016c00 	.word	0x40016c00
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40022400 	.word	0x40022400

080017dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b0a6      	sub	sp, #152	; 0x98
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	2290      	movs	r2, #144	; 0x90
 80017ea:	2100      	movs	r1, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f00a fbcf 	bl	800bf90 <memset>
  if(hrtc->Instance==RTC)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a0e      	ldr	r2, [pc, #56]	; (8001830 <HAL_RTC_MspInit+0x54>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d114      	bne.n	8001826 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017fc:	2320      	movs	r3, #32
 80017fe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001804:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	4618      	mov	r0, r3
 800180c:	f005 fdc4 	bl	8007398 <HAL_RCCEx_PeriphCLKConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001816:	f7ff fde9 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RTC_MspInit+0x58>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <HAL_RTC_MspInit+0x58>)
 8001820:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001824:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001826:	bf00      	nop
 8001828:	3798      	adds	r7, #152	; 0x98
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40002800 	.word	0x40002800
 8001834:	40023800 	.word	0x40023800

08001838 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b0ae      	sub	sp, #184	; 0xb8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2290      	movs	r2, #144	; 0x90
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f00a fb99 	bl	800bf90 <memset>
  if(hsd->Instance==SDMMC1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a74      	ldr	r2, [pc, #464]	; (8001a34 <HAL_SD_MspInit+0x1fc>)
 8001864:	4293      	cmp	r3, r2
 8001866:	f040 80e0 	bne.w	8001a2a <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800186a:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 800186e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4618      	mov	r0, r3
 8001882:	f005 fd89 	bl	8007398 <HAL_RCCEx_PeriphCLKConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 800188c:	f7ff fdae 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001890:	4b69      	ldr	r3, [pc, #420]	; (8001a38 <HAL_SD_MspInit+0x200>)
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	4a68      	ldr	r2, [pc, #416]	; (8001a38 <HAL_SD_MspInit+0x200>)
 8001896:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800189a:	6453      	str	r3, [r2, #68]	; 0x44
 800189c:	4b66      	ldr	r3, [pc, #408]	; (8001a38 <HAL_SD_MspInit+0x200>)
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a4:	613b      	str	r3, [r7, #16]
 80018a6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a8:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <HAL_SD_MspInit+0x200>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a62      	ldr	r2, [pc, #392]	; (8001a38 <HAL_SD_MspInit+0x200>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6313      	str	r3, [r2, #48]	; 0x30
 80018b4:	4b60      	ldr	r3, [pc, #384]	; (8001a38 <HAL_SD_MspInit+0x200>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c0:	4b5d      	ldr	r3, [pc, #372]	; (8001a38 <HAL_SD_MspInit+0x200>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	4a5c      	ldr	r2, [pc, #368]	; (8001a38 <HAL_SD_MspInit+0x200>)
 80018c6:	f043 0308 	orr.w	r3, r3, #8
 80018ca:	6313      	str	r3, [r2, #48]	; 0x30
 80018cc:	4b5a      	ldr	r3, [pc, #360]	; (8001a38 <HAL_SD_MspInit+0x200>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	f003 0308 	and.w	r3, r3, #8
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SD1_CLK_Pin|SD1_D3_Pin|SD1_D2_Pin|SD1_D1_Pin
 80018d8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80018dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SD1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018f2:	230c      	movs	r3, #12
 80018f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018fc:	4619      	mov	r1, r3
 80018fe:	484f      	ldr	r0, [pc, #316]	; (8001a3c <HAL_SD_MspInit+0x204>)
 8001900:	f003 ffd6 	bl	80058b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD1_CMD_Pin;
 8001904:	2304      	movs	r3, #4
 8001906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800191c:	230c      	movs	r3, #12
 800191e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SD1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001926:	4619      	mov	r1, r3
 8001928:	4845      	ldr	r0, [pc, #276]	; (8001a40 <HAL_SD_MspInit+0x208>)
 800192a:	f003 ffc1 	bl	80058b0 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800192e:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 8001930:	4a45      	ldr	r2, [pc, #276]	; (8001a48 <HAL_SD_MspInit+0x210>)
 8001932:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001934:	4b43      	ldr	r3, [pc, #268]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 8001936:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800193a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800193c:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001942:	4b40      	ldr	r3, [pc, #256]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001948:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 800194a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001950:	4b3c      	ldr	r3, [pc, #240]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 8001952:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001956:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001958:	4b3a      	ldr	r3, [pc, #232]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 800195a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800195e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001960:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 8001962:	2220      	movs	r2, #32
 8001964:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001966:	4b37      	ldr	r3, [pc, #220]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 8001968:	2200      	movs	r2, #0
 800196a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800196c:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 800196e:	2204      	movs	r2, #4
 8001970:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001972:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 8001974:	2203      	movs	r2, #3
 8001976:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001978:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 800197a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800197e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001980:	4b30      	ldr	r3, [pc, #192]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 8001982:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001988:	482e      	ldr	r0, [pc, #184]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 800198a:	f003 f82d 	bl	80049e8 <HAL_DMA_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001994:	f7ff fd2a 	bl	80013ec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a2a      	ldr	r2, [pc, #168]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 800199c:	641a      	str	r2, [r3, #64]	; 0x40
 800199e:	4a29      	ldr	r2, [pc, #164]	; (8001a44 <HAL_SD_MspInit+0x20c>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80019a4:	4b29      	ldr	r3, [pc, #164]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019a6:	4a2a      	ldr	r2, [pc, #168]	; (8001a50 <HAL_SD_MspInit+0x218>)
 80019a8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80019aa:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019b0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b2:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019b4:	2240      	movs	r2, #64	; 0x40
 80019b6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019b8:	4b24      	ldr	r3, [pc, #144]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019be:	4b23      	ldr	r3, [pc, #140]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019cc:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019d4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80019d6:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019d8:	2220      	movs	r2, #32
 80019da:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019de:	2200      	movs	r2, #0
 80019e0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019e4:	2204      	movs	r2, #4
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019ea:	2203      	movs	r2, #3
 80019ec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80019f6:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <HAL_SD_MspInit+0x214>)
 80019f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80019fe:	4813      	ldr	r0, [pc, #76]	; (8001a4c <HAL_SD_MspInit+0x214>)
 8001a00:	f002 fff2 	bl	80049e8 <HAL_DMA_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001a0a:	f7ff fcef 	bl	80013ec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <HAL_SD_MspInit+0x214>)
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a14:	4a0d      	ldr	r2, [pc, #52]	; (8001a4c <HAL_SD_MspInit+0x214>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	2031      	movs	r0, #49	; 0x31
 8001a20:	f002 fd31 	bl	8004486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001a24:	2031      	movs	r0, #49	; 0x31
 8001a26:	f002 fd4a 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	37b8      	adds	r7, #184	; 0xb8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40012c00 	.word	0x40012c00
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	200063d8 	.word	0x200063d8
 8001a48:	40026458 	.word	0x40026458
 8001a4c:	20006438 	.word	0x20006438
 8001a50:	400264a0 	.word	0x400264a0

08001a54 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b0ae      	sub	sp, #184	; 0xb8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2290      	movs	r2, #144	; 0x90
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00a fa8b 	bl	800bf90 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001a82:	d144      	bne.n	8001b0e <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001a84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001a8a:	23c0      	movs	r3, #192	; 0xc0
 8001a8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001a96:	2302      	movs	r3, #2
 8001a98:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f005 fc78 	bl	8007398 <HAL_RCCEx_PeriphCLKConfig>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001aae:	f7ff fc9d 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_SPDIFRX_MspInit+0xc4>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <HAL_SPDIFRX_MspInit+0xc4>)
 8001ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001abc:	6413      	str	r3, [r2, #64]	; 0x40
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_SPDIFRX_MspInit+0xc4>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aca:	4b13      	ldr	r3, [pc, #76]	; (8001b18 <HAL_SPDIFRX_MspInit+0xc4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a12      	ldr	r2, [pc, #72]	; (8001b18 <HAL_SPDIFRX_MspInit+0xc4>)
 8001ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_SPDIFRX_MspInit+0xc4>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PG12     ------> SPDIFRX_IN1
    */
    GPIO_InitStruct.Pin = SPDIF_RX1_Pin;
 8001ae2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001afc:	2307      	movs	r3, #7
 8001afe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SPDIF_RX1_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4804      	ldr	r0, [pc, #16]	; (8001b1c <HAL_SPDIFRX_MspInit+0xc8>)
 8001b0a:	f003 fed1 	bl	80058b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	37b8      	adds	r7, #184	; 0xb8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40021800 	.word	0x40021800

08001b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b0ae      	sub	sp, #184	; 0xb8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2290      	movs	r2, #144	; 0x90
 8001b3e:	2100      	movs	r1, #0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f00a fa25 	bl	800bf90 <memset>
  if(huart->Instance==USART1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a21      	ldr	r2, [pc, #132]	; (8001bd0 <HAL_UART_MspInit+0xb0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d13b      	bne.n	8001bc8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b50:	2340      	movs	r3, #64	; 0x40
 8001b52:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b54:	2300      	movs	r3, #0
 8001b56:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f005 fc1b 	bl	8007398 <HAL_RCCEx_PeriphCLKConfig>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b68:	f7ff fc40 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b6c:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_UART_MspInit+0xb4>)
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <HAL_UART_MspInit+0xb4>)
 8001b72:	f043 0310 	orr.w	r3, r3, #16
 8001b76:	6453      	str	r3, [r2, #68]	; 0x44
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <HAL_UART_MspInit+0xb4>)
 8001b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_UART_MspInit+0xb4>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <HAL_UART_MspInit+0xb4>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b90:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_UART_MspInit+0xb4>)
 8001b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS232_IrDA_RX_Pin|RS2320IrDA0T_Pin;
 8001b9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <HAL_UART_MspInit+0xb8>)
 8001bc4:	f003 fe74 	bl	80058b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bc8:	bf00      	nop
 8001bca:	37b8      	adds	r7, #184	; 0xb8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40011000 	.word	0x40011000
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020000 	.word	0x40020000

08001bdc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b0b6      	sub	sp, #216	; 0xd8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bf8:	2290      	movs	r2, #144	; 0x90
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f00a f9c7 	bl	800bf90 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0a:	d14a      	bne.n	8001ca2 <HAL_PCD_MspInit+0xc6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f005 fbbb 	bl	8007398 <HAL_RCCEx_PeriphCLKConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c28:	f7ff fbe0 	bl	80013ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	4b8c      	ldr	r3, [pc, #560]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	4a8b      	ldr	r2, [pc, #556]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6313      	str	r3, [r2, #48]	; 0x30
 8001c38:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
 8001c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001c44:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c5e:	230a      	movs	r3, #10
 8001c60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	487e      	ldr	r0, [pc, #504]	; (8001e64 <HAL_PCD_MspInit+0x288>)
 8001c6c:	f003 fe20 	bl	80058b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c70:	4b7b      	ldr	r3, [pc, #492]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c74:	4a7a      	ldr	r2, [pc, #488]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7a:	6353      	str	r3, [r2, #52]	; 0x34
 8001c7c:	4b78      	ldr	r3, [pc, #480]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	4b75      	ldr	r3, [pc, #468]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8c:	4a74      	ldr	r2, [pc, #464]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c92:	6453      	str	r3, [r2, #68]	; 0x44
 8001c94:	4b72      	ldr	r3, [pc, #456]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001ca0:	e0da      	b.n	8001e58 <HAL_PCD_MspInit+0x27c>
  else if(hpcd->Instance==USB_OTG_HS)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a70      	ldr	r2, [pc, #448]	; (8001e68 <HAL_PCD_MspInit+0x28c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	f040 80d5 	bne.w	8001e58 <HAL_PCD_MspInit+0x27c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	4b6c      	ldr	r3, [pc, #432]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a6b      	ldr	r2, [pc, #428]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b69      	ldr	r3, [pc, #420]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cc6:	4b66      	ldr	r3, [pc, #408]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a65      	ldr	r2, [pc, #404]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b63      	ldr	r3, [pc, #396]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cde:	4b60      	ldr	r3, [pc, #384]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a5f      	ldr	r2, [pc, #380]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b5d      	ldr	r3, [pc, #372]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf6:	4b5a      	ldr	r3, [pc, #360]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a59      	ldr	r2, [pc, #356]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b57      	ldr	r3, [pc, #348]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	4b54      	ldr	r3, [pc, #336]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a53      	ldr	r2, [pc, #332]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001d26:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001d2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d40:	230a      	movs	r3, #10
 8001d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4847      	ldr	r0, [pc, #284]	; (8001e6c <HAL_PCD_MspInit+0x290>)
 8001d4e:	f003 fdaf 	bl	80058b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8001d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d66:	2303      	movs	r3, #3
 8001d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8001d72:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d76:	4619      	mov	r1, r3
 8001d78:	483d      	ldr	r0, [pc, #244]	; (8001e70 <HAL_PCD_MspInit+0x294>)
 8001d7a:	f003 fd99 	bl	80058b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001d7e:	2310      	movs	r3, #16
 8001d80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d96:	230a      	movs	r3, #10
 8001d98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001d9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001da0:	4619      	mov	r1, r3
 8001da2:	4834      	ldr	r0, [pc, #208]	; (8001e74 <HAL_PCD_MspInit+0x298>)
 8001da4:	f003 fd84 	bl	80058b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001dca:	4619      	mov	r1, r3
 8001dcc:	482a      	ldr	r0, [pc, #168]	; (8001e78 <HAL_PCD_MspInit+0x29c>)
 8001dce:	f003 fd6f 	bl	80058b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001dd2:	2328      	movs	r3, #40	; 0x28
 8001dd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001dea:	230a      	movs	r3, #10
 8001dec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001df4:	4619      	mov	r1, r3
 8001df6:	481b      	ldr	r0, [pc, #108]	; (8001e64 <HAL_PCD_MspInit+0x288>)
 8001df8:	f003 fd5a 	bl	80058b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_FS2_DM_Pin;
 8001dfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001e16:	230c      	movs	r3, #12
 8001e18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS2_DM_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4812      	ldr	r0, [pc, #72]	; (8001e6c <HAL_PCD_MspInit+0x290>)
 8001e24:	f003 fd44 	bl	80058b0 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001e2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e32:	6313      	str	r3, [r2, #48]	; 0x30
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8001e40:	4b07      	ldr	r3, [pc, #28]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001e46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_PCD_MspInit+0x284>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	37d8      	adds	r7, #216	; 0xd8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40020000 	.word	0x40020000
 8001e68:	40040000 	.word	0x40040000
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40021c00 	.word	0x40021c00
 8001e78:	40020800 	.word	0x40020800

08001e7c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001e90:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <HAL_FMC_MspInit+0x124>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d17e      	bne.n	8001f96 <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8001e98:	4b41      	ldr	r3, [pc, #260]	; (8001fa0 <HAL_FMC_MspInit+0x124>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_FMC_MspInit+0x128>)
 8001ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea2:	4a40      	ldr	r2, [pc, #256]	; (8001fa4 <HAL_FMC_MspInit+0x128>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6393      	str	r3, [r2, #56]	; 0x38
 8001eaa:	4b3e      	ldr	r3, [pc, #248]	; (8001fa4 <HAL_FMC_MspInit+0x128>)
 8001eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = A19_Pin|FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin
 8001eb6:	f64f 738b 	movw	r3, #65419	; 0xff8b
 8001eba:	607b      	str	r3, [r7, #4]
                          |D6_Pin|D8_Pin|D11_Pin|D4_Pin
                          |D7_Pin|D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ec8:	230c      	movs	r3, #12
 8001eca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4835      	ldr	r0, [pc, #212]	; (8001fa8 <HAL_FMC_MspInit+0x12c>)
 8001ed2:	f003 fced 	bl	80058b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|FMC_NE3_Pin|A11_Pin
 8001ed6:	f248 137f 	movw	r3, #33151	; 0x817f
 8001eda:	607b      	str	r3, [r7, #4]
                          |A13_Pin|A12_Pin|A10_Pin|A15_Pin
                          |A14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001ee8:	230c      	movs	r3, #12
 8001eea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eec:	1d3b      	adds	r3, r7, #4
 8001eee:	4619      	mov	r1, r3
 8001ef0:	482e      	ldr	r0, [pc, #184]	; (8001fac <HAL_FMC_MspInit+0x130>)
 8001ef2:	f003 fcdd 	bl	80058b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|FMC_NWE_Pin|D3_Pin|FMC_NOE_Pin
 8001ef6:	f64f 7333 	movw	r3, #65331	; 0xff33
 8001efa:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D15_Pin|D0_Pin|D14_Pin
                          |D13_Pin|A17_Pin|A18_Pin|A16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f08:	230c      	movs	r3, #12
 8001f0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4827      	ldr	r0, [pc, #156]	; (8001fb0 <HAL_FMC_MspInit+0x134>)
 8001f12:	f003 fccd 	bl	80058b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001f16:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001f1a:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f28:	230c      	movs	r3, #12
 8001f2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4820      	ldr	r0, [pc, #128]	; (8001fb4 <HAL_FMC_MspInit+0x138>)
 8001f32:	f003 fcbd 	bl	80058b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001f36:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001f3a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f48:	230c      	movs	r3, #12
 8001f4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4819      	ldr	r0, [pc, #100]	; (8001fb8 <HAL_FMC_MspInit+0x13c>)
 8001f52:	f003 fcad 	bl	80058b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNWE_Pin
 8001f56:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001f5a:	607b      	str	r3, [r7, #4]
                          |SDNE0_Pin|SDCKE0_Pin|D20_Pin|D17_Pin
                          |D19_Pin|D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001f68:	230c      	movs	r3, #12
 8001f6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4812      	ldr	r0, [pc, #72]	; (8001fbc <HAL_FMC_MspInit+0x140>)
 8001f72:	f003 fc9d 	bl	80058b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE1_Pin|FMC_NWAIT_Pin;
 8001f76:	23c0      	movs	r3, #192	; 0xc0
 8001f78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f82:	2303      	movs	r3, #3
 8001f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 8001f86:	2309      	movs	r3, #9
 8001f88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8a:	1d3b      	adds	r3, r7, #4
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480c      	ldr	r0, [pc, #48]	; (8001fc0 <HAL_FMC_MspInit+0x144>)
 8001f90:	f003 fc8e 	bl	80058b0 <HAL_GPIO_Init>
 8001f94:	e000      	b.n	8001f98 <HAL_FMC_MspInit+0x11c>
    return;
 8001f96:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20006fb8 	.word	0x20006fb8
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40021800 	.word	0x40021800
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40021400 	.word	0x40021400
 8001fbc:	40021c00 	.word	0x40021c00
 8001fc0:	40020800 	.word	0x40020800

08001fc4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001fcc:	f7ff ff56 	bl	8001e7c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a2d      	ldr	r2, [pc, #180]	; (800209c <HAL_SAI_MspInit+0xc4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d154      	bne.n	8002094 <HAL_SAI_MspInit+0xbc>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_SAI_MspInit+0xc8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10b      	bne.n	800200a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001ff2:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <HAL_SAI_MspInit+0xcc>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	4a2b      	ldr	r2, [pc, #172]	; (80020a4 <HAL_SAI_MspInit+0xcc>)
 8001ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffe:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <HAL_SAI_MspInit+0xcc>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <HAL_SAI_MspInit+0xc8>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	4a23      	ldr	r2, [pc, #140]	; (80020a0 <HAL_SAI_MspInit+0xc8>)
 8002012:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PG7     ------> SAI1_MCLK_A
    PF6     ------> SAI1_SD_B
    PC1     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002014:	2330      	movs	r3, #48	; 0x30
 8002016:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002024:	2306      	movs	r3, #6
 8002026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002028:	f107 030c 	add.w	r3, r7, #12
 800202c:	4619      	mov	r1, r3
 800202e:	481e      	ldr	r0, [pc, #120]	; (80020a8 <HAL_SAI_MspInit+0xd0>)
 8002030:	f003 fc3e 	bl	80058b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002038:	2302      	movs	r3, #2
 800203a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002044:	2306      	movs	r3, #6
 8002046:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	4619      	mov	r1, r3
 800204e:	4817      	ldr	r0, [pc, #92]	; (80020ac <HAL_SAI_MspInit+0xd4>)
 8002050:	f003 fc2e 	bl	80058b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002054:	2340      	movs	r3, #64	; 0x40
 8002056:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002064:	2306      	movs	r3, #6
 8002066:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002068:	f107 030c 	add.w	r3, r7, #12
 800206c:	4619      	mov	r1, r3
 800206e:	4810      	ldr	r0, [pc, #64]	; (80020b0 <HAL_SAI_MspInit+0xd8>)
 8002070:	f003 fc1e 	bl	80058b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002074:	2302      	movs	r3, #2
 8002076:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002080:	2300      	movs	r3, #0
 8002082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002084:	2306      	movs	r3, #6
 8002086:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	4619      	mov	r1, r3
 800208e:	4809      	ldr	r0, [pc, #36]	; (80020b4 <HAL_SAI_MspInit+0xdc>)
 8002090:	f003 fc0e 	bl	80058b0 <HAL_GPIO_Init>

    }
}
 8002094:	bf00      	nop
 8002096:	3720      	adds	r7, #32
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40015804 	.word	0x40015804
 80020a0:	20006fbc 	.word	0x20006fbc
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40021800 	.word	0x40021800
 80020b0:	40021400 	.word	0x40021400
 80020b4:	40020800 	.word	0x40020800

080020b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020bc:	e7fe      	b.n	80020bc <NMI_Handler+0x4>

080020be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020be:	b480      	push	{r7}
 80020c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c2:	e7fe      	b.n	80020c2 <HardFault_Handler+0x4>

080020c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020c8:	e7fe      	b.n	80020c8 <MemManage_Handler+0x4>

080020ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ca:	b480      	push	{r7}
 80020cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ce:	e7fe      	b.n	80020ce <BusFault_Handler+0x4>

080020d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d4:	e7fe      	b.n	80020d4 <UsageFault_Handler+0x4>

080020d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002104:	f001 fe0c 	bl	8003d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <SDMMC1_IRQHandler+0x10>)
 8002112:	f006 fd8f 	bl	8008c34 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20006354 	.word	0x20006354

08002120 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <DMA2_Stream0_IRQHandler+0x10>)
 8002126:	f002 fd8f 	bl	8004c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200061d4 	.word	0x200061d4

08002134 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <DMA2_Stream1_IRQHandler+0x10>)
 800213a:	f002 fd85 	bl	8004c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20006234 	.word	0x20006234

08002148 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <DMA2_Stream3_IRQHandler+0x10>)
 800214e:	f002 fd7b 	bl	8004c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	200063d8 	.word	0x200063d8

0800215c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <DMA2_Stream6_IRQHandler+0x10>)
 8002162:	f002 fd71 	bl	8004c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20006438 	.word	0x20006438

08002170 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <SystemInit+0x20>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <SystemInit+0x20>)
 800217c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <checkMicrophone>:

extern SAI_HandleTypeDef hsai_BlockA1;

//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 800219a:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <checkMicrophone+0x184>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d167      	bne.n	8002272 <checkMicrophone+0xde>
 80021a2:	4b5e      	ldr	r3, [pc, #376]	; (800231c <checkMicrophone+0x188>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d163      	bne.n	8002272 <checkMicrophone+0xde>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	607b      	str	r3, [r7, #4]
 80021ae:	e037      	b.n	8002220 <checkMicrophone+0x8c>
		{
			PlayBuff[2*i]     = SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 80021b0:	4a5b      	ldr	r2, [pc, #364]	; (8002320 <checkMicrophone+0x18c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	121b      	asrs	r3, r3, #8
 80021ba:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80021be:	db0b      	blt.n	80021d8 <checkMicrophone+0x44>
 80021c0:	4a57      	ldr	r2, [pc, #348]	; (8002320 <checkMicrophone+0x18c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	121b      	asrs	r3, r3, #8
 80021ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80021ce:	4293      	cmp	r3, r2
 80021d0:	bfa8      	it	ge
 80021d2:	4613      	movge	r3, r2
 80021d4:	b21a      	sxth	r2, r3
 80021d6:	e000      	b.n	80021da <checkMicrophone+0x46>
 80021d8:	4a52      	ldr	r2, [pc, #328]	; (8002324 <checkMicrophone+0x190>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4952      	ldr	r1, [pc, #328]	; (8002328 <checkMicrophone+0x194>)
 80021e0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PlayBuff[(2*i)+1] = SaturaLH((RightRecBuff[i] >> 8), -32768, 32767);
 80021e4:	4a51      	ldr	r2, [pc, #324]	; (800232c <checkMicrophone+0x198>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ec:	121b      	asrs	r3, r3, #8
 80021ee:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80021f2:	db0b      	blt.n	800220c <checkMicrophone+0x78>
 80021f4:	4a4d      	ldr	r2, [pc, #308]	; (800232c <checkMicrophone+0x198>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021fc:	121b      	asrs	r3, r3, #8
 80021fe:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002202:	4293      	cmp	r3, r2
 8002204:	bfa8      	it	ge
 8002206:	4613      	movge	r3, r2
 8002208:	b21a      	sxth	r2, r3
 800220a:	e000      	b.n	800220e <checkMicrophone+0x7a>
 800220c:	4a45      	ldr	r2, [pc, #276]	; (8002324 <checkMicrophone+0x190>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	3301      	adds	r3, #1
 8002214:	4944      	ldr	r1, [pc, #272]	; (8002328 <checkMicrophone+0x194>)
 8002216:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < 1024; i++)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3301      	adds	r3, #1
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002226:	dbc3      	blt.n	80021b0 <checkMicrophone+0x1c>
		}
		//configures playback
		if(PlaybackStarted == 0)
 8002228:	4b41      	ldr	r3, [pc, #260]	; (8002330 <checkMicrophone+0x19c>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d11a      	bne.n	8002266 <checkMicrophone+0xd2>
		{
			if(0 != audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) &PlayBuff[0], 4096))
 8002230:	4b40      	ldr	r3, [pc, #256]	; (8002334 <checkMicrophone+0x1a0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800223a:	493b      	ldr	r1, [pc, #236]	; (8002328 <checkMicrophone+0x194>)
 800223c:	2034      	movs	r0, #52	; 0x34
 800223e:	4798      	blx	r3
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <checkMicrophone+0xb6>
			{
				Error_Handler();
 8002246:	f7ff f8d1 	bl	80013ec <Error_Handler>
			}
			if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *) &PlayBuff[0], 4096))
 800224a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800224e:	4936      	ldr	r1, [pc, #216]	; (8002328 <checkMicrophone+0x194>)
 8002250:	4839      	ldr	r0, [pc, #228]	; (8002338 <checkMicrophone+0x1a4>)
 8002252:	f006 f8c1 	bl	80083d8 <HAL_SAI_Transmit_DMA>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <checkMicrophone+0xcc>
			{
				Error_Handler();
 800225c:	f7ff f8c6 	bl	80013ec <Error_Handler>
			}
			PlaybackStarted = 1;
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <checkMicrophone+0x19c>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]
		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 8002266:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <checkMicrophone+0x184>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 800226c:	4b2b      	ldr	r3, [pc, #172]	; (800231c <checkMicrophone+0x188>)
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 8002272:	4b32      	ldr	r3, [pc, #200]	; (800233c <checkMicrophone+0x1a8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d149      	bne.n	800230e <checkMicrophone+0x17a>
 800227a:	4b31      	ldr	r3, [pc, #196]	; (8002340 <checkMicrophone+0x1ac>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d145      	bne.n	800230e <checkMicrophone+0x17a>
	{
		for(int i = 1024; i < 2048; i++)
 8002282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	e037      	b.n	80022fa <checkMicrophone+0x166>
		{
			PlayBuff[2*i]     = SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800228a:	4a25      	ldr	r2, [pc, #148]	; (8002320 <checkMicrophone+0x18c>)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002292:	121b      	asrs	r3, r3, #8
 8002294:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002298:	db0b      	blt.n	80022b2 <checkMicrophone+0x11e>
 800229a:	4a21      	ldr	r2, [pc, #132]	; (8002320 <checkMicrophone+0x18c>)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a2:	121b      	asrs	r3, r3, #8
 80022a4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80022a8:	4293      	cmp	r3, r2
 80022aa:	bfa8      	it	ge
 80022ac:	4613      	movge	r3, r2
 80022ae:	b21a      	sxth	r2, r3
 80022b0:	e000      	b.n	80022b4 <checkMicrophone+0x120>
 80022b2:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <checkMicrophone+0x190>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	491b      	ldr	r1, [pc, #108]	; (8002328 <checkMicrophone+0x194>)
 80022ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PlayBuff[(2*i)+1] = SaturaLH((RightRecBuff[i] >> 8), -32768, 32767);
 80022be:	4a1b      	ldr	r2, [pc, #108]	; (800232c <checkMicrophone+0x198>)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	121b      	asrs	r3, r3, #8
 80022c8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80022cc:	db0b      	blt.n	80022e6 <checkMicrophone+0x152>
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <checkMicrophone+0x198>)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d6:	121b      	asrs	r3, r3, #8
 80022d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80022dc:	4293      	cmp	r3, r2
 80022de:	bfa8      	it	ge
 80022e0:	4613      	movge	r3, r2
 80022e2:	b21a      	sxth	r2, r3
 80022e4:	e000      	b.n	80022e8 <checkMicrophone+0x154>
 80022e6:	4a0f      	ldr	r2, [pc, #60]	; (8002324 <checkMicrophone+0x190>)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	3301      	adds	r3, #1
 80022ee:	490e      	ldr	r1, [pc, #56]	; (8002328 <checkMicrophone+0x194>)
 80022f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 1024; i < 2048; i++)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	603b      	str	r3, [r7, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002300:	dbc3      	blt.n	800228a <checkMicrophone+0xf6>
		}
		DmaLeftRecBuffCplt  = 0;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <checkMicrophone+0x1a8>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <checkMicrophone+0x1ac>)
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
	}
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000605c 	.word	0x2000605c
 800231c:	20006064 	.word	0x20006064
 8002320:	2000005c 	.word	0x2000005c
 8002324:	ffff8000 	.word	0xffff8000
 8002328:	2000405c 	.word	0x2000405c
 800232c:	2000205c 	.word	0x2000205c
 8002330:	2000606c 	.word	0x2000606c
 8002334:	20006070 	.word	0x20006070
 8002338:	200062d0 	.word	0x200062d0
 800233c:	20006060 	.word	0x20006060
 8002340:	20006068 	.word	0x20006068

08002344 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002344:	f8df d034 	ldr.w	sp, [pc, #52]	; 800237c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002348:	480d      	ldr	r0, [pc, #52]	; (8002380 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800234a:	490e      	ldr	r1, [pc, #56]	; (8002384 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800234c:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800234e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002350:	e002      	b.n	8002358 <LoopCopyDataInit>

08002352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002356:	3304      	adds	r3, #4

08002358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800235a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800235c:	d3f9      	bcc.n	8002352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800235e:	4a0b      	ldr	r2, [pc, #44]	; (800238c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002360:	4c0b      	ldr	r4, [pc, #44]	; (8002390 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002364:	e001      	b.n	800236a <LoopFillZerobss>

08002366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002368:	3204      	adds	r2, #4

0800236a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800236a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800236c:	d3fb      	bcc.n	8002366 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800236e:	f7ff feff 	bl	8002170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002372:	f009 fde9 	bl	800bf48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002376:	f7fe f8e1 	bl	800053c <main>
  bx  lr    
 800237a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800237c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002384:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8002388:	0800bffc 	.word	0x0800bffc
  ldr r2, =_sbss
 800238c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8002390:	20007060 	.word	0x20007060

08002394 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002394:	e7fe      	b.n	8002394 <ADC_IRQHandler>
	...

08002398 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	607b      	str	r3, [r7, #4]
 80023a0:	4603      	mov	r3, r0
 80023a2:	81fb      	strh	r3, [r7, #14]
 80023a4:	460b      	mov	r3, r1
 80023a6:	81bb      	strh	r3, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 80023b0:	89bb      	ldrh	r3, [r7, #12]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80023b6:	89bb      	ldrh	r3, [r7, #12]
 80023b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023bc:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80023c2:	f001 fc0b 	bl	8003bdc <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80023c6:	89fb      	ldrh	r3, [r7, #14]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2203      	movs	r2, #3
 80023cc:	f44f 7181 	mov.w	r1, #258	; 0x102
 80023d0:	4618      	mov	r0, r3
 80023d2:	f001 fafb 	bl	80039cc <CODEC_IO_Write>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	4413      	add	r3, r2
 80023de:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80023e0:	89fb      	ldrh	r3, [r7, #14]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2200      	movs	r2, #0
 80023e6:	f640 0117 	movw	r1, #2071	; 0x817
 80023ea:	4618      	mov	r0, r3
 80023ec:	f001 faee 	bl	80039cc <CODEC_IO_Write>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	4413      	add	r3, r2
 80023f8:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80023fa:	89fb      	ldrh	r3, [r7, #14]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2200      	movs	r2, #0
 8002400:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002404:	4618      	mov	r0, r3
 8002406:	f001 fae1 	bl	80039cc <CODEC_IO_Write>
 800240a:	4603      	mov	r3, r0
 800240c:	461a      	mov	r2, r3
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	4413      	add	r3, r2
 8002412:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8002414:	89fb      	ldrh	r3, [r7, #14]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	226c      	movs	r2, #108	; 0x6c
 800241a:	2139      	movs	r1, #57	; 0x39
 800241c:	4618      	mov	r0, r3
 800241e:	f001 fad5 	bl	80039cc <CODEC_IO_Write>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	4413      	add	r3, r2
 800242a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 800242c:	8afb      	ldrh	r3, [r7, #22]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00c      	beq.n	800244c <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2213      	movs	r2, #19
 8002438:	2101      	movs	r1, #1
 800243a:	4618      	mov	r0, r3
 800243c:	f001 fac6 	bl	80039cc <CODEC_IO_Write>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	4413      	add	r3, r2
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	e00b      	b.n	8002464 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 800244c:	89fb      	ldrh	r3, [r7, #14]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2203      	movs	r2, #3
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f001 fab9 	bl	80039cc <CODEC_IO_Write>
 800245a:	4603      	mov	r3, r0
 800245c:	461a      	mov	r2, r3
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	4413      	add	r3, r2
 8002462:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002464:	2032      	movs	r0, #50	; 0x32
 8002466:	f001 fc13 	bl	8003c90 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800246a:	8b3b      	ldrh	r3, [r7, #24]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 815f 	beq.w	8002730 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8002472:	4bae      	ldr	r3, [pc, #696]	; (800272c <wm8994_Init+0x394>)
 8002474:	2201      	movs	r2, #1
 8002476:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002478:	8b3b      	ldrh	r3, [r7, #24]
 800247a:	2b03      	cmp	r3, #3
 800247c:	f000 808c 	beq.w	8002598 <wm8994_Init+0x200>
 8002480:	2b03      	cmp	r3, #3
 8002482:	f300 8111 	bgt.w	80026a8 <wm8994_Init+0x310>
 8002486:	2b01      	cmp	r3, #1
 8002488:	d002      	beq.n	8002490 <wm8994_Init+0xf8>
 800248a:	2b02      	cmp	r3, #2
 800248c:	d042      	beq.n	8002514 <wm8994_Init+0x17c>
 800248e:	e10b      	b.n	80026a8 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002490:	89fb      	ldrh	r3, [r7, #14]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	f640 420c 	movw	r2, #3084	; 0xc0c
 8002498:	2105      	movs	r1, #5
 800249a:	4618      	mov	r0, r3
 800249c:	f001 fa96 	bl	80039cc <CODEC_IO_Write>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461a      	mov	r2, r3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	4413      	add	r3, r2
 80024a8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80024aa:	89fb      	ldrh	r3, [r7, #14]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2200      	movs	r2, #0
 80024b0:	f240 6101 	movw	r1, #1537	; 0x601
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fa89 	bl	80039cc <CODEC_IO_Write>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	4413      	add	r3, r2
 80024c2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80024c4:	89fb      	ldrh	r3, [r7, #14]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	f240 6102 	movw	r1, #1538	; 0x602
 80024ce:	4618      	mov	r0, r3
 80024d0:	f001 fa7c 	bl	80039cc <CODEC_IO_Write>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	4413      	add	r3, r2
 80024dc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80024de:	89fb      	ldrh	r3, [r7, #14]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2202      	movs	r2, #2
 80024e4:	f240 6104 	movw	r1, #1540	; 0x604
 80024e8:	4618      	mov	r0, r3
 80024ea:	f001 fa6f 	bl	80039cc <CODEC_IO_Write>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461a      	mov	r2, r3
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4413      	add	r3, r2
 80024f6:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80024f8:	89fb      	ldrh	r3, [r7, #14]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2202      	movs	r2, #2
 80024fe:	f240 6105 	movw	r1, #1541	; 0x605
 8002502:	4618      	mov	r0, r3
 8002504:	f001 fa62 	bl	80039cc <CODEC_IO_Write>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	4413      	add	r3, r2
 8002510:	61fb      	str	r3, [r7, #28]
      break;
 8002512:	e110      	b.n	8002736 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002514:	89fb      	ldrh	r3, [r7, #14]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f240 3203 	movw	r2, #771	; 0x303
 800251c:	2105      	movs	r1, #5
 800251e:	4618      	mov	r0, r3
 8002520:	f001 fa54 	bl	80039cc <CODEC_IO_Write>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4413      	add	r3, r2
 800252c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2201      	movs	r2, #1
 8002534:	f240 6101 	movw	r1, #1537	; 0x601
 8002538:	4618      	mov	r0, r3
 800253a:	f001 fa47 	bl	80039cc <CODEC_IO_Write>
 800253e:	4603      	mov	r3, r0
 8002540:	461a      	mov	r2, r3
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	4413      	add	r3, r2
 8002546:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002548:	89fb      	ldrh	r3, [r7, #14]
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2201      	movs	r2, #1
 800254e:	f240 6102 	movw	r1, #1538	; 0x602
 8002552:	4618      	mov	r0, r3
 8002554:	f001 fa3a 	bl	80039cc <CODEC_IO_Write>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	4413      	add	r3, r2
 8002560:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002562:	89fb      	ldrh	r3, [r7, #14]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2200      	movs	r2, #0
 8002568:	f240 6104 	movw	r1, #1540	; 0x604
 800256c:	4618      	mov	r0, r3
 800256e:	f001 fa2d 	bl	80039cc <CODEC_IO_Write>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	4413      	add	r3, r2
 800257a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800257c:	89fb      	ldrh	r3, [r7, #14]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2200      	movs	r2, #0
 8002582:	f240 6105 	movw	r1, #1541	; 0x605
 8002586:	4618      	mov	r0, r3
 8002588:	f001 fa20 	bl	80039cc <CODEC_IO_Write>
 800258c:	4603      	mov	r3, r0
 800258e:	461a      	mov	r2, r3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	4413      	add	r3, r2
 8002594:	61fb      	str	r3, [r7, #28]
      break;
 8002596:	e0ce      	b.n	8002736 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002598:	8afb      	ldrh	r3, [r7, #22]
 800259a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800259e:	d141      	bne.n	8002624 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80025a0:	89fb      	ldrh	r3, [r7, #14]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	f640 720f 	movw	r2, #3855	; 0xf0f
 80025a8:	2105      	movs	r1, #5
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 fa0e 	bl	80039cc <CODEC_IO_Write>
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	4413      	add	r3, r2
 80025b8:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80025ba:	89fb      	ldrh	r3, [r7, #14]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2203      	movs	r2, #3
 80025c0:	f240 6101 	movw	r1, #1537	; 0x601
 80025c4:	4618      	mov	r0, r3
 80025c6:	f001 fa01 	bl	80039cc <CODEC_IO_Write>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	4413      	add	r3, r2
 80025d2:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80025d4:	89fb      	ldrh	r3, [r7, #14]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2203      	movs	r2, #3
 80025da:	f240 6102 	movw	r1, #1538	; 0x602
 80025de:	4618      	mov	r0, r3
 80025e0:	f001 f9f4 	bl	80039cc <CODEC_IO_Write>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461a      	mov	r2, r3
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	4413      	add	r3, r2
 80025ec:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80025ee:	89fb      	ldrh	r3, [r7, #14]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2203      	movs	r2, #3
 80025f4:	f240 6104 	movw	r1, #1540	; 0x604
 80025f8:	4618      	mov	r0, r3
 80025fa:	f001 f9e7 	bl	80039cc <CODEC_IO_Write>
 80025fe:	4603      	mov	r3, r0
 8002600:	461a      	mov	r2, r3
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	4413      	add	r3, r2
 8002606:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8002608:	89fb      	ldrh	r3, [r7, #14]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2203      	movs	r2, #3
 800260e:	f240 6105 	movw	r1, #1541	; 0x605
 8002612:	4618      	mov	r0, r3
 8002614:	f001 f9da 	bl	80039cc <CODEC_IO_Write>
 8002618:	4603      	mov	r3, r0
 800261a:	461a      	mov	r2, r3
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	4413      	add	r3, r2
 8002620:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8002622:	e088      	b.n	8002736 <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002624:	89fb      	ldrh	r3, [r7, #14]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	f640 720f 	movw	r2, #3855	; 0xf0f
 800262c:	2105      	movs	r1, #5
 800262e:	4618      	mov	r0, r3
 8002630:	f001 f9cc 	bl	80039cc <CODEC_IO_Write>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	4413      	add	r3, r2
 800263c:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800263e:	89fb      	ldrh	r3, [r7, #14]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2201      	movs	r2, #1
 8002644:	f240 6101 	movw	r1, #1537	; 0x601
 8002648:	4618      	mov	r0, r3
 800264a:	f001 f9bf 	bl	80039cc <CODEC_IO_Write>
 800264e:	4603      	mov	r3, r0
 8002650:	461a      	mov	r2, r3
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002658:	89fb      	ldrh	r3, [r7, #14]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2201      	movs	r2, #1
 800265e:	f240 6102 	movw	r1, #1538	; 0x602
 8002662:	4618      	mov	r0, r3
 8002664:	f001 f9b2 	bl	80039cc <CODEC_IO_Write>
 8002668:	4603      	mov	r3, r0
 800266a:	461a      	mov	r2, r3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	4413      	add	r3, r2
 8002670:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002672:	89fb      	ldrh	r3, [r7, #14]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2202      	movs	r2, #2
 8002678:	f240 6104 	movw	r1, #1540	; 0x604
 800267c:	4618      	mov	r0, r3
 800267e:	f001 f9a5 	bl	80039cc <CODEC_IO_Write>
 8002682:	4603      	mov	r3, r0
 8002684:	461a      	mov	r2, r3
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	4413      	add	r3, r2
 800268a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 800268c:	89fb      	ldrh	r3, [r7, #14]
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2202      	movs	r2, #2
 8002692:	f240 6105 	movw	r1, #1541	; 0x605
 8002696:	4618      	mov	r0, r3
 8002698:	f001 f998 	bl	80039cc <CODEC_IO_Write>
 800269c:	4603      	mov	r3, r0
 800269e:	461a      	mov	r2, r3
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	4413      	add	r3, r2
 80026a4:	61fb      	str	r3, [r7, #28]
      break;
 80026a6:	e046      	b.n	8002736 <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80026a8:	89fb      	ldrh	r3, [r7, #14]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f240 3203 	movw	r2, #771	; 0x303
 80026b0:	2105      	movs	r1, #5
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 f98a 	bl	80039cc <CODEC_IO_Write>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80026c2:	89fb      	ldrh	r3, [r7, #14]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2201      	movs	r2, #1
 80026c8:	f240 6101 	movw	r1, #1537	; 0x601
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 f97d 	bl	80039cc <CODEC_IO_Write>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	4413      	add	r3, r2
 80026da:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80026dc:	89fb      	ldrh	r3, [r7, #14]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2201      	movs	r2, #1
 80026e2:	f240 6102 	movw	r1, #1538	; 0x602
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 f970 	bl	80039cc <CODEC_IO_Write>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80026f6:	89fb      	ldrh	r3, [r7, #14]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2200      	movs	r2, #0
 80026fc:	f240 6104 	movw	r1, #1540	; 0x604
 8002700:	4618      	mov	r0, r3
 8002702:	f001 f963 	bl	80039cc <CODEC_IO_Write>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	4413      	add	r3, r2
 800270e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002710:	89fb      	ldrh	r3, [r7, #14]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2200      	movs	r2, #0
 8002716:	f240 6105 	movw	r1, #1541	; 0x605
 800271a:	4618      	mov	r0, r3
 800271c:	f001 f956 	bl	80039cc <CODEC_IO_Write>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	61fb      	str	r3, [r7, #28]
      break;
 800272a:	e004      	b.n	8002736 <wm8994_Init+0x39e>
 800272c:	20006fc0 	.word	0x20006fc0
    }
  }
  else
  {
    outputEnabled = 0;
 8002730:	4b99      	ldr	r3, [pc, #612]	; (8002998 <wm8994_Init+0x600>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 8002736:	8afb      	ldrh	r3, [r7, #22]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 81ab 	beq.w	8002a94 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 800273e:	4b97      	ldr	r3, [pc, #604]	; (800299c <wm8994_Init+0x604>)
 8002740:	2201      	movs	r2, #1
 8002742:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8002744:	8afb      	ldrh	r3, [r7, #22]
 8002746:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800274a:	f000 8129 	beq.w	80029a0 <wm8994_Init+0x608>
 800274e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002752:	f300 819b 	bgt.w	8002a8c <wm8994_Init+0x6f4>
 8002756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800275a:	d05a      	beq.n	8002812 <wm8994_Init+0x47a>
 800275c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002760:	f300 8194 	bgt.w	8002a8c <wm8994_Init+0x6f4>
 8002764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002768:	f000 80c6 	beq.w	80028f8 <wm8994_Init+0x560>
 800276c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002770:	f040 818c 	bne.w	8002a8c <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002774:	89fb      	ldrh	r3, [r7, #14]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 800277c:	2104      	movs	r1, #4
 800277e:	4618      	mov	r0, r3
 8002780:	f001 f924 	bl	80039cc <CODEC_IO_Write>
 8002784:	4603      	mov	r3, r0
 8002786:	461a      	mov	r2, r3
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	4413      	add	r3, r2
 800278c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800278e:	89fb      	ldrh	r3, [r7, #14]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	22db      	movs	r2, #219	; 0xdb
 8002794:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002798:	4618      	mov	r0, r3
 800279a:	f001 f917 	bl	80039cc <CODEC_IO_Write>
 800279e:	4603      	mov	r3, r0
 80027a0:	461a      	mov	r2, r3
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	4413      	add	r3, r2
 80027a6:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80027a8:	89fb      	ldrh	r3, [r7, #14]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80027b0:	2102      	movs	r1, #2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 f90a 	bl	80039cc <CODEC_IO_Write>
 80027b8:	4603      	mov	r3, r0
 80027ba:	461a      	mov	r2, r3
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80027c2:	89fb      	ldrh	r3, [r7, #14]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2202      	movs	r2, #2
 80027c8:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 f8fd 	bl	80039cc <CODEC_IO_Write>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461a      	mov	r2, r3
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80027dc:	89fb      	ldrh	r3, [r7, #14]
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2202      	movs	r2, #2
 80027e2:	f240 6109 	movw	r1, #1545	; 0x609
 80027e6:	4618      	mov	r0, r3
 80027e8:	f001 f8f0 	bl	80039cc <CODEC_IO_Write>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	4413      	add	r3, r2
 80027f4:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80027f6:	89fb      	ldrh	r3, [r7, #14]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	220e      	movs	r2, #14
 80027fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002800:	4618      	mov	r0, r3
 8002802:	f001 f8e3 	bl	80039cc <CODEC_IO_Write>
 8002806:	4603      	mov	r3, r0
 8002808:	461a      	mov	r2, r3
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	4413      	add	r3, r2
 800280e:	61fb      	str	r3, [r7, #28]
      break;
 8002810:	e143      	b.n	8002a9a <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8002812:	89fb      	ldrh	r3, [r7, #14]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2211      	movs	r2, #17
 8002818:	2128      	movs	r1, #40	; 0x28
 800281a:	4618      	mov	r0, r3
 800281c:	f001 f8d6 	bl	80039cc <CODEC_IO_Write>
 8002820:	4603      	mov	r3, r0
 8002822:	461a      	mov	r2, r3
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	4413      	add	r3, r2
 8002828:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800282a:	89fb      	ldrh	r3, [r7, #14]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2235      	movs	r2, #53	; 0x35
 8002830:	2129      	movs	r1, #41	; 0x29
 8002832:	4618      	mov	r0, r3
 8002834:	f001 f8ca 	bl	80039cc <CODEC_IO_Write>
 8002838:	4603      	mov	r3, r0
 800283a:	461a      	mov	r2, r3
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	4413      	add	r3, r2
 8002840:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8002842:	89fb      	ldrh	r3, [r7, #14]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2235      	movs	r2, #53	; 0x35
 8002848:	212a      	movs	r1, #42	; 0x2a
 800284a:	4618      	mov	r0, r3
 800284c:	f001 f8be 	bl	80039cc <CODEC_IO_Write>
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	4413      	add	r3, r2
 8002858:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800285a:	89fb      	ldrh	r3, [r7, #14]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f240 3203 	movw	r2, #771	; 0x303
 8002862:	2104      	movs	r1, #4
 8002864:	4618      	mov	r0, r3
 8002866:	f001 f8b1 	bl	80039cc <CODEC_IO_Write>
 800286a:	4603      	mov	r3, r0
 800286c:	461a      	mov	r2, r3
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	4413      	add	r3, r2
 8002872:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002874:	89fb      	ldrh	r3, [r7, #14]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	22db      	movs	r2, #219	; 0xdb
 800287a:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f8a4 	bl	80039cc <CODEC_IO_Write>
 8002884:	4603      	mov	r3, r0
 8002886:	461a      	mov	r2, r3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	4413      	add	r3, r2
 800288c:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800288e:	89fb      	ldrh	r3, [r7, #14]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f246 3250 	movw	r2, #25424	; 0x6350
 8002896:	2102      	movs	r1, #2
 8002898:	4618      	mov	r0, r3
 800289a:	f001 f897 	bl	80039cc <CODEC_IO_Write>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4413      	add	r3, r2
 80028a6:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80028a8:	89fb      	ldrh	r3, [r7, #14]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2202      	movs	r2, #2
 80028ae:	f240 6106 	movw	r1, #1542	; 0x606
 80028b2:	4618      	mov	r0, r3
 80028b4:	f001 f88a 	bl	80039cc <CODEC_IO_Write>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461a      	mov	r2, r3
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80028c2:	89fb      	ldrh	r3, [r7, #14]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2202      	movs	r2, #2
 80028c8:	f240 6107 	movw	r1, #1543	; 0x607
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 f87d 	bl	80039cc <CODEC_IO_Write>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461a      	mov	r2, r3
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	4413      	add	r3, r2
 80028da:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80028dc:	89fb      	ldrh	r3, [r7, #14]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	220d      	movs	r2, #13
 80028e2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80028e6:	4618      	mov	r0, r3
 80028e8:	f001 f870 	bl	80039cc <CODEC_IO_Write>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	61fb      	str	r3, [r7, #28]
      break;
 80028f6:	e0d0      	b.n	8002a9a <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80028f8:	89fb      	ldrh	r3, [r7, #14]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8002900:	2104      	movs	r1, #4
 8002902:	4618      	mov	r0, r3
 8002904:	f001 f862 	bl	80039cc <CODEC_IO_Write>
 8002908:	4603      	mov	r3, r0
 800290a:	461a      	mov	r2, r3
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4413      	add	r3, r2
 8002910:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002912:	89fb      	ldrh	r3, [r7, #14]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	22db      	movs	r2, #219	; 0xdb
 8002918:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800291c:	4618      	mov	r0, r3
 800291e:	f001 f855 	bl	80039cc <CODEC_IO_Write>
 8002922:	4603      	mov	r3, r0
 8002924:	461a      	mov	r2, r3
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	4413      	add	r3, r2
 800292a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 800292c:	89fb      	ldrh	r3, [r7, #14]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	f246 3250 	movw	r2, #25424	; 0x6350
 8002934:	2102      	movs	r1, #2
 8002936:	4618      	mov	r0, r3
 8002938:	f001 f848 	bl	80039cc <CODEC_IO_Write>
 800293c:	4603      	mov	r3, r0
 800293e:	461a      	mov	r2, r3
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002946:	89fb      	ldrh	r3, [r7, #14]
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2202      	movs	r2, #2
 800294c:	f240 6106 	movw	r1, #1542	; 0x606
 8002950:	4618      	mov	r0, r3
 8002952:	f001 f83b 	bl	80039cc <CODEC_IO_Write>
 8002956:	4603      	mov	r3, r0
 8002958:	461a      	mov	r2, r3
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	4413      	add	r3, r2
 800295e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2202      	movs	r2, #2
 8002966:	f240 6107 	movw	r1, #1543	; 0x607
 800296a:	4618      	mov	r0, r3
 800296c:	f001 f82e 	bl	80039cc <CODEC_IO_Write>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800297a:	89fb      	ldrh	r3, [r7, #14]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	220d      	movs	r2, #13
 8002980:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002984:	4618      	mov	r0, r3
 8002986:	f001 f821 	bl	80039cc <CODEC_IO_Write>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	4413      	add	r3, r2
 8002992:	61fb      	str	r3, [r7, #28]
      break; 
 8002994:	e081      	b.n	8002a9a <wm8994_Init+0x702>
 8002996:	bf00      	nop
 8002998:	20006fc0 	.word	0x20006fc0
 800299c:	20006fc4 	.word	0x20006fc4
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80029a0:	89fb      	ldrh	r3, [r7, #14]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f640 723c 	movw	r2, #3900	; 0xf3c
 80029a8:	2104      	movs	r1, #4
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 f80e 	bl	80039cc <CODEC_IO_Write>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80029ba:	89fb      	ldrh	r3, [r7, #14]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	22db      	movs	r2, #219	; 0xdb
 80029c0:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 f801 	bl	80039cc <CODEC_IO_Write>
 80029ca:	4603      	mov	r3, r0
 80029cc:	461a      	mov	r2, r3
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80029d4:	89fb      	ldrh	r3, [r7, #14]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	22db      	movs	r2, #219	; 0xdb
 80029da:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fff4 	bl	80039cc <CODEC_IO_Write>
 80029e4:	4603      	mov	r3, r0
 80029e6:	461a      	mov	r2, r3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4413      	add	r3, r2
 80029ec:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80029ee:	89fb      	ldrh	r3, [r7, #14]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80029f6:	2102      	movs	r1, #2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f000 ffe7 	bl	80039cc <CODEC_IO_Write>
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	4413      	add	r3, r2
 8002a06:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002a08:	89fb      	ldrh	r3, [r7, #14]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	f240 6106 	movw	r1, #1542	; 0x606
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 ffda 	bl	80039cc <CODEC_IO_Write>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002a22:	89fb      	ldrh	r3, [r7, #14]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2202      	movs	r2, #2
 8002a28:	f240 6107 	movw	r1, #1543	; 0x607
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f000 ffcd 	bl	80039cc <CODEC_IO_Write>
 8002a32:	4603      	mov	r3, r0
 8002a34:	461a      	mov	r2, r3
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	4413      	add	r3, r2
 8002a3a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002a3c:	89fb      	ldrh	r3, [r7, #14]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2202      	movs	r2, #2
 8002a42:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 ffc0 	bl	80039cc <CODEC_IO_Write>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	461a      	mov	r2, r3
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	4413      	add	r3, r2
 8002a54:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002a56:	89fb      	ldrh	r3, [r7, #14]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f240 6109 	movw	r1, #1545	; 0x609
 8002a60:	4618      	mov	r0, r3
 8002a62:	f000 ffb3 	bl	80039cc <CODEC_IO_Write>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002a70:	89fb      	ldrh	r3, [r7, #14]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	220d      	movs	r2, #13
 8002a76:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 ffa6 	bl	80039cc <CODEC_IO_Write>
 8002a80:	4603      	mov	r3, r0
 8002a82:	461a      	mov	r2, r3
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	4413      	add	r3, r2
 8002a88:	61fb      	str	r3, [r7, #28]
      break;    
 8002a8a:	e006      	b.n	8002a9a <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	61fb      	str	r3, [r7, #28]
      break;
 8002a92:	e002      	b.n	8002a9a <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002a94:	4ba4      	ldr	r3, [pc, #656]	; (8002d28 <wm8994_Init+0x990>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4aa3      	ldr	r2, [pc, #652]	; (8002d2c <wm8994_Init+0x994>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d079      	beq.n	8002b96 <wm8994_Init+0x7fe>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4aa1      	ldr	r2, [pc, #644]	; (8002d2c <wm8994_Init+0x994>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	f200 80ad 	bhi.w	8002c06 <wm8994_Init+0x86e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d061      	beq.n	8002b7a <wm8994_Init+0x7e2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002abc:	4293      	cmp	r3, r2
 8002abe:	f200 80a2 	bhi.w	8002c06 <wm8994_Init+0x86e>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	f000 808e 	beq.w	8002bea <wm8994_Init+0x852>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	f200 8096 	bhi.w	8002c06 <wm8994_Init+0x86e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002ae0:	d03d      	beq.n	8002b5e <wm8994_Init+0x7c6>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002ae8:	f200 808d 	bhi.w	8002c06 <wm8994_Init+0x86e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f245 6222 	movw	r2, #22050	; 0x5622
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d06b      	beq.n	8002bce <wm8994_Init+0x836>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f245 6222 	movw	r2, #22050	; 0x5622
 8002afc:	4293      	cmp	r3, r2
 8002afe:	f200 8082 	bhi.w	8002c06 <wm8994_Init+0x86e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002b08:	d01b      	beq.n	8002b42 <wm8994_Init+0x7aa>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002b10:	d879      	bhi.n	8002c06 <wm8994_Init+0x86e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002b18:	d005      	beq.n	8002b26 <wm8994_Init+0x78e>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d046      	beq.n	8002bb2 <wm8994_Init+0x81a>
 8002b24:	e06f      	b.n	8002c06 <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002b26:	89fb      	ldrh	r3, [r7, #14]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002b30:	4618      	mov	r0, r3
 8002b32:	f000 ff4b 	bl	80039cc <CODEC_IO_Write>
 8002b36:	4603      	mov	r3, r0
 8002b38:	461a      	mov	r2, r3
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	61fb      	str	r3, [r7, #28]
    break;
 8002b40:	e06f      	b.n	8002c22 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002b42:	89fb      	ldrh	r3, [r7, #14]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2233      	movs	r2, #51	; 0x33
 8002b48:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 ff3d 	bl	80039cc <CODEC_IO_Write>
 8002b52:	4603      	mov	r3, r0
 8002b54:	461a      	mov	r2, r3
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	4413      	add	r3, r2
 8002b5a:	61fb      	str	r3, [r7, #28]
    break;
 8002b5c:	e061      	b.n	8002c22 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002b5e:	89fb      	ldrh	r3, [r7, #14]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2263      	movs	r2, #99	; 0x63
 8002b64:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 ff2f 	bl	80039cc <CODEC_IO_Write>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	61fb      	str	r3, [r7, #28]
    break;
 8002b78:	e053      	b.n	8002c22 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002b7a:	89fb      	ldrh	r3, [r7, #14]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2283      	movs	r2, #131	; 0x83
 8002b80:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002b84:	4618      	mov	r0, r3
 8002b86:	f000 ff21 	bl	80039cc <CODEC_IO_Write>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	4413      	add	r3, r2
 8002b92:	61fb      	str	r3, [r7, #28]
    break;
 8002b94:	e045      	b.n	8002c22 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002b96:	89fb      	ldrh	r3, [r7, #14]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	22a3      	movs	r2, #163	; 0xa3
 8002b9c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 ff13 	bl	80039cc <CODEC_IO_Write>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	4413      	add	r3, r2
 8002bae:	61fb      	str	r3, [r7, #28]
    break;
 8002bb0:	e037      	b.n	8002c22 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002bb2:	89fb      	ldrh	r3, [r7, #14]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2213      	movs	r2, #19
 8002bb8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 ff05 	bl	80039cc <CODEC_IO_Write>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4413      	add	r3, r2
 8002bca:	61fb      	str	r3, [r7, #28]
    break;
 8002bcc:	e029      	b.n	8002c22 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002bce:	89fb      	ldrh	r3, [r7, #14]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2243      	movs	r2, #67	; 0x43
 8002bd4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fef7 	bl	80039cc <CODEC_IO_Write>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461a      	mov	r2, r3
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	4413      	add	r3, r2
 8002be6:	61fb      	str	r3, [r7, #28]
    break;
 8002be8:	e01b      	b.n	8002c22 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002bea:	89fb      	ldrh	r3, [r7, #14]
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2273      	movs	r2, #115	; 0x73
 8002bf0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fee9 	bl	80039cc <CODEC_IO_Write>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	61fb      	str	r3, [r7, #28]
    break; 
 8002c04:	e00d      	b.n	8002c22 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002c06:	89fb      	ldrh	r3, [r7, #14]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2283      	movs	r2, #131	; 0x83
 8002c0c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fedb 	bl	80039cc <CODEC_IO_Write>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	61fb      	str	r3, [r7, #28]
    break; 
 8002c20:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002c22:	8afb      	ldrh	r3, [r7, #22]
 8002c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c28:	d10e      	bne.n	8002c48 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002c2a:	89fb      	ldrh	r3, [r7, #14]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f244 0218 	movw	r2, #16408	; 0x4018
 8002c32:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fec8 	bl	80039cc <CODEC_IO_Write>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	461a      	mov	r2, r3
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	4413      	add	r3, r2
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	e00d      	b.n	8002c64 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002c48:	89fb      	ldrh	r3, [r7, #14]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	f244 0210 	movw	r2, #16400	; 0x4010
 8002c50:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 feb9 	bl	80039cc <CODEC_IO_Write>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002c64:	89fb      	ldrh	r3, [r7, #14]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f240 3102 	movw	r1, #770	; 0x302
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 feac 	bl	80039cc <CODEC_IO_Write>
 8002c74:	4603      	mov	r3, r0
 8002c76:	461a      	mov	r2, r3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002c7e:	89fb      	ldrh	r3, [r7, #14]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	220a      	movs	r2, #10
 8002c84:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fe9f 	bl	80039cc <CODEC_IO_Write>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	461a      	mov	r2, r3
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	4413      	add	r3, r2
 8002c96:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002c98:	89fb      	ldrh	r3, [r7, #14]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fe92 	bl	80039cc <CODEC_IO_Write>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002cb2:	8b3b      	ldrh	r3, [r7, #24]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 817b 	beq.w	8002fb0 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002cba:	8b3b      	ldrh	r3, [r7, #24]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d157      	bne.n	8002d70 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8002cc0:	89fb      	ldrh	r3, [r7, #14]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cc8:	212d      	movs	r1, #45	; 0x2d
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fe7e 	bl	80039cc <CODEC_IO_Write>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8002cda:	89fb      	ldrh	r3, [r7, #14]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ce2:	212e      	movs	r1, #46	; 0x2e
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fe71 	bl	80039cc <CODEC_IO_Write>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <wm8994_Init+0x998>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d01b      	beq.n	8002d34 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8002cfc:	89fb      	ldrh	r3, [r7, #14]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8002d04:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fe5f 	bl	80039cc <CODEC_IO_Write>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	461a      	mov	r2, r3
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	4413      	add	r3, r2
 8002d16:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <wm8994_Init+0x998>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8002d1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002d22:	f000 ffb5 	bl	8003c90 <AUDIO_IO_Delay>
 8002d26:	e016      	b.n	8002d56 <wm8994_Init+0x9be>
 8002d28:	20006fc4 	.word	0x20006fc4
 8002d2c:	00017700 	.word	0x00017700
 8002d30:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002d34:	89fb      	ldrh	r3, [r7, #14]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	f248 1208 	movw	r2, #33032	; 0x8108
 8002d3c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fe43 	bl	80039cc <CODEC_IO_Write>
 8002d46:	4603      	mov	r3, r0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002d50:	2032      	movs	r0, #50	; 0x32
 8002d52:	f000 ff9d 	bl	8003c90 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002d56:	89fb      	ldrh	r3, [r7, #14]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fe33 	bl	80039cc <CODEC_IO_Write>
 8002d66:	4603      	mov	r3, r0
 8002d68:	461a      	mov	r2, r3
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002d70:	89fb      	ldrh	r3, [r7, #14]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002d78:	2103      	movs	r1, #3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fe26 	bl	80039cc <CODEC_IO_Write>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	4413      	add	r3, r2
 8002d88:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002d8a:	89fb      	ldrh	r3, [r7, #14]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2122      	movs	r1, #34	; 0x22
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fe1a 	bl	80039cc <CODEC_IO_Write>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	4413      	add	r3, r2
 8002da0:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8002da2:	89fb      	ldrh	r3, [r7, #14]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2200      	movs	r2, #0
 8002da8:	2123      	movs	r1, #35	; 0x23
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fe0e 	bl	80039cc <CODEC_IO_Write>
 8002db0:	4603      	mov	r3, r0
 8002db2:	461a      	mov	r2, r3
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	4413      	add	r3, r2
 8002db8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002dba:	89fb      	ldrh	r3, [r7, #14]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002dc2:	2136      	movs	r1, #54	; 0x36
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fe01 	bl	80039cc <CODEC_IO_Write>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8002dd4:	89fb      	ldrh	r3, [r7, #14]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f243 0203 	movw	r2, #12291	; 0x3003
 8002ddc:	2101      	movs	r1, #1
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fdf4 	bl	80039cc <CODEC_IO_Write>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	4413      	add	r3, r2
 8002dec:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002dee:	8afb      	ldrh	r3, [r7, #22]
 8002df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df4:	d10d      	bne.n	8002e12 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002df6:	89fb      	ldrh	r3, [r7, #14]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f240 2205 	movw	r2, #517	; 0x205
 8002dfe:	2151      	movs	r1, #81	; 0x51
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fde3 	bl	80039cc <CODEC_IO_Write>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461a      	mov	r2, r3
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	e00b      	b.n	8002e2a <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002e12:	89fb      	ldrh	r3, [r7, #14]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2205      	movs	r2, #5
 8002e18:	2151      	movs	r1, #81	; 0x51
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fdd6 	bl	80039cc <CODEC_IO_Write>
 8002e20:	4603      	mov	r3, r0
 8002e22:	461a      	mov	r2, r3
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	4413      	add	r3, r2
 8002e28:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002e2a:	8b7b      	ldrh	r3, [r7, #26]
 8002e2c:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8002e30:	f043 0303 	orr.w	r3, r3, #3
 8002e34:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002e36:	89fb      	ldrh	r3, [r7, #14]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	8b7a      	ldrh	r2, [r7, #26]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f000 fdc4 	bl	80039cc <CODEC_IO_Write>
 8002e44:	4603      	mov	r3, r0
 8002e46:	461a      	mov	r2, r3
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002e4e:	89fb      	ldrh	r3, [r7, #14]
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2222      	movs	r2, #34	; 0x22
 8002e54:	2160      	movs	r1, #96	; 0x60
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fdb8 	bl	80039cc <CODEC_IO_Write>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	4413      	add	r3, r2
 8002e64:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002e66:	89fb      	ldrh	r3, [r7, #14]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f649 7225 	movw	r2, #40741	; 0x9f25
 8002e6e:	214c      	movs	r1, #76	; 0x4c
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fdab 	bl	80039cc <CODEC_IO_Write>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002e80:	200f      	movs	r0, #15
 8002e82:	f000 ff05 	bl	8003c90 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002e86:	89fb      	ldrh	r3, [r7, #14]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	212d      	movs	r1, #45	; 0x2d
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fd9c 	bl	80039cc <CODEC_IO_Write>
 8002e94:	4603      	mov	r3, r0
 8002e96:	461a      	mov	r2, r3
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002e9e:	89fb      	ldrh	r3, [r7, #14]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	212e      	movs	r1, #46	; 0x2e
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fd90 	bl	80039cc <CODEC_IO_Write>
 8002eac:	4603      	mov	r3, r0
 8002eae:	461a      	mov	r2, r3
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002eb6:	89fb      	ldrh	r3, [r7, #14]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	f44f 724c 	mov.w	r2, #816	; 0x330
 8002ebe:	2103      	movs	r1, #3
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fd83 	bl	80039cc <CODEC_IO_Write>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	461a      	mov	r2, r3
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	4413      	add	r3, r2
 8002ece:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002ed0:	89fb      	ldrh	r3, [r7, #14]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2233      	movs	r2, #51	; 0x33
 8002ed6:	2154      	movs	r1, #84	; 0x54
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fd77 	bl	80039cc <CODEC_IO_Write>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002ee8:	f240 1001 	movw	r0, #257	; 0x101
 8002eec:	f000 fed0 	bl	8003c90 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002ef0:	89fb      	ldrh	r3, [r7, #14]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	22ee      	movs	r2, #238	; 0xee
 8002ef6:	2160      	movs	r1, #96	; 0x60
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fd67 	bl	80039cc <CODEC_IO_Write>
 8002efe:	4603      	mov	r3, r0
 8002f00:	461a      	mov	r2, r3
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	4413      	add	r3, r2
 8002f06:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002f08:	89fb      	ldrh	r3, [r7, #14]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	22c0      	movs	r2, #192	; 0xc0
 8002f0e:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fd5a 	bl	80039cc <CODEC_IO_Write>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4413      	add	r3, r2
 8002f20:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002f22:	89fb      	ldrh	r3, [r7, #14]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	22c0      	movs	r2, #192	; 0xc0
 8002f28:	f240 6111 	movw	r1, #1553	; 0x611
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 fd4d 	bl	80039cc <CODEC_IO_Write>
 8002f32:	4603      	mov	r3, r0
 8002f34:	461a      	mov	r2, r3
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002f3c:	89fb      	ldrh	r3, [r7, #14]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2210      	movs	r2, #16
 8002f42:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fd40 	bl	80039cc <CODEC_IO_Write>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	4413      	add	r3, r2
 8002f54:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002f56:	89fb      	ldrh	r3, [r7, #14]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	22c0      	movs	r2, #192	; 0xc0
 8002f5c:	f240 6112 	movw	r1, #1554	; 0x612
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fd33 	bl	80039cc <CODEC_IO_Write>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002f70:	89fb      	ldrh	r3, [r7, #14]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	22c0      	movs	r2, #192	; 0xc0
 8002f76:	f240 6113 	movw	r1, #1555	; 0x613
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fd26 	bl	80039cc <CODEC_IO_Write>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	4413      	add	r3, r2
 8002f88:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002f8a:	89fb      	ldrh	r3, [r7, #14]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2210      	movs	r2, #16
 8002f90:	f240 4122 	movw	r1, #1058	; 0x422
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fd19 	bl	80039cc <CODEC_IO_Write>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002fa4:	7afa      	ldrb	r2, [r7, #11]
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f984 	bl	80032b8 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002fb0:	8afb      	ldrh	r3, [r7, #22]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80a6 	beq.w	8003104 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002fb8:	8afb      	ldrh	r3, [r7, #22]
 8002fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fbe:	d003      	beq.n	8002fc8 <wm8994_Init+0xc30>
 8002fc0:	8afb      	ldrh	r3, [r7, #22]
 8002fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc6:	d12b      	bne.n	8003020 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002fc8:	8b7b      	ldrh	r3, [r7, #26]
 8002fca:	f043 0313 	orr.w	r3, r3, #19
 8002fce:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002fd0:	89fb      	ldrh	r3, [r7, #14]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	8b7a      	ldrh	r2, [r7, #26]
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fcf7 	bl	80039cc <CODEC_IO_Write>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002fe8:	89fb      	ldrh	r3, [r7, #14]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2202      	movs	r2, #2
 8002fee:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fcea 	bl	80039cc <CODEC_IO_Write>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4413      	add	r3, r2
 8003000:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8003002:	89fb      	ldrh	r3, [r7, #14]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800300a:	f240 4111 	movw	r1, #1041	; 0x411
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fcdc 	bl	80039cc <CODEC_IO_Write>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	4413      	add	r3, r2
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	e06b      	b.n	80030f8 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003020:	8afb      	ldrh	r3, [r7, #22]
 8003022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003026:	d139      	bne.n	800309c <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003028:	8b7b      	ldrh	r3, [r7, #26]
 800302a:	f043 0313 	orr.w	r3, r3, #19
 800302e:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003030:	89fb      	ldrh	r3, [r7, #14]
 8003032:	b2db      	uxtb	r3, r3
 8003034:	8b7a      	ldrh	r2, [r7, #26]
 8003036:	2101      	movs	r1, #1
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fcc7 	bl	80039cc <CODEC_IO_Write>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	4413      	add	r3, r2
 8003046:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003048:	89fb      	ldrh	r3, [r7, #14]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2202      	movs	r2, #2
 800304e:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fcba 	bl	80039cc <CODEC_IO_Write>
 8003058:	4603      	mov	r3, r0
 800305a:	461a      	mov	r2, r3
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8003062:	89fb      	ldrh	r3, [r7, #14]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800306a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fcac 	bl	80039cc <CODEC_IO_Write>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	4413      	add	r3, r2
 800307c:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 800307e:	89fb      	ldrh	r3, [r7, #14]
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003086:	f240 4111 	movw	r1, #1041	; 0x411
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fc9e 	bl	80039cc <CODEC_IO_Write>
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	4413      	add	r3, r2
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	e02d      	b.n	80030f8 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 800309c:	8afb      	ldrh	r3, [r7, #22]
 800309e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030a2:	d003      	beq.n	80030ac <wm8994_Init+0xd14>
 80030a4:	8afb      	ldrh	r3, [r7, #22]
 80030a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030aa:	d125      	bne.n	80030f8 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80030ac:	89fb      	ldrh	r3, [r7, #14]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	220b      	movs	r2, #11
 80030b2:	2118      	movs	r1, #24
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fc89 	bl	80039cc <CODEC_IO_Write>
 80030ba:	4603      	mov	r3, r0
 80030bc:	461a      	mov	r2, r3
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80030c4:	89fb      	ldrh	r3, [r7, #14]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	220b      	movs	r2, #11
 80030ca:	211a      	movs	r1, #26
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fc7d 	bl	80039cc <CODEC_IO_Write>
 80030d2:	4603      	mov	r3, r0
 80030d4:	461a      	mov	r2, r3
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80030dc:	89fb      	ldrh	r3, [r7, #14]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80030e4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fc6f 	bl	80039cc <CODEC_IO_Write>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	4413      	add	r3, r2
 80030f6:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80030f8:	7afa      	ldrb	r2, [r7, #11]
 80030fa:	89fb      	ldrh	r3, [r7, #14]
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 f8da 	bl	80032b8 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8003104:	69fb      	ldr	r3, [r7, #28]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop

08003110 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8003114:	f000 fd68 	bl	8003be8 <AUDIO_IO_DeInit>
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}

0800311c <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8003126:	f000 fd59 	bl	8003bdc <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 800312a:	88fb      	ldrh	r3, [r7, #6]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fd85 	bl	8003c40 <AUDIO_IO_Read>
 8003136:	4603      	mov	r3, r0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	80fb      	strh	r3, [r7, #6]
 800314c:	4613      	mov	r3, r2
 800314e:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003154:	88fb      	ldrh	r3, [r7, #6]
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f9d1 	bl	8003500 <wm8994_SetMute>
 800315e:	4602      	mov	r2, r0
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8003166:	68fb      	ldr	r3, [r7, #12]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	2101      	movs	r1, #1
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f9bc 	bl	8003500 <wm8994_SetMute>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2201      	movs	r2, #1
 8003196:	2102      	movs	r1, #2
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fc17 	bl	80039cc <CODEC_IO_Write>
 800319e:	4603      	mov	r3, r0
 80031a0:	461a      	mov	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	4413      	add	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80031a8:	68fb      	ldr	r3, [r7, #12]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 f99b 	bl	8003500 <wm8994_SetMute>
 80031ca:	4602      	mov	r2, r0
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4413      	add	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80031d2:	68fb      	ldr	r3, [r7, #12]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80031ec:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <wm8994_Stop+0xd8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05a      	beq.n	80032aa <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	2101      	movs	r1, #1
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 f981 	bl	8003500 <wm8994_SetMute>
 80031fe:	4602      	mov	r2, r0
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4413      	add	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d04e      	beq.n	80032aa <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	b2db      	uxtb	r3, r3
 8003210:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003214:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fbd7 	bl	80039cc <CODEC_IO_Write>
 800321e:	4603      	mov	r3, r0
 8003220:	461a      	mov	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4413      	add	r3, r2
 8003226:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003228:	88fb      	ldrh	r3, [r7, #6]
 800322a:	b2db      	uxtb	r3, r3
 800322c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003230:	f240 4122 	movw	r1, #1058	; 0x422
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fbc9 	bl	80039cc <CODEC_IO_Write>
 800323a:	4603      	mov	r3, r0
 800323c:	461a      	mov	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4413      	add	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2200      	movs	r2, #0
 800324a:	212d      	movs	r1, #45	; 0x2d
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fbbd 	bl	80039cc <CODEC_IO_Write>
 8003252:	4603      	mov	r3, r0
 8003254:	461a      	mov	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4413      	add	r3, r2
 800325a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2200      	movs	r2, #0
 8003262:	212e      	movs	r1, #46	; 0x2e
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fbb1 	bl	80039cc <CODEC_IO_Write>
 800326a:	4603      	mov	r3, r0
 800326c:	461a      	mov	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2200      	movs	r2, #0
 800327a:	2105      	movs	r1, #5
 800327c:	4618      	mov	r0, r3
 800327e:	f000 fba5 	bl	80039cc <CODEC_IO_Write>
 8003282:	4603      	mov	r3, r0
 8003284:	461a      	mov	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800328c:	88fb      	ldrh	r3, [r7, #6]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2200      	movs	r2, #0
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fb99 	bl	80039cc <CODEC_IO_Write>
 800329a:	4603      	mov	r3, r0
 800329c:	461a      	mov	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <wm8994_Stop+0xd8>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 80032aa:	68fb      	ldr	r3, [r7, #12]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20006fc0 	.word	0x20006fc0

080032b8 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	460a      	mov	r2, r1
 80032c2:	80fb      	strh	r3, [r7, #6]
 80032c4:	4613      	mov	r3, r2
 80032c6:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80032cc:	797b      	ldrb	r3, [r7, #5]
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d80b      	bhi.n	80032ea <wm8994_SetVolume+0x32>
 80032d2:	797a      	ldrb	r2, [r7, #5]
 80032d4:	4613      	mov	r3, r2
 80032d6:	019b      	lsls	r3, r3, #6
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	4a86      	ldr	r2, [pc, #536]	; (80034f4 <wm8994_SetVolume+0x23c>)
 80032dc:	fb82 1203 	smull	r1, r2, r2, r3
 80032e0:	1152      	asrs	r2, r2, #5
 80032e2:	17db      	asrs	r3, r3, #31
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	e000      	b.n	80032ec <wm8994_SetVolume+0x34>
 80032ea:	2364      	movs	r3, #100	; 0x64
 80032ec:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80032ee:	4b82      	ldr	r3, [pc, #520]	; (80034f8 <wm8994_SetVolume+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 809b 	beq.w	800342e <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80032f8:	7afb      	ldrb	r3, [r7, #11]
 80032fa:	2b3e      	cmp	r3, #62	; 0x3e
 80032fc:	d93d      	bls.n	800337a <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f8fc 	bl	8003500 <wm8994_SetMute>
 8003308:	4602      	mov	r2, r0
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4413      	add	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f240 127f 	movw	r2, #383	; 0x17f
 8003318:	211c      	movs	r1, #28
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fb56 	bl	80039cc <CODEC_IO_Write>
 8003320:	4603      	mov	r3, r0
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f240 127f 	movw	r2, #383	; 0x17f
 8003332:	211d      	movs	r1, #29
 8003334:	4618      	mov	r0, r3
 8003336:	f000 fb49 	bl	80039cc <CODEC_IO_Write>
 800333a:	4603      	mov	r3, r0
 800333c:	461a      	mov	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f240 127f 	movw	r2, #383	; 0x17f
 800334c:	2126      	movs	r1, #38	; 0x26
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fb3c 	bl	80039cc <CODEC_IO_Write>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f240 127f 	movw	r2, #383	; 0x17f
 8003366:	2127      	movs	r1, #39	; 0x27
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fb2f 	bl	80039cc <CODEC_IO_Write>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e059      	b.n	800342e <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800337a:	797b      	ldrb	r3, [r7, #5]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d109      	bne.n	8003394 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	2101      	movs	r1, #1
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f8bb 	bl	8003500 <wm8994_SetMute>
 800338a:	4602      	mov	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4413      	add	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	e04c      	b.n	800342e <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f8b1 	bl	8003500 <wm8994_SetMute>
 800339e:	4602      	mov	r2, r0
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80033a6:	88fb      	ldrh	r3, [r7, #6]
 80033a8:	b2d8      	uxtb	r0, r3
 80033aa:	7afb      	ldrb	r3, [r7, #11]
 80033ac:	b21b      	sxth	r3, r3
 80033ae:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	211c      	movs	r1, #28
 80033ba:	f000 fb07 	bl	80039cc <CODEC_IO_Write>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4413      	add	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	b2d8      	uxtb	r0, r3
 80033cc:	7afb      	ldrb	r3, [r7, #11]
 80033ce:	b21b      	sxth	r3, r3
 80033d0:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80033d4:	b21b      	sxth	r3, r3
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	211d      	movs	r1, #29
 80033dc:	f000 faf6 	bl	80039cc <CODEC_IO_Write>
 80033e0:	4603      	mov	r3, r0
 80033e2:	461a      	mov	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	b2d8      	uxtb	r0, r3
 80033ee:	7afb      	ldrb	r3, [r7, #11]
 80033f0:	b21b      	sxth	r3, r3
 80033f2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80033f6:	b21b      	sxth	r3, r3
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	461a      	mov	r2, r3
 80033fc:	2126      	movs	r1, #38	; 0x26
 80033fe:	f000 fae5 	bl	80039cc <CODEC_IO_Write>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4413      	add	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 800340c:	88fb      	ldrh	r3, [r7, #6]
 800340e:	b2d8      	uxtb	r0, r3
 8003410:	7afb      	ldrb	r3, [r7, #11]
 8003412:	b21b      	sxth	r3, r3
 8003414:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003418:	b21b      	sxth	r3, r3
 800341a:	b29b      	uxth	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	2127      	movs	r1, #39	; 0x27
 8003420:	f000 fad4 	bl	80039cc <CODEC_IO_Write>
 8003424:	4603      	mov	r3, r0
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	4413      	add	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 800342e:	4b33      	ldr	r3, [pc, #204]	; (80034fc <wm8994_SetVolume+0x244>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d059      	beq.n	80034ea <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8003436:	797b      	ldrb	r3, [r7, #5]
 8003438:	2b63      	cmp	r3, #99	; 0x63
 800343a:	d80c      	bhi.n	8003456 <wm8994_SetVolume+0x19e>
 800343c:	797a      	ldrb	r2, [r7, #5]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4a2b      	ldr	r2, [pc, #172]	; (80034f4 <wm8994_SetVolume+0x23c>)
 8003448:	fb82 1203 	smull	r1, r2, r2, r3
 800344c:	1152      	asrs	r2, r2, #5
 800344e:	17db      	asrs	r3, r3, #31
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	e000      	b.n	8003458 <wm8994_SetVolume+0x1a0>
 8003456:	23ef      	movs	r3, #239	; 0xef
 8003458:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	b2d8      	uxtb	r0, r3
 800345e:	7afb      	ldrb	r3, [r7, #11]
 8003460:	b21b      	sxth	r3, r3
 8003462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003466:	b21b      	sxth	r3, r3
 8003468:	b29b      	uxth	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003470:	f000 faac 	bl	80039cc <CODEC_IO_Write>
 8003474:	4603      	mov	r3, r0
 8003476:	461a      	mov	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	b2d8      	uxtb	r0, r3
 8003482:	7afb      	ldrb	r3, [r7, #11]
 8003484:	b21b      	sxth	r3, r3
 8003486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800348a:	b21b      	sxth	r3, r3
 800348c:	b29b      	uxth	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	f240 4101 	movw	r1, #1025	; 0x401
 8003494:	f000 fa9a 	bl	80039cc <CODEC_IO_Write>
 8003498:	4603      	mov	r3, r0
 800349a:	461a      	mov	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4413      	add	r3, r2
 80034a0:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	b2d8      	uxtb	r0, r3
 80034a6:	7afb      	ldrb	r3, [r7, #11]
 80034a8:	b21b      	sxth	r3, r3
 80034aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ae:	b21b      	sxth	r3, r3
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	f240 4104 	movw	r1, #1028	; 0x404
 80034b8:	f000 fa88 	bl	80039cc <CODEC_IO_Write>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	4413      	add	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80034c6:	88fb      	ldrh	r3, [r7, #6]
 80034c8:	b2d8      	uxtb	r0, r3
 80034ca:	7afb      	ldrb	r3, [r7, #11]
 80034cc:	b21b      	sxth	r3, r3
 80034ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d2:	b21b      	sxth	r3, r3
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	f240 4105 	movw	r1, #1029	; 0x405
 80034dc:	f000 fa76 	bl	80039cc <CODEC_IO_Write>
 80034e0:	4603      	mov	r3, r0
 80034e2:	461a      	mov	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4413      	add	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80034ea:	68fb      	ldr	r3, [r7, #12]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	51eb851f 	.word	0x51eb851f
 80034f8:	20006fc0 	.word	0x20006fc0
 80034fc:	20006fc4 	.word	0x20006fc4

08003500 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8003510:	4b21      	ldr	r3, [pc, #132]	; (8003598 <wm8994_SetMute+0x98>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d039      	beq.n	800358c <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d11c      	bne.n	8003558 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fa4e 	bl	80039cc <CODEC_IO_Write>
 8003530:	4603      	mov	r3, r0
 8003532:	461a      	mov	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4413      	add	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003542:	f240 4122 	movw	r1, #1058	; 0x422
 8003546:	4618      	mov	r0, r3
 8003548:	f000 fa40 	bl	80039cc <CODEC_IO_Write>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	e019      	b.n	800358c <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2210      	movs	r2, #16
 800355e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fa32 	bl	80039cc <CODEC_IO_Write>
 8003568:	4603      	mov	r3, r0
 800356a:	461a      	mov	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2210      	movs	r2, #16
 8003578:	f240 4122 	movw	r1, #1058	; 0x422
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fa25 	bl	80039cc <CODEC_IO_Write>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4413      	add	r3, r2
 800358a:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 800358c:	68fb      	ldr	r3, [r7, #12]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20006fc0 	.word	0x20006fc0

0800359c <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	460a      	mov	r2, r1
 80035a6:	80fb      	strh	r3, [r7, #6]
 80035a8:	4613      	mov	r3, r2
 80035aa:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80035ac:	2300      	movs	r3, #0
 80035ae:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80035b0:	797b      	ldrb	r3, [r7, #5]
 80035b2:	2b03      	cmp	r3, #3
 80035b4:	f000 808c 	beq.w	80036d0 <wm8994_SetOutputMode+0x134>
 80035b8:	2b03      	cmp	r3, #3
 80035ba:	f300 80cb 	bgt.w	8003754 <wm8994_SetOutputMode+0x1b8>
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d002      	beq.n	80035c8 <wm8994_SetOutputMode+0x2c>
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d042      	beq.n	800364c <wm8994_SetOutputMode+0xb0>
 80035c6:	e0c5      	b.n	8003754 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f640 420c 	movw	r2, #3084	; 0xc0c
 80035d0:	2105      	movs	r1, #5
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 f9fa 	bl	80039cc <CODEC_IO_Write>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2200      	movs	r2, #0
 80035e8:	f240 6101 	movw	r1, #1537	; 0x601
 80035ec:	4618      	mov	r0, r3
 80035ee:	f000 f9ed 	bl	80039cc <CODEC_IO_Write>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4413      	add	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2200      	movs	r2, #0
 8003602:	f240 6102 	movw	r1, #1538	; 0x602
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f9e0 	bl	80039cc <CODEC_IO_Write>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2202      	movs	r2, #2
 800361c:	f240 6104 	movw	r1, #1540	; 0x604
 8003620:	4618      	mov	r0, r3
 8003622:	f000 f9d3 	bl	80039cc <CODEC_IO_Write>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4413      	add	r3, r2
 800362e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2202      	movs	r2, #2
 8003636:	f240 6105 	movw	r1, #1541	; 0x605
 800363a:	4618      	mov	r0, r3
 800363c:	f000 f9c6 	bl	80039cc <CODEC_IO_Write>
 8003640:	4603      	mov	r3, r0
 8003642:	461a      	mov	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
    break;
 800364a:	e0c5      	b.n	80037d8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f240 3203 	movw	r2, #771	; 0x303
 8003654:	2105      	movs	r1, #5
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f9b8 	bl	80039cc <CODEC_IO_Write>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003666:	88fb      	ldrh	r3, [r7, #6]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2201      	movs	r2, #1
 800366c:	f240 6101 	movw	r1, #1537	; 0x601
 8003670:	4618      	mov	r0, r3
 8003672:	f000 f9ab 	bl	80039cc <CODEC_IO_Write>
 8003676:	4603      	mov	r3, r0
 8003678:	461a      	mov	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4413      	add	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2201      	movs	r2, #1
 8003686:	f240 6102 	movw	r1, #1538	; 0x602
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f99e 	bl	80039cc <CODEC_IO_Write>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4413      	add	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800369a:	88fb      	ldrh	r3, [r7, #6]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2200      	movs	r2, #0
 80036a0:	f240 6104 	movw	r1, #1540	; 0x604
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f991 	bl	80039cc <CODEC_IO_Write>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461a      	mov	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4413      	add	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80036b4:	88fb      	ldrh	r3, [r7, #6]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2200      	movs	r2, #0
 80036ba:	f240 6105 	movw	r1, #1541	; 0x605
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f984 	bl	80039cc <CODEC_IO_Write>
 80036c4:	4603      	mov	r3, r0
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
    break;
 80036ce:	e083      	b.n	80037d8 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f640 720f 	movw	r2, #3855	; 0xf0f
 80036d8:	2105      	movs	r1, #5
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f976 	bl	80039cc <CODEC_IO_Write>
 80036e0:	4603      	mov	r3, r0
 80036e2:	461a      	mov	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2201      	movs	r2, #1
 80036f0:	f240 6101 	movw	r1, #1537	; 0x601
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f969 	bl	80039cc <CODEC_IO_Write>
 80036fa:	4603      	mov	r3, r0
 80036fc:	461a      	mov	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4413      	add	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2201      	movs	r2, #1
 800370a:	f240 6102 	movw	r1, #1538	; 0x602
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f95c 	bl	80039cc <CODEC_IO_Write>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2202      	movs	r2, #2
 8003724:	f240 6104 	movw	r1, #1540	; 0x604
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f94f 	bl	80039cc <CODEC_IO_Write>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4413      	add	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2202      	movs	r2, #2
 800373e:	f240 6105 	movw	r1, #1541	; 0x605
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f942 	bl	80039cc <CODEC_IO_Write>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
    break;
 8003752:	e041      	b.n	80037d8 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f240 3203 	movw	r2, #771	; 0x303
 800375c:	2105      	movs	r1, #5
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f934 	bl	80039cc <CODEC_IO_Write>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2201      	movs	r2, #1
 8003774:	f240 6101 	movw	r1, #1537	; 0x601
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f927 	bl	80039cc <CODEC_IO_Write>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4413      	add	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2201      	movs	r2, #1
 800378e:	f240 6102 	movw	r1, #1538	; 0x602
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f91a 	bl	80039cc <CODEC_IO_Write>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2200      	movs	r2, #0
 80037a8:	f240 6104 	movw	r1, #1540	; 0x604
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 f90d 	bl	80039cc <CODEC_IO_Write>
 80037b2:	4603      	mov	r3, r0
 80037b4:	461a      	mov	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2200      	movs	r2, #0
 80037c2:	f240 6105 	movw	r1, #1541	; 0x605
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f900 	bl	80039cc <CODEC_IO_Write>
 80037cc:	4603      	mov	r3, r0
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
    break;    
 80037d6:	bf00      	nop
  }  
  return counter;
 80037d8:	68fb      	ldr	r3, [r7, #12]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	6039      	str	r1, [r7, #0]
 80037ee:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	4a64      	ldr	r2, [pc, #400]	; (8003988 <wm8994_SetFrequency+0x1a4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d079      	beq.n	80038f0 <wm8994_SetFrequency+0x10c>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4a62      	ldr	r2, [pc, #392]	; (8003988 <wm8994_SetFrequency+0x1a4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	f200 80ad 	bhi.w	8003960 <wm8994_SetFrequency+0x17c>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800380c:	4293      	cmp	r3, r2
 800380e:	d061      	beq.n	80038d4 <wm8994_SetFrequency+0xf0>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003816:	4293      	cmp	r3, r2
 8003818:	f200 80a2 	bhi.w	8003960 <wm8994_SetFrequency+0x17c>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003822:	4293      	cmp	r3, r2
 8003824:	f000 808e 	beq.w	8003944 <wm8994_SetFrequency+0x160>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f64a 4244 	movw	r2, #44100	; 0xac44
 800382e:	4293      	cmp	r3, r2
 8003830:	f200 8096 	bhi.w	8003960 <wm8994_SetFrequency+0x17c>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800383a:	d03d      	beq.n	80038b8 <wm8994_SetFrequency+0xd4>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003842:	f200 808d 	bhi.w	8003960 <wm8994_SetFrequency+0x17c>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	f245 6222 	movw	r2, #22050	; 0x5622
 800384c:	4293      	cmp	r3, r2
 800384e:	d06b      	beq.n	8003928 <wm8994_SetFrequency+0x144>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	f245 6222 	movw	r2, #22050	; 0x5622
 8003856:	4293      	cmp	r3, r2
 8003858:	f200 8082 	bhi.w	8003960 <wm8994_SetFrequency+0x17c>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003862:	d01b      	beq.n	800389c <wm8994_SetFrequency+0xb8>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800386a:	d879      	bhi.n	8003960 <wm8994_SetFrequency+0x17c>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003872:	d005      	beq.n	8003880 <wm8994_SetFrequency+0x9c>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f642 3211 	movw	r2, #11025	; 0x2b11
 800387a:	4293      	cmp	r3, r2
 800387c:	d046      	beq.n	800390c <wm8994_SetFrequency+0x128>
 800387e:	e06f      	b.n	8003960 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003880:	88fb      	ldrh	r3, [r7, #6]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2203      	movs	r2, #3
 8003886:	f44f 7104 	mov.w	r1, #528	; 0x210
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f89e 	bl	80039cc <CODEC_IO_Write>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
    break;
 800389a:	e06f      	b.n	800397c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2233      	movs	r2, #51	; 0x33
 80038a2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f890 	bl	80039cc <CODEC_IO_Write>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
    break;
 80038b6:	e061      	b.n	800397c <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80038b8:	88fb      	ldrh	r3, [r7, #6]
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2263      	movs	r2, #99	; 0x63
 80038be:	f44f 7104 	mov.w	r1, #528	; 0x210
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f882 	bl	80039cc <CODEC_IO_Write>
 80038c8:	4603      	mov	r3, r0
 80038ca:	461a      	mov	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
    break;
 80038d2:	e053      	b.n	800397c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2283      	movs	r2, #131	; 0x83
 80038da:	f44f 7104 	mov.w	r1, #528	; 0x210
 80038de:	4618      	mov	r0, r3
 80038e0:	f000 f874 	bl	80039cc <CODEC_IO_Write>
 80038e4:	4603      	mov	r3, r0
 80038e6:	461a      	mov	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
    break;
 80038ee:	e045      	b.n	800397c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80038f0:	88fb      	ldrh	r3, [r7, #6]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	22a3      	movs	r2, #163	; 0xa3
 80038f6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f866 	bl	80039cc <CODEC_IO_Write>
 8003900:	4603      	mov	r3, r0
 8003902:	461a      	mov	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4413      	add	r3, r2
 8003908:	60fb      	str	r3, [r7, #12]
    break;
 800390a:	e037      	b.n	800397c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2213      	movs	r2, #19
 8003912:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f858 	bl	80039cc <CODEC_IO_Write>
 800391c:	4603      	mov	r3, r0
 800391e:	461a      	mov	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4413      	add	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
    break;
 8003926:	e029      	b.n	800397c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2243      	movs	r2, #67	; 0x43
 800392e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003932:	4618      	mov	r0, r3
 8003934:	f000 f84a 	bl	80039cc <CODEC_IO_Write>
 8003938:	4603      	mov	r3, r0
 800393a:	461a      	mov	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4413      	add	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]
    break;
 8003942:	e01b      	b.n	800397c <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2273      	movs	r2, #115	; 0x73
 800394a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f83c 	bl	80039cc <CODEC_IO_Write>
 8003954:	4603      	mov	r3, r0
 8003956:	461a      	mov	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	60fb      	str	r3, [r7, #12]
    break; 
 800395e:	e00d      	b.n	800397c <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003960:	88fb      	ldrh	r3, [r7, #6]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2283      	movs	r2, #131	; 0x83
 8003966:	f44f 7104 	mov.w	r1, #528	; 0x210
 800396a:	4618      	mov	r0, r3
 800396c:	f000 f82e 	bl	80039cc <CODEC_IO_Write>
 8003970:	4603      	mov	r3, r0
 8003972:	461a      	mov	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
    break; 
 800397a:	bf00      	nop
  }
  return counter;
 800397c:	68fb      	ldr	r3, [r7, #12]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	00017700 	.word	0x00017700

0800398c <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	4603      	mov	r3, r0
 8003994:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003996:	2300      	movs	r3, #0
 8003998:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2200      	movs	r2, #0
 80039a0:	2100      	movs	r1, #0
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f812 	bl	80039cc <CODEC_IO_Write>
 80039a8:	4603      	mov	r3, r0
 80039aa:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80039ac:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <wm8994_Reset+0x38>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80039b2:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <wm8994_Reset+0x3c>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

  return counter;
 80039b8:	68fb      	ldr	r3, [r7, #12]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20006fc0 	.word	0x20006fc0
 80039c8:	20006fc4 	.word	0x20006fc4

080039cc <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	71fb      	strb	r3, [r7, #7]
 80039d6:	460b      	mov	r3, r1
 80039d8:	80bb      	strh	r3, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	88b9      	ldrh	r1, [r7, #4]
 80039e6:	79fb      	ldrb	r3, [r7, #7]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 f904 	bl	8003bf6 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	b2db      	uxtb	r3, r3
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <I2Cx_MspInit>:
/**
  * @brief  Initializes I2C MSP.
  * @retval None
  */
static void I2Cx_MspInit(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  EVAL_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003a02:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <I2Cx_MspInit+0xac>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4a28      	ldr	r2, [pc, #160]	; (8003aa8 <I2Cx_MspInit+0xac>)
 8003a08:	f043 0302 	orr.w	r3, r3, #2
 8003a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <I2Cx_MspInit+0xac>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = EVAL_I2Cx_SCL_PIN;
 8003a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a1e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003a20:	2312      	movs	r3, #18
 8003a22:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = EVAL_I2Cx_SCL_SDA_AF;
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a30:	f107 030c 	add.w	r3, r7, #12
 8003a34:	4619      	mov	r1, r3
 8003a36:	481d      	ldr	r0, [pc, #116]	; (8003aac <I2Cx_MspInit+0xb0>)
 8003a38:	f001 ff3a 	bl	80058b0 <HAL_GPIO_Init>
  
  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = EVAL_I2Cx_SDA_PIN;
 8003a3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a40:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003a42:	f107 030c 	add.w	r3, r7, #12
 8003a46:	4619      	mov	r1, r3
 8003a48:	4818      	ldr	r0, [pc, #96]	; (8003aac <I2Cx_MspInit+0xb0>)
 8003a4a:	f001 ff31 	bl	80058b0 <HAL_GPIO_Init>
  
  /*** Configure the I2C peripheral ***/ 
  /* Enable I2C clock */
  EVAL_I2Cx_CLK_ENABLE();
 8003a4e:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <I2Cx_MspInit+0xac>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <I2Cx_MspInit+0xac>)
 8003a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a58:	6413      	str	r3, [r2, #64]	; 0x40
 8003a5a:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <I2Cx_MspInit+0xac>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a62:	607b      	str	r3, [r7, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
  
  /* Force the I2C peripheral clock reset */  
  EVAL_I2Cx_FORCE_RESET(); 
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <I2Cx_MspInit+0xac>)
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	4a0f      	ldr	r2, [pc, #60]	; (8003aa8 <I2Cx_MspInit+0xac>)
 8003a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a70:	6213      	str	r3, [r2, #32]
  
  /* Release the I2C peripheral clock reset */  
  EVAL_I2Cx_RELEASE_RESET(); 
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <I2Cx_MspInit+0xac>)
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <I2Cx_MspInit+0xac>)
 8003a78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a7c:	6213      	str	r3, [r2, #32]
  
  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(EVAL_I2Cx_EV_IRQn, 0x0F, 0);
 8003a7e:	2200      	movs	r2, #0
 8003a80:	210f      	movs	r1, #15
 8003a82:	201f      	movs	r0, #31
 8003a84:	f000 fcff 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EVAL_I2Cx_EV_IRQn);
 8003a88:	201f      	movs	r0, #31
 8003a8a:	f000 fd18 	bl	80044be <HAL_NVIC_EnableIRQ>
  
  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(EVAL_I2Cx_ER_IRQn, 0x0F, 0);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	210f      	movs	r1, #15
 8003a92:	2020      	movs	r0, #32
 8003a94:	f000 fcf7 	bl	8004486 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EVAL_I2Cx_ER_IRQn);
 8003a98:	2020      	movs	r0, #32
 8003a9a:	f000 fd10 	bl	80044be <HAL_NVIC_EnableIRQ>
}
 8003a9e:	bf00      	nop
 8003aa0:	3720      	adds	r7, #32
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	40020400 	.word	0x40020400

08003ab0 <I2Cx_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval None
  */
static void I2Cx_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&hEvalI2c) == HAL_I2C_STATE_RESET)
 8003ab4:	4812      	ldr	r0, [pc, #72]	; (8003b00 <I2Cx_Init+0x50>)
 8003ab6:	f002 fbdb 	bl	8006270 <HAL_I2C_GetState>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d11c      	bne.n	8003afa <I2Cx_Init+0x4a>
  {
    hEvalI2c.Instance              = EVAL_I2Cx;
 8003ac0:	4b0f      	ldr	r3, [pc, #60]	; (8003b00 <I2Cx_Init+0x50>)
 8003ac2:	4a10      	ldr	r2, [pc, #64]	; (8003b04 <I2Cx_Init+0x54>)
 8003ac4:	601a      	str	r2, [r3, #0]
    hEvalI2c.Init.Timing           = EVAL_I2Cx_TIMING;
 8003ac6:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <I2Cx_Init+0x50>)
 8003ac8:	4a0f      	ldr	r2, [pc, #60]	; (8003b08 <I2Cx_Init+0x58>)
 8003aca:	605a      	str	r2, [r3, #4]
    hEvalI2c.Init.OwnAddress1      = 0;
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <I2Cx_Init+0x50>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]
    hEvalI2c.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <I2Cx_Init+0x50>)
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	60da      	str	r2, [r3, #12]
    hEvalI2c.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <I2Cx_Init+0x50>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	611a      	str	r2, [r3, #16]
    hEvalI2c.Init.OwnAddress2      = 0;
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <I2Cx_Init+0x50>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	615a      	str	r2, [r3, #20]
    hEvalI2c.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <I2Cx_Init+0x50>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	61da      	str	r2, [r3, #28]
    hEvalI2c.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003aea:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <I2Cx_Init+0x50>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit();
 8003af0:	f7ff ff84 	bl	80039fc <I2Cx_MspInit>
    HAL_I2C_Init(&hEvalI2c);    
 8003af4:	4802      	ldr	r0, [pc, #8]	; (8003b00 <I2Cx_Init+0x50>)
 8003af6:	f002 f8b9 	bl	8005c6c <HAL_I2C_Init>
  }
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20006fc8 	.word	0x20006fc8
 8003b04:	40005400 	.word	0x40005400
 8003b08:	40912732 	.word	0x40912732

08003b0c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af04      	add	r7, sp, #16
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	4603      	mov	r3, r0
 8003b16:	73fb      	strb	r3, [r7, #15]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	81bb      	strh	r3, [r7, #12]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Read(&hEvalI2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b24:	7bfb      	ldrb	r3, [r7, #15]
 8003b26:	b299      	uxth	r1, r3
 8003b28:	8978      	ldrh	r0, [r7, #10]
 8003b2a:	89ba      	ldrh	r2, [r7, #12]
 8003b2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b30:	9302      	str	r3, [sp, #8]
 8003b32:	8c3b      	ldrh	r3, [r7, #32]
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	4808      	ldr	r0, [pc, #32]	; (8003b60 <I2Cx_ReadMultiple+0x54>)
 8003b3e:	f002 fa7d 	bl	800603c <HAL_I2C_Mem_Read>
 8003b42:	4603      	mov	r3, r0
 8003b44:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <I2Cx_ReadMultiple+0x48>
  {
    /* I2C error occurred */
    I2Cx_Error(Addr);
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f834 	bl	8003bbc <I2Cx_Error>
  }
  return status;    
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3718      	adds	r7, #24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20006fc8 	.word	0x20006fc8

08003b64 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written 
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af04      	add	r7, sp, #16
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	460b      	mov	r3, r1
 8003b72:	81bb      	strh	r3, [r7, #12]
 8003b74:	4613      	mov	r3, r2
 8003b76:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(&hEvalI2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	b299      	uxth	r1, r3
 8003b80:	8978      	ldrh	r0, [r7, #10]
 8003b82:	89ba      	ldrh	r2, [r7, #12]
 8003b84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b88:	9302      	str	r3, [sp, #8]
 8003b8a:	8c3b      	ldrh	r3, [r7, #32]
 8003b8c:	9301      	str	r3, [sp, #4]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4603      	mov	r3, r0
 8003b94:	4808      	ldr	r0, [pc, #32]	; (8003bb8 <I2Cx_WriteMultiple+0x54>)
 8003b96:	f002 f93d 	bl	8005e14 <HAL_I2C_Mem_Write>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003b9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <I2Cx_WriteMultiple+0x48>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(Addr);
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f808 	bl	8003bbc <I2Cx_Error>
  }
  return status;
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20006fc8 	.word	0x20006fc8

08003bbc <I2Cx_Error>:
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(uint8_t Addr)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&hEvalI2c);
 8003bc6:	4804      	ldr	r0, [pc, #16]	; (8003bd8 <I2Cx_Error+0x1c>)
 8003bc8:	f002 f8e0 	bl	8005d8c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 8003bcc:	f7ff ff70 	bl	8003ab0 <I2Cx_Init>
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	20006fc8 	.word	0x20006fc8

08003bdc <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003be0:	f7ff ff66 	bl	8003ab0 <I2Cx_Init>
}
 8003be4:	bf00      	nop
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af02      	add	r7, sp, #8
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	71fb      	strb	r3, [r7, #7]
 8003c00:	460b      	mov	r3, r1
 8003c02:	80bb      	strh	r3, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003c08:	887b      	ldrh	r3, [r7, #2]
 8003c0a:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003c0c:	89fb      	ldrh	r3, [r7, #14]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003c14:	89fb      	ldrh	r3, [r7, #14]
 8003c16:	021b      	lsls	r3, r3, #8
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	b21a      	sxth	r2, r3
 8003c1c:	887b      	ldrh	r3, [r7, #2]
 8003c1e:	b21b      	sxth	r3, r3
 8003c20:	4313      	orrs	r3, r2
 8003c22:	b21b      	sxth	r3, r3
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003c28:	1cbb      	adds	r3, r7, #2
 8003c2a:	88b9      	ldrh	r1, [r7, #4]
 8003c2c:	79f8      	ldrb	r0, [r7, #7]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	9200      	str	r2, [sp, #0]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f7ff ff96 	bl	8003b64 <I2Cx_WriteMultiple>
}
 8003c38:	bf00      	nop
 8003c3a:	3710      	adds	r7, #16
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	4603      	mov	r3, r0
 8003c48:	460a      	mov	r2, r1
 8003c4a:	71fb      	strb	r3, [r7, #7]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	81bb      	strh	r3, [r7, #12]
 8003c54:	2300      	movs	r3, #0
 8003c56:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2); 
 8003c58:	f107 030c 	add.w	r3, r7, #12
 8003c5c:	88b9      	ldrh	r1, [r7, #4]
 8003c5e:	79f8      	ldrb	r0, [r7, #7]
 8003c60:	2202      	movs	r2, #2
 8003c62:	9200      	str	r2, [sp, #0]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f7ff ff51 	bl	8003b0c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003c6a:	89bb      	ldrh	r3, [r7, #12]
 8003c6c:	0a1b      	lsrs	r3, r3, #8
 8003c6e:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003c70:	89bb      	ldrh	r3, [r7, #12]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	b21a      	sxth	r2, r3
 8003c78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b21b      	sxth	r3, r3
 8003c80:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003c82:	89fb      	ldrh	r3, [r7, #14]
 8003c84:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003c86:	89bb      	ldrh	r3, [r7, #12]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3710      	adds	r7, #16
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f861 	bl	8003d60 <HAL_Delay>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003caa:	2003      	movs	r0, #3
 8003cac:	f000 fbe0 	bl	8004470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f000 f805 	bl	8003cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003cb6:	f7fd fb9f 	bl	80013f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003cc8:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <HAL_InitTick+0x54>)
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	4b12      	ldr	r3, [pc, #72]	; (8003d18 <HAL_InitTick+0x58>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fbfb 	bl	80044da <HAL_SYSTICK_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e00e      	b.n	8003d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b0f      	cmp	r3, #15
 8003cf2:	d80a      	bhi.n	8003d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cfc:	f000 fbc3 	bl	8004486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d00:	4a06      	ldr	r2, [pc, #24]	; (8003d1c <HAL_InitTick+0x5c>)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e000      	b.n	8003d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	20000000 	.word	0x20000000
 8003d18:	2000003c 	.word	0x2000003c
 8003d1c:	20000038 	.word	0x20000038

08003d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_IncTick+0x20>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_IncTick+0x24>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4413      	add	r3, r2
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <HAL_IncTick+0x24>)
 8003d32:	6013      	str	r3, [r2, #0]
}
 8003d34:	bf00      	nop
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	2000003c 	.word	0x2000003c
 8003d44:	2000701c 	.word	0x2000701c

08003d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d4c:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <HAL_GetTick+0x14>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	2000701c 	.word	0x2000701c

08003d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d68:	f7ff ffee 	bl	8003d48 <HAL_GetTick>
 8003d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d78:	d005      	beq.n	8003d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <HAL_Delay+0x44>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d86:	bf00      	nop
 8003d88:	f7ff ffde 	bl	8003d48 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d8f7      	bhi.n	8003d88 <HAL_Delay+0x28>
  {
  }
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	2000003c 	.word	0x2000003c

08003da8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e031      	b.n	8003e22 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fd fb3a 	bl	8001440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d116      	bne.n	8003e14 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dea:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <HAL_ADC_Init+0x84>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	f043 0202 	orr.w	r2, r3, #2
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f970 	bl	80040dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f023 0303 	bic.w	r3, r3, #3
 8003e0a:	f043 0201 	orr.w	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
 8003e12:	e001      	b.n	8003e18 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	ffffeefd 	.word	0xffffeefd

08003e30 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_ADC_ConfigChannel+0x1c>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e136      	b.n	80040ba <HAL_ADC_ConfigChannel+0x28a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b09      	cmp	r3, #9
 8003e5a:	d93a      	bls.n	8003ed2 <HAL_ADC_ConfigChannel+0xa2>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e64:	d035      	beq.n	8003ed2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68d9      	ldr	r1, [r3, #12]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	4613      	mov	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	3b1e      	subs	r3, #30
 8003e7c:	2207      	movs	r2, #7
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	43da      	mvns	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	400a      	ands	r2, r1
 8003e8a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a8d      	ldr	r2, [pc, #564]	; (80040c8 <HAL_ADC_ConfigChannel+0x298>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d10a      	bne.n	8003eac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68d9      	ldr	r1, [r3, #12]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	061a      	lsls	r2, r3, #24
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eaa:	e035      	b.n	8003f18 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68d9      	ldr	r1, [r3, #12]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689a      	ldr	r2, [r3, #8]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4403      	add	r3, r0
 8003ec4:	3b1e      	subs	r3, #30
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ed0:	e022      	b.n	8003f18 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6919      	ldr	r1, [r3, #16]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	4413      	add	r3, r2
 8003ee6:	2207      	movs	r2, #7
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	43da      	mvns	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6919      	ldr	r1, [r3, #16]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	4618      	mov	r0, r3
 8003f08:	4603      	mov	r3, r0
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4403      	add	r3, r0
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b06      	cmp	r3, #6
 8003f1e:	d824      	bhi.n	8003f6a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	4413      	add	r3, r2
 8003f30:	3b05      	subs	r3, #5
 8003f32:	221f      	movs	r2, #31
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43da      	mvns	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	400a      	ands	r2, r1
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	4618      	mov	r0, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	3b05      	subs	r3, #5
 8003f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	635a      	str	r2, [r3, #52]	; 0x34
 8003f68:	e04c      	b.n	8004004 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b0c      	cmp	r3, #12
 8003f70:	d824      	bhi.n	8003fbc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	3b23      	subs	r3, #35	; 0x23
 8003f84:	221f      	movs	r2, #31
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43da      	mvns	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	400a      	ands	r2, r1
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	3b23      	subs	r3, #35	; 0x23
 8003fae:	fa00 f203 	lsl.w	r2, r0, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
 8003fba:	e023      	b.n	8004004 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	3b41      	subs	r3, #65	; 0x41
 8003fce:	221f      	movs	r2, #31
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43da      	mvns	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	400a      	ands	r2, r1
 8003fdc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	4618      	mov	r0, r3
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	3b41      	subs	r3, #65	; 0x41
 8003ff8:	fa00 f203 	lsl.w	r2, r0, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a30      	ldr	r2, [pc, #192]	; (80040cc <HAL_ADC_ConfigChannel+0x29c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10a      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x1f4>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004016:	d105      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004018:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a2c      	ldr	r2, [pc, #176]	; (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800401e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004022:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a28      	ldr	r2, [pc, #160]	; (80040cc <HAL_ADC_ConfigChannel+0x29c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10f      	bne.n	800404e <HAL_ADC_ConfigChannel+0x21e>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b12      	cmp	r3, #18
 8004034:	d10b      	bne.n	800404e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004036:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4a25      	ldr	r2, [pc, #148]	; (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800403c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004040:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004042:	4b23      	ldr	r3, [pc, #140]	; (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800404c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a1e      	ldr	r2, [pc, #120]	; (80040cc <HAL_ADC_ConfigChannel+0x29c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d12b      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x280>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a1a      	ldr	r2, [pc, #104]	; (80040c8 <HAL_ADC_ConfigChannel+0x298>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d003      	beq.n	800406a <HAL_ADC_ConfigChannel+0x23a>
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b11      	cmp	r3, #17
 8004068:	d122      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800406a:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4a18      	ldr	r2, [pc, #96]	; (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004070:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004074:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004076:	4b16      	ldr	r3, [pc, #88]	; (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <HAL_ADC_ConfigChannel+0x2a0>)
 800407c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004080:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a10      	ldr	r2, [pc, #64]	; (80040c8 <HAL_ADC_ConfigChannel+0x298>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d111      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800408c:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a11      	ldr	r2, [pc, #68]	; (80040d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	0c9a      	lsrs	r2, r3, #18
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80040a2:	e002      	b.n	80040aa <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f9      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	10000012 	.word	0x10000012
 80040cc:	40012000 	.word	0x40012000
 80040d0:	40012300 	.word	0x40012300
 80040d4:	20000000 	.word	0x20000000
 80040d8:	431bde83 	.word	0x431bde83

080040dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80040e4:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <ADC_Init+0x1ec>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	4a77      	ldr	r2, [pc, #476]	; (80042c8 <ADC_Init+0x1ec>)
 80040ea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80040ee:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80040f0:	4b75      	ldr	r3, [pc, #468]	; (80042c8 <ADC_Init+0x1ec>)
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	4973      	ldr	r1, [pc, #460]	; (80042c8 <ADC_Init+0x1ec>)
 80040fa:	4313      	orrs	r3, r2
 80040fc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800410c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	021a      	lsls	r2, r3, #8
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004130:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6859      	ldr	r1, [r3, #4]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004152:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6899      	ldr	r1, [r3, #8]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	4a58      	ldr	r2, [pc, #352]	; (80042cc <ADC_Init+0x1f0>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d022      	beq.n	80041b6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800417e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6899      	ldr	r1, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6899      	ldr	r1, [r3, #8]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	e00f      	b.n	80041d6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0202 	bic.w	r2, r2, #2
 80041e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6899      	ldr	r1, [r3, #8]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	005a      	lsls	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01b      	beq.n	800423c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004212:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004222:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6859      	ldr	r1, [r3, #4]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	3b01      	subs	r3, #1
 8004230:	035a      	lsls	r2, r3, #13
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	e007      	b.n	800424c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800424a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800425a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	3b01      	subs	r3, #1
 8004268:	051a      	lsls	r2, r3, #20
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6899      	ldr	r1, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800428e:	025a      	lsls	r2, r3, #9
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6899      	ldr	r1, [r3, #8]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	029a      	lsls	r2, r3, #10
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	40012300 	.word	0x40012300
 80042cc:	0f000001 	.word	0x0f000001

080042d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f003 0307 	and.w	r3, r3, #7
 80042de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042e0:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <__NVIC_SetPriorityGrouping+0x40>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042ec:	4013      	ands	r3, r2
 80042ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <__NVIC_SetPriorityGrouping+0x44>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042fe:	4a04      	ldr	r2, [pc, #16]	; (8004310 <__NVIC_SetPriorityGrouping+0x40>)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	60d3      	str	r3, [r2, #12]
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	e000ed00 	.word	0xe000ed00
 8004314:	05fa0000 	.word	0x05fa0000

08004318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800431c:	4b04      	ldr	r3, [pc, #16]	; (8004330 <__NVIC_GetPriorityGrouping+0x18>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	0a1b      	lsrs	r3, r3, #8
 8004322:	f003 0307 	and.w	r3, r3, #7
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	4603      	mov	r3, r0
 800433c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	2b00      	cmp	r3, #0
 8004344:	db0b      	blt.n	800435e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	4907      	ldr	r1, [pc, #28]	; (800436c <__NVIC_EnableIRQ+0x38>)
 800434e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	2001      	movs	r0, #1
 8004356:	fa00 f202 	lsl.w	r2, r0, r2
 800435a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800435e:	bf00      	nop
 8004360:	370c      	adds	r7, #12
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	e000e100 	.word	0xe000e100

08004370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	4603      	mov	r3, r0
 8004378:	6039      	str	r1, [r7, #0]
 800437a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800437c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004380:	2b00      	cmp	r3, #0
 8004382:	db0a      	blt.n	800439a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	490c      	ldr	r1, [pc, #48]	; (80043bc <__NVIC_SetPriority+0x4c>)
 800438a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800438e:	0112      	lsls	r2, r2, #4
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	440b      	add	r3, r1
 8004394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004398:	e00a      	b.n	80043b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4908      	ldr	r1, [pc, #32]	; (80043c0 <__NVIC_SetPriority+0x50>)
 80043a0:	79fb      	ldrb	r3, [r7, #7]
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	3b04      	subs	r3, #4
 80043a8:	0112      	lsls	r2, r2, #4
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	440b      	add	r3, r1
 80043ae:	761a      	strb	r2, [r3, #24]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	e000e100 	.word	0xe000e100
 80043c0:	e000ed00 	.word	0xe000ed00

080043c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b089      	sub	sp, #36	; 0x24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f1c3 0307 	rsb	r3, r3, #7
 80043de:	2b04      	cmp	r3, #4
 80043e0:	bf28      	it	cs
 80043e2:	2304      	movcs	r3, #4
 80043e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3304      	adds	r3, #4
 80043ea:	2b06      	cmp	r3, #6
 80043ec:	d902      	bls.n	80043f4 <NVIC_EncodePriority+0x30>
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	3b03      	subs	r3, #3
 80043f2:	e000      	b.n	80043f6 <NVIC_EncodePriority+0x32>
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	401a      	ands	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800440c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	fa01 f303 	lsl.w	r3, r1, r3
 8004416:	43d9      	mvns	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800441c:	4313      	orrs	r3, r2
         );
}
 800441e:	4618      	mov	r0, r3
 8004420:	3724      	adds	r7, #36	; 0x24
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3b01      	subs	r3, #1
 8004438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800443c:	d301      	bcc.n	8004442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800443e:	2301      	movs	r3, #1
 8004440:	e00f      	b.n	8004462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004442:	4a0a      	ldr	r2, [pc, #40]	; (800446c <SysTick_Config+0x40>)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	3b01      	subs	r3, #1
 8004448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800444a:	210f      	movs	r1, #15
 800444c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004450:	f7ff ff8e 	bl	8004370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <SysTick_Config+0x40>)
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800445a:	4b04      	ldr	r3, [pc, #16]	; (800446c <SysTick_Config+0x40>)
 800445c:	2207      	movs	r2, #7
 800445e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3708      	adds	r7, #8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	e000e010 	.word	0xe000e010

08004470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f7ff ff29 	bl	80042d0 <__NVIC_SetPriorityGrouping>
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004494:	2300      	movs	r3, #0
 8004496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004498:	f7ff ff3e 	bl	8004318 <__NVIC_GetPriorityGrouping>
 800449c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	68b9      	ldr	r1, [r7, #8]
 80044a2:	6978      	ldr	r0, [r7, #20]
 80044a4:	f7ff ff8e 	bl	80043c4 <NVIC_EncodePriority>
 80044a8:	4602      	mov	r2, r0
 80044aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff ff5d 	bl	8004370 <__NVIC_SetPriority>
}
 80044b6:	bf00      	nop
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	4603      	mov	r3, r0
 80044c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff ff31 	bl	8004334 <__NVIC_EnableIRQ>
}
 80044d2:	bf00      	nop
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff ffa2 	bl	800442c <SysTick_Config>
 80044e8:	4603      	mov	r3, r0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e0ac      	b.n	8004660 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f000 fa20 	bl	8004950 <DFSDM_GetChannelFromInstance>
 8004510:	4603      	mov	r3, r0
 8004512:	4a55      	ldr	r2, [pc, #340]	; (8004668 <HAL_DFSDM_ChannelInit+0x174>)
 8004514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e09f      	b.n	8004660 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7fd f8b5 	bl	8001690 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8004526:	4b51      	ldr	r3, [pc, #324]	; (800466c <HAL_DFSDM_ChannelInit+0x178>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3301      	adds	r3, #1
 800452c:	4a4f      	ldr	r2, [pc, #316]	; (800466c <HAL_DFSDM_ChannelInit+0x178>)
 800452e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8004530:	4b4e      	ldr	r3, [pc, #312]	; (800466c <HAL_DFSDM_ChannelInit+0x178>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d125      	bne.n	8004584 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004538:	4b4d      	ldr	r3, [pc, #308]	; (8004670 <HAL_DFSDM_ChannelInit+0x17c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a4c      	ldr	r2, [pc, #304]	; (8004670 <HAL_DFSDM_ChannelInit+0x17c>)
 800453e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004542:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8004544:	4b4a      	ldr	r3, [pc, #296]	; (8004670 <HAL_DFSDM_ChannelInit+0x17c>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4948      	ldr	r1, [pc, #288]	; (8004670 <HAL_DFSDM_ChannelInit+0x17c>)
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8004552:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_DFSDM_ChannelInit+0x17c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a46      	ldr	r2, [pc, #280]	; (8004670 <HAL_DFSDM_ChannelInit+0x17c>)
 8004558:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800455c:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	791b      	ldrb	r3, [r3, #4]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d108      	bne.n	8004578 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8004566:	4b42      	ldr	r3, [pc, #264]	; (8004670 <HAL_DFSDM_ChannelInit+0x17c>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	3b01      	subs	r3, #1
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	493f      	ldr	r1, [pc, #252]	; (8004670 <HAL_DFSDM_ChannelInit+0x17c>)
 8004574:	4313      	orrs	r3, r2
 8004576:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004578:	4b3d      	ldr	r3, [pc, #244]	; (8004670 <HAL_DFSDM_ChannelInit+0x17c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a3c      	ldr	r2, [pc, #240]	; (8004670 <HAL_DFSDM_ChannelInit+0x17c>)
 800457e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004582:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8004592:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80045a2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80045a8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 020f 	bic.w	r2, r2, #15
 80045c0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6819      	ldr	r1, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689a      	ldr	r2, [r3, #8]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80045e8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6899      	ldr	r1, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f8:	3b01      	subs	r3, #1
 80045fa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f002 0207 	and.w	r2, r2, #7
 8004614:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004640:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f000 f97e 	bl	8004950 <DFSDM_GetChannelFromInstance>
 8004654:	4602      	mov	r2, r0
 8004656:	4904      	ldr	r1, [pc, #16]	; (8004668 <HAL_DFSDM_ChannelInit+0x174>)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20007024 	.word	0x20007024
 800466c:	20007020 	.word	0x20007020
 8004670:	40017400 	.word	0x40017400

08004674 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e0c6      	b.n	8004814 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a64      	ldr	r2, [pc, #400]	; (800481c <HAL_DFSDM_FilterInit+0x1a8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d109      	bne.n	80046a4 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004694:	2b01      	cmp	r3, #1
 8004696:	d003      	beq.n	80046a0 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0b7      	b.n	8004814 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7fc feff 	bl	80014c0 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80046d0:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	7a1b      	ldrb	r3, [r3, #8]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d108      	bne.n	80046ec <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e007      	b.n	80046fc <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80046fa:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	7a5b      	ldrb	r3, [r3, #9]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d108      	bne.n	8004716 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e007      	b.n	8004726 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8004724:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6819      	ldr	r1, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b3b      	ldr	r3, [pc, #236]	; (8004820 <HAL_DFSDM_FilterInit+0x1ac>)
 8004732:	400b      	ands	r3, r1
 8004734:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d108      	bne.n	8004750 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	430a      	orrs	r2, r1
 800474e:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7c1b      	ldrb	r3, [r3, #16]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d108      	bne.n	800476a <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0210 	orr.w	r2, r2, #16
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	e007      	b.n	800477a <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0210 	bic.w	r2, r2, #16
 8004778:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	7c5b      	ldrb	r3, [r3, #17]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d108      	bne.n	8004794 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0220 	orr.w	r2, r2, #32
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e007      	b.n	80047a4 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0220 	bic.w	r2, r2, #32
 80047a2:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6959      	ldr	r1, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_DFSDM_FilterInit+0x1b0>)
 80047b0:	400b      	ands	r3, r1
 80047b2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	6959      	ldr	r1, [r3, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80047c6:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80047ce:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68da      	ldr	r2, [r3, #12]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699a      	ldr	r2, [r3, #24]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	7c1a      	ldrb	r2, [r3, #16]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f042 0201 	orr.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40017500 	.word	0x40017500
 8004820:	ffff80f7 	.word	0xffff80f7
 8004824:	1c00ff00 	.word	0x1c00ff00

08004828 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02c      	beq.n	800489c <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004848:	2bff      	cmp	r3, #255	; 0xff
 800484a:	d027      	beq.n	800489c <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8004858:	400b      	ands	r3, r1
 800485a:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d10d      	bne.n	800487e <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	021b      	lsls	r3, r3, #8
 800486c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004870:	431a      	orrs	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e00a      	b.n	8004894 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6819      	ldr	r1, [r3, #0]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	021b      	lsls	r3, r3, #8
 8004888:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	631a      	str	r2, [r3, #48]	; 0x30
 800489a:	e001      	b.n	80048a0 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	f8fbffff 	.word	0xf8fbffff

080048b4 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01b      	beq.n	8004904 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80048d2:	2bff      	cmp	r3, #255	; 0xff
 80048d4:	d016      	beq.n	8004904 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	b292      	uxth	r2, r2
 80048de:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 80048e0:	6838      	ldr	r0, [r7, #0]
 80048e2:	f000 f816 	bl	8004912 <DFSDM_GetInjChannelsNbr>
 80048e6:	4602      	mov	r2, r0
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d102      	bne.n	80048fc <HAL_DFSDM_FilterConfigInjChannel+0x48>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	e000      	b.n	80048fe <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 80048fc:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6493      	str	r3, [r2, #72]	; 0x48
 8004902:	e001      	b.n	8004908 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004908:	7bfb      	ldrb	r3, [r7, #15]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	b29b      	uxth	r3, r3
 8004922:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8004924:	e00a      	b.n	800493c <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3301      	adds	r3, #1
 8004934:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f1      	bne.n	8004926 <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 8004942:	68fb      	ldr	r3, [r7, #12]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <DFSDM_GetChannelFromInstance+0x7c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d102      	bne.n	8004966 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]
 8004964:	e02b      	b.n	80049be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a19      	ldr	r2, [pc, #100]	; (80049d0 <DFSDM_GetChannelFromInstance+0x80>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d102      	bne.n	8004974 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800496e:	2301      	movs	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	e024      	b.n	80049be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <DFSDM_GetChannelFromInstance+0x84>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d102      	bne.n	8004982 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800497c:	2302      	movs	r3, #2
 800497e:	60fb      	str	r3, [r7, #12]
 8004980:	e01d      	b.n	80049be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a14      	ldr	r2, [pc, #80]	; (80049d8 <DFSDM_GetChannelFromInstance+0x88>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d102      	bne.n	8004990 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 800498a:	2303      	movs	r3, #3
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	e016      	b.n	80049be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a12      	ldr	r2, [pc, #72]	; (80049dc <DFSDM_GetChannelFromInstance+0x8c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d102      	bne.n	800499e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8004998:	2304      	movs	r3, #4
 800499a:	60fb      	str	r3, [r7, #12]
 800499c:	e00f      	b.n	80049be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a0f      	ldr	r2, [pc, #60]	; (80049e0 <DFSDM_GetChannelFromInstance+0x90>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d102      	bne.n	80049ac <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80049a6:	2305      	movs	r3, #5
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	e008      	b.n	80049be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a0d      	ldr	r2, [pc, #52]	; (80049e4 <DFSDM_GetChannelFromInstance+0x94>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d102      	bne.n	80049ba <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80049b4:	2306      	movs	r3, #6
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	e001      	b.n	80049be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80049ba:	2307      	movs	r3, #7
 80049bc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80049be:	68fb      	ldr	r3, [r7, #12]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40017400 	.word	0x40017400
 80049d0:	40017420 	.word	0x40017420
 80049d4:	40017440 	.word	0x40017440
 80049d8:	40017460 	.word	0x40017460
 80049dc:	40017480 	.word	0x40017480
 80049e0:	400174a0 	.word	0x400174a0
 80049e4:	400174c0 	.word	0x400174c0

080049e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049f4:	f7ff f9a8 	bl	8003d48 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e099      	b.n	8004b38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 0201 	bic.w	r2, r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a24:	e00f      	b.n	8004a46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a26:	f7ff f98f 	bl	8003d48 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d908      	bls.n	8004a46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2203      	movs	r2, #3
 8004a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e078      	b.n	8004b38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e8      	bne.n	8004a26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4b38      	ldr	r3, [pc, #224]	; (8004b40 <HAL_DMA_Init+0x158>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d107      	bne.n	8004ab0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	f023 0307 	bic.w	r3, r3, #7
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	d117      	bne.n	8004b0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00e      	beq.n	8004b0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 faa5 	bl	800503c <DMA_CheckFifoParam>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2240      	movs	r2, #64	; 0x40
 8004afc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b06:	2301      	movs	r3, #1
 8004b08:	e016      	b.n	8004b38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fa5c 	bl	8004fd0 <DMA_CalcBaseAndBitshift>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b20:	223f      	movs	r2, #63	; 0x3f
 8004b22:	409a      	lsls	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	e010803f 	.word	0xe010803f

08004b44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_DMA_Start_IT+0x26>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e048      	b.n	8004bfc <HAL_DMA_Start_IT+0xb8>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d137      	bne.n	8004bee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 f9ee 	bl	8004f74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b9c:	223f      	movs	r2, #63	; 0x3f
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0216 	orr.w	r2, r2, #22
 8004bb2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bc2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d007      	beq.n	8004bdc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0208 	orr.w	r2, r2, #8
 8004bda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]
 8004bec:	e005      	b.n	8004bfa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d004      	beq.n	8004c22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2280      	movs	r2, #128	; 0x80
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e00c      	b.n	8004c3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2205      	movs	r2, #5
 8004c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 0201 	bic.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004c54:	4b8e      	ldr	r3, [pc, #568]	; (8004e90 <HAL_DMA_IRQHandler+0x248>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a8e      	ldr	r2, [pc, #568]	; (8004e94 <HAL_DMA_IRQHandler+0x24c>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	0a9b      	lsrs	r3, r3, #10
 8004c60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c72:	2208      	movs	r2, #8
 8004c74:	409a      	lsls	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d01a      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0304 	and.w	r3, r3, #4
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d013      	beq.n	8004cb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0204 	bic.w	r2, r2, #4
 8004c9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cac:	f043 0201 	orr.w	r2, r3, #1
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb8:	2201      	movs	r2, #1
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d012      	beq.n	8004cea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00b      	beq.n	8004cea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	f043 0202 	orr.w	r2, r3, #2
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cee:	2204      	movs	r2, #4
 8004cf0:	409a      	lsls	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d012      	beq.n	8004d20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00b      	beq.n	8004d20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	409a      	lsls	r2, r3
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d18:	f043 0204 	orr.w	r2, r3, #4
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d24:	2210      	movs	r2, #16
 8004d26:	409a      	lsls	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d043      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d03c      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d42:	2210      	movs	r2, #16
 8004d44:	409a      	lsls	r2, r3
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d018      	beq.n	8004d8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d108      	bne.n	8004d78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d024      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	4798      	blx	r3
 8004d76:	e01f      	b.n	8004db8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01b      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4798      	blx	r3
 8004d88:	e016      	b.n	8004db8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d107      	bne.n	8004da8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0208 	bic.w	r2, r2, #8
 8004da6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 808f 	beq.w	8004ee8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 8087 	beq.w	8004ee8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dde:	2220      	movs	r2, #32
 8004de0:	409a      	lsls	r2, r3
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d136      	bne.n	8004e60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0216 	bic.w	r2, r2, #22
 8004e00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <HAL_DMA_IRQHandler+0x1da>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0208 	bic.w	r2, r2, #8
 8004e30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e36:	223f      	movs	r2, #63	; 0x3f
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d07e      	beq.n	8004f54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	4798      	blx	r3
        }
        return;
 8004e5e:	e079      	b.n	8004f54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d01d      	beq.n	8004eaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10d      	bne.n	8004e98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d031      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	4798      	blx	r3
 8004e8c:	e02c      	b.n	8004ee8 <HAL_DMA_IRQHandler+0x2a0>
 8004e8e:	bf00      	nop
 8004e90:	20000000 	.word	0x20000000
 8004e94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d023      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4798      	blx	r3
 8004ea8:	e01e      	b.n	8004ee8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10f      	bne.n	8004ed8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0210 	bic.w	r2, r2, #16
 8004ec6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d032      	beq.n	8004f56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d022      	beq.n	8004f42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2205      	movs	r2, #5
 8004f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	3301      	adds	r3, #1
 8004f18:	60bb      	str	r3, [r7, #8]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d307      	bcc.n	8004f30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f2      	bne.n	8004f14 <HAL_DMA_IRQHandler+0x2cc>
 8004f2e:	e000      	b.n	8004f32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	4798      	blx	r3
 8004f52:	e000      	b.n	8004f56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f54:	bf00      	nop
    }
  }
}
 8004f56:	3718      	adds	r7, #24
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d108      	bne.n	8004fb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004fb2:	e007      	b.n	8004fc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	60da      	str	r2, [r3, #12]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	3b10      	subs	r3, #16
 8004fe0:	4a13      	ldr	r2, [pc, #76]	; (8005030 <DMA_CalcBaseAndBitshift+0x60>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fea:	4a12      	ldr	r2, [pc, #72]	; (8005034 <DMA_CalcBaseAndBitshift+0x64>)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2b03      	cmp	r3, #3
 8004ffc:	d908      	bls.n	8005010 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <DMA_CalcBaseAndBitshift+0x68>)
 8005006:	4013      	ands	r3, r2
 8005008:	1d1a      	adds	r2, r3, #4
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	659a      	str	r2, [r3, #88]	; 0x58
 800500e:	e006      	b.n	800501e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	4b08      	ldr	r3, [pc, #32]	; (8005038 <DMA_CalcBaseAndBitshift+0x68>)
 8005018:	4013      	ands	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	aaaaaaab 	.word	0xaaaaaaab
 8005034:	0800bfd0 	.word	0x0800bfd0
 8005038:	fffffc00 	.word	0xfffffc00

0800503c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d11f      	bne.n	8005096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d856      	bhi.n	800510a <DMA_CheckFifoParam+0xce>
 800505c:	a201      	add	r2, pc, #4	; (adr r2, 8005064 <DMA_CheckFifoParam+0x28>)
 800505e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005062:	bf00      	nop
 8005064:	08005075 	.word	0x08005075
 8005068:	08005087 	.word	0x08005087
 800506c:	08005075 	.word	0x08005075
 8005070:	0800510b 	.word	0x0800510b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d046      	beq.n	800510e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005084:	e043      	b.n	800510e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800508e:	d140      	bne.n	8005112 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005094:	e03d      	b.n	8005112 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800509e:	d121      	bne.n	80050e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b03      	cmp	r3, #3
 80050a4:	d837      	bhi.n	8005116 <DMA_CheckFifoParam+0xda>
 80050a6:	a201      	add	r2, pc, #4	; (adr r2, 80050ac <DMA_CheckFifoParam+0x70>)
 80050a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ac:	080050bd 	.word	0x080050bd
 80050b0:	080050c3 	.word	0x080050c3
 80050b4:	080050bd 	.word	0x080050bd
 80050b8:	080050d5 	.word	0x080050d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	73fb      	strb	r3, [r7, #15]
      break;
 80050c0:	e030      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d025      	beq.n	800511a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d2:	e022      	b.n	800511a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050dc:	d11f      	bne.n	800511e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050e2:	e01c      	b.n	800511e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d903      	bls.n	80050f2 <DMA_CheckFifoParam+0xb6>
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	2b03      	cmp	r3, #3
 80050ee:	d003      	beq.n	80050f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050f0:	e018      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	73fb      	strb	r3, [r7, #15]
      break;
 80050f6:	e015      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00e      	beq.n	8005122 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
      break;
 8005108:	e00b      	b.n	8005122 <DMA_CheckFifoParam+0xe6>
      break;
 800510a:	bf00      	nop
 800510c:	e00a      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;
 800510e:	bf00      	nop
 8005110:	e008      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;
 8005112:	bf00      	nop
 8005114:	e006      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;
 8005116:	bf00      	nop
 8005118:	e004      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;
 800511a:	bf00      	nop
 800511c:	e002      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;   
 800511e:	bf00      	nop
 8005120:	e000      	b.n	8005124 <DMA_CheckFifoParam+0xe8>
      break;
 8005122:	bf00      	nop
    }
  } 
  
  return status; 
 8005124:	7bfb      	ldrb	r3, [r7, #15]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop

08005134 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e109      	b.n	800535c <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	7c5b      	ldrb	r3, [r3, #17]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d102      	bne.n	8005158 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fc fafe 	bl	8001754 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2203      	movs	r2, #3
 800515c:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800515e:	2300      	movs	r3, #0
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005172:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800517e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005186:	f7fe fddf 	bl	8003d48 <HAL_GetTick>
 800518a:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800518c:	e009      	b.n	80051a2 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800518e:	f7fe fddb 	bl	8003d48 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800519c:	d901      	bls.n	80051a2 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e0dc      	b.n	800535c <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80051aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ed      	beq.n	800518e <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b69      	ldr	r3, [pc, #420]	; (8005364 <HAL_DSI_Init+0x230>)
 80051c0:	400b      	ands	r3, r1
 80051c2:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80051da:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80051e2:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8005216:	2001      	movs	r0, #1
 8005218:	f7fe fda2 	bl	8003d60 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800521c:	f7fe fd94 	bl	8003d48 <HAL_GetTick>
 8005220:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005222:	e009      	b.n	8005238 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005224:	f7fe fd90 	bl	8003d48 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005232:	d901      	bls.n	8005238 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e091      	b.n	800535c <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0ed      	beq.n	8005224 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f042 0206 	orr.w	r2, r2, #6
 8005258:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0203 	bic.w	r2, r2, #3
 800526c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	431a      	orrs	r2, r3
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0203 	bic.w	r2, r2, #3
 800529a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68da      	ldr	r2, [r3, #12]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052c2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	6899      	ldr	r1, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d002      	beq.n	80052e4 <HAL_DSI_Init+0x1b0>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	e000      	b.n	80052e6 <HAL_DSI_Init+0x1b2>
 80052e4:	2301      	movs	r3, #1
 80052e6:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	4a1f      	ldr	r2, [pc, #124]	; (8005368 <HAL_DSI_Init+0x234>)
 80052ec:	fb03 f202 	mul.w	r2, r3, r2
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	409a      	lsls	r2, r3
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8005302:	fb01 f303 	mul.w	r3, r1, r3
 8005306:	fbb2 f3f3 	udiv	r3, r2, r3
 800530a:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800531c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	430a      	orrs	r2, r1
 8005330:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2200      	movs	r2, #0
 800533a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	fffc8603 	.word	0xfffc8603
 8005368:	003d0900 	.word	0x003d0900

0800536c <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	7c1b      	ldrb	r3, [r3, #16]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d101      	bne.n	8005382 <HAL_DSI_ConfigErrorMonitor+0x16>
 800537e:	2302      	movs	r3, #2
 8005380:	e0aa      	b.n	80054d8 <HAL_DSI_ConfigErrorMonitor+0x16c>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2201      	movs	r2, #1
 8005386:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2200      	movs	r2, #0
 800538e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00a      	beq.n	80053c2 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80053bc:	430b      	orrs	r3, r1
 80053be:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d009      	beq.n	80053e0 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80053dc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d009      	beq.n	800541c <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0202 	orr.w	r2, r2, #2
 8005418:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	f003 0310 	and.w	r3, r3, #16
 8005422:	2b00      	cmp	r3, #0
 8005424:	d009      	beq.n	800543a <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 020c 	orr.w	r2, r2, #12
 8005436:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d009      	beq.n	8005458 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0210 	orr.w	r2, r2, #16
 8005454:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545e:	2b00      	cmp	r3, #0
 8005460:	d009      	beq.n	8005476 <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0220 	orr.w	r2, r2, #32
 8005472:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005490:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80054ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d009      	beq.n	80054d0 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80054cc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	7c1b      	ldrb	r3, [r3, #16]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_DSI_ConfigCommand+0x16>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e049      	b.n	800558e <HAL_DSI_ConfigCommand+0xaa>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b24      	ldr	r3, [pc, #144]	; (800559c <HAL_DSI_ConfigCommand+0xb8>)
 800550c:	400b      	ands	r3, r1
 800550e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800551e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8005524:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800552a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8005530:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8005536:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800553c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8005542:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8005548:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800554e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8005554:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800555a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0202 	bic.w	r2, r2, #2
 8005572:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	fef080ff 	.word	0xfef080ff

080055a0 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	7c1b      	ldrb	r3, [r3, #16]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_DSI_ConfigFlowControl+0x16>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e016      	b.n	80055e4 <HAL_DSI_ConfigFlowControl+0x44>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 021f 	bic.w	r2, r2, #31
 80055ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7c1b      	ldrb	r3, [r3, #16]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d101      	bne.n	8005606 <HAL_DSI_ConfigPhyTimer+0x16>
 8005602:	2302      	movs	r3, #2
 8005604:	e058      	b.n	80056b8 <HAL_DSI_ConfigPhyTimer+0xc8>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	4293      	cmp	r3, r2
 8005616:	bf38      	it	cc
 8005618:	4613      	movcc	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800562c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	041a      	lsls	r2, r3, #16
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800565a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	041b      	lsls	r3, r3, #16
 8005670:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005694:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	021a      	lsls	r2, r3, #8
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	7c1b      	ldrb	r3, [r3, #16]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_DSI_ConfigHostTimeouts+0x16>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e0b4      	b.n	8005844 <HAL_DSI_ConfigHostTimeouts+0x180>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80056ee:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6899      	ldr	r1, [r3, #8]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	021a      	lsls	r2, r3, #8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	b292      	uxth	r2, r2
 8005710:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	041a      	lsls	r2, r3, #16
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	4b47      	ldr	r3, [pc, #284]	; (8005850 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005732:	400b      	ands	r3, r1
 8005734:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6f99      	ldr	r1, [r3, #120]	; 0x78
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b3f      	ldr	r3, [pc, #252]	; (8005850 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005754:	400b      	ands	r3, r1
 8005756:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	4b36      	ldr	r3, [pc, #216]	; (8005850 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005778:	400b      	ands	r3, r1
 800577a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	691a      	ldr	r2, [r3, #16]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	430a      	orrs	r2, r1
 8005790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	4b2b      	ldr	r3, [pc, #172]	; (8005850 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80057a2:	400b      	ands	r3, r1
 80057a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695a      	ldr	r2, [r3, #20]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80057ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b16      	ldr	r3, [pc, #88]	; (8005850 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80057f6:	400b      	ands	r3, r1
 80057f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005820:	400b      	ands	r3, r1
 8005822:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6a1a      	ldr	r2, [r3, #32]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	430a      	orrs	r2, r1
 8005838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	ffff0000 	.word	0xffff0000

08005854 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	7c1b      	ldrb	r3, [r3, #16]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_DSI_SetLowPowerRXFilter+0x16>
 8005866:	2302      	movs	r3, #2
 8005868:	e01b      	b.n	80058a2 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2201      	movs	r2, #1
 800586e:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8005880:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	065a      	lsls	r2, r3, #25
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
	...

080058b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b089      	sub	sp, #36	; 0x24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80058be:	2300      	movs	r3, #0
 80058c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80058c2:	2300      	movs	r3, #0
 80058c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
 80058ce:	e175      	b.n	8005bbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80058d0:	2201      	movs	r2, #1
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	4013      	ands	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	f040 8164 	bne.w	8005bb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d005      	beq.n	8005906 <HAL_GPIO_Init+0x56>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d130      	bne.n	8005968 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	2203      	movs	r2, #3
 8005912:	fa02 f303 	lsl.w	r3, r2, r3
 8005916:	43db      	mvns	r3, r3
 8005918:	69ba      	ldr	r2, [r7, #24]
 800591a:	4013      	ands	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	fa02 f303 	lsl.w	r3, r2, r3
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800593c:	2201      	movs	r2, #1
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	fa02 f303 	lsl.w	r3, r2, r3
 8005944:	43db      	mvns	r3, r3
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4013      	ands	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	091b      	lsrs	r3, r3, #4
 8005952:	f003 0201 	and.w	r2, r3, #1
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	fa02 f303 	lsl.w	r3, r2, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4313      	orrs	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69ba      	ldr	r2, [r7, #24]
 8005966:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f003 0303 	and.w	r3, r3, #3
 8005970:	2b03      	cmp	r3, #3
 8005972:	d017      	beq.n	80059a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	2203      	movs	r2, #3
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	43db      	mvns	r3, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4013      	ands	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	689a      	ldr	r2, [r3, #8]
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	4313      	orrs	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d123      	bne.n	80059f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	08da      	lsrs	r2, r3, #3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3208      	adds	r2, #8
 80059b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f003 0307 	and.w	r3, r3, #7
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	220f      	movs	r2, #15
 80059c8:	fa02 f303 	lsl.w	r3, r2, r3
 80059cc:	43db      	mvns	r3, r3
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4013      	ands	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	69ba      	ldr	r2, [r7, #24]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	08da      	lsrs	r2, r3, #3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3208      	adds	r2, #8
 80059f2:	69b9      	ldr	r1, [r7, #24]
 80059f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	2203      	movs	r2, #3
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f003 0203 	and.w	r2, r3, #3
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80be 	beq.w	8005bb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a3a:	4b66      	ldr	r3, [pc, #408]	; (8005bd4 <HAL_GPIO_Init+0x324>)
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	4a65      	ldr	r2, [pc, #404]	; (8005bd4 <HAL_GPIO_Init+0x324>)
 8005a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a44:	6453      	str	r3, [r2, #68]	; 0x44
 8005a46:	4b63      	ldr	r3, [pc, #396]	; (8005bd4 <HAL_GPIO_Init+0x324>)
 8005a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a52:	4a61      	ldr	r2, [pc, #388]	; (8005bd8 <HAL_GPIO_Init+0x328>)
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	089b      	lsrs	r3, r3, #2
 8005a58:	3302      	adds	r3, #2
 8005a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	220f      	movs	r2, #15
 8005a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6e:	43db      	mvns	r3, r3
 8005a70:	69ba      	ldr	r2, [r7, #24]
 8005a72:	4013      	ands	r3, r2
 8005a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a58      	ldr	r2, [pc, #352]	; (8005bdc <HAL_GPIO_Init+0x32c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d037      	beq.n	8005aee <HAL_GPIO_Init+0x23e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a57      	ldr	r2, [pc, #348]	; (8005be0 <HAL_GPIO_Init+0x330>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d031      	beq.n	8005aea <HAL_GPIO_Init+0x23a>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a56      	ldr	r2, [pc, #344]	; (8005be4 <HAL_GPIO_Init+0x334>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d02b      	beq.n	8005ae6 <HAL_GPIO_Init+0x236>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a55      	ldr	r2, [pc, #340]	; (8005be8 <HAL_GPIO_Init+0x338>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d025      	beq.n	8005ae2 <HAL_GPIO_Init+0x232>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a54      	ldr	r2, [pc, #336]	; (8005bec <HAL_GPIO_Init+0x33c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d01f      	beq.n	8005ade <HAL_GPIO_Init+0x22e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a53      	ldr	r2, [pc, #332]	; (8005bf0 <HAL_GPIO_Init+0x340>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d019      	beq.n	8005ada <HAL_GPIO_Init+0x22a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a52      	ldr	r2, [pc, #328]	; (8005bf4 <HAL_GPIO_Init+0x344>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d013      	beq.n	8005ad6 <HAL_GPIO_Init+0x226>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a51      	ldr	r2, [pc, #324]	; (8005bf8 <HAL_GPIO_Init+0x348>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00d      	beq.n	8005ad2 <HAL_GPIO_Init+0x222>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a50      	ldr	r2, [pc, #320]	; (8005bfc <HAL_GPIO_Init+0x34c>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d007      	beq.n	8005ace <HAL_GPIO_Init+0x21e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a4f      	ldr	r2, [pc, #316]	; (8005c00 <HAL_GPIO_Init+0x350>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d101      	bne.n	8005aca <HAL_GPIO_Init+0x21a>
 8005ac6:	2309      	movs	r3, #9
 8005ac8:	e012      	b.n	8005af0 <HAL_GPIO_Init+0x240>
 8005aca:	230a      	movs	r3, #10
 8005acc:	e010      	b.n	8005af0 <HAL_GPIO_Init+0x240>
 8005ace:	2308      	movs	r3, #8
 8005ad0:	e00e      	b.n	8005af0 <HAL_GPIO_Init+0x240>
 8005ad2:	2307      	movs	r3, #7
 8005ad4:	e00c      	b.n	8005af0 <HAL_GPIO_Init+0x240>
 8005ad6:	2306      	movs	r3, #6
 8005ad8:	e00a      	b.n	8005af0 <HAL_GPIO_Init+0x240>
 8005ada:	2305      	movs	r3, #5
 8005adc:	e008      	b.n	8005af0 <HAL_GPIO_Init+0x240>
 8005ade:	2304      	movs	r3, #4
 8005ae0:	e006      	b.n	8005af0 <HAL_GPIO_Init+0x240>
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e004      	b.n	8005af0 <HAL_GPIO_Init+0x240>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e002      	b.n	8005af0 <HAL_GPIO_Init+0x240>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e000      	b.n	8005af0 <HAL_GPIO_Init+0x240>
 8005aee:	2300      	movs	r3, #0
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	f002 0203 	and.w	r2, r2, #3
 8005af6:	0092      	lsls	r2, r2, #2
 8005af8:	4093      	lsls	r3, r2
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005b00:	4935      	ldr	r1, [pc, #212]	; (8005bd8 <HAL_GPIO_Init+0x328>)
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	089b      	lsrs	r3, r3, #2
 8005b06:	3302      	adds	r3, #2
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005b0e:	4b3d      	ldr	r3, [pc, #244]	; (8005c04 <HAL_GPIO_Init+0x354>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	43db      	mvns	r3, r3
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005b2a:	69ba      	ldr	r2, [r7, #24]
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b32:	4a34      	ldr	r2, [pc, #208]	; (8005c04 <HAL_GPIO_Init+0x354>)
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b38:	4b32      	ldr	r3, [pc, #200]	; (8005c04 <HAL_GPIO_Init+0x354>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	43db      	mvns	r3, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4013      	ands	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b5c:	4a29      	ldr	r2, [pc, #164]	; (8005c04 <HAL_GPIO_Init+0x354>)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b62:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <HAL_GPIO_Init+0x354>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	69ba      	ldr	r2, [r7, #24]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b86:	4a1f      	ldr	r2, [pc, #124]	; (8005c04 <HAL_GPIO_Init+0x354>)
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b8c:	4b1d      	ldr	r3, [pc, #116]	; (8005c04 <HAL_GPIO_Init+0x354>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005bb0:	4a14      	ldr	r2, [pc, #80]	; (8005c04 <HAL_GPIO_Init+0x354>)
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	61fb      	str	r3, [r7, #28]
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2b0f      	cmp	r3, #15
 8005bc0:	f67f ae86 	bls.w	80058d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	3724      	adds	r7, #36	; 0x24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	40023800 	.word	0x40023800
 8005bd8:	40013800 	.word	0x40013800
 8005bdc:	40020000 	.word	0x40020000
 8005be0:	40020400 	.word	0x40020400
 8005be4:	40020800 	.word	0x40020800
 8005be8:	40020c00 	.word	0x40020c00
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	40021400 	.word	0x40021400
 8005bf4:	40021800 	.word	0x40021800
 8005bf8:	40021c00 	.word	0x40021c00
 8005bfc:	40022000 	.word	0x40022000
 8005c00:	40022400 	.word	0x40022400
 8005c04:	40013c00 	.word	0x40013c00

08005c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	887b      	ldrh	r3, [r7, #2]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005c20:	2301      	movs	r3, #1
 8005c22:	73fb      	strb	r3, [r7, #15]
 8005c24:	e001      	b.n	8005c2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	807b      	strh	r3, [r7, #2]
 8005c44:	4613      	mov	r3, r2
 8005c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c48:	787b      	ldrb	r3, [r7, #1]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c4e:	887a      	ldrh	r2, [r7, #2]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c54:	e003      	b.n	8005c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c56:	887b      	ldrh	r3, [r7, #2]
 8005c58:	041a      	lsls	r2, r3, #16
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	619a      	str	r2, [r3, #24]
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
	...

08005c6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e07f      	b.n	8005d7e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d106      	bne.n	8005c98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f8a9 	bl	8005dea <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2224      	movs	r2, #36	; 0x24
 8005c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0201 	bic.w	r2, r2, #1
 8005cae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cbc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ccc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d107      	bne.n	8005ce6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689a      	ldr	r2, [r3, #8]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ce2:	609a      	str	r2, [r3, #8]
 8005ce4:	e006      	b.n	8005cf4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005cf2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d104      	bne.n	8005d06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6859      	ldr	r1, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b1d      	ldr	r3, [pc, #116]	; (8005d88 <HAL_I2C_Init+0x11c>)
 8005d12:	430b      	orrs	r3, r1
 8005d14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691a      	ldr	r2, [r3, #16]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	69d9      	ldr	r1, [r3, #28]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1a      	ldr	r2, [r3, #32]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0201 	orr.w	r2, r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	02008000 	.word	0x02008000

08005d8c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e021      	b.n	8005de2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2224      	movs	r2, #36	; 0x24
 8005da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f821 	bl	8005dfe <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005df2:	bf00      	nop
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005e06:	bf00      	nop
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
	...

08005e14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af02      	add	r7, sp, #8
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	4608      	mov	r0, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	461a      	mov	r2, r3
 8005e22:	4603      	mov	r3, r0
 8005e24:	817b      	strh	r3, [r7, #10]
 8005e26:	460b      	mov	r3, r1
 8005e28:	813b      	strh	r3, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	f040 80f9 	bne.w	800602e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d002      	beq.n	8005e48 <HAL_I2C_Mem_Write+0x34>
 8005e42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d105      	bne.n	8005e54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e0ed      	b.n	8006030 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_I2C_Mem_Write+0x4e>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e0e6      	b.n	8006030 <HAL_I2C_Mem_Write+0x21c>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e6a:	f7fd ff6d 	bl	8003d48 <HAL_GetTick>
 8005e6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	2319      	movs	r3, #25
 8005e76:	2201      	movs	r2, #1
 8005e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fad1 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e0d1      	b.n	8006030 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2221      	movs	r2, #33	; 0x21
 8005e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2240      	movs	r2, #64	; 0x40
 8005e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a3a      	ldr	r2, [r7, #32]
 8005ea6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005eb4:	88f8      	ldrh	r0, [r7, #6]
 8005eb6:	893a      	ldrh	r2, [r7, #8]
 8005eb8:	8979      	ldrh	r1, [r7, #10]
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	9301      	str	r3, [sp, #4]
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f000 f9e1 	bl	800628c <I2C_RequestMemoryWrite>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d005      	beq.n	8005edc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e0a9      	b.n	8006030 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2bff      	cmp	r3, #255	; 0xff
 8005ee4:	d90e      	bls.n	8005f04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	22ff      	movs	r2, #255	; 0xff
 8005eea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	8979      	ldrh	r1, [r7, #10]
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fc2d 	bl	800675c <I2C_TransferConfig>
 8005f02:	e00f      	b.n	8005f24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	8979      	ldrh	r1, [r7, #10]
 8005f16:	2300      	movs	r3, #0
 8005f18:	9300      	str	r3, [sp, #0]
 8005f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 fc1c 	bl	800675c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 fabb 	bl	80064a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e07b      	b.n	8006030 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	781a      	ldrb	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	1c5a      	adds	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d034      	beq.n	8005fdc <HAL_I2C_Mem_Write+0x1c8>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d130      	bne.n	8005fdc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	2200      	movs	r2, #0
 8005f82:	2180      	movs	r1, #128	; 0x80
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 fa4d 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d001      	beq.n	8005f94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e04d      	b.n	8006030 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	2bff      	cmp	r3, #255	; 0xff
 8005f9c:	d90e      	bls.n	8005fbc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	22ff      	movs	r2, #255	; 0xff
 8005fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	8979      	ldrh	r1, [r7, #10]
 8005fac:	2300      	movs	r3, #0
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 fbd1 	bl	800675c <I2C_TransferConfig>
 8005fba:	e00f      	b.n	8005fdc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	8979      	ldrh	r1, [r7, #10]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 fbc0 	bl	800675c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d19e      	bne.n	8005f24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f000 fa9a 	bl	8006524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d001      	beq.n	8005ffa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	e01a      	b.n	8006030 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2220      	movs	r2, #32
 8006000:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6859      	ldr	r1, [r3, #4]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <HAL_I2C_Mem_Write+0x224>)
 800600e:	400b      	ands	r3, r1
 8006010:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	e000      	b.n	8006030 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800602e:	2302      	movs	r3, #2
  }
}
 8006030:	4618      	mov	r0, r3
 8006032:	3718      	adds	r7, #24
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	fe00e800 	.word	0xfe00e800

0800603c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af02      	add	r7, sp, #8
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	4608      	mov	r0, r1
 8006046:	4611      	mov	r1, r2
 8006048:	461a      	mov	r2, r3
 800604a:	4603      	mov	r3, r0
 800604c:	817b      	strh	r3, [r7, #10]
 800604e:	460b      	mov	r3, r1
 8006050:	813b      	strh	r3, [r7, #8]
 8006052:	4613      	mov	r3, r2
 8006054:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b20      	cmp	r3, #32
 8006060:	f040 80fd 	bne.w	800625e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <HAL_I2C_Mem_Read+0x34>
 800606a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800606c:	2b00      	cmp	r3, #0
 800606e:	d105      	bne.n	800607c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006076:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0f1      	b.n	8006260 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_I2C_Mem_Read+0x4e>
 8006086:	2302      	movs	r3, #2
 8006088:	e0ea      	b.n	8006260 <HAL_I2C_Mem_Read+0x224>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006092:	f7fd fe59 	bl	8003d48 <HAL_GetTick>
 8006096:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	2319      	movs	r3, #25
 800609e:	2201      	movs	r2, #1
 80060a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f9bd 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e0d5      	b.n	8006260 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2222      	movs	r2, #34	; 0x22
 80060b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2240      	movs	r2, #64	; 0x40
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6a3a      	ldr	r2, [r7, #32]
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060dc:	88f8      	ldrh	r0, [r7, #6]
 80060de:	893a      	ldrh	r2, [r7, #8]
 80060e0:	8979      	ldrh	r1, [r7, #10]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	4603      	mov	r3, r0
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f921 	bl	8006334 <I2C_RequestMemoryRead>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0ad      	b.n	8006260 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006108:	b29b      	uxth	r3, r3
 800610a:	2bff      	cmp	r3, #255	; 0xff
 800610c:	d90e      	bls.n	800612c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	22ff      	movs	r2, #255	; 0xff
 8006112:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006118:	b2da      	uxtb	r2, r3
 800611a:	8979      	ldrh	r1, [r7, #10]
 800611c:	4b52      	ldr	r3, [pc, #328]	; (8006268 <HAL_I2C_Mem_Read+0x22c>)
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fb19 	bl	800675c <I2C_TransferConfig>
 800612a:	e00f      	b.n	800614c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613a:	b2da      	uxtb	r2, r3
 800613c:	8979      	ldrh	r1, [r7, #10]
 800613e:	4b4a      	ldr	r3, [pc, #296]	; (8006268 <HAL_I2C_Mem_Read+0x22c>)
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fb08 	bl	800675c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	9300      	str	r3, [sp, #0]
 8006150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006152:	2200      	movs	r2, #0
 8006154:	2104      	movs	r1, #4
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 f964 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e07c      	b.n	8006260 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006178:	1c5a      	adds	r2, r3, #1
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006182:	3b01      	subs	r3, #1
 8006184:	b29a      	uxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d034      	beq.n	800620c <HAL_I2C_Mem_Read+0x1d0>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d130      	bne.n	800620c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b0:	2200      	movs	r2, #0
 80061b2:	2180      	movs	r1, #128	; 0x80
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 f935 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e04d      	b.n	8006260 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2bff      	cmp	r3, #255	; 0xff
 80061cc:	d90e      	bls.n	80061ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	22ff      	movs	r2, #255	; 0xff
 80061d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	8979      	ldrh	r1, [r7, #10]
 80061dc:	2300      	movs	r3, #0
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fab9 	bl	800675c <I2C_TransferConfig>
 80061ea:	e00f      	b.n	800620c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	8979      	ldrh	r1, [r7, #10]
 80061fe:	2300      	movs	r3, #0
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f000 faa8 	bl	800675c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006210:	b29b      	uxth	r3, r3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d19a      	bne.n	800614c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f982 	bl	8006524 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e01a      	b.n	8006260 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2220      	movs	r2, #32
 8006230:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6859      	ldr	r1, [r3, #4]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b0b      	ldr	r3, [pc, #44]	; (800626c <HAL_I2C_Mem_Read+0x230>)
 800623e:	400b      	ands	r3, r1
 8006240:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2220      	movs	r2, #32
 8006246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	e000      	b.n	8006260 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800625e:	2302      	movs	r3, #2
  }
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	80002400 	.word	0x80002400
 800626c:	fe00e800 	.word	0xfe00e800

08006270 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800627e:	b2db      	uxtb	r3, r3
}
 8006280:	4618      	mov	r0, r3
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af02      	add	r7, sp, #8
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	4608      	mov	r0, r1
 8006296:	4611      	mov	r1, r2
 8006298:	461a      	mov	r2, r3
 800629a:	4603      	mov	r3, r0
 800629c:	817b      	strh	r3, [r7, #10]
 800629e:	460b      	mov	r3, r1
 80062a0:	813b      	strh	r3, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	8979      	ldrh	r1, [r7, #10]
 80062ac:	4b20      	ldr	r3, [pc, #128]	; (8006330 <I2C_RequestMemoryWrite+0xa4>)
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 fa51 	bl	800675c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	69b9      	ldr	r1, [r7, #24]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f000 f8f0 	bl	80064a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d001      	beq.n	80062ce <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e02c      	b.n	8006328 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d105      	bne.n	80062e0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062d4:	893b      	ldrh	r3, [r7, #8]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	629a      	str	r2, [r3, #40]	; 0x28
 80062de:	e015      	b.n	800630c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062e0:	893b      	ldrh	r3, [r7, #8]
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ee:	69fa      	ldr	r2, [r7, #28]
 80062f0:	69b9      	ldr	r1, [r7, #24]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f8d6 	bl	80064a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e012      	b.n	8006328 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006302:	893b      	ldrh	r3, [r7, #8]
 8006304:	b2da      	uxtb	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	2200      	movs	r2, #0
 8006314:	2180      	movs	r1, #128	; 0x80
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 f884 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	80002000 	.word	0x80002000

08006334 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af02      	add	r7, sp, #8
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	4608      	mov	r0, r1
 800633e:	4611      	mov	r1, r2
 8006340:	461a      	mov	r2, r3
 8006342:	4603      	mov	r3, r0
 8006344:	817b      	strh	r3, [r7, #10]
 8006346:	460b      	mov	r3, r1
 8006348:	813b      	strh	r3, [r7, #8]
 800634a:	4613      	mov	r3, r2
 800634c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800634e:	88fb      	ldrh	r3, [r7, #6]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	8979      	ldrh	r1, [r7, #10]
 8006354:	4b20      	ldr	r3, [pc, #128]	; (80063d8 <I2C_RequestMemoryRead+0xa4>)
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	2300      	movs	r3, #0
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f000 f9fe 	bl	800675c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	69b9      	ldr	r1, [r7, #24]
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f000 f89d 	bl	80064a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e02c      	b.n	80063ce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006374:	88fb      	ldrh	r3, [r7, #6]
 8006376:	2b01      	cmp	r3, #1
 8006378:	d105      	bne.n	8006386 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800637a:	893b      	ldrh	r3, [r7, #8]
 800637c:	b2da      	uxtb	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	629a      	str	r2, [r3, #40]	; 0x28
 8006384:	e015      	b.n	80063b2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006386:	893b      	ldrh	r3, [r7, #8]
 8006388:	0a1b      	lsrs	r3, r3, #8
 800638a:	b29b      	uxth	r3, r3
 800638c:	b2da      	uxtb	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	69b9      	ldr	r1, [r7, #24]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f883 	bl	80064a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d001      	beq.n	80063a8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e012      	b.n	80063ce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80063a8:	893b      	ldrh	r3, [r7, #8]
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	9300      	str	r3, [sp, #0]
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	2200      	movs	r2, #0
 80063ba:	2140      	movs	r1, #64	; 0x40
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 f831 	bl	8006424 <I2C_WaitOnFlagUntilTimeout>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e000      	b.n	80063ce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	80002000 	.word	0x80002000

080063dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d103      	bne.n	80063fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f003 0301 	and.w	r3, r3, #1
 8006404:	2b01      	cmp	r3, #1
 8006406:	d007      	beq.n	8006418 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	619a      	str	r2, [r3, #24]
  }
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006434:	e022      	b.n	800647c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800643c:	d01e      	beq.n	800647c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643e:	f7fd fc83 	bl	8003d48 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d302      	bcc.n	8006454 <I2C_WaitOnFlagUntilTimeout+0x30>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d113      	bne.n	800647c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006458:	f043 0220 	orr.w	r2, r3, #32
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e00f      	b.n	800649c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	4013      	ands	r3, r2
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	429a      	cmp	r2, r3
 800648a:	bf0c      	ite	eq
 800648c:	2301      	moveq	r3, #1
 800648e:	2300      	movne	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	461a      	mov	r2, r3
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	429a      	cmp	r2, r3
 8006498:	d0cd      	beq.n	8006436 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064b0:	e02c      	b.n	800650c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	68b9      	ldr	r1, [r7, #8]
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 f870 	bl	800659c <I2C_IsErrorOccurred>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d001      	beq.n	80064c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e02a      	b.n	800651c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064cc:	d01e      	beq.n	800650c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ce:	f7fd fc3b 	bl	8003d48 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	68ba      	ldr	r2, [r7, #8]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d302      	bcc.n	80064e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d113      	bne.n	800650c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e8:	f043 0220 	orr.w	r2, r3, #32
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2220      	movs	r2, #32
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e007      	b.n	800651c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	699b      	ldr	r3, [r3, #24]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d1cb      	bne.n	80064b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006530:	e028      	b.n	8006584 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	68b9      	ldr	r1, [r7, #8]
 8006536:	68f8      	ldr	r0, [r7, #12]
 8006538:	f000 f830 	bl	800659c <I2C_IsErrorOccurred>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e026      	b.n	8006594 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006546:	f7fd fbff 	bl	8003d48 <HAL_GetTick>
 800654a:	4602      	mov	r2, r0
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	429a      	cmp	r2, r3
 8006554:	d302      	bcc.n	800655c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d113      	bne.n	8006584 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006560:	f043 0220 	orr.w	r2, r3, #32
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e007      	b.n	8006594 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b20      	cmp	r3, #32
 8006590:	d1cf      	bne.n	8006532 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	; 0x28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d068      	beq.n	800669a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2210      	movs	r2, #16
 80065ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065d0:	e049      	b.n	8006666 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065d8:	d045      	beq.n	8006666 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065da:	f7fd fbb5 	bl	8003d48 <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d302      	bcc.n	80065f0 <I2C_IsErrorOccurred+0x54>
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d13a      	bne.n	8006666 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006602:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800660e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006612:	d121      	bne.n	8006658 <I2C_IsErrorOccurred+0xbc>
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800661a:	d01d      	beq.n	8006658 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800661c:	7cfb      	ldrb	r3, [r7, #19]
 800661e:	2b20      	cmp	r3, #32
 8006620:	d01a      	beq.n	8006658 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006630:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006632:	f7fd fb89 	bl	8003d48 <HAL_GetTick>
 8006636:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006638:	e00e      	b.n	8006658 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800663a:	f7fd fb85 	bl	8003d48 <HAL_GetTick>
 800663e:	4602      	mov	r2, r0
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	2b19      	cmp	r3, #25
 8006646:	d907      	bls.n	8006658 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	f043 0320 	orr.w	r3, r3, #32
 800664e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006656:	e006      	b.n	8006666 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b20      	cmp	r3, #32
 8006664:	d1e9      	bne.n	800663a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b20      	cmp	r3, #32
 8006672:	d003      	beq.n	800667c <I2C_IsErrorOccurred+0xe0>
 8006674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0aa      	beq.n	80065d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800667c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006680:	2b00      	cmp	r3, #0
 8006682:	d103      	bne.n	800668c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2220      	movs	r2, #32
 800668a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800668c:	6a3b      	ldr	r3, [r7, #32]
 800668e:	f043 0304 	orr.w	r3, r3, #4
 8006692:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	f043 0301 	orr.w	r3, r3, #1
 80066b2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	f043 0308 	orr.w	r3, r3, #8
 80066d4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00b      	beq.n	8006708 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	f043 0302 	orr.w	r3, r3, #2
 80066f6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006700:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006708:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01c      	beq.n	800674a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f7ff fe63 	bl	80063dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6859      	ldr	r1, [r3, #4]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <I2C_IsErrorOccurred+0x1bc>)
 8006722:	400b      	ands	r3, r1
 8006724:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	431a      	orrs	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800674a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800674e:	4618      	mov	r0, r3
 8006750:	3728      	adds	r7, #40	; 0x28
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	fe00e800 	.word	0xfe00e800

0800675c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	607b      	str	r3, [r7, #4]
 8006766:	460b      	mov	r3, r1
 8006768:	817b      	strh	r3, [r7, #10]
 800676a:	4613      	mov	r3, r2
 800676c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800676e:	897b      	ldrh	r3, [r7, #10]
 8006770:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006774:	7a7b      	ldrb	r3, [r7, #9]
 8006776:	041b      	lsls	r3, r3, #16
 8006778:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800677c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	4313      	orrs	r3, r2
 8006786:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800678a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	0d5b      	lsrs	r3, r3, #21
 8006796:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800679a:	4b08      	ldr	r3, [pc, #32]	; (80067bc <I2C_TransferConfig+0x60>)
 800679c:	430b      	orrs	r3, r1
 800679e:	43db      	mvns	r3, r3
 80067a0:	ea02 0103 	and.w	r1, r2, r3
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	03ff63ff 	.word	0x03ff63ff

080067c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067c2:	b08f      	sub	sp, #60	; 0x3c
 80067c4:	af0a      	add	r7, sp, #40	; 0x28
 80067c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e116      	b.n	8006a00 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7fb f9f5 	bl	8001bdc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2203      	movs	r2, #3
 80067f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006802:	2b00      	cmp	r3, #0
 8006804:	d102      	bne.n	800680c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4618      	mov	r0, r3
 8006812:	f004 fe47 	bl	800b4a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	687e      	ldr	r6, [r7, #4]
 800681e:	466d      	mov	r5, sp
 8006820:	f106 0410 	add.w	r4, r6, #16
 8006824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006828:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800682a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800682c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006830:	e885 0003 	stmia.w	r5, {r0, r1}
 8006834:	1d33      	adds	r3, r6, #4
 8006836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006838:	6838      	ldr	r0, [r7, #0]
 800683a:	f004 fddb 	bl	800b3f4 <USB_CoreInit>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2202      	movs	r2, #2
 8006848:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e0d7      	b.n	8006a00 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2100      	movs	r1, #0
 8006856:	4618      	mov	r0, r3
 8006858:	f004 fe35 	bl	800b4c6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800685c:	2300      	movs	r3, #0
 800685e:	73fb      	strb	r3, [r7, #15]
 8006860:	e04a      	b.n	80068f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006862:	7bfa      	ldrb	r2, [r7, #15]
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	4613      	mov	r3, r2
 8006868:	00db      	lsls	r3, r3, #3
 800686a:	4413      	add	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	440b      	add	r3, r1
 8006870:	333d      	adds	r3, #61	; 0x3d
 8006872:	2201      	movs	r2, #1
 8006874:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006876:	7bfa      	ldrb	r2, [r7, #15]
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	4613      	mov	r3, r2
 800687c:	00db      	lsls	r3, r3, #3
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	333c      	adds	r3, #60	; 0x3c
 8006886:	7bfa      	ldrb	r2, [r7, #15]
 8006888:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800688a:	7bfa      	ldrb	r2, [r7, #15]
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	b298      	uxth	r0, r3
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	3344      	adds	r3, #68	; 0x44
 800689e:	4602      	mov	r2, r0
 80068a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068a2:	7bfa      	ldrb	r2, [r7, #15]
 80068a4:	6879      	ldr	r1, [r7, #4]
 80068a6:	4613      	mov	r3, r2
 80068a8:	00db      	lsls	r3, r3, #3
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	440b      	add	r3, r1
 80068b0:	3340      	adds	r3, #64	; 0x40
 80068b2:	2200      	movs	r2, #0
 80068b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068b6:	7bfa      	ldrb	r2, [r7, #15]
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	4613      	mov	r3, r2
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	4413      	add	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	3348      	adds	r3, #72	; 0x48
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068ca:	7bfa      	ldrb	r2, [r7, #15]
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	4413      	add	r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	334c      	adds	r3, #76	; 0x4c
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80068de:	7bfa      	ldrb	r2, [r7, #15]
 80068e0:	6879      	ldr	r1, [r7, #4]
 80068e2:	4613      	mov	r3, r2
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	440b      	add	r3, r1
 80068ec:	3354      	adds	r3, #84	; 0x54
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	3301      	adds	r3, #1
 80068f6:	73fb      	strb	r3, [r7, #15]
 80068f8:	7bfa      	ldrb	r2, [r7, #15]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d3af      	bcc.n	8006862 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006902:	2300      	movs	r3, #0
 8006904:	73fb      	strb	r3, [r7, #15]
 8006906:	e044      	b.n	8006992 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006908:	7bfa      	ldrb	r2, [r7, #15]
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	4613      	mov	r3, r2
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4413      	add	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	440b      	add	r3, r1
 8006916:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800691e:	7bfa      	ldrb	r2, [r7, #15]
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006930:	7bfa      	ldrb	r2, [r7, #15]
 8006932:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006934:	7bfa      	ldrb	r2, [r7, #15]
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	4613      	mov	r3, r2
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006946:	2200      	movs	r2, #0
 8006948:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800694a:	7bfa      	ldrb	r2, [r7, #15]
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006960:	7bfa      	ldrb	r2, [r7, #15]
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	4613      	mov	r3, r2
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	440b      	add	r3, r1
 800696e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006976:	7bfa      	ldrb	r2, [r7, #15]
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	3301      	adds	r3, #1
 8006990:	73fb      	strb	r3, [r7, #15]
 8006992:	7bfa      	ldrb	r2, [r7, #15]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	429a      	cmp	r2, r3
 800699a:	d3b5      	bcc.n	8006908 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	603b      	str	r3, [r7, #0]
 80069a2:	687e      	ldr	r6, [r7, #4]
 80069a4:	466d      	mov	r5, sp
 80069a6:	f106 0410 	add.w	r4, r6, #16
 80069aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80069ba:	1d33      	adds	r3, r6, #4
 80069bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069be:	6838      	ldr	r0, [r7, #0]
 80069c0:	f004 fdce 	bl	800b560 <USB_DevInit>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2202      	movs	r2, #2
 80069ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e014      	b.n	8006a00 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d102      	bne.n	80069f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f80a 	bl	8006a08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f004 ff8c 	bl	800b916 <USB_DevDisconnect>

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2201      	movs	r2, #1
 8006a1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a36:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <HAL_PCDEx_ActivateLPM+0x44>)
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr
 8006a4c:	10000003 	.word	0x10000003

08006a50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a54:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a04      	ldr	r2, [pc, #16]	; (8006a6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a5e:	6013      	str	r3, [r2, #0]
}
 8006a60:	bf00      	nop
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40007000 	.word	0x40007000

08006a70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e29b      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 8087 	beq.w	8006ba2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a94:	4b96      	ldr	r3, [pc, #600]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f003 030c 	and.w	r3, r3, #12
 8006a9c:	2b04      	cmp	r3, #4
 8006a9e:	d00c      	beq.n	8006aba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aa0:	4b93      	ldr	r3, [pc, #588]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 030c 	and.w	r3, r3, #12
 8006aa8:	2b08      	cmp	r3, #8
 8006aaa:	d112      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x62>
 8006aac:	4b90      	ldr	r3, [pc, #576]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ab8:	d10b      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aba:	4b8d      	ldr	r3, [pc, #564]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d06c      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x130>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d168      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e275      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ada:	d106      	bne.n	8006aea <HAL_RCC_OscConfig+0x7a>
 8006adc:	4b84      	ldr	r3, [pc, #528]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a83      	ldr	r2, [pc, #524]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	e02e      	b.n	8006b48 <HAL_RCC_OscConfig+0xd8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x9c>
 8006af2:	4b7f      	ldr	r3, [pc, #508]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a7e      	ldr	r2, [pc, #504]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006afc:	6013      	str	r3, [r2, #0]
 8006afe:	4b7c      	ldr	r3, [pc, #496]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a7b      	ldr	r2, [pc, #492]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	e01d      	b.n	8006b48 <HAL_RCC_OscConfig+0xd8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b14:	d10c      	bne.n	8006b30 <HAL_RCC_OscConfig+0xc0>
 8006b16:	4b76      	ldr	r3, [pc, #472]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a75      	ldr	r2, [pc, #468]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b20:	6013      	str	r3, [r2, #0]
 8006b22:	4b73      	ldr	r3, [pc, #460]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a72      	ldr	r2, [pc, #456]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	e00b      	b.n	8006b48 <HAL_RCC_OscConfig+0xd8>
 8006b30:	4b6f      	ldr	r3, [pc, #444]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6e      	ldr	r2, [pc, #440]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b3a:	6013      	str	r3, [r2, #0]
 8006b3c:	4b6c      	ldr	r3, [pc, #432]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a6b      	ldr	r2, [pc, #428]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d013      	beq.n	8006b78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b50:	f7fd f8fa 	bl	8003d48 <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b58:	f7fd f8f6 	bl	8003d48 <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b64      	cmp	r3, #100	; 0x64
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e229      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b6a:	4b61      	ldr	r3, [pc, #388]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0f0      	beq.n	8006b58 <HAL_RCC_OscConfig+0xe8>
 8006b76:	e014      	b.n	8006ba2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b78:	f7fd f8e6 	bl	8003d48 <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b80:	f7fd f8e2 	bl	8003d48 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b64      	cmp	r3, #100	; 0x64
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e215      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b92:	4b57      	ldr	r3, [pc, #348]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1f0      	bne.n	8006b80 <HAL_RCC_OscConfig+0x110>
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d069      	beq.n	8006c82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bae:	4b50      	ldr	r3, [pc, #320]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00b      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bba:	4b4d      	ldr	r3, [pc, #308]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f003 030c 	and.w	r3, r3, #12
 8006bc2:	2b08      	cmp	r3, #8
 8006bc4:	d11c      	bne.n	8006c00 <HAL_RCC_OscConfig+0x190>
 8006bc6:	4b4a      	ldr	r3, [pc, #296]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d116      	bne.n	8006c00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bd2:	4b47      	ldr	r3, [pc, #284]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0302 	and.w	r3, r3, #2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_RCC_OscConfig+0x17a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d001      	beq.n	8006bea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	e1e9      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bea:	4b41      	ldr	r3, [pc, #260]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	493d      	ldr	r1, [pc, #244]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bfe:	e040      	b.n	8006c82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d023      	beq.n	8006c50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c08:	4b39      	ldr	r3, [pc, #228]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a38      	ldr	r2, [pc, #224]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c14:	f7fd f898 	bl	8003d48 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c1c:	f7fd f894 	bl	8003d48 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e1c7      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2e:	4b30      	ldr	r3, [pc, #192]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0f0      	beq.n	8006c1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c3a:	4b2d      	ldr	r3, [pc, #180]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	00db      	lsls	r3, r3, #3
 8006c48:	4929      	ldr	r1, [pc, #164]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	600b      	str	r3, [r1, #0]
 8006c4e:	e018      	b.n	8006c82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c50:	4b27      	ldr	r3, [pc, #156]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a26      	ldr	r2, [pc, #152]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5c:	f7fd f874 	bl	8003d48 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c64:	f7fd f870 	bl	8003d48 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e1a3      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c76:	4b1e      	ldr	r3, [pc, #120]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f0      	bne.n	8006c64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d038      	beq.n	8006d00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d019      	beq.n	8006cca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c96:	4b16      	ldr	r3, [pc, #88]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c9a:	4a15      	ldr	r2, [pc, #84]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006c9c:	f043 0301 	orr.w	r3, r3, #1
 8006ca0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca2:	f7fd f851 	bl	8003d48 <HAL_GetTick>
 8006ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ca8:	e008      	b.n	8006cbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006caa:	f7fd f84d 	bl	8003d48 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d901      	bls.n	8006cbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	e180      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cbc:	4b0c      	ldr	r3, [pc, #48]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cc0:	f003 0302 	and.w	r3, r3, #2
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0f0      	beq.n	8006caa <HAL_RCC_OscConfig+0x23a>
 8006cc8:	e01a      	b.n	8006d00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cca:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cce:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <HAL_RCC_OscConfig+0x280>)
 8006cd0:	f023 0301 	bic.w	r3, r3, #1
 8006cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd6:	f7fd f837 	bl	8003d48 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cdc:	e00a      	b.n	8006cf4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cde:	f7fd f833 	bl	8003d48 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d903      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e166      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
 8006cf0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cf4:	4b92      	ldr	r3, [pc, #584]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1ee      	bne.n	8006cde <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 80a4 	beq.w	8006e56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d0e:	4b8c      	ldr	r3, [pc, #560]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10d      	bne.n	8006d36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d1a:	4b89      	ldr	r3, [pc, #548]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	4a88      	ldr	r2, [pc, #544]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d24:	6413      	str	r3, [r2, #64]	; 0x40
 8006d26:	4b86      	ldr	r3, [pc, #536]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	60bb      	str	r3, [r7, #8]
 8006d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d32:	2301      	movs	r3, #1
 8006d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d36:	4b83      	ldr	r3, [pc, #524]	; (8006f44 <HAL_RCC_OscConfig+0x4d4>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d118      	bne.n	8006d74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006d42:	4b80      	ldr	r3, [pc, #512]	; (8006f44 <HAL_RCC_OscConfig+0x4d4>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a7f      	ldr	r2, [pc, #508]	; (8006f44 <HAL_RCC_OscConfig+0x4d4>)
 8006d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d4e:	f7fc fffb 	bl	8003d48 <HAL_GetTick>
 8006d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d54:	e008      	b.n	8006d68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d56:	f7fc fff7 	bl	8003d48 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	2b64      	cmp	r3, #100	; 0x64
 8006d62:	d901      	bls.n	8006d68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e12a      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d68:	4b76      	ldr	r3, [pc, #472]	; (8006f44 <HAL_RCC_OscConfig+0x4d4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d0f0      	beq.n	8006d56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d106      	bne.n	8006d8a <HAL_RCC_OscConfig+0x31a>
 8006d7c:	4b70      	ldr	r3, [pc, #448]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d80:	4a6f      	ldr	r2, [pc, #444]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d82:	f043 0301 	orr.w	r3, r3, #1
 8006d86:	6713      	str	r3, [r2, #112]	; 0x70
 8006d88:	e02d      	b.n	8006de6 <HAL_RCC_OscConfig+0x376>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10c      	bne.n	8006dac <HAL_RCC_OscConfig+0x33c>
 8006d92:	4b6b      	ldr	r3, [pc, #428]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d96:	4a6a      	ldr	r2, [pc, #424]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006d98:	f023 0301 	bic.w	r3, r3, #1
 8006d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d9e:	4b68      	ldr	r3, [pc, #416]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	4a67      	ldr	r2, [pc, #412]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006da4:	f023 0304 	bic.w	r3, r3, #4
 8006da8:	6713      	str	r3, [r2, #112]	; 0x70
 8006daa:	e01c      	b.n	8006de6 <HAL_RCC_OscConfig+0x376>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	2b05      	cmp	r3, #5
 8006db2:	d10c      	bne.n	8006dce <HAL_RCC_OscConfig+0x35e>
 8006db4:	4b62      	ldr	r3, [pc, #392]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	4a61      	ldr	r2, [pc, #388]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006dba:	f043 0304 	orr.w	r3, r3, #4
 8006dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8006dc0:	4b5f      	ldr	r3, [pc, #380]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc4:	4a5e      	ldr	r2, [pc, #376]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006dc6:	f043 0301 	orr.w	r3, r3, #1
 8006dca:	6713      	str	r3, [r2, #112]	; 0x70
 8006dcc:	e00b      	b.n	8006de6 <HAL_RCC_OscConfig+0x376>
 8006dce:	4b5c      	ldr	r3, [pc, #368]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	4a5b      	ldr	r2, [pc, #364]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006dd4:	f023 0301 	bic.w	r3, r3, #1
 8006dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dda:	4b59      	ldr	r3, [pc, #356]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dde:	4a58      	ldr	r2, [pc, #352]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006de0:	f023 0304 	bic.w	r3, r3, #4
 8006de4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d015      	beq.n	8006e1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dee:	f7fc ffab 	bl	8003d48 <HAL_GetTick>
 8006df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df4:	e00a      	b.n	8006e0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006df6:	f7fc ffa7 	bl	8003d48 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d901      	bls.n	8006e0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e0d8      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e0c:	4b4c      	ldr	r3, [pc, #304]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0ee      	beq.n	8006df6 <HAL_RCC_OscConfig+0x386>
 8006e18:	e014      	b.n	8006e44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e1a:	f7fc ff95 	bl	8003d48 <HAL_GetTick>
 8006e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e20:	e00a      	b.n	8006e38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e22:	f7fc ff91 	bl	8003d48 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e0c2      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e38:	4b41      	ldr	r3, [pc, #260]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1ee      	bne.n	8006e22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d105      	bne.n	8006e56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e4a:	4b3d      	ldr	r3, [pc, #244]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	4a3c      	ldr	r2, [pc, #240]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80ae 	beq.w	8006fbc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e60:	4b37      	ldr	r3, [pc, #220]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 030c 	and.w	r3, r3, #12
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d06d      	beq.n	8006f48 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d14b      	bne.n	8006f0c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e74:	4b32      	ldr	r3, [pc, #200]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a31      	ldr	r2, [pc, #196]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fc ff62 	bl	8003d48 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e88:	f7fc ff5e 	bl	8003d48 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e091      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e9a:	4b29      	ldr	r3, [pc, #164]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	69da      	ldr	r2, [r3, #28]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb4:	019b      	lsls	r3, r3, #6
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ebc:	085b      	lsrs	r3, r3, #1
 8006ebe:	3b01      	subs	r3, #1
 8006ec0:	041b      	lsls	r3, r3, #16
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	061b      	lsls	r3, r3, #24
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed0:	071b      	lsls	r3, r3, #28
 8006ed2:	491b      	ldr	r1, [pc, #108]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed8:	4b19      	ldr	r3, [pc, #100]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a18      	ldr	r2, [pc, #96]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee4:	f7fc ff30 	bl	8003d48 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eec:	f7fc ff2c 	bl	8003d48 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e05f      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006efe:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0f0      	beq.n	8006eec <HAL_RCC_OscConfig+0x47c>
 8006f0a:	e057      	b.n	8006fbc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f0c:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a0b      	ldr	r2, [pc, #44]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f18:	f7fc ff16 	bl	8003d48 <HAL_GetTick>
 8006f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f1e:	e008      	b.n	8006f32 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f20:	f7fc ff12 	bl	8003d48 <HAL_GetTick>
 8006f24:	4602      	mov	r2, r0
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d901      	bls.n	8006f32 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	e045      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f32:	4b03      	ldr	r3, [pc, #12]	; (8006f40 <HAL_RCC_OscConfig+0x4d0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1f0      	bne.n	8006f20 <HAL_RCC_OscConfig+0x4b0>
 8006f3e:	e03d      	b.n	8006fbc <HAL_RCC_OscConfig+0x54c>
 8006f40:	40023800 	.word	0x40023800
 8006f44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006f48:	4b1f      	ldr	r3, [pc, #124]	; (8006fc8 <HAL_RCC_OscConfig+0x558>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d030      	beq.n	8006fb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d129      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d122      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f78:	4013      	ands	r3, r2
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d119      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	3b01      	subs	r3, #1
 8006f92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d10f      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d107      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d001      	beq.n	8006fbc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e000      	b.n	8006fbe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40023800 	.word	0x40023800

08006fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e0d0      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fe4:	4b6a      	ldr	r3, [pc, #424]	; (8007190 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d910      	bls.n	8007014 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff2:	4b67      	ldr	r3, [pc, #412]	; (8007190 <HAL_RCC_ClockConfig+0x1c4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f023 020f 	bic.w	r2, r3, #15
 8006ffa:	4965      	ldr	r1, [pc, #404]	; (8007190 <HAL_RCC_ClockConfig+0x1c4>)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007002:	4b63      	ldr	r3, [pc, #396]	; (8007190 <HAL_RCC_ClockConfig+0x1c4>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	429a      	cmp	r2, r3
 800700e:	d001      	beq.n	8007014 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e0b8      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d020      	beq.n	8007062 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800702c:	4b59      	ldr	r3, [pc, #356]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4a58      	ldr	r2, [pc, #352]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 8007032:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007036:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d005      	beq.n	8007050 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007044:	4b53      	ldr	r3, [pc, #332]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	4a52      	ldr	r2, [pc, #328]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 800704a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800704e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007050:	4b50      	ldr	r3, [pc, #320]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	494d      	ldr	r1, [pc, #308]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 800705e:	4313      	orrs	r3, r2
 8007060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d040      	beq.n	80070f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d107      	bne.n	8007086 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007076:	4b47      	ldr	r3, [pc, #284]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d115      	bne.n	80070ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e07f      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d107      	bne.n	800709e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800708e:	4b41      	ldr	r3, [pc, #260]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d109      	bne.n	80070ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e073      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800709e:	4b3d      	ldr	r3, [pc, #244]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e06b      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070ae:	4b39      	ldr	r3, [pc, #228]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f023 0203 	bic.w	r2, r3, #3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	4936      	ldr	r1, [pc, #216]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 80070bc:	4313      	orrs	r3, r2
 80070be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070c0:	f7fc fe42 	bl	8003d48 <HAL_GetTick>
 80070c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070c6:	e00a      	b.n	80070de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070c8:	f7fc fe3e 	bl	8003d48 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d901      	bls.n	80070de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e053      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070de:	4b2d      	ldr	r3, [pc, #180]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 020c 	and.w	r2, r3, #12
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d1eb      	bne.n	80070c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070f0:	4b27      	ldr	r3, [pc, #156]	; (8007190 <HAL_RCC_ClockConfig+0x1c4>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 030f 	and.w	r3, r3, #15
 80070f8:	683a      	ldr	r2, [r7, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d210      	bcs.n	8007120 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070fe:	4b24      	ldr	r3, [pc, #144]	; (8007190 <HAL_RCC_ClockConfig+0x1c4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f023 020f 	bic.w	r2, r3, #15
 8007106:	4922      	ldr	r1, [pc, #136]	; (8007190 <HAL_RCC_ClockConfig+0x1c4>)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	4313      	orrs	r3, r2
 800710c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800710e:	4b20      	ldr	r3, [pc, #128]	; (8007190 <HAL_RCC_ClockConfig+0x1c4>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 030f 	and.w	r3, r3, #15
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	429a      	cmp	r2, r3
 800711a:	d001      	beq.n	8007120 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e032      	b.n	8007186 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0304 	and.w	r3, r3, #4
 8007128:	2b00      	cmp	r3, #0
 800712a:	d008      	beq.n	800713e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800712c:	4b19      	ldr	r3, [pc, #100]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	4916      	ldr	r1, [pc, #88]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 800713a:	4313      	orrs	r3, r2
 800713c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0308 	and.w	r3, r3, #8
 8007146:	2b00      	cmp	r3, #0
 8007148:	d009      	beq.n	800715e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	490e      	ldr	r1, [pc, #56]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 800715a:	4313      	orrs	r3, r2
 800715c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800715e:	f000 f821 	bl	80071a4 <HAL_RCC_GetSysClockFreq>
 8007162:	4602      	mov	r2, r0
 8007164:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <HAL_RCC_ClockConfig+0x1c8>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	091b      	lsrs	r3, r3, #4
 800716a:	f003 030f 	and.w	r3, r3, #15
 800716e:	490a      	ldr	r1, [pc, #40]	; (8007198 <HAL_RCC_ClockConfig+0x1cc>)
 8007170:	5ccb      	ldrb	r3, [r1, r3]
 8007172:	fa22 f303 	lsr.w	r3, r2, r3
 8007176:	4a09      	ldr	r2, [pc, #36]	; (800719c <HAL_RCC_ClockConfig+0x1d0>)
 8007178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800717a:	4b09      	ldr	r3, [pc, #36]	; (80071a0 <HAL_RCC_ClockConfig+0x1d4>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f7fc fd9e 	bl	8003cc0 <HAL_InitTick>

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	40023c00 	.word	0x40023c00
 8007194:	40023800 	.word	0x40023800
 8007198:	0800bfb8 	.word	0x0800bfb8
 800719c:	20000000 	.word	0x20000000
 80071a0:	20000038 	.word	0x20000038

080071a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071a8:	b090      	sub	sp, #64	; 0x40
 80071aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	637b      	str	r3, [r7, #52]	; 0x34
 80071b0:	2300      	movs	r3, #0
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071b4:	2300      	movs	r3, #0
 80071b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071bc:	4b59      	ldr	r3, [pc, #356]	; (8007324 <HAL_RCC_GetSysClockFreq+0x180>)
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 030c 	and.w	r3, r3, #12
 80071c4:	2b08      	cmp	r3, #8
 80071c6:	d00d      	beq.n	80071e4 <HAL_RCC_GetSysClockFreq+0x40>
 80071c8:	2b08      	cmp	r3, #8
 80071ca:	f200 80a1 	bhi.w	8007310 <HAL_RCC_GetSysClockFreq+0x16c>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d002      	beq.n	80071d8 <HAL_RCC_GetSysClockFreq+0x34>
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d003      	beq.n	80071de <HAL_RCC_GetSysClockFreq+0x3a>
 80071d6:	e09b      	b.n	8007310 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071d8:	4b53      	ldr	r3, [pc, #332]	; (8007328 <HAL_RCC_GetSysClockFreq+0x184>)
 80071da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071dc:	e09b      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071de:	4b53      	ldr	r3, [pc, #332]	; (800732c <HAL_RCC_GetSysClockFreq+0x188>)
 80071e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071e2:	e098      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071e4:	4b4f      	ldr	r3, [pc, #316]	; (8007324 <HAL_RCC_GetSysClockFreq+0x180>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80071ee:	4b4d      	ldr	r3, [pc, #308]	; (8007324 <HAL_RCC_GetSysClockFreq+0x180>)
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d028      	beq.n	800724c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071fa:	4b4a      	ldr	r3, [pc, #296]	; (8007324 <HAL_RCC_GetSysClockFreq+0x180>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	099b      	lsrs	r3, r3, #6
 8007200:	2200      	movs	r2, #0
 8007202:	623b      	str	r3, [r7, #32]
 8007204:	627a      	str	r2, [r7, #36]	; 0x24
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800720c:	2100      	movs	r1, #0
 800720e:	4b47      	ldr	r3, [pc, #284]	; (800732c <HAL_RCC_GetSysClockFreq+0x188>)
 8007210:	fb03 f201 	mul.w	r2, r3, r1
 8007214:	2300      	movs	r3, #0
 8007216:	fb00 f303 	mul.w	r3, r0, r3
 800721a:	4413      	add	r3, r2
 800721c:	4a43      	ldr	r2, [pc, #268]	; (800732c <HAL_RCC_GetSysClockFreq+0x188>)
 800721e:	fba0 1202 	umull	r1, r2, r0, r2
 8007222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007224:	460a      	mov	r2, r1
 8007226:	62ba      	str	r2, [r7, #40]	; 0x28
 8007228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800722a:	4413      	add	r3, r2
 800722c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800722e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007230:	2200      	movs	r2, #0
 8007232:	61bb      	str	r3, [r7, #24]
 8007234:	61fa      	str	r2, [r7, #28]
 8007236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800723a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800723e:	f7f8 fffb 	bl	8000238 <__aeabi_uldivmod>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4613      	mov	r3, r2
 8007248:	63fb      	str	r3, [r7, #60]	; 0x3c
 800724a:	e053      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800724c:	4b35      	ldr	r3, [pc, #212]	; (8007324 <HAL_RCC_GetSysClockFreq+0x180>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	099b      	lsrs	r3, r3, #6
 8007252:	2200      	movs	r2, #0
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	617a      	str	r2, [r7, #20]
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800725e:	f04f 0b00 	mov.w	fp, #0
 8007262:	4652      	mov	r2, sl
 8007264:	465b      	mov	r3, fp
 8007266:	f04f 0000 	mov.w	r0, #0
 800726a:	f04f 0100 	mov.w	r1, #0
 800726e:	0159      	lsls	r1, r3, #5
 8007270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007274:	0150      	lsls	r0, r2, #5
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	ebb2 080a 	subs.w	r8, r2, sl
 800727e:	eb63 090b 	sbc.w	r9, r3, fp
 8007282:	f04f 0200 	mov.w	r2, #0
 8007286:	f04f 0300 	mov.w	r3, #0
 800728a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800728e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007292:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007296:	ebb2 0408 	subs.w	r4, r2, r8
 800729a:	eb63 0509 	sbc.w	r5, r3, r9
 800729e:	f04f 0200 	mov.w	r2, #0
 80072a2:	f04f 0300 	mov.w	r3, #0
 80072a6:	00eb      	lsls	r3, r5, #3
 80072a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072ac:	00e2      	lsls	r2, r4, #3
 80072ae:	4614      	mov	r4, r2
 80072b0:	461d      	mov	r5, r3
 80072b2:	eb14 030a 	adds.w	r3, r4, sl
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	eb45 030b 	adc.w	r3, r5, fp
 80072bc:	607b      	str	r3, [r7, #4]
 80072be:	f04f 0200 	mov.w	r2, #0
 80072c2:	f04f 0300 	mov.w	r3, #0
 80072c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072ca:	4629      	mov	r1, r5
 80072cc:	028b      	lsls	r3, r1, #10
 80072ce:	4621      	mov	r1, r4
 80072d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072d4:	4621      	mov	r1, r4
 80072d6:	028a      	lsls	r2, r1, #10
 80072d8:	4610      	mov	r0, r2
 80072da:	4619      	mov	r1, r3
 80072dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072de:	2200      	movs	r2, #0
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	60fa      	str	r2, [r7, #12]
 80072e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072e8:	f7f8 ffa6 	bl	8000238 <__aeabi_uldivmod>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4613      	mov	r3, r2
 80072f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80072f4:	4b0b      	ldr	r3, [pc, #44]	; (8007324 <HAL_RCC_GetSysClockFreq+0x180>)
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	0c1b      	lsrs	r3, r3, #16
 80072fa:	f003 0303 	and.w	r3, r3, #3
 80072fe:	3301      	adds	r3, #1
 8007300:	005b      	lsls	r3, r3, #1
 8007302:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007304:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	fbb2 f3f3 	udiv	r3, r2, r3
 800730c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800730e:	e002      	b.n	8007316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <HAL_RCC_GetSysClockFreq+0x184>)
 8007312:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007318:	4618      	mov	r0, r3
 800731a:	3740      	adds	r7, #64	; 0x40
 800731c:	46bd      	mov	sp, r7
 800731e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007322:	bf00      	nop
 8007324:	40023800 	.word	0x40023800
 8007328:	00f42400 	.word	0x00f42400
 800732c:	017d7840 	.word	0x017d7840

08007330 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007334:	4b03      	ldr	r3, [pc, #12]	; (8007344 <HAL_RCC_GetHCLKFreq+0x14>)
 8007336:	681b      	ldr	r3, [r3, #0]
}
 8007338:	4618      	mov	r0, r3
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	20000000 	.word	0x20000000

08007348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800734c:	f7ff fff0 	bl	8007330 <HAL_RCC_GetHCLKFreq>
 8007350:	4602      	mov	r2, r0
 8007352:	4b05      	ldr	r3, [pc, #20]	; (8007368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	0a9b      	lsrs	r3, r3, #10
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	4903      	ldr	r1, [pc, #12]	; (800736c <HAL_RCC_GetPCLK1Freq+0x24>)
 800735e:	5ccb      	ldrb	r3, [r1, r3]
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	40023800 	.word	0x40023800
 800736c:	0800bfc8 	.word	0x0800bfc8

08007370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007374:	f7ff ffdc 	bl	8007330 <HAL_RCC_GetHCLKFreq>
 8007378:	4602      	mov	r2, r0
 800737a:	4b05      	ldr	r3, [pc, #20]	; (8007390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	0b5b      	lsrs	r3, r3, #13
 8007380:	f003 0307 	and.w	r3, r3, #7
 8007384:	4903      	ldr	r1, [pc, #12]	; (8007394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007386:	5ccb      	ldrb	r3, [r1, r3]
 8007388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800738c:	4618      	mov	r0, r3
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40023800 	.word	0x40023800
 8007394:	0800bfc8 	.word	0x0800bfc8

08007398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80073ac:	2300      	movs	r3, #0
 80073ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d012      	beq.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073c0:	4b69      	ldr	r3, [pc, #420]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	4a68      	ldr	r2, [pc, #416]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80073ca:	6093      	str	r3, [r2, #8]
 80073cc:	4b66      	ldr	r3, [pc, #408]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d4:	4964      	ldr	r1, [pc, #400]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d101      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80073e2:	2301      	movs	r3, #1
 80073e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d017      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073f2:	4b5d      	ldr	r3, [pc, #372]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007400:	4959      	ldr	r1, [pc, #356]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007410:	d101      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007412:	2301      	movs	r3, #1
 8007414:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800741e:	2301      	movs	r3, #1
 8007420:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d017      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800742e:	4b4e      	ldr	r3, [pc, #312]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007434:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	494a      	ldr	r1, [pc, #296]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743e:	4313      	orrs	r3, r2
 8007440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800744c:	d101      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800744e:	2301      	movs	r3, #1
 8007450:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	d101      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800745a:	2301      	movs	r3, #1
 800745c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800746a:	2301      	movs	r3, #1
 800746c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0320 	and.w	r3, r3, #32
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 808b 	beq.w	8007592 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800747c:	4b3a      	ldr	r3, [pc, #232]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	4a39      	ldr	r2, [pc, #228]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007486:	6413      	str	r3, [r2, #64]	; 0x40
 8007488:	4b37      	ldr	r3, [pc, #220]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800748a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007490:	60bb      	str	r3, [r7, #8]
 8007492:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007494:	4b35      	ldr	r3, [pc, #212]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a34      	ldr	r2, [pc, #208]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800749a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800749e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a0:	f7fc fc52 	bl	8003d48 <HAL_GetTick>
 80074a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a8:	f7fc fc4e 	bl	8003d48 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b64      	cmp	r3, #100	; 0x64
 80074b4:	d901      	bls.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e38f      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074ba:	4b2c      	ldr	r3, [pc, #176]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d0f0      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074c6:	4b28      	ldr	r3, [pc, #160]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d035      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d02e      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074e4:	4b20      	ldr	r3, [pc, #128]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074ee:	4b1e      	ldr	r3, [pc, #120]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f2:	4a1d      	ldr	r2, [pc, #116]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074fa:	4b1b      	ldr	r3, [pc, #108]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fe:	4a1a      	ldr	r2, [pc, #104]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007504:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007506:	4a18      	ldr	r2, [pc, #96]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800750c:	4b16      	ldr	r3, [pc, #88]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800750e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b01      	cmp	r3, #1
 8007516:	d114      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007518:	f7fc fc16 	bl	8003d48 <HAL_GetTick>
 800751c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800751e:	e00a      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007520:	f7fc fc12 	bl	8003d48 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	f241 3288 	movw	r2, #5000	; 0x1388
 800752e:	4293      	cmp	r3, r2
 8007530:	d901      	bls.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e351      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007536:	4b0c      	ldr	r3, [pc, #48]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0ee      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800754a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800754e:	d111      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007550:	4b05      	ldr	r3, [pc, #20]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800755c:	4b04      	ldr	r3, [pc, #16]	; (8007570 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800755e:	400b      	ands	r3, r1
 8007560:	4901      	ldr	r1, [pc, #4]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007562:	4313      	orrs	r3, r2
 8007564:	608b      	str	r3, [r1, #8]
 8007566:	e00b      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007568:	40023800 	.word	0x40023800
 800756c:	40007000 	.word	0x40007000
 8007570:	0ffffcff 	.word	0x0ffffcff
 8007574:	4bac      	ldr	r3, [pc, #688]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	4aab      	ldr	r2, [pc, #684]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800757a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800757e:	6093      	str	r3, [r2, #8]
 8007580:	4ba9      	ldr	r3, [pc, #676]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800758c:	49a6      	ldr	r1, [pc, #664]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800758e:	4313      	orrs	r3, r2
 8007590:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0310 	and.w	r3, r3, #16
 800759a:	2b00      	cmp	r3, #0
 800759c:	d010      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800759e:	4ba2      	ldr	r3, [pc, #648]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075a4:	4aa0      	ldr	r2, [pc, #640]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80075ae:	4b9e      	ldr	r3, [pc, #632]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	499b      	ldr	r1, [pc, #620]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00a      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075cc:	4b96      	ldr	r3, [pc, #600]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075da:	4993      	ldr	r1, [pc, #588]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075ee:	4b8e      	ldr	r3, [pc, #568]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075fc:	498a      	ldr	r1, [pc, #552]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007610:	4b85      	ldr	r3, [pc, #532]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800761e:	4982      	ldr	r1, [pc, #520]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007620:	4313      	orrs	r3, r2
 8007622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007632:	4b7d      	ldr	r3, [pc, #500]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007638:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007640:	4979      	ldr	r1, [pc, #484]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007642:	4313      	orrs	r3, r2
 8007644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007654:	4b74      	ldr	r3, [pc, #464]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765a:	f023 0203 	bic.w	r2, r3, #3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007662:	4971      	ldr	r1, [pc, #452]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007664:	4313      	orrs	r3, r2
 8007666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007676:	4b6c      	ldr	r3, [pc, #432]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767c:	f023 020c 	bic.w	r2, r3, #12
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007684:	4968      	ldr	r1, [pc, #416]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007686:	4313      	orrs	r3, r2
 8007688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007698:	4b63      	ldr	r3, [pc, #396]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800769a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076a6:	4960      	ldr	r1, [pc, #384]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076ba:	4b5b      	ldr	r3, [pc, #364]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c8:	4957      	ldr	r1, [pc, #348]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00a      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076dc:	4b52      	ldr	r3, [pc, #328]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ea:	494f      	ldr	r1, [pc, #316]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80076fe:	4b4a      	ldr	r3, [pc, #296]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007704:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800770c:	4946      	ldr	r1, [pc, #280]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00a      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007720:	4b41      	ldr	r3, [pc, #260]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007726:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800772e:	493e      	ldr	r1, [pc, #248]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007742:	4b39      	ldr	r3, [pc, #228]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007748:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007750:	4935      	ldr	r1, [pc, #212]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007752:	4313      	orrs	r3, r2
 8007754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00a      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007764:	4b30      	ldr	r3, [pc, #192]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800776a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007772:	492d      	ldr	r1, [pc, #180]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007774:	4313      	orrs	r3, r2
 8007776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d011      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007786:	4b28      	ldr	r3, [pc, #160]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007794:	4924      	ldr	r1, [pc, #144]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007796:	4313      	orrs	r3, r2
 8007798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077a4:	d101      	bne.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80077a6:	2301      	movs	r3, #1
 80077a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0308 	and.w	r3, r3, #8
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80077b6:	2301      	movs	r3, #1
 80077b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077c6:	4b18      	ldr	r3, [pc, #96]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d4:	4914      	ldr	r1, [pc, #80]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00b      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077e8:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f8:	490b      	ldr	r1, [pc, #44]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00f      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800780e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007812:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800781c:	4902      	ldr	r1, [pc, #8]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800781e:	4313      	orrs	r3, r2
 8007820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007824:	e002      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007826:	bf00      	nop
 8007828:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007838:	4b8a      	ldr	r3, [pc, #552]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800783a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800783e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007848:	4986      	ldr	r1, [pc, #536]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00b      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800785c:	4b81      	ldr	r3, [pc, #516]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800785e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007862:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800786c:	497d      	ldr	r1, [pc, #500]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800786e:	4313      	orrs	r3, r2
 8007870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	2b01      	cmp	r3, #1
 8007878:	d006      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 80d6 	beq.w	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007888:	4b76      	ldr	r3, [pc, #472]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a75      	ldr	r2, [pc, #468]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800788e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007894:	f7fc fa58 	bl	8003d48 <HAL_GetTick>
 8007898:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800789a:	e008      	b.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800789c:	f7fc fa54 	bl	8003d48 <HAL_GetTick>
 80078a0:	4602      	mov	r2, r0
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	1ad3      	subs	r3, r2, r3
 80078a6:	2b64      	cmp	r3, #100	; 0x64
 80078a8:	d901      	bls.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e195      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078ae:	4b6d      	ldr	r3, [pc, #436]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1f0      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d021      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d11d      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80078ce:	4b65      	ldr	r3, [pc, #404]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d4:	0c1b      	lsrs	r3, r3, #16
 80078d6:	f003 0303 	and.w	r3, r3, #3
 80078da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80078dc:	4b61      	ldr	r3, [pc, #388]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078e2:	0e1b      	lsrs	r3, r3, #24
 80078e4:	f003 030f 	and.w	r3, r3, #15
 80078e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	019a      	lsls	r2, r3, #6
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	041b      	lsls	r3, r3, #16
 80078f4:	431a      	orrs	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	061b      	lsls	r3, r3, #24
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	071b      	lsls	r3, r3, #28
 8007902:	4958      	ldr	r1, [pc, #352]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d004      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800791a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800791e:	d00a      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007928:	2b00      	cmp	r3, #0
 800792a:	d02e      	beq.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007934:	d129      	bne.n	800798a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007936:	4b4b      	ldr	r3, [pc, #300]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007944:	4b47      	ldr	r3, [pc, #284]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800794a:	0f1b      	lsrs	r3, r3, #28
 800794c:	f003 0307 	and.w	r3, r3, #7
 8007950:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	019a      	lsls	r2, r3, #6
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	041b      	lsls	r3, r3, #16
 800795c:	431a      	orrs	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	061b      	lsls	r3, r3, #24
 8007964:	431a      	orrs	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	071b      	lsls	r3, r3, #28
 800796a:	493e      	ldr	r1, [pc, #248]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800796c:	4313      	orrs	r3, r2
 800796e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007972:	4b3c      	ldr	r3, [pc, #240]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007978:	f023 021f 	bic.w	r2, r3, #31
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	3b01      	subs	r3, #1
 8007982:	4938      	ldr	r1, [pc, #224]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007984:	4313      	orrs	r3, r2
 8007986:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007992:	2b00      	cmp	r3, #0
 8007994:	d01d      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007996:	4b33      	ldr	r3, [pc, #204]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800799c:	0e1b      	lsrs	r3, r3, #24
 800799e:	f003 030f 	and.w	r3, r3, #15
 80079a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80079a4:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079aa:	0f1b      	lsrs	r3, r3, #28
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	019a      	lsls	r2, r3, #6
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	041b      	lsls	r3, r3, #16
 80079be:	431a      	orrs	r2, r3
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	061b      	lsls	r3, r3, #24
 80079c4:	431a      	orrs	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	071b      	lsls	r3, r3, #28
 80079ca:	4926      	ldr	r1, [pc, #152]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d011      	beq.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	019a      	lsls	r2, r3, #6
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	041b      	lsls	r3, r3, #16
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	061b      	lsls	r3, r3, #24
 80079f2:	431a      	orrs	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	071b      	lsls	r3, r3, #28
 80079fa:	491a      	ldr	r1, [pc, #104]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a02:	4b18      	ldr	r3, [pc, #96]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a17      	ldr	r2, [pc, #92]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a0e:	f7fc f99b 	bl	8003d48 <HAL_GetTick>
 8007a12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a14:	e008      	b.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a16:	f7fc f997 	bl	8003d48 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b64      	cmp	r3, #100	; 0x64
 8007a22:	d901      	bls.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e0d8      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a28:	4b0e      	ldr	r3, [pc, #56]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0f0      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	f040 80ce 	bne.w	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a3c:	4b09      	ldr	r3, [pc, #36]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a08      	ldr	r2, [pc, #32]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a48:	f7fc f97e 	bl	8003d48 <HAL_GetTick>
 8007a4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a4e:	e00b      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a50:	f7fc f97a 	bl	8003d48 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	2b64      	cmp	r3, #100	; 0x64
 8007a5c:	d904      	bls.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a5e:	2303      	movs	r3, #3
 8007a60:	e0bb      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007a62:	bf00      	nop
 8007a64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a68:	4b5e      	ldr	r3, [pc, #376]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a74:	d0ec      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d009      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d02e      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d12a      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a9e:	4b51      	ldr	r3, [pc, #324]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa4:	0c1b      	lsrs	r3, r3, #16
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007aac:	4b4d      	ldr	r3, [pc, #308]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab2:	0f1b      	lsrs	r3, r3, #28
 8007ab4:	f003 0307 	and.w	r3, r3, #7
 8007ab8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	019a      	lsls	r2, r3, #6
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	699b      	ldr	r3, [r3, #24]
 8007aca:	061b      	lsls	r3, r3, #24
 8007acc:	431a      	orrs	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	071b      	lsls	r3, r3, #28
 8007ad2:	4944      	ldr	r1, [pc, #272]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007ada:	4b42      	ldr	r3, [pc, #264]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	021b      	lsls	r3, r3, #8
 8007aec:	493d      	ldr	r1, [pc, #244]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d022      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b08:	d11d      	bne.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b0a:	4b36      	ldr	r3, [pc, #216]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b10:	0e1b      	lsrs	r3, r3, #24
 8007b12:	f003 030f 	and.w	r3, r3, #15
 8007b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b18:	4b32      	ldr	r3, [pc, #200]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1e:	0f1b      	lsrs	r3, r3, #28
 8007b20:	f003 0307 	and.w	r3, r3, #7
 8007b24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	019a      	lsls	r2, r3, #6
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	041b      	lsls	r3, r3, #16
 8007b32:	431a      	orrs	r2, r3
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	061b      	lsls	r3, r3, #24
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	071b      	lsls	r3, r3, #28
 8007b3e:	4929      	ldr	r1, [pc, #164]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0308 	and.w	r3, r3, #8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d028      	beq.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b52:	4b24      	ldr	r3, [pc, #144]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b58:	0e1b      	lsrs	r3, r3, #24
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007b60:	4b20      	ldr	r3, [pc, #128]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b66:	0c1b      	lsrs	r3, r3, #16
 8007b68:	f003 0303 	and.w	r3, r3, #3
 8007b6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	019a      	lsls	r2, r3, #6
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	041b      	lsls	r3, r3, #16
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	061b      	lsls	r3, r3, #24
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	071b      	lsls	r3, r3, #28
 8007b86:	4917      	ldr	r1, [pc, #92]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007b8e:	4b15      	ldr	r3, [pc, #84]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9c:	4911      	ldr	r1, [pc, #68]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ba4:	4b0f      	ldr	r3, [pc, #60]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a0e      	ldr	r2, [pc, #56]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bb0:	f7fc f8ca 	bl	8003d48 <HAL_GetTick>
 8007bb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bb6:	e008      	b.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007bb8:	f7fc f8c6 	bl	8003d48 <HAL_GetTick>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	2b64      	cmp	r3, #100	; 0x64
 8007bc4:	d901      	bls.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bc6:	2303      	movs	r3, #3
 8007bc8:	e007      	b.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bca:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bd6:	d1ef      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3720      	adds	r7, #32
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40023800 	.word	0x40023800

08007be8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007c06:	f040 80a3 	bne.w	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007c0a:	4ba8      	ldr	r3, [pc, #672]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c10:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007c18:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c20:	f000 808a 	beq.w	8007d38 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007c2a:	f200 8093 	bhi.w	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c34:	d07d      	beq.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c3c:	f200 808a 	bhi.w	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d004      	beq.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c4c:	d039      	beq.n	8007cc2 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007c4e:	e081      	b.n	8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007c50:	4b96      	ldr	r3, [pc, #600]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d108      	bne.n	8007c6e <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c5c:	4b93      	ldr	r3, [pc, #588]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c64:	4a92      	ldr	r2, [pc, #584]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6a:	613b      	str	r3, [r7, #16]
 8007c6c:	e007      	b.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007c6e:	4b8f      	ldr	r3, [pc, #572]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c76:	4a8f      	ldr	r2, [pc, #572]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c7c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007c7e:	4b8b      	ldr	r3, [pc, #556]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c84:	0e1b      	lsrs	r3, r3, #24
 8007c86:	f003 030f 	and.w	r3, r3, #15
 8007c8a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007c8c:	4b87      	ldr	r3, [pc, #540]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c92:	099b      	lsrs	r3, r3, #6
 8007c94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c98:	693a      	ldr	r2, [r7, #16]
 8007c9a:	fb03 f202 	mul.w	r2, r3, r2
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca4:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007ca6:	4b81      	ldr	r3, [pc, #516]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cac:	0a1b      	lsrs	r3, r3, #8
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbe:	617b      	str	r3, [r7, #20]
        break;
 8007cc0:	e049      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007cc2:	4b7a      	ldr	r3, [pc, #488]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d108      	bne.n	8007ce0 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007cce:	4b77      	ldr	r3, [pc, #476]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cd6:	4a76      	ldr	r2, [pc, #472]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	e007      	b.n	8007cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007ce0:	4b72      	ldr	r3, [pc, #456]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ce8:	4a72      	ldr	r2, [pc, #456]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cee:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007cf0:	4b6e      	ldr	r3, [pc, #440]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cf6:	0e1b      	lsrs	r3, r3, #24
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007cfe:	4b6b      	ldr	r3, [pc, #428]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d04:	099b      	lsrs	r3, r3, #6
 8007d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	fb03 f202 	mul.w	r2, r3, r2
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d16:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007d18:	4b64      	ldr	r3, [pc, #400]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d1e:	f003 031f 	and.w	r3, r3, #31
 8007d22:	3301      	adds	r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2e:	617b      	str	r3, [r7, #20]
        break;
 8007d30:	e011      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d32:	4b61      	ldr	r3, [pc, #388]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007d34:	617b      	str	r3, [r7, #20]
        break;
 8007d36:	e00e      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007d38:	4b5c      	ldr	r3, [pc, #368]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d102      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8007d44:	4b5a      	ldr	r3, [pc, #360]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007d46:	617b      	str	r3, [r7, #20]
        break;
 8007d48:	e005      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8007d4a:	4b5a      	ldr	r3, [pc, #360]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d4c:	617b      	str	r3, [r7, #20]
        break;
 8007d4e:	e002      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8007d50:	bf00      	nop
 8007d52:	e000      	b.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8007d54:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d5c:	f040 80a3 	bne.w	8007ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007d60:	4b52      	ldr	r3, [pc, #328]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007d62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d66:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007d6e:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007d76:	f000 808a 	beq.w	8007e8e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007d80:	f200 809c 	bhi.w	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d8a:	d07d      	beq.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007d92:	f200 8093 	bhi.w	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d004      	beq.n	8007da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007da2:	d039      	beq.n	8007e18 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007da4:	e08a      	b.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007da6:	4b41      	ldr	r3, [pc, #260]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d108      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007db2:	4b3e      	ldr	r3, [pc, #248]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dba:	4a3d      	ldr	r2, [pc, #244]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	e007      	b.n	8007dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007dc4:	4b39      	ldr	r3, [pc, #228]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dcc:	4a39      	ldr	r2, [pc, #228]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007dd4:	4b35      	ldr	r3, [pc, #212]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dda:	0e1b      	lsrs	r3, r3, #24
 8007ddc:	f003 030f 	and.w	r3, r3, #15
 8007de0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007de2:	4b32      	ldr	r3, [pc, #200]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007de8:	099b      	lsrs	r3, r3, #6
 8007dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	fb03 f202 	mul.w	r2, r3, r2
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfa:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007dfc:	4b2b      	ldr	r3, [pc, #172]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e02:	0a1b      	lsrs	r3, r3, #8
 8007e04:	f003 031f 	and.w	r3, r3, #31
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e14:	617b      	str	r3, [r7, #20]
        break;
 8007e16:	e052      	b.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007e18:	4b24      	ldr	r3, [pc, #144]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d108      	bne.n	8007e36 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007e24:	4b21      	ldr	r3, [pc, #132]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e2c:	4a20      	ldr	r2, [pc, #128]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	e007      	b.n	8007e46 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007e36:	4b1d      	ldr	r3, [pc, #116]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e3e:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e44:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007e46:	4b19      	ldr	r3, [pc, #100]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e4c:	0e1b      	lsrs	r3, r3, #24
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007e54:	4b15      	ldr	r3, [pc, #84]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e5a:	099b      	lsrs	r3, r3, #6
 8007e5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	fb03 f202 	mul.w	r2, r3, r2
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007e6e:	4b0f      	ldr	r3, [pc, #60]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e74:	f003 031f 	and.w	r3, r3, #31
 8007e78:	3301      	adds	r3, #1
 8007e7a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007e7c:	697a      	ldr	r2, [r7, #20]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e84:	617b      	str	r3, [r7, #20]
        break;
 8007e86:	e01a      	b.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e88:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007e8a:	617b      	str	r3, [r7, #20]
        break;
 8007e8c:	e017      	b.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007e8e:	4b07      	ldr	r3, [pc, #28]	; (8007eac <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d102      	bne.n	8007ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007e9c:	617b      	str	r3, [r7, #20]
        break;
 8007e9e:	e00e      	b.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8007ea0:	4b04      	ldr	r3, [pc, #16]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007ea2:	617b      	str	r3, [r7, #20]
        break;
 8007ea4:	e00b      	b.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 8007ea6:	bf00      	nop
 8007ea8:	e009      	b.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007eaa:	bf00      	nop
 8007eac:	40023800 	.word	0x40023800
 8007eb0:	00f42400 	.word	0x00f42400
 8007eb4:	017d7840 	.word	0x017d7840
 8007eb8:	00bb8000 	.word	0x00bb8000
        break;
 8007ebc:	bf00      	nop

  return frequency;
 8007ebe:	697b      	ldr	r3, [r7, #20]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	371c      	adds	r7, #28
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e071      	b.n	8007fc6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	7f5b      	ldrb	r3, [r3, #29]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d105      	bne.n	8007ef8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7f9 fc72 	bl	80017dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f003 0310 	and.w	r3, r3, #16
 8007f08:	2b10      	cmp	r3, #16
 8007f0a:	d053      	beq.n	8007fb4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	22ca      	movs	r2, #202	; 0xca
 8007f12:	625a      	str	r2, [r3, #36]	; 0x24
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2253      	movs	r2, #83	; 0x53
 8007f1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f881 	bl	8008024 <RTC_EnterInitMode>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d12a      	bne.n	8007f82 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	6899      	ldr	r1, [r3, #8]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	4b26      	ldr	r3, [pc, #152]	; (8007fd0 <HAL_RTC_Init+0x104>)
 8007f38:	400b      	ands	r3, r1
 8007f3a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6899      	ldr	r1, [r3, #8]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685a      	ldr	r2, [r3, #4]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	431a      	orrs	r2, r3
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	68d2      	ldr	r2, [r2, #12]
 8007f62:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6919      	ldr	r1, [r3, #16]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	041a      	lsls	r2, r3, #16
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f88a 	bl	8008092 <RTC_ExitInitMode>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d110      	bne.n	8007faa <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f022 0208 	bic.w	r2, r2, #8
 8007f96:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	699a      	ldr	r2, [r3, #24]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	22ff      	movs	r2, #255	; 0xff
 8007fb0:	625a      	str	r2, [r3, #36]	; 0x24
 8007fb2:	e001      	b.n	8007fb8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007fb8:	7bfb      	ldrb	r3, [r7, #15]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d102      	bne.n	8007fc4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	ff8fffbf 	.word	0xff8fffbf

08007fd4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68da      	ldr	r2, [r3, #12]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007fee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ff0:	f7fb feaa 	bl	8003d48 <HAL_GetTick>
 8007ff4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007ff6:	e009      	b.n	800800c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ff8:	f7fb fea6 	bl	8003d48 <HAL_GetTick>
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008006:	d901      	bls.n	800800c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e007      	b.n	800801c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68db      	ldr	r3, [r3, #12]
 8008012:	f003 0320 	and.w	r3, r3, #32
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0ee      	beq.n	8007ff8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008030:	2300      	movs	r3, #0
 8008032:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	d122      	bne.n	8008088 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008050:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008052:	f7fb fe79 	bl	8003d48 <HAL_GetTick>
 8008056:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008058:	e00c      	b.n	8008074 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800805a:	f7fb fe75 	bl	8003d48 <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008068:	d904      	bls.n	8008074 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2204      	movs	r2, #4
 800806e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807e:	2b00      	cmp	r3, #0
 8008080:	d102      	bne.n	8008088 <RTC_EnterInitMode+0x64>
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	2b01      	cmp	r3, #1
 8008086:	d1e8      	bne.n	800805a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080ac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f003 0320 	and.w	r3, r3, #32
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10a      	bne.n	80080d2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7ff ff89 	bl	8007fd4 <HAL_RTC_WaitForSynchro>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2204      	movs	r2, #4
 80080cc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3710      	adds	r7, #16
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80080e8:	2300      	movs	r3, #0
 80080ea:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e156      	b.n	80083a8 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d106      	bne.n	8008114 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7f9 ff62 	bl	8001fd8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fa5f 	bl	80085e0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d00c      	beq.n	8008144 <HAL_SAI_Init+0x68>
 800812a:	2b02      	cmp	r3, #2
 800812c:	d80d      	bhi.n	800814a <HAL_SAI_Init+0x6e>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <HAL_SAI_Init+0x5c>
 8008132:	2b01      	cmp	r3, #1
 8008134:	d003      	beq.n	800813e <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008136:	e008      	b.n	800814a <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008138:	2300      	movs	r3, #0
 800813a:	61fb      	str	r3, [r7, #28]
      break;
 800813c:	e006      	b.n	800814c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800813e:	2310      	movs	r3, #16
 8008140:	61fb      	str	r3, [r7, #28]
      break;
 8008142:	e003      	b.n	800814c <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008144:	2320      	movs	r3, #32
 8008146:	61fb      	str	r3, [r7, #28]
      break;
 8008148:	e000      	b.n	800814c <HAL_SAI_Init+0x70>
      break;
 800814a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	2b03      	cmp	r3, #3
 8008152:	d81e      	bhi.n	8008192 <HAL_SAI_Init+0xb6>
 8008154:	a201      	add	r2, pc, #4	; (adr r2, 800815c <HAL_SAI_Init+0x80>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	0800816d 	.word	0x0800816d
 8008160:	08008173 	.word	0x08008173
 8008164:	0800817b 	.word	0x0800817b
 8008168:	08008183 	.word	0x08008183
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008170:	e010      	b.n	8008194 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008176:	617b      	str	r3, [r7, #20]
    }
    break;
 8008178:	e00c      	b.n	8008194 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800817a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800817e:	617b      	str	r3, [r7, #20]
    }
    break;
 8008180:	e008      	b.n	8008194 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008182:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008186:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f043 0301 	orr.w	r3, r3, #1
 800818e:	61fb      	str	r3, [r7, #28]
    }
    break;
 8008190:	e000      	b.n	8008194 <HAL_SAI_Init+0xb8>
    default:
      break;
 8008192:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a85      	ldr	r2, [pc, #532]	; (80083b0 <HAL_SAI_Init+0x2d4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d004      	beq.n	80081a8 <HAL_SAI_Init+0xcc>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a84      	ldr	r2, [pc, #528]	; (80083b4 <HAL_SAI_Init+0x2d8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d103      	bne.n	80081b0 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80081a8:	4a83      	ldr	r2, [pc, #524]	; (80083b8 <HAL_SAI_Init+0x2dc>)
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	e002      	b.n	80081b6 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80081b0:	4a82      	ldr	r2, [pc, #520]	; (80083bc <HAL_SAI_Init+0x2e0>)
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d04c      	beq.n	8008258 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a7a      	ldr	r2, [pc, #488]	; (80083b0 <HAL_SAI_Init+0x2d4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d004      	beq.n	80081d6 <HAL_SAI_Init+0xfa>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a78      	ldr	r2, [pc, #480]	; (80083b4 <HAL_SAI_Init+0x2d8>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d104      	bne.n	80081e0 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80081d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80081da:	f7ff fd05 	bl	8007be8 <HAL_RCCEx_GetPeriphCLKFreq>
 80081de:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a76      	ldr	r2, [pc, #472]	; (80083c0 <HAL_SAI_Init+0x2e4>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d004      	beq.n	80081f4 <HAL_SAI_Init+0x118>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a75      	ldr	r2, [pc, #468]	; (80083c4 <HAL_SAI_Init+0x2e8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d104      	bne.n	80081fe <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80081f4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80081f8:	f7ff fcf6 	bl	8007be8 <HAL_RCCEx_GetPeriphCLKFreq>
 80081fc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	461a      	mov	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	025b      	lsls	r3, r3, #9
 8008210:	fbb2 f3f3 	udiv	r3, r2, r3
 8008214:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	4a6b      	ldr	r2, [pc, #428]	; (80083c8 <HAL_SAI_Init+0x2ec>)
 800821a:	fba2 2303 	umull	r2, r3, r2, r3
 800821e:	08da      	lsrs	r2, r3, #3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008224:	68f9      	ldr	r1, [r7, #12]
 8008226:	4b68      	ldr	r3, [pc, #416]	; (80083c8 <HAL_SAI_Init+0x2ec>)
 8008228:	fba3 2301 	umull	r2, r3, r3, r1
 800822c:	08da      	lsrs	r2, r3, #3
 800822e:	4613      	mov	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	1aca      	subs	r2, r1, r3
 8008238:	2a08      	cmp	r2, #8
 800823a:	d904      	bls.n	8008246 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	1c5a      	adds	r2, r3, #1
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824a:	2b04      	cmp	r3, #4
 800824c:	d104      	bne.n	8008258 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	085a      	lsrs	r2, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <HAL_SAI_Init+0x18c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	2b02      	cmp	r3, #2
 8008266:	d109      	bne.n	800827c <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826c:	2b01      	cmp	r3, #1
 800826e:	d101      	bne.n	8008274 <HAL_SAI_Init+0x198>
 8008270:	2300      	movs	r3, #0
 8008272:	e001      	b.n	8008278 <HAL_SAI_Init+0x19c>
 8008274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008278:	61bb      	str	r3, [r7, #24]
 800827a:	e008      	b.n	800828e <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d102      	bne.n	800828a <HAL_SAI_Init+0x1ae>
 8008284:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008288:	e000      	b.n	800828c <HAL_SAI_Init+0x1b0>
 800828a:	2300      	movs	r3, #0
 800828c:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	6819      	ldr	r1, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	4b4c      	ldr	r3, [pc, #304]	; (80083cc <HAL_SAI_Init+0x2f0>)
 800829a:	400b      	ands	r3, r1
 800829c:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6819      	ldr	r1, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ac:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80082b2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b8:	431a      	orrs	r2, r3
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 80082c6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80082d2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	051b      	lsls	r3, r3, #20
 80082da:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	430a      	orrs	r2, r1
 80082e2:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6859      	ldr	r1, [r3, #4]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	4b38      	ldr	r3, [pc, #224]	; (80083d0 <HAL_SAI_Init+0x2f4>)
 80082f0:	400b      	ands	r3, r1
 80082f2:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	6859      	ldr	r1, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008302:	431a      	orrs	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	431a      	orrs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6899      	ldr	r1, [r3, #8]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b2d      	ldr	r3, [pc, #180]	; (80083d4 <HAL_SAI_Init+0x2f8>)
 800831e:	400b      	ands	r3, r1
 8008320:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6899      	ldr	r1, [r3, #8]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008332:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008338:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800833e:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008344:	3b01      	subs	r3, #1
 8008346:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008348:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	430a      	orrs	r2, r1
 8008350:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68d9      	ldr	r1, [r3, #12]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	f24f 0320 	movw	r3, #61472	; 0xf020
 8008360:	400b      	ands	r3, r1
 8008362:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68d9      	ldr	r1, [r3, #12]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008372:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008378:	041b      	lsls	r3, r3, #16
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008380:	3b01      	subs	r3, #1
 8008382:	021b      	lsls	r3, r3, #8
 8008384:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	430a      	orrs	r2, r1
 800838c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3720      	adds	r7, #32
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	40015804 	.word	0x40015804
 80083b4:	40015824 	.word	0x40015824
 80083b8:	40015800 	.word	0x40015800
 80083bc:	40015c00 	.word	0x40015c00
 80083c0:	40015c04 	.word	0x40015c04
 80083c4:	40015c24 	.word	0x40015c24
 80083c8:	cccccccd 	.word	0xcccccccd
 80083cc:	ff05c010 	.word	0xff05c010
 80083d0:	ffff1ff0 	.word	0xffff1ff0
 80083d4:	fff88000 	.word	0xfff88000

080083d8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80083e6:	f7fb fcaf 	bl	8003d48 <HAL_GetTick>
 80083ea:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <HAL_SAI_Transmit_DMA+0x20>
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e093      	b.n	8008524 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008402:	b2db      	uxtb	r3, r3
 8008404:	2b01      	cmp	r3, #1
 8008406:	f040 808c 	bne.w	8008522 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <HAL_SAI_Transmit_DMA+0x40>
 8008414:	2302      	movs	r3, #2
 8008416:	e085      	b.n	8008524 <HAL_SAI_Transmit_DMA+0x14c>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	88fa      	ldrh	r2, [r7, #6]
 800842a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	88fa      	ldrh	r2, [r7, #6]
 8008432:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2212      	movs	r2, #18
 8008442:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800844a:	4a38      	ldr	r2, [pc, #224]	; (800852c <HAL_SAI_Transmit_DMA+0x154>)
 800844c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008452:	4a37      	ldr	r2, [pc, #220]	; (8008530 <HAL_SAI_Transmit_DMA+0x158>)
 8008454:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800845a:	4a36      	ldr	r2, [pc, #216]	; (8008534 <HAL_SAI_Transmit_DMA+0x15c>)
 800845c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008462:	2200      	movs	r2, #0
 8008464:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800846e:	4619      	mov	r1, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	331c      	adds	r3, #28
 8008476:	461a      	mov	r2, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800847e:	f7fc fb61 	bl	8004b44 <HAL_DMA_Start_IT>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d005      	beq.n	8008494 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	e047      	b.n	8008524 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008494:	2100      	movs	r1, #0
 8008496:	68f8      	ldr	r0, [r7, #12]
 8008498:	f000 f86c 	bl	8008574 <SAI_InterruptFlag>
 800849c:	4601      	mov	r1, r0
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	691a      	ldr	r2, [r3, #16]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	430a      	orrs	r2, r1
 80084aa:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80084ba:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80084bc:	e015      	b.n	80084ea <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80084be:	f7fb fc43 	bl	8003d48 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084cc:	d90d      	bls.n	80084ea <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e01c      	b.n	8008524 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d0e2      	beq.n	80084be <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d107      	bne.n	8008516 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008514:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	e000      	b.n	8008524 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8008522:	2302      	movs	r3, #2
  }
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	080086b1 	.word	0x080086b1
 8008530:	08008651 	.word	0x08008651
 8008534:	080086cd 	.word	0x080086cd

08008538 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008574:	b480      	push	{r7}
 8008576:	b085      	sub	sp, #20
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 800857e:	2301      	movs	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d103      	bne.n	8008590 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f043 0308 	orr.w	r3, r3, #8
 800858e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008594:	2b08      	cmp	r3, #8
 8008596:	d10b      	bne.n	80085b0 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800859c:	2b03      	cmp	r3, #3
 800859e:	d003      	beq.n	80085a8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d103      	bne.n	80085b0 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f043 0310 	orr.w	r3, r3, #16
 80085ae:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d003      	beq.n	80085c0 <SAI_InterruptFlag+0x4c>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d104      	bne.n	80085ca <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80085c6:	60fb      	str	r3, [r7, #12]
 80085c8:	e003      	b.n	80085d2 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f043 0304 	orr.w	r3, r3, #4
 80085d0:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80085d2:	68fb      	ldr	r3, [r7, #12]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 80085e8:	4b17      	ldr	r3, [pc, #92]	; (8008648 <SAI_Disable+0x68>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a17      	ldr	r2, [pc, #92]	; (800864c <SAI_Disable+0x6c>)
 80085ee:	fba2 2303 	umull	r2, r3, r2, r3
 80085f2:	0b1b      	lsrs	r3, r3, #12
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800860a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	1e5a      	subs	r2, r3, #1
 8008610:	60fa      	str	r2, [r7, #12]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10a      	bne.n	800862c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800861c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	72fb      	strb	r3, [r7, #11]
      break;
 800862a:	e006      	b.n	800863a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e8      	bne.n	800860c <SAI_Disable+0x2c>

  return status;
 800863a:	7afb      	ldrb	r3, [r7, #11]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	20000000 	.word	0x20000000
 800864c:	95cbec1b 	.word	0x95cbec1b

08008650 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008666:	d01c      	beq.n	80086a2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2200      	movs	r2, #0
 800866c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800867e:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008680:	2100      	movs	r1, #0
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f7ff ff76 	bl	8008574 <SAI_InterruptFlag>
 8008688:	4603      	mov	r3, r0
 800868a:	43d9      	mvns	r1, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	691a      	ldr	r2, [r3, #16]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	400a      	ands	r2, r1
 8008698:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2201      	movs	r2, #1
 800869e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f7ff ff48 	bl	8008538 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80086a8:	bf00      	nop
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f7ff ff44 	bl	800854c <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80086c4:	bf00      	nop
 80086c6:	3710      	adds	r7, #16
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d004      	beq.n	80086fe <SAI_DMAError+0x32>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d112      	bne.n	8008724 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800870c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff ff66 	bl	80085e0 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f7ff ff1b 	bl	8008560 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800872a:	bf00      	nop
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e022      	b.n	800878a <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800874a:	b2db      	uxtb	r3, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	d105      	bne.n	800875c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7f9 f86e 	bl	8001838 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2203      	movs	r2, #3
 8008760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 f815 	bl	8008794 <HAL_SD_InitCard>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e00a      	b.n	800878a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
	...

08008794 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008794:	b5b0      	push	{r4, r5, r7, lr}
 8008796:	b08e      	sub	sp, #56	; 0x38
 8008798:	af04      	add	r7, sp, #16
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800879c:	2300      	movs	r3, #0
 800879e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80087a8:	2300      	movs	r3, #0
 80087aa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80087ac:	2300      	movs	r3, #0
 80087ae:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80087b0:	2376      	movs	r3, #118	; 0x76
 80087b2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681d      	ldr	r5, [r3, #0]
 80087b8:	466c      	mov	r4, sp
 80087ba:	f107 0314 	add.w	r3, r7, #20
 80087be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80087c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087cc:	4628      	mov	r0, r5
 80087ce:	f002 f89b 	bl	800a908 <SDMMC_Init>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80087d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e059      	b.n	8008898 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087f2:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f002 f8cf 	bl	800a99c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800880c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800880e:	2002      	movs	r0, #2
 8008810:	f7fb faa6 	bl	8003d60 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fff3 	bl	8009800 <SD_PowerON>
 800881a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00b      	beq.n	800883a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800882e:	6a3b      	ldr	r3, [r7, #32]
 8008830:	431a      	orrs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e02e      	b.n	8008898 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 ff12 	bl	8009664 <SD_InitCard>
 8008840:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008842:	6a3b      	ldr	r3, [r7, #32]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00b      	beq.n	8008860 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	431a      	orrs	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e01b      	b.n	8008898 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008868:	4618      	mov	r0, r3
 800886a:	f002 f929 	bl	800aac0 <SDMMC_CmdBlockLength>
 800886e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008870:	6a3b      	ldr	r3, [r7, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00f      	beq.n	8008896 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <HAL_SD_InitCard+0x10c>)
 800887c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	431a      	orrs	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008896:	2300      	movs	r3, #0
}
 8008898:	4618      	mov	r0, r3
 800889a:	3728      	adds	r7, #40	; 0x28
 800889c:	46bd      	mov	sp, r7
 800889e:	bdb0      	pop	{r4, r5, r7, pc}
 80088a0:	004005ff 	.word	0x004005ff

080088a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b08c      	sub	sp, #48	; 0x30
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	60f8      	str	r0, [r7, #12]
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	607a      	str	r2, [r7, #4]
 80088b0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d107      	bne.n	80088cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e0c3      	b.n	8008a54 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	f040 80bc 	bne.w	8008a52 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80088e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	441a      	add	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d907      	bls.n	80088fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e0aa      	b.n	8008a54 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2203      	movs	r2, #3
 8008902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2200      	movs	r2, #0
 800890c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800891c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	4a4e      	ldr	r2, [pc, #312]	; (8008a5c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008924:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	4a4d      	ldr	r2, [pc, #308]	; (8008a60 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800892c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008932:	2200      	movs	r2, #0
 8008934:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	2200      	movs	r2, #0
 800893c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	3380      	adds	r3, #128	; 0x80
 8008964:	4619      	mov	r1, r3
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	025b      	lsls	r3, r3, #9
 800896c:	089b      	lsrs	r3, r3, #2
 800896e:	f7fc f8e9 	bl	8004b44 <HAL_DMA_Start_IT>
 8008972:	4603      	mov	r3, r0
 8008974:	2b00      	cmp	r3, #0
 8008976:	d017      	beq.n	80089a8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008986:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a35      	ldr	r2, [pc, #212]	; (8008a64 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800898e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008994:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	e055      	b.n	8008a54 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f042 0208 	orr.w	r2, r2, #8
 80089b6:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d002      	beq.n	80089c6 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	025b      	lsls	r3, r3, #9
 80089c4:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80089c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089ca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	025b      	lsls	r3, r3, #9
 80089d0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80089d2:	2390      	movs	r3, #144	; 0x90
 80089d4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80089d6:	2302      	movs	r3, #2
 80089d8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80089da:	2300      	movs	r3, #0
 80089dc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80089de:	2301      	movs	r3, #1
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f107 0210 	add.w	r2, r7, #16
 80089ea:	4611      	mov	r1, r2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f002 f83b 	bl	800aa68 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d90a      	bls.n	8008a0e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2282      	movs	r2, #130	; 0x82
 80089fc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a04:	4618      	mov	r0, r3
 8008a06:	f002 f89f 	bl	800ab48 <SDMMC_CmdReadMultiBlock>
 8008a0a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008a0c:	e009      	b.n	8008a22 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2281      	movs	r2, #129	; 0x81
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f002 f872 	bl	800ab04 <SDMMC_CmdReadSingleBlock>
 8008a20:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d012      	beq.n	8008a4e <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a0d      	ldr	r2, [pc, #52]	; (8008a64 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a36:	431a      	orrs	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e002      	b.n	8008a54 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e000      	b.n	8008a54 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008a52:	2302      	movs	r3, #2
  }
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3730      	adds	r7, #48	; 0x30
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	08009473 	.word	0x08009473
 8008a60:	080094e5 	.word	0x080094e5
 8008a64:	004005ff 	.word	0x004005ff

08008a68 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08c      	sub	sp, #48	; 0x30
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d107      	bne.n	8008a90 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e0c6      	b.n	8008c1e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	f040 80bf 	bne.w	8008c1c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	441a      	add	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d907      	bls.n	8008ac2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e0ad      	b.n	8008c1e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2203      	movs	r2, #3
 8008ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f042 021a 	orr.w	r2, r2, #26
 8008ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae6:	4a50      	ldr	r2, [pc, #320]	; (8008c28 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008ae8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aee:	4a4f      	ldr	r2, [pc, #316]	; (8008c2c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008af0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008af6:	2200      	movs	r2, #0
 8008af8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d002      	beq.n	8008b08 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b04:	025b      	lsls	r3, r3, #9
 8008b06:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d90a      	bls.n	8008b24 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	22a0      	movs	r2, #160	; 0xa0
 8008b12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f002 f858 	bl	800abd0 <SDMMC_CmdWriteMultiBlock>
 8008b20:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008b22:	e009      	b.n	8008b38 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2290      	movs	r2, #144	; 0x90
 8008b28:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b30:	4618      	mov	r0, r3
 8008b32:	f002 f82b 	bl	800ab8c <SDMMC_CmdWriteSingleBlock>
 8008b36:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d012      	beq.n	8008b64 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a3b      	ldr	r2, [pc, #236]	; (8008c30 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008b44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e05c      	b.n	8008c1e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f042 0208 	orr.w	r2, r2, #8
 8008b72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b78:	2240      	movs	r2, #64	; 0x40
 8008b7a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	430a      	orrs	r2, r1
 8008b96:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008b9c:	68b9      	ldr	r1, [r7, #8]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3380      	adds	r3, #128	; 0x80
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	025b      	lsls	r3, r3, #9
 8008baa:	089b      	lsrs	r3, r3, #2
 8008bac:	f7fb ffca 	bl	8004b44 <HAL_DMA_Start_IT>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d01a      	beq.n	8008bec <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 021a 	bic.w	r2, r2, #26
 8008bc4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a19      	ldr	r2, [pc, #100]	; (8008c30 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008bcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008be8:	2301      	movs	r3, #1
 8008bea:	e018      	b.n	8008c1e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bf0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	025b      	lsls	r3, r3, #9
 8008bf6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008bf8:	2390      	movs	r3, #144	; 0x90
 8008bfa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008c04:	2301      	movs	r3, #1
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f107 0210 	add.w	r2, r7, #16
 8008c10:	4611      	mov	r1, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f001 ff28 	bl	800aa68 <SDMMC_ConfigData>

      return HAL_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	e000      	b.n	8008c1e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008c1c:	2302      	movs	r3, #2
  }
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3730      	adds	r7, #48	; 0x30
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	08009449 	.word	0x08009449
 8008c2c:	080094e5 	.word	0x080094e5
 8008c30:	004005ff 	.word	0x004005ff

08008c34 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c40:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d008      	beq.n	8008c62 <HAL_SD_IRQHandler+0x2e>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f003 0308 	and.w	r3, r3, #8
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 ffef 	bl	8009c3e <SD_Read_IT>
 8008c60:	e15a      	b.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 808d 	beq.w	8008d8c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c7a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	4b9a      	ldr	r3, [pc, #616]	; (8008ef0 <HAL_SD_IRQHandler+0x2bc>)
 8008c88:	400b      	ands	r3, r1
 8008c8a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f003 0308 	and.w	r3, r3, #8
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d039      	beq.n	8008d1a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d104      	bne.n	8008cba <HAL_SD_IRQHandler+0x86>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f003 0320 	and.w	r3, r3, #32
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d011      	beq.n	8008cde <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 ffa8 	bl	800ac14 <SDMMC_CmdStopTransfer>
 8008cc4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d008      	beq.n	8008cde <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f921 	bl	8008f20 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ce6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d104      	bne.n	8008d0a <HAL_SD_IRQHandler+0xd6>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f003 0302 	and.w	r3, r3, #2
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f002 ff04 	bl	800bb18 <HAL_SD_RxCpltCallback>
 8008d10:	e102      	b.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f002 fef6 	bl	800bb04 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008d18:	e0fe      	b.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 80f9 	beq.w	8008f18 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f003 0320 	and.w	r3, r3, #32
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d011      	beq.n	8008d54 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f001 ff6d 	bl	800ac14 <SDMMC_CmdStopTransfer>
 8008d3a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d008      	beq.n	8008d54 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	431a      	orrs	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f8e6 	bl	8008f20 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f003 0301 	and.w	r3, r3, #1
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f040 80dc 	bne.w	8008f18 <HAL_SD_IRQHandler+0x2e4>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f040 80d6 	bne.w	8008f18 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 0208 	bic.w	r2, r2, #8
 8008d7a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f002 febd 	bl	800bb04 <HAL_SD_TxCpltCallback>
}
 8008d8a:	e0c5      	b.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d008      	beq.n	8008dac <HAL_SD_IRQHandler+0x178>
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f003 0308 	and.w	r3, r3, #8
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f000 ff9b 	bl	8009ce0 <SD_Write_IT>
 8008daa:	e0b5      	b.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 80ae 	beq.w	8008f18 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc2:	f003 0302 	and.w	r3, r3, #2
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d005      	beq.n	8008dd6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dce:	f043 0202 	orr.w	r2, r3, #2
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ddc:	f003 0308 	and.w	r3, r3, #8
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d005      	beq.n	8008df0 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de8:	f043 0208 	orr.w	r2, r3, #8
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008df6:	f003 0320 	and.w	r3, r3, #32
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d005      	beq.n	8008e0a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	f043 0220 	orr.w	r2, r3, #32
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d005      	beq.n	8008e24 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1c:	f043 0210 	orr.w	r2, r3, #16
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e2c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008e3c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f001 fee6 	bl	800ac14 <SDMMC_CmdStopTransfer>
 8008e48:	4602      	mov	r2, r0
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f003 0308 	and.w	r3, r3, #8
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f857 	bl	8008f20 <HAL_SD_ErrorCallback>
}
 8008e72:	e051      	b.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d04c      	beq.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f003 0310 	and.w	r3, r3, #16
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d104      	bne.n	8008e92 <HAL_SD_IRQHandler+0x25e>
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f003 0320 	and.w	r3, r3, #32
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d011      	beq.n	8008eb6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e96:	4a17      	ldr	r2, [pc, #92]	; (8008ef4 <HAL_SD_IRQHandler+0x2c0>)
 8008e98:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fb feb0 	bl	8004c04 <HAL_DMA_Abort_IT>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d036      	beq.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 fb6a 	bl	8009588 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008eb4:	e030      	b.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d104      	bne.n	8008eca <HAL_SD_IRQHandler+0x296>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d018      	beq.n	8008efc <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	4a0a      	ldr	r2, [pc, #40]	; (8008ef8 <HAL_SD_IRQHandler+0x2c4>)
 8008ed0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fb fe94 	bl	8004c04 <HAL_DMA_Abort_IT>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d01a      	beq.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fb85 	bl	80095f6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008eec:	e014      	b.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
 8008eee:	bf00      	nop
 8008ef0:	ffff3ec5 	.word	0xffff3ec5
 8008ef4:	08009589 	.word	0x08009589
 8008ef8:	080095f7 	.word	0x080095f7
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f002 fded 	bl	800baf0 <HAL_SD_AbortCallback>
}
 8008f16:	e7ff      	b.n	8008f18 <HAL_SD_IRQHandler+0x2e4>
 8008f18:	bf00      	nop
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f42:	0f9b      	lsrs	r3, r3, #30
 8008f44:	b2da      	uxtb	r2, r3
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f4e:	0e9b      	lsrs	r3, r3, #26
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	f003 030f 	and.w	r3, r3, #15
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f60:	0e1b      	lsrs	r3, r3, #24
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f72:	0c1b      	lsrs	r3, r3, #16
 8008f74:	b2da      	uxtb	r2, r3
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f7e:	0a1b      	lsrs	r3, r3, #8
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f8a:	b2da      	uxtb	r2, r3
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f94:	0d1b      	lsrs	r3, r3, #20
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fa0:	0c1b      	lsrs	r3, r3, #16
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	f003 030f 	and.w	r3, r3, #15
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fb2:	0bdb      	lsrs	r3, r3, #15
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	f003 0301 	and.w	r3, r3, #1
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fc4:	0b9b      	lsrs	r3, r3, #14
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	b2da      	uxtb	r2, r3
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd6:	0b5b      	lsrs	r3, r3, #13
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe8:	0b1b      	lsrs	r3, r3, #12
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009000:	2b00      	cmp	r3, #0
 8009002:	d163      	bne.n	80090cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009008:	009a      	lsls	r2, r3, #2
 800900a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800900e:	4013      	ands	r3, r2
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009014:	0f92      	lsrs	r2, r2, #30
 8009016:	431a      	orrs	r2, r3
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009020:	0edb      	lsrs	r3, r3, #27
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 0307 	and.w	r3, r3, #7
 8009028:	b2da      	uxtb	r2, r3
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009032:	0e1b      	lsrs	r3, r3, #24
 8009034:	b2db      	uxtb	r3, r3
 8009036:	f003 0307 	and.w	r3, r3, #7
 800903a:	b2da      	uxtb	r2, r3
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009044:	0d5b      	lsrs	r3, r3, #21
 8009046:	b2db      	uxtb	r3, r3
 8009048:	f003 0307 	and.w	r3, r3, #7
 800904c:	b2da      	uxtb	r2, r3
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009056:	0c9b      	lsrs	r3, r3, #18
 8009058:	b2db      	uxtb	r3, r3
 800905a:	f003 0307 	and.w	r3, r3, #7
 800905e:	b2da      	uxtb	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009068:	0bdb      	lsrs	r3, r3, #15
 800906a:	b2db      	uxtb	r3, r3
 800906c:	f003 0307 	and.w	r3, r3, #7
 8009070:	b2da      	uxtb	r2, r3
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	7e1b      	ldrb	r3, [r3, #24]
 8009084:	b2db      	uxtb	r3, r3
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	3302      	adds	r3, #2
 800908c:	2201      	movs	r2, #1
 800908e:	fa02 f303 	lsl.w	r3, r2, r3
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009096:	fb03 f202 	mul.w	r2, r3, r2
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	7a1b      	ldrb	r3, [r3, #8]
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	f003 030f 	and.w	r3, r3, #15
 80090a8:	2201      	movs	r2, #1
 80090aa:	409a      	lsls	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80090b8:	0a52      	lsrs	r2, r2, #9
 80090ba:	fb03 f202 	mul.w	r2, r3, r2
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090c8:	661a      	str	r2, [r3, #96]	; 0x60
 80090ca:	e031      	b.n	8009130 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d11d      	bne.n	8009110 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090d8:	041b      	lsls	r3, r3, #16
 80090da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e2:	0c1b      	lsrs	r3, r3, #16
 80090e4:	431a      	orrs	r2, r3
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	3301      	adds	r3, #1
 80090f0:	029a      	lsls	r2, r3, #10
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009104:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	661a      	str	r2, [r3, #96]	; 0x60
 800910e:	e00f      	b.n	8009130 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a58      	ldr	r2, [pc, #352]	; (8009278 <HAL_SD_GetCardCSD+0x344>)
 8009116:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e09d      	b.n	800926c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009134:	0b9b      	lsrs	r3, r3, #14
 8009136:	b2db      	uxtb	r3, r3
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	b2da      	uxtb	r2, r3
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009146:	09db      	lsrs	r3, r3, #7
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800914e:	b2da      	uxtb	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009158:	b2db      	uxtb	r3, r3
 800915a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800915e:	b2da      	uxtb	r2, r3
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009168:	0fdb      	lsrs	r3, r3, #31
 800916a:	b2da      	uxtb	r2, r3
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009174:	0f5b      	lsrs	r3, r3, #29
 8009176:	b2db      	uxtb	r3, r3
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	b2da      	uxtb	r2, r3
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009186:	0e9b      	lsrs	r3, r3, #26
 8009188:	b2db      	uxtb	r3, r3
 800918a:	f003 0307 	and.w	r3, r3, #7
 800918e:	b2da      	uxtb	r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009198:	0d9b      	lsrs	r3, r3, #22
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f003 030f 	and.w	r3, r3, #15
 80091a0:	b2da      	uxtb	r2, r3
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091aa:	0d5b      	lsrs	r3, r3, #21
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c6:	0c1b      	lsrs	r3, r3, #16
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091da:	0bdb      	lsrs	r3, r3, #15
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	b2da      	uxtb	r2, r3
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ee:	0b9b      	lsrs	r3, r3, #14
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	f003 0301 	and.w	r3, r3, #1
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009202:	0b5b      	lsrs	r3, r3, #13
 8009204:	b2db      	uxtb	r3, r3
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	b2da      	uxtb	r2, r3
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009216:	0b1b      	lsrs	r3, r3, #12
 8009218:	b2db      	uxtb	r3, r3
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	b2da      	uxtb	r2, r3
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922a:	0a9b      	lsrs	r3, r3, #10
 800922c:	b2db      	uxtb	r3, r3
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	b2da      	uxtb	r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800923e:	0a1b      	lsrs	r3, r3, #8
 8009240:	b2db      	uxtb	r3, r3
 8009242:	f003 0303 	and.w	r3, r3, #3
 8009246:	b2da      	uxtb	r2, r3
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009252:	085b      	lsrs	r3, r3, #1
 8009254:	b2db      	uxtb	r3, r3
 8009256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800925a:	b2da      	uxtb	r2, r3
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	004005ff 	.word	0x004005ff

0800927c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80092c6:	2300      	movs	r3, #0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80092d4:	b5b0      	push	{r4, r5, r7, lr}
 80092d6:	b08e      	sub	sp, #56	; 0x38
 80092d8:	af04      	add	r7, sp, #16
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2203      	movs	r2, #3
 80092e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f0:	2b03      	cmp	r3, #3
 80092f2:	d02e      	beq.n	8009352 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092fa:	d106      	bne.n	800930a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009300:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	639a      	str	r2, [r3, #56]	; 0x38
 8009308:	e029      	b.n	800935e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009310:	d10a      	bne.n	8009328 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fb2a 	bl	800996c <SD_WideBus_Enable>
 8009318:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	431a      	orrs	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	639a      	str	r2, [r3, #56]	; 0x38
 8009326:	e01a      	b.n	800935e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d10a      	bne.n	8009344 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fb67 	bl	8009a02 <SD_WideBus_Disable>
 8009334:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800933a:	6a3b      	ldr	r3, [r7, #32]
 800933c:	431a      	orrs	r2, r3
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	639a      	str	r2, [r3, #56]	; 0x38
 8009342:	e00c      	b.n	800935e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009348:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	639a      	str	r2, [r3, #56]	; 0x38
 8009350:	e005      	b.n	800935e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009356:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00b      	beq.n	800937e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a26      	ldr	r2, [pc, #152]	; (8009404 <HAL_SD_ConfigWideBusOperation+0x130>)
 800936c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800937c:	e01f      	b.n	80093be <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	689b      	ldr	r3, [r3, #8]
 8009388:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	699b      	ldr	r3, [r3, #24]
 800939e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681d      	ldr	r5, [r3, #0]
 80093a4:	466c      	mov	r4, sp
 80093a6:	f107 0314 	add.w	r3, r7, #20
 80093aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093b2:	f107 0308 	add.w	r3, r7, #8
 80093b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093b8:	4628      	mov	r0, r5
 80093ba:	f001 faa5 	bl	800a908 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 fb7a 	bl	800aac0 <SDMMC_CmdBlockLength>
 80093cc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00c      	beq.n	80093ee <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a0a      	ldr	r2, [pc, #40]	; (8009404 <HAL_SD_ConfigWideBusOperation+0x130>)
 80093da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	431a      	orrs	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80093f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3728      	adds	r7, #40	; 0x28
 80093fe:	46bd      	mov	sp, r7
 8009400:	bdb0      	pop	{r4, r5, r7, pc}
 8009402:	bf00      	nop
 8009404:	004005ff 	.word	0x004005ff

08009408 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b086      	sub	sp, #24
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009414:	f107 030c 	add.w	r3, r7, #12
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa7e 	bl	800991c <SD_SendStatus>
 8009420:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d005      	beq.n	8009434 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	431a      	orrs	r2, r3
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	0a5b      	lsrs	r3, r3, #9
 8009438:	f003 030f 	and.w	r3, r3, #15
 800943c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800943e:	693b      	ldr	r3, [r7, #16]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009448:	b480      	push	{r7}
 800944a:	b085      	sub	sp, #20
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009464:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009466:	bf00      	nop
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009484:	2b82      	cmp	r3, #130	; 0x82
 8009486:	d111      	bne.n	80094ac <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4618      	mov	r0, r3
 800948e:	f001 fbc1 	bl	800ac14 <SDMMC_CmdStopTransfer>
 8009492:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d008      	beq.n	80094ac <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	431a      	orrs	r2, r3
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80094a6:	68f8      	ldr	r0, [r7, #12]
 80094a8:	f7ff fd3a 	bl	8008f20 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f022 0208 	bic.w	r2, r2, #8
 80094ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f240 523a 	movw	r2, #1338	; 0x53a
 80094c4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	2201      	movs	r2, #1
 80094ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80094d4:	68f8      	ldr	r0, [r7, #12]
 80094d6:	f002 fb1f 	bl	800bb18 <HAL_SD_RxCpltCallback>
#endif
}
 80094da:	bf00      	nop
 80094dc:	3710      	adds	r7, #16
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
	...

080094e4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7fb fd32 	bl	8004f5c <HAL_DMA_GetError>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d03e      	beq.n	800957c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009504:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800950a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d002      	beq.n	800951a <SD_DMAError+0x36>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2b01      	cmp	r3, #1
 8009518:	d12d      	bne.n	8009576 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a19      	ldr	r2, [pc, #100]	; (8009584 <SD_DMAError+0xa0>)
 8009520:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009530:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009536:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800953e:	6978      	ldr	r0, [r7, #20]
 8009540:	f7ff ff62 	bl	8009408 <HAL_SD_GetCardState>
 8009544:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	2b06      	cmp	r3, #6
 800954a:	d002      	beq.n	8009552 <SD_DMAError+0x6e>
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	2b05      	cmp	r3, #5
 8009550:	d10a      	bne.n	8009568 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4618      	mov	r0, r3
 8009558:	f001 fb5c 	bl	800ac14 <SDMMC_CmdStopTransfer>
 800955c:	4602      	mov	r2, r0
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009562:	431a      	orrs	r2, r3
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	2200      	movs	r2, #0
 8009574:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009576:	6978      	ldr	r0, [r7, #20]
 8009578:	f7ff fcd2 	bl	8008f20 <HAL_SD_ErrorCallback>
#endif
  }
}
 800957c:	bf00      	nop
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	004005ff 	.word	0x004005ff

08009588 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009594:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f240 523a 	movw	r2, #1338	; 0x53a
 800959e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f7ff ff31 	bl	8009408 <HAL_SD_GetCardState>
 80095a6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2201      	movs	r2, #1
 80095ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	2b06      	cmp	r3, #6
 80095ba:	d002      	beq.n	80095c2 <SD_DMATxAbort+0x3a>
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b05      	cmp	r3, #5
 80095c0:	d10a      	bne.n	80095d8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f001 fb24 	bl	800ac14 <SDMMC_CmdStopTransfer>
 80095cc:	4602      	mov	r2, r0
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d2:	431a      	orrs	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d103      	bne.n	80095e8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f002 fa85 	bl	800baf0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80095e6:	e002      	b.n	80095ee <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f7ff fc99 	bl	8008f20 <HAL_SD_ErrorCallback>
}
 80095ee:	bf00      	nop
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b084      	sub	sp, #16
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009602:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f240 523a 	movw	r2, #1338	; 0x53a
 800960c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f7ff fefa 	bl	8009408 <HAL_SD_GetCardState>
 8009614:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	2b06      	cmp	r3, #6
 8009628:	d002      	beq.n	8009630 <SD_DMARxAbort+0x3a>
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	2b05      	cmp	r3, #5
 800962e:	d10a      	bne.n	8009646 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4618      	mov	r0, r3
 8009636:	f001 faed 	bl	800ac14 <SDMMC_CmdStopTransfer>
 800963a:	4602      	mov	r2, r0
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009640:	431a      	orrs	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964a:	2b00      	cmp	r3, #0
 800964c:	d103      	bne.n	8009656 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f002 fa4e 	bl	800baf0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009654:	e002      	b.n	800965c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f7ff fc62 	bl	8008f20 <HAL_SD_ErrorCallback>
}
 800965c:	bf00      	nop
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009664:	b5b0      	push	{r4, r5, r7, lr}
 8009666:	b094      	sub	sp, #80	; 0x50
 8009668:	af04      	add	r7, sp, #16
 800966a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800966c:	2301      	movs	r3, #1
 800966e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4618      	mov	r0, r3
 8009676:	f001 f99f 	bl	800a9b8 <SDMMC_GetPowerState>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d102      	bne.n	8009686 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009680:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009684:	e0b8      	b.n	80097f8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800968a:	2b03      	cmp	r3, #3
 800968c:	d02f      	beq.n	80096ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4618      	mov	r0, r3
 8009694:	f001 fbc9 	bl	800ae2a <SDMMC_CmdSendCID>
 8009698:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800969a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <SD_InitCard+0x40>
    {
      return errorstate;
 80096a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096a2:	e0a9      	b.n	80097f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2100      	movs	r1, #0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f001 f9c9 	bl	800aa42 <SDMMC_GetResponse>
 80096b0:	4602      	mov	r2, r0
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2104      	movs	r1, #4
 80096bc:	4618      	mov	r0, r3
 80096be:	f001 f9c0 	bl	800aa42 <SDMMC_GetResponse>
 80096c2:	4602      	mov	r2, r0
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2108      	movs	r1, #8
 80096ce:	4618      	mov	r0, r3
 80096d0:	f001 f9b7 	bl	800aa42 <SDMMC_GetResponse>
 80096d4:	4602      	mov	r2, r0
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	210c      	movs	r1, #12
 80096e0:	4618      	mov	r0, r3
 80096e2:	f001 f9ae 	bl	800aa42 <SDMMC_GetResponse>
 80096e6:	4602      	mov	r2, r0
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d00d      	beq.n	8009712 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f107 020e 	add.w	r2, r7, #14
 80096fe:	4611      	mov	r1, r2
 8009700:	4618      	mov	r0, r3
 8009702:	f001 fbcf 	bl	800aea4 <SDMMC_CmdSetRelAdd>
 8009706:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <SD_InitCard+0xae>
    {
      return errorstate;
 800970e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009710:	e072      	b.n	80097f8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009716:	2b03      	cmp	r3, #3
 8009718:	d036      	beq.n	8009788 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800971a:	89fb      	ldrh	r3, [r7, #14]
 800971c:	461a      	mov	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800972a:	041b      	lsls	r3, r3, #16
 800972c:	4619      	mov	r1, r3
 800972e:	4610      	mov	r0, r2
 8009730:	f001 fb99 	bl	800ae66 <SDMMC_CmdSendCSD>
 8009734:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009736:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <SD_InitCard+0xdc>
    {
      return errorstate;
 800973c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800973e:	e05b      	b.n	80097f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2100      	movs	r1, #0
 8009746:	4618      	mov	r0, r3
 8009748:	f001 f97b 	bl	800aa42 <SDMMC_GetResponse>
 800974c:	4602      	mov	r2, r0
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2104      	movs	r1, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f001 f972 	bl	800aa42 <SDMMC_GetResponse>
 800975e:	4602      	mov	r2, r0
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2108      	movs	r1, #8
 800976a:	4618      	mov	r0, r3
 800976c:	f001 f969 	bl	800aa42 <SDMMC_GetResponse>
 8009770:	4602      	mov	r2, r0
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	210c      	movs	r1, #12
 800977c:	4618      	mov	r0, r3
 800977e:	f001 f960 	bl	800aa42 <SDMMC_GetResponse>
 8009782:	4602      	mov	r2, r0
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2104      	movs	r1, #4
 800978e:	4618      	mov	r0, r3
 8009790:	f001 f957 	bl	800aa42 <SDMMC_GetResponse>
 8009794:	4603      	mov	r3, r0
 8009796:	0d1a      	lsrs	r2, r3, #20
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800979c:	f107 0310 	add.w	r3, r7, #16
 80097a0:	4619      	mov	r1, r3
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7ff fbc6 	bl	8008f34 <HAL_SD_GetCardCSD>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d002      	beq.n	80097b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097b2:	e021      	b.n	80097f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6819      	ldr	r1, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097bc:	041b      	lsls	r3, r3, #16
 80097be:	2200      	movs	r2, #0
 80097c0:	461c      	mov	r4, r3
 80097c2:	4615      	mov	r5, r2
 80097c4:	4622      	mov	r2, r4
 80097c6:	462b      	mov	r3, r5
 80097c8:	4608      	mov	r0, r1
 80097ca:	f001 fa45 	bl	800ac58 <SDMMC_CmdSelDesel>
 80097ce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80097d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <SD_InitCard+0x176>
  {
    return errorstate;
 80097d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d8:	e00e      	b.n	80097f8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681d      	ldr	r5, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	466c      	mov	r4, sp
 80097e2:	f103 0210 	add.w	r2, r3, #16
 80097e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80097e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80097ec:	3304      	adds	r3, #4
 80097ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097f0:	4628      	mov	r0, r5
 80097f2:	f001 f889 	bl	800a908 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3740      	adds	r7, #64	; 0x40
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bdb0      	pop	{r4, r5, r7, pc}

08009800 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	2300      	movs	r3, #0
 8009812:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4618      	mov	r0, r3
 800981a:	f001 fa40 	bl	800ac9e <SDMMC_CmdGoIdleState>
 800981e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d001      	beq.n	800982a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	e072      	b.n	8009910 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4618      	mov	r0, r3
 8009830:	f001 fa53 	bl	800acda <SDMMC_CmdOperCond>
 8009834:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00d      	beq.n	8009858 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4618      	mov	r0, r3
 8009848:	f001 fa29 	bl	800ac9e <SDMMC_CmdGoIdleState>
 800984c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d004      	beq.n	800985e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	e05b      	b.n	8009910 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009862:	2b01      	cmp	r3, #1
 8009864:	d137      	bne.n	80098d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	2100      	movs	r1, #0
 800986c:	4618      	mov	r0, r3
 800986e:	f001 fa53 	bl	800ad18 <SDMMC_CmdAppCommand>
 8009872:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d02d      	beq.n	80098d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800987a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800987e:	e047      	b.n	8009910 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	2100      	movs	r1, #0
 8009886:	4618      	mov	r0, r3
 8009888:	f001 fa46 	bl	800ad18 <SDMMC_CmdAppCommand>
 800988c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <SD_PowerON+0x98>
    {
      return errorstate;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	e03b      	b.n	8009910 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	491e      	ldr	r1, [pc, #120]	; (8009918 <SD_PowerON+0x118>)
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 fa5c 	bl	800ad5c <SDMMC_CmdAppOperCommand>
 80098a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80098b0:	e02e      	b.n	8009910 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2100      	movs	r1, #0
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 f8c2 	bl	800aa42 <SDMMC_GetResponse>
 80098be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	0fdb      	lsrs	r3, r3, #31
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d101      	bne.n	80098cc <SD_PowerON+0xcc>
 80098c8:	2301      	movs	r3, #1
 80098ca:	e000      	b.n	80098ce <SD_PowerON+0xce>
 80098cc:	2300      	movs	r3, #0
 80098ce:	613b      	str	r3, [r7, #16]

    count++;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	3301      	adds	r3, #1
 80098d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80098dc:	4293      	cmp	r3, r2
 80098de:	d802      	bhi.n	80098e6 <SD_PowerON+0xe6>
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d0cc      	beq.n	8009880 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d902      	bls.n	80098f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80098f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098f4:	e00c      	b.n	8009910 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80098f6:	697b      	ldr	r3, [r7, #20]
 80098f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	645a      	str	r2, [r3, #68]	; 0x44
 8009906:	e002      	b.n	800990e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	c1100000 	.word	0xc1100000

0800991c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d102      	bne.n	8009932 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800992c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009930:	e018      	b.n	8009964 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800993a:	041b      	lsls	r3, r3, #16
 800993c:	4619      	mov	r1, r3
 800993e:	4610      	mov	r0, r2
 8009940:	f001 fad1 	bl	800aee6 <SDMMC_CmdSendStatus>
 8009944:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d001      	beq.n	8009950 <SD_SendStatus+0x34>
  {
    return errorstate;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	e009      	b.n	8009964 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2100      	movs	r1, #0
 8009956:	4618      	mov	r0, r3
 8009958:	f001 f873 	bl	800aa42 <SDMMC_GetResponse>
 800995c:	4602      	mov	r2, r0
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009962:	2300      	movs	r3, #0
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009974:	2300      	movs	r3, #0
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	2300      	movs	r3, #0
 800997a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2100      	movs	r1, #0
 8009982:	4618      	mov	r0, r3
 8009984:	f001 f85d 	bl	800aa42 <SDMMC_GetResponse>
 8009988:	4603      	mov	r3, r0
 800998a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800998e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009992:	d102      	bne.n	800999a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009994:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009998:	e02f      	b.n	80099fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800999a:	f107 030c 	add.w	r3, r7, #12
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 f879 	bl	8009a98 <SD_FindSCR>
 80099a6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	e023      	b.n	80099fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d01c      	beq.n	80099f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099c4:	041b      	lsls	r3, r3, #16
 80099c6:	4619      	mov	r1, r3
 80099c8:	4610      	mov	r0, r2
 80099ca:	f001 f9a5 	bl	800ad18 <SDMMC_CmdAppCommand>
 80099ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	e00f      	b.n	80099fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2102      	movs	r1, #2
 80099e0:	4618      	mov	r0, r3
 80099e2:	f001 f9df 	bl	800ada4 <SDMMC_CmdBusWidth>
 80099e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	e003      	b.n	80099fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80099f2:	2300      	movs	r3, #0
 80099f4:	e001      	b.n	80099fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3718      	adds	r7, #24
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b086      	sub	sp, #24
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	60fb      	str	r3, [r7, #12]
 8009a0e:	2300      	movs	r3, #0
 8009a10:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2100      	movs	r1, #0
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f001 f812 	bl	800aa42 <SDMMC_GetResponse>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a28:	d102      	bne.n	8009a30 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009a2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a2e:	e02f      	b.n	8009a90 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009a30:	f107 030c 	add.w	r3, r7, #12
 8009a34:	4619      	mov	r1, r3
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f82e 	bl	8009a98 <SD_FindSCR>
 8009a3c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d001      	beq.n	8009a48 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	e023      	b.n	8009a90 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d01c      	beq.n	8009a8c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681a      	ldr	r2, [r3, #0]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a5a:	041b      	lsls	r3, r3, #16
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	4610      	mov	r0, r2
 8009a60:	f001 f95a 	bl	800ad18 <SDMMC_CmdAppCommand>
 8009a64:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	e00f      	b.n	8009a90 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2100      	movs	r1, #0
 8009a76:	4618      	mov	r0, r3
 8009a78:	f001 f994 	bl	800ada4 <SDMMC_CmdBusWidth>
 8009a7c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	e003      	b.n	8009a90 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	e001      	b.n	8009a90 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009a98:	b590      	push	{r4, r7, lr}
 8009a9a:	b08f      	sub	sp, #60	; 0x3c
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009aa2:	f7fa f951 	bl	8003d48 <HAL_GetTick>
 8009aa6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009aac:	2300      	movs	r3, #0
 8009aae:	60bb      	str	r3, [r7, #8]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2108      	movs	r1, #8
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 fffe 	bl	800aac0 <SDMMC_CmdBlockLength>
 8009ac4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d001      	beq.n	8009ad0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ace:	e0b2      	b.n	8009c36 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad8:	041b      	lsls	r3, r3, #16
 8009ada:	4619      	mov	r1, r3
 8009adc:	4610      	mov	r0, r2
 8009ade:	f001 f91b 	bl	800ad18 <SDMMC_CmdAppCommand>
 8009ae2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <SD_FindSCR+0x56>
  {
    return errorstate;
 8009aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aec:	e0a3      	b.n	8009c36 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009af2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009af4:	2308      	movs	r3, #8
 8009af6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009af8:	2330      	movs	r3, #48	; 0x30
 8009afa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009afc:	2302      	movs	r3, #2
 8009afe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009b04:	2301      	movs	r3, #1
 8009b06:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f107 0210 	add.w	r2, r7, #16
 8009b10:	4611      	mov	r1, r2
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 ffa8 	bl	800aa68 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f001 f963 	bl	800ade8 <SDMMC_CmdSendSCR>
 8009b22:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d02a      	beq.n	8009b80 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	e083      	b.n	8009c36 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00f      	beq.n	8009b5c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6819      	ldr	r1, [r3, #0]
 8009b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	f107 0208 	add.w	r2, r7, #8
 8009b48:	18d4      	adds	r4, r2, r3
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	f000 ff08 	bl	800a960 <SDMMC_ReadFIFO>
 8009b50:	4603      	mov	r3, r0
 8009b52:	6023      	str	r3, [r4, #0]
      index++;
 8009b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b56:	3301      	adds	r3, #1
 8009b58:	637b      	str	r3, [r7, #52]	; 0x34
 8009b5a:	e006      	b.n	8009b6a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d012      	beq.n	8009b90 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009b6a:	f7fa f8ed 	bl	8003d48 <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b78:	d102      	bne.n	8009b80 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009b7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b7e:	e05a      	b.n	8009c36 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b86:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0cf      	beq.n	8009b2e <SD_FindSCR+0x96>
 8009b8e:	e000      	b.n	8009b92 <SD_FindSCR+0xfa>
      break;
 8009b90:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b98:	f003 0308 	and.w	r3, r3, #8
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d005      	beq.n	8009bac <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2208      	movs	r2, #8
 8009ba6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ba8:	2308      	movs	r3, #8
 8009baa:	e044      	b.n	8009c36 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb2:	f003 0302 	and.w	r3, r3, #2
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d005      	beq.n	8009bc6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	e037      	b.n	8009c36 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bcc:	f003 0320 	and.w	r3, r3, #32
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2220      	movs	r2, #32
 8009bda:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009bdc:	2320      	movs	r3, #32
 8009bde:	e02a      	b.n	8009c36 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f240 523a 	movw	r2, #1338	; 0x53a
 8009be8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	061a      	lsls	r2, r3, #24
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	021b      	lsls	r3, r3, #8
 8009bf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009bf6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	0a1b      	lsrs	r3, r3, #8
 8009bfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009c00:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	0e1b      	lsrs	r3, r3, #24
 8009c06:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0a:	601a      	str	r2, [r3, #0]
    scr++;
 8009c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0e:	3304      	adds	r3, #4
 8009c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	061a      	lsls	r2, r3, #24
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	021b      	lsls	r3, r3, #8
 8009c1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c1e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	0a1b      	lsrs	r3, r3, #8
 8009c24:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009c28:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	0e1b      	lsrs	r3, r3, #24
 8009c2e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c32:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	373c      	adds	r7, #60	; 0x3c
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd90      	pop	{r4, r7, pc}

08009c3e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b086      	sub	sp, #24
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c4a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c50:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d03f      	beq.n	8009cd8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009c58:	2300      	movs	r3, #0
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	e033      	b.n	8009cc6 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4618      	mov	r0, r3
 8009c64:	f000 fe7c 	bl	800a960 <SDMMC_ReadFIFO>
 8009c68:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3301      	adds	r3, #1
 8009c76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	0a1b      	lsrs	r3, r3, #8
 8009c82:	b2da      	uxtb	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	0c1b      	lsrs	r3, r3, #16
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	0e1b      	lsrs	r3, r3, #24
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	617b      	str	r3, [r7, #20]
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2b07      	cmp	r3, #7
 8009cca:	d9c8      	bls.n	8009c5e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009cd8:	bf00      	nop
 8009cda:	3718      	adds	r7, #24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d043      	beq.n	8009d82 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e037      	b.n	8009d70 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	021a      	lsls	r2, r3, #8
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	3301      	adds	r3, #1
 8009d22:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	041a      	lsls	r2, r3, #16
 8009d30:	68bb      	ldr	r3, [r7, #8]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	3301      	adds	r3, #1
 8009d3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	061a      	lsls	r2, r3, #24
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3301      	adds	r3, #1
 8009d52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	3b01      	subs	r3, #1
 8009d58:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f107 0208 	add.w	r2, r7, #8
 8009d62:	4611      	mov	r1, r2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 fe08 	bl	800a97a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	617b      	str	r3, [r7, #20]
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	2b07      	cmp	r3, #7
 8009d74:	d9c4      	bls.n	8009d00 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68fa      	ldr	r2, [r7, #12]
 8009d7a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	693a      	ldr	r2, [r7, #16]
 8009d80:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009d82:	bf00      	nop
 8009d84:	3718      	adds	r7, #24
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b082      	sub	sp, #8
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e025      	b.n	8009dea <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d106      	bne.n	8009db8 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f7f8 f906 	bl	8001fc4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2202      	movs	r2, #2
 8009dbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	3304      	adds	r3, #4
 8009dc8:	4619      	mov	r1, r3
 8009dca:	4610      	mov	r0, r2
 8009dcc:	f000 fcd6 	bl	800a77c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6818      	ldr	r0, [r3, #0]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	f000 fd2a 	bl	800a834 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2201      	movs	r2, #1
 8009de4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3708      	adds	r7, #8
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
	...

08009df4 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e04c      	b.n	8009ea0 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d106      	bne.n	8009e20 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f7f7 fe1a 	bl	8001a54 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2202      	movs	r2, #2
 8009e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f022 0203 	bic.w	r2, r2, #3
 8009e36:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	4b19      	ldr	r3, [pc, #100]	; (8009ea8 <HAL_SPDIFRX_Init+0xb4>)
 8009e44:	4013      	ands	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009e50:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009e56:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009e5c:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009e62:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009e68:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009e6e:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009e74:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009e7a:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009e80:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	fff88407 	.word	0xfff88407

08009eac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b082      	sub	sp, #8
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d101      	bne.n	8009ebe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e040      	b.n	8009f40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7f7 fe26 	bl	8001b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2224      	movs	r2, #36	; 0x24
 8009ed8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f022 0201 	bic.w	r2, r2, #1
 8009ee8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f82c 	bl	8009f48 <UART_SetConfig>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d101      	bne.n	8009efa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e022      	b.n	8009f40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fa84 	bl	800a410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	685a      	ldr	r2, [r3, #4]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f042 0201 	orr.w	r2, r2, #1
 8009f36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fb0b 	bl	800a554 <UART_CheckIdleState>
 8009f3e:	4603      	mov	r3, r0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	431a      	orrs	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	431a      	orrs	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	4ba6      	ldr	r3, [pc, #664]	; (800a20c <UART_SetConfig+0x2c4>)
 8009f74:	4013      	ands	r3, r2
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	6979      	ldr	r1, [r7, #20]
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68da      	ldr	r2, [r3, #12]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	430a      	orrs	r2, r1
 8009f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	697a      	ldr	r2, [r7, #20]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	697a      	ldr	r2, [r7, #20]
 8009fb6:	430a      	orrs	r2, r1
 8009fb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a94      	ldr	r2, [pc, #592]	; (800a210 <UART_SetConfig+0x2c8>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d120      	bne.n	800a006 <UART_SetConfig+0xbe>
 8009fc4:	4b93      	ldr	r3, [pc, #588]	; (800a214 <UART_SetConfig+0x2cc>)
 8009fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fca:	f003 0303 	and.w	r3, r3, #3
 8009fce:	2b03      	cmp	r3, #3
 8009fd0:	d816      	bhi.n	800a000 <UART_SetConfig+0xb8>
 8009fd2:	a201      	add	r2, pc, #4	; (adr r2, 8009fd8 <UART_SetConfig+0x90>)
 8009fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd8:	08009fe9 	.word	0x08009fe9
 8009fdc:	08009ff5 	.word	0x08009ff5
 8009fe0:	08009fef 	.word	0x08009fef
 8009fe4:	08009ffb 	.word	0x08009ffb
 8009fe8:	2301      	movs	r3, #1
 8009fea:	77fb      	strb	r3, [r7, #31]
 8009fec:	e150      	b.n	800a290 <UART_SetConfig+0x348>
 8009fee:	2302      	movs	r3, #2
 8009ff0:	77fb      	strb	r3, [r7, #31]
 8009ff2:	e14d      	b.n	800a290 <UART_SetConfig+0x348>
 8009ff4:	2304      	movs	r3, #4
 8009ff6:	77fb      	strb	r3, [r7, #31]
 8009ff8:	e14a      	b.n	800a290 <UART_SetConfig+0x348>
 8009ffa:	2308      	movs	r3, #8
 8009ffc:	77fb      	strb	r3, [r7, #31]
 8009ffe:	e147      	b.n	800a290 <UART_SetConfig+0x348>
 800a000:	2310      	movs	r3, #16
 800a002:	77fb      	strb	r3, [r7, #31]
 800a004:	e144      	b.n	800a290 <UART_SetConfig+0x348>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a83      	ldr	r2, [pc, #524]	; (800a218 <UART_SetConfig+0x2d0>)
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d132      	bne.n	800a076 <UART_SetConfig+0x12e>
 800a010:	4b80      	ldr	r3, [pc, #512]	; (800a214 <UART_SetConfig+0x2cc>)
 800a012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a016:	f003 030c 	and.w	r3, r3, #12
 800a01a:	2b0c      	cmp	r3, #12
 800a01c:	d828      	bhi.n	800a070 <UART_SetConfig+0x128>
 800a01e:	a201      	add	r2, pc, #4	; (adr r2, 800a024 <UART_SetConfig+0xdc>)
 800a020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a024:	0800a059 	.word	0x0800a059
 800a028:	0800a071 	.word	0x0800a071
 800a02c:	0800a071 	.word	0x0800a071
 800a030:	0800a071 	.word	0x0800a071
 800a034:	0800a065 	.word	0x0800a065
 800a038:	0800a071 	.word	0x0800a071
 800a03c:	0800a071 	.word	0x0800a071
 800a040:	0800a071 	.word	0x0800a071
 800a044:	0800a05f 	.word	0x0800a05f
 800a048:	0800a071 	.word	0x0800a071
 800a04c:	0800a071 	.word	0x0800a071
 800a050:	0800a071 	.word	0x0800a071
 800a054:	0800a06b 	.word	0x0800a06b
 800a058:	2300      	movs	r3, #0
 800a05a:	77fb      	strb	r3, [r7, #31]
 800a05c:	e118      	b.n	800a290 <UART_SetConfig+0x348>
 800a05e:	2302      	movs	r3, #2
 800a060:	77fb      	strb	r3, [r7, #31]
 800a062:	e115      	b.n	800a290 <UART_SetConfig+0x348>
 800a064:	2304      	movs	r3, #4
 800a066:	77fb      	strb	r3, [r7, #31]
 800a068:	e112      	b.n	800a290 <UART_SetConfig+0x348>
 800a06a:	2308      	movs	r3, #8
 800a06c:	77fb      	strb	r3, [r7, #31]
 800a06e:	e10f      	b.n	800a290 <UART_SetConfig+0x348>
 800a070:	2310      	movs	r3, #16
 800a072:	77fb      	strb	r3, [r7, #31]
 800a074:	e10c      	b.n	800a290 <UART_SetConfig+0x348>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a68      	ldr	r2, [pc, #416]	; (800a21c <UART_SetConfig+0x2d4>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d120      	bne.n	800a0c2 <UART_SetConfig+0x17a>
 800a080:	4b64      	ldr	r3, [pc, #400]	; (800a214 <UART_SetConfig+0x2cc>)
 800a082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a086:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a08a:	2b30      	cmp	r3, #48	; 0x30
 800a08c:	d013      	beq.n	800a0b6 <UART_SetConfig+0x16e>
 800a08e:	2b30      	cmp	r3, #48	; 0x30
 800a090:	d814      	bhi.n	800a0bc <UART_SetConfig+0x174>
 800a092:	2b20      	cmp	r3, #32
 800a094:	d009      	beq.n	800a0aa <UART_SetConfig+0x162>
 800a096:	2b20      	cmp	r3, #32
 800a098:	d810      	bhi.n	800a0bc <UART_SetConfig+0x174>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d002      	beq.n	800a0a4 <UART_SetConfig+0x15c>
 800a09e:	2b10      	cmp	r3, #16
 800a0a0:	d006      	beq.n	800a0b0 <UART_SetConfig+0x168>
 800a0a2:	e00b      	b.n	800a0bc <UART_SetConfig+0x174>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	77fb      	strb	r3, [r7, #31]
 800a0a8:	e0f2      	b.n	800a290 <UART_SetConfig+0x348>
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	77fb      	strb	r3, [r7, #31]
 800a0ae:	e0ef      	b.n	800a290 <UART_SetConfig+0x348>
 800a0b0:	2304      	movs	r3, #4
 800a0b2:	77fb      	strb	r3, [r7, #31]
 800a0b4:	e0ec      	b.n	800a290 <UART_SetConfig+0x348>
 800a0b6:	2308      	movs	r3, #8
 800a0b8:	77fb      	strb	r3, [r7, #31]
 800a0ba:	e0e9      	b.n	800a290 <UART_SetConfig+0x348>
 800a0bc:	2310      	movs	r3, #16
 800a0be:	77fb      	strb	r3, [r7, #31]
 800a0c0:	e0e6      	b.n	800a290 <UART_SetConfig+0x348>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a56      	ldr	r2, [pc, #344]	; (800a220 <UART_SetConfig+0x2d8>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d120      	bne.n	800a10e <UART_SetConfig+0x1c6>
 800a0cc:	4b51      	ldr	r3, [pc, #324]	; (800a214 <UART_SetConfig+0x2cc>)
 800a0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a0d6:	2bc0      	cmp	r3, #192	; 0xc0
 800a0d8:	d013      	beq.n	800a102 <UART_SetConfig+0x1ba>
 800a0da:	2bc0      	cmp	r3, #192	; 0xc0
 800a0dc:	d814      	bhi.n	800a108 <UART_SetConfig+0x1c0>
 800a0de:	2b80      	cmp	r3, #128	; 0x80
 800a0e0:	d009      	beq.n	800a0f6 <UART_SetConfig+0x1ae>
 800a0e2:	2b80      	cmp	r3, #128	; 0x80
 800a0e4:	d810      	bhi.n	800a108 <UART_SetConfig+0x1c0>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <UART_SetConfig+0x1a8>
 800a0ea:	2b40      	cmp	r3, #64	; 0x40
 800a0ec:	d006      	beq.n	800a0fc <UART_SetConfig+0x1b4>
 800a0ee:	e00b      	b.n	800a108 <UART_SetConfig+0x1c0>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	77fb      	strb	r3, [r7, #31]
 800a0f4:	e0cc      	b.n	800a290 <UART_SetConfig+0x348>
 800a0f6:	2302      	movs	r3, #2
 800a0f8:	77fb      	strb	r3, [r7, #31]
 800a0fa:	e0c9      	b.n	800a290 <UART_SetConfig+0x348>
 800a0fc:	2304      	movs	r3, #4
 800a0fe:	77fb      	strb	r3, [r7, #31]
 800a100:	e0c6      	b.n	800a290 <UART_SetConfig+0x348>
 800a102:	2308      	movs	r3, #8
 800a104:	77fb      	strb	r3, [r7, #31]
 800a106:	e0c3      	b.n	800a290 <UART_SetConfig+0x348>
 800a108:	2310      	movs	r3, #16
 800a10a:	77fb      	strb	r3, [r7, #31]
 800a10c:	e0c0      	b.n	800a290 <UART_SetConfig+0x348>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a44      	ldr	r2, [pc, #272]	; (800a224 <UART_SetConfig+0x2dc>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d125      	bne.n	800a164 <UART_SetConfig+0x21c>
 800a118:	4b3e      	ldr	r3, [pc, #248]	; (800a214 <UART_SetConfig+0x2cc>)
 800a11a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a11e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a126:	d017      	beq.n	800a158 <UART_SetConfig+0x210>
 800a128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a12c:	d817      	bhi.n	800a15e <UART_SetConfig+0x216>
 800a12e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a132:	d00b      	beq.n	800a14c <UART_SetConfig+0x204>
 800a134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a138:	d811      	bhi.n	800a15e <UART_SetConfig+0x216>
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d003      	beq.n	800a146 <UART_SetConfig+0x1fe>
 800a13e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a142:	d006      	beq.n	800a152 <UART_SetConfig+0x20a>
 800a144:	e00b      	b.n	800a15e <UART_SetConfig+0x216>
 800a146:	2300      	movs	r3, #0
 800a148:	77fb      	strb	r3, [r7, #31]
 800a14a:	e0a1      	b.n	800a290 <UART_SetConfig+0x348>
 800a14c:	2302      	movs	r3, #2
 800a14e:	77fb      	strb	r3, [r7, #31]
 800a150:	e09e      	b.n	800a290 <UART_SetConfig+0x348>
 800a152:	2304      	movs	r3, #4
 800a154:	77fb      	strb	r3, [r7, #31]
 800a156:	e09b      	b.n	800a290 <UART_SetConfig+0x348>
 800a158:	2308      	movs	r3, #8
 800a15a:	77fb      	strb	r3, [r7, #31]
 800a15c:	e098      	b.n	800a290 <UART_SetConfig+0x348>
 800a15e:	2310      	movs	r3, #16
 800a160:	77fb      	strb	r3, [r7, #31]
 800a162:	e095      	b.n	800a290 <UART_SetConfig+0x348>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a2f      	ldr	r2, [pc, #188]	; (800a228 <UART_SetConfig+0x2e0>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d125      	bne.n	800a1ba <UART_SetConfig+0x272>
 800a16e:	4b29      	ldr	r3, [pc, #164]	; (800a214 <UART_SetConfig+0x2cc>)
 800a170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a174:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a178:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a17c:	d017      	beq.n	800a1ae <UART_SetConfig+0x266>
 800a17e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a182:	d817      	bhi.n	800a1b4 <UART_SetConfig+0x26c>
 800a184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a188:	d00b      	beq.n	800a1a2 <UART_SetConfig+0x25a>
 800a18a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a18e:	d811      	bhi.n	800a1b4 <UART_SetConfig+0x26c>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d003      	beq.n	800a19c <UART_SetConfig+0x254>
 800a194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a198:	d006      	beq.n	800a1a8 <UART_SetConfig+0x260>
 800a19a:	e00b      	b.n	800a1b4 <UART_SetConfig+0x26c>
 800a19c:	2301      	movs	r3, #1
 800a19e:	77fb      	strb	r3, [r7, #31]
 800a1a0:	e076      	b.n	800a290 <UART_SetConfig+0x348>
 800a1a2:	2302      	movs	r3, #2
 800a1a4:	77fb      	strb	r3, [r7, #31]
 800a1a6:	e073      	b.n	800a290 <UART_SetConfig+0x348>
 800a1a8:	2304      	movs	r3, #4
 800a1aa:	77fb      	strb	r3, [r7, #31]
 800a1ac:	e070      	b.n	800a290 <UART_SetConfig+0x348>
 800a1ae:	2308      	movs	r3, #8
 800a1b0:	77fb      	strb	r3, [r7, #31]
 800a1b2:	e06d      	b.n	800a290 <UART_SetConfig+0x348>
 800a1b4:	2310      	movs	r3, #16
 800a1b6:	77fb      	strb	r3, [r7, #31]
 800a1b8:	e06a      	b.n	800a290 <UART_SetConfig+0x348>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a1b      	ldr	r2, [pc, #108]	; (800a22c <UART_SetConfig+0x2e4>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d138      	bne.n	800a236 <UART_SetConfig+0x2ee>
 800a1c4:	4b13      	ldr	r3, [pc, #76]	; (800a214 <UART_SetConfig+0x2cc>)
 800a1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1ca:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a1ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a1d2:	d017      	beq.n	800a204 <UART_SetConfig+0x2bc>
 800a1d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a1d8:	d82a      	bhi.n	800a230 <UART_SetConfig+0x2e8>
 800a1da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1de:	d00b      	beq.n	800a1f8 <UART_SetConfig+0x2b0>
 800a1e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1e4:	d824      	bhi.n	800a230 <UART_SetConfig+0x2e8>
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <UART_SetConfig+0x2aa>
 800a1ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1ee:	d006      	beq.n	800a1fe <UART_SetConfig+0x2b6>
 800a1f0:	e01e      	b.n	800a230 <UART_SetConfig+0x2e8>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	77fb      	strb	r3, [r7, #31]
 800a1f6:	e04b      	b.n	800a290 <UART_SetConfig+0x348>
 800a1f8:	2302      	movs	r3, #2
 800a1fa:	77fb      	strb	r3, [r7, #31]
 800a1fc:	e048      	b.n	800a290 <UART_SetConfig+0x348>
 800a1fe:	2304      	movs	r3, #4
 800a200:	77fb      	strb	r3, [r7, #31]
 800a202:	e045      	b.n	800a290 <UART_SetConfig+0x348>
 800a204:	2308      	movs	r3, #8
 800a206:	77fb      	strb	r3, [r7, #31]
 800a208:	e042      	b.n	800a290 <UART_SetConfig+0x348>
 800a20a:	bf00      	nop
 800a20c:	efff69f3 	.word	0xefff69f3
 800a210:	40011000 	.word	0x40011000
 800a214:	40023800 	.word	0x40023800
 800a218:	40004400 	.word	0x40004400
 800a21c:	40004800 	.word	0x40004800
 800a220:	40004c00 	.word	0x40004c00
 800a224:	40005000 	.word	0x40005000
 800a228:	40011400 	.word	0x40011400
 800a22c:	40007800 	.word	0x40007800
 800a230:	2310      	movs	r3, #16
 800a232:	77fb      	strb	r3, [r7, #31]
 800a234:	e02c      	b.n	800a290 <UART_SetConfig+0x348>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a72      	ldr	r2, [pc, #456]	; (800a404 <UART_SetConfig+0x4bc>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d125      	bne.n	800a28c <UART_SetConfig+0x344>
 800a240:	4b71      	ldr	r3, [pc, #452]	; (800a408 <UART_SetConfig+0x4c0>)
 800a242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a246:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a24a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a24e:	d017      	beq.n	800a280 <UART_SetConfig+0x338>
 800a250:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a254:	d817      	bhi.n	800a286 <UART_SetConfig+0x33e>
 800a256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a25a:	d00b      	beq.n	800a274 <UART_SetConfig+0x32c>
 800a25c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a260:	d811      	bhi.n	800a286 <UART_SetConfig+0x33e>
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <UART_SetConfig+0x326>
 800a266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a26a:	d006      	beq.n	800a27a <UART_SetConfig+0x332>
 800a26c:	e00b      	b.n	800a286 <UART_SetConfig+0x33e>
 800a26e:	2300      	movs	r3, #0
 800a270:	77fb      	strb	r3, [r7, #31]
 800a272:	e00d      	b.n	800a290 <UART_SetConfig+0x348>
 800a274:	2302      	movs	r3, #2
 800a276:	77fb      	strb	r3, [r7, #31]
 800a278:	e00a      	b.n	800a290 <UART_SetConfig+0x348>
 800a27a:	2304      	movs	r3, #4
 800a27c:	77fb      	strb	r3, [r7, #31]
 800a27e:	e007      	b.n	800a290 <UART_SetConfig+0x348>
 800a280:	2308      	movs	r3, #8
 800a282:	77fb      	strb	r3, [r7, #31]
 800a284:	e004      	b.n	800a290 <UART_SetConfig+0x348>
 800a286:	2310      	movs	r3, #16
 800a288:	77fb      	strb	r3, [r7, #31]
 800a28a:	e001      	b.n	800a290 <UART_SetConfig+0x348>
 800a28c:	2310      	movs	r3, #16
 800a28e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	69db      	ldr	r3, [r3, #28]
 800a294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a298:	d15b      	bne.n	800a352 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a29a:	7ffb      	ldrb	r3, [r7, #31]
 800a29c:	2b08      	cmp	r3, #8
 800a29e:	d828      	bhi.n	800a2f2 <UART_SetConfig+0x3aa>
 800a2a0:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <UART_SetConfig+0x360>)
 800a2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a6:	bf00      	nop
 800a2a8:	0800a2cd 	.word	0x0800a2cd
 800a2ac:	0800a2d5 	.word	0x0800a2d5
 800a2b0:	0800a2dd 	.word	0x0800a2dd
 800a2b4:	0800a2f3 	.word	0x0800a2f3
 800a2b8:	0800a2e3 	.word	0x0800a2e3
 800a2bc:	0800a2f3 	.word	0x0800a2f3
 800a2c0:	0800a2f3 	.word	0x0800a2f3
 800a2c4:	0800a2f3 	.word	0x0800a2f3
 800a2c8:	0800a2eb 	.word	0x0800a2eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2cc:	f7fd f83c 	bl	8007348 <HAL_RCC_GetPCLK1Freq>
 800a2d0:	61b8      	str	r0, [r7, #24]
        break;
 800a2d2:	e013      	b.n	800a2fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2d4:	f7fd f84c 	bl	8007370 <HAL_RCC_GetPCLK2Freq>
 800a2d8:	61b8      	str	r0, [r7, #24]
        break;
 800a2da:	e00f      	b.n	800a2fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a2dc:	4b4b      	ldr	r3, [pc, #300]	; (800a40c <UART_SetConfig+0x4c4>)
 800a2de:	61bb      	str	r3, [r7, #24]
        break;
 800a2e0:	e00c      	b.n	800a2fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a2e2:	f7fc ff5f 	bl	80071a4 <HAL_RCC_GetSysClockFreq>
 800a2e6:	61b8      	str	r0, [r7, #24]
        break;
 800a2e8:	e008      	b.n	800a2fc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a2ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2ee:	61bb      	str	r3, [r7, #24]
        break;
 800a2f0:	e004      	b.n	800a2fc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	77bb      	strb	r3, [r7, #30]
        break;
 800a2fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d074      	beq.n	800a3ec <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	005a      	lsls	r2, r3, #1
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	085b      	lsrs	r3, r3, #1
 800a30c:	441a      	add	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	fbb2 f3f3 	udiv	r3, r2, r3
 800a316:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	2b0f      	cmp	r3, #15
 800a31c:	d916      	bls.n	800a34c <UART_SetConfig+0x404>
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a324:	d212      	bcs.n	800a34c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	f023 030f 	bic.w	r3, r3, #15
 800a32e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	085b      	lsrs	r3, r3, #1
 800a334:	b29b      	uxth	r3, r3
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	89fb      	ldrh	r3, [r7, #14]
 800a33e:	4313      	orrs	r3, r2
 800a340:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	89fa      	ldrh	r2, [r7, #14]
 800a348:	60da      	str	r2, [r3, #12]
 800a34a:	e04f      	b.n	800a3ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	77bb      	strb	r3, [r7, #30]
 800a350:	e04c      	b.n	800a3ec <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a352:	7ffb      	ldrb	r3, [r7, #31]
 800a354:	2b08      	cmp	r3, #8
 800a356:	d828      	bhi.n	800a3aa <UART_SetConfig+0x462>
 800a358:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <UART_SetConfig+0x418>)
 800a35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35e:	bf00      	nop
 800a360:	0800a385 	.word	0x0800a385
 800a364:	0800a38d 	.word	0x0800a38d
 800a368:	0800a395 	.word	0x0800a395
 800a36c:	0800a3ab 	.word	0x0800a3ab
 800a370:	0800a39b 	.word	0x0800a39b
 800a374:	0800a3ab 	.word	0x0800a3ab
 800a378:	0800a3ab 	.word	0x0800a3ab
 800a37c:	0800a3ab 	.word	0x0800a3ab
 800a380:	0800a3a3 	.word	0x0800a3a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a384:	f7fc ffe0 	bl	8007348 <HAL_RCC_GetPCLK1Freq>
 800a388:	61b8      	str	r0, [r7, #24]
        break;
 800a38a:	e013      	b.n	800a3b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a38c:	f7fc fff0 	bl	8007370 <HAL_RCC_GetPCLK2Freq>
 800a390:	61b8      	str	r0, [r7, #24]
        break;
 800a392:	e00f      	b.n	800a3b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a394:	4b1d      	ldr	r3, [pc, #116]	; (800a40c <UART_SetConfig+0x4c4>)
 800a396:	61bb      	str	r3, [r7, #24]
        break;
 800a398:	e00c      	b.n	800a3b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a39a:	f7fc ff03 	bl	80071a4 <HAL_RCC_GetSysClockFreq>
 800a39e:	61b8      	str	r0, [r7, #24]
        break;
 800a3a0:	e008      	b.n	800a3b4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3a6:	61bb      	str	r3, [r7, #24]
        break;
 800a3a8:	e004      	b.n	800a3b4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	77bb      	strb	r3, [r7, #30]
        break;
 800a3b2:	bf00      	nop
    }

    if (pclk != 0U)
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d018      	beq.n	800a3ec <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	085a      	lsrs	r2, r3, #1
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	441a      	add	r2, r3
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	2b0f      	cmp	r3, #15
 800a3d2:	d909      	bls.n	800a3e8 <UART_SetConfig+0x4a0>
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3da:	d205      	bcs.n	800a3e8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	60da      	str	r2, [r3, #12]
 800a3e6:	e001      	b.n	800a3ec <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a3f8:	7fbb      	ldrb	r3, [r7, #30]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3720      	adds	r7, #32
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	40007c00 	.word	0x40007c00
 800a408:	40023800 	.word	0x40023800
 800a40c:	00f42400 	.word	0x00f42400

0800a410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	f003 0301 	and.w	r3, r3, #1
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00a      	beq.n	800a43a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43e:	f003 0302 	and.w	r3, r3, #2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00a      	beq.n	800a45c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	430a      	orrs	r2, r1
 800a45a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a460:	f003 0304 	and.w	r3, r3, #4
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00a      	beq.n	800a47e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a482:	f003 0308 	and.w	r3, r3, #8
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00a      	beq.n	800a4a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	430a      	orrs	r2, r1
 800a49e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a4:	f003 0310 	and.w	r3, r3, #16
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00a      	beq.n	800a4c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c6:	f003 0320 	and.w	r3, r3, #32
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d01a      	beq.n	800a526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	430a      	orrs	r2, r1
 800a504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a50e:	d10a      	bne.n	800a526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00a      	beq.n	800a548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	430a      	orrs	r2, r1
 800a546:	605a      	str	r2, [r3, #4]
  }
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b086      	sub	sp, #24
 800a558:	af02      	add	r7, sp, #8
 800a55a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a564:	f7f9 fbf0 	bl	8003d48 <HAL_GetTick>
 800a568:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f003 0308 	and.w	r3, r3, #8
 800a574:	2b08      	cmp	r3, #8
 800a576:	d10e      	bne.n	800a596 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f831 	bl	800a5ee <UART_WaitOnFlagUntilTimeout>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d001      	beq.n	800a596 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a592:	2303      	movs	r3, #3
 800a594:	e027      	b.n	800a5e6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b04      	cmp	r3, #4
 800a5a2:	d10e      	bne.n	800a5c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f81b 	bl	800a5ee <UART_WaitOnFlagUntilTimeout>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5be:	2303      	movs	r3, #3
 800a5c0:	e011      	b.n	800a5e6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2220      	movs	r2, #32
 800a5c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}

0800a5ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b09c      	sub	sp, #112	; 0x70
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	60f8      	str	r0, [r7, #12]
 800a5f6:	60b9      	str	r1, [r7, #8]
 800a5f8:	603b      	str	r3, [r7, #0]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5fe:	e0a7      	b.n	800a750 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a606:	f000 80a3 	beq.w	800a750 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a60a:	f7f9 fb9d 	bl	8003d48 <HAL_GetTick>
 800a60e:	4602      	mov	r2, r0
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a616:	429a      	cmp	r2, r3
 800a618:	d302      	bcc.n	800a620 <UART_WaitOnFlagUntilTimeout+0x32>
 800a61a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d13f      	bne.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a628:	e853 3f00 	ldrex	r3, [r3]
 800a62c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a62e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a630:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a634:	667b      	str	r3, [r7, #100]	; 0x64
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	461a      	mov	r2, r3
 800a63c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a63e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a640:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a642:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a644:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a646:	e841 2300 	strex	r3, r2, [r1]
 800a64a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a64c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1e6      	bne.n	800a620 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	3308      	adds	r3, #8
 800a658:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a65c:	e853 3f00 	ldrex	r3, [r3]
 800a660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	f023 0301 	bic.w	r3, r3, #1
 800a668:	663b      	str	r3, [r7, #96]	; 0x60
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	3308      	adds	r3, #8
 800a670:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a672:	64ba      	str	r2, [r7, #72]	; 0x48
 800a674:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a676:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a678:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a67a:	e841 2300 	strex	r3, r2, [r1]
 800a67e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1e5      	bne.n	800a652 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2220      	movs	r2, #32
 800a68a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e068      	b.n	800a772 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f003 0304 	and.w	r3, r3, #4
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d050      	beq.n	800a750 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6bc:	d148      	bne.n	800a750 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6c6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d0:	e853 3f00 	ldrex	r3, [r3]
 800a6d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a6dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e6:	637b      	str	r3, [r7, #52]	; 0x34
 800a6e8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6ee:	e841 2300 	strex	r3, r2, [r1]
 800a6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1e6      	bne.n	800a6c8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3308      	adds	r3, #8
 800a700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	e853 3f00 	ldrex	r3, [r3]
 800a708:	613b      	str	r3, [r7, #16]
   return(result);
 800a70a:	693b      	ldr	r3, [r7, #16]
 800a70c:	f023 0301 	bic.w	r3, r3, #1
 800a710:	66bb      	str	r3, [r7, #104]	; 0x68
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	3308      	adds	r3, #8
 800a718:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a71a:	623a      	str	r2, [r7, #32]
 800a71c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71e:	69f9      	ldr	r1, [r7, #28]
 800a720:	6a3a      	ldr	r2, [r7, #32]
 800a722:	e841 2300 	strex	r3, r2, [r1]
 800a726:	61bb      	str	r3, [r7, #24]
   return(result);
 800a728:	69bb      	ldr	r3, [r7, #24]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1e5      	bne.n	800a6fa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2220      	movs	r2, #32
 800a732:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2220      	movs	r2, #32
 800a738:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2220      	movs	r2, #32
 800a740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a74c:	2303      	movs	r3, #3
 800a74e:	e010      	b.n	800a772 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	69da      	ldr	r2, [r3, #28]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	4013      	ands	r3, r2
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	bf0c      	ite	eq
 800a760:	2301      	moveq	r3, #1
 800a762:	2300      	movne	r3, #0
 800a764:	b2db      	uxtb	r3, r3
 800a766:	461a      	mov	r2, r3
 800a768:	79fb      	ldrb	r3, [r7, #7]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	f43f af48 	beq.w	800a600 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3770      	adds	r7, #112	; 0x70
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d121      	bne.n	800a7d2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	4b27      	ldr	r3, [pc, #156]	; (800a830 <FMC_SDRAM_Init+0xb4>)
 800a794:	4013      	ands	r3, r2
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	6851      	ldr	r1, [r2, #4]
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	6892      	ldr	r2, [r2, #8]
 800a79e:	4311      	orrs	r1, r2
 800a7a0:	683a      	ldr	r2, [r7, #0]
 800a7a2:	68d2      	ldr	r2, [r2, #12]
 800a7a4:	4311      	orrs	r1, r2
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	6912      	ldr	r2, [r2, #16]
 800a7aa:	4311      	orrs	r1, r2
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	6952      	ldr	r2, [r2, #20]
 800a7b0:	4311      	orrs	r1, r2
 800a7b2:	683a      	ldr	r2, [r7, #0]
 800a7b4:	6992      	ldr	r2, [r2, #24]
 800a7b6:	4311      	orrs	r1, r2
 800a7b8:	683a      	ldr	r2, [r7, #0]
 800a7ba:	69d2      	ldr	r2, [r2, #28]
 800a7bc:	4311      	orrs	r1, r2
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	6a12      	ldr	r2, [r2, #32]
 800a7c2:	4311      	orrs	r1, r2
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	431a      	orrs	r2, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	e026      	b.n	800a820 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	69d9      	ldr	r1, [r3, #28]
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	6a1b      	ldr	r3, [r3, #32]
 800a7e2:	4319      	orrs	r1, r3
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e8:	430b      	orrs	r3, r1
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	4b0e      	ldr	r3, [pc, #56]	; (800a830 <FMC_SDRAM_Init+0xb4>)
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	6851      	ldr	r1, [r2, #4]
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	6892      	ldr	r2, [r2, #8]
 800a800:	4311      	orrs	r1, r2
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	68d2      	ldr	r2, [r2, #12]
 800a806:	4311      	orrs	r1, r2
 800a808:	683a      	ldr	r2, [r7, #0]
 800a80a:	6912      	ldr	r2, [r2, #16]
 800a80c:	4311      	orrs	r1, r2
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	6952      	ldr	r2, [r2, #20]
 800a812:	4311      	orrs	r1, r2
 800a814:	683a      	ldr	r2, [r7, #0]
 800a816:	6992      	ldr	r2, [r2, #24]
 800a818:	430a      	orrs	r2, r1
 800a81a:	431a      	orrs	r2, r3
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	370c      	adds	r7, #12
 800a826:	46bd      	mov	sp, r7
 800a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82c:	4770      	bx	lr
 800a82e:	bf00      	nop
 800a830:	ffff8000 	.word	0xffff8000

0800a834 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d128      	bne.n	800a898 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	1e59      	subs	r1, r3, #1
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	3b01      	subs	r3, #1
 800a85a:	011b      	lsls	r3, r3, #4
 800a85c:	4319      	orrs	r1, r3
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	3b01      	subs	r3, #1
 800a864:	021b      	lsls	r3, r3, #8
 800a866:	4319      	orrs	r1, r3
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	68db      	ldr	r3, [r3, #12]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	031b      	lsls	r3, r3, #12
 800a870:	4319      	orrs	r1, r3
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	3b01      	subs	r3, #1
 800a878:	041b      	lsls	r3, r3, #16
 800a87a:	4319      	orrs	r1, r3
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	695b      	ldr	r3, [r3, #20]
 800a880:	3b01      	subs	r3, #1
 800a882:	051b      	lsls	r3, r3, #20
 800a884:	4319      	orrs	r1, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	061b      	lsls	r3, r3, #24
 800a88e:	430b      	orrs	r3, r1
 800a890:	431a      	orrs	r2, r3
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	609a      	str	r2, [r3, #8]
 800a896:	e02d      	b.n	800a8f4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	689a      	ldr	r2, [r3, #8]
 800a89c:	4b19      	ldr	r3, [pc, #100]	; (800a904 <FMC_SDRAM_Timing_Init+0xd0>)
 800a89e:	4013      	ands	r3, r2
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	68d2      	ldr	r2, [r2, #12]
 800a8a4:	3a01      	subs	r2, #1
 800a8a6:	0311      	lsls	r1, r2, #12
 800a8a8:	68ba      	ldr	r2, [r7, #8]
 800a8aa:	6952      	ldr	r2, [r2, #20]
 800a8ac:	3a01      	subs	r2, #1
 800a8ae:	0512      	lsls	r2, r2, #20
 800a8b0:	430a      	orrs	r2, r1
 800a8b2:	431a      	orrs	r2, r3
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	1e59      	subs	r1, r3, #1
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	3b01      	subs	r3, #1
 800a8cc:	011b      	lsls	r3, r3, #4
 800a8ce:	4319      	orrs	r1, r3
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	021b      	lsls	r3, r3, #8
 800a8d8:	4319      	orrs	r1, r3
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	041b      	lsls	r3, r3, #16
 800a8e2:	4319      	orrs	r1, r3
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	061b      	lsls	r3, r3, #24
 800a8ec:	430b      	orrs	r3, r1
 800a8ee:	431a      	orrs	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3714      	adds	r7, #20
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr
 800a902:	bf00      	nop
 800a904:	ff0f0fff 	.word	0xff0f0fff

0800a908 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a908:	b084      	sub	sp, #16
 800a90a:	b480      	push	{r7}
 800a90c:	b085      	sub	sp, #20
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
 800a912:	f107 001c 	add.w	r0, r7, #28
 800a916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a91a:	2300      	movs	r3, #0
 800a91c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a91e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a920:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a922:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a926:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a92a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a92e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a932:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	4313      	orrs	r3, r2
 800a938:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	4b07      	ldr	r3, [pc, #28]	; (800a95c <SDMMC_Init+0x54>)
 800a940:	4013      	ands	r3, r2
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	431a      	orrs	r2, r3
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	b004      	add	sp, #16
 800a958:	4770      	bx	lr
 800a95a:	bf00      	nop
 800a95c:	ffff8100 	.word	0xffff8100

0800a960 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a96e:	4618      	mov	r0, r3
 800a970:	370c      	adds	r7, #12
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr

0800a97a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a97a:	b480      	push	{r7}
 800a97c:	b083      	sub	sp, #12
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2203      	movs	r2, #3
 800a9a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 0303 	and.w	r3, r3, #3
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	370c      	adds	r7, #12
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a9f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a9f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a9fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68da      	ldr	r2, [r3, #12]
 800aa0a:	4b06      	ldr	r3, [pc, #24]	; (800aa24 <SDMMC_SendCommand+0x50>)
 800aa0c:	4013      	ands	r3, r2
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	431a      	orrs	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3714      	adds	r7, #20
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr
 800aa24:	fffff000 	.word	0xfffff000

0800aa28 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	b2db      	uxtb	r3, r3
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr

0800aa42 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800aa42:	b480      	push	{r7}
 800aa44:	b085      	sub	sp, #20
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	3314      	adds	r3, #20
 800aa50:	461a      	mov	r2, r3
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	4413      	add	r3, r2
 800aa56:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
}  
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa66:	4770      	bx	lr

0800aa68 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b085      	sub	sp, #20
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa72:	2300      	movs	r3, #0
 800aa74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	685a      	ldr	r2, [r3, #4]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa8e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aa94:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aa9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa9c:	68fa      	ldr	r2, [r7, #12]
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	431a      	orrs	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0

}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aace:	2310      	movs	r3, #16
 800aad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aad2:	2340      	movs	r3, #64	; 0x40
 800aad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aad6:	2300      	movs	r3, #0
 800aad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aade:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aae0:	f107 0308 	add.w	r3, r7, #8
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7ff ff74 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aaec:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf0:	2110      	movs	r1, #16
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 fa1a 	bl	800af2c <SDMMC_GetCmdResp1>
 800aaf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aafa:	69fb      	ldr	r3, [r7, #28]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3720      	adds	r7, #32
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ab12:	2311      	movs	r3, #17
 800ab14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab16:	2340      	movs	r3, #64	; 0x40
 800ab18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab24:	f107 0308 	add.w	r3, r7, #8
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f7ff ff52 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab34:	2111      	movs	r1, #17
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f9f8 	bl	800af2c <SDMMC_GetCmdResp1>
 800ab3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab3e:	69fb      	ldr	r3, [r7, #28]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3720      	adds	r7, #32
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}

0800ab48 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ab56:	2312      	movs	r3, #18
 800ab58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab5a:	2340      	movs	r3, #64	; 0x40
 800ab5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab68:	f107 0308 	add.w	r3, r7, #8
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f7ff ff30 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ab74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab78:	2112      	movs	r1, #18
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 f9d6 	bl	800af2c <SDMMC_GetCmdResp1>
 800ab80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab82:	69fb      	ldr	r3, [r7, #28]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	3720      	adds	r7, #32
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}

0800ab8c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b088      	sub	sp, #32
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab9a:	2318      	movs	r3, #24
 800ab9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab9e:	2340      	movs	r3, #64	; 0x40
 800aba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aba2:	2300      	movs	r3, #0
 800aba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abac:	f107 0308 	add.w	r3, r7, #8
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff ff0e 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800abb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abbc:	2118      	movs	r1, #24
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f9b4 	bl	800af2c <SDMMC_GetCmdResp1>
 800abc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abc6:	69fb      	ldr	r3, [r7, #28]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3720      	adds	r7, #32
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b088      	sub	sp, #32
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800abde:	2319      	movs	r3, #25
 800abe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abe2:	2340      	movs	r3, #64	; 0x40
 800abe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abe6:	2300      	movs	r3, #0
 800abe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abf0:	f107 0308 	add.w	r3, r7, #8
 800abf4:	4619      	mov	r1, r3
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7ff feec 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800abfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac00:	2119      	movs	r1, #25
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f992 	bl	800af2c <SDMMC_GetCmdResp1>
 800ac08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac0a:	69fb      	ldr	r3, [r7, #28]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3720      	adds	r7, #32
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b088      	sub	sp, #32
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ac20:	230c      	movs	r3, #12
 800ac22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac24:	2340      	movs	r3, #64	; 0x40
 800ac26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac32:	f107 0308 	add.w	r3, r7, #8
 800ac36:	4619      	mov	r1, r3
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f7ff fecb 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ac3e:	4a05      	ldr	r2, [pc, #20]	; (800ac54 <SDMMC_CmdStopTransfer+0x40>)
 800ac40:	210c      	movs	r1, #12
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 f972 	bl	800af2c <SDMMC_GetCmdResp1>
 800ac48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac4a:	69fb      	ldr	r3, [r7, #28]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3720      	adds	r7, #32
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	05f5e100 	.word	0x05f5e100

0800ac58 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08a      	sub	sp, #40	; 0x28
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ac68:	2307      	movs	r3, #7
 800ac6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac6c:	2340      	movs	r3, #64	; 0x40
 800ac6e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac70:	2300      	movs	r3, #0
 800ac72:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac78:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac7a:	f107 0310 	add.w	r3, r7, #16
 800ac7e:	4619      	mov	r1, r3
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f7ff fea7 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ac86:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac8a:	2107      	movs	r1, #7
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 f94d 	bl	800af2c <SDMMC_GetCmdResp1>
 800ac92:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ac94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3728      	adds	r7, #40	; 0x28
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}

0800ac9e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b088      	sub	sp, #32
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800aca6:	2300      	movs	r3, #0
 800aca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800acaa:	2300      	movs	r3, #0
 800acac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800acae:	2300      	movs	r3, #0
 800acb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acb2:	2300      	movs	r3, #0
 800acb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acbc:	f107 0308 	add.w	r3, r7, #8
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7ff fe86 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fb67 	bl	800b39c <SDMMC_GetCmdError>
 800acce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acd0:	69fb      	ldr	r3, [r7, #28]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3720      	adds	r7, #32
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b088      	sub	sp, #32
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ace2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ace6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ace8:	2308      	movs	r3, #8
 800acea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acec:	2340      	movs	r3, #64	; 0x40
 800acee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acf0:	2300      	movs	r3, #0
 800acf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acfa:	f107 0308 	add.w	r3, r7, #8
 800acfe:	4619      	mov	r1, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff fe67 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fafa 	bl	800b300 <SDMMC_GetCmdResp7>
 800ad0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad0e:	69fb      	ldr	r3, [r7, #28]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3720      	adds	r7, #32
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b088      	sub	sp, #32
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ad26:	2337      	movs	r3, #55	; 0x37
 800ad28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad2a:	2340      	movs	r3, #64	; 0x40
 800ad2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad36:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad38:	f107 0308 	add.w	r3, r7, #8
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7ff fe48 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ad44:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad48:	2137      	movs	r1, #55	; 0x37
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f8ee 	bl	800af2c <SDMMC_GetCmdResp1>
 800ad50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad52:	69fb      	ldr	r3, [r7, #28]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3720      	adds	r7, #32
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b088      	sub	sp, #32
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ad66:	683a      	ldr	r2, [r7, #0]
 800ad68:	4b0d      	ldr	r3, [pc, #52]	; (800ada0 <SDMMC_CmdAppOperCommand+0x44>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ad6e:	2329      	movs	r3, #41	; 0x29
 800ad70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad72:	2340      	movs	r3, #64	; 0x40
 800ad74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad76:	2300      	movs	r3, #0
 800ad78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad80:	f107 0308 	add.w	r3, r7, #8
 800ad84:	4619      	mov	r1, r3
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7ff fe24 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fa03 	bl	800b198 <SDMMC_GetCmdResp3>
 800ad92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad94:	69fb      	ldr	r3, [r7, #28]
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3720      	adds	r7, #32
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	80100000 	.word	0x80100000

0800ada4 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b088      	sub	sp, #32
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800adb2:	2306      	movs	r3, #6
 800adb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adb6:	2340      	movs	r3, #64	; 0x40
 800adb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adba:	2300      	movs	r3, #0
 800adbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adc4:	f107 0308 	add.w	r3, r7, #8
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7ff fe02 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800add0:	f241 3288 	movw	r2, #5000	; 0x1388
 800add4:	2106      	movs	r1, #6
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f8a8 	bl	800af2c <SDMMC_GetCmdResp1>
 800addc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adde:	69fb      	ldr	r3, [r7, #28]
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3720      	adds	r7, #32
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800adf0:	2300      	movs	r3, #0
 800adf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800adf4:	2333      	movs	r3, #51	; 0x33
 800adf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adf8:	2340      	movs	r3, #64	; 0x40
 800adfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adfc:	2300      	movs	r3, #0
 800adfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae06:	f107 0308 	add.w	r3, r7, #8
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f7ff fde1 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ae12:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae16:	2133      	movs	r1, #51	; 0x33
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f887 	bl	800af2c <SDMMC_GetCmdResp1>
 800ae1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae20:	69fb      	ldr	r3, [r7, #28]
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3720      	adds	r7, #32
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b088      	sub	sp, #32
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ae32:	2300      	movs	r3, #0
 800ae34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ae36:	2302      	movs	r3, #2
 800ae38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae3a:	23c0      	movs	r3, #192	; 0xc0
 800ae3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae48:	f107 0308 	add.w	r3, r7, #8
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7ff fdc0 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f957 	bl	800b108 <SDMMC_GetCmdResp2>
 800ae5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae5c:	69fb      	ldr	r3, [r7, #28]
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3720      	adds	r7, #32
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b088      	sub	sp, #32
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ae74:	2309      	movs	r3, #9
 800ae76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ae78:	23c0      	movs	r3, #192	; 0xc0
 800ae7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae86:	f107 0308 	add.w	r3, r7, #8
 800ae8a:	4619      	mov	r1, r3
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7ff fda1 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 f938 	bl	800b108 <SDMMC_GetCmdResp2>
 800ae98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae9a:	69fb      	ldr	r3, [r7, #28]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3720      	adds	r7, #32
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b088      	sub	sp, #32
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeb6:	2340      	movs	r3, #64	; 0x40
 800aeb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeba:	2300      	movs	r3, #0
 800aebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aec2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aec4:	f107 0308 	add.w	r3, r7, #8
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f7ff fd82 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800aed0:	683a      	ldr	r2, [r7, #0]
 800aed2:	2103      	movs	r1, #3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f99d 	bl	800b214 <SDMMC_GetCmdResp6>
 800aeda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aedc:	69fb      	ldr	r3, [r7, #28]
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3720      	adds	r7, #32
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b088      	sub	sp, #32
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
 800aeee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800aef4:	230d      	movs	r3, #13
 800aef6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aef8:	2340      	movs	r3, #64	; 0x40
 800aefa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aefc:	2300      	movs	r3, #0
 800aefe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af06:	f107 0308 	add.w	r3, r7, #8
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f7ff fd61 	bl	800a9d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800af12:	f241 3288 	movw	r2, #5000	; 0x1388
 800af16:	210d      	movs	r1, #13
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 f807 	bl	800af2c <SDMMC_GetCmdResp1>
 800af1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af20:	69fb      	ldr	r3, [r7, #28]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3720      	adds	r7, #32
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
	...

0800af2c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b088      	sub	sp, #32
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	460b      	mov	r3, r1
 800af36:	607a      	str	r2, [r7, #4]
 800af38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800af3a:	4b70      	ldr	r3, [pc, #448]	; (800b0fc <SDMMC_GetCmdResp1+0x1d0>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a70      	ldr	r2, [pc, #448]	; (800b100 <SDMMC_GetCmdResp1+0x1d4>)
 800af40:	fba2 2303 	umull	r2, r3, r2, r3
 800af44:	0a5a      	lsrs	r2, r3, #9
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	fb02 f303 	mul.w	r3, r2, r3
 800af4c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	1e5a      	subs	r2, r3, #1
 800af52:	61fa      	str	r2, [r7, #28]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d102      	bne.n	800af5e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af5c:	e0c9      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af62:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d0ef      	beq.n	800af4e <SDMMC_GetCmdResp1+0x22>
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1ea      	bne.n	800af4e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d004      	beq.n	800af8e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2204      	movs	r2, #4
 800af88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800af8a:	2304      	movs	r3, #4
 800af8c:	e0b1      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af92:	f003 0301 	and.w	r3, r3, #1
 800af96:	2b00      	cmp	r3, #0
 800af98:	d004      	beq.n	800afa4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2201      	movs	r2, #1
 800af9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afa0:	2301      	movs	r3, #1
 800afa2:	e0a6      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	22c5      	movs	r2, #197	; 0xc5
 800afa8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f7ff fd3c 	bl	800aa28 <SDMMC_GetCommandResponse>
 800afb0:	4603      	mov	r3, r0
 800afb2:	461a      	mov	r2, r3
 800afb4:	7afb      	ldrb	r3, [r7, #11]
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d001      	beq.n	800afbe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afba:	2301      	movs	r3, #1
 800afbc:	e099      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800afbe:	2100      	movs	r1, #0
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7ff fd3e 	bl	800aa42 <SDMMC_GetResponse>
 800afc6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800afc8:	697a      	ldr	r2, [r7, #20]
 800afca:	4b4e      	ldr	r3, [pc, #312]	; (800b104 <SDMMC_GetCmdResp1+0x1d8>)
 800afcc:	4013      	ands	r3, r2
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d101      	bne.n	800afd6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800afd2:	2300      	movs	r3, #0
 800afd4:	e08d      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	da02      	bge.n	800afe2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800afdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afe0:	e087      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d001      	beq.n	800aff0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800afec:	2340      	movs	r3, #64	; 0x40
 800afee:	e080      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d001      	beq.n	800affe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800affa:	2380      	movs	r3, #128	; 0x80
 800affc:	e079      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d002      	beq.n	800b00e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b008:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b00c:	e071      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d002      	beq.n	800b01e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b01c:	e069      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b024:	2b00      	cmp	r3, #0
 800b026:	d002      	beq.n	800b02e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b02c:	e061      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b034:	2b00      	cmp	r3, #0
 800b036:	d002      	beq.n	800b03e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b038:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b03c:	e059      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b044:	2b00      	cmp	r3, #0
 800b046:	d002      	beq.n	800b04e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b04c:	e051      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b05c:	e049      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d002      	beq.n	800b06e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b068:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b06c:	e041      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d002      	beq.n	800b07e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b078:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b07c:	e039      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b08c:	e031      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b094:	2b00      	cmp	r3, #0
 800b096:	d002      	beq.n	800b09e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b098:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b09c:	e029      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d002      	beq.n	800b0ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b0a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0ac:	e021      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d002      	beq.n	800b0be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b0b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b0bc:	e019      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d002      	beq.n	800b0ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b0c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0cc:	e011      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d002      	beq.n	800b0de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b0d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b0dc:	e009      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	f003 0308 	and.w	r3, r3, #8
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b0e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b0ec:	e001      	b.n	800b0f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b0ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3720      	adds	r7, #32
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	20000000 	.word	0x20000000
 800b100:	10624dd3 	.word	0x10624dd3
 800b104:	fdffe008 	.word	0xfdffe008

0800b108 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b110:	4b1f      	ldr	r3, [pc, #124]	; (800b190 <SDMMC_GetCmdResp2+0x88>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a1f      	ldr	r2, [pc, #124]	; (800b194 <SDMMC_GetCmdResp2+0x8c>)
 800b116:	fba2 2303 	umull	r2, r3, r2, r3
 800b11a:	0a5b      	lsrs	r3, r3, #9
 800b11c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b120:	fb02 f303 	mul.w	r3, r2, r3
 800b124:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	1e5a      	subs	r2, r3, #1
 800b12a:	60fa      	str	r2, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d102      	bne.n	800b136 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b130:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b134:	e026      	b.n	800b184 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b13a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b142:	2b00      	cmp	r3, #0
 800b144:	d0ef      	beq.n	800b126 <SDMMC_GetCmdResp2+0x1e>
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1ea      	bne.n	800b126 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b154:	f003 0304 	and.w	r3, r3, #4
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d004      	beq.n	800b166 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2204      	movs	r2, #4
 800b160:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b162:	2304      	movs	r3, #4
 800b164:	e00e      	b.n	800b184 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b16a:	f003 0301 	and.w	r3, r3, #1
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d004      	beq.n	800b17c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b178:	2301      	movs	r3, #1
 800b17a:	e003      	b.n	800b184 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	22c5      	movs	r2, #197	; 0xc5
 800b180:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr
 800b190:	20000000 	.word	0x20000000
 800b194:	10624dd3 	.word	0x10624dd3

0800b198 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1a0:	4b1a      	ldr	r3, [pc, #104]	; (800b20c <SDMMC_GetCmdResp3+0x74>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a1a      	ldr	r2, [pc, #104]	; (800b210 <SDMMC_GetCmdResp3+0x78>)
 800b1a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1aa:	0a5b      	lsrs	r3, r3, #9
 800b1ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1b0:	fb02 f303 	mul.w	r3, r2, r3
 800b1b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	1e5a      	subs	r2, r3, #1
 800b1ba:	60fa      	str	r2, [r7, #12]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d102      	bne.n	800b1c6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1c4:	e01b      	b.n	800b1fe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d0ef      	beq.n	800b1b6 <SDMMC_GetCmdResp3+0x1e>
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d1ea      	bne.n	800b1b6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e4:	f003 0304 	and.w	r3, r3, #4
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d004      	beq.n	800b1f6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2204      	movs	r2, #4
 800b1f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1f2:	2304      	movs	r3, #4
 800b1f4:	e003      	b.n	800b1fe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	22c5      	movs	r2, #197	; 0xc5
 800b1fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3714      	adds	r7, #20
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	20000000 	.word	0x20000000
 800b210:	10624dd3 	.word	0x10624dd3

0800b214 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	460b      	mov	r3, r1
 800b21e:	607a      	str	r2, [r7, #4]
 800b220:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b222:	4b35      	ldr	r3, [pc, #212]	; (800b2f8 <SDMMC_GetCmdResp6+0xe4>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a35      	ldr	r2, [pc, #212]	; (800b2fc <SDMMC_GetCmdResp6+0xe8>)
 800b228:	fba2 2303 	umull	r2, r3, r2, r3
 800b22c:	0a5b      	lsrs	r3, r3, #9
 800b22e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b232:	fb02 f303 	mul.w	r3, r2, r3
 800b236:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	1e5a      	subs	r2, r3, #1
 800b23c:	61fa      	str	r2, [r7, #28]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d102      	bne.n	800b248 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b242:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b246:	e052      	b.n	800b2ee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b24c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b254:	2b00      	cmp	r3, #0
 800b256:	d0ef      	beq.n	800b238 <SDMMC_GetCmdResp6+0x24>
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d1ea      	bne.n	800b238 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b266:	f003 0304 	and.w	r3, r3, #4
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d004      	beq.n	800b278 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2204      	movs	r2, #4
 800b272:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b274:	2304      	movs	r3, #4
 800b276:	e03a      	b.n	800b2ee <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b27c:	f003 0301 	and.w	r3, r3, #1
 800b280:	2b00      	cmp	r3, #0
 800b282:	d004      	beq.n	800b28e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	2201      	movs	r2, #1
 800b288:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b28a:	2301      	movs	r3, #1
 800b28c:	e02f      	b.n	800b2ee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f7ff fbca 	bl	800aa28 <SDMMC_GetCommandResponse>
 800b294:	4603      	mov	r3, r0
 800b296:	461a      	mov	r2, r3
 800b298:	7afb      	ldrb	r3, [r7, #11]
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d001      	beq.n	800b2a2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e025      	b.n	800b2ee <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	22c5      	movs	r2, #197	; 0xc5
 800b2a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	68f8      	ldr	r0, [r7, #12]
 800b2ac:	f7ff fbc9 	bl	800aa42 <SDMMC_GetResponse>
 800b2b0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d106      	bne.n	800b2ca <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	0c1b      	lsrs	r3, r3, #16
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	e011      	b.n	800b2ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2d8:	e009      	b.n	800b2ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2e8:	e001      	b.n	800b2ee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	20000000 	.word	0x20000000
 800b2fc:	10624dd3 	.word	0x10624dd3

0800b300 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b308:	4b22      	ldr	r3, [pc, #136]	; (800b394 <SDMMC_GetCmdResp7+0x94>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a22      	ldr	r2, [pc, #136]	; (800b398 <SDMMC_GetCmdResp7+0x98>)
 800b30e:	fba2 2303 	umull	r2, r3, r2, r3
 800b312:	0a5b      	lsrs	r3, r3, #9
 800b314:	f241 3288 	movw	r2, #5000	; 0x1388
 800b318:	fb02 f303 	mul.w	r3, r2, r3
 800b31c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	1e5a      	subs	r2, r3, #1
 800b322:	60fa      	str	r2, [r7, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d102      	bne.n	800b32e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b328:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b32c:	e02c      	b.n	800b388 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b332:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0ef      	beq.n	800b31e <SDMMC_GetCmdResp7+0x1e>
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1ea      	bne.n	800b31e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b34c:	f003 0304 	and.w	r3, r3, #4
 800b350:	2b00      	cmp	r3, #0
 800b352:	d004      	beq.n	800b35e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2204      	movs	r2, #4
 800b358:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b35a:	2304      	movs	r3, #4
 800b35c:	e014      	b.n	800b388 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b362:	f003 0301 	and.w	r3, r3, #1
 800b366:	2b00      	cmp	r3, #0
 800b368:	d004      	beq.n	800b374 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2201      	movs	r2, #1
 800b36e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b370:	2301      	movs	r3, #1
 800b372:	e009      	b.n	800b388 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d002      	beq.n	800b386 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2240      	movs	r2, #64	; 0x40
 800b384:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b386:	2300      	movs	r3, #0
  
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr
 800b394:	20000000 	.word	0x20000000
 800b398:	10624dd3 	.word	0x10624dd3

0800b39c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3a4:	4b11      	ldr	r3, [pc, #68]	; (800b3ec <SDMMC_GetCmdError+0x50>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a11      	ldr	r2, [pc, #68]	; (800b3f0 <SDMMC_GetCmdError+0x54>)
 800b3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ae:	0a5b      	lsrs	r3, r3, #9
 800b3b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3b4:	fb02 f303 	mul.w	r3, r2, r3
 800b3b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	1e5a      	subs	r2, r3, #1
 800b3be:	60fa      	str	r2, [r7, #12]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d102      	bne.n	800b3ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3c8:	e009      	b.n	800b3de <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d0f1      	beq.n	800b3ba <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	22c5      	movs	r2, #197	; 0xc5
 800b3da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
 800b3ea:	bf00      	nop
 800b3ec:	20000000 	.word	0x20000000
 800b3f0:	10624dd3 	.word	0x10624dd3

0800b3f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b3f4:	b084      	sub	sp, #16
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b084      	sub	sp, #16
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	f107 001c 	add.w	r0, r7, #28
 800b402:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b408:	2b01      	cmp	r3, #1
 800b40a:	d120      	bne.n	800b44e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b410:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68da      	ldr	r2, [r3, #12]
 800b41c:	4b20      	ldr	r3, [pc, #128]	; (800b4a0 <USB_CoreInit+0xac>)
 800b41e:	4013      	ands	r3, r2
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b432:	2b01      	cmp	r3, #1
 800b434:	d105      	bne.n	800b442 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	68db      	ldr	r3, [r3, #12]
 800b43a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f000 fa96 	bl	800b974 <USB_CoreReset>
 800b448:	4603      	mov	r3, r0
 800b44a:	73fb      	strb	r3, [r7, #15]
 800b44c:	e010      	b.n	800b470 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f000 fa8a 	bl	800b974 <USB_CoreReset>
 800b460:	4603      	mov	r3, r0
 800b462:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b468:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b472:	2b01      	cmp	r3, #1
 800b474:	d10b      	bne.n	800b48e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	f043 0206 	orr.w	r2, r3, #6
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f043 0220 	orr.w	r2, r3, #32
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b48e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b49a:	b004      	add	sp, #16
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	ffbdffbf 	.word	0xffbdffbf

0800b4a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	f023 0201 	bic.w	r2, r3, #1
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b4b8:	2300      	movs	r3, #0
}
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	370c      	adds	r7, #12
 800b4be:	46bd      	mov	sp, r7
 800b4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c4:	4770      	bx	lr

0800b4c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b4c6:	b580      	push	{r7, lr}
 800b4c8:	b084      	sub	sp, #16
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	6078      	str	r0, [r7, #4]
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	68db      	ldr	r3, [r3, #12]
 800b4da:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b4e2:	78fb      	ldrb	r3, [r7, #3]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d115      	bne.n	800b514 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b4f4:	2001      	movs	r0, #1
 800b4f6:	f7f8 fc33 	bl	8003d60 <HAL_Delay>
      ms++;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f000 fa29 	bl	800b958 <USB_GetMode>
 800b506:	4603      	mov	r3, r0
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d01e      	beq.n	800b54a <USB_SetCurrentMode+0x84>
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2b31      	cmp	r3, #49	; 0x31
 800b510:	d9f0      	bls.n	800b4f4 <USB_SetCurrentMode+0x2e>
 800b512:	e01a      	b.n	800b54a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b514:	78fb      	ldrb	r3, [r7, #3]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d115      	bne.n	800b546 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68db      	ldr	r3, [r3, #12]
 800b51e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b526:	2001      	movs	r0, #1
 800b528:	f7f8 fc1a 	bl	8003d60 <HAL_Delay>
      ms++;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	3301      	adds	r3, #1
 800b530:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fa10 	bl	800b958 <USB_GetMode>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d005      	beq.n	800b54a <USB_SetCurrentMode+0x84>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2b31      	cmp	r3, #49	; 0x31
 800b542:	d9f0      	bls.n	800b526 <USB_SetCurrentMode+0x60>
 800b544:	e001      	b.n	800b54a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	e005      	b.n	800b556 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2b32      	cmp	r3, #50	; 0x32
 800b54e:	d101      	bne.n	800b554 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b550:	2301      	movs	r3, #1
 800b552:	e000      	b.n	800b556 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
	...

0800b560 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b560:	b084      	sub	sp, #16
 800b562:	b580      	push	{r7, lr}
 800b564:	b086      	sub	sp, #24
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b56e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b572:	2300      	movs	r3, #0
 800b574:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b57a:	2300      	movs	r3, #0
 800b57c:	613b      	str	r3, [r7, #16]
 800b57e:	e009      	b.n	800b594 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b580:	687a      	ldr	r2, [r7, #4]
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	3340      	adds	r3, #64	; 0x40
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	2200      	movs	r2, #0
 800b58c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	3301      	adds	r3, #1
 800b592:	613b      	str	r3, [r7, #16]
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	2b0e      	cmp	r3, #14
 800b598:	d9f2      	bls.n	800b580 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d11c      	bne.n	800b5da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5ae:	f043 0302 	orr.w	r3, r3, #2
 800b5b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	601a      	str	r2, [r3, #0]
 800b5d8:	e005      	b.n	800b5e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b600:	461a      	mov	r2, r3
 800b602:	680b      	ldr	r3, [r1, #0]
 800b604:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d10c      	bne.n	800b626 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d104      	bne.n	800b61c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b612:	2100      	movs	r1, #0
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f965 	bl	800b8e4 <USB_SetDevSpeed>
 800b61a:	e008      	b.n	800b62e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b61c:	2101      	movs	r1, #1
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f960 	bl	800b8e4 <USB_SetDevSpeed>
 800b624:	e003      	b.n	800b62e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b626:	2103      	movs	r1, #3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f95b 	bl	800b8e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b62e:	2110      	movs	r1, #16
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f8f3 	bl	800b81c <USB_FlushTxFifo>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d001      	beq.n	800b640 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f91f 	bl	800b884 <USB_FlushRxFifo>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b656:	461a      	mov	r2, r3
 800b658:	2300      	movs	r3, #0
 800b65a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b662:	461a      	mov	r2, r3
 800b664:	2300      	movs	r3, #0
 800b666:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b66e:	461a      	mov	r2, r3
 800b670:	2300      	movs	r3, #0
 800b672:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b674:	2300      	movs	r3, #0
 800b676:	613b      	str	r3, [r7, #16]
 800b678:	e043      	b.n	800b702 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b68c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b690:	d118      	bne.n	800b6c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10a      	bne.n	800b6ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	015a      	lsls	r2, r3, #5
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4413      	add	r3, r2
 800b6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b6aa:	6013      	str	r3, [r2, #0]
 800b6ac:	e013      	b.n	800b6d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	015a      	lsls	r2, r3, #5
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b6c0:	6013      	str	r3, [r2, #0]
 800b6c2:	e008      	b.n	800b6d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	015a      	lsls	r2, r3, #5
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	015a      	lsls	r2, r3, #5
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	4413      	add	r3, r2
 800b6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	3301      	adds	r3, #1
 800b700:	613b      	str	r3, [r7, #16]
 800b702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	429a      	cmp	r2, r3
 800b708:	d3b7      	bcc.n	800b67a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b70a:	2300      	movs	r3, #0
 800b70c:	613b      	str	r3, [r7, #16]
 800b70e:	e043      	b.n	800b798 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b726:	d118      	bne.n	800b75a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10a      	bne.n	800b744 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	015a      	lsls	r2, r3, #5
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	4413      	add	r3, r2
 800b736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b73a:	461a      	mov	r2, r3
 800b73c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b740:	6013      	str	r3, [r2, #0]
 800b742:	e013      	b.n	800b76c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	015a      	lsls	r2, r3, #5
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	4413      	add	r3, r2
 800b74c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b750:	461a      	mov	r2, r3
 800b752:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	e008      	b.n	800b76c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	015a      	lsls	r2, r3, #5
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	4413      	add	r3, r2
 800b762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b766:	461a      	mov	r2, r3
 800b768:	2300      	movs	r3, #0
 800b76a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	015a      	lsls	r2, r3, #5
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b778:	461a      	mov	r2, r3
 800b77a:	2300      	movs	r3, #0
 800b77c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78a:	461a      	mov	r2, r3
 800b78c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b790:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	3301      	adds	r3, #1
 800b796:	613b      	str	r3, [r7, #16]
 800b798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d3b7      	bcc.n	800b710 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7a6:	691b      	ldr	r3, [r3, #16]
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b7c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d105      	bne.n	800b7d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	f043 0210 	orr.w	r2, r3, #16
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	699a      	ldr	r2, [r3, #24]
 800b7d8:	4b0e      	ldr	r3, [pc, #56]	; (800b814 <USB_DevInit+0x2b4>)
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d005      	beq.n	800b7f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	699b      	ldr	r3, [r3, #24]
 800b7ea:	f043 0208 	orr.w	r2, r3, #8
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d105      	bne.n	800b804 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	699a      	ldr	r2, [r3, #24]
 800b7fc:	4b06      	ldr	r3, [pc, #24]	; (800b818 <USB_DevInit+0x2b8>)
 800b7fe:	4313      	orrs	r3, r2
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b804:	7dfb      	ldrb	r3, [r7, #23]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3718      	adds	r7, #24
 800b80a:	46bd      	mov	sp, r7
 800b80c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b810:	b004      	add	sp, #16
 800b812:	4770      	bx	lr
 800b814:	803c3800 	.word	0x803c3800
 800b818:	40000004 	.word	0x40000004

0800b81c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b826:	2300      	movs	r3, #0
 800b828:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	3301      	adds	r3, #1
 800b82e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	4a13      	ldr	r2, [pc, #76]	; (800b880 <USB_FlushTxFifo+0x64>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d901      	bls.n	800b83c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e01b      	b.n	800b874 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	daf2      	bge.n	800b82a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b844:	2300      	movs	r3, #0
 800b846:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	019b      	lsls	r3, r3, #6
 800b84c:	f043 0220 	orr.w	r2, r3, #32
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	3301      	adds	r3, #1
 800b858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	4a08      	ldr	r2, [pc, #32]	; (800b880 <USB_FlushTxFifo+0x64>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d901      	bls.n	800b866 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b862:	2303      	movs	r3, #3
 800b864:	e006      	b.n	800b874 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	691b      	ldr	r3, [r3, #16]
 800b86a:	f003 0320 	and.w	r3, r3, #32
 800b86e:	2b20      	cmp	r3, #32
 800b870:	d0f0      	beq.n	800b854 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3714      	adds	r7, #20
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	00030d40 	.word	0x00030d40

0800b884 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b884:	b480      	push	{r7}
 800b886:	b085      	sub	sp, #20
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b88c:	2300      	movs	r3, #0
 800b88e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	3301      	adds	r3, #1
 800b894:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	4a11      	ldr	r2, [pc, #68]	; (800b8e0 <USB_FlushRxFifo+0x5c>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d901      	bls.n	800b8a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b89e:	2303      	movs	r3, #3
 800b8a0:	e018      	b.n	800b8d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	691b      	ldr	r3, [r3, #16]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	daf2      	bge.n	800b890 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2210      	movs	r2, #16
 800b8b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	3301      	adds	r3, #1
 800b8b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	4a08      	ldr	r2, [pc, #32]	; (800b8e0 <USB_FlushRxFifo+0x5c>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d901      	bls.n	800b8c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	e006      	b.n	800b8d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	691b      	ldr	r3, [r3, #16]
 800b8ca:	f003 0310 	and.w	r3, r3, #16
 800b8ce:	2b10      	cmp	r3, #16
 800b8d0:	d0f0      	beq.n	800b8b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr
 800b8e0:	00030d40 	.word	0x00030d40

0800b8e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	78fb      	ldrb	r3, [r7, #3]
 800b8fe:	68f9      	ldr	r1, [r7, #12]
 800b900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b904:	4313      	orrs	r3, r2
 800b906:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr

0800b916 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b916:	b480      	push	{r7}
 800b918:	b085      	sub	sp, #20
 800b91a:	af00      	add	r7, sp, #0
 800b91c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b930:	f023 0303 	bic.w	r3, r3, #3
 800b934:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b944:	f043 0302 	orr.w	r3, r3, #2
 800b948:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3714      	adds	r7, #20
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	f003 0301 	and.w	r3, r3, #1
}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b974:	b480      	push	{r7}
 800b976:	b085      	sub	sp, #20
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b97c:	2300      	movs	r3, #0
 800b97e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	3301      	adds	r3, #1
 800b984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	4a13      	ldr	r2, [pc, #76]	; (800b9d8 <USB_CoreReset+0x64>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d901      	bls.n	800b992 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b98e:	2303      	movs	r3, #3
 800b990:	e01b      	b.n	800b9ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	691b      	ldr	r3, [r3, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	daf2      	bge.n	800b980 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b99a:	2300      	movs	r3, #0
 800b99c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	f043 0201 	orr.w	r2, r3, #1
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	4a09      	ldr	r2, [pc, #36]	; (800b9d8 <USB_CoreReset+0x64>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d901      	bls.n	800b9bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b9b8:	2303      	movs	r3, #3
 800b9ba:	e006      	b.n	800b9ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	f003 0301 	and.w	r3, r3, #1
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d0f0      	beq.n	800b9aa <USB_CoreReset+0x36>

  return HAL_OK;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	00030d40 	.word	0x00030d40

0800b9dc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b9e0:	4904      	ldr	r1, [pc, #16]	; (800b9f4 <MX_FATFS_Init+0x18>)
 800b9e2:	4805      	ldr	r0, [pc, #20]	; (800b9f8 <MX_FATFS_Init+0x1c>)
 800b9e4:	f000 faa0 	bl	800bf28 <FATFS_LinkDriver>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	4b03      	ldr	r3, [pc, #12]	; (800b9fc <MX_FATFS_Init+0x20>)
 800b9ee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b9f0:	bf00      	nop
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	20007048 	.word	0x20007048
 800b9f8:	0800bfd8 	.word	0x0800bfd8
 800b9fc:	20007044 	.word	0x20007044

0800ba00 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ba06:	2300      	movs	r3, #0
 800ba08:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ba0a:	f000 f896 	bl	800bb3a <BSP_SD_IsDetected>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d001      	beq.n	800ba18 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ba14:	2302      	movs	r3, #2
 800ba16:	e012      	b.n	800ba3e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ba18:	480b      	ldr	r0, [pc, #44]	; (800ba48 <BSP_SD_Init+0x48>)
 800ba1a:	f7fc fe8a 	bl	8008732 <HAL_SD_Init>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ba22:	79fb      	ldrb	r3, [r7, #7]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d109      	bne.n	800ba3c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ba28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ba2c:	4806      	ldr	r0, [pc, #24]	; (800ba48 <BSP_SD_Init+0x48>)
 800ba2e:	f7fd fc51 	bl	80092d4 <HAL_SD_ConfigWideBusOperation>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d001      	beq.n	800ba3c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ba3c:	79fb      	ldrb	r3, [r7, #7]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3708      	adds	r7, #8
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	20006354 	.word	0x20006354

0800ba4c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b086      	sub	sp, #24
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	68ba      	ldr	r2, [r7, #8]
 800ba60:	68f9      	ldr	r1, [r7, #12]
 800ba62:	4806      	ldr	r0, [pc, #24]	; (800ba7c <BSP_SD_ReadBlocks_DMA+0x30>)
 800ba64:	f7fc ff1e 	bl	80088a4 <HAL_SD_ReadBlocks_DMA>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d001      	beq.n	800ba72 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ba72:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	20006354 	.word	0x20006354

0800ba80 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	60f8      	str	r0, [r7, #12]
 800ba88:	60b9      	str	r1, [r7, #8]
 800ba8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	68ba      	ldr	r2, [r7, #8]
 800ba94:	68f9      	ldr	r1, [r7, #12]
 800ba96:	4806      	ldr	r0, [pc, #24]	; (800bab0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ba98:	f7fc ffe6 	bl	8008a68 <HAL_SD_WriteBlocks_DMA>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800baa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3718      	adds	r7, #24
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20006354 	.word	0x20006354

0800bab4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bab8:	4805      	ldr	r0, [pc, #20]	; (800bad0 <BSP_SD_GetCardState+0x1c>)
 800baba:	f7fd fca5 	bl	8009408 <HAL_SD_GetCardState>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	bf14      	ite	ne
 800bac4:	2301      	movne	r3, #1
 800bac6:	2300      	moveq	r3, #0
 800bac8:	b2db      	uxtb	r3, r3
}
 800baca:	4618      	mov	r0, r3
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	20006354 	.word	0x20006354

0800bad4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800badc:	6879      	ldr	r1, [r7, #4]
 800bade:	4803      	ldr	r0, [pc, #12]	; (800baec <BSP_SD_GetCardInfo+0x18>)
 800bae0:	f7fd fbcc 	bl	800927c <HAL_SD_GetCardInfo>
}
 800bae4:	bf00      	nop
 800bae6:	3708      	adds	r7, #8
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20006354 	.word	0x20006354

0800baf0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800baf8:	f000 f818 	bl	800bb2c <BSP_SD_AbortCallback>
}
 800bafc:	bf00      	nop
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b082      	sub	sp, #8
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bb0c:	f000 f9a8 	bl	800be60 <BSP_SD_WriteCpltCallback>
}
 800bb10:	bf00      	nop
 800bb12:	3708      	adds	r7, #8
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bb20:	f000 f9aa 	bl	800be78 <BSP_SD_ReadCpltCallback>
}
 800bb24:	bf00      	nop
 800bb26:	3708      	adds	r7, #8
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	af00      	add	r7, sp, #0

}
 800bb30:	bf00      	nop
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b082      	sub	sp, #8
 800bb3e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bb40:	2301      	movs	r3, #1
 800bb42:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bb44:	f000 f80c 	bl	800bb60 <BSP_PlatformIsDetected>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d101      	bne.n	800bb52 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bb52:	79fb      	ldrb	r3, [r7, #7]
 800bb54:	b2db      	uxtb	r3, r3
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
	...

0800bb60 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bb66:	2301      	movs	r3, #1
 800bb68:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bb6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bb6e:	4806      	ldr	r0, [pc, #24]	; (800bb88 <BSP_PlatformIsDetected+0x28>)
 800bb70:	f7fa f84a 	bl	8005c08 <HAL_GPIO_ReadPin>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bb7e:	79fb      	ldrb	r3, [r7, #7]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	40020400 	.word	0x40020400

0800bb8c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800bb94:	f7f8 f8d8 	bl	8003d48 <HAL_GetTick>
 800bb98:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800bb9a:	e006      	b.n	800bbaa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb9c:	f7ff ff8a 	bl	800bab4 <BSP_SD_GetCardState>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d101      	bne.n	800bbaa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	e009      	b.n	800bbbe <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800bbaa:	f7f8 f8cd 	bl	8003d48 <HAL_GetTick>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d8f0      	bhi.n	800bb9c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bbba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
	...

0800bbc8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bbd2:	4b0b      	ldr	r3, [pc, #44]	; (800bc00 <SD_CheckStatus+0x38>)
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bbd8:	f7ff ff6c 	bl	800bab4 <BSP_SD_GetCardState>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d107      	bne.n	800bbf2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bbe2:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <SD_CheckStatus+0x38>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	f023 0301 	bic.w	r3, r3, #1
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	4b04      	ldr	r3, [pc, #16]	; (800bc00 <SD_CheckStatus+0x38>)
 800bbf0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bbf2:	4b03      	ldr	r3, [pc, #12]	; (800bc00 <SD_CheckStatus+0x38>)
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	b2db      	uxtb	r3, r3
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	2000003d 	.word	0x2000003d

0800bc04 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b082      	sub	sp, #8
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bc0e:	f7ff fef7 	bl	800ba00 <BSP_SD_Init>
 800bc12:	4603      	mov	r3, r0
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d107      	bne.n	800bc28 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bc18:	79fb      	ldrb	r3, [r7, #7]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7ff ffd4 	bl	800bbc8 <SD_CheckStatus>
 800bc20:	4603      	mov	r3, r0
 800bc22:	461a      	mov	r2, r3
 800bc24:	4b04      	ldr	r3, [pc, #16]	; (800bc38 <SD_initialize+0x34>)
 800bc26:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bc28:	4b03      	ldr	r3, [pc, #12]	; (800bc38 <SD_initialize+0x34>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	b2db      	uxtb	r3, r3
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3708      	adds	r7, #8
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}
 800bc36:	bf00      	nop
 800bc38:	2000003d 	.word	0x2000003d

0800bc3c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	4603      	mov	r3, r0
 800bc44:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bc46:	79fb      	ldrb	r3, [r7, #7]
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7ff ffbd 	bl	800bbc8 <SD_CheckStatus>
 800bc4e:	4603      	mov	r3, r0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bd80      	pop	{r7, pc}

0800bc58 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b086      	sub	sp, #24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60b9      	str	r1, [r7, #8]
 800bc60:	607a      	str	r2, [r7, #4]
 800bc62:	603b      	str	r3, [r7, #0]
 800bc64:	4603      	mov	r3, r0
 800bc66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bc6c:	f247 5030 	movw	r0, #30000	; 0x7530
 800bc70:	f7ff ff8c 	bl	800bb8c <SD_CheckStatusWithTimeout>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	da01      	bge.n	800bc7e <SD_read+0x26>
  {
    return res;
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
 800bc7c:	e03b      	b.n	800bcf6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bc7e:	683a      	ldr	r2, [r7, #0]
 800bc80:	6879      	ldr	r1, [r7, #4]
 800bc82:	68b8      	ldr	r0, [r7, #8]
 800bc84:	f7ff fee2 	bl	800ba4c <BSP_SD_ReadBlocks_DMA>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d132      	bne.n	800bcf4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bc8e:	4b1c      	ldr	r3, [pc, #112]	; (800bd00 <SD_read+0xa8>)
 800bc90:	2200      	movs	r2, #0
 800bc92:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bc94:	f7f8 f858 	bl	8003d48 <HAL_GetTick>
 800bc98:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bc9a:	bf00      	nop
 800bc9c:	4b18      	ldr	r3, [pc, #96]	; (800bd00 <SD_read+0xa8>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d108      	bne.n	800bcb6 <SD_read+0x5e>
 800bca4:	f7f8 f850 	bl	8003d48 <HAL_GetTick>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	1ad3      	subs	r3, r2, r3
 800bcae:	f247 522f 	movw	r2, #29999	; 0x752f
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d9f2      	bls.n	800bc9c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800bcb6:	4b12      	ldr	r3, [pc, #72]	; (800bd00 <SD_read+0xa8>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d102      	bne.n	800bcc4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	75fb      	strb	r3, [r7, #23]
 800bcc2:	e017      	b.n	800bcf4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800bcc4:	4b0e      	ldr	r3, [pc, #56]	; (800bd00 <SD_read+0xa8>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bcca:	f7f8 f83d 	bl	8003d48 <HAL_GetTick>
 800bcce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bcd0:	e007      	b.n	800bce2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bcd2:	f7ff feef 	bl	800bab4 <BSP_SD_GetCardState>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d102      	bne.n	800bce2 <SD_read+0x8a>
          {
            res = RES_OK;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800bce0:	e008      	b.n	800bcf4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bce2:	f7f8 f831 	bl	8003d48 <HAL_GetTick>
 800bce6:	4602      	mov	r2, r0
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	1ad3      	subs	r3, r2, r3
 800bcec:	f247 522f 	movw	r2, #29999	; 0x752f
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d9ee      	bls.n	800bcd2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3718      	adds	r7, #24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	20007050 	.word	0x20007050

0800bd04 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b086      	sub	sp, #24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60b9      	str	r1, [r7, #8]
 800bd0c:	607a      	str	r2, [r7, #4]
 800bd0e:	603b      	str	r3, [r7, #0]
 800bd10:	4603      	mov	r3, r0
 800bd12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bd18:	4b24      	ldr	r3, [pc, #144]	; (800bdac <SD_write+0xa8>)
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bd1e:	f247 5030 	movw	r0, #30000	; 0x7530
 800bd22:	f7ff ff33 	bl	800bb8c <SD_CheckStatusWithTimeout>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	da01      	bge.n	800bd30 <SD_write+0x2c>
  {
    return res;
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
 800bd2e:	e038      	b.n	800bda2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	6879      	ldr	r1, [r7, #4]
 800bd34:	68b8      	ldr	r0, [r7, #8]
 800bd36:	f7ff fea3 	bl	800ba80 <BSP_SD_WriteBlocks_DMA>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d12f      	bne.n	800bda0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800bd40:	f7f8 f802 	bl	8003d48 <HAL_GetTick>
 800bd44:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bd46:	bf00      	nop
 800bd48:	4b18      	ldr	r3, [pc, #96]	; (800bdac <SD_write+0xa8>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d108      	bne.n	800bd62 <SD_write+0x5e>
 800bd50:	f7f7 fffa 	bl	8003d48 <HAL_GetTick>
 800bd54:	4602      	mov	r2, r0
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d9f2      	bls.n	800bd48 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800bd62:	4b12      	ldr	r3, [pc, #72]	; (800bdac <SD_write+0xa8>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d102      	bne.n	800bd70 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	75fb      	strb	r3, [r7, #23]
 800bd6e:	e017      	b.n	800bda0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800bd70:	4b0e      	ldr	r3, [pc, #56]	; (800bdac <SD_write+0xa8>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bd76:	f7f7 ffe7 	bl	8003d48 <HAL_GetTick>
 800bd7a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bd7c:	e007      	b.n	800bd8e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bd7e:	f7ff fe99 	bl	800bab4 <BSP_SD_GetCardState>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d102      	bne.n	800bd8e <SD_write+0x8a>
          {
            res = RES_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	75fb      	strb	r3, [r7, #23]
            break;
 800bd8c:	e008      	b.n	800bda0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bd8e:	f7f7 ffdb 	bl	8003d48 <HAL_GetTick>
 800bd92:	4602      	mov	r2, r0
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	f247 522f 	movw	r2, #29999	; 0x752f
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d9ee      	bls.n	800bd7e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3718      	adds	r7, #24
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	2000704c 	.word	0x2000704c

0800bdb0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b08c      	sub	sp, #48	; 0x30
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	603a      	str	r2, [r7, #0]
 800bdba:	71fb      	strb	r3, [r7, #7]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bdc6:	4b25      	ldr	r3, [pc, #148]	; (800be5c <SD_ioctl+0xac>)
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	b2db      	uxtb	r3, r3
 800bdcc:	f003 0301 	and.w	r3, r3, #1
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d001      	beq.n	800bdd8 <SD_ioctl+0x28>
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e03c      	b.n	800be52 <SD_ioctl+0xa2>

  switch (cmd)
 800bdd8:	79bb      	ldrb	r3, [r7, #6]
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d834      	bhi.n	800be48 <SD_ioctl+0x98>
 800bdde:	a201      	add	r2, pc, #4	; (adr r2, 800bde4 <SD_ioctl+0x34>)
 800bde0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde4:	0800bdf5 	.word	0x0800bdf5
 800bde8:	0800bdfd 	.word	0x0800bdfd
 800bdec:	0800be15 	.word	0x0800be15
 800bdf0:	0800be2f 	.word	0x0800be2f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bdfa:	e028      	b.n	800be4e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bdfc:	f107 030c 	add.w	r3, r7, #12
 800be00:	4618      	mov	r0, r3
 800be02:	f7ff fe67 	bl	800bad4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800be06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be0c:	2300      	movs	r3, #0
 800be0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be12:	e01c      	b.n	800be4e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be14:	f107 030c 	add.w	r3, r7, #12
 800be18:	4618      	mov	r0, r3
 800be1a:	f7ff fe5b 	bl	800bad4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800be1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be20:	b29a      	uxth	r2, r3
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be2c:	e00f      	b.n	800be4e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800be2e:	f107 030c 	add.w	r3, r7, #12
 800be32:	4618      	mov	r0, r3
 800be34:	f7ff fe4e 	bl	800bad4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	0a5a      	lsrs	r2, r3, #9
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800be40:	2300      	movs	r3, #0
 800be42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800be46:	e002      	b.n	800be4e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800be48:	2304      	movs	r3, #4
 800be4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800be4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be52:	4618      	mov	r0, r3
 800be54:	3730      	adds	r7, #48	; 0x30
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	2000003d 	.word	0x2000003d

0800be60 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800be60:	b480      	push	{r7}
 800be62:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800be64:	4b03      	ldr	r3, [pc, #12]	; (800be74 <BSP_SD_WriteCpltCallback+0x14>)
 800be66:	2201      	movs	r2, #1
 800be68:	601a      	str	r2, [r3, #0]
}
 800be6a:	bf00      	nop
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr
 800be74:	2000704c 	.word	0x2000704c

0800be78 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800be78:	b480      	push	{r7}
 800be7a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800be7c:	4b03      	ldr	r3, [pc, #12]	; (800be8c <BSP_SD_ReadCpltCallback+0x14>)
 800be7e:	2201      	movs	r2, #1
 800be80:	601a      	str	r2, [r3, #0]
}
 800be82:	bf00      	nop
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr
 800be8c:	20007050 	.word	0x20007050

0800be90 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800be90:	b480      	push	{r7}
 800be92:	b087      	sub	sp, #28
 800be94:	af00      	add	r7, sp, #0
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	4613      	mov	r3, r2
 800be9c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800be9e:	2301      	movs	r3, #1
 800bea0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bea2:	2300      	movs	r3, #0
 800bea4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bea6:	4b1f      	ldr	r3, [pc, #124]	; (800bf24 <FATFS_LinkDriverEx+0x94>)
 800bea8:	7a5b      	ldrb	r3, [r3, #9]
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	2b00      	cmp	r3, #0
 800beae:	d131      	bne.n	800bf14 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800beb0:	4b1c      	ldr	r3, [pc, #112]	; (800bf24 <FATFS_LinkDriverEx+0x94>)
 800beb2:	7a5b      	ldrb	r3, [r3, #9]
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	461a      	mov	r2, r3
 800beb8:	4b1a      	ldr	r3, [pc, #104]	; (800bf24 <FATFS_LinkDriverEx+0x94>)
 800beba:	2100      	movs	r1, #0
 800bebc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bebe:	4b19      	ldr	r3, [pc, #100]	; (800bf24 <FATFS_LinkDriverEx+0x94>)
 800bec0:	7a5b      	ldrb	r3, [r3, #9]
 800bec2:	b2db      	uxtb	r3, r3
 800bec4:	4a17      	ldr	r2, [pc, #92]	; (800bf24 <FATFS_LinkDriverEx+0x94>)
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4413      	add	r3, r2
 800beca:	68fa      	ldr	r2, [r7, #12]
 800becc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bece:	4b15      	ldr	r3, [pc, #84]	; (800bf24 <FATFS_LinkDriverEx+0x94>)
 800bed0:	7a5b      	ldrb	r3, [r3, #9]
 800bed2:	b2db      	uxtb	r3, r3
 800bed4:	461a      	mov	r2, r3
 800bed6:	4b13      	ldr	r3, [pc, #76]	; (800bf24 <FATFS_LinkDriverEx+0x94>)
 800bed8:	4413      	add	r3, r2
 800beda:	79fa      	ldrb	r2, [r7, #7]
 800bedc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bede:	4b11      	ldr	r3, [pc, #68]	; (800bf24 <FATFS_LinkDriverEx+0x94>)
 800bee0:	7a5b      	ldrb	r3, [r3, #9]
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	1c5a      	adds	r2, r3, #1
 800bee6:	b2d1      	uxtb	r1, r2
 800bee8:	4a0e      	ldr	r2, [pc, #56]	; (800bf24 <FATFS_LinkDriverEx+0x94>)
 800beea:	7251      	strb	r1, [r2, #9]
 800beec:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800beee:	7dbb      	ldrb	r3, [r7, #22]
 800bef0:	3330      	adds	r3, #48	; 0x30
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	3301      	adds	r3, #1
 800befc:	223a      	movs	r2, #58	; 0x3a
 800befe:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	3302      	adds	r3, #2
 800bf04:	222f      	movs	r2, #47	; 0x2f
 800bf06:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	3303      	adds	r3, #3
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bf14:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	371c      	adds	r7, #28
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	20007054 	.word	0x20007054

0800bf28 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf32:	2200      	movs	r2, #0
 800bf34:	6839      	ldr	r1, [r7, #0]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7ff ffaa 	bl	800be90 <FATFS_LinkDriverEx>
 800bf3c:	4603      	mov	r3, r0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3708      	adds	r7, #8
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
	...

0800bf48 <__libc_init_array>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	4d0d      	ldr	r5, [pc, #52]	; (800bf80 <__libc_init_array+0x38>)
 800bf4c:	4c0d      	ldr	r4, [pc, #52]	; (800bf84 <__libc_init_array+0x3c>)
 800bf4e:	1b64      	subs	r4, r4, r5
 800bf50:	10a4      	asrs	r4, r4, #2
 800bf52:	2600      	movs	r6, #0
 800bf54:	42a6      	cmp	r6, r4
 800bf56:	d109      	bne.n	800bf6c <__libc_init_array+0x24>
 800bf58:	4d0b      	ldr	r5, [pc, #44]	; (800bf88 <__libc_init_array+0x40>)
 800bf5a:	4c0c      	ldr	r4, [pc, #48]	; (800bf8c <__libc_init_array+0x44>)
 800bf5c:	f000 f820 	bl	800bfa0 <_init>
 800bf60:	1b64      	subs	r4, r4, r5
 800bf62:	10a4      	asrs	r4, r4, #2
 800bf64:	2600      	movs	r6, #0
 800bf66:	42a6      	cmp	r6, r4
 800bf68:	d105      	bne.n	800bf76 <__libc_init_array+0x2e>
 800bf6a:	bd70      	pop	{r4, r5, r6, pc}
 800bf6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf70:	4798      	blx	r3
 800bf72:	3601      	adds	r6, #1
 800bf74:	e7ee      	b.n	800bf54 <__libc_init_array+0xc>
 800bf76:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf7a:	4798      	blx	r3
 800bf7c:	3601      	adds	r6, #1
 800bf7e:	e7f2      	b.n	800bf66 <__libc_init_array+0x1e>
 800bf80:	0800bff4 	.word	0x0800bff4
 800bf84:	0800bff4 	.word	0x0800bff4
 800bf88:	0800bff4 	.word	0x0800bff4
 800bf8c:	0800bff8 	.word	0x0800bff8

0800bf90 <memset>:
 800bf90:	4402      	add	r2, r0
 800bf92:	4603      	mov	r3, r0
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d100      	bne.n	800bf9a <memset+0xa>
 800bf98:	4770      	bx	lr
 800bf9a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf9e:	e7f9      	b.n	800bf94 <memset+0x4>

0800bfa0 <_init>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	bf00      	nop
 800bfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa6:	bc08      	pop	{r3}
 800bfa8:	469e      	mov	lr, r3
 800bfaa:	4770      	bx	lr

0800bfac <_fini>:
 800bfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfae:	bf00      	nop
 800bfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb2:	bc08      	pop	{r3}
 800bfb4:	469e      	mov	lr, r3
 800bfb6:	4770      	bx	lr
