
Microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea24  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800ec1c  0800ec1c  0001ec1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed7c  0800ed7c  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed7c  0800ed7c  0001ed7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed84  0800ed84  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed84  0800ed84  0001ed84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed88  0800ed88  0001ed88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0800ed8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000074ac  20000040  0800edcc  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200074ec  0800edcc  000274ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000294a6  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c69  00000000  00000000  00049514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002148  00000000  00000000  0004e180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f58  00000000  00000000  000502c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035848  00000000  00000000  00052220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b3a8  00000000  00000000  00087a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00136bc1  00000000  00000000  000b2e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001e99d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e64  00000000  00000000  001e9a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000040 	.word	0x20000040
 8000214:	00000000 	.word	0x00000000
 8000218:	0800ec04 	.word	0x0800ec04

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000044 	.word	0x20000044
 8000234:	0800ec04 	.word	0x0800ec04

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000258:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b5b0      	push	{r4, r5, r7, lr}
 800054e:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8000552:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	  uint32_t byteswritten, bytesread; /* File write/read counts */
	  uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000554:	4bb4      	ldr	r3, [pc, #720]	; (8000828 <main+0x2dc>)
 8000556:	f507 7400 	add.w	r4, r7, #512	; 0x200
 800055a:	461d      	mov	r5, r3
 800055c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000560:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000564:	c403      	stmia	r4!, {r0, r1}
 8000566:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f003 fc21 	bl	8003dae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f982 	bl	8000874 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000570:	f000 f9ee 	bl	8000950 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 fe16 	bl	80011a4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8000578:	f000 fa18 	bl	80009ac <MX_ADC3_Init>
  MX_DSIHOST_DSI_Init();
 800057c:	f000 fb44 	bl	8000c08 <MX_DSIHOST_DSI_Init>
  MX_FMC_Init();
 8000580:	f000 fdc2 	bl	8001108 <MX_FMC_Init>
  MX_SAI1_Init();
 8000584:	f000 fc28 	bl	8000dd8 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 8000588:	f000 fca6 	bl	8000ed8 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 800058c:	f000 fcc4 	bl	8000f18 <MX_SPDIFRX_Init>
  MX_USART1_UART_Init();
 8000590:	f000 fcf4 	bl	8000f7c <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000594:	f000 fd22 	bl	8000fdc <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000598:	f000 fd4e 	bl	8001038 <MX_USB_OTG_HS_PCD_Init>
  MX_DFSDM1_Init();
 800059c:	f000 fa58 	bl	8000a50 <MX_DFSDM1_Init>
  MX_DMA_Init();
 80005a0:	f000 fd7c 	bl	800109c <MX_DMA_Init>
  MX_FATFS_Init();
 80005a4:	f00b fab8 	bl	800bb18 <MX_FATFS_Init>
  MX_RTC_Init();
 80005a8:	f000 fbe6 	bl	8000d78 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b2:	489e      	ldr	r0, [pc, #632]	; (800082c <main+0x2e0>)
 80005b4:	f005 fbc4 	bl	8005d40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2101      	movs	r1, #1
 80005bc:	489c      	ldr	r0, [pc, #624]	; (8000830 <main+0x2e4>)
 80005be:	f005 fbbf 	bl	8005d40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2102      	movs	r1, #2
 80005c6:	489a      	ldr	r0, [pc, #616]	; (8000830 <main+0x2e4>)
 80005c8:	f005 fbba 	bl	8005d40 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2108      	movs	r1, #8
 80005d0:	4897      	ldr	r0, [pc, #604]	; (8000830 <main+0x2e4>)
 80005d2:	f005 fbb5 	bl	8005d40 <HAL_GPIO_WritePin>
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80005d6:	2200      	movs	r2, #0
 80005d8:	4996      	ldr	r1, [pc, #600]	; (8000834 <main+0x2e8>)
 80005da:	4897      	ldr	r0, [pc, #604]	; (8000838 <main+0x2ec>)
 80005dc:	f00d fa3c 	bl	800da58 <f_mount>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d006      	beq.n	80005f4 <main+0xa8>
      {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED3_Pin);
 80005e6:	2108      	movs	r1, #8
 80005e8:	4891      	ldr	r0, [pc, #580]	; (8000830 <main+0x2e4>)
 80005ea:	f005 fbc2 	bl	8005d72 <HAL_GPIO_TogglePin>
          Error_Handler();
 80005ee:	f001 f859 	bl	80016a4 <Error_Handler>
 80005f2:	e044      	b.n	800067e <main+0x132>
      }
      else
      {
          if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, rtext, sizeof(rtext)) != FR_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005fa:	9200      	str	r2, [sp, #0]
 80005fc:	2200      	movs	r2, #0
 80005fe:	2107      	movs	r1, #7
 8000600:	488c      	ldr	r0, [pc, #560]	; (8000834 <main+0x2e8>)
 8000602:	f00d fe4b 	bl	800e29c <f_mkfs>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d006      	beq.n	800061a <main+0xce>
          {
        	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED3_Pin);
 800060c:	2108      	movs	r1, #8
 800060e:	4888      	ldr	r0, [pc, #544]	; (8000830 <main+0x2e4>)
 8000610:	f005 fbaf 	bl	8005d72 <HAL_GPIO_TogglePin>
              Error_Handler();
 8000614:	f001 f846 	bl	80016a4 <Error_Handler>
 8000618:	e031      	b.n	800067e <main+0x132>
          }
          else
          {
              //Open file for writing (Create)
              if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 800061a:	220a      	movs	r2, #10
 800061c:	4987      	ldr	r1, [pc, #540]	; (800083c <main+0x2f0>)
 800061e:	4888      	ldr	r0, [pc, #544]	; (8000840 <main+0x2f4>)
 8000620:	f00d fa60 	bl	800dae4 <f_open>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <main+0xec>
              {
            	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED3_Pin);
 800062a:	2108      	movs	r1, #8
 800062c:	4880      	ldr	r0, [pc, #512]	; (8000830 <main+0x2e4>)
 800062e:	f005 fba0 	bl	8005d72 <HAL_GPIO_TogglePin>
                  Error_Handler();
 8000632:	f001 f837 	bl	80016a4 <Error_Handler>
 8000636:	e022      	b.n	800067e <main+0x132>
              {



                  //Write to the text file
                  res = f_write(&SDFile, time, strlen((char *)time), (void *)&byteswritten);
 8000638:	4b82      	ldr	r3, [pc, #520]	; (8000844 <main+0x2f8>)
 800063a:	681c      	ldr	r4, [r3, #0]
 800063c:	4b81      	ldr	r3, [pc, #516]	; (8000844 <main+0x2f8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fdf9 	bl	8000238 <strlen>
 8000646:	4602      	mov	r2, r0
 8000648:	f507 7307 	add.w	r3, r7, #540	; 0x21c
 800064c:	4621      	mov	r1, r4
 800064e:	487c      	ldr	r0, [pc, #496]	; (8000840 <main+0x2f4>)
 8000650:	f00d fc06 	bl	800de60 <f_write>
 8000654:	4603      	mov	r3, r0
 8000656:	f887 3223 	strb.w	r3, [r7, #547]	; 0x223
                  if((byteswritten == 0) || (res != FR_OK))
 800065a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800065e:	2b00      	cmp	r3, #0
 8000660:	d003      	beq.n	800066a <main+0x11e>
 8000662:	f897 3223 	ldrb.w	r3, [r7, #547]	; 0x223
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <main+0x12c>
                  {
                	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED3_Pin);
 800066a:	2108      	movs	r1, #8
 800066c:	4870      	ldr	r0, [pc, #448]	; (8000830 <main+0x2e4>)
 800066e:	f005 fb80 	bl	8005d72 <HAL_GPIO_TogglePin>
                      Error_Handler();
 8000672:	f001 f817 	bl	80016a4 <Error_Handler>
 8000676:	e002      	b.n	800067e <main+0x132>
                  else
                  {



                      f_close(&SDFile);
 8000678:	4871      	ldr	r0, [pc, #452]	; (8000840 <main+0x2f4>)
 800067a:	f00d fde4 	bl	800e246 <f_close>
                  }
              }
          }
      }
      f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	486d      	ldr	r0, [pc, #436]	; (8000838 <main+0x2ec>)
 8000684:	f00d f9e8 	bl	800da58 <f_mount>
    /* USER CODE BEGIN 3 */
	  /*HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
	  HAL_Delay(1000);
	  get_time();
	  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);*/
	  if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 8000688:	4b6f      	ldr	r3, [pc, #444]	; (8000848 <main+0x2fc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d171      	bne.n	8000774 <main+0x228>
 8000690:	4b6e      	ldr	r3, [pc, #440]	; (800084c <main+0x300>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d16d      	bne.n	8000774 <main+0x228>
	  	    {
	  	    	for(i = 0; i < 1024; i++)
 8000698:	2300      	movs	r3, #0
 800069a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800069e:	e03f      	b.n	8000720 <main+0x1d4>
	  	    	{
	  	    		PlayBuff[2*i]     = SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 80006a0:	4a6b      	ldr	r2, [pc, #428]	; (8000850 <main+0x304>)
 80006a2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80006a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006aa:	121b      	asrs	r3, r3, #8
 80006ac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80006b0:	db0c      	blt.n	80006cc <main+0x180>
 80006b2:	4a67      	ldr	r2, [pc, #412]	; (8000850 <main+0x304>)
 80006b4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80006b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006bc:	121b      	asrs	r3, r3, #8
 80006be:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80006c2:	4293      	cmp	r3, r2
 80006c4:	bfa8      	it	ge
 80006c6:	4613      	movge	r3, r2
 80006c8:	b21a      	sxth	r2, r3
 80006ca:	e000      	b.n	80006ce <main+0x182>
 80006cc:	4a61      	ldr	r2, [pc, #388]	; (8000854 <main+0x308>)
 80006ce:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4960      	ldr	r1, [pc, #384]	; (8000858 <main+0x30c>)
 80006d6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  	    		PlayBuff[(2*i)+1] = SaturaLH((RightRecBuff[i] >> 8), -32768, 32767);
 80006da:	4a60      	ldr	r2, [pc, #384]	; (800085c <main+0x310>)
 80006dc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80006e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006e4:	121b      	asrs	r3, r3, #8
 80006e6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80006ea:	db0c      	blt.n	8000706 <main+0x1ba>
 80006ec:	4a5b      	ldr	r2, [pc, #364]	; (800085c <main+0x310>)
 80006ee:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80006f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f6:	121b      	asrs	r3, r3, #8
 80006f8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80006fc:	4293      	cmp	r3, r2
 80006fe:	bfa8      	it	ge
 8000700:	4613      	movge	r3, r2
 8000702:	b21a      	sxth	r2, r3
 8000704:	e000      	b.n	8000708 <main+0x1bc>
 8000706:	4a53      	ldr	r2, [pc, #332]	; (8000854 <main+0x308>)
 8000708:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	3301      	adds	r3, #1
 8000710:	4951      	ldr	r1, [pc, #324]	; (8000858 <main+0x30c>)
 8000712:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  	    	for(i = 0; i < 1024; i++)
 8000716:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800071a:	3301      	adds	r3, #1
 800071c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8000720:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000728:	d3ba      	bcc.n	80006a0 <main+0x154>
	  	    	}
	  	    	if(PlaybackStarted == 0)
 800072a:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <main+0x314>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d11a      	bne.n	8000768 <main+0x21c>
	  	    	{
	  	    		if(0 != audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) &PlayBuff[0], 4096))
 8000732:	4b4c      	ldr	r3, [pc, #304]	; (8000864 <main+0x318>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800073c:	4946      	ldr	r1, [pc, #280]	; (8000858 <main+0x30c>)
 800073e:	2034      	movs	r0, #52	; 0x34
 8000740:	4798      	blx	r3
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <main+0x200>
	  	    		{
	  	    			Error_Handler();
 8000748:	f000 ffac 	bl	80016a4 <Error_Handler>
	  	    		}
	  	    		if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *) &PlayBuff[0], 4096))
 800074c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000750:	4941      	ldr	r1, [pc, #260]	; (8000858 <main+0x30c>)
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <main+0x31c>)
 8000754:	f007 fede 	bl	8008514 <HAL_SAI_Transmit_DMA>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <main+0x216>
	  	    		{
	  	    			Error_Handler();
 800075e:	f000 ffa1 	bl	80016a4 <Error_Handler>
	  	    		}
	  	    		PlaybackStarted = 1;
 8000762:	4b3f      	ldr	r3, [pc, #252]	; (8000860 <main+0x314>)
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
	  	    	}
	  	    	DmaLeftRecHalfBuffCplt  = 0;
 8000768:	4b37      	ldr	r3, [pc, #220]	; (8000848 <main+0x2fc>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
	  	    	DmaRightRecHalfBuffCplt = 0;
 800076e:	4b37      	ldr	r3, [pc, #220]	; (800084c <main+0x300>)
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
	  	    }
	  	    if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 8000774:	4b3d      	ldr	r3, [pc, #244]	; (800086c <main+0x320>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d185      	bne.n	8000688 <main+0x13c>
 800077c:	4b3c      	ldr	r3, [pc, #240]	; (8000870 <main+0x324>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d181      	bne.n	8000688 <main+0x13c>
	  	    {
	  	    	for(i = 1024; i < 2048; i++)
 8000784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000788:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800078c:	e03f      	b.n	800080e <main+0x2c2>
	  	    	{
	  	    		PlayBuff[2*i]     = SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 800078e:	4a30      	ldr	r2, [pc, #192]	; (8000850 <main+0x304>)
 8000790:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000798:	121b      	asrs	r3, r3, #8
 800079a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800079e:	db0c      	blt.n	80007ba <main+0x26e>
 80007a0:	4a2b      	ldr	r2, [pc, #172]	; (8000850 <main+0x304>)
 80007a2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007aa:	121b      	asrs	r3, r3, #8
 80007ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80007b0:	4293      	cmp	r3, r2
 80007b2:	bfa8      	it	ge
 80007b4:	4613      	movge	r3, r2
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	e000      	b.n	80007bc <main+0x270>
 80007ba:	4a26      	ldr	r2, [pc, #152]	; (8000854 <main+0x308>)
 80007bc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	4925      	ldr	r1, [pc, #148]	; (8000858 <main+0x30c>)
 80007c4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  	    		PlayBuff[(2*i)+1] = SaturaLH((RightRecBuff[i] >> 8), -32768, 32767);
 80007c8:	4a24      	ldr	r2, [pc, #144]	; (800085c <main+0x310>)
 80007ca:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d2:	121b      	asrs	r3, r3, #8
 80007d4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80007d8:	db0c      	blt.n	80007f4 <main+0x2a8>
 80007da:	4a20      	ldr	r2, [pc, #128]	; (800085c <main+0x310>)
 80007dc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e4:	121b      	asrs	r3, r3, #8
 80007e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80007ea:	4293      	cmp	r3, r2
 80007ec:	bfa8      	it	ge
 80007ee:	4613      	movge	r3, r2
 80007f0:	b21a      	sxth	r2, r3
 80007f2:	e000      	b.n	80007f6 <main+0x2aa>
 80007f4:	4a17      	ldr	r2, [pc, #92]	; (8000854 <main+0x308>)
 80007f6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	3301      	adds	r3, #1
 80007fe:	4916      	ldr	r1, [pc, #88]	; (8000858 <main+0x30c>)
 8000800:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	  	    	for(i = 1024; i < 2048; i++)
 8000804:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000808:	3301      	adds	r3, #1
 800080a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800080e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8000812:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000816:	d3ba      	bcc.n	800078e <main+0x242>
	  	    	}
	  	    	DmaLeftRecBuffCplt  = 0;
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <main+0x320>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
	  	    	DmaRightRecBuffCplt = 0;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <main+0x324>)
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
	  if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 8000824:	e730      	b.n	8000688 <main+0x13c>
 8000826:	bf00      	nop
 8000828:	0800ec48 	.word	0x0800ec48
 800082c:	40022000 	.word	0x40022000
 8000830:	40022400 	.word	0x40022400
 8000834:	2000704c 	.word	0x2000704c
 8000838:	20007050 	.word	0x20007050
 800083c:	0800ec3c 	.word	0x0800ec3c
 8000840:	20007280 	.word	0x20007280
 8000844:	20006fb0 	.word	0x20006fb0
 8000848:	2000605c 	.word	0x2000605c
 800084c:	20006064 	.word	0x20006064
 8000850:	2000005c 	.word	0x2000005c
 8000854:	ffff8000 	.word	0xffff8000
 8000858:	2000405c 	.word	0x2000405c
 800085c:	2000205c 	.word	0x2000205c
 8000860:	2000606c 	.word	0x2000606c
 8000864:	20006070 	.word	0x20006070
 8000868:	200062d0 	.word	0x200062d0
 800086c:	20006060 	.word	0x20006060
 8000870:	20006068 	.word	0x20006068

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b094      	sub	sp, #80	; 0x50
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	2234      	movs	r2, #52	; 0x34
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f00e f9b6 	bl	800ebf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000898:	f006 f978 	bl	8006b8c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800089c:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <SystemClock_Config+0xd4>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <SystemClock_Config+0xd4>)
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a6:	6413      	str	r3, [r2, #64]	; 0x40
 80008a8:	4b27      	ldr	r3, [pc, #156]	; (8000948 <SystemClock_Config+0xd4>)
 80008aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008b4:	4b25      	ldr	r3, [pc, #148]	; (800094c <SystemClock_Config+0xd8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008bc:	4a23      	ldr	r2, [pc, #140]	; (800094c <SystemClock_Config+0xd8>)
 80008be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b21      	ldr	r3, [pc, #132]	; (800094c <SystemClock_Config+0xd8>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008cc:	603b      	str	r3, [r7, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008d0:	2309      	movs	r3, #9
 80008d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008da:	2301      	movs	r3, #1
 80008dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008de:	2302      	movs	r3, #2
 80008e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008e8:	2319      	movs	r3, #25
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008ec:	23c0      	movs	r3, #192	; 0xc0
 80008ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008f0:	2304      	movs	r3, #4
 80008f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008f4:	2304      	movs	r3, #4
 80008f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4618      	mov	r0, r3
 8000902:	f006 f953 	bl	8006bac <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800090c:	f000 feca 	bl	80016a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	230f      	movs	r3, #15
 8000912:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2302      	movs	r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800091c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000920:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000926:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000928:	f107 0308 	add.w	r3, r7, #8
 800092c:	2101      	movs	r1, #1
 800092e:	4618      	mov	r0, r3
 8000930:	f006 fbea 	bl	8007108 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800093a:	f000 feb3 	bl	80016a4 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3750      	adds	r7, #80	; 0x50
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800
 800094c:	40007000 	.word	0x40007000

08000950 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0a4      	sub	sp, #144	; 0x90
 8000954:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2290      	movs	r2, #144	; 0x90
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f00e f949 	bl	800ebf4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <PeriphCommonClock_Config+0x58>)
 8000964:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000966:	23c0      	movs	r3, #192	; 0xc0
 8000968:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800096e:	2303      	movs	r3, #3
 8000970:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000972:	2300      	movs	r3, #0
 8000974:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000976:	2301      	movs	r3, #1
 8000978:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800097a:	2300      	movs	r3, #0
 800097c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800097e:	2300      	movs	r3, #0
 8000980:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8000982:	2300      	movs	r3, #0
 8000984:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4618      	mov	r0, r3
 8000992:	f006 fd9f 	bl	80074d4 <HAL_RCCEx_PeriphCLKConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800099c:	f000 fe82 	bl	80016a4 <Error_Handler>
  }
}
 80009a0:	bf00      	nop
 80009a2:	3790      	adds	r7, #144	; 0x90
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	18280000 	.word	0x18280000

080009ac <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009b2:	463b      	mov	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80009be:	4b21      	ldr	r3, [pc, #132]	; (8000a44 <MX_ADC3_Init+0x98>)
 80009c0:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <MX_ADC3_Init+0x9c>)
 80009c2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80009c4:	4b1f      	ldr	r3, [pc, #124]	; (8000a44 <MX_ADC3_Init+0x98>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <MX_ADC3_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	; (8000a44 <MX_ADC3_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_ADC3_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80009dc:	4b19      	ldr	r3, [pc, #100]	; (8000a44 <MX_ADC3_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_ADC3_Init+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_ADC3_Init+0x98>)
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <MX_ADC3_Init+0xa0>)
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_ADC3_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_ADC3_Init+0x98>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_ADC3_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_ADC3_Init+0x98>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <MX_ADC3_Init+0x98>)
 8000a0c:	f003 fa50 	bl	8003eb0 <HAL_ADC_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8000a16:	f000 fe45 	bl	80016a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a26:	463b      	mov	r3, r7
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <MX_ADC3_Init+0x98>)
 8000a2c:	f003 fa84 	bl	8003f38 <HAL_ADC_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000a36:	f000 fe35 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20006074 	.word	0x20006074
 8000a48:	40012200 	.word	0x40012200
 8000a4c:	0f000001 	.word	0x0f000001

08000a50 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000a54:	4b63      	ldr	r3, [pc, #396]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a56:	4a64      	ldr	r2, [pc, #400]	; (8000be8 <MX_DFSDM1_Init+0x198>)
 8000a58:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000a5a:	4b62      	ldr	r3, [pc, #392]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000a60:	4b60      	ldr	r3, [pc, #384]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = DISABLE;
 8000a66:	4b5f      	ldr	r3, [pc, #380]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000a6c:	4b5d      	ldr	r3, [pc, #372]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = DISABLE;
 8000a72:	4b5c      	ldr	r3, [pc, #368]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000a78:	4b5a      	ldr	r3, [pc, #360]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000a7e:	4b59      	ldr	r3, [pc, #356]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000a84:	4b57      	ldr	r3, [pc, #348]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a8a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000a8c:	4b55      	ldr	r3, [pc, #340]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a8e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000a92:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000a94:	4b53      	ldr	r3, [pc, #332]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a96:	2240      	movs	r2, #64	; 0x40
 8000a98:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8000a9a:	4b52      	ldr	r3, [pc, #328]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter0);
 8000aa0:	4850      	ldr	r0, [pc, #320]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000aa2:	f003 fe6b 	bl	800477c <HAL_DFSDM_FilterInit>
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 8000aa6:	4b51      	ldr	r3, [pc, #324]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000aa8:	4a51      	ldr	r2, [pc, #324]	; (8000bf0 <MX_DFSDM1_Init+0x1a0>)
 8000aaa:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 8000aac:	4b4f      	ldr	r3, [pc, #316]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 8000ab2:	4b4e      	ldr	r3, [pc, #312]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = DISABLE;
 8000ab8:	4b4c      	ldr	r3, [pc, #304]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8000abe:	4b4b      	ldr	r3, [pc, #300]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 8000ac4:	4b49      	ldr	r3, [pc, #292]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 8000aca:	4b48      	ldr	r3, [pc, #288]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 8000ad0:	4b46      	ldr	r3, [pc, #280]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000ad6:	4b45      	ldr	r3, [pc, #276]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000ad8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000adc:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8000ade:	4b43      	ldr	r3, [pc, #268]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000ae0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ae4:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 8000ae6:	4b41      	ldr	r3, [pc, #260]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000ae8:	2240      	movs	r2, #64	; 0x40
 8000aea:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 8000aec:	4b3f      	ldr	r3, [pc, #252]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000aee:	2201      	movs	r2, #1
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_DFSDM_FilterInit(&hdfsdm1_filter1);
 8000af2:	483e      	ldr	r0, [pc, #248]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000af4:	f003 fe42 	bl	800477c <HAL_DFSDM_FilterInit>
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000af8:	4b3e      	ldr	r3, [pc, #248]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000afa:	4a3f      	ldr	r2, [pc, #252]	; (8000bf8 <MX_DFSDM1_Init+0x1a8>)
 8000afc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000afe:	4b3d      	ldr	r3, [pc, #244]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000b04:	4b3b      	ldr	r3, [pc, #236]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b0a:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 8000b0c:	4b39      	ldr	r3, [pc, #228]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b0e:	2204      	movs	r2, #4
 8000b10:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b12:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b18:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b1e:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b24:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000b26:	4b33      	ldr	r3, [pc, #204]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b2c:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b32:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 10;
 8000b38:	4b2e      	ldr	r3, [pc, #184]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b3a:	220a      	movs	r2, #10
 8000b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8000b44:	4b2b      	ldr	r3, [pc, #172]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000b4a:	482a      	ldr	r0, [pc, #168]	; (8000bf4 <MX_DFSDM1_Init+0x1a4>)
 8000b4c:	f003 fd56 	bl	80045fc <HAL_DFSDM_ChannelInit>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_DFSDM1_Init+0x10a>
  {
    Error_Handler();
 8000b56:	f000 fda5 	bl	80016a4 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b5a:	4b28      	ldr	r3, [pc, #160]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000b5c:	4a28      	ldr	r2, [pc, #160]	; (8000c00 <MX_DFSDM1_Init+0x1b0>)
 8000b5e:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b60:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000b62:	2201      	movs	r2, #1
 8000b64:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000b66:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000b68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 8000b6e:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000b8e:	2204      	movs	r2, #4
 8000b90:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000b9a:	220a      	movs	r2, #10
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000baa:	4814      	ldr	r0, [pc, #80]	; (8000bfc <MX_DFSDM1_Init+0x1ac>)
 8000bac:	f003 fd26 	bl	80045fc <HAL_DFSDM_ChannelInit>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_DFSDM1_Init+0x16a>
  {
    Error_Handler();
 8000bb6:	f000 fd75 	bl	80016a4 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_OFF);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	4911      	ldr	r1, [pc, #68]	; (8000c04 <MX_DFSDM1_Init+0x1b4>)
 8000bbe:	4809      	ldr	r0, [pc, #36]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000bc0:	f003 feb6 	bl	8004930 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 8000bc4:	490f      	ldr	r1, [pc, #60]	; (8000c04 <MX_DFSDM1_Init+0x1b4>)
 8000bc6:	4807      	ldr	r0, [pc, #28]	; (8000be4 <MX_DFSDM1_Init+0x194>)
 8000bc8:	f003 fef8 	bl	80049bc <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_OFF);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	490d      	ldr	r1, [pc, #52]	; (8000c04 <MX_DFSDM1_Init+0x1b4>)
 8000bd0:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000bd2:	f003 fead 	bl	8004930 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_DFSDM1_Init+0x19c>)
 8000bda:	f003 feef 	bl	80049bc <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200060bc 	.word	0x200060bc
 8000be8:	40017500 	.word	0x40017500
 8000bec:	20006110 	.word	0x20006110
 8000bf0:	40017580 	.word	0x40017580
 8000bf4:	20006164 	.word	0x20006164
 8000bf8:	40017400 	.word	0x40017400
 8000bfc:	2000619c 	.word	0x2000619c
 8000c00:	40017420 	.word	0x40017420
 8000c04:	00010002 	.word	0x00010002

08000c08 <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0a0      	sub	sp, #128	; 0x80
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000c0e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000c1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c1e:	2224      	movs	r2, #36	; 0x24
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f00d ffe6 	bl	800ebf4 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000c28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
 8000c38:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2234      	movs	r2, #52	; 0x34
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f00d ffd7 	bl	800ebf4 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000c46:	4b4a      	ldr	r3, [pc, #296]	; (8000d70 <MX_DSIHOST_DSI_Init+0x168>)
 8000c48:	4a4a      	ldr	r2, [pc, #296]	; (8000d74 <MX_DSIHOST_DSI_Init+0x16c>)
 8000c4a:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000c4c:	4b48      	ldr	r3, [pc, #288]	; (8000d70 <MX_DSIHOST_DSI_Init+0x168>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000c52:	4b47      	ldr	r3, [pc, #284]	; (8000d70 <MX_DSIHOST_DSI_Init+0x168>)
 8000c54:	2204      	movs	r2, #4
 8000c56:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000c58:	4b45      	ldr	r3, [pc, #276]	; (8000d70 <MX_DSIHOST_DSI_Init+0x168>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000c5e:	2314      	movs	r3, #20
 8000c60:	677b      	str	r3, [r7, #116]	; 0x74
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	67bb      	str	r3, [r7, #120]	; 0x78
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000c6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000c6e:	4619      	mov	r1, r3
 8000c70:	483f      	ldr	r0, [pc, #252]	; (8000d70 <MX_DSIHOST_DSI_Init+0x168>)
 8000c72:	f004 fae3 	bl	800523c <HAL_DSI_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_DSIHOST_DSI_Init+0x78>
  {
    Error_Handler();
 8000c7c:	f000 fd12 	bl	80016a4 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000c80:	2301      	movs	r3, #1
 8000c82:	653b      	str	r3, [r7, #80]	; 0x50
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	657b      	str	r3, [r7, #84]	; 0x54
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	65bb      	str	r3, [r7, #88]	; 0x58
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  HostTimeouts.LowPowerReadTimeout = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	663b      	str	r3, [r7, #96]	; 0x60
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	667b      	str	r3, [r7, #100]	; 0x64
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	66bb      	str	r3, [r7, #104]	; 0x68
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  HostTimeouts.BTATimeout = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000ca4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4831      	ldr	r0, [pc, #196]	; (8000d70 <MX_DSIHOST_DSI_Init+0x168>)
 8000cac:	f004 fd8e 	bl	80057cc <HAL_DSI_ConfigHostTimeouts>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_DSIHOST_DSI_Init+0xb2>
  {
    Error_Handler();
 8000cb6:	f000 fcf5 	bl	80016a4 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000cba:	231c      	movs	r3, #28
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000cbe:	2321      	movs	r3, #33	; 0x21
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PhyTimings.DataLaneHS2LPTime = 15;
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	643b      	str	r3, [r7, #64]	; 0x40
  PhyTimings.DataLaneLP2HSTime = 25;
 8000cc6:	2319      	movs	r3, #25
 8000cc8:	647b      	str	r3, [r7, #68]	; 0x44
  PhyTimings.DataLaneMaxReadTime = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	64bb      	str	r3, [r7, #72]	; 0x48
  PhyTimings.StopWaitTime = 0;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000cd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4825      	ldr	r0, [pc, #148]	; (8000d70 <MX_DSIHOST_DSI_Init+0x168>)
 8000cda:	f004 fd0d 	bl	80056f8 <HAL_DSI_ConfigPhyTimer>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_DSIHOST_DSI_Init+0xe0>
  {
    Error_Handler();
 8000ce4:	f000 fcde 	bl	80016a4 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000ce8:	2104      	movs	r1, #4
 8000cea:	4821      	ldr	r0, [pc, #132]	; (8000d70 <MX_DSIHOST_DSI_Init+0x168>)
 8000cec:	f004 fcdc 	bl	80056a8 <HAL_DSI_ConfigFlowControl>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_DSIHOST_DSI_Init+0xf2>
  {
    Error_Handler();
 8000cf6:	f000 fcd5 	bl	80016a4 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000cfa:	f242 7110 	movw	r1, #10000	; 0x2710
 8000cfe:	481c      	ldr	r0, [pc, #112]	; (8000d70 <MX_DSIHOST_DSI_Init+0x168>)
 8000d00:	f004 fe2c 	bl	800595c <HAL_DSI_SetLowPowerRXFilter>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_DSIHOST_DSI_Init+0x106>
  {
    Error_Handler();
 8000d0a:	f000 fccb 	bl	80016a4 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	4817      	ldr	r0, [pc, #92]	; (8000d70 <MX_DSIHOST_DSI_Init+0x168>)
 8000d12:	f004 fbaf 	bl	8005474 <HAL_DSI_ConfigErrorMonitor>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_DSIHOST_DSI_Init+0x118>
  {
    Error_Handler();
 8000d1c:	f000 fcc2 	bl	80016a4 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_DSIHOST_DSI_Init+0x168>)
 8000d5a:	f004 fc47 	bl	80055ec <HAL_DSI_ConfigCommand>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_DSIHOST_DSI_Init+0x160>
  {
    Error_Handler();
 8000d64:	f000 fc9e 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3780      	adds	r7, #128	; 0x80
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20006294 	.word	0x20006294
 8000d74:	40016c00 	.word	0x40016c00

08000d78 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <MX_RTC_Init+0x58>)
 8000d92:	4a10      	ldr	r2, [pc, #64]	; (8000dd4 <MX_RTC_Init+0x5c>)
 8000d94:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <MX_RTC_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_RTC_Init+0x58>)
 8000d9e:	227f      	movs	r2, #127	; 0x7f
 8000da0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_RTC_Init+0x58>)
 8000da4:	22ff      	movs	r2, #255	; 0xff
 8000da6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_RTC_Init+0x58>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_RTC_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_RTC_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dba:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_RTC_Init+0x58>)
 8000dbc:	f007 f924 	bl	8008008 <HAL_RTC_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000dc6:	f000 fc6d 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200062b0 	.word	0x200062b0
 8000dd4:	40002800 	.word	0x40002800

08000dd8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000dd8:	b598      	push	{r3, r4, r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000dde:	4a3b      	ldr	r2, [pc, #236]	; (8000ecc <MX_SAI1_Init+0xf4>)
 8000de0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000de2:	4b39      	ldr	r3, [pc, #228]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000de8:	4b37      	ldr	r3, [pc, #220]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000df0:	2280      	movs	r2, #128	; 0x80
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dfa:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000e00:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e1a:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000e1e:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e20:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 32;
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 16;
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e40:	2210      	movs	r2, #16
 8000e42:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000e44:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e4a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e54:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e58:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 2;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000003;
 8000e6c:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e6e:	2203      	movs	r2, #3
 8000e70:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000e72:	4815      	ldr	r0, [pc, #84]	; (8000ec8 <MX_SAI1_Init+0xf0>)
 8000e74:	f007 f9d0 	bl	8008218 <HAL_SAI_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000e7e:	f000 fc11 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if(WM8994_ID != wm8994_drv.ReadID(AUDIO_I2C_ADDRESS))
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <MX_SAI1_Init+0xf8>)
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	2034      	movs	r0, #52	; 0x34
 8000e88:	4798      	blx	r3
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	f648 1294 	movw	r2, #35220	; 0x8994
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d001      	beq.n	8000e98 <MX_SAI1_Init+0xc0>
      {
        Error_Handler();
 8000e94:	f000 fc06 	bl	80016a4 <Error_Handler>
      }

      audio_drv = &wm8994_drv;
 8000e98:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <MX_SAI1_Init+0xfc>)
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <MX_SAI1_Init+0xf8>)
 8000e9c:	601a      	str	r2, [r3, #0]
      audio_drv->Reset(AUDIO_I2C_ADDRESS);
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <MX_SAI1_Init+0xfc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea4:	2034      	movs	r0, #52	; 0x34
 8000ea6:	4798      	blx	r3
      if(0 != audio_drv->Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 100, AUDIO_FREQUENCY_22K))
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MX_SAI1_Init+0xfc>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681c      	ldr	r4, [r3, #0]
 8000eae:	f245 6322 	movw	r3, #22050	; 0x5622
 8000eb2:	2264      	movs	r2, #100	; 0x64
 8000eb4:	2102      	movs	r1, #2
 8000eb6:	2034      	movs	r0, #52	; 0x34
 8000eb8:	47a0      	blx	r4
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_SAI1_Init+0xec>
      {
        Error_Handler();
 8000ec0:	f000 fbf0 	bl	80016a4 <Error_Handler>
      }

  /* USER CODE END SAI1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd98      	pop	{r3, r4, r7, pc}
 8000ec8:	200062d0 	.word	0x200062d0
 8000ecc:	40015804 	.word	0x40015804
 8000ed0:	20000004 	.word	0x20000004
 8000ed4:	20006070 	.word	0x20006070

08000ed8 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000ede:	4a0d      	ldr	r2, [pc, #52]	; (8000f14 <MX_SDMMC1_SD_Init+0x3c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <MX_SDMMC1_SD_Init+0x38>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	20006354 	.word	0x20006354
 8000f14:	40012c00 	.word	0x40012c00

08000f18 <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f1e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000f22:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f2a:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_SPDIFRX_Init+0x60>)
 8000f64:	f008 ffe4 	bl	8009f30 <HAL_SPDIFRX_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 8000f6e:	f000 fb99 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20006498 	.word	0x20006498

08000f7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_USART1_UART_Init+0x58>)
 8000f82:	4a15      	ldr	r2, [pc, #84]	; (8000fd8 <MX_USART1_UART_Init+0x5c>)
 8000f84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_USART1_UART_Init+0x58>)
 8000f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_USART1_UART_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <MX_USART1_UART_Init+0x58>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_USART1_UART_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_USART1_UART_Init+0x58>)
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_USART1_UART_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_USART1_UART_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_USART1_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_USART1_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_USART1_UART_Init+0x58>)
 8000fc0:	f009 f812 	bl	8009fe8 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fca:	f000 fb6b 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200064e4 	.word	0x200064e4
 8000fd8:	40011000 	.word	0x40011000

08000fdc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fe6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fea:	2206      	movs	r2, #6
 8000fec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001020:	f005 fc6c 	bl	80068fc <HAL_PCD_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800102a:	f000 fb3b 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000656c 	.word	0x2000656c

08001038 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800103e:	4a16      	ldr	r2, [pc, #88]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001040:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001044:	2209      	movs	r2, #9
 8001046:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001054:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001056:	2201      	movs	r2, #1
 8001058:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800105c:	2200      	movs	r2, #0
 800105e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001068:	2200      	movs	r2, #0
 800106a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800106e:	2200      	movs	r2, #0
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001074:	2200      	movs	r2, #0
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800107a:	2200      	movs	r2, #0
 800107c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800107e:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001080:	f005 fc3c 	bl	80068fc <HAL_PCD_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 800108a:	f000 fb0b 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20006a74 	.word	0x20006a74
 8001098:	40040000 	.word	0x40040000

0800109c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_DMA_Init+0x68>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a17      	ldr	r2, [pc, #92]	; (8001104 <MX_DMA_Init+0x68>)
 80010a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_DMA_Init+0x68>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2038      	movs	r0, #56	; 0x38
 80010c0:	f003 fa65 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80010c4:	2038      	movs	r0, #56	; 0x38
 80010c6:	f003 fa7e 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2100      	movs	r1, #0
 80010ce:	2039      	movs	r0, #57	; 0x39
 80010d0:	f003 fa5d 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80010d4:	2039      	movs	r0, #57	; 0x39
 80010d6:	f003 fa76 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	203b      	movs	r0, #59	; 0x3b
 80010e0:	f003 fa55 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010e4:	203b      	movs	r0, #59	; 0x3b
 80010e6:	f003 fa6e 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2100      	movs	r1, #0
 80010ee:	2045      	movs	r0, #69	; 0x45
 80010f0:	f003 fa4d 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80010f4:	2045      	movs	r0, #69	; 0x45
 80010f6:	f003 fa66 	bl	80045c6 <HAL_NVIC_EnableIRQ>

}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800

08001108 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	615a      	str	r2, [r3, #20]
 800111e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_FMC_Init+0x94>)
 8001122:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <MX_FMC_Init+0x98>)
 8001124:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_FMC_Init+0x94>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800112c:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_FMC_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_FMC_Init+0x94>)
 8001134:	2208      	movs	r2, #8
 8001136:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_FMC_Init+0x94>)
 800113a:	2220      	movs	r2, #32
 800113c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_FMC_Init+0x94>)
 8001140:	2240      	movs	r2, #64	; 0x40
 8001142:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <MX_FMC_Init+0x94>)
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_FMC_Init+0x94>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_FMC_Init+0x94>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_FMC_Init+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_FMC_Init+0x94>)
 800115e:	2200      	movs	r2, #0
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001162:	2310      	movs	r3, #16
 8001164:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001166:	2310      	movs	r3, #16
 8001168:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800116a:	2310      	movs	r3, #16
 800116c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800116e:	2310      	movs	r3, #16
 8001170:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001172:	2310      	movs	r3, #16
 8001174:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001176:	2310      	movs	r3, #16
 8001178:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800117a:	2310      	movs	r3, #16
 800117c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_FMC_Init+0x94>)
 8001184:	f008 fe9f 	bl	8009ec6 <HAL_SDRAM_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800118e:	f000 fa89 	bl	80016a4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001192:	bf00      	nop
 8001194:	3720      	adds	r7, #32
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20006f7c 	.word	0x20006f7c
 80011a0:	a0000140 	.word	0xa0000140

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b090      	sub	sp, #64	; 0x40
 80011a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ba:	4bad      	ldr	r3, [pc, #692]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4aac      	ldr	r2, [pc, #688]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4baa      	ldr	r3, [pc, #680]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011d2:	4ba7      	ldr	r3, [pc, #668]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4aa6      	ldr	r2, [pc, #664]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80011d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4ba4      	ldr	r3, [pc, #656]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	4ba1      	ldr	r3, [pc, #644]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4aa0      	ldr	r2, [pc, #640]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b9e      	ldr	r3, [pc, #632]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001202:	4b9b      	ldr	r3, [pc, #620]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a9a      	ldr	r2, [pc, #616]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b98      	ldr	r3, [pc, #608]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0308 	and.w	r3, r3, #8
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	4b95      	ldr	r3, [pc, #596]	; (8001470 <MX_GPIO_Init+0x2cc>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a94      	ldr	r2, [pc, #592]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b92      	ldr	r3, [pc, #584]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b8f      	ldr	r3, [pc, #572]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a8e      	ldr	r2, [pc, #568]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b8c      	ldr	r3, [pc, #560]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800124a:	4b89      	ldr	r3, [pc, #548]	; (8001470 <MX_GPIO_Init+0x2cc>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a88      	ldr	r2, [pc, #544]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b86      	ldr	r3, [pc, #536]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001262:	4b83      	ldr	r3, [pc, #524]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a82      	ldr	r2, [pc, #520]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b80      	ldr	r3, [pc, #512]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800127a:	4b7d      	ldr	r3, [pc, #500]	; (8001470 <MX_GPIO_Init+0x2cc>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a7c      	ldr	r2, [pc, #496]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001280:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b7a      	ldr	r3, [pc, #488]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001292:	4b77      	ldr	r3, [pc, #476]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a76      	ldr	r2, [pc, #472]	; (8001470 <MX_GPIO_Init+0x2cc>)
 8001298:	f043 0320 	orr.w	r3, r3, #32
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b74      	ldr	r3, [pc, #464]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0320 	and.w	r3, r3, #32
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	4b71      	ldr	r3, [pc, #452]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a70      	ldr	r2, [pc, #448]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b6e      	ldr	r3, [pc, #440]	; (8001470 <MX_GPIO_Init+0x2cc>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 80012c2:	2200      	movs	r2, #0
 80012c4:	f243 010b 	movw	r1, #12299	; 0x300b
 80012c8:	486a      	ldr	r0, [pc, #424]	; (8001474 <MX_GPIO_Init+0x2d0>)
 80012ca:	f004 fd39 	bl	8005d40 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012d4:	4868      	ldr	r0, [pc, #416]	; (8001478 <MX_GPIO_Init+0x2d4>)
 80012d6:	f004 fd33 	bl	8005d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 80012da:	2304      	movs	r3, #4
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ea:	230b      	movs	r3, #11
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f2:	4619      	mov	r1, r3
 80012f4:	4861      	ldr	r0, [pc, #388]	; (800147c <MX_GPIO_Init+0x2d8>)
 80012f6:	f004 fb5f 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TXD1_Pin MII_TXD0_Pin MII_TX_EN_Pin */
  GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 80012fa:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800130c:	230b      	movs	r3, #11
 800130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001314:	4619      	mov	r1, r3
 8001316:	485a      	ldr	r0, [pc, #360]	; (8001480 <MX_GPIO_Init+0x2dc>)
 8001318:	f004 fb4e 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800131c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001322:	2312      	movs	r3, #18
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800132e:	2304      	movs	r3, #4
 8001330:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001336:	4619      	mov	r1, r3
 8001338:	4852      	ldr	r0, [pc, #328]	; (8001484 <MX_GPIO_Init+0x2e0>)
 800133a:	f004 fb3d 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD2_D3_Pin SD2_D2_Pin */
  GPIO_InitStruct.Pin = SD2_D3_Pin|SD2_D2_Pin;
 800133e:	2318      	movs	r3, #24
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 800134e:	230a      	movs	r3, #10
 8001350:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001356:	4619      	mov	r1, r3
 8001358:	484a      	ldr	r0, [pc, #296]	; (8001484 <MX_GPIO_Init+0x2e0>)
 800135a:	f004 fb2d 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD2_CMD_Pin */
  GPIO_InitStruct.Pin = SD2_CMD_Pin;
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800136e:	230b      	movs	r3, #11
 8001370:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SD2_CMD_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001376:	4619      	mov	r1, r3
 8001378:	4843      	ldr	r0, [pc, #268]	; (8001488 <MX_GPIO_Init+0x2e4>)
 800137a:	f004 fb1d 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_MCLKB_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKB_Pin;
 800137e:	2340      	movs	r3, #64	; 0x40
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800138e:	230a      	movs	r3, #10
 8001390:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_MCLKB_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001396:	4619      	mov	r1, r3
 8001398:	4838      	ldr	r0, [pc, #224]	; (800147c <MX_GPIO_Init+0x2d8>)
 800139a:	f004 fb0d 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAR_VSYNC_Pin */
  GPIO_InitStruct.Pin = PAR_VSYNC_Pin;
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013ae:	230d      	movs	r3, #13
 80013b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PAR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b6:	4619      	mov	r1, r3
 80013b8:	4832      	ldr	r0, [pc, #200]	; (8001484 <MX_GPIO_Init+0x2e0>)
 80013ba:	f004 fafd 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80013be:	2340      	movs	r3, #64	; 0x40
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013ce:	230a      	movs	r3, #10
 80013d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d6:	4619      	mov	r1, r3
 80013d8:	482a      	ldr	r0, [pc, #168]	; (8001484 <MX_GPIO_Init+0x2e0>)
 80013da:	f004 faed 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_GPIO_Pin MII_MDIO_GPIO_Pin LED3_Pin LED1_Pin
                           LED2_Pin */
  GPIO_InitStruct.Pin = MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 80013de:	f243 030b 	movw	r3, #12299	; 0x300b
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f4:	4619      	mov	r1, r3
 80013f6:	481f      	ldr	r0, [pc, #124]	; (8001474 <MX_GPIO_Init+0x2d0>)
 80013f8:	f004 fade 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXPANDER_INT_Pin */
  GPIO_InitStruct.Pin = EXPANDER_INT_Pin;
 80013fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001402:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXPANDER_INT_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001410:	4619      	mov	r1, r3
 8001412:	4819      	ldr	r0, [pc, #100]	; (8001478 <MX_GPIO_Init+0x2d4>)
 8001414:	f004 fad0 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001418:	23f8      	movs	r3, #248	; 0xf8
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001428:	230e      	movs	r3, #14
 800142a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800142c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001430:	4619      	mov	r1, r3
 8001432:	4816      	ldr	r0, [pc, #88]	; (800148c <MX_GPIO_Init+0x2e8>)
 8001434:	f004 fac0 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD2_D1_Pin */
  GPIO_InitStruct.Pin = SD2_D1_Pin;
 8001438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800144a:	230b      	movs	r3, #11
 800144c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SD2_D1_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001452:	4619      	mov	r1, r3
 8001454:	480a      	ldr	r0, [pc, #40]	; (8001480 <MX_GPIO_Init+0x2dc>)
 8001456:	f004 faaf 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B2_Pin LCD_B3_Pin LCD_R5_Pin LCD_R6_Pin */
  GPIO_InitStruct.Pin = LCD_B2_Pin|LCD_B3_Pin|LCD_R5_Pin|LCD_R6_Pin;
 800145a:	f24c 0330 	movw	r3, #49200	; 0xc030
 800145e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	63bb      	str	r3, [r7, #56]	; 0x38
 800146c:	e010      	b.n	8001490 <MX_GPIO_Init+0x2ec>
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40022400 	.word	0x40022400
 8001478:	40022000 	.word	0x40022000
 800147c:	40021000 	.word	0x40021000
 8001480:	40021800 	.word	0x40021800
 8001484:	40020400 	.word	0x40020400
 8001488:	40020c00 	.word	0x40020c00
 800148c:	40022800 	.word	0x40022800
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001490:	230e      	movs	r3, #14
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001494:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001498:	4619      	mov	r1, r3
 800149a:	487a      	ldr	r0, [pc, #488]	; (8001684 <MX_GPIO_Init+0x4e0>)
 800149c:	f004 fa8c 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TAMPER_WKUP_KEY_Pin */
  GPIO_InitStruct.Pin = TAMPER_WKUP_KEY_Pin;
 80014a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TAMPER_WKUP_KEY_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b4:	4619      	mov	r1, r3
 80014b6:	4874      	ldr	r0, [pc, #464]	; (8001688 <MX_GPIO_Init+0x4e4>)
 80014b8:	f004 fa7e 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_FSB_Pin */
  GPIO_InitStruct.Pin = SAI2_FSB_Pin;
 80014bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80014ce:	230a      	movs	r3, #10
 80014d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_FSB_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d6:	4619      	mov	r1, r3
 80014d8:	486c      	ldr	r0, [pc, #432]	; (800168c <MX_GPIO_Init+0x4e8>)
 80014da:	f004 fa6d 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin;
 80014de:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014f0:	230e      	movs	r3, #14
 80014f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014f8:	4619      	mov	r1, r3
 80014fa:	4865      	ldr	r0, [pc, #404]	; (8001690 <MX_GPIO_Init+0x4ec>)
 80014fc:	f004 fa5c 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_MCO_Pin */
  GPIO_InitStruct.Pin = MII_MCO_Pin;
 8001500:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001512:	2300      	movs	r3, #0
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_MCO_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800151a:	4619      	mov	r1, r3
 800151c:	485d      	ldr	r0, [pc, #372]	; (8001694 <MX_GPIO_Init+0x4f0>)
 800151e:	f004 fa4b 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001538:	4619      	mov	r1, r3
 800153a:	4855      	ldr	r0, [pc, #340]	; (8001690 <MX_GPIO_Init+0x4ec>)
 800153c:	f004 fa3c 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001550:	2309      	movs	r3, #9
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001558:	4619      	mov	r1, r3
 800155a:	484f      	ldr	r0, [pc, #316]	; (8001698 <MX_GPIO_Init+0x4f4>)
 800155c:	f004 fa2c 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001560:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001572:	230a      	movs	r3, #10
 8001574:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800157a:	4619      	mov	r1, r3
 800157c:	4846      	ldr	r0, [pc, #280]	; (8001698 <MX_GPIO_Init+0x4f4>)
 800157e:	f004 fa1b 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_CLK_Pin MII_TXD2_Pin MII_RXD0_Pin MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_TX_CLK_Pin|MII_TXD2_Pin|MII_RXD0_Pin|MII_RXD1_Pin;
 8001582:	233c      	movs	r3, #60	; 0x3c
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001592:	230b      	movs	r3, #11
 8001594:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159a:	4619      	mov	r1, r3
 800159c:	483a      	ldr	r0, [pc, #232]	; (8001688 <MX_GPIO_Init+0x4e4>)
 800159e:	f004 fa0b 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80015a2:	2304      	movs	r3, #4
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015b2:	2309      	movs	r3, #9
 80015b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ba:	4619      	mov	r1, r3
 80015bc:	4837      	ldr	r0, [pc, #220]	; (800169c <MX_GPIO_Init+0x4f8>)
 80015be:	f004 f9fb 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_RX_CLK_Pin|MII_RX_DV_Pin;
 80015c2:	2382      	movs	r3, #130	; 0x82
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015d2:	230b      	movs	r3, #11
 80015d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015da:	4619      	mov	r1, r3
 80015dc:	482d      	ldr	r0, [pc, #180]	; (8001694 <MX_GPIO_Init+0x4f0>)
 80015de:	f004 f9eb 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80015e2:	2301      	movs	r3, #1
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015f2:	230a      	movs	r3, #10
 80015f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80015f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015fa:	4619      	mov	r1, r3
 80015fc:	4825      	ldr	r0, [pc, #148]	; (8001694 <MX_GPIO_Init+0x4f0>)
 80015fe:	f004 f9db 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAR_HSYNC_Pin PAR_PCLK_Pin */
  GPIO_InitStruct.Pin = PAR_HSYNC_Pin|PAR_PCLK_Pin;
 8001602:	2350      	movs	r3, #80	; 0x50
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001612:	230d      	movs	r3, #13
 8001614:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161a:	4619      	mov	r1, r3
 800161c:	481d      	ldr	r0, [pc, #116]	; (8001694 <MX_GPIO_Init+0x4f0>)
 800161e:	f004 f9cb 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RXD3_Pin MII_RXD2_Pin */
  GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 8001622:	23c0      	movs	r3, #192	; 0xc0
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001632:	230b      	movs	r3, #11
 8001634:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800163a:	4619      	mov	r1, r3
 800163c:	4818      	ldr	r0, [pc, #96]	; (80016a0 <MX_GPIO_Init+0x4fc>)
 800163e:	f004 f9bb 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SCKB_Pin */
  GPIO_InitStruct.Pin = SAI2_SCKB_Pin;
 8001642:	2304      	movs	r3, #4
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	2300      	movs	r3, #0
 8001650:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001652:	2308      	movs	r3, #8
 8001654:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SCKB_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800165a:	4619      	mov	r1, r3
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <MX_GPIO_Init+0x4f0>)
 800165e:	f004 f9ab 	bl	80059b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001674:	4619      	mov	r1, r3
 8001676:	4809      	ldr	r0, [pc, #36]	; (800169c <MX_GPIO_Init+0x4f8>)
 8001678:	f004 f99e 	bl	80059b8 <HAL_GPIO_Init>

}
 800167c:	bf00      	nop
 800167e:	3740      	adds	r7, #64	; 0x40
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40022400 	.word	0x40022400
 8001688:	40020800 	.word	0x40020800
 800168c:	40021800 	.word	0x40021800
 8001690:	40022000 	.word	0x40022000
 8001694:	40020000 	.word	0x40020000
 8001698:	40021400 	.word	0x40021400
 800169c:	40020400 	.word	0x40020400
 80016a0:	40021c00 	.word	0x40021c00

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	e7fe      	b.n	80016ac <Error_Handler+0x8>
	...

080016b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_MspInit+0x44>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a0e      	ldr	r2, [pc, #56]	; (80016f4 <HAL_MspInit+0x44>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_MspInit+0x44>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x44>)
 80016d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_MspInit+0x44>)
 80016d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016d8:	6453      	str	r3, [r2, #68]	; 0x44
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <HAL_MspInit+0x44>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a15      	ldr	r2, [pc, #84]	; (800176c <HAL_ADC_MspInit+0x74>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d124      	bne.n	8001764 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_ADC_MspInit+0x78>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a14      	ldr	r2, [pc, #80]	; (8001770 <HAL_ADC_MspInit+0x78>)
 8001720:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_ADC_MspInit+0x78>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_ADC_MspInit+0x78>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_ADC_MspInit+0x78>)
 8001738:	f043 0320 	orr.w	r3, r3, #32
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_ADC_MspInit+0x78>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 800174a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800174e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001750:	2303      	movs	r3, #3
 8001752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4619      	mov	r1, r3
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <HAL_ADC_MspInit+0x7c>)
 8001760:	f004 f92a 	bl	80059b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40012200 	.word	0x40012200
 8001770:	40023800 	.word	0x40023800
 8001774:	40021400 	.word	0x40021400

08001778 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001790:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d145      	bne.n	8001824 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001798:	4b62      	ldr	r3, [pc, #392]	; (8001924 <HAL_DFSDM_FilterMspInit+0x1ac>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a61      	ldr	r2, [pc, #388]	; (8001924 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80017a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80017a2:	4b60      	ldr	r3, [pc, #384]	; (8001924 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d10b      	bne.n	80017c2 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017aa:	4b5f      	ldr	r3, [pc, #380]	; (8001928 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ae:	4a5e      	ldr	r2, [pc, #376]	; (8001928 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80017b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017b4:	6453      	str	r3, [r2, #68]	; 0x44
 80017b6:	4b5c      	ldr	r3, [pc, #368]	; (8001928 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c2:	4b59      	ldr	r3, [pc, #356]	; (8001928 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a58      	ldr	r2, [pc, #352]	; (8001928 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80017c8:	f043 0308 	orr.w	r3, r3, #8
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b56      	ldr	r3, [pc, #344]	; (8001928 <HAL_DFSDM_FilterMspInit+0x1b0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017da:	2340      	movs	r3, #64	; 0x40
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80017ea:	230a      	movs	r3, #10
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	484d      	ldr	r0, [pc, #308]	; (800192c <HAL_DFSDM_FilterMspInit+0x1b4>)
 80017f6:	f004 f8df 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017fa:	2308      	movs	r3, #8
 80017fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800180a:	2303      	movs	r3, #3
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4845      	ldr	r0, [pc, #276]	; (800192c <HAL_DFSDM_FilterMspInit+0x1b4>)
 8001816:	f004 f8cf 	bl	80059b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <HAL_DFSDM_FilterMspInit+0x1a8>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	4a3f      	ldr	r2, [pc, #252]	; (8001920 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8001822:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a41      	ldr	r2, [pc, #260]	; (8001930 <HAL_DFSDM_FilterMspInit+0x1b8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d136      	bne.n	800189c <HAL_DFSDM_FilterMspInit+0x124>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 800182e:	4b41      	ldr	r3, [pc, #260]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001830:	4a41      	ldr	r2, [pc, #260]	; (8001938 <HAL_DFSDM_FilterMspInit+0x1c0>)
 8001832:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8001834:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800183a:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183c:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001842:	4b3c      	ldr	r3, [pc, #240]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8001848:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 800184a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184e:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001850:	4b38      	ldr	r3, [pc, #224]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001852:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001856:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001858:	4b36      	ldr	r3, [pc, #216]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 800185a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800185e:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8001860:	4b34      	ldr	r3, [pc, #208]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 8001866:	4b33      	ldr	r3, [pc, #204]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001868:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800186c:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800186e:	4b31      	ldr	r3, [pc, #196]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8001874:	482f      	ldr	r0, [pc, #188]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001876:	f003 f93b 	bl	8004af0 <HAL_DMA_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_DFSDM_FilterMspInit+0x10c>
    {
      Error_Handler();
 8001880:	f7ff ff10 	bl	80016a4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
 800188a:	4a2a      	ldr	r2, [pc, #168]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a28      	ldr	r2, [pc, #160]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001894:	629a      	str	r2, [r3, #40]	; 0x28
 8001896:	4a27      	ldr	r2, [pc, #156]	; (8001934 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a26      	ldr	r2, [pc, #152]	; (800193c <HAL_DFSDM_FilterMspInit+0x1c4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d137      	bne.n	8001916 <HAL_DFSDM_FilterMspInit+0x19e>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80018a6:	4b26      	ldr	r3, [pc, #152]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80018a8:	4a26      	ldr	r2, [pc, #152]	; (8001944 <HAL_DFSDM_FilterMspInit+0x1cc>)
 80018aa:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80018ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018b2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b4:	4b22      	ldr	r3, [pc, #136]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ba:	4b21      	ldr	r3, [pc, #132]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 80018c0:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80018c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c6:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80018ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ce:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80018d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d6:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 80018d8:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80018da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018de:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80018e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018e6:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018e8:	4b15      	ldr	r3, [pc, #84]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 80018ee:	4814      	ldr	r0, [pc, #80]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80018f0:	f003 f8fe 	bl	8004af0 <HAL_DMA_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_DFSDM_FilterMspInit+0x186>
    {
      Error_Handler();
 80018fa:	f7ff fed3 	bl	80016a4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a0f      	ldr	r2, [pc, #60]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
 8001904:	4a0e      	ldr	r2, [pc, #56]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a0c      	ldr	r2, [pc, #48]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800190e:	629a      	str	r2, [r3, #40]	; 0x28
 8001910:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20006fb8 	.word	0x20006fb8
 8001924:	20006fb4 	.word	0x20006fb4
 8001928:	40023800 	.word	0x40023800
 800192c:	40020c00 	.word	0x40020c00
 8001930:	40017500 	.word	0x40017500
 8001934:	200061d4 	.word	0x200061d4
 8001938:	40026410 	.word	0x40026410
 800193c:	40017580 	.word	0x40017580
 8001940:	20006234 	.word	0x20006234
 8001944:	40026428 	.word	0x40026428

08001948 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <HAL_DFSDM_ChannelMspInit+0xb4>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d145      	bne.n	80019f4 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8001968:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_DFSDM_ChannelMspInit+0xb8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8001970:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8001972:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <HAL_DFSDM_ChannelMspInit+0xb8>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d10b      	bne.n	8001992 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800197a:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a21      	ldr	r2, [pc, #132]	; (8001a04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001980:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001992:	4b1c      	ldr	r3, [pc, #112]	; (8001a04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001998:	f043 0308 	orr.w	r3, r3, #8
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0308 	and.w	r3, r3, #8
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019aa:	2340      	movs	r3, #64	; 0x40
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80019ba:	230a      	movs	r3, #10
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4810      	ldr	r0, [pc, #64]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019c6:	f003 fff7 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019ca:	2308      	movs	r3, #8
 80019cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 80019da:	2303      	movs	r3, #3
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	4619      	mov	r1, r3
 80019e4:	4808      	ldr	r0, [pc, #32]	; (8001a08 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019e6:	f003 ffe7 	bl	80059b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_DFSDM_ChannelMspInit+0xb4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	4a02      	ldr	r2, [pc, #8]	; (80019fc <HAL_DFSDM_ChannelMspInit+0xb4>)
 80019f2:	6013      	str	r3, [r2, #0]
  }

}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	; 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20006fb8 	.word	0x20006fb8
 8001a00:	20006fb4 	.word	0x20006fb4
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020c00 	.word	0x40020c00

08001a0c <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <HAL_DSI_MspInit+0x7c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d127      	bne.n	8001a7e <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_DSI_MspInit+0x80>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a16      	ldr	r2, [pc, #88]	; (8001a8c <HAL_DSI_MspInit+0x80>)
 8001a34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_DSI_MspInit+0x80>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_DSI_MspInit+0x80>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <HAL_DSI_MspInit+0x80>)
 8001a4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_DSI_MspInit+0x80>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 8001a5e:	2304      	movs	r3, #4
 8001a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001a6e:	230d      	movs	r3, #13
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_DSI_MspInit+0x84>)
 8001a7a:	f003 ff9d 	bl	80059b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001a7e:	bf00      	nop
 8001a80:	3728      	adds	r7, #40	; 0x28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40016c00 	.word	0x40016c00
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40022400 	.word	0x40022400

08001a94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0a6      	sub	sp, #152	; 0x98
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	2290      	movs	r2, #144	; 0x90
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00d f8a5 	bl	800ebf4 <memset>
  if(hrtc->Instance==RTC)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <HAL_RTC_MspInit+0x54>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d114      	bne.n	8001ade <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ab4:	2320      	movs	r3, #32
 8001ab6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001abc:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f005 fd06 	bl	80074d4 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001ace:	f7ff fde9 	bl	80016a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_RTC_MspInit+0x58>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <HAL_RTC_MspInit+0x58>)
 8001ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3798      	adds	r7, #152	; 0x98
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40002800 	.word	0x40002800
 8001aec:	40023800 	.word	0x40023800

08001af0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b0ae      	sub	sp, #184	; 0xb8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	2290      	movs	r2, #144	; 0x90
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f00d f86f 	bl	800ebf4 <memset>
  if(hsd->Instance==SDMMC1)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a74      	ldr	r2, [pc, #464]	; (8001cec <HAL_SD_MspInit+0x1fc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	f040 80e0 	bne.w	8001ce2 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001b22:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001b26:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f005 fccb 	bl	80074d4 <HAL_RCCEx_PeriphCLKConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001b44:	f7ff fdae 	bl	80016a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001b48:	4b69      	ldr	r3, [pc, #420]	; (8001cf0 <HAL_SD_MspInit+0x200>)
 8001b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4c:	4a68      	ldr	r2, [pc, #416]	; (8001cf0 <HAL_SD_MspInit+0x200>)
 8001b4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b52:	6453      	str	r3, [r2, #68]	; 0x44
 8001b54:	4b66      	ldr	r3, [pc, #408]	; (8001cf0 <HAL_SD_MspInit+0x200>)
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b60:	4b63      	ldr	r3, [pc, #396]	; (8001cf0 <HAL_SD_MspInit+0x200>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	4a62      	ldr	r2, [pc, #392]	; (8001cf0 <HAL_SD_MspInit+0x200>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6c:	4b60      	ldr	r3, [pc, #384]	; (8001cf0 <HAL_SD_MspInit+0x200>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b78:	4b5d      	ldr	r3, [pc, #372]	; (8001cf0 <HAL_SD_MspInit+0x200>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4a5c      	ldr	r2, [pc, #368]	; (8001cf0 <HAL_SD_MspInit+0x200>)
 8001b7e:	f043 0308 	orr.w	r3, r3, #8
 8001b82:	6313      	str	r3, [r2, #48]	; 0x30
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <HAL_SD_MspInit+0x200>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SD1_CLK_Pin|SD1_D3_Pin|SD1_D2_Pin|SD1_D1_Pin
 8001b90:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SD1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001baa:	230c      	movs	r3, #12
 8001bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	484f      	ldr	r0, [pc, #316]	; (8001cf4 <HAL_SD_MspInit+0x204>)
 8001bb8:	f003 fefe 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD1_CMD_Pin;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001bd4:	230c      	movs	r3, #12
 8001bd6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SD1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001bda:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bde:	4619      	mov	r1, r3
 8001be0:	4845      	ldr	r0, [pc, #276]	; (8001cf8 <HAL_SD_MspInit+0x208>)
 8001be2:	f003 fee9 	bl	80059b8 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001be6:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001be8:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <HAL_SD_MspInit+0x210>)
 8001bea:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001bec:	4b43      	ldr	r3, [pc, #268]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001bee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bf2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bf4:	4b41      	ldr	r3, [pc, #260]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c00:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c06:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c0e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c10:	4b3a      	ldr	r3, [pc, #232]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c16:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001c18:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c24:	4b35      	ldr	r3, [pc, #212]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c26:	2204      	movs	r2, #4
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c2a:	4b34      	ldr	r3, [pc, #208]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001c30:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c38:	4b30      	ldr	r3, [pc, #192]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001c40:	482e      	ldr	r0, [pc, #184]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c42:	f002 ff55 	bl	8004af0 <HAL_DMA_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001c4c:	f7ff fd2a 	bl	80016a4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a2a      	ldr	r2, [pc, #168]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c54:	641a      	str	r2, [r3, #64]	; 0x40
 8001c56:	4a29      	ldr	r2, [pc, #164]	; (8001cfc <HAL_SD_MspInit+0x20c>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001c5e:	4a2a      	ldr	r2, [pc, #168]	; (8001d08 <HAL_SD_MspInit+0x218>)
 8001c60:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001c64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c68:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c6a:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001c6c:	2240      	movs	r2, #64	; 0x40
 8001c6e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c76:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001c78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c7c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001c80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c84:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001c88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001c90:	2220      	movs	r2, #32
 8001c92:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001ca8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001cac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001cb0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001cb4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001cb6:	4813      	ldr	r0, [pc, #76]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001cb8:	f002 ff1a 	bl	8004af0 <HAL_DMA_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001cc2:	f7ff fcef 	bl	80016a4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001cca:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ccc:	4a0d      	ldr	r2, [pc, #52]	; (8001d04 <HAL_SD_MspInit+0x214>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2031      	movs	r0, #49	; 0x31
 8001cd8:	f002 fc59 	bl	800458e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001cdc:	2031      	movs	r0, #49	; 0x31
 8001cde:	f002 fc72 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001ce2:	bf00      	nop
 8001ce4:	37b8      	adds	r7, #184	; 0xb8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40012c00 	.word	0x40012c00
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	200063d8 	.word	0x200063d8
 8001d00:	40026458 	.word	0x40026458
 8001d04:	20006438 	.word	0x20006438
 8001d08:	400264a0 	.word	0x400264a0

08001d0c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0ae      	sub	sp, #184	; 0xb8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2290      	movs	r2, #144	; 0x90
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f00c ff61 	bl	800ebf4 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001d3a:	d144      	bne.n	8001dc6 <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d40:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001d42:	23c0      	movs	r3, #192	; 0xc0
 8001d44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001d46:	2302      	movs	r3, #2
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f005 fbba 	bl	80074d4 <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001d66:	f7ff fc9d 	bl	80016a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_SPDIFRX_MspInit+0xc4>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <HAL_SPDIFRX_MspInit+0xc4>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_SPDIFRX_MspInit+0xc4>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_SPDIFRX_MspInit+0xc4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <HAL_SPDIFRX_MspInit+0xc4>)
 8001d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <HAL_SPDIFRX_MspInit+0xc4>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PG12     ------> SPDIFRX_IN1
    */
    GPIO_InitStruct.Pin = SPDIF_RX1_Pin;
 8001d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001db4:	2307      	movs	r3, #7
 8001db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SPDIF_RX1_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <HAL_SPDIFRX_MspInit+0xc8>)
 8001dc2:	f003 fdf9 	bl	80059b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8001dc6:	bf00      	nop
 8001dc8:	37b8      	adds	r7, #184	; 0xb8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40021800 	.word	0x40021800

08001dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0ae      	sub	sp, #184	; 0xb8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2290      	movs	r2, #144	; 0x90
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f00c fefb 	bl	800ebf4 <memset>
  if(huart->Instance==USART1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a21      	ldr	r2, [pc, #132]	; (8001e88 <HAL_UART_MspInit+0xb0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d13b      	bne.n	8001e80 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e08:	2340      	movs	r3, #64	; 0x40
 8001e0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	4618      	mov	r0, r3
 8001e16:	f005 fb5d 	bl	80074d4 <HAL_RCCEx_PeriphCLKConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e20:	f7ff fc40 	bl	80016a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3c:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6313      	str	r3, [r2, #48]	; 0x30
 8001e48:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_UART_MspInit+0xb4>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS232_IrDA_RX_Pin|RS2320IrDA0T_Pin;
 8001e54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e6e:	2307      	movs	r3, #7
 8001e70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <HAL_UART_MspInit+0xb8>)
 8001e7c:	f003 fd9c 	bl	80059b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e80:	bf00      	nop
 8001e82:	37b8      	adds	r7, #184	; 0xb8
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40011000 	.word	0x40011000
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020000 	.word	0x40020000

08001e94 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0b6      	sub	sp, #216	; 0xd8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eb0:	2290      	movs	r2, #144	; 0x90
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f00c fe9d 	bl	800ebf4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ec2:	d14a      	bne.n	8001f5a <HAL_PCD_MspInit+0xc6>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ec4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ec8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f005 fafd 	bl	80074d4 <HAL_RCCEx_PeriphCLKConfig>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001ee0:	f7ff fbe0 	bl	80016a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	4b8c      	ldr	r3, [pc, #560]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	4a8b      	ldr	r2, [pc, #556]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef0:	4b89      	ldr	r3, [pc, #548]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8001efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001efc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f16:	230a      	movs	r3, #10
 8001f18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f20:	4619      	mov	r1, r3
 8001f22:	487e      	ldr	r0, [pc, #504]	; (800211c <HAL_PCD_MspInit+0x288>)
 8001f24:	f003 fd48 	bl	80059b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f28:	4b7b      	ldr	r3, [pc, #492]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2c:	4a7a      	ldr	r2, [pc, #488]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f32:	6353      	str	r3, [r2, #52]	; 0x34
 8001f34:	4b78      	ldr	r3, [pc, #480]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f40:	4b75      	ldr	r3, [pc, #468]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f44:	4a74      	ldr	r2, [pc, #464]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4c:	4b72      	ldr	r3, [pc, #456]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001f58:	e0da      	b.n	8002110 <HAL_PCD_MspInit+0x27c>
  else if(hpcd->Instance==USB_OTG_HS)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a70      	ldr	r2, [pc, #448]	; (8002120 <HAL_PCD_MspInit+0x28c>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	f040 80d5 	bne.w	8002110 <HAL_PCD_MspInit+0x27c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f66:	4b6c      	ldr	r3, [pc, #432]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a6b      	ldr	r2, [pc, #428]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b69      	ldr	r3, [pc, #420]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f7e:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f88:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8a:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f92:	623b      	str	r3, [r7, #32]
 8001f94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f96:	4b60      	ldr	r3, [pc, #384]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	4a5f      	ldr	r2, [pc, #380]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fa2:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fae:	4b5a      	ldr	r3, [pc, #360]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	4a59      	ldr	r2, [pc, #356]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001fb4:	f043 0304 	orr.w	r3, r3, #4
 8001fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fba:	4b57      	ldr	r3, [pc, #348]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc6:	4b54      	ldr	r3, [pc, #336]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a53      	ldr	r2, [pc, #332]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b51      	ldr	r3, [pc, #324]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
 8001fdc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001fde:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ff8:	230a      	movs	r3, #10
 8001ffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002002:	4619      	mov	r1, r3
 8002004:	4847      	ldr	r0, [pc, #284]	; (8002124 <HAL_PCD_MspInit+0x290>)
 8002006:	f003 fcd7 	bl	80059b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 800200a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800200e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002024:	230a      	movs	r3, #10
 8002026:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 800202a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800202e:	4619      	mov	r1, r3
 8002030:	483d      	ldr	r0, [pc, #244]	; (8002128 <HAL_PCD_MspInit+0x294>)
 8002032:	f003 fcc1 	bl	80059b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002036:	2310      	movs	r3, #16
 8002038:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800204e:	230a      	movs	r3, #10
 8002050:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8002054:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002058:	4619      	mov	r1, r3
 800205a:	4834      	ldr	r0, [pc, #208]	; (800212c <HAL_PCD_MspInit+0x298>)
 800205c:	f003 fcac 	bl	80059b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8002060:	2301      	movs	r3, #1
 8002062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002078:	230a      	movs	r3, #10
 800207a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002082:	4619      	mov	r1, r3
 8002084:	482a      	ldr	r0, [pc, #168]	; (8002130 <HAL_PCD_MspInit+0x29c>)
 8002086:	f003 fc97 	bl	80059b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 800208a:	2328      	movs	r3, #40	; 0x28
 800208c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209c:	2303      	movs	r3, #3
 800209e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80020a2:	230a      	movs	r3, #10
 80020a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020ac:	4619      	mov	r1, r3
 80020ae:	481b      	ldr	r0, [pc, #108]	; (800211c <HAL_PCD_MspInit+0x288>)
 80020b0:	f003 fc82 	bl	80059b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_FS2_DM_Pin;
 80020b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80020ce:	230c      	movs	r3, #12
 80020d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(USB_FS2_DM_GPIO_Port, &GPIO_InitStruct);
 80020d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020d8:	4619      	mov	r1, r3
 80020da:	4812      	ldr	r0, [pc, #72]	; (8002124 <HAL_PCD_MspInit+0x290>)
 80020dc:	f003 fc6c 	bl	80059b8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80020e0:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <HAL_PCD_MspInit+0x284>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <HAL_PCD_MspInit+0x284>)
 80020e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80020ea:	6313      	str	r3, [r2, #48]	; 0x30
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_PCD_MspInit+0x284>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_PCD_MspInit+0x284>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	4a06      	ldr	r2, [pc, #24]	; (8002118 <HAL_PCD_MspInit+0x284>)
 80020fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002102:	6313      	str	r3, [r2, #48]	; 0x30
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <HAL_PCD_MspInit+0x284>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	bf00      	nop
 8002112:	37d8      	adds	r7, #216	; 0xd8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	40023800 	.word	0x40023800
 800211c:	40020000 	.word	0x40020000
 8002120:	40040000 	.word	0x40040000
 8002124:	40020400 	.word	0x40020400
 8002128:	40022000 	.word	0x40022000
 800212c:	40021c00 	.word	0x40021c00
 8002130:	40020800 	.word	0x40020800

08002134 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002148:	4b43      	ldr	r3, [pc, #268]	; (8002258 <HAL_FMC_MspInit+0x124>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d17e      	bne.n	800224e <HAL_FMC_MspInit+0x11a>
    return;
  }
  FMC_Initialized = 1;
 8002150:	4b41      	ldr	r3, [pc, #260]	; (8002258 <HAL_FMC_MspInit+0x124>)
 8002152:	2201      	movs	r2, #1
 8002154:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002156:	4b41      	ldr	r3, [pc, #260]	; (800225c <HAL_FMC_MspInit+0x128>)
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	4a40      	ldr	r2, [pc, #256]	; (800225c <HAL_FMC_MspInit+0x128>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6393      	str	r3, [r2, #56]	; 0x38
 8002162:	4b3e      	ldr	r3, [pc, #248]	; (800225c <HAL_FMC_MspInit+0x128>)
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = A19_Pin|FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin
 800216e:	f64f 738b 	movw	r3, #65419	; 0xff8b
 8002172:	607b      	str	r3, [r7, #4]
                          |D6_Pin|D8_Pin|D11_Pin|D4_Pin
                          |D7_Pin|D9_Pin|D12_Pin|D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002174:	2302      	movs	r3, #2
 8002176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002180:	230c      	movs	r3, #12
 8002182:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	4619      	mov	r1, r3
 8002188:	4835      	ldr	r0, [pc, #212]	; (8002260 <HAL_FMC_MspInit+0x12c>)
 800218a:	f003 fc15 	bl	80059b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|FMC_NE3_Pin|A11_Pin
 800218e:	f248 137f 	movw	r3, #33151	; 0x817f
 8002192:	607b      	str	r3, [r7, #4]
                          |A13_Pin|A12_Pin|A10_Pin|A15_Pin
                          |A14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021a0:	230c      	movs	r3, #12
 80021a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021a4:	1d3b      	adds	r3, r7, #4
 80021a6:	4619      	mov	r1, r3
 80021a8:	482e      	ldr	r0, [pc, #184]	; (8002264 <HAL_FMC_MspInit+0x130>)
 80021aa:	f003 fc05 	bl	80059b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|FMC_NWE_Pin|D3_Pin|FMC_NOE_Pin
 80021ae:	f64f 7333 	movw	r3, #65331	; 0xff33
 80021b2:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D15_Pin|D0_Pin|D14_Pin
                          |D13_Pin|A17_Pin|A18_Pin|A16_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b4:	2302      	movs	r3, #2
 80021b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021c0:	230c      	movs	r3, #12
 80021c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c4:	1d3b      	adds	r3, r7, #4
 80021c6:	4619      	mov	r1, r3
 80021c8:	4827      	ldr	r0, [pc, #156]	; (8002268 <HAL_FMC_MspInit+0x134>)
 80021ca:	f003 fbf5 	bl	80059b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 80021ce:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80021d2:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80021e0:	230c      	movs	r3, #12
 80021e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	4619      	mov	r1, r3
 80021e8:	4820      	ldr	r0, [pc, #128]	; (800226c <HAL_FMC_MspInit+0x138>)
 80021ea:	f003 fbe5 	bl	80059b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80021ee:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80021f2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A9_Pin
                          |A7_Pin|A8_Pin|SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021fc:	2303      	movs	r3, #3
 80021fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002200:	230c      	movs	r3, #12
 8002202:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	4619      	mov	r1, r3
 8002208:	4819      	ldr	r0, [pc, #100]	; (8002270 <HAL_FMC_MspInit+0x13c>)
 800220a:	f003 fbd5 	bl	80059b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNWE_Pin
 800220e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002212:	607b      	str	r3, [r7, #4]
                          |SDNE0_Pin|SDCKE0_Pin|D20_Pin|D17_Pin
                          |D19_Pin|D16_Pin|D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002220:	230c      	movs	r3, #12
 8002222:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002224:	1d3b      	adds	r3, r7, #4
 8002226:	4619      	mov	r1, r3
 8002228:	4812      	ldr	r0, [pc, #72]	; (8002274 <HAL_FMC_MspInit+0x140>)
 800222a:	f003 fbc5 	bl	80059b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NE1_Pin|FMC_NWAIT_Pin;
 800222e:	23c0      	movs	r3, #192	; 0xc0
 8002230:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223a:	2303      	movs	r3, #3
 800223c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 800223e:	2309      	movs	r3, #9
 8002240:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	4619      	mov	r1, r3
 8002246:	480c      	ldr	r0, [pc, #48]	; (8002278 <HAL_FMC_MspInit+0x144>)
 8002248:	f003 fbb6 	bl	80059b8 <HAL_GPIO_Init>
 800224c:	e000      	b.n	8002250 <HAL_FMC_MspInit+0x11c>
    return;
 800224e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20006fbc 	.word	0x20006fbc
 800225c:	40023800 	.word	0x40023800
 8002260:	40021000 	.word	0x40021000
 8002264:	40021800 	.word	0x40021800
 8002268:	40020c00 	.word	0x40020c00
 800226c:	40022000 	.word	0x40022000
 8002270:	40021400 	.word	0x40021400
 8002274:	40021c00 	.word	0x40021c00
 8002278:	40020800 	.word	0x40020800

0800227c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002284:	f7ff ff56 	bl	8002134 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2d      	ldr	r2, [pc, #180]	; (8002354 <HAL_SAI_MspInit+0xc4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d154      	bne.n	800234c <HAL_SAI_MspInit+0xbc>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_SAI_MspInit+0xc8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10b      	bne.n	80022c2 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80022aa:	4b2c      	ldr	r3, [pc, #176]	; (800235c <HAL_SAI_MspInit+0xcc>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a2b      	ldr	r2, [pc, #172]	; (800235c <HAL_SAI_MspInit+0xcc>)
 80022b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b29      	ldr	r3, [pc, #164]	; (800235c <HAL_SAI_MspInit+0xcc>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 80022c2:	4b25      	ldr	r3, [pc, #148]	; (8002358 <HAL_SAI_MspInit+0xc8>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	4a23      	ldr	r2, [pc, #140]	; (8002358 <HAL_SAI_MspInit+0xc8>)
 80022ca:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PG7     ------> SAI1_MCLK_A
    PF6     ------> SAI1_SD_B
    PC1     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022cc:	2330      	movs	r3, #48	; 0x30
 80022ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d0:	2302      	movs	r3, #2
 80022d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80022dc:	2306      	movs	r3, #6
 80022de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	481e      	ldr	r0, [pc, #120]	; (8002360 <HAL_SAI_MspInit+0xd0>)
 80022e8:	f003 fb66 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80022fc:	2306      	movs	r3, #6
 80022fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	4619      	mov	r1, r3
 8002306:	4817      	ldr	r0, [pc, #92]	; (8002364 <HAL_SAI_MspInit+0xd4>)
 8002308:	f003 fb56 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800230c:	2340      	movs	r3, #64	; 0x40
 800230e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800231c:	2306      	movs	r3, #6
 800231e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	4619      	mov	r1, r3
 8002326:	4810      	ldr	r0, [pc, #64]	; (8002368 <HAL_SAI_MspInit+0xd8>)
 8002328:	f003 fb46 	bl	80059b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800232c:	2302      	movs	r3, #2
 800232e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800233c:	2306      	movs	r3, #6
 800233e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002340:	f107 030c 	add.w	r3, r7, #12
 8002344:	4619      	mov	r1, r3
 8002346:	4809      	ldr	r0, [pc, #36]	; (800236c <HAL_SAI_MspInit+0xdc>)
 8002348:	f003 fb36 	bl	80059b8 <HAL_GPIO_Init>

    }
}
 800234c:	bf00      	nop
 800234e:	3720      	adds	r7, #32
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40015804 	.word	0x40015804
 8002358:	20006fc0 	.word	0x20006fc0
 800235c:	40023800 	.word	0x40023800
 8002360:	40021000 	.word	0x40021000
 8002364:	40021800 	.word	0x40021800
 8002368:	40021400 	.word	0x40021400
 800236c:	40020800 	.word	0x40020800

08002370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002374:	e7fe      	b.n	8002374 <NMI_Handler+0x4>

08002376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800237a:	e7fe      	b.n	800237a <HardFault_Handler+0x4>

0800237c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002380:	e7fe      	b.n	8002380 <MemManage_Handler+0x4>

08002382 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002386:	e7fe      	b.n	8002386 <BusFault_Handler+0x4>

08002388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800238c:	e7fe      	b.n	800238c <UsageFault_Handler+0x4>

0800238e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023bc:	f001 fd34 	bl	8003e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80023c8:	4802      	ldr	r0, [pc, #8]	; (80023d4 <SDMMC1_IRQHandler+0x10>)
 80023ca:	f006 fcd1 	bl	8008d70 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20006354 	.word	0x20006354

080023d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80023dc:	4802      	ldr	r0, [pc, #8]	; (80023e8 <DMA2_Stream0_IRQHandler+0x10>)
 80023de:	f002 fcb7 	bl	8004d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200061d4 	.word	0x200061d4

080023ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <DMA2_Stream1_IRQHandler+0x10>)
 80023f2:	f002 fcad 	bl	8004d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20006234 	.word	0x20006234

08002400 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <DMA2_Stream3_IRQHandler+0x10>)
 8002406:	f002 fca3 	bl	8004d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200063d8 	.word	0x200063d8

08002414 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <DMA2_Stream6_IRQHandler+0x10>)
 800241a:	f002 fc99 	bl	8004d50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20006438 	.word	0x20006438

08002428 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <SystemInit+0x20>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	4a05      	ldr	r2, [pc, #20]	; (8002448 <SystemInit+0x20>)
 8002434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800244c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002484 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002452:	490e      	ldr	r1, [pc, #56]	; (800248c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002454:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002458:	e002      	b.n	8002460 <LoopCopyDataInit>

0800245a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800245a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800245c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800245e:	3304      	adds	r3, #4

08002460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002464:	d3f9      	bcc.n	800245a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002466:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002468:	4c0b      	ldr	r4, [pc, #44]	; (8002498 <LoopFillZerobss+0x26>)
  movs r3, #0
 800246a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800246c:	e001      	b.n	8002472 <LoopFillZerobss>

0800246e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800246e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002470:	3204      	adds	r2, #4

08002472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002474:	d3fb      	bcc.n	800246e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002476:	f7ff ffd7 	bl	8002428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247a:	f00c fb97 	bl	800ebac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247e:	f7fe f865 	bl	800054c <main>
  bx  lr    
 8002482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002484:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800248c:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8002490:	0800ed8c 	.word	0x0800ed8c
  ldr r2, =_sbss
 8002494:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8002498:	200074ec 	.word	0x200074ec

0800249c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC_IRQHandler>
	...

080024a0 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	4603      	mov	r3, r0
 80024aa:	81fb      	strh	r3, [r7, #14]
 80024ac:	460b      	mov	r3, r1
 80024ae:	81bb      	strh	r3, [r7, #12]
 80024b0:	4613      	mov	r3, r2
 80024b2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 80024b8:	89bb      	ldrh	r3, [r7, #12]
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80024be:	89bb      	ldrh	r3, [r7, #12]
 80024c0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024c4:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80024ca:	f001 fc0b 	bl	8003ce4 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2203      	movs	r2, #3
 80024d4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80024d8:	4618      	mov	r0, r3
 80024da:	f001 fafb 	bl	8003ad4 <CODEC_IO_Write>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	4413      	add	r3, r2
 80024e6:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 80024e8:	89fb      	ldrh	r3, [r7, #14]
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2200      	movs	r2, #0
 80024ee:	f640 0117 	movw	r1, #2071	; 0x817
 80024f2:	4618      	mov	r0, r3
 80024f4:	f001 faee 	bl	8003ad4 <CODEC_IO_Write>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8002502:	89fb      	ldrh	r3, [r7, #14]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2200      	movs	r2, #0
 8002508:	f44f 7181 	mov.w	r1, #258	; 0x102
 800250c:	4618      	mov	r0, r3
 800250e:	f001 fae1 	bl	8003ad4 <CODEC_IO_Write>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	4413      	add	r3, r2
 800251a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 800251c:	89fb      	ldrh	r3, [r7, #14]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	226c      	movs	r2, #108	; 0x6c
 8002522:	2139      	movs	r1, #57	; 0x39
 8002524:	4618      	mov	r0, r3
 8002526:	f001 fad5 	bl	8003ad4 <CODEC_IO_Write>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	4413      	add	r3, r2
 8002532:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8002534:	8afb      	ldrh	r3, [r7, #22]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800253a:	89fb      	ldrh	r3, [r7, #14]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2213      	movs	r2, #19
 8002540:	2101      	movs	r1, #1
 8002542:	4618      	mov	r0, r3
 8002544:	f001 fac6 	bl	8003ad4 <CODEC_IO_Write>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e00b      	b.n	800256c <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8002554:	89fb      	ldrh	r3, [r7, #14]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2203      	movs	r2, #3
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f001 fab9 	bl	8003ad4 <CODEC_IO_Write>
 8002562:	4603      	mov	r3, r0
 8002564:	461a      	mov	r2, r3
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	4413      	add	r3, r2
 800256a:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 800256c:	2032      	movs	r0, #50	; 0x32
 800256e:	f001 fc13 	bl	8003d98 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8002572:	8b3b      	ldrh	r3, [r7, #24]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 815f 	beq.w	8002838 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 800257a:	4bae      	ldr	r3, [pc, #696]	; (8002834 <wm8994_Init+0x394>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8002580:	8b3b      	ldrh	r3, [r7, #24]
 8002582:	2b03      	cmp	r3, #3
 8002584:	f000 808c 	beq.w	80026a0 <wm8994_Init+0x200>
 8002588:	2b03      	cmp	r3, #3
 800258a:	f300 8111 	bgt.w	80027b0 <wm8994_Init+0x310>
 800258e:	2b01      	cmp	r3, #1
 8002590:	d002      	beq.n	8002598 <wm8994_Init+0xf8>
 8002592:	2b02      	cmp	r3, #2
 8002594:	d042      	beq.n	800261c <wm8994_Init+0x17c>
 8002596:	e10b      	b.n	80027b0 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002598:	89fb      	ldrh	r3, [r7, #14]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f640 420c 	movw	r2, #3084	; 0xc0c
 80025a0:	2105      	movs	r1, #5
 80025a2:	4618      	mov	r0, r3
 80025a4:	f001 fa96 	bl	8003ad4 <CODEC_IO_Write>
 80025a8:	4603      	mov	r3, r0
 80025aa:	461a      	mov	r2, r3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80025b2:	89fb      	ldrh	r3, [r7, #14]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2200      	movs	r2, #0
 80025b8:	f240 6101 	movw	r1, #1537	; 0x601
 80025bc:	4618      	mov	r0, r3
 80025be:	f001 fa89 	bl	8003ad4 <CODEC_IO_Write>
 80025c2:	4603      	mov	r3, r0
 80025c4:	461a      	mov	r2, r3
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	4413      	add	r3, r2
 80025ca:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80025cc:	89fb      	ldrh	r3, [r7, #14]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	f240 6102 	movw	r1, #1538	; 0x602
 80025d6:	4618      	mov	r0, r3
 80025d8:	f001 fa7c 	bl	8003ad4 <CODEC_IO_Write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	4413      	add	r3, r2
 80025e4:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2202      	movs	r2, #2
 80025ec:	f240 6104 	movw	r1, #1540	; 0x604
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 fa6f 	bl	8003ad4 <CODEC_IO_Write>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	4413      	add	r3, r2
 80025fe:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002600:	89fb      	ldrh	r3, [r7, #14]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2202      	movs	r2, #2
 8002606:	f240 6105 	movw	r1, #1541	; 0x605
 800260a:	4618      	mov	r0, r3
 800260c:	f001 fa62 	bl	8003ad4 <CODEC_IO_Write>
 8002610:	4603      	mov	r3, r0
 8002612:	461a      	mov	r2, r3
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	4413      	add	r3, r2
 8002618:	61fb      	str	r3, [r7, #28]
      break;
 800261a:	e110      	b.n	800283e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800261c:	89fb      	ldrh	r3, [r7, #14]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f240 3203 	movw	r2, #771	; 0x303
 8002624:	2105      	movs	r1, #5
 8002626:	4618      	mov	r0, r3
 8002628:	f001 fa54 	bl	8003ad4 <CODEC_IO_Write>
 800262c:	4603      	mov	r3, r0
 800262e:	461a      	mov	r2, r3
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	4413      	add	r3, r2
 8002634:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2201      	movs	r2, #1
 800263c:	f240 6101 	movw	r1, #1537	; 0x601
 8002640:	4618      	mov	r0, r3
 8002642:	f001 fa47 	bl	8003ad4 <CODEC_IO_Write>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	4413      	add	r3, r2
 800264e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002650:	89fb      	ldrh	r3, [r7, #14]
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2201      	movs	r2, #1
 8002656:	f240 6102 	movw	r1, #1538	; 0x602
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fa3a 	bl	8003ad4 <CODEC_IO_Write>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800266a:	89fb      	ldrh	r3, [r7, #14]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2200      	movs	r2, #0
 8002670:	f240 6104 	movw	r1, #1540	; 0x604
 8002674:	4618      	mov	r0, r3
 8002676:	f001 fa2d 	bl	8003ad4 <CODEC_IO_Write>
 800267a:	4603      	mov	r3, r0
 800267c:	461a      	mov	r2, r3
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	4413      	add	r3, r2
 8002682:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002684:	89fb      	ldrh	r3, [r7, #14]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2200      	movs	r2, #0
 800268a:	f240 6105 	movw	r1, #1541	; 0x605
 800268e:	4618      	mov	r0, r3
 8002690:	f001 fa20 	bl	8003ad4 <CODEC_IO_Write>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	4413      	add	r3, r2
 800269c:	61fb      	str	r3, [r7, #28]
      break;
 800269e:	e0ce      	b.n	800283e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80026a0:	8afb      	ldrh	r3, [r7, #22]
 80026a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80026a6:	d141      	bne.n	800272c <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80026a8:	89fb      	ldrh	r3, [r7, #14]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f640 720f 	movw	r2, #3855	; 0xf0f
 80026b0:	2105      	movs	r1, #5
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 fa0e 	bl	8003ad4 <CODEC_IO_Write>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	4413      	add	r3, r2
 80026c0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80026c2:	89fb      	ldrh	r3, [r7, #14]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2203      	movs	r2, #3
 80026c8:	f240 6101 	movw	r1, #1537	; 0x601
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 fa01 	bl	8003ad4 <CODEC_IO_Write>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	4413      	add	r3, r2
 80026da:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80026dc:	89fb      	ldrh	r3, [r7, #14]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2203      	movs	r2, #3
 80026e2:	f240 6102 	movw	r1, #1538	; 0x602
 80026e6:	4618      	mov	r0, r3
 80026e8:	f001 f9f4 	bl	8003ad4 <CODEC_IO_Write>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461a      	mov	r2, r3
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80026f6:	89fb      	ldrh	r3, [r7, #14]
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2203      	movs	r2, #3
 80026fc:	f240 6104 	movw	r1, #1540	; 0x604
 8002700:	4618      	mov	r0, r3
 8002702:	f001 f9e7 	bl	8003ad4 <CODEC_IO_Write>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	4413      	add	r3, r2
 800270e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8002710:	89fb      	ldrh	r3, [r7, #14]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2203      	movs	r2, #3
 8002716:	f240 6105 	movw	r1, #1541	; 0x605
 800271a:	4618      	mov	r0, r3
 800271c:	f001 f9da 	bl	8003ad4 <CODEC_IO_Write>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800272a:	e088      	b.n	800283e <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800272c:	89fb      	ldrh	r3, [r7, #14]
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002734:	2105      	movs	r1, #5
 8002736:	4618      	mov	r0, r3
 8002738:	f001 f9cc 	bl	8003ad4 <CODEC_IO_Write>
 800273c:	4603      	mov	r3, r0
 800273e:	461a      	mov	r2, r3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	4413      	add	r3, r2
 8002744:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002746:	89fb      	ldrh	r3, [r7, #14]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2201      	movs	r2, #1
 800274c:	f240 6101 	movw	r1, #1537	; 0x601
 8002750:	4618      	mov	r0, r3
 8002752:	f001 f9bf 	bl	8003ad4 <CODEC_IO_Write>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	4413      	add	r3, r2
 800275e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002760:	89fb      	ldrh	r3, [r7, #14]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2201      	movs	r2, #1
 8002766:	f240 6102 	movw	r1, #1538	; 0x602
 800276a:	4618      	mov	r0, r3
 800276c:	f001 f9b2 	bl	8003ad4 <CODEC_IO_Write>
 8002770:	4603      	mov	r3, r0
 8002772:	461a      	mov	r2, r3
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	4413      	add	r3, r2
 8002778:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800277a:	89fb      	ldrh	r3, [r7, #14]
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2202      	movs	r2, #2
 8002780:	f240 6104 	movw	r1, #1540	; 0x604
 8002784:	4618      	mov	r0, r3
 8002786:	f001 f9a5 	bl	8003ad4 <CODEC_IO_Write>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002794:	89fb      	ldrh	r3, [r7, #14]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2202      	movs	r2, #2
 800279a:	f240 6105 	movw	r1, #1541	; 0x605
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 f998 	bl	8003ad4 <CODEC_IO_Write>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461a      	mov	r2, r3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	4413      	add	r3, r2
 80027ac:	61fb      	str	r3, [r7, #28]
      break;
 80027ae:	e046      	b.n	800283e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80027b0:	89fb      	ldrh	r3, [r7, #14]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f240 3203 	movw	r2, #771	; 0x303
 80027b8:	2105      	movs	r1, #5
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 f98a 	bl	8003ad4 <CODEC_IO_Write>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	4413      	add	r3, r2
 80027c8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80027ca:	89fb      	ldrh	r3, [r7, #14]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2201      	movs	r2, #1
 80027d0:	f240 6101 	movw	r1, #1537	; 0x601
 80027d4:	4618      	mov	r0, r3
 80027d6:	f001 f97d 	bl	8003ad4 <CODEC_IO_Write>
 80027da:	4603      	mov	r3, r0
 80027dc:	461a      	mov	r2, r3
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80027e4:	89fb      	ldrh	r3, [r7, #14]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2201      	movs	r2, #1
 80027ea:	f240 6102 	movw	r1, #1538	; 0x602
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 f970 	bl	8003ad4 <CODEC_IO_Write>
 80027f4:	4603      	mov	r3, r0
 80027f6:	461a      	mov	r2, r3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	4413      	add	r3, r2
 80027fc:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80027fe:	89fb      	ldrh	r3, [r7, #14]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2200      	movs	r2, #0
 8002804:	f240 6104 	movw	r1, #1540	; 0x604
 8002808:	4618      	mov	r0, r3
 800280a:	f001 f963 	bl	8003ad4 <CODEC_IO_Write>
 800280e:	4603      	mov	r3, r0
 8002810:	461a      	mov	r2, r3
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	4413      	add	r3, r2
 8002816:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002818:	89fb      	ldrh	r3, [r7, #14]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2200      	movs	r2, #0
 800281e:	f240 6105 	movw	r1, #1541	; 0x605
 8002822:	4618      	mov	r0, r3
 8002824:	f001 f956 	bl	8003ad4 <CODEC_IO_Write>
 8002828:	4603      	mov	r3, r0
 800282a:	461a      	mov	r2, r3
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	61fb      	str	r3, [r7, #28]
      break;
 8002832:	e004      	b.n	800283e <wm8994_Init+0x39e>
 8002834:	20006fc4 	.word	0x20006fc4
    }
  }
  else
  {
    outputEnabled = 0;
 8002838:	4b99      	ldr	r3, [pc, #612]	; (8002aa0 <wm8994_Init+0x600>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800283e:	8afb      	ldrh	r3, [r7, #22]
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 81ab 	beq.w	8002b9c <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8002846:	4b97      	ldr	r3, [pc, #604]	; (8002aa4 <wm8994_Init+0x604>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 800284c:	8afb      	ldrh	r3, [r7, #22]
 800284e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002852:	f000 8129 	beq.w	8002aa8 <wm8994_Init+0x608>
 8002856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800285a:	f300 819b 	bgt.w	8002b94 <wm8994_Init+0x6f4>
 800285e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002862:	d05a      	beq.n	800291a <wm8994_Init+0x47a>
 8002864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002868:	f300 8194 	bgt.w	8002b94 <wm8994_Init+0x6f4>
 800286c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002870:	f000 80c6 	beq.w	8002a00 <wm8994_Init+0x560>
 8002874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002878:	f040 818c 	bne.w	8002b94 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 800287c:	89fb      	ldrh	r3, [r7, #14]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8002884:	2104      	movs	r1, #4
 8002886:	4618      	mov	r0, r3
 8002888:	f001 f924 	bl	8003ad4 <CODEC_IO_Write>
 800288c:	4603      	mov	r3, r0
 800288e:	461a      	mov	r2, r3
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002896:	89fb      	ldrh	r3, [r7, #14]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	22db      	movs	r2, #219	; 0xdb
 800289c:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 f917 	bl	8003ad4 <CODEC_IO_Write>
 80028a6:	4603      	mov	r3, r0
 80028a8:	461a      	mov	r2, r3
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80028b0:	89fb      	ldrh	r3, [r7, #14]
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80028b8:	2102      	movs	r1, #2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f001 f90a 	bl	8003ad4 <CODEC_IO_Write>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461a      	mov	r2, r3
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	4413      	add	r3, r2
 80028c8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80028ca:	89fb      	ldrh	r3, [r7, #14]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2202      	movs	r2, #2
 80028d0:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80028d4:	4618      	mov	r0, r3
 80028d6:	f001 f8fd 	bl	8003ad4 <CODEC_IO_Write>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80028e4:	89fb      	ldrh	r3, [r7, #14]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2202      	movs	r2, #2
 80028ea:	f240 6109 	movw	r1, #1545	; 0x609
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f8f0 	bl	8003ad4 <CODEC_IO_Write>
 80028f4:	4603      	mov	r3, r0
 80028f6:	461a      	mov	r2, r3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80028fe:	89fb      	ldrh	r3, [r7, #14]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	220e      	movs	r2, #14
 8002904:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002908:	4618      	mov	r0, r3
 800290a:	f001 f8e3 	bl	8003ad4 <CODEC_IO_Write>
 800290e:	4603      	mov	r3, r0
 8002910:	461a      	mov	r2, r3
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	61fb      	str	r3, [r7, #28]
      break;
 8002918:	e143      	b.n	8002ba2 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800291a:	89fb      	ldrh	r3, [r7, #14]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2211      	movs	r2, #17
 8002920:	2128      	movs	r1, #40	; 0x28
 8002922:	4618      	mov	r0, r3
 8002924:	f001 f8d6 	bl	8003ad4 <CODEC_IO_Write>
 8002928:	4603      	mov	r3, r0
 800292a:	461a      	mov	r2, r3
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	4413      	add	r3, r2
 8002930:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8002932:	89fb      	ldrh	r3, [r7, #14]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2235      	movs	r2, #53	; 0x35
 8002938:	2129      	movs	r1, #41	; 0x29
 800293a:	4618      	mov	r0, r3
 800293c:	f001 f8ca 	bl	8003ad4 <CODEC_IO_Write>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4413      	add	r3, r2
 8002948:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800294a:	89fb      	ldrh	r3, [r7, #14]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2235      	movs	r2, #53	; 0x35
 8002950:	212a      	movs	r1, #42	; 0x2a
 8002952:	4618      	mov	r0, r3
 8002954:	f001 f8be 	bl	8003ad4 <CODEC_IO_Write>
 8002958:	4603      	mov	r3, r0
 800295a:	461a      	mov	r2, r3
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	4413      	add	r3, r2
 8002960:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8002962:	89fb      	ldrh	r3, [r7, #14]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	f240 3203 	movw	r2, #771	; 0x303
 800296a:	2104      	movs	r1, #4
 800296c:	4618      	mov	r0, r3
 800296e:	f001 f8b1 	bl	8003ad4 <CODEC_IO_Write>
 8002972:	4603      	mov	r3, r0
 8002974:	461a      	mov	r2, r3
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	4413      	add	r3, r2
 800297a:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 800297c:	89fb      	ldrh	r3, [r7, #14]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	22db      	movs	r2, #219	; 0xdb
 8002982:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002986:	4618      	mov	r0, r3
 8002988:	f001 f8a4 	bl	8003ad4 <CODEC_IO_Write>
 800298c:	4603      	mov	r3, r0
 800298e:	461a      	mov	r2, r3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4413      	add	r3, r2
 8002994:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	f246 3250 	movw	r2, #25424	; 0x6350
 800299e:	2102      	movs	r1, #2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 f897 	bl	8003ad4 <CODEC_IO_Write>
 80029a6:	4603      	mov	r3, r0
 80029a8:	461a      	mov	r2, r3
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	4413      	add	r3, r2
 80029ae:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80029b0:	89fb      	ldrh	r3, [r7, #14]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2202      	movs	r2, #2
 80029b6:	f240 6106 	movw	r1, #1542	; 0x606
 80029ba:	4618      	mov	r0, r3
 80029bc:	f001 f88a 	bl	8003ad4 <CODEC_IO_Write>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461a      	mov	r2, r3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	4413      	add	r3, r2
 80029c8:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80029ca:	89fb      	ldrh	r3, [r7, #14]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2202      	movs	r2, #2
 80029d0:	f240 6107 	movw	r1, #1543	; 0x607
 80029d4:	4618      	mov	r0, r3
 80029d6:	f001 f87d 	bl	8003ad4 <CODEC_IO_Write>
 80029da:	4603      	mov	r3, r0
 80029dc:	461a      	mov	r2, r3
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	4413      	add	r3, r2
 80029e2:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80029e4:	89fb      	ldrh	r3, [r7, #14]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	220d      	movs	r2, #13
 80029ea:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80029ee:	4618      	mov	r0, r3
 80029f0:	f001 f870 	bl	8003ad4 <CODEC_IO_Write>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461a      	mov	r2, r3
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	61fb      	str	r3, [r7, #28]
      break;
 80029fe:	e0d0      	b.n	8002ba2 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8002a00:	89fb      	ldrh	r3, [r7, #14]
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8002a08:	2104      	movs	r1, #4
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f001 f862 	bl	8003ad4 <CODEC_IO_Write>
 8002a10:	4603      	mov	r3, r0
 8002a12:	461a      	mov	r2, r3
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002a1a:	89fb      	ldrh	r3, [r7, #14]
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	22db      	movs	r2, #219	; 0xdb
 8002a20:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002a24:	4618      	mov	r0, r3
 8002a26:	f001 f855 	bl	8003ad4 <CODEC_IO_Write>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	4413      	add	r3, r2
 8002a32:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002a34:	89fb      	ldrh	r3, [r7, #14]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f246 3250 	movw	r2, #25424	; 0x6350
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 f848 	bl	8003ad4 <CODEC_IO_Write>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002a4e:	89fb      	ldrh	r3, [r7, #14]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2202      	movs	r2, #2
 8002a54:	f240 6106 	movw	r1, #1542	; 0x606
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 f83b 	bl	8003ad4 <CODEC_IO_Write>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	461a      	mov	r2, r3
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002a68:	89fb      	ldrh	r3, [r7, #14]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f240 6107 	movw	r1, #1543	; 0x607
 8002a72:	4618      	mov	r0, r3
 8002a74:	f001 f82e 	bl	8003ad4 <CODEC_IO_Write>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4413      	add	r3, r2
 8002a80:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002a82:	89fb      	ldrh	r3, [r7, #14]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	220d      	movs	r2, #13
 8002a88:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 f821 	bl	8003ad4 <CODEC_IO_Write>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461a      	mov	r2, r3
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	4413      	add	r3, r2
 8002a9a:	61fb      	str	r3, [r7, #28]
      break; 
 8002a9c:	e081      	b.n	8002ba2 <wm8994_Init+0x702>
 8002a9e:	bf00      	nop
 8002aa0:	20006fc4 	.word	0x20006fc4
 8002aa4:	20006fc8 	.word	0x20006fc8
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002aa8:	89fb      	ldrh	r3, [r7, #14]
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002ab0:	2104      	movs	r1, #4
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f001 f80e 	bl	8003ad4 <CODEC_IO_Write>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	461a      	mov	r2, r3
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002ac2:	89fb      	ldrh	r3, [r7, #14]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	22db      	movs	r2, #219	; 0xdb
 8002ac8:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002acc:	4618      	mov	r0, r3
 8002ace:	f001 f801 	bl	8003ad4 <CODEC_IO_Write>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	4413      	add	r3, r2
 8002ada:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002adc:	89fb      	ldrh	r3, [r7, #14]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	22db      	movs	r2, #219	; 0xdb
 8002ae2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fff4 	bl	8003ad4 <CODEC_IO_Write>
 8002aec:	4603      	mov	r3, r0
 8002aee:	461a      	mov	r2, r3
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	4413      	add	r3, r2
 8002af4:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8002af6:	89fb      	ldrh	r3, [r7, #14]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8002afe:	2102      	movs	r1, #2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 ffe7 	bl	8003ad4 <CODEC_IO_Write>
 8002b06:	4603      	mov	r3, r0
 8002b08:	461a      	mov	r2, r3
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8002b10:	89fb      	ldrh	r3, [r7, #14]
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2202      	movs	r2, #2
 8002b16:	f240 6106 	movw	r1, #1542	; 0x606
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 ffda 	bl	8003ad4 <CODEC_IO_Write>
 8002b20:	4603      	mov	r3, r0
 8002b22:	461a      	mov	r2, r3
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	4413      	add	r3, r2
 8002b28:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002b2a:	89fb      	ldrh	r3, [r7, #14]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f240 6107 	movw	r1, #1543	; 0x607
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 ffcd 	bl	8003ad4 <CODEC_IO_Write>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4413      	add	r3, r2
 8002b42:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002b44:	89fb      	ldrh	r3, [r7, #14]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2202      	movs	r2, #2
 8002b4a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 ffc0 	bl	8003ad4 <CODEC_IO_Write>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002b5e:	89fb      	ldrh	r3, [r7, #14]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2202      	movs	r2, #2
 8002b64:	f240 6109 	movw	r1, #1545	; 0x609
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 ffb3 	bl	8003ad4 <CODEC_IO_Write>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	461a      	mov	r2, r3
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4413      	add	r3, r2
 8002b76:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002b78:	89fb      	ldrh	r3, [r7, #14]
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	220d      	movs	r2, #13
 8002b7e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 ffa6 	bl	8003ad4 <CODEC_IO_Write>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	61fb      	str	r3, [r7, #28]
      break;    
 8002b92:	e006      	b.n	8002ba2 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	3301      	adds	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
      break;
 8002b9a:	e002      	b.n	8002ba2 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002b9c:	4ba4      	ldr	r3, [pc, #656]	; (8002e30 <wm8994_Init+0x990>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4aa3      	ldr	r2, [pc, #652]	; (8002e34 <wm8994_Init+0x994>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d079      	beq.n	8002c9e <wm8994_Init+0x7fe>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4aa1      	ldr	r2, [pc, #644]	; (8002e34 <wm8994_Init+0x994>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	f200 80ad 	bhi.w	8002d0e <wm8994_Init+0x86e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d061      	beq.n	8002c82 <wm8994_Init+0x7e2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	f200 80a2 	bhi.w	8002d0e <wm8994_Init+0x86e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	f000 808e 	beq.w	8002cf2 <wm8994_Init+0x852>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	f200 8096 	bhi.w	8002d0e <wm8994_Init+0x86e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002be8:	d03d      	beq.n	8002c66 <wm8994_Init+0x7c6>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002bf0:	f200 808d 	bhi.w	8002d0e <wm8994_Init+0x86e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f245 6222 	movw	r2, #22050	; 0x5622
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d06b      	beq.n	8002cd6 <wm8994_Init+0x836>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f245 6222 	movw	r2, #22050	; 0x5622
 8002c04:	4293      	cmp	r3, r2
 8002c06:	f200 8082 	bhi.w	8002d0e <wm8994_Init+0x86e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002c10:	d01b      	beq.n	8002c4a <wm8994_Init+0x7aa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002c18:	d879      	bhi.n	8002d0e <wm8994_Init+0x86e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002c20:	d005      	beq.n	8002c2e <wm8994_Init+0x78e>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d046      	beq.n	8002cba <wm8994_Init+0x81a>
 8002c2c:	e06f      	b.n	8002d0e <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002c2e:	89fb      	ldrh	r3, [r7, #14]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2203      	movs	r2, #3
 8002c34:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 ff4b 	bl	8003ad4 <CODEC_IO_Write>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	61fb      	str	r3, [r7, #28]
    break;
 8002c48:	e06f      	b.n	8002d2a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8002c4a:	89fb      	ldrh	r3, [r7, #14]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2233      	movs	r2, #51	; 0x33
 8002c50:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 ff3d 	bl	8003ad4 <CODEC_IO_Write>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	4413      	add	r3, r2
 8002c62:	61fb      	str	r3, [r7, #28]
    break;
 8002c64:	e061      	b.n	8002d2a <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002c66:	89fb      	ldrh	r3, [r7, #14]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2263      	movs	r2, #99	; 0x63
 8002c6c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 ff2f 	bl	8003ad4 <CODEC_IO_Write>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	61fb      	str	r3, [r7, #28]
    break;
 8002c80:	e053      	b.n	8002d2a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002c82:	89fb      	ldrh	r3, [r7, #14]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2283      	movs	r2, #131	; 0x83
 8002c88:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 ff21 	bl	8003ad4 <CODEC_IO_Write>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	4413      	add	r3, r2
 8002c9a:	61fb      	str	r3, [r7, #28]
    break;
 8002c9c:	e045      	b.n	8002d2a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8002c9e:	89fb      	ldrh	r3, [r7, #14]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	22a3      	movs	r2, #163	; 0xa3
 8002ca4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 ff13 	bl	8003ad4 <CODEC_IO_Write>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	61fb      	str	r3, [r7, #28]
    break;
 8002cb8:	e037      	b.n	8002d2a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002cba:	89fb      	ldrh	r3, [r7, #14]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2213      	movs	r2, #19
 8002cc0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 ff05 	bl	8003ad4 <CODEC_IO_Write>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	461a      	mov	r2, r3
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	61fb      	str	r3, [r7, #28]
    break;
 8002cd4:	e029      	b.n	8002d2a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002cd6:	89fb      	ldrh	r3, [r7, #14]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2243      	movs	r2, #67	; 0x43
 8002cdc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 fef7 	bl	8003ad4 <CODEC_IO_Write>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	461a      	mov	r2, r3
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4413      	add	r3, r2
 8002cee:	61fb      	str	r3, [r7, #28]
    break;
 8002cf0:	e01b      	b.n	8002d2a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002cf2:	89fb      	ldrh	r3, [r7, #14]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2273      	movs	r2, #115	; 0x73
 8002cf8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fee9 	bl	8003ad4 <CODEC_IO_Write>
 8002d02:	4603      	mov	r3, r0
 8002d04:	461a      	mov	r2, r3
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	61fb      	str	r3, [r7, #28]
    break; 
 8002d0c:	e00d      	b.n	8002d2a <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002d0e:	89fb      	ldrh	r3, [r7, #14]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2283      	movs	r2, #131	; 0x83
 8002d14:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fedb 	bl	8003ad4 <CODEC_IO_Write>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	4413      	add	r3, r2
 8002d26:	61fb      	str	r3, [r7, #28]
    break; 
 8002d28:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002d2a:	8afb      	ldrh	r3, [r7, #22]
 8002d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d30:	d10e      	bne.n	8002d50 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8002d32:	89fb      	ldrh	r3, [r7, #14]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f244 0218 	movw	r2, #16408	; 0x4018
 8002d3a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fec8 	bl	8003ad4 <CODEC_IO_Write>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461a      	mov	r2, r3
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e00d      	b.n	8002d6c <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8002d50:	89fb      	ldrh	r3, [r7, #14]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f244 0210 	movw	r2, #16400	; 0x4010
 8002d58:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 feb9 	bl	8003ad4 <CODEC_IO_Write>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	4413      	add	r3, r2
 8002d6a:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002d6c:	89fb      	ldrh	r3, [r7, #14]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2200      	movs	r2, #0
 8002d72:	f240 3102 	movw	r1, #770	; 0x302
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 feac 	bl	8003ad4 <CODEC_IO_Write>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461a      	mov	r2, r3
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	4413      	add	r3, r2
 8002d84:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002d86:	89fb      	ldrh	r3, [r7, #14]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	220a      	movs	r2, #10
 8002d8c:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fe9f 	bl	8003ad4 <CODEC_IO_Write>
 8002d96:	4603      	mov	r3, r0
 8002d98:	461a      	mov	r2, r3
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8002da0:	89fb      	ldrh	r3, [r7, #14]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2201      	movs	r2, #1
 8002da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fe92 	bl	8003ad4 <CODEC_IO_Write>
 8002db0:	4603      	mov	r3, r0
 8002db2:	461a      	mov	r2, r3
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	4413      	add	r3, r2
 8002db8:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002dba:	8b3b      	ldrh	r3, [r7, #24]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 817b 	beq.w	80030b8 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8002dc2:	8b3b      	ldrh	r3, [r7, #24]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d157      	bne.n	8002e78 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8002dc8:	89fb      	ldrh	r3, [r7, #14]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dd0:	212d      	movs	r1, #45	; 0x2d
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fe7e 	bl	8003ad4 <CODEC_IO_Write>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	4413      	add	r3, r2
 8002de0:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8002de2:	89fb      	ldrh	r3, [r7, #14]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dea:	212e      	movs	r1, #46	; 0x2e
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fe71 	bl	8003ad4 <CODEC_IO_Write>
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8002dfc:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <wm8994_Init+0x998>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01b      	beq.n	8002e3c <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8002e04:	89fb      	ldrh	r3, [r7, #14]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8002e0c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fe5f 	bl	8003ad4 <CODEC_IO_Write>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <wm8994_Init+0x998>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8002e26:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002e2a:	f000 ffb5 	bl	8003d98 <AUDIO_IO_Delay>
 8002e2e:	e016      	b.n	8002e5e <wm8994_Init+0x9be>
 8002e30:	20006fc8 	.word	0x20006fc8
 8002e34:	00017700 	.word	0x00017700
 8002e38:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8002e3c:	89fb      	ldrh	r3, [r7, #14]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f248 1208 	movw	r2, #33032	; 0x8108
 8002e44:	f44f 7188 	mov.w	r1, #272	; 0x110
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 fe43 	bl	8003ad4 <CODEC_IO_Write>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	461a      	mov	r2, r3
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	4413      	add	r3, r2
 8002e56:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8002e58:	2032      	movs	r0, #50	; 0x32
 8002e5a:	f000 ff9d 	bl	8003d98 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2200      	movs	r2, #0
 8002e64:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fe33 	bl	8003ad4 <CODEC_IO_Write>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	461a      	mov	r2, r3
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002e78:	89fb      	ldrh	r3, [r7, #14]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e80:	2103      	movs	r1, #3
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fe26 	bl	8003ad4 <CODEC_IO_Write>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002e92:	89fb      	ldrh	r3, [r7, #14]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2200      	movs	r2, #0
 8002e98:	2122      	movs	r1, #34	; 0x22
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fe1a 	bl	8003ad4 <CODEC_IO_Write>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8002eaa:	89fb      	ldrh	r3, [r7, #14]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2123      	movs	r1, #35	; 0x23
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fe0e 	bl	8003ad4 <CODEC_IO_Write>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002ec2:	89fb      	ldrh	r3, [r7, #14]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002eca:	2136      	movs	r1, #54	; 0x36
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fe01 	bl	8003ad4 <CODEC_IO_Write>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	4413      	add	r3, r2
 8002eda:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8002edc:	89fb      	ldrh	r3, [r7, #14]
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f243 0203 	movw	r2, #12291	; 0x3003
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fdf4 	bl	8003ad4 <CODEC_IO_Write>
 8002eec:	4603      	mov	r3, r0
 8002eee:	461a      	mov	r2, r3
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002ef6:	8afb      	ldrh	r3, [r7, #22]
 8002ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002efc:	d10d      	bne.n	8002f1a <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002efe:	89fb      	ldrh	r3, [r7, #14]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f240 2205 	movw	r2, #517	; 0x205
 8002f06:	2151      	movs	r1, #81	; 0x51
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fde3 	bl	8003ad4 <CODEC_IO_Write>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	461a      	mov	r2, r3
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	e00b      	b.n	8002f32 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002f1a:	89fb      	ldrh	r3, [r7, #14]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2205      	movs	r2, #5
 8002f20:	2151      	movs	r1, #81	; 0x51
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fdd6 	bl	8003ad4 <CODEC_IO_Write>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	4413      	add	r3, r2
 8002f30:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002f32:	8b7b      	ldrh	r3, [r7, #26]
 8002f34:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8002f38:	f043 0303 	orr.w	r3, r3, #3
 8002f3c:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	8b7a      	ldrh	r2, [r7, #26]
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 fdc4 	bl	8003ad4 <CODEC_IO_Write>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	4413      	add	r3, r2
 8002f54:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002f56:	89fb      	ldrh	r3, [r7, #14]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2222      	movs	r2, #34	; 0x22
 8002f5c:	2160      	movs	r1, #96	; 0x60
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fdb8 	bl	8003ad4 <CODEC_IO_Write>
 8002f64:	4603      	mov	r3, r0
 8002f66:	461a      	mov	r2, r3
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002f6e:	89fb      	ldrh	r3, [r7, #14]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f649 7225 	movw	r2, #40741	; 0x9f25
 8002f76:	214c      	movs	r1, #76	; 0x4c
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fdab 	bl	8003ad4 <CODEC_IO_Write>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461a      	mov	r2, r3
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	4413      	add	r3, r2
 8002f86:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002f88:	200f      	movs	r0, #15
 8002f8a:	f000 ff05 	bl	8003d98 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002f8e:	89fb      	ldrh	r3, [r7, #14]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2201      	movs	r2, #1
 8002f94:	212d      	movs	r1, #45	; 0x2d
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fd9c 	bl	8003ad4 <CODEC_IO_Write>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2201      	movs	r2, #1
 8002fac:	212e      	movs	r1, #46	; 0x2e
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f000 fd90 	bl	8003ad4 <CODEC_IO_Write>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	4413      	add	r3, r2
 8002fbc:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002fbe:	89fb      	ldrh	r3, [r7, #14]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f44f 724c 	mov.w	r2, #816	; 0x330
 8002fc6:	2103      	movs	r1, #3
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 fd83 	bl	8003ad4 <CODEC_IO_Write>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002fd8:	89fb      	ldrh	r3, [r7, #14]
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2233      	movs	r2, #51	; 0x33
 8002fde:	2154      	movs	r1, #84	; 0x54
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fd77 	bl	8003ad4 <CODEC_IO_Write>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	461a      	mov	r2, r3
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	4413      	add	r3, r2
 8002fee:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002ff0:	f240 1001 	movw	r0, #257	; 0x101
 8002ff4:	f000 fed0 	bl	8003d98 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002ff8:	89fb      	ldrh	r3, [r7, #14]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	22ee      	movs	r2, #238	; 0xee
 8002ffe:	2160      	movs	r1, #96	; 0x60
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fd67 	bl	8003ad4 <CODEC_IO_Write>
 8003006:	4603      	mov	r3, r0
 8003008:	461a      	mov	r2, r3
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	4413      	add	r3, r2
 800300e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8003010:	89fb      	ldrh	r3, [r7, #14]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	22c0      	movs	r2, #192	; 0xc0
 8003016:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fd5a 	bl	8003ad4 <CODEC_IO_Write>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	4413      	add	r3, r2
 8003028:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800302a:	89fb      	ldrh	r3, [r7, #14]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	22c0      	movs	r2, #192	; 0xc0
 8003030:	f240 6111 	movw	r1, #1553	; 0x611
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fd4d 	bl	8003ad4 <CODEC_IO_Write>
 800303a:	4603      	mov	r3, r0
 800303c:	461a      	mov	r2, r3
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003044:	89fb      	ldrh	r3, [r7, #14]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2210      	movs	r2, #16
 800304a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fd40 	bl	8003ad4 <CODEC_IO_Write>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800305e:	89fb      	ldrh	r3, [r7, #14]
 8003060:	b2db      	uxtb	r3, r3
 8003062:	22c0      	movs	r2, #192	; 0xc0
 8003064:	f240 6112 	movw	r1, #1554	; 0x612
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fd33 	bl	8003ad4 <CODEC_IO_Write>
 800306e:	4603      	mov	r3, r0
 8003070:	461a      	mov	r2, r3
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	4413      	add	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8003078:	89fb      	ldrh	r3, [r7, #14]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	22c0      	movs	r2, #192	; 0xc0
 800307e:	f240 6113 	movw	r1, #1555	; 0x613
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fd26 	bl	8003ad4 <CODEC_IO_Write>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003092:	89fb      	ldrh	r3, [r7, #14]
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2210      	movs	r2, #16
 8003098:	f240 4122 	movw	r1, #1058	; 0x422
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fd19 	bl	8003ad4 <CODEC_IO_Write>
 80030a2:	4603      	mov	r3, r0
 80030a4:	461a      	mov	r2, r3
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	4413      	add	r3, r2
 80030aa:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80030ac:	7afa      	ldrb	r2, [r7, #11]
 80030ae:	89fb      	ldrh	r3, [r7, #14]
 80030b0:	4611      	mov	r1, r2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 f984 	bl	80033c0 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80030b8:	8afb      	ldrh	r3, [r7, #22]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80a6 	beq.w	800320c <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80030c0:	8afb      	ldrh	r3, [r7, #22]
 80030c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c6:	d003      	beq.n	80030d0 <wm8994_Init+0xc30>
 80030c8:	8afb      	ldrh	r3, [r7, #22]
 80030ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030ce:	d12b      	bne.n	8003128 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80030d0:	8b7b      	ldrh	r3, [r7, #26]
 80030d2:	f043 0313 	orr.w	r3, r3, #19
 80030d6:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80030d8:	89fb      	ldrh	r3, [r7, #14]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	8b7a      	ldrh	r2, [r7, #26]
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fcf7 	bl	8003ad4 <CODEC_IO_Write>
 80030e6:	4603      	mov	r3, r0
 80030e8:	461a      	mov	r2, r3
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	4413      	add	r3, r2
 80030ee:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80030f0:	89fb      	ldrh	r3, [r7, #14]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2202      	movs	r2, #2
 80030f6:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fcea 	bl	8003ad4 <CODEC_IO_Write>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800310a:	89fb      	ldrh	r3, [r7, #14]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003112:	f240 4111 	movw	r1, #1041	; 0x411
 8003116:	4618      	mov	r0, r3
 8003118:	f000 fcdc 	bl	8003ad4 <CODEC_IO_Write>
 800311c:	4603      	mov	r3, r0
 800311e:	461a      	mov	r2, r3
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	4413      	add	r3, r2
 8003124:	61fb      	str	r3, [r7, #28]
 8003126:	e06b      	b.n	8003200 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8003128:	8afb      	ldrh	r3, [r7, #22]
 800312a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312e:	d139      	bne.n	80031a4 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8003130:	8b7b      	ldrh	r3, [r7, #26]
 8003132:	f043 0313 	orr.w	r3, r3, #19
 8003136:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8003138:	89fb      	ldrh	r3, [r7, #14]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	8b7a      	ldrh	r2, [r7, #26]
 800313e:	2101      	movs	r1, #1
 8003140:	4618      	mov	r0, r3
 8003142:	f000 fcc7 	bl	8003ad4 <CODEC_IO_Write>
 8003146:	4603      	mov	r3, r0
 8003148:	461a      	mov	r2, r3
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8003150:	89fb      	ldrh	r3, [r7, #14]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2202      	movs	r2, #2
 8003156:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fcba 	bl	8003ad4 <CODEC_IO_Write>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	4413      	add	r3, r2
 8003168:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800316a:	89fb      	ldrh	r3, [r7, #14]
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8003172:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fcac 	bl	8003ad4 <CODEC_IO_Write>
 800317c:	4603      	mov	r3, r0
 800317e:	461a      	mov	r2, r3
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	4413      	add	r3, r2
 8003184:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8003186:	89fb      	ldrh	r3, [r7, #14]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800318e:	f240 4111 	movw	r1, #1041	; 0x411
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fc9e 	bl	8003ad4 <CODEC_IO_Write>
 8003198:	4603      	mov	r3, r0
 800319a:	461a      	mov	r2, r3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4413      	add	r3, r2
 80031a0:	61fb      	str	r3, [r7, #28]
 80031a2:	e02d      	b.n	8003200 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80031a4:	8afb      	ldrh	r3, [r7, #22]
 80031a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031aa:	d003      	beq.n	80031b4 <wm8994_Init+0xd14>
 80031ac:	8afb      	ldrh	r3, [r7, #22]
 80031ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b2:	d125      	bne.n	8003200 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80031b4:	89fb      	ldrh	r3, [r7, #14]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	220b      	movs	r2, #11
 80031ba:	2118      	movs	r1, #24
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fc89 	bl	8003ad4 <CODEC_IO_Write>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80031cc:	89fb      	ldrh	r3, [r7, #14]
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	220b      	movs	r2, #11
 80031d2:	211a      	movs	r1, #26
 80031d4:	4618      	mov	r0, r3
 80031d6:	f000 fc7d 	bl	8003ad4 <CODEC_IO_Write>
 80031da:	4603      	mov	r3, r0
 80031dc:	461a      	mov	r2, r3
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80031e4:	89fb      	ldrh	r3, [r7, #14]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80031ec:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80031f0:	4618      	mov	r0, r3
 80031f2:	f000 fc6f 	bl	8003ad4 <CODEC_IO_Write>
 80031f6:	4603      	mov	r3, r0
 80031f8:	461a      	mov	r2, r3
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	4413      	add	r3, r2
 80031fe:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8003200:	7afa      	ldrb	r2, [r7, #11]
 8003202:	89fb      	ldrh	r3, [r7, #14]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f000 f8da 	bl	80033c0 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 800320c:	69fb      	ldr	r3, [r7, #28]
}
 800320e:	4618      	mov	r0, r3
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop

08003218 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800321c:	f000 fd68 	bl	8003cf0 <AUDIO_IO_DeInit>
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}

08003224 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800322e:	f000 fd59 	bl	8003ce4 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2100      	movs	r1, #0
 8003238:	4618      	mov	r0, r3
 800323a:	f000 fd85 	bl	8003d48 <AUDIO_IO_Read>
 800323e:	4603      	mov	r3, r0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	6039      	str	r1, [r7, #0]
 8003252:	80fb      	strh	r3, [r7, #6]
 8003254:	4613      	mov	r3, r2
 8003256:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	2100      	movs	r1, #0
 8003260:	4618      	mov	r0, r3
 8003262:	f000 f9d1 	bl	8003608 <wm8994_SetMute>
 8003266:	4602      	mov	r2, r0
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800326e:	68fb      	ldr	r3, [r7, #12]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	2101      	movs	r1, #1
 800328a:	4618      	mov	r0, r3
 800328c:	f000 f9bc 	bl	8003608 <wm8994_SetMute>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2201      	movs	r2, #1
 800329e:	2102      	movs	r1, #2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fc17 	bl	8003ad4 <CODEC_IO_Write>
 80032a6:	4603      	mov	r3, r0
 80032a8:	461a      	mov	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4413      	add	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80032b0:	68fb      	ldr	r3, [r7, #12]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}

080032ba <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b084      	sub	sp, #16
 80032be:	af00      	add	r7, sp, #0
 80032c0:	4603      	mov	r3, r0
 80032c2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80032c8:	88fb      	ldrh	r3, [r7, #6]
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 f99b 	bl	8003608 <wm8994_SetMute>
 80032d2:	4602      	mov	r2, r0
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80032da:	68fb      	ldr	r3, [r7, #12]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80032f0:	2300      	movs	r3, #0
 80032f2:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80032f4:	4b31      	ldr	r3, [pc, #196]	; (80033bc <wm8994_Stop+0xd8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d05a      	beq.n	80033b2 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80032fc:	88fb      	ldrh	r3, [r7, #6]
 80032fe:	2101      	movs	r1, #1
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f981 	bl	8003608 <wm8994_SetMute>
 8003306:	4602      	mov	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4413      	add	r3, r2
 800330c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b02      	cmp	r3, #2
 8003312:	d04e      	beq.n	80033b2 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003314:	88fb      	ldrh	r3, [r7, #6]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fbd7 	bl	8003ad4 <CODEC_IO_Write>
 8003326:	4603      	mov	r3, r0
 8003328:	461a      	mov	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4413      	add	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	b2db      	uxtb	r3, r3
 8003334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003338:	f240 4122 	movw	r1, #1058	; 0x422
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fbc9 	bl	8003ad4 <CODEC_IO_Write>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4413      	add	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2200      	movs	r2, #0
 8003352:	212d      	movs	r1, #45	; 0x2d
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fbbd 	bl	8003ad4 <CODEC_IO_Write>
 800335a:	4603      	mov	r3, r0
 800335c:	461a      	mov	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	4413      	add	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2200      	movs	r2, #0
 800336a:	212e      	movs	r1, #46	; 0x2e
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fbb1 	bl	8003ad4 <CODEC_IO_Write>
 8003372:	4603      	mov	r3, r0
 8003374:	461a      	mov	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	4413      	add	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2200      	movs	r2, #0
 8003382:	2105      	movs	r1, #5
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fba5 	bl	8003ad4 <CODEC_IO_Write>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4413      	add	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2200      	movs	r2, #0
 800339a:	2100      	movs	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f000 fb99 	bl	8003ad4 <CODEC_IO_Write>
 80033a2:	4603      	mov	r3, r0
 80033a4:	461a      	mov	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4413      	add	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 80033ac:	4b03      	ldr	r3, [pc, #12]	; (80033bc <wm8994_Stop+0xd8>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 80033b2:	68fb      	ldr	r3, [r7, #12]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20006fc4 	.word	0x20006fc4

080033c0 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	460a      	mov	r2, r1
 80033ca:	80fb      	strh	r3, [r7, #6]
 80033cc:	4613      	mov	r3, r2
 80033ce:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 80033d4:	797b      	ldrb	r3, [r7, #5]
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d80b      	bhi.n	80033f2 <wm8994_SetVolume+0x32>
 80033da:	797a      	ldrb	r2, [r7, #5]
 80033dc:	4613      	mov	r3, r2
 80033de:	019b      	lsls	r3, r3, #6
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	4a86      	ldr	r2, [pc, #536]	; (80035fc <wm8994_SetVolume+0x23c>)
 80033e4:	fb82 1203 	smull	r1, r2, r2, r3
 80033e8:	1152      	asrs	r2, r2, #5
 80033ea:	17db      	asrs	r3, r3, #31
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	e000      	b.n	80033f4 <wm8994_SetVolume+0x34>
 80033f2:	2364      	movs	r3, #100	; 0x64
 80033f4:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80033f6:	4b82      	ldr	r3, [pc, #520]	; (8003600 <wm8994_SetVolume+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 809b 	beq.w	8003536 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8003400:	7afb      	ldrb	r3, [r7, #11]
 8003402:	2b3e      	cmp	r3, #62	; 0x3e
 8003404:	d93d      	bls.n	8003482 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	2100      	movs	r1, #0
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f8fc 	bl	8003608 <wm8994_SetMute>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4413      	add	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f240 127f 	movw	r2, #383	; 0x17f
 8003420:	211c      	movs	r1, #28
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fb56 	bl	8003ad4 <CODEC_IO_Write>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f240 127f 	movw	r2, #383	; 0x17f
 800343a:	211d      	movs	r1, #29
 800343c:	4618      	mov	r0, r3
 800343e:	f000 fb49 	bl	8003ad4 <CODEC_IO_Write>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4413      	add	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f240 127f 	movw	r2, #383	; 0x17f
 8003454:	2126      	movs	r1, #38	; 0x26
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fb3c 	bl	8003ad4 <CODEC_IO_Write>
 800345c:	4603      	mov	r3, r0
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4413      	add	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f240 127f 	movw	r2, #383	; 0x17f
 800346e:	2127      	movs	r1, #39	; 0x27
 8003470:	4618      	mov	r0, r3
 8003472:	f000 fb2f 	bl	8003ad4 <CODEC_IO_Write>
 8003476:	4603      	mov	r3, r0
 8003478:	461a      	mov	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e059      	b.n	8003536 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8003482:	797b      	ldrb	r3, [r7, #5]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d109      	bne.n	800349c <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	2101      	movs	r1, #1
 800348c:	4618      	mov	r0, r3
 800348e:	f000 f8bb 	bl	8003608 <wm8994_SetMute>
 8003492:	4602      	mov	r2, r0
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4413      	add	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e04c      	b.n	8003536 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 f8b1 	bl	8003608 <wm8994_SetMute>
 80034a6:	4602      	mov	r2, r0
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4413      	add	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	b2d8      	uxtb	r0, r3
 80034b2:	7afb      	ldrb	r3, [r7, #11]
 80034b4:	b21b      	sxth	r3, r3
 80034b6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80034ba:	b21b      	sxth	r3, r3
 80034bc:	b29b      	uxth	r3, r3
 80034be:	461a      	mov	r2, r3
 80034c0:	211c      	movs	r1, #28
 80034c2:	f000 fb07 	bl	8003ad4 <CODEC_IO_Write>
 80034c6:	4603      	mov	r3, r0
 80034c8:	461a      	mov	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4413      	add	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	b2d8      	uxtb	r0, r3
 80034d4:	7afb      	ldrb	r3, [r7, #11]
 80034d6:	b21b      	sxth	r3, r3
 80034d8:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80034dc:	b21b      	sxth	r3, r3
 80034de:	b29b      	uxth	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	211d      	movs	r1, #29
 80034e4:	f000 faf6 	bl	8003ad4 <CODEC_IO_Write>
 80034e8:	4603      	mov	r3, r0
 80034ea:	461a      	mov	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	b2d8      	uxtb	r0, r3
 80034f6:	7afb      	ldrb	r3, [r7, #11]
 80034f8:	b21b      	sxth	r3, r3
 80034fa:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80034fe:	b21b      	sxth	r3, r3
 8003500:	b29b      	uxth	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	2126      	movs	r1, #38	; 0x26
 8003506:	f000 fae5 	bl	8003ad4 <CODEC_IO_Write>
 800350a:	4603      	mov	r3, r0
 800350c:	461a      	mov	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4413      	add	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	b2d8      	uxtb	r0, r3
 8003518:	7afb      	ldrb	r3, [r7, #11]
 800351a:	b21b      	sxth	r3, r3
 800351c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003520:	b21b      	sxth	r3, r3
 8003522:	b29b      	uxth	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	2127      	movs	r1, #39	; 0x27
 8003528:	f000 fad4 	bl	8003ad4 <CODEC_IO_Write>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8003536:	4b33      	ldr	r3, [pc, #204]	; (8003604 <wm8994_SetVolume+0x244>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d059      	beq.n	80035f2 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800353e:	797b      	ldrb	r3, [r7, #5]
 8003540:	2b63      	cmp	r3, #99	; 0x63
 8003542:	d80c      	bhi.n	800355e <wm8994_SetVolume+0x19e>
 8003544:	797a      	ldrb	r2, [r7, #5]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	4a2b      	ldr	r2, [pc, #172]	; (80035fc <wm8994_SetVolume+0x23c>)
 8003550:	fb82 1203 	smull	r1, r2, r2, r3
 8003554:	1152      	asrs	r2, r2, #5
 8003556:	17db      	asrs	r3, r3, #31
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e000      	b.n	8003560 <wm8994_SetVolume+0x1a0>
 800355e:	23ef      	movs	r3, #239	; 0xef
 8003560:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8003562:	88fb      	ldrh	r3, [r7, #6]
 8003564:	b2d8      	uxtb	r0, r3
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	b21b      	sxth	r3, r3
 800356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800356e:	b21b      	sxth	r3, r3
 8003570:	b29b      	uxth	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003578:	f000 faac 	bl	8003ad4 <CODEC_IO_Write>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	b2d8      	uxtb	r0, r3
 800358a:	7afb      	ldrb	r3, [r7, #11]
 800358c:	b21b      	sxth	r3, r3
 800358e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003592:	b21b      	sxth	r3, r3
 8003594:	b29b      	uxth	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	f240 4101 	movw	r1, #1025	; 0x401
 800359c:	f000 fa9a 	bl	8003ad4 <CODEC_IO_Write>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4413      	add	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	b2d8      	uxtb	r0, r3
 80035ae:	7afb      	ldrb	r3, [r7, #11]
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b6:	b21b      	sxth	r3, r3
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	461a      	mov	r2, r3
 80035bc:	f240 4104 	movw	r1, #1028	; 0x404
 80035c0:	f000 fa88 	bl	8003ad4 <CODEC_IO_Write>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	b2d8      	uxtb	r0, r3
 80035d2:	7afb      	ldrb	r3, [r7, #11]
 80035d4:	b21b      	sxth	r3, r3
 80035d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035da:	b21b      	sxth	r3, r3
 80035dc:	b29b      	uxth	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	f240 4105 	movw	r1, #1029	; 0x405
 80035e4:	f000 fa76 	bl	8003ad4 <CODEC_IO_Write>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4413      	add	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 80035f2:	68fb      	ldr	r3, [r7, #12]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	51eb851f 	.word	0x51eb851f
 8003600:	20006fc4 	.word	0x20006fc4
 8003604:	20006fc8 	.word	0x20006fc8

08003608 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	6039      	str	r1, [r7, #0]
 8003612:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <wm8994_SetMute+0x98>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d039      	beq.n	8003694 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d11c      	bne.n	8003660 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800362e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fa4e 	bl	8003ad4 <CODEC_IO_Write>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4413      	add	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8003642:	88fb      	ldrh	r3, [r7, #6]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800364a:	f240 4122 	movw	r1, #1058	; 0x422
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fa40 	bl	8003ad4 <CODEC_IO_Write>
 8003654:	4603      	mov	r3, r0
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4413      	add	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	e019      	b.n	8003694 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2210      	movs	r2, #16
 8003666:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800366a:	4618      	mov	r0, r3
 800366c:	f000 fa32 	bl	8003ad4 <CODEC_IO_Write>
 8003670:	4603      	mov	r3, r0
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2210      	movs	r2, #16
 8003680:	f240 4122 	movw	r1, #1058	; 0x422
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fa25 	bl	8003ad4 <CODEC_IO_Write>
 800368a:	4603      	mov	r3, r0
 800368c:	461a      	mov	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4413      	add	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8003694:	68fb      	ldr	r3, [r7, #12]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20006fc4 	.word	0x20006fc4

080036a4 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	4603      	mov	r3, r0
 80036ac:	460a      	mov	r2, r1
 80036ae:	80fb      	strh	r3, [r7, #6]
 80036b0:	4613      	mov	r3, r2
 80036b2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80036b4:	2300      	movs	r3, #0
 80036b6:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80036b8:	797b      	ldrb	r3, [r7, #5]
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	f000 808c 	beq.w	80037d8 <wm8994_SetOutputMode+0x134>
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	f300 80cb 	bgt.w	800385c <wm8994_SetOutputMode+0x1b8>
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d002      	beq.n	80036d0 <wm8994_SetOutputMode+0x2c>
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d042      	beq.n	8003754 <wm8994_SetOutputMode+0xb0>
 80036ce:	e0c5      	b.n	800385c <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f640 420c 	movw	r2, #3084	; 0xc0c
 80036d8:	2105      	movs	r1, #5
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f9fa 	bl	8003ad4 <CODEC_IO_Write>
 80036e0:	4603      	mov	r3, r0
 80036e2:	461a      	mov	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2200      	movs	r2, #0
 80036f0:	f240 6101 	movw	r1, #1537	; 0x601
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 f9ed 	bl	8003ad4 <CODEC_IO_Write>
 80036fa:	4603      	mov	r3, r0
 80036fc:	461a      	mov	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4413      	add	r3, r2
 8003702:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2200      	movs	r2, #0
 800370a:	f240 6102 	movw	r1, #1538	; 0x602
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f9e0 	bl	8003ad4 <CODEC_IO_Write>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2202      	movs	r2, #2
 8003724:	f240 6104 	movw	r1, #1540	; 0x604
 8003728:	4618      	mov	r0, r3
 800372a:	f000 f9d3 	bl	8003ad4 <CODEC_IO_Write>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4413      	add	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2202      	movs	r2, #2
 800373e:	f240 6105 	movw	r1, #1541	; 0x605
 8003742:	4618      	mov	r0, r3
 8003744:	f000 f9c6 	bl	8003ad4 <CODEC_IO_Write>
 8003748:	4603      	mov	r3, r0
 800374a:	461a      	mov	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4413      	add	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]
    break;
 8003752:	e0c5      	b.n	80038e0 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	b2db      	uxtb	r3, r3
 8003758:	f240 3203 	movw	r2, #771	; 0x303
 800375c:	2105      	movs	r1, #5
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f9b8 	bl	8003ad4 <CODEC_IO_Write>
 8003764:	4603      	mov	r3, r0
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2201      	movs	r2, #1
 8003774:	f240 6101 	movw	r1, #1537	; 0x601
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f9ab 	bl	8003ad4 <CODEC_IO_Write>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4413      	add	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003788:	88fb      	ldrh	r3, [r7, #6]
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2201      	movs	r2, #1
 800378e:	f240 6102 	movw	r1, #1538	; 0x602
 8003792:	4618      	mov	r0, r3
 8003794:	f000 f99e 	bl	8003ad4 <CODEC_IO_Write>
 8003798:	4603      	mov	r3, r0
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2200      	movs	r2, #0
 80037a8:	f240 6104 	movw	r1, #1540	; 0x604
 80037ac:	4618      	mov	r0, r3
 80037ae:	f000 f991 	bl	8003ad4 <CODEC_IO_Write>
 80037b2:	4603      	mov	r3, r0
 80037b4:	461a      	mov	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80037bc:	88fb      	ldrh	r3, [r7, #6]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2200      	movs	r2, #0
 80037c2:	f240 6105 	movw	r1, #1541	; 0x605
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f984 	bl	8003ad4 <CODEC_IO_Write>
 80037cc:	4603      	mov	r3, r0
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
    break;
 80037d6:	e083      	b.n	80038e0 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80037d8:	88fb      	ldrh	r3, [r7, #6]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f640 720f 	movw	r2, #3855	; 0xf0f
 80037e0:	2105      	movs	r1, #5
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f976 	bl	8003ad4 <CODEC_IO_Write>
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4413      	add	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2201      	movs	r2, #1
 80037f8:	f240 6101 	movw	r1, #1537	; 0x601
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 f969 	bl	8003ad4 <CODEC_IO_Write>
 8003802:	4603      	mov	r3, r0
 8003804:	461a      	mov	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2201      	movs	r2, #1
 8003812:	f240 6102 	movw	r1, #1538	; 0x602
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f95c 	bl	8003ad4 <CODEC_IO_Write>
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	4413      	add	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2202      	movs	r2, #2
 800382c:	f240 6104 	movw	r1, #1540	; 0x604
 8003830:	4618      	mov	r0, r3
 8003832:	f000 f94f 	bl	8003ad4 <CODEC_IO_Write>
 8003836:	4603      	mov	r3, r0
 8003838:	461a      	mov	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4413      	add	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	2202      	movs	r2, #2
 8003846:	f240 6105 	movw	r1, #1541	; 0x605
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f942 	bl	8003ad4 <CODEC_IO_Write>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
    break;
 800385a:	e041      	b.n	80038e0 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800385c:	88fb      	ldrh	r3, [r7, #6]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f240 3203 	movw	r2, #771	; 0x303
 8003864:	2105      	movs	r1, #5
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f934 	bl	8003ad4 <CODEC_IO_Write>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4413      	add	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2201      	movs	r2, #1
 800387c:	f240 6101 	movw	r1, #1537	; 0x601
 8003880:	4618      	mov	r0, r3
 8003882:	f000 f927 	bl	8003ad4 <CODEC_IO_Write>
 8003886:	4603      	mov	r3, r0
 8003888:	461a      	mov	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4413      	add	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003890:	88fb      	ldrh	r3, [r7, #6]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2201      	movs	r2, #1
 8003896:	f240 6102 	movw	r1, #1538	; 0x602
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f91a 	bl	8003ad4 <CODEC_IO_Write>
 80038a0:	4603      	mov	r3, r0
 80038a2:	461a      	mov	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2200      	movs	r2, #0
 80038b0:	f240 6104 	movw	r1, #1540	; 0x604
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f90d 	bl	8003ad4 <CODEC_IO_Write>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4413      	add	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2200      	movs	r2, #0
 80038ca:	f240 6105 	movw	r1, #1541	; 0x605
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f900 	bl	8003ad4 <CODEC_IO_Write>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4413      	add	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]
    break;    
 80038de:	bf00      	nop
  }  
  return counter;
 80038e0:	68fb      	ldr	r3, [r7, #12]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	4a64      	ldr	r2, [pc, #400]	; (8003a90 <wm8994_SetFrequency+0x1a4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d079      	beq.n	80039f8 <wm8994_SetFrequency+0x10c>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4a62      	ldr	r2, [pc, #392]	; (8003a90 <wm8994_SetFrequency+0x1a4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	f200 80ad 	bhi.w	8003a68 <wm8994_SetFrequency+0x17c>
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8003914:	4293      	cmp	r3, r2
 8003916:	d061      	beq.n	80039dc <wm8994_SetFrequency+0xf0>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800391e:	4293      	cmp	r3, r2
 8003920:	f200 80a2 	bhi.w	8003a68 <wm8994_SetFrequency+0x17c>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	f64a 4244 	movw	r2, #44100	; 0xac44
 800392a:	4293      	cmp	r3, r2
 800392c:	f000 808e 	beq.w	8003a4c <wm8994_SetFrequency+0x160>
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f64a 4244 	movw	r2, #44100	; 0xac44
 8003936:	4293      	cmp	r3, r2
 8003938:	f200 8096 	bhi.w	8003a68 <wm8994_SetFrequency+0x17c>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8003942:	d03d      	beq.n	80039c0 <wm8994_SetFrequency+0xd4>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800394a:	f200 808d 	bhi.w	8003a68 <wm8994_SetFrequency+0x17c>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f245 6222 	movw	r2, #22050	; 0x5622
 8003954:	4293      	cmp	r3, r2
 8003956:	d06b      	beq.n	8003a30 <wm8994_SetFrequency+0x144>
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	f245 6222 	movw	r2, #22050	; 0x5622
 800395e:	4293      	cmp	r3, r2
 8003960:	f200 8082 	bhi.w	8003a68 <wm8994_SetFrequency+0x17c>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800396a:	d01b      	beq.n	80039a4 <wm8994_SetFrequency+0xb8>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003972:	d879      	bhi.n	8003a68 <wm8994_SetFrequency+0x17c>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800397a:	d005      	beq.n	8003988 <wm8994_SetFrequency+0x9c>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	f642 3211 	movw	r2, #11025	; 0x2b11
 8003982:	4293      	cmp	r3, r2
 8003984:	d046      	beq.n	8003a14 <wm8994_SetFrequency+0x128>
 8003986:	e06f      	b.n	8003a68 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2203      	movs	r2, #3
 800398e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f89e 	bl	8003ad4 <CODEC_IO_Write>
 8003998:	4603      	mov	r3, r0
 800399a:	461a      	mov	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
    break;
 80039a2:	e06f      	b.n	8003a84 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2233      	movs	r2, #51	; 0x33
 80039aa:	f44f 7104 	mov.w	r1, #528	; 0x210
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f890 	bl	8003ad4 <CODEC_IO_Write>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
    break;
 80039be:	e061      	b.n	8003a84 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80039c0:	88fb      	ldrh	r3, [r7, #6]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2263      	movs	r2, #99	; 0x63
 80039c6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f882 	bl	8003ad4 <CODEC_IO_Write>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461a      	mov	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
    break;
 80039da:	e053      	b.n	8003a84 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2283      	movs	r2, #131	; 0x83
 80039e2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f874 	bl	8003ad4 <CODEC_IO_Write>
 80039ec:	4603      	mov	r3, r0
 80039ee:	461a      	mov	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
    break;
 80039f6:	e045      	b.n	8003a84 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	22a3      	movs	r2, #163	; 0xa3
 80039fe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 f866 	bl	8003ad4 <CODEC_IO_Write>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4413      	add	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
    break;
 8003a12:	e037      	b.n	8003a84 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2213      	movs	r2, #19
 8003a1a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f858 	bl	8003ad4 <CODEC_IO_Write>
 8003a24:	4603      	mov	r3, r0
 8003a26:	461a      	mov	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
    break;
 8003a2e:	e029      	b.n	8003a84 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2243      	movs	r2, #67	; 0x43
 8003a36:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f84a 	bl	8003ad4 <CODEC_IO_Write>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
    break;
 8003a4a:	e01b      	b.n	8003a84 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2273      	movs	r2, #115	; 0x73
 8003a52:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a56:	4618      	mov	r0, r3
 8003a58:	f000 f83c 	bl	8003ad4 <CODEC_IO_Write>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
    break; 
 8003a66:	e00d      	b.n	8003a84 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2283      	movs	r2, #131	; 0x83
 8003a6e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 f82e 	bl	8003ad4 <CODEC_IO_Write>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4413      	add	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
    break; 
 8003a82:	bf00      	nop
  }
  return counter;
 8003a84:	68fb      	ldr	r3, [r7, #12]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	00017700 	.word	0x00017700

08003a94 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f812 	bl	8003ad4 <CODEC_IO_Write>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <wm8994_Reset+0x38>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <wm8994_Reset+0x3c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

  return counter;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20006fc4 	.word	0x20006fc4
 8003ad0:	20006fc8 	.word	0x20006fc8

08003ad4 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	80bb      	strh	r3, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	88b9      	ldrh	r1, [r7, #4]
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 f904 	bl	8003cfe <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	b2db      	uxtb	r3, r3
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <I2Cx_MspInit>:
/**
  * @brief  Initializes I2C MSP.
  * @retval None
  */
static void I2Cx_MspInit(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  EVAL_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003b0a:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0e:	4a28      	ldr	r2, [pc, #160]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b10:	f043 0302 	orr.w	r3, r3, #2
 8003b14:	6313      	str	r3, [r2, #48]	; 0x30
 8003b16:	4b26      	ldr	r3, [pc, #152]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = EVAL_I2Cx_SCL_PIN;
 8003b22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b26:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003b28:	2312      	movs	r3, #18
 8003b2a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b30:	2302      	movs	r3, #2
 8003b32:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = EVAL_I2Cx_SCL_SDA_AF;
 8003b34:	2304      	movs	r3, #4
 8003b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b38:	f107 030c 	add.w	r3, r7, #12
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	481d      	ldr	r0, [pc, #116]	; (8003bb4 <I2Cx_MspInit+0xb0>)
 8003b40:	f001 ff3a 	bl	80059b8 <HAL_GPIO_Init>
  
  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = EVAL_I2Cx_SDA_PIN;
 8003b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b48:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003b4a:	f107 030c 	add.w	r3, r7, #12
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4818      	ldr	r0, [pc, #96]	; (8003bb4 <I2Cx_MspInit+0xb0>)
 8003b52:	f001 ff31 	bl	80059b8 <HAL_GPIO_Init>
  
  /*** Configure the I2C peripheral ***/ 
  /* Enable I2C clock */
  EVAL_I2Cx_CLK_ENABLE();
 8003b56:	4b16      	ldr	r3, [pc, #88]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b60:	6413      	str	r3, [r2, #64]	; 0x40
 8003b62:	4b13      	ldr	r3, [pc, #76]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b6a:	607b      	str	r3, [r7, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
  
  /* Force the I2C peripheral clock reset */  
  EVAL_I2Cx_FORCE_RESET(); 
 8003b6e:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	4a0f      	ldr	r2, [pc, #60]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b78:	6213      	str	r3, [r2, #32]
  
  /* Release the I2C peripheral clock reset */  
  EVAL_I2Cx_RELEASE_RESET(); 
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	; (8003bb0 <I2Cx_MspInit+0xac>)
 8003b80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b84:	6213      	str	r3, [r2, #32]
  
  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(EVAL_I2Cx_EV_IRQn, 0x0F, 0);
 8003b86:	2200      	movs	r2, #0
 8003b88:	210f      	movs	r1, #15
 8003b8a:	201f      	movs	r0, #31
 8003b8c:	f000 fcff 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EVAL_I2Cx_EV_IRQn);
 8003b90:	201f      	movs	r0, #31
 8003b92:	f000 fd18 	bl	80045c6 <HAL_NVIC_EnableIRQ>
  
  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(EVAL_I2Cx_ER_IRQn, 0x0F, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	210f      	movs	r1, #15
 8003b9a:	2020      	movs	r0, #32
 8003b9c:	f000 fcf7 	bl	800458e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EVAL_I2Cx_ER_IRQn);
 8003ba0:	2020      	movs	r0, #32
 8003ba2:	f000 fd10 	bl	80045c6 <HAL_NVIC_EnableIRQ>
}
 8003ba6:	bf00      	nop
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	40020400 	.word	0x40020400

08003bb8 <I2Cx_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval None
  */
static void I2Cx_Init(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&hEvalI2c) == HAL_I2C_STATE_RESET)
 8003bbc:	4812      	ldr	r0, [pc, #72]	; (8003c08 <I2Cx_Init+0x50>)
 8003bbe:	f002 fbf5 	bl	80063ac <HAL_I2C_GetState>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d11c      	bne.n	8003c02 <I2Cx_Init+0x4a>
  {
    hEvalI2c.Instance              = EVAL_I2Cx;
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <I2Cx_Init+0x50>)
 8003bca:	4a10      	ldr	r2, [pc, #64]	; (8003c0c <I2Cx_Init+0x54>)
 8003bcc:	601a      	str	r2, [r3, #0]
    hEvalI2c.Init.Timing           = EVAL_I2Cx_TIMING;
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <I2Cx_Init+0x50>)
 8003bd0:	4a0f      	ldr	r2, [pc, #60]	; (8003c10 <I2Cx_Init+0x58>)
 8003bd2:	605a      	str	r2, [r3, #4]
    hEvalI2c.Init.OwnAddress1      = 0;
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <I2Cx_Init+0x50>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
    hEvalI2c.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003bda:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <I2Cx_Init+0x50>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	60da      	str	r2, [r3, #12]
    hEvalI2c.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <I2Cx_Init+0x50>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	611a      	str	r2, [r3, #16]
    hEvalI2c.Init.OwnAddress2      = 0;
 8003be6:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <I2Cx_Init+0x50>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	615a      	str	r2, [r3, #20]
    hEvalI2c.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <I2Cx_Init+0x50>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61da      	str	r2, [r3, #28]
    hEvalI2c.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <I2Cx_Init+0x50>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit();
 8003bf8:	f7ff ff84 	bl	8003b04 <I2Cx_MspInit>
    HAL_I2C_Init(&hEvalI2c);    
 8003bfc:	4802      	ldr	r0, [pc, #8]	; (8003c08 <I2Cx_Init+0x50>)
 8003bfe:	f002 f8d3 	bl	8005da8 <HAL_I2C_Init>
  }
}
 8003c02:	bf00      	nop
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20006fcc 	.word	0x20006fcc
 8003c0c:	40005400 	.word	0x40005400
 8003c10:	40912732 	.word	0x40912732

08003c14 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af04      	add	r7, sp, #16
 8003c1a:	607b      	str	r3, [r7, #4]
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	73fb      	strb	r3, [r7, #15]
 8003c20:	460b      	mov	r3, r1
 8003c22:	81bb      	strh	r3, [r7, #12]
 8003c24:	4613      	mov	r3, r2
 8003c26:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Read(&hEvalI2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	b299      	uxth	r1, r3
 8003c30:	8978      	ldrh	r0, [r7, #10]
 8003c32:	89ba      	ldrh	r2, [r7, #12]
 8003c34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c38:	9302      	str	r3, [sp, #8]
 8003c3a:	8c3b      	ldrh	r3, [r7, #32]
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	4603      	mov	r3, r0
 8003c44:	4808      	ldr	r0, [pc, #32]	; (8003c68 <I2Cx_ReadMultiple+0x54>)
 8003c46:	f002 fa97 	bl	8006178 <HAL_I2C_Mem_Read>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <I2Cx_ReadMultiple+0x48>
  {
    /* I2C error occurred */
    I2Cx_Error(Addr);
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 f834 	bl	8003cc4 <I2Cx_Error>
  }
  return status;    
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20006fcc 	.word	0x20006fcc

08003c6c <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written 
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08a      	sub	sp, #40	; 0x28
 8003c70:	af04      	add	r7, sp, #16
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	4603      	mov	r3, r0
 8003c76:	73fb      	strb	r3, [r7, #15]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	81bb      	strh	r3, [r7, #12]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(&hEvalI2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
 8003c86:	b299      	uxth	r1, r3
 8003c88:	8978      	ldrh	r0, [r7, #10]
 8003c8a:	89ba      	ldrh	r2, [r7, #12]
 8003c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c90:	9302      	str	r3, [sp, #8]
 8003c92:	8c3b      	ldrh	r3, [r7, #32]
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	4808      	ldr	r0, [pc, #32]	; (8003cc0 <I2Cx_WriteMultiple+0x54>)
 8003c9e:	f002 f957 	bl	8005f50 <HAL_I2C_Mem_Write>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <I2Cx_WriteMultiple+0x48>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(Addr);
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 f808 	bl	8003cc4 <I2Cx_Error>
  }
  return status;
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20006fcc 	.word	0x20006fcc

08003cc4 <I2Cx_Error>:
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(uint8_t Addr)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&hEvalI2c);
 8003cce:	4804      	ldr	r0, [pc, #16]	; (8003ce0 <I2Cx_Error+0x1c>)
 8003cd0:	f002 f8fa 	bl	8005ec8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 8003cd4:	f7ff ff70 	bl	8003bb8 <I2Cx_Init>
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	20006fcc 	.word	0x20006fcc

08003ce4 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003ce8:	f7ff ff66 	bl	8003bb8 <I2Cx_Init>
}
 8003cec:	bf00      	nop
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af02      	add	r7, sp, #8
 8003d04:	4603      	mov	r3, r0
 8003d06:	71fb      	strb	r3, [r7, #7]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	80bb      	strh	r3, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8003d10:	887b      	ldrh	r3, [r7, #2]
 8003d12:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8003d14:	89fb      	ldrh	r3, [r7, #14]
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8003d1c:	89fb      	ldrh	r3, [r7, #14]
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	b21a      	sxth	r2, r3
 8003d24:	887b      	ldrh	r3, [r7, #2]
 8003d26:	b21b      	sxth	r3, r3
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	b21b      	sxth	r3, r3
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8003d30:	1cbb      	adds	r3, r7, #2
 8003d32:	88b9      	ldrh	r1, [r7, #4]
 8003d34:	79f8      	ldrb	r0, [r7, #7]
 8003d36:	2202      	movs	r2, #2
 8003d38:	9200      	str	r2, [sp, #0]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f7ff ff96 	bl	8003c6c <I2Cx_WriteMultiple>
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	4603      	mov	r3, r0
 8003d50:	460a      	mov	r2, r1
 8003d52:	71fb      	strb	r3, [r7, #7]
 8003d54:	4613      	mov	r3, r2
 8003d56:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	81bb      	strh	r3, [r7, #12]
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2); 
 8003d60:	f107 030c 	add.w	r3, r7, #12
 8003d64:	88b9      	ldrh	r1, [r7, #4]
 8003d66:	79f8      	ldrb	r0, [r7, #7]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	9200      	str	r2, [sp, #0]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f7ff ff51 	bl	8003c14 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8003d72:	89bb      	ldrh	r3, [r7, #12]
 8003d74:	0a1b      	lsrs	r3, r3, #8
 8003d76:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003d78:	89bb      	ldrh	r3, [r7, #12]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	b21a      	sxth	r2, r3
 8003d80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	b21b      	sxth	r3, r3
 8003d88:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003d8a:	89fb      	ldrh	r3, [r7, #14]
 8003d8c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8003d8e:	89bb      	ldrh	r3, [r7, #12]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 f861 	bl	8003e68 <HAL_Delay>
}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003db2:	2003      	movs	r0, #3
 8003db4:	f000 fbe0 	bl	8004578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003db8:	2000      	movs	r0, #0
 8003dba:	f000 f805 	bl	8003dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dbe:	f7fd fc77 	bl	80016b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dd0:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <HAL_InitTick+0x54>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <HAL_InitTick+0x58>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8003de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fbfb 	bl	80045e2 <HAL_SYSTICK_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e00e      	b.n	8003e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b0f      	cmp	r3, #15
 8003dfa:	d80a      	bhi.n	8003e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e04:	f000 fbc3 	bl	800458e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e08:	4a06      	ldr	r2, [pc, #24]	; (8003e24 <HAL_InitTick+0x5c>)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	20000000 	.word	0x20000000
 8003e20:	2000003c 	.word	0x2000003c
 8003e24:	20000038 	.word	0x20000038

08003e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e2c:	4b06      	ldr	r3, [pc, #24]	; (8003e48 <HAL_IncTick+0x20>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	461a      	mov	r2, r3
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_IncTick+0x24>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4413      	add	r3, r2
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <HAL_IncTick+0x24>)
 8003e3a:	6013      	str	r3, [r2, #0]
}
 8003e3c:	bf00      	nop
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	2000003c 	.word	0x2000003c
 8003e4c:	20007020 	.word	0x20007020

08003e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  return uwTick;
 8003e54:	4b03      	ldr	r3, [pc, #12]	; (8003e64 <HAL_GetTick+0x14>)
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	20007020 	.word	0x20007020

08003e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e70:	f7ff ffee 	bl	8003e50 <HAL_GetTick>
 8003e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e80:	d005      	beq.n	8003e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e82:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <HAL_Delay+0x44>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e8e:	bf00      	nop
 8003e90:	f7ff ffde 	bl	8003e50 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d8f7      	bhi.n	8003e90 <HAL_Delay+0x28>
  {
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	bf00      	nop
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	2000003c 	.word	0x2000003c

08003eb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e031      	b.n	8003f2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fd fc12 	bl	80016f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 0310 	and.w	r3, r3, #16
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d116      	bne.n	8003f1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <HAL_ADC_Init+0x84>)
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	f043 0202 	orr.w	r2, r3, #2
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f970 	bl	80041e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f023 0303 	bic.w	r3, r3, #3
 8003f12:	f043 0201 	orr.w	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	641a      	str	r2, [r3, #64]	; 0x40
 8003f1a:	e001      	b.n	8003f20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	ffffeefd 	.word	0xffffeefd

08003f38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x1c>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e136      	b.n	80041c2 <HAL_ADC_ConfigChannel+0x28a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	d93a      	bls.n	8003fda <HAL_ADC_ConfigChannel+0xa2>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f6c:	d035      	beq.n	8003fda <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68d9      	ldr	r1, [r3, #12]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	3b1e      	subs	r3, #30
 8003f84:	2207      	movs	r2, #7
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43da      	mvns	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	400a      	ands	r2, r1
 8003f92:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a8d      	ldr	r2, [pc, #564]	; (80041d0 <HAL_ADC_ConfigChannel+0x298>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68d9      	ldr	r1, [r3, #12]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	061a      	lsls	r2, r3, #24
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fb2:	e035      	b.n	8004020 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68d9      	ldr	r1, [r3, #12]
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4403      	add	r3, r0
 8003fcc:	3b1e      	subs	r3, #30
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003fd8:	e022      	b.n	8004020 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6919      	ldr	r1, [r3, #16]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	2207      	movs	r2, #7
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43da      	mvns	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	6919      	ldr	r1, [r3, #16]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	b29b      	uxth	r3, r3
 800400e:	4618      	mov	r0, r3
 8004010:	4603      	mov	r3, r0
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4403      	add	r3, r0
 8004016:	409a      	lsls	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b06      	cmp	r3, #6
 8004026:	d824      	bhi.n	8004072 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	3b05      	subs	r3, #5
 800403a:	221f      	movs	r2, #31
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43da      	mvns	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	400a      	ands	r2, r1
 8004048:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	4618      	mov	r0, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	3b05      	subs	r3, #5
 8004064:	fa00 f203 	lsl.w	r2, r0, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	635a      	str	r2, [r3, #52]	; 0x34
 8004070:	e04c      	b.n	800410c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d824      	bhi.n	80040c4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	3b23      	subs	r3, #35	; 0x23
 800408c:	221f      	movs	r2, #31
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43da      	mvns	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	400a      	ands	r2, r1
 800409a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	4618      	mov	r0, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	3b23      	subs	r3, #35	; 0x23
 80040b6:	fa00 f203 	lsl.w	r2, r0, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
 80040c2:	e023      	b.n	800410c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	3b41      	subs	r3, #65	; 0x41
 80040d6:	221f      	movs	r2, #31
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43da      	mvns	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	400a      	ands	r2, r1
 80040e4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	3b41      	subs	r3, #65	; 0x41
 8004100:	fa00 f203 	lsl.w	r2, r0, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a30      	ldr	r2, [pc, #192]	; (80041d4 <HAL_ADC_ConfigChannel+0x29c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10a      	bne.n	800412c <HAL_ADC_ConfigChannel+0x1f4>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800411e:	d105      	bne.n	800412c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004120:	4b2d      	ldr	r3, [pc, #180]	; (80041d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	4a2c      	ldr	r2, [pc, #176]	; (80041d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004126:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800412a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a28      	ldr	r2, [pc, #160]	; (80041d4 <HAL_ADC_ConfigChannel+0x29c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d10f      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x21e>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2b12      	cmp	r3, #18
 800413c:	d10b      	bne.n	8004156 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800413e:	4b26      	ldr	r3, [pc, #152]	; (80041d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4a25      	ldr	r2, [pc, #148]	; (80041d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004144:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004148:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800414a:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <HAL_ADC_ConfigChannel+0x2a0>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004150:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004154:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a1e      	ldr	r2, [pc, #120]	; (80041d4 <HAL_ADC_ConfigChannel+0x29c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d12b      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x280>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a1a      	ldr	r2, [pc, #104]	; (80041d0 <HAL_ADC_ConfigChannel+0x298>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <HAL_ADC_ConfigChannel+0x23a>
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b11      	cmp	r3, #17
 8004170:	d122      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004172:	4b19      	ldr	r3, [pc, #100]	; (80041d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4a18      	ldr	r2, [pc, #96]	; (80041d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004178:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800417c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800417e:	4b16      	ldr	r3, [pc, #88]	; (80041d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <HAL_ADC_ConfigChannel+0x2a0>)
 8004184:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004188:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a10      	ldr	r2, [pc, #64]	; (80041d0 <HAL_ADC_ConfigChannel+0x298>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d111      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004194:	4b11      	ldr	r3, [pc, #68]	; (80041dc <HAL_ADC_ConfigChannel+0x2a4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a11      	ldr	r2, [pc, #68]	; (80041e0 <HAL_ADC_ConfigChannel+0x2a8>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0c9a      	lsrs	r2, r3, #18
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80041aa:	e002      	b.n	80041b2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f9      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3714      	adds	r7, #20
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	10000012 	.word	0x10000012
 80041d4:	40012000 	.word	0x40012000
 80041d8:	40012300 	.word	0x40012300
 80041dc:	20000000 	.word	0x20000000
 80041e0:	431bde83 	.word	0x431bde83

080041e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80041ec:	4b78      	ldr	r3, [pc, #480]	; (80043d0 <ADC_Init+0x1ec>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	4a77      	ldr	r2, [pc, #476]	; (80043d0 <ADC_Init+0x1ec>)
 80041f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80041f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80041f8:	4b75      	ldr	r3, [pc, #468]	; (80043d0 <ADC_Init+0x1ec>)
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4973      	ldr	r1, [pc, #460]	; (80043d0 <ADC_Init+0x1ec>)
 8004202:	4313      	orrs	r3, r2
 8004204:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	6859      	ldr	r1, [r3, #4]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	021a      	lsls	r2, r3, #8
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004238:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6859      	ldr	r1, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800425a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6899      	ldr	r1, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	4a58      	ldr	r2, [pc, #352]	; (80043d4 <ADC_Init+0x1f0>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d022      	beq.n	80042be <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004286:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6899      	ldr	r1, [r3, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6899      	ldr	r1, [r3, #8]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	609a      	str	r2, [r3, #8]
 80042bc:	e00f      	b.n	80042de <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 0202 	bic.w	r2, r2, #2
 80042ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6899      	ldr	r1, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	005a      	lsls	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800431a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800432a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6859      	ldr	r1, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004336:	3b01      	subs	r3, #1
 8004338:	035a      	lsls	r2, r3, #13
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
 8004342:	e007      	b.n	8004354 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004352:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004362:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	69db      	ldr	r3, [r3, #28]
 800436e:	3b01      	subs	r3, #1
 8004370:	051a      	lsls	r2, r3, #20
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6899      	ldr	r1, [r3, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004396:	025a      	lsls	r2, r3, #9
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6899      	ldr	r1, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	029a      	lsls	r2, r3, #10
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	430a      	orrs	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40012300 	.word	0x40012300
 80043d4:	0f000001 	.word	0x0f000001

080043d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <__NVIC_SetPriorityGrouping+0x40>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043f4:	4013      	ands	r3, r2
 80043f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004400:	4b06      	ldr	r3, [pc, #24]	; (800441c <__NVIC_SetPriorityGrouping+0x44>)
 8004402:	4313      	orrs	r3, r2
 8004404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004406:	4a04      	ldr	r2, [pc, #16]	; (8004418 <__NVIC_SetPriorityGrouping+0x40>)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	60d3      	str	r3, [r2, #12]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	e000ed00 	.word	0xe000ed00
 800441c:	05fa0000 	.word	0x05fa0000

08004420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004424:	4b04      	ldr	r3, [pc, #16]	; (8004438 <__NVIC_GetPriorityGrouping+0x18>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	0a1b      	lsrs	r3, r3, #8
 800442a:	f003 0307 	and.w	r3, r3, #7
}
 800442e:	4618      	mov	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	e000ed00 	.word	0xe000ed00

0800443c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444a:	2b00      	cmp	r3, #0
 800444c:	db0b      	blt.n	8004466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	f003 021f 	and.w	r2, r3, #31
 8004454:	4907      	ldr	r1, [pc, #28]	; (8004474 <__NVIC_EnableIRQ+0x38>)
 8004456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445a:	095b      	lsrs	r3, r3, #5
 800445c:	2001      	movs	r0, #1
 800445e:	fa00 f202 	lsl.w	r2, r0, r2
 8004462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	e000e100 	.word	0xe000e100

08004478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	6039      	str	r1, [r7, #0]
 8004482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004488:	2b00      	cmp	r3, #0
 800448a:	db0a      	blt.n	80044a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	490c      	ldr	r1, [pc, #48]	; (80044c4 <__NVIC_SetPriority+0x4c>)
 8004492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004496:	0112      	lsls	r2, r2, #4
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	440b      	add	r3, r1
 800449c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044a0:	e00a      	b.n	80044b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4908      	ldr	r1, [pc, #32]	; (80044c8 <__NVIC_SetPriority+0x50>)
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	3b04      	subs	r3, #4
 80044b0:	0112      	lsls	r2, r2, #4
 80044b2:	b2d2      	uxtb	r2, r2
 80044b4:	440b      	add	r3, r1
 80044b6:	761a      	strb	r2, [r3, #24]
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr
 80044c4:	e000e100 	.word	0xe000e100
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b089      	sub	sp, #36	; 0x24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f1c3 0307 	rsb	r3, r3, #7
 80044e6:	2b04      	cmp	r3, #4
 80044e8:	bf28      	it	cs
 80044ea:	2304      	movcs	r3, #4
 80044ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3304      	adds	r3, #4
 80044f2:	2b06      	cmp	r3, #6
 80044f4:	d902      	bls.n	80044fc <NVIC_EncodePriority+0x30>
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	3b03      	subs	r3, #3
 80044fa:	e000      	b.n	80044fe <NVIC_EncodePriority+0x32>
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43da      	mvns	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	401a      	ands	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	fa01 f303 	lsl.w	r3, r1, r3
 800451e:	43d9      	mvns	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004524:	4313      	orrs	r3, r2
         );
}
 8004526:	4618      	mov	r0, r3
 8004528:	3724      	adds	r7, #36	; 0x24
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
	...

08004534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3b01      	subs	r3, #1
 8004540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004544:	d301      	bcc.n	800454a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004546:	2301      	movs	r3, #1
 8004548:	e00f      	b.n	800456a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800454a:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <SysTick_Config+0x40>)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	3b01      	subs	r3, #1
 8004550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004552:	210f      	movs	r1, #15
 8004554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004558:	f7ff ff8e 	bl	8004478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <SysTick_Config+0x40>)
 800455e:	2200      	movs	r2, #0
 8004560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004562:	4b04      	ldr	r3, [pc, #16]	; (8004574 <SysTick_Config+0x40>)
 8004564:	2207      	movs	r2, #7
 8004566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	e000e010 	.word	0xe000e010

08004578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ff29 	bl	80043d8 <__NVIC_SetPriorityGrouping>
}
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af00      	add	r7, sp, #0
 8004594:	4603      	mov	r3, r0
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800459c:	2300      	movs	r3, #0
 800459e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045a0:	f7ff ff3e 	bl	8004420 <__NVIC_GetPriorityGrouping>
 80045a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	6978      	ldr	r0, [r7, #20]
 80045ac:	f7ff ff8e 	bl	80044cc <NVIC_EncodePriority>
 80045b0:	4602      	mov	r2, r0
 80045b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff5d 	bl	8004478 <__NVIC_SetPriority>
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b082      	sub	sp, #8
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4603      	mov	r3, r0
 80045ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80045d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ff31 	bl	800443c <__NVIC_EnableIRQ>
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff ffa2 	bl	8004534 <SysTick_Config>
 80045f0:	4603      	mov	r3, r0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e0ac      	b.n	8004768 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f000 fa20 	bl	8004a58 <DFSDM_GetChannelFromInstance>
 8004618:	4603      	mov	r3, r0
 800461a:	4a55      	ldr	r2, [pc, #340]	; (8004770 <HAL_DFSDM_ChannelInit+0x174>)
 800461c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e09f      	b.n	8004768 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7fd f98d 	bl	8001948 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800462e:	4b51      	ldr	r3, [pc, #324]	; (8004774 <HAL_DFSDM_ChannelInit+0x178>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a4f      	ldr	r2, [pc, #316]	; (8004774 <HAL_DFSDM_ChannelInit+0x178>)
 8004636:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 8004638:	4b4e      	ldr	r3, [pc, #312]	; (8004774 <HAL_DFSDM_ChannelInit+0x178>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d125      	bne.n	800468c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8004640:	4b4d      	ldr	r3, [pc, #308]	; (8004778 <HAL_DFSDM_ChannelInit+0x17c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a4c      	ldr	r2, [pc, #304]	; (8004778 <HAL_DFSDM_ChannelInit+0x17c>)
 8004646:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800464a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 800464c:	4b4a      	ldr	r3, [pc, #296]	; (8004778 <HAL_DFSDM_ChannelInit+0x17c>)
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4948      	ldr	r1, [pc, #288]	; (8004778 <HAL_DFSDM_ChannelInit+0x17c>)
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800465a:	4b47      	ldr	r3, [pc, #284]	; (8004778 <HAL_DFSDM_ChannelInit+0x17c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a46      	ldr	r2, [pc, #280]	; (8004778 <HAL_DFSDM_ChannelInit+0x17c>)
 8004660:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8004664:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	791b      	ldrb	r3, [r3, #4]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d108      	bne.n	8004680 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 800466e:	4b42      	ldr	r3, [pc, #264]	; (8004778 <HAL_DFSDM_ChannelInit+0x17c>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	3b01      	subs	r3, #1
 8004678:	041b      	lsls	r3, r3, #16
 800467a:	493f      	ldr	r1, [pc, #252]	; (8004778 <HAL_DFSDM_ChannelInit+0x17c>)
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004680:	4b3d      	ldr	r3, [pc, #244]	; (8004778 <HAL_DFSDM_ChannelInit+0x17c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a3c      	ldr	r2, [pc, #240]	; (8004778 <HAL_DFSDM_ChannelInit+0x17c>)
 8004686:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800468a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800469a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6819      	ldr	r1, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80046aa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80046b0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 020f 	bic.w	r2, r2, #15
 80046c8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6819      	ldr	r1, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80046f0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6899      	ldr	r1, [r3, #8]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	3b01      	subs	r3, #1
 8004702:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f002 0207 	and.w	r2, r2, #7
 800471c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004748:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f97e 	bl	8004a58 <DFSDM_GetChannelFromInstance>
 800475c:	4602      	mov	r2, r0
 800475e:	4904      	ldr	r1, [pc, #16]	; (8004770 <HAL_DFSDM_ChannelInit+0x174>)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3708      	adds	r7, #8
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	20007028 	.word	0x20007028
 8004774:	20007024 	.word	0x20007024
 8004778:	40017400 	.word	0x40017400

0800477c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e0c6      	b.n	800491c <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a64      	ldr	r2, [pc, #400]	; (8004924 <HAL_DFSDM_FilterInit+0x1a8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d109      	bne.n	80047ac <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800479c:	2b01      	cmp	r3, #1
 800479e:	d003      	beq.n	80047a8 <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0b7      	b.n	800491c <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7fc ffd7 	bl	8001778 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80047d8:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	7a1b      	ldrb	r3, [r3, #8]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d108      	bne.n	80047f4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e007      	b.n	8004804 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004802:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	7a5b      	ldrb	r3, [r3, #9]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d108      	bne.n	800481e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e007      	b.n	800482e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800482c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	4b3b      	ldr	r3, [pc, #236]	; (8004928 <HAL_DFSDM_FilterInit+0x1ac>)
 800483a:	400b      	ands	r3, r1
 800483c:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d108      	bne.n	8004858 <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6819      	ldr	r1, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	7c1b      	ldrb	r3, [r3, #16]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d108      	bne.n	8004872 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0210 	orr.w	r2, r2, #16
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e007      	b.n	8004882 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0210 	bic.w	r2, r2, #16
 8004880:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	7c5b      	ldrb	r3, [r3, #17]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d108      	bne.n	800489c <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0220 	orr.w	r2, r2, #32
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e007      	b.n	80048ac <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0220 	bic.w	r2, r2, #32
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6959      	ldr	r1, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	4b1d      	ldr	r3, [pc, #116]	; (800492c <HAL_DFSDM_FilterInit+0x1b0>)
 80048b8:	400b      	ands	r3, r1
 80048ba:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6959      	ldr	r1, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	3b01      	subs	r3, #1
 80048cc:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80048ce:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 80048d6:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699a      	ldr	r2, [r3, #24]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	7c1a      	ldrb	r2, [r3, #16]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f042 0201 	orr.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40017500 	.word	0x40017500
 8004928:	ffff80f7 	.word	0xffff80f7
 800492c:	1c00ff00 	.word	0x1c00ff00

08004930 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d02c      	beq.n	80049a4 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8004950:	2bff      	cmp	r3, #255	; 0xff
 8004952:	d027      	beq.n	80049a4 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b16      	ldr	r3, [pc, #88]	; (80049b8 <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 8004960:	400b      	ands	r3, r1
 8004962:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d10d      	bne.n	8004986 <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	021b      	lsls	r3, r3, #8
 8004974:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004978:	431a      	orrs	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e00a      	b.n	800499c <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6819      	ldr	r1, [r3, #0]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	021b      	lsls	r3, r3, #8
 8004990:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	631a      	str	r2, [r3, #48]	; 0x30
 80049a2:	e001      	b.n	80049a8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	f8fbffff 	.word	0xf8fbffff

080049bc <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d01b      	beq.n	8004a0c <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80049da:	2bff      	cmp	r3, #255	; 0xff
 80049dc:	d016      	beq.n	8004a0c <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	b292      	uxth	r2, r2
 80049e6:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 80049e8:	6838      	ldr	r0, [r7, #0]
 80049ea:	f000 f816 	bl	8004a1a <DFSDM_GetInjChannelsNbr>
 80049ee:	4602      	mov	r2, r0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d102      	bne.n	8004a04 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	e000      	b.n	8004a06 <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 8004a04:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6493      	str	r3, [r2, #72]	; 0x48
 8004a0a:	e001      	b.n	8004a10 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b085      	sub	sp, #20
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8004a2c:	e00a      	b.n	8004a44 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	085b      	lsrs	r3, r3, #1
 8004a42:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f1      	bne.n	8004a2e <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <DFSDM_GetChannelFromInstance+0x7c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d102      	bne.n	8004a6e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60fb      	str	r3, [r7, #12]
 8004a6c:	e02b      	b.n	8004ac6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a19      	ldr	r2, [pc, #100]	; (8004ad8 <DFSDM_GetChannelFromInstance+0x80>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d102      	bne.n	8004a7c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004a76:	2301      	movs	r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	e024      	b.n	8004ac6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a17      	ldr	r2, [pc, #92]	; (8004adc <DFSDM_GetChannelFromInstance+0x84>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d102      	bne.n	8004a8a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004a84:	2302      	movs	r3, #2
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	e01d      	b.n	8004ac6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a14      	ldr	r2, [pc, #80]	; (8004ae0 <DFSDM_GetChannelFromInstance+0x88>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d102      	bne.n	8004a98 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 8004a92:	2303      	movs	r3, #3
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	e016      	b.n	8004ac6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	4a12      	ldr	r2, [pc, #72]	; (8004ae4 <DFSDM_GetChannelFromInstance+0x8c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d102      	bne.n	8004aa6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	e00f      	b.n	8004ac6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a0f      	ldr	r2, [pc, #60]	; (8004ae8 <DFSDM_GetChannelFromInstance+0x90>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d102      	bne.n	8004ab4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 8004aae:	2305      	movs	r3, #5
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e008      	b.n	8004ac6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a0d      	ldr	r2, [pc, #52]	; (8004aec <DFSDM_GetChannelFromInstance+0x94>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d102      	bne.n	8004ac2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 8004abc:	2306      	movs	r3, #6
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e001      	b.n	8004ac6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 8004ac2:	2307      	movs	r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40017400 	.word	0x40017400
 8004ad8:	40017420 	.word	0x40017420
 8004adc:	40017440 	.word	0x40017440
 8004ae0:	40017460 	.word	0x40017460
 8004ae4:	40017480 	.word	0x40017480
 8004ae8:	400174a0 	.word	0x400174a0
 8004aec:	400174c0 	.word	0x400174c0

08004af0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004afc:	f7ff f9a8 	bl	8003e50 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e099      	b.n	8004c40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b2c:	e00f      	b.n	8004b4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b2e:	f7ff f98f 	bl	8003e50 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b05      	cmp	r3, #5
 8004b3a:	d908      	bls.n	8004b4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2203      	movs	r2, #3
 8004b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e078      	b.n	8004c40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e8      	bne.n	8004b2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4b38      	ldr	r3, [pc, #224]	; (8004c48 <HAL_DMA_Init+0x158>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d107      	bne.n	8004bb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	f023 0307 	bic.w	r3, r3, #7
 8004bce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	2b04      	cmp	r3, #4
 8004be0:	d117      	bne.n	8004c12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00e      	beq.n	8004c12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 faa5 	bl	8005144 <DMA_CheckFifoParam>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d008      	beq.n	8004c12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2240      	movs	r2, #64	; 0x40
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e016      	b.n	8004c40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fa5c 	bl	80050d8 <DMA_CalcBaseAndBitshift>
 8004c20:	4603      	mov	r3, r0
 8004c22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c28:	223f      	movs	r2, #63	; 0x3f
 8004c2a:	409a      	lsls	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3718      	adds	r7, #24
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	e010803f 	.word	0xe010803f

08004c4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_DMA_Start_IT+0x26>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e048      	b.n	8004d04 <HAL_DMA_Start_IT+0xb8>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d137      	bne.n	8004cf6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f9ee 	bl	800507c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ca4:	223f      	movs	r2, #63	; 0x3f
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0216 	orr.w	r2, r2, #22
 8004cba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695a      	ldr	r2, [r3, #20]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0208 	orr.w	r2, r2, #8
 8004ce2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	e005      	b.n	8004d02 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004cfe:	2302      	movs	r3, #2
 8004d00:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d004      	beq.n	8004d2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2280      	movs	r2, #128	; 0x80
 8004d24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e00c      	b.n	8004d44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2205      	movs	r2, #5
 8004d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004d5c:	4b8e      	ldr	r3, [pc, #568]	; (8004f98 <HAL_DMA_IRQHandler+0x248>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a8e      	ldr	r2, [pc, #568]	; (8004f9c <HAL_DMA_IRQHandler+0x24c>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	0a9b      	lsrs	r3, r3, #10
 8004d68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d7a:	2208      	movs	r2, #8
 8004d7c:	409a      	lsls	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4013      	ands	r3, r2
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01a      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d013      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0204 	bic.w	r2, r2, #4
 8004da2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da8:	2208      	movs	r2, #8
 8004daa:	409a      	lsls	r2, r3
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db4:	f043 0201 	orr.w	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	409a      	lsls	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d012      	beq.n	8004df2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00b      	beq.n	8004df2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dde:	2201      	movs	r2, #1
 8004de0:	409a      	lsls	r2, r3
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	f043 0202 	orr.w	r2, r3, #2
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df6:	2204      	movs	r2, #4
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d012      	beq.n	8004e28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00b      	beq.n	8004e28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e14:	2204      	movs	r2, #4
 8004e16:	409a      	lsls	r2, r3
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e20:	f043 0204 	orr.w	r2, r3, #4
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	409a      	lsls	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4013      	ands	r3, r2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d043      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d03c      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4a:	2210      	movs	r2, #16
 8004e4c:	409a      	lsls	r2, r3
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d018      	beq.n	8004e92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d108      	bne.n	8004e80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d024      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	4798      	blx	r3
 8004e7e:	e01f      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01b      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4798      	blx	r3
 8004e90:	e016      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d107      	bne.n	8004eb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 0208 	bic.w	r2, r2, #8
 8004eae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d003      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	409a      	lsls	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 808f 	beq.w	8004ff0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8087 	beq.w	8004ff0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b05      	cmp	r3, #5
 8004ef8:	d136      	bne.n	8004f68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0216 	bic.w	r2, r2, #22
 8004f08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695a      	ldr	r2, [r3, #20]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <HAL_DMA_IRQHandler+0x1da>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0208 	bic.w	r2, r2, #8
 8004f38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3e:	223f      	movs	r2, #63	; 0x3f
 8004f40:	409a      	lsls	r2, r3
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d07e      	beq.n	800505c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	4798      	blx	r3
        }
        return;
 8004f66:	e079      	b.n	800505c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d01d      	beq.n	8004fb2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10d      	bne.n	8004fa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d031      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	4798      	blx	r3
 8004f94:	e02c      	b.n	8004ff0 <HAL_DMA_IRQHandler+0x2a0>
 8004f96:	bf00      	nop
 8004f98:	20000000 	.word	0x20000000
 8004f9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d023      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
 8004fb0:	e01e      	b.n	8004ff0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10f      	bne.n	8004fe0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0210 	bic.w	r2, r2, #16
 8004fce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d003      	beq.n	8004ff0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d032      	beq.n	800505e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d022      	beq.n	800504a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2205      	movs	r2, #5
 8005008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0201 	bic.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	3301      	adds	r3, #1
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	429a      	cmp	r2, r3
 8005026:	d307      	bcc.n	8005038 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f2      	bne.n	800501c <HAL_DMA_IRQHandler+0x2cc>
 8005036:	e000      	b.n	800503a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005038:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d005      	beq.n	800505e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	4798      	blx	r3
 800505a:	e000      	b.n	800505e <HAL_DMA_IRQHandler+0x30e>
        return;
 800505c:	bf00      	nop
    }
  }
}
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005098:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b40      	cmp	r3, #64	; 0x40
 80050a8:	d108      	bne.n	80050bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050ba:	e007      	b.n	80050cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	60da      	str	r2, [r3, #12]
}
 80050cc:	bf00      	nop
 80050ce:	3714      	adds	r7, #20
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	3b10      	subs	r3, #16
 80050e8:	4a13      	ldr	r2, [pc, #76]	; (8005138 <DMA_CalcBaseAndBitshift+0x60>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	091b      	lsrs	r3, r3, #4
 80050f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050f2:	4a12      	ldr	r2, [pc, #72]	; (800513c <DMA_CalcBaseAndBitshift+0x64>)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4413      	add	r3, r2
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b03      	cmp	r3, #3
 8005104:	d908      	bls.n	8005118 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <DMA_CalcBaseAndBitshift+0x68>)
 800510e:	4013      	ands	r3, r2
 8005110:	1d1a      	adds	r2, r3, #4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	659a      	str	r2, [r3, #88]	; 0x58
 8005116:	e006      	b.n	8005126 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	461a      	mov	r2, r3
 800511e:	4b08      	ldr	r3, [pc, #32]	; (8005140 <DMA_CalcBaseAndBitshift+0x68>)
 8005120:	4013      	ands	r3, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	aaaaaaab 	.word	0xaaaaaaab
 800513c:	0800ecc0 	.word	0x0800ecc0
 8005140:	fffffc00 	.word	0xfffffc00

08005144 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d11f      	bne.n	800519e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d856      	bhi.n	8005212 <DMA_CheckFifoParam+0xce>
 8005164:	a201      	add	r2, pc, #4	; (adr r2, 800516c <DMA_CheckFifoParam+0x28>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	0800517d 	.word	0x0800517d
 8005170:	0800518f 	.word	0x0800518f
 8005174:	0800517d 	.word	0x0800517d
 8005178:	08005213 	.word	0x08005213
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d046      	beq.n	8005216 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800518c:	e043      	b.n	8005216 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005196:	d140      	bne.n	800521a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800519c:	e03d      	b.n	800521a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a6:	d121      	bne.n	80051ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d837      	bhi.n	800521e <DMA_CheckFifoParam+0xda>
 80051ae:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <DMA_CheckFifoParam+0x70>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051cb 	.word	0x080051cb
 80051bc:	080051c5 	.word	0x080051c5
 80051c0:	080051dd 	.word	0x080051dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
      break;
 80051c8:	e030      	b.n	800522c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d025      	beq.n	8005222 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051da:	e022      	b.n	8005222 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80051e4:	d11f      	bne.n	8005226 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051ea:	e01c      	b.n	8005226 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d903      	bls.n	80051fa <DMA_CheckFifoParam+0xb6>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d003      	beq.n	8005200 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051f8:	e018      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	73fb      	strb	r3, [r7, #15]
      break;
 80051fe:	e015      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00e      	beq.n	800522a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e00b      	b.n	800522a <DMA_CheckFifoParam+0xe6>
      break;
 8005212:	bf00      	nop
 8005214:	e00a      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;
 8005216:	bf00      	nop
 8005218:	e008      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;
 800521a:	bf00      	nop
 800521c:	e006      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;
 800521e:	bf00      	nop
 8005220:	e004      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;
 8005222:	bf00      	nop
 8005224:	e002      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;   
 8005226:	bf00      	nop
 8005228:	e000      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;
 800522a:	bf00      	nop
    }
  } 
  
  return status; 
 800522c:	7bfb      	ldrb	r3, [r7, #15]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop

0800523c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e109      	b.n	8005464 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	7c5b      	ldrb	r3, [r3, #17]
 8005254:	b2db      	uxtb	r3, r3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d102      	bne.n	8005260 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fc fbd6 	bl	8001a0c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2203      	movs	r2, #3
 8005264:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800527a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005286:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800528e:	f7fe fddf 	bl	8003e50 <HAL_GetTick>
 8005292:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005294:	e009      	b.n	80052aa <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005296:	f7fe fddb 	bl	8003e50 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a4:	d901      	bls.n	80052aa <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e0dc      	b.n	8005464 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80052b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0ed      	beq.n	8005296 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	4b69      	ldr	r3, [pc, #420]	; (800546c <HAL_DSI_Init+0x230>)
 80052c8:	400b      	ands	r3, r1
 80052ca:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80052e2:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80052ea:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800531e:	2001      	movs	r0, #1
 8005320:	f7fe fda2 	bl	8003e68 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8005324:	f7fe fd94 	bl	8003e50 <HAL_GetTick>
 8005328:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800532a:	e009      	b.n	8005340 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800532c:	f7fe fd90 	bl	8003e50 <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800533a:	d901      	bls.n	8005340 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e091      	b.n	8005464 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0ed      	beq.n	800532c <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f042 0206 	orr.w	r2, r2, #6
 8005360:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 0203 	bic.w	r2, r2, #3
 8005374:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f022 0203 	bic.w	r2, r2, #3
 80053a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	68da      	ldr	r2, [r3, #12]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689a      	ldr	r2, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80053ca:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6899      	ldr	r1, [r3, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <HAL_DSI_Init+0x1b0>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	e000      	b.n	80053ee <HAL_DSI_Init+0x1b2>
 80053ec:	2301      	movs	r3, #1
 80053ee:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <HAL_DSI_Init+0x234>)
 80053f4:	fb03 f202 	mul.w	r2, r3, r2
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	409a      	lsls	r2, r3
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800540a:	fb01 f303 	mul.w	r3, r1, r3
 800540e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005412:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005424:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	430a      	orrs	r2, r1
 8005438:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2200      	movs	r2, #0
 8005442:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2200      	movs	r2, #0
 800544c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3720      	adds	r7, #32
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	fffc8603 	.word	0xfffc8603
 8005470:	003d0900 	.word	0x003d0900

08005474 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	7c1b      	ldrb	r3, [r3, #16]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_DSI_ConfigErrorMonitor+0x16>
 8005486:	2302      	movs	r3, #2
 8005488:	e0aa      	b.n	80055e0 <HAL_DSI_ConfigErrorMonitor+0x16c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2201      	movs	r2, #1
 800548e:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2200      	movs	r2, #0
 8005496:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00a      	beq.n	80054ca <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054c4:	430b      	orrs	r3, r1
 80054c6:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d009      	beq.n	80054e8 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80054e4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	f003 0304 	and.w	r3, r3, #4
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d009      	beq.n	8005524 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0202 	orr.w	r2, r2, #2
 8005520:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	f003 0310 	and.w	r3, r3, #16
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 020c 	orr.w	r2, r2, #12
 800553e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b00      	cmp	r3, #0
 800554a:	d009      	beq.n	8005560 <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f042 0210 	orr.w	r2, r2, #16
 800555c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d009      	beq.n	800557e <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0220 	orr.w	r2, r2, #32
 800557a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005584:	2b00      	cmp	r3, #0
 8005586:	d009      	beq.n	800559c <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005598:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055b6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80055d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	7c1b      	ldrb	r3, [r3, #16]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_DSI_ConfigCommand+0x16>
 80055fe:	2302      	movs	r3, #2
 8005600:	e049      	b.n	8005696 <HAL_DSI_ConfigCommand+0xaa>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b24      	ldr	r3, [pc, #144]	; (80056a4 <HAL_DSI_ConfigCommand+0xb8>)
 8005614:	400b      	ands	r3, r1
 8005616:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005626:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800562c:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 8005632:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8005638:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800563e:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8005644:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 800564a:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8005650:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8005656:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800565c:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8005662:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0202 	bic.w	r2, r2, #2
 800567a:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	fef080ff 	.word	0xfef080ff

080056a8 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	7c1b      	ldrb	r3, [r3, #16]
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_DSI_ConfigFlowControl+0x16>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e016      	b.n	80056ec <HAL_DSI_ConfigFlowControl+0x44>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f022 021f 	bic.w	r2, r2, #31
 80056d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	7c1b      	ldrb	r3, [r3, #16]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_DSI_ConfigPhyTimer+0x16>
 800570a:	2302      	movs	r3, #2
 800570c:	e058      	b.n	80057c0 <HAL_DSI_ConfigPhyTimer+0xc8>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2201      	movs	r2, #1
 8005712:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	4293      	cmp	r3, r2
 800571e:	bf38      	it	cc
 8005720:	4613      	movcc	r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8005734:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	041a      	lsls	r2, r3, #16
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	431a      	orrs	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005762:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005780:	431a      	orrs	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	430a      	orrs	r2, r1
 8005788:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800579c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	021a      	lsls	r2, r3, #8
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	430a      	orrs	r2, r1
 80057b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	7c1b      	ldrb	r3, [r3, #16]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d101      	bne.n	80057e2 <HAL_DSI_ConfigHostTimeouts+0x16>
 80057de:	2302      	movs	r3, #2
 80057e0:	e0b4      	b.n	800594c <HAL_DSI_ConfigHostTimeouts+0x180>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80057f6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6899      	ldr	r1, [r3, #8]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	021a      	lsls	r2, r3, #8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	b292      	uxth	r2, r2
 8005818:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	041a      	lsls	r2, r3, #16
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4b47      	ldr	r3, [pc, #284]	; (8005958 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800583a:	400b      	ands	r3, r1
 800583c:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4b3f      	ldr	r3, [pc, #252]	; (8005958 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800585c:	400b      	ands	r3, r1
 800585e:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	4b36      	ldr	r3, [pc, #216]	; (8005958 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005880:	400b      	ands	r3, r1
 8005882:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	4b2b      	ldr	r3, [pc, #172]	; (8005958 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80058aa:	400b      	ands	r3, r1
 80058ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	695a      	ldr	r2, [r3, #20]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80058d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	699a      	ldr	r2, [r3, #24]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	4b16      	ldr	r3, [pc, #88]	; (8005958 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80058fe:	400b      	ands	r3, r1
 8005900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b0c      	ldr	r3, [pc, #48]	; (8005958 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005928:	400b      	ands	r3, r1
 800592a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6a1a      	ldr	r2, [r3, #32]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	430a      	orrs	r2, r1
 8005940:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	ffff0000 	.word	0xffff0000

0800595c <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	7c1b      	ldrb	r3, [r3, #16]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d101      	bne.n	8005972 <HAL_DSI_SetLowPowerRXFilter+0x16>
 800596e:	2302      	movs	r3, #2
 8005970:	e01b      	b.n	80059aa <HAL_DSI_SetLowPowerRXFilter+0x4e>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8005988:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	065a      	lsls	r2, r3, #25
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2200      	movs	r2, #0
 80059a6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b089      	sub	sp, #36	; 0x24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80059c2:	2300      	movs	r3, #0
 80059c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80059ca:	2300      	movs	r3, #0
 80059cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80059ce:	2300      	movs	r3, #0
 80059d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	e175      	b.n	8005cc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80059d8:	2201      	movs	r2, #1
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	fa02 f303 	lsl.w	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4013      	ands	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	f040 8164 	bne.w	8005cbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d005      	beq.n	8005a0e <HAL_GPIO_Init+0x56>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d130      	bne.n	8005a70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	2203      	movs	r2, #3
 8005a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1e:	43db      	mvns	r3, r3
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	4013      	ands	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68da      	ldr	r2, [r3, #12]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a44:	2201      	movs	r2, #1
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	4013      	ands	r3, r2
 8005a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	091b      	lsrs	r3, r3, #4
 8005a5a:	f003 0201 	and.w	r2, r3, #1
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d017      	beq.n	8005aac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	2203      	movs	r2, #3
 8005a88:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8c:	43db      	mvns	r3, r3
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f003 0303 	and.w	r3, r3, #3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d123      	bne.n	8005b00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	08da      	lsrs	r2, r3, #3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3208      	adds	r2, #8
 8005ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	220f      	movs	r2, #15
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	43db      	mvns	r3, r3
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	08da      	lsrs	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3208      	adds	r2, #8
 8005afa:	69b9      	ldr	r1, [r7, #24]
 8005afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	2203      	movs	r2, #3
 8005b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b10:	43db      	mvns	r3, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4013      	ands	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 0203 	and.w	r2, r3, #3
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	fa02 f303 	lsl.w	r3, r2, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80be 	beq.w	8005cbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b42:	4b66      	ldr	r3, [pc, #408]	; (8005cdc <HAL_GPIO_Init+0x324>)
 8005b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b46:	4a65      	ldr	r2, [pc, #404]	; (8005cdc <HAL_GPIO_Init+0x324>)
 8005b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8005b4e:	4b63      	ldr	r3, [pc, #396]	; (8005cdc <HAL_GPIO_Init+0x324>)
 8005b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b56:	60fb      	str	r3, [r7, #12]
 8005b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005b5a:	4a61      	ldr	r2, [pc, #388]	; (8005ce0 <HAL_GPIO_Init+0x328>)
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	089b      	lsrs	r3, r3, #2
 8005b60:	3302      	adds	r3, #2
 8005b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	220f      	movs	r2, #15
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a58      	ldr	r2, [pc, #352]	; (8005ce4 <HAL_GPIO_Init+0x32c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d037      	beq.n	8005bf6 <HAL_GPIO_Init+0x23e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a57      	ldr	r2, [pc, #348]	; (8005ce8 <HAL_GPIO_Init+0x330>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d031      	beq.n	8005bf2 <HAL_GPIO_Init+0x23a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a56      	ldr	r2, [pc, #344]	; (8005cec <HAL_GPIO_Init+0x334>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d02b      	beq.n	8005bee <HAL_GPIO_Init+0x236>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a55      	ldr	r2, [pc, #340]	; (8005cf0 <HAL_GPIO_Init+0x338>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d025      	beq.n	8005bea <HAL_GPIO_Init+0x232>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a54      	ldr	r2, [pc, #336]	; (8005cf4 <HAL_GPIO_Init+0x33c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d01f      	beq.n	8005be6 <HAL_GPIO_Init+0x22e>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a53      	ldr	r2, [pc, #332]	; (8005cf8 <HAL_GPIO_Init+0x340>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d019      	beq.n	8005be2 <HAL_GPIO_Init+0x22a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a52      	ldr	r2, [pc, #328]	; (8005cfc <HAL_GPIO_Init+0x344>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d013      	beq.n	8005bde <HAL_GPIO_Init+0x226>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a51      	ldr	r2, [pc, #324]	; (8005d00 <HAL_GPIO_Init+0x348>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00d      	beq.n	8005bda <HAL_GPIO_Init+0x222>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a50      	ldr	r2, [pc, #320]	; (8005d04 <HAL_GPIO_Init+0x34c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d007      	beq.n	8005bd6 <HAL_GPIO_Init+0x21e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a4f      	ldr	r2, [pc, #316]	; (8005d08 <HAL_GPIO_Init+0x350>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d101      	bne.n	8005bd2 <HAL_GPIO_Init+0x21a>
 8005bce:	2309      	movs	r3, #9
 8005bd0:	e012      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bd2:	230a      	movs	r3, #10
 8005bd4:	e010      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bd6:	2308      	movs	r3, #8
 8005bd8:	e00e      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bda:	2307      	movs	r3, #7
 8005bdc:	e00c      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bde:	2306      	movs	r3, #6
 8005be0:	e00a      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005be2:	2305      	movs	r3, #5
 8005be4:	e008      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005be6:	2304      	movs	r3, #4
 8005be8:	e006      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bea:	2303      	movs	r3, #3
 8005bec:	e004      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e002      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e000      	b.n	8005bf8 <HAL_GPIO_Init+0x240>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	f002 0203 	and.w	r2, r2, #3
 8005bfe:	0092      	lsls	r2, r2, #2
 8005c00:	4093      	lsls	r3, r2
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005c08:	4935      	ldr	r1, [pc, #212]	; (8005ce0 <HAL_GPIO_Init+0x328>)
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	089b      	lsrs	r3, r3, #2
 8005c0e:	3302      	adds	r3, #2
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c16:	4b3d      	ldr	r3, [pc, #244]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4013      	ands	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005c32:	69ba      	ldr	r2, [r7, #24]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005c3a:	4a34      	ldr	r2, [pc, #208]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005c40:	4b32      	ldr	r3, [pc, #200]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c64:	4a29      	ldr	r2, [pc, #164]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c6a:	4b28      	ldr	r3, [pc, #160]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	43db      	mvns	r3, r3
 8005c74:	69ba      	ldr	r2, [r7, #24]
 8005c76:	4013      	ands	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d003      	beq.n	8005c8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c8e:	4a1f      	ldr	r2, [pc, #124]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c94:	4b1d      	ldr	r3, [pc, #116]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <HAL_GPIO_Init+0x354>)
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b0f      	cmp	r3, #15
 8005cc8:	f67f ae86 	bls.w	80059d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	3724      	adds	r7, #36	; 0x24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40013800 	.word	0x40013800
 8005ce4:	40020000 	.word	0x40020000
 8005ce8:	40020400 	.word	0x40020400
 8005cec:	40020800 	.word	0x40020800
 8005cf0:	40020c00 	.word	0x40020c00
 8005cf4:	40021000 	.word	0x40021000
 8005cf8:	40021400 	.word	0x40021400
 8005cfc:	40021800 	.word	0x40021800
 8005d00:	40021c00 	.word	0x40021c00
 8005d04:	40022000 	.word	0x40022000
 8005d08:	40022400 	.word	0x40022400
 8005d0c:	40013c00 	.word	0x40013c00

08005d10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	691a      	ldr	r2, [r3, #16]
 8005d20:	887b      	ldrh	r3, [r7, #2]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	73fb      	strb	r3, [r7, #15]
 8005d2c:	e001      	b.n	8005d32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	807b      	strh	r3, [r7, #2]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d50:	787b      	ldrb	r3, [r7, #1]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d56:	887a      	ldrh	r2, [r7, #2]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005d5c:	e003      	b.n	8005d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005d5e:	887b      	ldrh	r3, [r7, #2]
 8005d60:	041a      	lsls	r2, r3, #16
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	619a      	str	r2, [r3, #24]
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b085      	sub	sp, #20
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005d84:	887a      	ldrh	r2, [r7, #2]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	041a      	lsls	r2, r3, #16
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	43d9      	mvns	r1, r3
 8005d90:	887b      	ldrh	r3, [r7, #2]
 8005d92:	400b      	ands	r3, r1
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	619a      	str	r2, [r3, #24]
}
 8005d9a:	bf00      	nop
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e07f      	b.n	8005eba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f8a9 	bl	8005f26 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2224      	movs	r2, #36	; 0x24
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0201 	bic.w	r2, r2, #1
 8005dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005df8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d107      	bne.n	8005e22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689a      	ldr	r2, [r3, #8]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e1e:	609a      	str	r2, [r3, #8]
 8005e20:	e006      	b.n	8005e30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005e2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d104      	bne.n	8005e42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6859      	ldr	r1, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <HAL_I2C_Init+0x11c>)
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691a      	ldr	r2, [r3, #16]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	69d9      	ldr	r1, [r3, #28]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0201 	orr.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	02008000 	.word	0x02008000

08005ec8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e021      	b.n	8005f1e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2224      	movs	r2, #36	; 0x24
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0201 	bic.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f821 	bl	8005f3a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005f26:	b480      	push	{r7}
 8005f28:	b083      	sub	sp, #12
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005f2e:	bf00      	nop
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b083      	sub	sp, #12
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005f42:	bf00      	nop
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b088      	sub	sp, #32
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	817b      	strh	r3, [r7, #10]
 8005f62:	460b      	mov	r3, r1
 8005f64:	813b      	strh	r3, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	f040 80f9 	bne.w	800616a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d002      	beq.n	8005f84 <HAL_I2C_Mem_Write+0x34>
 8005f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d105      	bne.n	8005f90 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f8a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0ed      	b.n	800616c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_I2C_Mem_Write+0x4e>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e0e6      	b.n	800616c <HAL_I2C_Mem_Write+0x21c>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005fa6:	f7fd ff53 	bl	8003e50 <HAL_GetTick>
 8005faa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	2319      	movs	r3, #25
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f000 fad1 	bl	8006560 <I2C_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e0d1      	b.n	800616c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2221      	movs	r2, #33	; 0x21
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2240      	movs	r2, #64	; 0x40
 8005fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6a3a      	ldr	r2, [r7, #32]
 8005fe2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005ff0:	88f8      	ldrh	r0, [r7, #6]
 8005ff2:	893a      	ldrh	r2, [r7, #8]
 8005ff4:	8979      	ldrh	r1, [r7, #10]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	9301      	str	r3, [sp, #4]
 8005ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	4603      	mov	r3, r0
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f9e1 	bl	80063c8 <I2C_RequestMemoryWrite>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0a9      	b.n	800616c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	2bff      	cmp	r3, #255	; 0xff
 8006020:	d90e      	bls.n	8006040 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	22ff      	movs	r2, #255	; 0xff
 8006026:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602c:	b2da      	uxtb	r2, r3
 800602e:	8979      	ldrh	r1, [r7, #10]
 8006030:	2300      	movs	r3, #0
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 fc2d 	bl	8006898 <I2C_TransferConfig>
 800603e:	e00f      	b.n	8006060 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604e:	b2da      	uxtb	r2, r3
 8006050:	8979      	ldrh	r1, [r7, #10]
 8006052:	2300      	movs	r3, #0
 8006054:	9300      	str	r3, [sp, #0]
 8006056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fc1c 	bl	8006898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 fabb 	bl	80065e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e07b      	b.n	800616c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	781a      	ldrb	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800609c:	3b01      	subs	r3, #1
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d034      	beq.n	8006118 <HAL_I2C_Mem_Write+0x1c8>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d130      	bne.n	8006118 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	2200      	movs	r2, #0
 80060be:	2180      	movs	r1, #128	; 0x80
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 fa4d 	bl	8006560 <I2C_WaitOnFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e04d      	b.n	800616c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	2bff      	cmp	r3, #255	; 0xff
 80060d8:	d90e      	bls.n	80060f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	22ff      	movs	r2, #255	; 0xff
 80060de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	8979      	ldrh	r1, [r7, #10]
 80060e8:	2300      	movs	r3, #0
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fbd1 	bl	8006898 <I2C_TransferConfig>
 80060f6:	e00f      	b.n	8006118 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006106:	b2da      	uxtb	r2, r3
 8006108:	8979      	ldrh	r1, [r7, #10]
 800610a:	2300      	movs	r3, #0
 800610c:	9300      	str	r3, [sp, #0]
 800610e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 fbc0 	bl	8006898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611c:	b29b      	uxth	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d19e      	bne.n	8006060 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006126:	68f8      	ldr	r0, [r7, #12]
 8006128:	f000 fa9a 	bl	8006660 <I2C_WaitOnSTOPFlagUntilTimeout>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e01a      	b.n	800616c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2220      	movs	r2, #32
 800613c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6859      	ldr	r1, [r3, #4]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <HAL_I2C_Mem_Write+0x224>)
 800614a:	400b      	ands	r3, r1
 800614c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	e000      	b.n	800616c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800616a:	2302      	movs	r3, #2
  }
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	fe00e800 	.word	0xfe00e800

08006178 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af02      	add	r7, sp, #8
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	4608      	mov	r0, r1
 8006182:	4611      	mov	r1, r2
 8006184:	461a      	mov	r2, r3
 8006186:	4603      	mov	r3, r0
 8006188:	817b      	strh	r3, [r7, #10]
 800618a:	460b      	mov	r3, r1
 800618c:	813b      	strh	r3, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b20      	cmp	r3, #32
 800619c:	f040 80fd 	bne.w	800639a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_I2C_Mem_Read+0x34>
 80061a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d105      	bne.n	80061b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e0f1      	b.n	800639c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_I2C_Mem_Read+0x4e>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e0ea      	b.n	800639c <HAL_I2C_Mem_Read+0x224>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80061ce:	f7fd fe3f 	bl	8003e50 <HAL_GetTick>
 80061d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	2319      	movs	r3, #25
 80061da:	2201      	movs	r2, #1
 80061dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f9bd 	bl	8006560 <I2C_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e0d5      	b.n	800639c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2222      	movs	r2, #34	; 0x22
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2240      	movs	r2, #64	; 0x40
 80061fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a3a      	ldr	r2, [r7, #32]
 800620a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006210:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2200      	movs	r2, #0
 8006216:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006218:	88f8      	ldrh	r0, [r7, #6]
 800621a:	893a      	ldrh	r2, [r7, #8]
 800621c:	8979      	ldrh	r1, [r7, #10]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	4603      	mov	r3, r0
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 f921 	bl	8006470 <I2C_RequestMemoryRead>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d005      	beq.n	8006240 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e0ad      	b.n	800639c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	2bff      	cmp	r3, #255	; 0xff
 8006248:	d90e      	bls.n	8006268 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	22ff      	movs	r2, #255	; 0xff
 800624e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006254:	b2da      	uxtb	r2, r3
 8006256:	8979      	ldrh	r1, [r7, #10]
 8006258:	4b52      	ldr	r3, [pc, #328]	; (80063a4 <HAL_I2C_Mem_Read+0x22c>)
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f000 fb19 	bl	8006898 <I2C_TransferConfig>
 8006266:	e00f      	b.n	8006288 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006276:	b2da      	uxtb	r2, r3
 8006278:	8979      	ldrh	r1, [r7, #10]
 800627a:	4b4a      	ldr	r3, [pc, #296]	; (80063a4 <HAL_I2C_Mem_Read+0x22c>)
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 fb08 	bl	8006898 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628e:	2200      	movs	r2, #0
 8006290:	2104      	movs	r1, #4
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f964 	bl	8006560 <I2C_WaitOnFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e07c      	b.n	800639c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d8:	b29b      	uxth	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d034      	beq.n	8006348 <HAL_I2C_Mem_Read+0x1d0>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d130      	bne.n	8006348 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ec:	2200      	movs	r2, #0
 80062ee:	2180      	movs	r1, #128	; 0x80
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f935 	bl	8006560 <I2C_WaitOnFlagUntilTimeout>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e04d      	b.n	800639c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006304:	b29b      	uxth	r3, r3
 8006306:	2bff      	cmp	r3, #255	; 0xff
 8006308:	d90e      	bls.n	8006328 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	22ff      	movs	r2, #255	; 0xff
 800630e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006314:	b2da      	uxtb	r2, r3
 8006316:	8979      	ldrh	r1, [r7, #10]
 8006318:	2300      	movs	r3, #0
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 fab9 	bl	8006898 <I2C_TransferConfig>
 8006326:	e00f      	b.n	8006348 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006336:	b2da      	uxtb	r2, r3
 8006338:	8979      	ldrh	r1, [r7, #10]
 800633a:	2300      	movs	r3, #0
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 faa8 	bl	8006898 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800634c:	b29b      	uxth	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d19a      	bne.n	8006288 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 f982 	bl	8006660 <I2C_WaitOnSTOPFlagUntilTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e01a      	b.n	800639c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2220      	movs	r2, #32
 800636c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6859      	ldr	r1, [r3, #4]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	4b0b      	ldr	r3, [pc, #44]	; (80063a8 <HAL_I2C_Mem_Read+0x230>)
 800637a:	400b      	ands	r3, r1
 800637c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2220      	movs	r2, #32
 8006382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006396:	2300      	movs	r3, #0
 8006398:	e000      	b.n	800639c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800639a:	2302      	movs	r3, #2
  }
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	80002400 	.word	0x80002400
 80063a8:	fe00e800 	.word	0xfe00e800

080063ac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063ba:	b2db      	uxtb	r3, r3
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af02      	add	r7, sp, #8
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	4608      	mov	r0, r1
 80063d2:	4611      	mov	r1, r2
 80063d4:	461a      	mov	r2, r3
 80063d6:	4603      	mov	r3, r0
 80063d8:	817b      	strh	r3, [r7, #10]
 80063da:	460b      	mov	r3, r1
 80063dc:	813b      	strh	r3, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80063e2:	88fb      	ldrh	r3, [r7, #6]
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	8979      	ldrh	r1, [r7, #10]
 80063e8:	4b20      	ldr	r3, [pc, #128]	; (800646c <I2C_RequestMemoryWrite+0xa4>)
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063f0:	68f8      	ldr	r0, [r7, #12]
 80063f2:	f000 fa51 	bl	8006898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f6:	69fa      	ldr	r2, [r7, #28]
 80063f8:	69b9      	ldr	r1, [r7, #24]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 f8f0 	bl	80065e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e02c      	b.n	8006464 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d105      	bne.n	800641c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006410:	893b      	ldrh	r3, [r7, #8]
 8006412:	b2da      	uxtb	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	629a      	str	r2, [r3, #40]	; 0x28
 800641a:	e015      	b.n	8006448 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800641c:	893b      	ldrh	r3, [r7, #8]
 800641e:	0a1b      	lsrs	r3, r3, #8
 8006420:	b29b      	uxth	r3, r3
 8006422:	b2da      	uxtb	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800642a:	69fa      	ldr	r2, [r7, #28]
 800642c:	69b9      	ldr	r1, [r7, #24]
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f8d6 	bl	80065e0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	e012      	b.n	8006464 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800643e:	893b      	ldrh	r3, [r7, #8]
 8006440:	b2da      	uxtb	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	2200      	movs	r2, #0
 8006450:	2180      	movs	r1, #128	; 0x80
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f000 f884 	bl	8006560 <I2C_WaitOnFlagUntilTimeout>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e000      	b.n	8006464 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	80002000 	.word	0x80002000

08006470 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	4608      	mov	r0, r1
 800647a:	4611      	mov	r1, r2
 800647c:	461a      	mov	r2, r3
 800647e:	4603      	mov	r3, r0
 8006480:	817b      	strh	r3, [r7, #10]
 8006482:	460b      	mov	r3, r1
 8006484:	813b      	strh	r3, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800648a:	88fb      	ldrh	r3, [r7, #6]
 800648c:	b2da      	uxtb	r2, r3
 800648e:	8979      	ldrh	r1, [r7, #10]
 8006490:	4b20      	ldr	r3, [pc, #128]	; (8006514 <I2C_RequestMemoryRead+0xa4>)
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	2300      	movs	r3, #0
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f000 f9fe 	bl	8006898 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800649c:	69fa      	ldr	r2, [r7, #28]
 800649e:	69b9      	ldr	r1, [r7, #24]
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f89d 	bl	80065e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e02c      	b.n	800650a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064b0:	88fb      	ldrh	r3, [r7, #6]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d105      	bne.n	80064c2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064b6:	893b      	ldrh	r3, [r7, #8]
 80064b8:	b2da      	uxtb	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	629a      	str	r2, [r3, #40]	; 0x28
 80064c0:	e015      	b.n	80064ee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80064c2:	893b      	ldrh	r3, [r7, #8]
 80064c4:	0a1b      	lsrs	r3, r3, #8
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	69b9      	ldr	r1, [r7, #24]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f883 	bl	80065e0 <I2C_WaitOnTXISFlagUntilTimeout>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e012      	b.n	800650a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80064e4:	893b      	ldrh	r3, [r7, #8]
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	9300      	str	r3, [sp, #0]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2200      	movs	r2, #0
 80064f6:	2140      	movs	r1, #64	; 0x40
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f831 	bl	8006560 <I2C_WaitOnFlagUntilTimeout>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e000      	b.n	800650a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	80002000 	.word	0x80002000

08006518 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b02      	cmp	r3, #2
 800652c:	d103      	bne.n	8006536 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b01      	cmp	r3, #1
 8006542:	d007      	beq.n	8006554 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699a      	ldr	r2, [r3, #24]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	619a      	str	r2, [r3, #24]
  }
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006570:	e022      	b.n	80065b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006578:	d01e      	beq.n	80065b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657a:	f7fd fc69 	bl	8003e50 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d302      	bcc.n	8006590 <I2C_WaitOnFlagUntilTimeout+0x30>
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d113      	bne.n	80065b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006594:	f043 0220 	orr.w	r2, r3, #32
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	e00f      	b.n	80065d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699a      	ldr	r2, [r3, #24]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	4013      	ands	r3, r2
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	bf0c      	ite	eq
 80065c8:	2301      	moveq	r3, #1
 80065ca:	2300      	movne	r3, #0
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	461a      	mov	r2, r3
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d0cd      	beq.n	8006572 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80065ec:	e02c      	b.n	8006648 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	68b9      	ldr	r1, [r7, #8]
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f000 f870 	bl	80066d8 <I2C_IsErrorOccurred>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d001      	beq.n	8006602 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	e02a      	b.n	8006658 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006608:	d01e      	beq.n	8006648 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800660a:	f7fd fc21 	bl	8003e50 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	429a      	cmp	r2, r3
 8006618:	d302      	bcc.n	8006620 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d113      	bne.n	8006648 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006624:	f043 0220 	orr.w	r2, r3, #32
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e007      	b.n	8006658 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699b      	ldr	r3, [r3, #24]
 800664e:	f003 0302 	and.w	r3, r3, #2
 8006652:	2b02      	cmp	r3, #2
 8006654:	d1cb      	bne.n	80065ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800666c:	e028      	b.n	80066c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	68b9      	ldr	r1, [r7, #8]
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f830 	bl	80066d8 <I2C_IsErrorOccurred>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800667e:	2301      	movs	r3, #1
 8006680:	e026      	b.n	80066d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006682:	f7fd fbe5 	bl	8003e50 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d302      	bcc.n	8006698 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d113      	bne.n	80066c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	f043 0220 	orr.w	r2, r3, #32
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2220      	movs	r2, #32
 80066a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e007      	b.n	80066d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	d1cf      	bne.n	800666e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	f003 0310 	and.w	r3, r3, #16
 8006700:	2b00      	cmp	r3, #0
 8006702:	d068      	beq.n	80067d6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2210      	movs	r2, #16
 800670a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800670c:	e049      	b.n	80067a2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006714:	d045      	beq.n	80067a2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006716:	f7fd fb9b 	bl	8003e50 <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	68ba      	ldr	r2, [r7, #8]
 8006722:	429a      	cmp	r2, r3
 8006724:	d302      	bcc.n	800672c <I2C_IsErrorOccurred+0x54>
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d13a      	bne.n	80067a2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006736:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800673e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800674a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800674e:	d121      	bne.n	8006794 <I2C_IsErrorOccurred+0xbc>
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006756:	d01d      	beq.n	8006794 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006758:	7cfb      	ldrb	r3, [r7, #19]
 800675a:	2b20      	cmp	r3, #32
 800675c:	d01a      	beq.n	8006794 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800676c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800676e:	f7fd fb6f 	bl	8003e50 <HAL_GetTick>
 8006772:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006774:	e00e      	b.n	8006794 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006776:	f7fd fb6b 	bl	8003e50 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b19      	cmp	r3, #25
 8006782:	d907      	bls.n	8006794 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	f043 0320 	orr.w	r3, r3, #32
 800678a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006792:	e006      	b.n	80067a2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d1e9      	bne.n	8006776 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f003 0320 	and.w	r3, r3, #32
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	d003      	beq.n	80067b8 <I2C_IsErrorOccurred+0xe0>
 80067b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d0aa      	beq.n	800670e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80067b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d103      	bne.n	80067c8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2220      	movs	r2, #32
 80067c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	f043 0304 	orr.w	r3, r3, #4
 80067ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80067e8:	6a3b      	ldr	r3, [r7, #32]
 80067ea:	f043 0301 	orr.w	r3, r3, #1
 80067ee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00b      	beq.n	8006822 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	f043 0308 	orr.w	r3, r3, #8
 8006810:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800681a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00b      	beq.n	8006844 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800682c:	6a3b      	ldr	r3, [r7, #32]
 800682e:	f043 0302 	orr.w	r3, r3, #2
 8006832:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800683c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01c      	beq.n	8006886 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f7ff fe63 	bl	8006518 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6859      	ldr	r1, [r3, #4]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <I2C_IsErrorOccurred+0x1bc>)
 800685e:	400b      	ands	r3, r1
 8006860:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	431a      	orrs	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800688a:	4618      	mov	r0, r3
 800688c:	3728      	adds	r7, #40	; 0x28
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	fe00e800 	.word	0xfe00e800

08006898 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	607b      	str	r3, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	817b      	strh	r3, [r7, #10]
 80068a6:	4613      	mov	r3, r2
 80068a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068aa:	897b      	ldrh	r3, [r7, #10]
 80068ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068b0:	7a7b      	ldrb	r3, [r7, #9]
 80068b2:	041b      	lsls	r3, r3, #16
 80068b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	0d5b      	lsrs	r3, r3, #21
 80068d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80068d6:	4b08      	ldr	r3, [pc, #32]	; (80068f8 <I2C_TransferConfig+0x60>)
 80068d8:	430b      	orrs	r3, r1
 80068da:	43db      	mvns	r3, r3
 80068dc:	ea02 0103 	and.w	r1, r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	03ff63ff 	.word	0x03ff63ff

080068fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80068fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068fe:	b08f      	sub	sp, #60	; 0x3c
 8006900:	af0a      	add	r7, sp, #40	; 0x28
 8006902:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e116      	b.n	8006b3c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7fb fab3 	bl	8001e94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2203      	movs	r2, #3
 8006932:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693e:	2b00      	cmp	r3, #0
 8006940:	d102      	bne.n	8006948 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4618      	mov	r0, r3
 800694e:	f004 fe47 	bl	800b5e0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	603b      	str	r3, [r7, #0]
 8006958:	687e      	ldr	r6, [r7, #4]
 800695a:	466d      	mov	r5, sp
 800695c:	f106 0410 	add.w	r4, r6, #16
 8006960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006968:	e894 0003 	ldmia.w	r4, {r0, r1}
 800696c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006970:	1d33      	adds	r3, r6, #4
 8006972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006974:	6838      	ldr	r0, [r7, #0]
 8006976:	f004 fddb 	bl	800b530 <USB_CoreInit>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0d7      	b.n	8006b3c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2100      	movs	r1, #0
 8006992:	4618      	mov	r0, r3
 8006994:	f004 fe35 	bl	800b602 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006998:	2300      	movs	r3, #0
 800699a:	73fb      	strb	r3, [r7, #15]
 800699c:	e04a      	b.n	8006a34 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800699e:	7bfa      	ldrb	r2, [r7, #15]
 80069a0:	6879      	ldr	r1, [r7, #4]
 80069a2:	4613      	mov	r3, r2
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	4413      	add	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	440b      	add	r3, r1
 80069ac:	333d      	adds	r3, #61	; 0x3d
 80069ae:	2201      	movs	r2, #1
 80069b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80069b2:	7bfa      	ldrb	r2, [r7, #15]
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	333c      	adds	r3, #60	; 0x3c
 80069c2:	7bfa      	ldrb	r2, [r7, #15]
 80069c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80069c6:	7bfa      	ldrb	r2, [r7, #15]
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	b298      	uxth	r0, r3
 80069cc:	6879      	ldr	r1, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	00db      	lsls	r3, r3, #3
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	440b      	add	r3, r1
 80069d8:	3344      	adds	r3, #68	; 0x44
 80069da:	4602      	mov	r2, r0
 80069dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069de:	7bfa      	ldrb	r2, [r7, #15]
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	4613      	mov	r3, r2
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	440b      	add	r3, r1
 80069ec:	3340      	adds	r3, #64	; 0x40
 80069ee:	2200      	movs	r2, #0
 80069f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80069f2:	7bfa      	ldrb	r2, [r7, #15]
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	3348      	adds	r3, #72	; 0x48
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a06:	7bfa      	ldrb	r2, [r7, #15]
 8006a08:	6879      	ldr	r1, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	440b      	add	r3, r1
 8006a14:	334c      	adds	r3, #76	; 0x4c
 8006a16:	2200      	movs	r2, #0
 8006a18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a1a:	7bfa      	ldrb	r2, [r7, #15]
 8006a1c:	6879      	ldr	r1, [r7, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	3354      	adds	r3, #84	; 0x54
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	3301      	adds	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
 8006a34:	7bfa      	ldrb	r2, [r7, #15]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d3af      	bcc.n	800699e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
 8006a42:	e044      	b.n	8006ace <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a44:	7bfa      	ldrb	r2, [r7, #15]
 8006a46:	6879      	ldr	r1, [r7, #4]
 8006a48:	4613      	mov	r3, r2
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	440b      	add	r3, r1
 8006a52:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006a56:	2200      	movs	r2, #0
 8006a58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a5a:	7bfa      	ldrb	r2, [r7, #15]
 8006a5c:	6879      	ldr	r1, [r7, #4]
 8006a5e:	4613      	mov	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	440b      	add	r3, r1
 8006a68:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006a6c:	7bfa      	ldrb	r2, [r7, #15]
 8006a6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a70:	7bfa      	ldrb	r2, [r7, #15]
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	4613      	mov	r3, r2
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	4413      	add	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006a82:	2200      	movs	r2, #0
 8006a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a86:	7bfa      	ldrb	r2, [r7, #15]
 8006a88:	6879      	ldr	r1, [r7, #4]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	00db      	lsls	r3, r3, #3
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a9c:	7bfa      	ldrb	r2, [r7, #15]
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ab2:	7bfa      	ldrb	r2, [r7, #15]
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	440b      	add	r3, r1
 8006ac0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
 8006aca:	3301      	adds	r3, #1
 8006acc:	73fb      	strb	r3, [r7, #15]
 8006ace:	7bfa      	ldrb	r2, [r7, #15]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d3b5      	bcc.n	8006a44 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	603b      	str	r3, [r7, #0]
 8006ade:	687e      	ldr	r6, [r7, #4]
 8006ae0:	466d      	mov	r5, sp
 8006ae2:	f106 0410 	add.w	r4, r6, #16
 8006ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006aec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006aee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006af2:	e885 0003 	stmia.w	r5, {r0, r1}
 8006af6:	1d33      	adds	r3, r6, #4
 8006af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006afa:	6838      	ldr	r0, [r7, #0]
 8006afc:	f004 fdce 	bl	800b69c <USB_DevInit>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2202      	movs	r2, #2
 8006b0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e014      	b.n	8006b3c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d102      	bne.n	8006b30 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 f80a 	bl	8006b44 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f004 ff8c 	bl	800ba52 <USB_DevDisconnect>

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2201      	movs	r2, #1
 8006b56:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b72:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <HAL_PCDEx_ActivateLPM+0x44>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	10000003 	.word	0x10000003

08006b8c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b90:	4b05      	ldr	r3, [pc, #20]	; (8006ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a04      	ldr	r2, [pc, #16]	; (8006ba8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b9a:	6013      	str	r3, [r2, #0]
}
 8006b9c:	bf00      	nop
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	40007000 	.word	0x40007000

08006bac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e29b      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 8087 	beq.w	8006cde <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006bd0:	4b96      	ldr	r3, [pc, #600]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f003 030c 	and.w	r3, r3, #12
 8006bd8:	2b04      	cmp	r3, #4
 8006bda:	d00c      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bdc:	4b93      	ldr	r3, [pc, #588]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f003 030c 	and.w	r3, r3, #12
 8006be4:	2b08      	cmp	r3, #8
 8006be6:	d112      	bne.n	8006c0e <HAL_RCC_OscConfig+0x62>
 8006be8:	4b90      	ldr	r3, [pc, #576]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bf4:	d10b      	bne.n	8006c0e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bf6:	4b8d      	ldr	r3, [pc, #564]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d06c      	beq.n	8006cdc <HAL_RCC_OscConfig+0x130>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d168      	bne.n	8006cdc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e275      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c16:	d106      	bne.n	8006c26 <HAL_RCC_OscConfig+0x7a>
 8006c18:	4b84      	ldr	r3, [pc, #528]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a83      	ldr	r2, [pc, #524]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	e02e      	b.n	8006c84 <HAL_RCC_OscConfig+0xd8>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10c      	bne.n	8006c48 <HAL_RCC_OscConfig+0x9c>
 8006c2e:	4b7f      	ldr	r3, [pc, #508]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a7e      	ldr	r2, [pc, #504]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c38:	6013      	str	r3, [r2, #0]
 8006c3a:	4b7c      	ldr	r3, [pc, #496]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a7b      	ldr	r2, [pc, #492]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	e01d      	b.n	8006c84 <HAL_RCC_OscConfig+0xd8>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c50:	d10c      	bne.n	8006c6c <HAL_RCC_OscConfig+0xc0>
 8006c52:	4b76      	ldr	r3, [pc, #472]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a75      	ldr	r2, [pc, #468]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	4b73      	ldr	r3, [pc, #460]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a72      	ldr	r2, [pc, #456]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	e00b      	b.n	8006c84 <HAL_RCC_OscConfig+0xd8>
 8006c6c:	4b6f      	ldr	r3, [pc, #444]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a6e      	ldr	r2, [pc, #440]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	4b6c      	ldr	r3, [pc, #432]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a6b      	ldr	r2, [pc, #428]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d013      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8c:	f7fd f8e0 	bl	8003e50 <HAL_GetTick>
 8006c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c92:	e008      	b.n	8006ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c94:	f7fd f8dc 	bl	8003e50 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	2b64      	cmp	r3, #100	; 0x64
 8006ca0:	d901      	bls.n	8006ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e229      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ca6:	4b61      	ldr	r3, [pc, #388]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0f0      	beq.n	8006c94 <HAL_RCC_OscConfig+0xe8>
 8006cb2:	e014      	b.n	8006cde <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fd f8cc 	bl	8003e50 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cbc:	f7fd f8c8 	bl	8003e50 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b64      	cmp	r3, #100	; 0x64
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e215      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cce:	4b57      	ldr	r3, [pc, #348]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d1f0      	bne.n	8006cbc <HAL_RCC_OscConfig+0x110>
 8006cda:	e000      	b.n	8006cde <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d069      	beq.n	8006dbe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006cea:	4b50      	ldr	r3, [pc, #320]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 030c 	and.w	r3, r3, #12
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cf6:	4b4d      	ldr	r3, [pc, #308]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f003 030c 	and.w	r3, r3, #12
 8006cfe:	2b08      	cmp	r3, #8
 8006d00:	d11c      	bne.n	8006d3c <HAL_RCC_OscConfig+0x190>
 8006d02:	4b4a      	ldr	r3, [pc, #296]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d116      	bne.n	8006d3c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d0e:	4b47      	ldr	r3, [pc, #284]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <HAL_RCC_OscConfig+0x17a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d001      	beq.n	8006d26 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e1e9      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d26:	4b41      	ldr	r3, [pc, #260]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	00db      	lsls	r3, r3, #3
 8006d34:	493d      	ldr	r1, [pc, #244]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d3a:	e040      	b.n	8006dbe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d023      	beq.n	8006d8c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d44:	4b39      	ldr	r3, [pc, #228]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a38      	ldr	r2, [pc, #224]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006d4a:	f043 0301 	orr.w	r3, r3, #1
 8006d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d50:	f7fd f87e 	bl	8003e50 <HAL_GetTick>
 8006d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d56:	e008      	b.n	8006d6a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d58:	f7fd f87a 	bl	8003e50 <HAL_GetTick>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	693b      	ldr	r3, [r7, #16]
 8006d60:	1ad3      	subs	r3, r2, r3
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d901      	bls.n	8006d6a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e1c7      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d6a:	4b30      	ldr	r3, [pc, #192]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d0f0      	beq.n	8006d58 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d76:	4b2d      	ldr	r3, [pc, #180]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	4929      	ldr	r1, [pc, #164]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	600b      	str	r3, [r1, #0]
 8006d8a:	e018      	b.n	8006dbe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d8c:	4b27      	ldr	r3, [pc, #156]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006d92:	f023 0301 	bic.w	r3, r3, #1
 8006d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d98:	f7fd f85a 	bl	8003e50 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006da0:	f7fd f856 	bl	8003e50 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e1a3      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006db2:	4b1e      	ldr	r3, [pc, #120]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1f0      	bne.n	8006da0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0308 	and.w	r3, r3, #8
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d038      	beq.n	8006e3c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d019      	beq.n	8006e06 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dd2:	4b16      	ldr	r3, [pc, #88]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dd6:	4a15      	ldr	r2, [pc, #84]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006dd8:	f043 0301 	orr.w	r3, r3, #1
 8006ddc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dde:	f7fd f837 	bl	8003e50 <HAL_GetTick>
 8006de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006de4:	e008      	b.n	8006df8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006de6:	f7fd f833 	bl	8003e50 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d901      	bls.n	8006df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006df4:	2303      	movs	r3, #3
 8006df6:	e180      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfc:	f003 0302 	and.w	r3, r3, #2
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d0f0      	beq.n	8006de6 <HAL_RCC_OscConfig+0x23a>
 8006e04:	e01a      	b.n	8006e3c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e06:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e0a:	4a08      	ldr	r2, [pc, #32]	; (8006e2c <HAL_RCC_OscConfig+0x280>)
 8006e0c:	f023 0301 	bic.w	r3, r3, #1
 8006e10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e12:	f7fd f81d 	bl	8003e50 <HAL_GetTick>
 8006e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e18:	e00a      	b.n	8006e30 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e1a:	f7fd f819 	bl	8003e50 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d903      	bls.n	8006e30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e166      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
 8006e2c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e30:	4b92      	ldr	r3, [pc, #584]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006e32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1ee      	bne.n	8006e1a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 80a4 	beq.w	8006f92 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e4a:	4b8c      	ldr	r3, [pc, #560]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10d      	bne.n	8006e72 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e56:	4b89      	ldr	r3, [pc, #548]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	4a88      	ldr	r2, [pc, #544]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e60:	6413      	str	r3, [r2, #64]	; 0x40
 8006e62:	4b86      	ldr	r3, [pc, #536]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e6a:	60bb      	str	r3, [r7, #8]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e72:	4b83      	ldr	r3, [pc, #524]	; (8007080 <HAL_RCC_OscConfig+0x4d4>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d118      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006e7e:	4b80      	ldr	r3, [pc, #512]	; (8007080 <HAL_RCC_OscConfig+0x4d4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a7f      	ldr	r2, [pc, #508]	; (8007080 <HAL_RCC_OscConfig+0x4d4>)
 8006e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e8a:	f7fc ffe1 	bl	8003e50 <HAL_GetTick>
 8006e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e90:	e008      	b.n	8006ea4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e92:	f7fc ffdd 	bl	8003e50 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b64      	cmp	r3, #100	; 0x64
 8006e9e:	d901      	bls.n	8006ea4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e12a      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ea4:	4b76      	ldr	r3, [pc, #472]	; (8007080 <HAL_RCC_OscConfig+0x4d4>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d0f0      	beq.n	8006e92 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d106      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x31a>
 8006eb8:	4b70      	ldr	r3, [pc, #448]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ebc:	4a6f      	ldr	r2, [pc, #444]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006ebe:	f043 0301 	orr.w	r3, r3, #1
 8006ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ec4:	e02d      	b.n	8006f22 <HAL_RCC_OscConfig+0x376>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10c      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x33c>
 8006ece:	4b6b      	ldr	r3, [pc, #428]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed2:	4a6a      	ldr	r2, [pc, #424]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006ed4:	f023 0301 	bic.w	r3, r3, #1
 8006ed8:	6713      	str	r3, [r2, #112]	; 0x70
 8006eda:	4b68      	ldr	r3, [pc, #416]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ede:	4a67      	ldr	r2, [pc, #412]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006ee0:	f023 0304 	bic.w	r3, r3, #4
 8006ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8006ee6:	e01c      	b.n	8006f22 <HAL_RCC_OscConfig+0x376>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	2b05      	cmp	r3, #5
 8006eee:	d10c      	bne.n	8006f0a <HAL_RCC_OscConfig+0x35e>
 8006ef0:	4b62      	ldr	r3, [pc, #392]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef4:	4a61      	ldr	r2, [pc, #388]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006ef6:	f043 0304 	orr.w	r3, r3, #4
 8006efa:	6713      	str	r3, [r2, #112]	; 0x70
 8006efc:	4b5f      	ldr	r3, [pc, #380]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f00:	4a5e      	ldr	r2, [pc, #376]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006f02:	f043 0301 	orr.w	r3, r3, #1
 8006f06:	6713      	str	r3, [r2, #112]	; 0x70
 8006f08:	e00b      	b.n	8006f22 <HAL_RCC_OscConfig+0x376>
 8006f0a:	4b5c      	ldr	r3, [pc, #368]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0e:	4a5b      	ldr	r2, [pc, #364]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006f10:	f023 0301 	bic.w	r3, r3, #1
 8006f14:	6713      	str	r3, [r2, #112]	; 0x70
 8006f16:	4b59      	ldr	r3, [pc, #356]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f1a:	4a58      	ldr	r2, [pc, #352]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006f1c:	f023 0304 	bic.w	r3, r3, #4
 8006f20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d015      	beq.n	8006f56 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f2a:	f7fc ff91 	bl	8003e50 <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f30:	e00a      	b.n	8006f48 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f32:	f7fc ff8d 	bl	8003e50 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d901      	bls.n	8006f48 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e0d8      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f48:	4b4c      	ldr	r3, [pc, #304]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0ee      	beq.n	8006f32 <HAL_RCC_OscConfig+0x386>
 8006f54:	e014      	b.n	8006f80 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f56:	f7fc ff7b 	bl	8003e50 <HAL_GetTick>
 8006f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f5c:	e00a      	b.n	8006f74 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f5e:	f7fc ff77 	bl	8003e50 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e0c2      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f74:	4b41      	ldr	r3, [pc, #260]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1ee      	bne.n	8006f5e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d105      	bne.n	8006f92 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f86:	4b3d      	ldr	r3, [pc, #244]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	4a3c      	ldr	r2, [pc, #240]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 80ae 	beq.w	80070f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f9c:	4b37      	ldr	r3, [pc, #220]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f003 030c 	and.w	r3, r3, #12
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d06d      	beq.n	8007084 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d14b      	bne.n	8007048 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fb0:	4b32      	ldr	r3, [pc, #200]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a31      	ldr	r2, [pc, #196]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fc ff48 	bl	8003e50 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fc4:	f7fc ff44 	bl	8003e50 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e091      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fd6:	4b29      	ldr	r3, [pc, #164]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1f0      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69da      	ldr	r2, [r3, #28]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	019b      	lsls	r3, r3, #6
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	085b      	lsrs	r3, r3, #1
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	041b      	lsls	r3, r3, #16
 8006ffe:	431a      	orrs	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	061b      	lsls	r3, r3, #24
 8007006:	431a      	orrs	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800700c:	071b      	lsls	r3, r3, #28
 800700e:	491b      	ldr	r1, [pc, #108]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8007010:	4313      	orrs	r3, r2
 8007012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007014:	4b19      	ldr	r3, [pc, #100]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a18      	ldr	r2, [pc, #96]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 800701a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800701e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007020:	f7fc ff16 	bl	8003e50 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007028:	f7fc ff12 	bl	8003e50 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e05f      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800703a:	4b10      	ldr	r3, [pc, #64]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0f0      	beq.n	8007028 <HAL_RCC_OscConfig+0x47c>
 8007046:	e057      	b.n	80070f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007048:	4b0c      	ldr	r3, [pc, #48]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a0b      	ldr	r2, [pc, #44]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 800704e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007052:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007054:	f7fc fefc 	bl	8003e50 <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800705c:	f7fc fef8 	bl	8003e50 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e045      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800706e:	4b03      	ldr	r3, [pc, #12]	; (800707c <HAL_RCC_OscConfig+0x4d0>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f0      	bne.n	800705c <HAL_RCC_OscConfig+0x4b0>
 800707a:	e03d      	b.n	80070f8 <HAL_RCC_OscConfig+0x54c>
 800707c:	40023800 	.word	0x40023800
 8007080:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007084:	4b1f      	ldr	r3, [pc, #124]	; (8007104 <HAL_RCC_OscConfig+0x558>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d030      	beq.n	80070f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800709c:	429a      	cmp	r2, r3
 800709e:	d129      	bne.n	80070f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d122      	bne.n	80070f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070b4:	4013      	ands	r3, r2
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80070ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070bc:	4293      	cmp	r3, r2
 80070be:	d119      	bne.n	80070f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ca:	085b      	lsrs	r3, r3, #1
 80070cc:	3b01      	subs	r3, #1
 80070ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d10f      	bne.n	80070f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d107      	bne.n	80070f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d001      	beq.n	80070f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e000      	b.n	80070fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3718      	adds	r7, #24
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	40023800 	.word	0x40023800

08007108 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d101      	bne.n	8007120 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e0d0      	b.n	80072c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007120:	4b6a      	ldr	r3, [pc, #424]	; (80072cc <HAL_RCC_ClockConfig+0x1c4>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 030f 	and.w	r3, r3, #15
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d910      	bls.n	8007150 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800712e:	4b67      	ldr	r3, [pc, #412]	; (80072cc <HAL_RCC_ClockConfig+0x1c4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f023 020f 	bic.w	r2, r3, #15
 8007136:	4965      	ldr	r1, [pc, #404]	; (80072cc <HAL_RCC_ClockConfig+0x1c4>)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	4313      	orrs	r3, r2
 800713c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800713e:	4b63      	ldr	r3, [pc, #396]	; (80072cc <HAL_RCC_ClockConfig+0x1c4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 030f 	and.w	r3, r3, #15
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d001      	beq.n	8007150 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e0b8      	b.n	80072c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d020      	beq.n	800719e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007168:	4b59      	ldr	r3, [pc, #356]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	4a58      	ldr	r2, [pc, #352]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 800716e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007172:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 0308 	and.w	r3, r3, #8
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007180:	4b53      	ldr	r3, [pc, #332]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	4a52      	ldr	r2, [pc, #328]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007186:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800718a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800718c:	4b50      	ldr	r3, [pc, #320]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	494d      	ldr	r1, [pc, #308]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 800719a:	4313      	orrs	r3, r2
 800719c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d040      	beq.n	800722c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d107      	bne.n	80071c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071b2:	4b47      	ldr	r3, [pc, #284]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d115      	bne.n	80071ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e07f      	b.n	80072c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d107      	bne.n	80071da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071ca:	4b41      	ldr	r3, [pc, #260]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d109      	bne.n	80071ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e073      	b.n	80072c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071da:	4b3d      	ldr	r3, [pc, #244]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e06b      	b.n	80072c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071ea:	4b39      	ldr	r3, [pc, #228]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f023 0203 	bic.w	r2, r3, #3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	4936      	ldr	r1, [pc, #216]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 80071f8:	4313      	orrs	r3, r2
 80071fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071fc:	f7fc fe28 	bl	8003e50 <HAL_GetTick>
 8007200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007202:	e00a      	b.n	800721a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007204:	f7fc fe24 	bl	8003e50 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007212:	4293      	cmp	r3, r2
 8007214:	d901      	bls.n	800721a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e053      	b.n	80072c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721a:	4b2d      	ldr	r3, [pc, #180]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f003 020c 	and.w	r2, r3, #12
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	429a      	cmp	r2, r3
 800722a:	d1eb      	bne.n	8007204 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800722c:	4b27      	ldr	r3, [pc, #156]	; (80072cc <HAL_RCC_ClockConfig+0x1c4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 030f 	and.w	r3, r3, #15
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d210      	bcs.n	800725c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800723a:	4b24      	ldr	r3, [pc, #144]	; (80072cc <HAL_RCC_ClockConfig+0x1c4>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f023 020f 	bic.w	r2, r3, #15
 8007242:	4922      	ldr	r1, [pc, #136]	; (80072cc <HAL_RCC_ClockConfig+0x1c4>)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	4313      	orrs	r3, r2
 8007248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800724a:	4b20      	ldr	r3, [pc, #128]	; (80072cc <HAL_RCC_ClockConfig+0x1c4>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	429a      	cmp	r2, r3
 8007256:	d001      	beq.n	800725c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e032      	b.n	80072c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b00      	cmp	r3, #0
 8007266:	d008      	beq.n	800727a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007268:	4b19      	ldr	r3, [pc, #100]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	4916      	ldr	r1, [pc, #88]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007276:	4313      	orrs	r3, r2
 8007278:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0308 	and.w	r3, r3, #8
 8007282:	2b00      	cmp	r3, #0
 8007284:	d009      	beq.n	800729a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007286:	4b12      	ldr	r3, [pc, #72]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	00db      	lsls	r3, r3, #3
 8007294:	490e      	ldr	r1, [pc, #56]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 8007296:	4313      	orrs	r3, r2
 8007298:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800729a:	f000 f821 	bl	80072e0 <HAL_RCC_GetSysClockFreq>
 800729e:	4602      	mov	r2, r0
 80072a0:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <HAL_RCC_ClockConfig+0x1c8>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	091b      	lsrs	r3, r3, #4
 80072a6:	f003 030f 	and.w	r3, r3, #15
 80072aa:	490a      	ldr	r1, [pc, #40]	; (80072d4 <HAL_RCC_ClockConfig+0x1cc>)
 80072ac:	5ccb      	ldrb	r3, [r1, r3]
 80072ae:	fa22 f303 	lsr.w	r3, r2, r3
 80072b2:	4a09      	ldr	r2, [pc, #36]	; (80072d8 <HAL_RCC_ClockConfig+0x1d0>)
 80072b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80072b6:	4b09      	ldr	r3, [pc, #36]	; (80072dc <HAL_RCC_ClockConfig+0x1d4>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7fc fd84 	bl	8003dc8 <HAL_InitTick>

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	40023c00 	.word	0x40023c00
 80072d0:	40023800 	.word	0x40023800
 80072d4:	0800eca8 	.word	0x0800eca8
 80072d8:	20000000 	.word	0x20000000
 80072dc:	20000038 	.word	0x20000038

080072e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072e4:	b090      	sub	sp, #64	; 0x40
 80072e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80072e8:	2300      	movs	r3, #0
 80072ea:	637b      	str	r3, [r7, #52]	; 0x34
 80072ec:	2300      	movs	r3, #0
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072f0:	2300      	movs	r3, #0
 80072f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072f8:	4b59      	ldr	r3, [pc, #356]	; (8007460 <HAL_RCC_GetSysClockFreq+0x180>)
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f003 030c 	and.w	r3, r3, #12
 8007300:	2b08      	cmp	r3, #8
 8007302:	d00d      	beq.n	8007320 <HAL_RCC_GetSysClockFreq+0x40>
 8007304:	2b08      	cmp	r3, #8
 8007306:	f200 80a1 	bhi.w	800744c <HAL_RCC_GetSysClockFreq+0x16c>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d002      	beq.n	8007314 <HAL_RCC_GetSysClockFreq+0x34>
 800730e:	2b04      	cmp	r3, #4
 8007310:	d003      	beq.n	800731a <HAL_RCC_GetSysClockFreq+0x3a>
 8007312:	e09b      	b.n	800744c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007314:	4b53      	ldr	r3, [pc, #332]	; (8007464 <HAL_RCC_GetSysClockFreq+0x184>)
 8007316:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007318:	e09b      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800731a:	4b53      	ldr	r3, [pc, #332]	; (8007468 <HAL_RCC_GetSysClockFreq+0x188>)
 800731c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800731e:	e098      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007320:	4b4f      	ldr	r3, [pc, #316]	; (8007460 <HAL_RCC_GetSysClockFreq+0x180>)
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007328:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800732a:	4b4d      	ldr	r3, [pc, #308]	; (8007460 <HAL_RCC_GetSysClockFreq+0x180>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d028      	beq.n	8007388 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007336:	4b4a      	ldr	r3, [pc, #296]	; (8007460 <HAL_RCC_GetSysClockFreq+0x180>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	099b      	lsrs	r3, r3, #6
 800733c:	2200      	movs	r2, #0
 800733e:	623b      	str	r3, [r7, #32]
 8007340:	627a      	str	r2, [r7, #36]	; 0x24
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007348:	2100      	movs	r1, #0
 800734a:	4b47      	ldr	r3, [pc, #284]	; (8007468 <HAL_RCC_GetSysClockFreq+0x188>)
 800734c:	fb03 f201 	mul.w	r2, r3, r1
 8007350:	2300      	movs	r3, #0
 8007352:	fb00 f303 	mul.w	r3, r0, r3
 8007356:	4413      	add	r3, r2
 8007358:	4a43      	ldr	r2, [pc, #268]	; (8007468 <HAL_RCC_GetSysClockFreq+0x188>)
 800735a:	fba0 1202 	umull	r1, r2, r0, r2
 800735e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007360:	460a      	mov	r2, r1
 8007362:	62ba      	str	r2, [r7, #40]	; 0x28
 8007364:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007366:	4413      	add	r3, r2
 8007368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800736a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736c:	2200      	movs	r2, #0
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	61fa      	str	r2, [r7, #28]
 8007372:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007376:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800737a:	f7f8 ff65 	bl	8000248 <__aeabi_uldivmod>
 800737e:	4602      	mov	r2, r0
 8007380:	460b      	mov	r3, r1
 8007382:	4613      	mov	r3, r2
 8007384:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007386:	e053      	b.n	8007430 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007388:	4b35      	ldr	r3, [pc, #212]	; (8007460 <HAL_RCC_GetSysClockFreq+0x180>)
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	099b      	lsrs	r3, r3, #6
 800738e:	2200      	movs	r2, #0
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	617a      	str	r2, [r7, #20]
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800739a:	f04f 0b00 	mov.w	fp, #0
 800739e:	4652      	mov	r2, sl
 80073a0:	465b      	mov	r3, fp
 80073a2:	f04f 0000 	mov.w	r0, #0
 80073a6:	f04f 0100 	mov.w	r1, #0
 80073aa:	0159      	lsls	r1, r3, #5
 80073ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80073b0:	0150      	lsls	r0, r2, #5
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	ebb2 080a 	subs.w	r8, r2, sl
 80073ba:	eb63 090b 	sbc.w	r9, r3, fp
 80073be:	f04f 0200 	mov.w	r2, #0
 80073c2:	f04f 0300 	mov.w	r3, #0
 80073c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80073ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80073ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80073d2:	ebb2 0408 	subs.w	r4, r2, r8
 80073d6:	eb63 0509 	sbc.w	r5, r3, r9
 80073da:	f04f 0200 	mov.w	r2, #0
 80073de:	f04f 0300 	mov.w	r3, #0
 80073e2:	00eb      	lsls	r3, r5, #3
 80073e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073e8:	00e2      	lsls	r2, r4, #3
 80073ea:	4614      	mov	r4, r2
 80073ec:	461d      	mov	r5, r3
 80073ee:	eb14 030a 	adds.w	r3, r4, sl
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	eb45 030b 	adc.w	r3, r5, fp
 80073f8:	607b      	str	r3, [r7, #4]
 80073fa:	f04f 0200 	mov.w	r2, #0
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007406:	4629      	mov	r1, r5
 8007408:	028b      	lsls	r3, r1, #10
 800740a:	4621      	mov	r1, r4
 800740c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007410:	4621      	mov	r1, r4
 8007412:	028a      	lsls	r2, r1, #10
 8007414:	4610      	mov	r0, r2
 8007416:	4619      	mov	r1, r3
 8007418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741a:	2200      	movs	r2, #0
 800741c:	60bb      	str	r3, [r7, #8]
 800741e:	60fa      	str	r2, [r7, #12]
 8007420:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007424:	f7f8 ff10 	bl	8000248 <__aeabi_uldivmod>
 8007428:	4602      	mov	r2, r0
 800742a:	460b      	mov	r3, r1
 800742c:	4613      	mov	r3, r2
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007430:	4b0b      	ldr	r3, [pc, #44]	; (8007460 <HAL_RCC_GetSysClockFreq+0x180>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	3301      	adds	r3, #1
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007440:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007444:	fbb2 f3f3 	udiv	r3, r2, r3
 8007448:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800744a:	e002      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <HAL_RCC_GetSysClockFreq+0x184>)
 800744e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007454:	4618      	mov	r0, r3
 8007456:	3740      	adds	r7, #64	; 0x40
 8007458:	46bd      	mov	sp, r7
 800745a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800745e:	bf00      	nop
 8007460:	40023800 	.word	0x40023800
 8007464:	00f42400 	.word	0x00f42400
 8007468:	017d7840 	.word	0x017d7840

0800746c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007470:	4b03      	ldr	r3, [pc, #12]	; (8007480 <HAL_RCC_GetHCLKFreq+0x14>)
 8007472:	681b      	ldr	r3, [r3, #0]
}
 8007474:	4618      	mov	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	20000000 	.word	0x20000000

08007484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007488:	f7ff fff0 	bl	800746c <HAL_RCC_GetHCLKFreq>
 800748c:	4602      	mov	r2, r0
 800748e:	4b05      	ldr	r3, [pc, #20]	; (80074a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	0a9b      	lsrs	r3, r3, #10
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	4903      	ldr	r1, [pc, #12]	; (80074a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800749a:	5ccb      	ldrb	r3, [r1, r3]
 800749c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	40023800 	.word	0x40023800
 80074a8:	0800ecb8 	.word	0x0800ecb8

080074ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80074b0:	f7ff ffdc 	bl	800746c <HAL_RCC_GetHCLKFreq>
 80074b4:	4602      	mov	r2, r0
 80074b6:	4b05      	ldr	r3, [pc, #20]	; (80074cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	0b5b      	lsrs	r3, r3, #13
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	4903      	ldr	r1, [pc, #12]	; (80074d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80074c2:	5ccb      	ldrb	r3, [r1, r3]
 80074c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40023800 	.word	0x40023800
 80074d0:	0800ecb8 	.word	0x0800ecb8

080074d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80074e0:	2300      	movs	r3, #0
 80074e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d012      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80074fc:	4b69      	ldr	r3, [pc, #420]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	4a68      	ldr	r2, [pc, #416]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007502:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007506:	6093      	str	r3, [r2, #8]
 8007508:	4b66      	ldr	r3, [pc, #408]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800750a:	689a      	ldr	r2, [r3, #8]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007510:	4964      	ldr	r1, [pc, #400]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007512:	4313      	orrs	r3, r2
 8007514:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800751e:	2301      	movs	r3, #1
 8007520:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d017      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800752e:	4b5d      	ldr	r3, [pc, #372]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007534:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753c:	4959      	ldr	r1, [pc, #356]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800753e:	4313      	orrs	r3, r2
 8007540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007548:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800754c:	d101      	bne.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800754e:	2301      	movs	r3, #1
 8007550:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800755a:	2301      	movs	r3, #1
 800755c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d017      	beq.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800756a:	4b4e      	ldr	r3, [pc, #312]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800756c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007570:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	494a      	ldr	r1, [pc, #296]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007588:	d101      	bne.n	800758e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800758a:	2301      	movs	r3, #1
 800758c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007596:	2301      	movs	r3, #1
 8007598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80075a6:	2301      	movs	r3, #1
 80075a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 808b 	beq.w	80076ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075b8:	4b3a      	ldr	r3, [pc, #232]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	4a39      	ldr	r2, [pc, #228]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075c2:	6413      	str	r3, [r2, #64]	; 0x40
 80075c4:	4b37      	ldr	r3, [pc, #220]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075cc:	60bb      	str	r3, [r7, #8]
 80075ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80075d0:	4b35      	ldr	r3, [pc, #212]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a34      	ldr	r2, [pc, #208]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80075d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075dc:	f7fc fc38 	bl	8003e50 <HAL_GetTick>
 80075e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80075e2:	e008      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075e4:	f7fc fc34 	bl	8003e50 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b64      	cmp	r3, #100	; 0x64
 80075f0:	d901      	bls.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e38f      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80075f6:	4b2c      	ldr	r3, [pc, #176]	; (80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0f0      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007602:	4b28      	ldr	r3, [pc, #160]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007606:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800760a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d035      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	429a      	cmp	r2, r3
 800761e:	d02e      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007620:	4b20      	ldr	r3, [pc, #128]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007624:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007628:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800762a:	4b1e      	ldr	r3, [pc, #120]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762e:	4a1d      	ldr	r2, [pc, #116]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007634:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007636:	4b1b      	ldr	r3, [pc, #108]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763a:	4a1a      	ldr	r2, [pc, #104]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800763c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007640:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007642:	4a18      	ldr	r2, [pc, #96]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007648:	4b16      	ldr	r3, [pc, #88]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800764a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b01      	cmp	r3, #1
 8007652:	d114      	bne.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007654:	f7fc fbfc 	bl	8003e50 <HAL_GetTick>
 8007658:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800765a:	e00a      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800765c:	f7fc fbf8 	bl	8003e50 <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	f241 3288 	movw	r2, #5000	; 0x1388
 800766a:	4293      	cmp	r3, r2
 800766c:	d901      	bls.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e351      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007672:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0ee      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800768a:	d111      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800768c:	4b05      	ldr	r3, [pc, #20]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007698:	4b04      	ldr	r3, [pc, #16]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800769a:	400b      	ands	r3, r1
 800769c:	4901      	ldr	r1, [pc, #4]	; (80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	608b      	str	r3, [r1, #8]
 80076a2:	e00b      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80076a4:	40023800 	.word	0x40023800
 80076a8:	40007000 	.word	0x40007000
 80076ac:	0ffffcff 	.word	0x0ffffcff
 80076b0:	4bac      	ldr	r3, [pc, #688]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	4aab      	ldr	r2, [pc, #684]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80076ba:	6093      	str	r3, [r2, #8]
 80076bc:	4ba9      	ldr	r3, [pc, #676]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076c8:	49a6      	ldr	r1, [pc, #664]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0310 	and.w	r3, r3, #16
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d010      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076da:	4ba2      	ldr	r3, [pc, #648]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e0:	4aa0      	ldr	r2, [pc, #640]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80076ea:	4b9e      	ldr	r3, [pc, #632]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	499b      	ldr	r1, [pc, #620]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00a      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007708:	4b96      	ldr	r3, [pc, #600]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007716:	4993      	ldr	r1, [pc, #588]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007718:	4313      	orrs	r3, r2
 800771a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800772a:	4b8e      	ldr	r3, [pc, #568]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800772c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007730:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007738:	498a      	ldr	r1, [pc, #552]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800773a:	4313      	orrs	r3, r2
 800773c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00a      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800774c:	4b85      	ldr	r3, [pc, #532]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800774e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800775a:	4982      	ldr	r1, [pc, #520]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d00a      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800776e:	4b7d      	ldr	r3, [pc, #500]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800777c:	4979      	ldr	r1, [pc, #484]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00a      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007790:	4b74      	ldr	r3, [pc, #464]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007796:	f023 0203 	bic.w	r2, r3, #3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779e:	4971      	ldr	r1, [pc, #452]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077a0:	4313      	orrs	r3, r2
 80077a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077b2:	4b6c      	ldr	r3, [pc, #432]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b8:	f023 020c 	bic.w	r2, r3, #12
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c0:	4968      	ldr	r1, [pc, #416]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d00a      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80077d4:	4b63      	ldr	r3, [pc, #396]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e2:	4960      	ldr	r1, [pc, #384]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077e4:	4313      	orrs	r3, r2
 80077e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d00a      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80077f6:	4b5b      	ldr	r3, [pc, #364]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007804:	4957      	ldr	r1, [pc, #348]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007806:	4313      	orrs	r3, r2
 8007808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00a      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007818:	4b52      	ldr	r3, [pc, #328]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800781a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800781e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007826:	494f      	ldr	r1, [pc, #316]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007828:	4313      	orrs	r3, r2
 800782a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800783a:	4b4a      	ldr	r3, [pc, #296]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800783c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007840:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007848:	4946      	ldr	r1, [pc, #280]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800785c:	4b41      	ldr	r3, [pc, #260]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800785e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007862:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786a:	493e      	ldr	r1, [pc, #248]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800786c:	4313      	orrs	r3, r2
 800786e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d00a      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800787e:	4b39      	ldr	r3, [pc, #228]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007884:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800788c:	4935      	ldr	r1, [pc, #212]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00a      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078a0:	4b30      	ldr	r3, [pc, #192]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078ae:	492d      	ldr	r1, [pc, #180]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d011      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80078c2:	4b28      	ldr	r3, [pc, #160]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078d0:	4924      	ldr	r1, [pc, #144]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078e0:	d101      	bne.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80078e2:	2301      	movs	r3, #1
 80078e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f003 0308 	and.w	r3, r3, #8
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80078f2:	2301      	movs	r3, #1
 80078f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007902:	4b18      	ldr	r3, [pc, #96]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007908:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007910:	4914      	ldr	r1, [pc, #80]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007912:	4313      	orrs	r3, r2
 8007914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00b      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007924:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007934:	490b      	ldr	r1, [pc, #44]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007936:	4313      	orrs	r3, r2
 8007938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00f      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007948:	4b06      	ldr	r3, [pc, #24]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800794a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800794e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007958:	4902      	ldr	r1, [pc, #8]	; (8007964 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800795a:	4313      	orrs	r3, r2
 800795c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007960:	e002      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007962:	bf00      	nop
 8007964:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007974:	4b8a      	ldr	r3, [pc, #552]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800797a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007984:	4986      	ldr	r1, [pc, #536]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00b      	beq.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007998:	4b81      	ldr	r3, [pc, #516]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800799a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800799e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079a8:	497d      	ldr	r1, [pc, #500]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d006      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 80d6 	beq.w	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80079c4:	4b76      	ldr	r3, [pc, #472]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a75      	ldr	r2, [pc, #468]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d0:	f7fc fa3e 	bl	8003e50 <HAL_GetTick>
 80079d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079d6:	e008      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80079d8:	f7fc fa3a 	bl	8003e50 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b64      	cmp	r3, #100	; 0x64
 80079e4:	d901      	bls.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e195      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079ea:	4b6d      	ldr	r3, [pc, #436]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f0      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0301 	and.w	r3, r3, #1
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d021      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d11d      	bne.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007a0a:	4b65      	ldr	r3, [pc, #404]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a10:	0c1b      	lsrs	r3, r3, #16
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007a18:	4b61      	ldr	r3, [pc, #388]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a1e:	0e1b      	lsrs	r3, r3, #24
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	019a      	lsls	r2, r3, #6
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	041b      	lsls	r3, r3, #16
 8007a30:	431a      	orrs	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	061b      	lsls	r3, r3, #24
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	071b      	lsls	r3, r3, #28
 8007a3e:	4958      	ldr	r1, [pc, #352]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d004      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a5a:	d00a      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d02e      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a70:	d129      	bne.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007a72:	4b4b      	ldr	r3, [pc, #300]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a78:	0c1b      	lsrs	r3, r3, #16
 8007a7a:	f003 0303 	and.w	r3, r3, #3
 8007a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a80:	4b47      	ldr	r3, [pc, #284]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a86:	0f1b      	lsrs	r3, r3, #28
 8007a88:	f003 0307 	and.w	r3, r3, #7
 8007a8c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	019a      	lsls	r2, r3, #6
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	041b      	lsls	r3, r3, #16
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	061b      	lsls	r3, r3, #24
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	071b      	lsls	r3, r3, #28
 8007aa6:	493e      	ldr	r1, [pc, #248]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007aae:	4b3c      	ldr	r3, [pc, #240]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab4:	f023 021f 	bic.w	r2, r3, #31
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	3b01      	subs	r3, #1
 8007abe:	4938      	ldr	r1, [pc, #224]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01d      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ad2:	4b33      	ldr	r3, [pc, #204]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ad8:	0e1b      	lsrs	r3, r3, #24
 8007ada:	f003 030f 	and.w	r3, r3, #15
 8007ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ae0:	4b2f      	ldr	r3, [pc, #188]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ae6:	0f1b      	lsrs	r3, r3, #28
 8007ae8:	f003 0307 	and.w	r3, r3, #7
 8007aec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	019a      	lsls	r2, r3, #6
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	041b      	lsls	r3, r3, #16
 8007afa:	431a      	orrs	r2, r3
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	061b      	lsls	r3, r3, #24
 8007b00:	431a      	orrs	r2, r3
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	071b      	lsls	r3, r3, #28
 8007b06:	4926      	ldr	r1, [pc, #152]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d011      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	019a      	lsls	r2, r3, #6
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	041b      	lsls	r3, r3, #16
 8007b26:	431a      	orrs	r2, r3
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	061b      	lsls	r3, r3, #24
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	071b      	lsls	r3, r3, #28
 8007b36:	491a      	ldr	r1, [pc, #104]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b3e:	4b18      	ldr	r3, [pc, #96]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a17      	ldr	r2, [pc, #92]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b4a:	f7fc f981 	bl	8003e50 <HAL_GetTick>
 8007b4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b50:	e008      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007b52:	f7fc f97d 	bl	8003e50 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	2b64      	cmp	r3, #100	; 0x64
 8007b5e:	d901      	bls.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e0d8      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b64:	4b0e      	ldr	r3, [pc, #56]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0f0      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	f040 80ce 	bne.w	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b78:	4b09      	ldr	r3, [pc, #36]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a08      	ldr	r2, [pc, #32]	; (8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b84:	f7fc f964 	bl	8003e50 <HAL_GetTick>
 8007b88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b8a:	e00b      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b8c:	f7fc f960 	bl	8003e50 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b64      	cmp	r3, #100	; 0x64
 8007b98:	d904      	bls.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e0bb      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007b9e:	bf00      	nop
 8007ba0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ba4:	4b5e      	ldr	r3, [pc, #376]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bb0:	d0ec      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d009      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d02e      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d12a      	bne.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007bda:	4b51      	ldr	r3, [pc, #324]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be0:	0c1b      	lsrs	r3, r3, #16
 8007be2:	f003 0303 	and.w	r3, r3, #3
 8007be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007be8:	4b4d      	ldr	r3, [pc, #308]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bee:	0f1b      	lsrs	r3, r3, #28
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	019a      	lsls	r2, r3, #6
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	041b      	lsls	r3, r3, #16
 8007c00:	431a      	orrs	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	061b      	lsls	r3, r3, #24
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	071b      	lsls	r3, r3, #28
 8007c0e:	4944      	ldr	r1, [pc, #272]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007c16:	4b42      	ldr	r3, [pc, #264]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c1c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c24:	3b01      	subs	r3, #1
 8007c26:	021b      	lsls	r3, r3, #8
 8007c28:	493d      	ldr	r1, [pc, #244]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d022      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c44:	d11d      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c46:	4b36      	ldr	r3, [pc, #216]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4c:	0e1b      	lsrs	r3, r3, #24
 8007c4e:	f003 030f 	and.w	r3, r3, #15
 8007c52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007c54:	4b32      	ldr	r3, [pc, #200]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c5a:	0f1b      	lsrs	r3, r3, #28
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	019a      	lsls	r2, r3, #6
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a1b      	ldr	r3, [r3, #32]
 8007c6c:	041b      	lsls	r3, r3, #16
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	061b      	lsls	r3, r3, #24
 8007c74:	431a      	orrs	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	071b      	lsls	r3, r3, #28
 8007c7a:	4929      	ldr	r1, [pc, #164]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d028      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c8e:	4b24      	ldr	r3, [pc, #144]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c94:	0e1b      	lsrs	r3, r3, #24
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007c9c:	4b20      	ldr	r3, [pc, #128]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca2:	0c1b      	lsrs	r3, r3, #16
 8007ca4:	f003 0303 	and.w	r3, r3, #3
 8007ca8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	019a      	lsls	r2, r3, #6
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	041b      	lsls	r3, r3, #16
 8007cb4:	431a      	orrs	r2, r3
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	061b      	lsls	r3, r3, #24
 8007cba:	431a      	orrs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	071b      	lsls	r3, r3, #28
 8007cc2:	4917      	ldr	r1, [pc, #92]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007cca:	4b15      	ldr	r3, [pc, #84]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	4911      	ldr	r1, [pc, #68]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ce0:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a0e      	ldr	r2, [pc, #56]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cec:	f7fc f8b0 	bl	8003e50 <HAL_GetTick>
 8007cf0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007cf2:	e008      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007cf4:	f7fc f8ac 	bl	8003e50 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	2b64      	cmp	r3, #100	; 0x64
 8007d00:	d901      	bls.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e007      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d06:	4b06      	ldr	r3, [pc, #24]	; (8007d20 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d12:	d1ef      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3720      	adds	r7, #32
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	40023800 	.word	0x40023800

08007d24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007d30:	2300      	movs	r3, #0
 8007d32:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d42:	f040 80a3 	bne.w	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007d46:	4ba8      	ldr	r3, [pc, #672]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d4c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007d54:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d5c:	f000 808a 	beq.w	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d66:	f200 8093 	bhi.w	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d70:	d07d      	beq.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d78:	f200 808a 	bhi.w	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d004      	beq.n	8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d88:	d039      	beq.n	8007dfe <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007d8a:	e081      	b.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007d8c:	4b96      	ldr	r3, [pc, #600]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d108      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d98:	4b93      	ldr	r3, [pc, #588]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007da0:	4a92      	ldr	r2, [pc, #584]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da6:	613b      	str	r3, [r7, #16]
 8007da8:	e007      	b.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007daa:	4b8f      	ldr	r3, [pc, #572]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007db2:	4a8f      	ldr	r2, [pc, #572]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007dba:	4b8b      	ldr	r3, [pc, #556]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc0:	0e1b      	lsrs	r3, r3, #24
 8007dc2:	f003 030f 	and.w	r3, r3, #15
 8007dc6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007dc8:	4b87      	ldr	r3, [pc, #540]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dce:	099b      	lsrs	r3, r3, #6
 8007dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	fb03 f202 	mul.w	r2, r3, r2
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de0:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007de2:	4b81      	ldr	r3, [pc, #516]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007de8:	0a1b      	lsrs	r3, r3, #8
 8007dea:	f003 031f 	and.w	r3, r3, #31
 8007dee:	3301      	adds	r3, #1
 8007df0:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dfa:	617b      	str	r3, [r7, #20]
        break;
 8007dfc:	e049      	b.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007dfe:	4b7a      	ldr	r3, [pc, #488]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d108      	bne.n	8007e1c <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007e0a:	4b77      	ldr	r3, [pc, #476]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e12:	4a76      	ldr	r2, [pc, #472]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e18:	613b      	str	r3, [r7, #16]
 8007e1a:	e007      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007e1c:	4b72      	ldr	r3, [pc, #456]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e24:	4a72      	ldr	r2, [pc, #456]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007e2c:	4b6e      	ldr	r3, [pc, #440]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e32:	0e1b      	lsrs	r3, r3, #24
 8007e34:	f003 030f 	and.w	r3, r3, #15
 8007e38:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007e3a:	4b6b      	ldr	r3, [pc, #428]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e40:	099b      	lsrs	r3, r3, #6
 8007e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	fb03 f202 	mul.w	r2, r3, r2
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e52:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007e54:	4b64      	ldr	r3, [pc, #400]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e5a:	f003 031f 	and.w	r3, r3, #31
 8007e5e:	3301      	adds	r3, #1
 8007e60:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e6a:	617b      	str	r3, [r7, #20]
        break;
 8007e6c:	e011      	b.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007e6e:	4b61      	ldr	r3, [pc, #388]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007e70:	617b      	str	r3, [r7, #20]
        break;
 8007e72:	e00e      	b.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007e74:	4b5c      	ldr	r3, [pc, #368]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8007e80:	4b5a      	ldr	r3, [pc, #360]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007e82:	617b      	str	r3, [r7, #20]
        break;
 8007e84:	e005      	b.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8007e86:	4b5a      	ldr	r3, [pc, #360]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007e88:	617b      	str	r3, [r7, #20]
        break;
 8007e8a:	e002      	b.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8007e8c:	bf00      	nop
 8007e8e:	e000      	b.n	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8007e90:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e98:	f040 80a3 	bne.w	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007e9c:	4b52      	ldr	r3, [pc, #328]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ea2:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007eaa:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007eb2:	f000 808a 	beq.w	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007ebc:	f200 809c 	bhi.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ec6:	d07d      	beq.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ece:	f200 8093 	bhi.w	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d004      	beq.n	8007ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ede:	d039      	beq.n	8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007ee0:	e08a      	b.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007ee2:	4b41      	ldr	r3, [pc, #260]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d108      	bne.n	8007f00 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007eee:	4b3e      	ldr	r3, [pc, #248]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ef6:	4a3d      	ldr	r2, [pc, #244]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efc:	613b      	str	r3, [r7, #16]
 8007efe:	e007      	b.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f00:	4b39      	ldr	r3, [pc, #228]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f08:	4a39      	ldr	r2, [pc, #228]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f0e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007f10:	4b35      	ldr	r3, [pc, #212]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f16:	0e1b      	lsrs	r3, r3, #24
 8007f18:	f003 030f 	and.w	r3, r3, #15
 8007f1c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007f1e:	4b32      	ldr	r3, [pc, #200]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f24:	099b      	lsrs	r3, r3, #6
 8007f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2a:	693a      	ldr	r2, [r7, #16]
 8007f2c:	fb03 f202 	mul.w	r2, r3, r2
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f36:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007f38:	4b2b      	ldr	r3, [pc, #172]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f3e:	0a1b      	lsrs	r3, r3, #8
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	3301      	adds	r3, #1
 8007f46:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007f48:	697a      	ldr	r2, [r7, #20]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f50:	617b      	str	r3, [r7, #20]
        break;
 8007f52:	e052      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f54:	4b24      	ldr	r3, [pc, #144]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d108      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f60:	4b21      	ldr	r3, [pc, #132]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f68:	4a20      	ldr	r2, [pc, #128]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6e:	613b      	str	r3, [r7, #16]
 8007f70:	e007      	b.n	8007f82 <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f72:	4b1d      	ldr	r3, [pc, #116]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f7a:	4a1d      	ldr	r2, [pc, #116]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f80:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007f82:	4b19      	ldr	r3, [pc, #100]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f88:	0e1b      	lsrs	r3, r3, #24
 8007f8a:	f003 030f 	and.w	r3, r3, #15
 8007f8e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007f90:	4b15      	ldr	r3, [pc, #84]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f96:	099b      	lsrs	r3, r3, #6
 8007f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	fb03 f202 	mul.w	r2, r3, r2
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007faa:	4b0f      	ldr	r3, [pc, #60]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb0:	f003 031f 	and.w	r3, r3, #31
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc0:	617b      	str	r3, [r7, #20]
        break;
 8007fc2:	e01a      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fc4:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007fc6:	617b      	str	r3, [r7, #20]
        break;
 8007fc8:	e017      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007fca:	4b07      	ldr	r3, [pc, #28]	; (8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d102      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8007fd6:	4b05      	ldr	r3, [pc, #20]	; (8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007fd8:	617b      	str	r3, [r7, #20]
        break;
 8007fda:	e00e      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8007fdc:	4b04      	ldr	r3, [pc, #16]	; (8007ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007fde:	617b      	str	r3, [r7, #20]
        break;
 8007fe0:	e00b      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 8007fe2:	bf00      	nop
 8007fe4:	e009      	b.n	8007ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007fe6:	bf00      	nop
 8007fe8:	40023800 	.word	0x40023800
 8007fec:	00f42400 	.word	0x00f42400
 8007ff0:	017d7840 	.word	0x017d7840
 8007ff4:	00bb8000 	.word	0x00bb8000
        break;
 8007ff8:	bf00      	nop

  return frequency;
 8007ffa:	697b      	ldr	r3, [r7, #20]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	371c      	adds	r7, #28
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e071      	b.n	8008102 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	7f5b      	ldrb	r3, [r3, #29]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	d105      	bne.n	8008034 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7f9 fd30 	bl	8001a94 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	f003 0310 	and.w	r3, r3, #16
 8008044:	2b10      	cmp	r3, #16
 8008046:	d053      	beq.n	80080f0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	22ca      	movs	r2, #202	; 0xca
 800804e:	625a      	str	r2, [r3, #36]	; 0x24
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2253      	movs	r2, #83	; 0x53
 8008056:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f881 	bl	8008160 <RTC_EnterInitMode>
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d12a      	bne.n	80080be <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	6899      	ldr	r1, [r3, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	4b26      	ldr	r3, [pc, #152]	; (800810c <HAL_RTC_Init+0x104>)
 8008074:	400b      	ands	r3, r1
 8008076:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6899      	ldr	r1, [r3, #8]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	431a      	orrs	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	68d2      	ldr	r2, [r2, #12]
 800809e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6919      	ldr	r1, [r3, #16]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	041a      	lsls	r2, r3, #16
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f88a 	bl	80081ce <RTC_ExitInitMode>
 80080ba:	4603      	mov	r3, r0
 80080bc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80080be:	7bfb      	ldrb	r3, [r7, #15]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d110      	bne.n	80080e6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0208 	bic.w	r2, r2, #8
 80080d2:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	699a      	ldr	r2, [r3, #24]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	430a      	orrs	r2, r1
 80080e4:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	22ff      	movs	r2, #255	; 0xff
 80080ec:	625a      	str	r2, [r3, #36]	; 0x24
 80080ee:	e001      	b.n	80080f4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d102      	bne.n	8008100 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	ff8fffbf 	.word	0xff8fffbf

08008110 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800812a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800812c:	f7fb fe90 	bl	8003e50 <HAL_GetTick>
 8008130:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008132:	e009      	b.n	8008148 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008134:	f7fb fe8c 	bl	8003e50 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008142:	d901      	bls.n	8008148 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e007      	b.n	8008158 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f003 0320 	and.w	r3, r3, #32
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0ee      	beq.n	8008134 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	d122      	bne.n	80081c4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800818c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800818e:	f7fb fe5f 	bl	8003e50 <HAL_GetTick>
 8008192:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008194:	e00c      	b.n	80081b0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008196:	f7fb fe5b 	bl	8003e50 <HAL_GetTick>
 800819a:	4602      	mov	r2, r0
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	1ad3      	subs	r3, r2, r3
 80081a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80081a4:	d904      	bls.n	80081b0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2204      	movs	r2, #4
 80081aa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d102      	bne.n	80081c4 <RTC_EnterInitMode+0x64>
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d1e8      	bne.n	8008196 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3710      	adds	r7, #16
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}

080081ce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80081ce:	b580      	push	{r7, lr}
 80081d0:	b084      	sub	sp, #16
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68da      	ldr	r2, [r3, #12]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081e8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f003 0320 	and.w	r3, r3, #32
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ff89 	bl	8008110 <HAL_RTC_WaitForSynchro>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2204      	movs	r2, #4
 8008208:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800820e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008224:	2300      	movs	r3, #0
 8008226:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8008228:	2300      	movs	r3, #0
 800822a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008232:	2301      	movs	r3, #1
 8008234:	e156      	b.n	80084e4 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b00      	cmp	r3, #0
 8008240:	d106      	bne.n	8008250 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7fa f820 	bl	8002290 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2202      	movs	r2, #2
 8008254:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 fa5f 	bl	800871c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	2b02      	cmp	r3, #2
 8008264:	d00c      	beq.n	8008280 <HAL_SAI_Init+0x68>
 8008266:	2b02      	cmp	r3, #2
 8008268:	d80d      	bhi.n	8008286 <HAL_SAI_Init+0x6e>
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <HAL_SAI_Init+0x5c>
 800826e:	2b01      	cmp	r3, #1
 8008270:	d003      	beq.n	800827a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8008272:	e008      	b.n	8008286 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	61fb      	str	r3, [r7, #28]
      break;
 8008278:	e006      	b.n	8008288 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800827a:	2310      	movs	r3, #16
 800827c:	61fb      	str	r3, [r7, #28]
      break;
 800827e:	e003      	b.n	8008288 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008280:	2320      	movs	r3, #32
 8008282:	61fb      	str	r3, [r7, #28]
      break;
 8008284:	e000      	b.n	8008288 <HAL_SAI_Init+0x70>
      break;
 8008286:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	2b03      	cmp	r3, #3
 800828e:	d81e      	bhi.n	80082ce <HAL_SAI_Init+0xb6>
 8008290:	a201      	add	r2, pc, #4	; (adr r2, 8008298 <HAL_SAI_Init+0x80>)
 8008292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008296:	bf00      	nop
 8008298:	080082a9 	.word	0x080082a9
 800829c:	080082af 	.word	0x080082af
 80082a0:	080082b7 	.word	0x080082b7
 80082a4:	080082bf 	.word	0x080082bf
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	617b      	str	r3, [r7, #20]
    }
    break;
 80082ac:	e010      	b.n	80082d0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80082ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082b2:	617b      	str	r3, [r7, #20]
    }
    break;
 80082b4:	e00c      	b.n	80082d0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80082b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082ba:	617b      	str	r3, [r7, #20]
    }
    break;
 80082bc:	e008      	b.n	80082d0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80082be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80082c2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	61fb      	str	r3, [r7, #28]
    }
    break;
 80082cc:	e000      	b.n	80082d0 <HAL_SAI_Init+0xb8>
    default:
      break;
 80082ce:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a85      	ldr	r2, [pc, #532]	; (80084ec <HAL_SAI_Init+0x2d4>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d004      	beq.n	80082e4 <HAL_SAI_Init+0xcc>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a84      	ldr	r2, [pc, #528]	; (80084f0 <HAL_SAI_Init+0x2d8>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d103      	bne.n	80082ec <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80082e4:	4a83      	ldr	r2, [pc, #524]	; (80084f4 <HAL_SAI_Init+0x2dc>)
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	e002      	b.n	80082f2 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80082ec:	4a82      	ldr	r2, [pc, #520]	; (80084f8 <HAL_SAI_Init+0x2e0>)
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d04c      	beq.n	8008394 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80082fa:	2300      	movs	r3, #0
 80082fc:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a7a      	ldr	r2, [pc, #488]	; (80084ec <HAL_SAI_Init+0x2d4>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d004      	beq.n	8008312 <HAL_SAI_Init+0xfa>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a78      	ldr	r2, [pc, #480]	; (80084f0 <HAL_SAI_Init+0x2d8>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d104      	bne.n	800831c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008312:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008316:	f7ff fd05 	bl	8007d24 <HAL_RCCEx_GetPeriphCLKFreq>
 800831a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a76      	ldr	r2, [pc, #472]	; (80084fc <HAL_SAI_Init+0x2e4>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d004      	beq.n	8008330 <HAL_SAI_Init+0x118>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a75      	ldr	r2, [pc, #468]	; (8008500 <HAL_SAI_Init+0x2e8>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d104      	bne.n	800833a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008330:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008334:	f7ff fcf6 	bl	8007d24 <HAL_RCCEx_GetPeriphCLKFreq>
 8008338:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	461a      	mov	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	025b      	lsls	r3, r3, #9
 800834c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008350:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4a6b      	ldr	r2, [pc, #428]	; (8008504 <HAL_SAI_Init+0x2ec>)
 8008356:	fba2 2303 	umull	r2, r3, r2, r3
 800835a:	08da      	lsrs	r2, r3, #3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8008360:	68f9      	ldr	r1, [r7, #12]
 8008362:	4b68      	ldr	r3, [pc, #416]	; (8008504 <HAL_SAI_Init+0x2ec>)
 8008364:	fba3 2301 	umull	r2, r3, r3, r1
 8008368:	08da      	lsrs	r2, r3, #3
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	1aca      	subs	r2, r1, r3
 8008374:	2a08      	cmp	r2, #8
 8008376:	d904      	bls.n	8008382 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008386:	2b04      	cmp	r3, #4
 8008388:	d104      	bne.n	8008394 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	085a      	lsrs	r2, r3, #1
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <HAL_SAI_Init+0x18c>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d109      	bne.n	80083b8 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d101      	bne.n	80083b0 <HAL_SAI_Init+0x198>
 80083ac:	2300      	movs	r3, #0
 80083ae:	e001      	b.n	80083b4 <HAL_SAI_Init+0x19c>
 80083b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083b4:	61bb      	str	r3, [r7, #24]
 80083b6:	e008      	b.n	80083ca <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083bc:	2b01      	cmp	r3, #1
 80083be:	d102      	bne.n	80083c6 <HAL_SAI_Init+0x1ae>
 80083c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80083c4:	e000      	b.n	80083c8 <HAL_SAI_Init+0x1b0>
 80083c6:	2300      	movs	r3, #0
 80083c8:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	6819      	ldr	r1, [r3, #0]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4b4c      	ldr	r3, [pc, #304]	; (8008508 <HAL_SAI_Init+0x2f0>)
 80083d6:	400b      	ands	r3, r1
 80083d8:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	6819      	ldr	r1, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80083ee:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f4:	431a      	orrs	r2, r3
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8008402:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800840e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a1b      	ldr	r3, [r3, #32]
 8008414:	051b      	lsls	r3, r3, #20
 8008416:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	430a      	orrs	r2, r1
 800841e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6859      	ldr	r1, [r3, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4b38      	ldr	r3, [pc, #224]	; (800850c <HAL_SAI_Init+0x2f4>)
 800842c:	400b      	ands	r3, r1
 800842e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6859      	ldr	r1, [r3, #4]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	430a      	orrs	r2, r1
 800844c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6899      	ldr	r1, [r3, #8]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	4b2d      	ldr	r3, [pc, #180]	; (8008510 <HAL_SAI_Init+0x2f8>)
 800845a:	400b      	ands	r3, r1
 800845c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6899      	ldr	r1, [r3, #8]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008468:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800846e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8008474:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 800847a:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008480:	3b01      	subs	r3, #1
 8008482:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8008484:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68d9      	ldr	r1, [r3, #12]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	f24f 0320 	movw	r3, #61472	; 0xf020
 800849c:	400b      	ands	r3, r1
 800849e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68d9      	ldr	r1, [r3, #12]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ae:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b4:	041b      	lsls	r3, r3, #16
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084bc:	3b01      	subs	r3, #1
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3720      	adds	r7, #32
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}
 80084ec:	40015804 	.word	0x40015804
 80084f0:	40015824 	.word	0x40015824
 80084f4:	40015800 	.word	0x40015800
 80084f8:	40015c00 	.word	0x40015c00
 80084fc:	40015c04 	.word	0x40015c04
 8008500:	40015c24 	.word	0x40015c24
 8008504:	cccccccd 	.word	0xcccccccd
 8008508:	ff05c010 	.word	0xff05c010
 800850c:	ffff1ff0 	.word	0xffff1ff0
 8008510:	fff88000 	.word	0xfff88000

08008514 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	4613      	mov	r3, r2
 8008520:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8008522:	f7fb fc95 	bl	8003e50 <HAL_GetTick>
 8008526:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <HAL_SAI_Transmit_DMA+0x20>
 800852e:	88fb      	ldrh	r3, [r7, #6]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	e093      	b.n	8008660 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800853e:	b2db      	uxtb	r3, r3
 8008540:	2b01      	cmp	r3, #1
 8008542:	f040 808c 	bne.w	800865e <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800854c:	2b01      	cmp	r3, #1
 800854e:	d101      	bne.n	8008554 <HAL_SAI_Transmit_DMA+0x40>
 8008550:	2302      	movs	r3, #2
 8008552:	e085      	b.n	8008660 <HAL_SAI_Transmit_DMA+0x14c>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68ba      	ldr	r2, [r7, #8]
 8008560:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	88fa      	ldrh	r2, [r7, #6]
 8008566:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	88fa      	ldrh	r2, [r7, #6]
 800856e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2200      	movs	r2, #0
 8008576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2212      	movs	r2, #18
 800857e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008586:	4a38      	ldr	r2, [pc, #224]	; (8008668 <HAL_SAI_Transmit_DMA+0x154>)
 8008588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800858e:	4a37      	ldr	r2, [pc, #220]	; (800866c <HAL_SAI_Transmit_DMA+0x158>)
 8008590:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008596:	4a36      	ldr	r2, [pc, #216]	; (8008670 <HAL_SAI_Transmit_DMA+0x15c>)
 8008598:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800859e:	2200      	movs	r2, #0
 80085a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085aa:	4619      	mov	r1, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	331c      	adds	r3, #28
 80085b2:	461a      	mov	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80085ba:	f7fc fb47 	bl	8004c4c <HAL_DMA_Start_IT>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e047      	b.n	8008660 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80085d0:	2100      	movs	r1, #0
 80085d2:	68f8      	ldr	r0, [r7, #12]
 80085d4:	f000 f86c 	bl	80086b0 <SAI_InterruptFlag>
 80085d8:	4601      	mov	r1, r0
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	691a      	ldr	r2, [r3, #16]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80085f6:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80085f8:	e015      	b.n	8008626 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80085fa:	f7fb fc29 	bl	8003e50 <HAL_GetTick>
 80085fe:	4602      	mov	r2, r0
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	1ad3      	subs	r3, r2, r3
 8008604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008608:	d90d      	bls.n	8008626 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008610:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e01c      	b.n	8008660 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0e2      	beq.n	80085fa <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d107      	bne.n	8008652 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008650:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	e000      	b.n	8008660 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800865e:	2302      	movs	r3, #2
  }
}
 8008660:	4618      	mov	r0, r3
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	080087ed 	.word	0x080087ed
 800866c:	0800878d 	.word	0x0800878d
 8008670:	08008809 	.word	0x08008809

08008674 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d103      	bne.n	80086cc <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f043 0308 	orr.w	r3, r3, #8
 80086ca:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d0:	2b08      	cmp	r3, #8
 80086d2:	d10b      	bne.n	80086ec <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d003      	beq.n	80086e4 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d103      	bne.n	80086ec <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f043 0310 	orr.w	r3, r3, #16
 80086ea:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d003      	beq.n	80086fc <SAI_InterruptFlag+0x4c>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d104      	bne.n	8008706 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e003      	b.n	800870e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f043 0304 	orr.w	r3, r3, #4
 800870c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800870e:	68fb      	ldr	r3, [r7, #12]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8008724:	4b17      	ldr	r3, [pc, #92]	; (8008784 <SAI_Disable+0x68>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a17      	ldr	r2, [pc, #92]	; (8008788 <SAI_Disable+0x6c>)
 800872a:	fba2 2303 	umull	r2, r3, r2, r3
 800872e:	0b1b      	lsrs	r3, r3, #12
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008746:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	1e5a      	subs	r2, r3, #1
 800874c:	60fa      	str	r2, [r7, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008758:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	72fb      	strb	r3, [r7, #11]
      break;
 8008766:	e006      	b.n	8008776 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e8      	bne.n	8008748 <SAI_Disable+0x2c>

  return status;
 8008776:	7afb      	ldrb	r3, [r7, #11]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	20000000 	.word	0x20000000
 8008788:	95cbec1b 	.word	0x95cbec1b

0800878c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087a2:	d01c      	beq.n	80087de <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80087ba:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80087bc:	2100      	movs	r1, #0
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff ff76 	bl	80086b0 <SAI_InterruptFlag>
 80087c4:	4603      	mov	r3, r0
 80087c6:	43d9      	mvns	r1, r3
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	691a      	ldr	r2, [r3, #16]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	400a      	ands	r2, r1
 80087d4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80087de:	68f8      	ldr	r0, [r7, #12]
 80087e0:	f7ff ff48 	bl	8008674 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80087e4:	bf00      	nop
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}

080087ec <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f7ff ff44 	bl	8008688 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008800:	bf00      	nop
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008814:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800881c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800882a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882c:	2b01      	cmp	r3, #1
 800882e:	d004      	beq.n	800883a <SAI_DMAError+0x32>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008836:	2b01      	cmp	r3, #1
 8008838:	d112      	bne.n	8008860 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008848:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff ff66 	bl	800871c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	f7ff ff1b 	bl	800869c <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008866:	bf00      	nop
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b082      	sub	sp, #8
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800887c:	2301      	movs	r3, #1
 800887e:	e022      	b.n	80088c6 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b00      	cmp	r3, #0
 800888a:	d105      	bne.n	8008898 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7f9 f92c 	bl	8001af0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2203      	movs	r2, #3
 800889c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 f815 	bl	80088d0 <HAL_SD_InitCard>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e00a      	b.n	80088c6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80088c4:	2300      	movs	r3, #0
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3708      	adds	r7, #8
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80088d0:	b5b0      	push	{r4, r5, r7, lr}
 80088d2:	b08e      	sub	sp, #56	; 0x38
 80088d4:	af04      	add	r7, sp, #16
 80088d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80088d8:	2300      	movs	r3, #0
 80088da:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80088dc:	2300      	movs	r3, #0
 80088de:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80088e0:	2300      	movs	r3, #0
 80088e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80088e4:	2300      	movs	r3, #0
 80088e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80088e8:	2300      	movs	r3, #0
 80088ea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80088ec:	2376      	movs	r3, #118	; 0x76
 80088ee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681d      	ldr	r5, [r3, #0]
 80088f4:	466c      	mov	r4, sp
 80088f6:	f107 0314 	add.w	r3, r7, #20
 80088fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80088fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008902:	f107 0308 	add.w	r3, r7, #8
 8008906:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008908:	4628      	mov	r0, r5
 800890a:	f002 f89b 	bl	800aa44 <SDMMC_Init>
 800890e:	4603      	mov	r3, r0
 8008910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e059      	b.n	80089d4 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800892e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4618      	mov	r0, r3
 8008936:	f002 f8cf 	bl	800aad8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008948:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800894a:	2002      	movs	r0, #2
 800894c:	f7fb fa8c 	bl	8003e68 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fff3 	bl	800993c <SD_PowerON>
 8008956:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008958:	6a3b      	ldr	r3, [r7, #32]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	431a      	orrs	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e02e      	b.n	80089d4 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 ff12 	bl	80097a0 <SD_InitCard>
 800897c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00b      	beq.n	800899c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008990:	6a3b      	ldr	r3, [r7, #32]
 8008992:	431a      	orrs	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e01b      	b.n	80089d4 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80089a4:	4618      	mov	r0, r3
 80089a6:	f002 f929 	bl	800abfc <SDMMC_CmdBlockLength>
 80089aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00f      	beq.n	80089d2 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a09      	ldr	r2, [pc, #36]	; (80089dc <HAL_SD_InitCard+0x10c>)
 80089b8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	431a      	orrs	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e000      	b.n	80089d4 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3728      	adds	r7, #40	; 0x28
 80089d8:	46bd      	mov	sp, r7
 80089da:	bdb0      	pop	{r4, r5, r7, pc}
 80089dc:	004005ff 	.word	0x004005ff

080089e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b08c      	sub	sp, #48	; 0x30
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
 80089ec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d107      	bne.n	8008a08 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008a04:	2301      	movs	r3, #1
 8008a06:	e0c3      	b.n	8008b90 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	f040 80bc 	bne.w	8008b8e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	441a      	add	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d907      	bls.n	8008a3a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e0aa      	b.n	8008b90 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2203      	movs	r2, #3
 8008a3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2200      	movs	r2, #0
 8008a48:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008a58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	4a4e      	ldr	r2, [pc, #312]	; (8008b98 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008a60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	4a4d      	ldr	r2, [pc, #308]	; (8008b9c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008a68:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6e:	2200      	movs	r2, #0
 8008a70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	2200      	movs	r2, #0
 8008a78:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	689a      	ldr	r2, [r3, #8]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	430a      	orrs	r2, r1
 8008a94:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3380      	adds	r3, #128	; 0x80
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	025b      	lsls	r3, r3, #9
 8008aa8:	089b      	lsrs	r3, r3, #2
 8008aaa:	f7fc f8cf 	bl	8004c4c <HAL_DMA_Start_IT>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d017      	beq.n	8008ae4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008ac2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a35      	ldr	r2, [pc, #212]	; (8008ba0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008aca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e055      	b.n	8008b90 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f042 0208 	orr.w	r2, r2, #8
 8008af2:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d002      	beq.n	8008b02 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afe:	025b      	lsls	r3, r3, #9
 8008b00:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b06:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	025b      	lsls	r3, r3, #9
 8008b0c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008b0e:	2390      	movs	r3, #144	; 0x90
 8008b10:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008b12:	2302      	movs	r3, #2
 8008b14:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008b16:	2300      	movs	r3, #0
 8008b18:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f107 0210 	add.w	r2, r7, #16
 8008b26:	4611      	mov	r1, r2
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f002 f83b 	bl	800aba4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d90a      	bls.n	8008b4a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2282      	movs	r2, #130	; 0x82
 8008b38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b40:	4618      	mov	r0, r3
 8008b42:	f002 f89f 	bl	800ac84 <SDMMC_CmdReadMultiBlock>
 8008b46:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008b48:	e009      	b.n	8008b5e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2281      	movs	r2, #129	; 0x81
 8008b4e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b56:	4618      	mov	r0, r3
 8008b58:	f002 f872 	bl	800ac40 <SDMMC_CmdReadSingleBlock>
 8008b5c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d012      	beq.n	8008b8a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a0d      	ldr	r2, [pc, #52]	; (8008ba0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b72:	431a      	orrs	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e002      	b.n	8008b90 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	e000      	b.n	8008b90 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008b8e:	2302      	movs	r3, #2
  }
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3730      	adds	r7, #48	; 0x30
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	080095af 	.word	0x080095af
 8008b9c:	08009621 	.word	0x08009621
 8008ba0:	004005ff 	.word	0x004005ff

08008ba4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b08c      	sub	sp, #48	; 0x30
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
 8008bb0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d107      	bne.n	8008bcc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e0c6      	b.n	8008d5a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	f040 80bf 	bne.w	8008d58 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	441a      	add	r2, r3
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d907      	bls.n	8008bfe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e0ad      	b.n	8008d5a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2203      	movs	r2, #3
 8008c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f042 021a 	orr.w	r2, r2, #26
 8008c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c22:	4a50      	ldr	r2, [pc, #320]	; (8008d64 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008c24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2a:	4a4f      	ldr	r2, [pc, #316]	; (8008d68 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008c2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c32:	2200      	movs	r2, #0
 8008c34:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	d002      	beq.n	8008c44 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c40:	025b      	lsls	r3, r3, #9
 8008c42:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d90a      	bls.n	8008c60 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	22a0      	movs	r2, #160	; 0xa0
 8008c4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c56:	4618      	mov	r0, r3
 8008c58:	f002 f858 	bl	800ad0c <SDMMC_CmdWriteMultiBlock>
 8008c5c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008c5e:	e009      	b.n	8008c74 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2290      	movs	r2, #144	; 0x90
 8008c64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f002 f82b 	bl	800acc8 <SDMMC_CmdWriteSingleBlock>
 8008c72:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d012      	beq.n	8008ca0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a3b      	ldr	r2, [pc, #236]	; (8008d6c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008c80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2201      	movs	r2, #1
 8008c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e05c      	b.n	8008d5a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0208 	orr.w	r2, r2, #8
 8008cae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb4:	2240      	movs	r2, #64	; 0x40
 8008cb6:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc8:	689a      	ldr	r2, [r3, #8]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008cd8:	68b9      	ldr	r1, [r7, #8]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	3380      	adds	r3, #128	; 0x80
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	025b      	lsls	r3, r3, #9
 8008ce6:	089b      	lsrs	r3, r3, #2
 8008ce8:	f7fb ffb0 	bl	8004c4c <HAL_DMA_Start_IT>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d01a      	beq.n	8008d28 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f022 021a 	bic.w	r2, r2, #26
 8008d00:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a19      	ldr	r2, [pc, #100]	; (8008d6c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008d08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e018      	b.n	8008d5a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d2c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	025b      	lsls	r3, r3, #9
 8008d32:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d34:	2390      	movs	r3, #144	; 0x90
 8008d36:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d40:	2301      	movs	r3, #1
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f107 0210 	add.w	r2, r7, #16
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 ff28 	bl	800aba4 <SDMMC_ConfigData>

      return HAL_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	e000      	b.n	8008d5a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8008d58:	2302      	movs	r3, #2
  }
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3730      	adds	r7, #48	; 0x30
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	08009585 	.word	0x08009585
 8008d68:	08009621 	.word	0x08009621
 8008d6c:	004005ff 	.word	0x004005ff

08008d70 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b084      	sub	sp, #16
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d008      	beq.n	8008d9e <HAL_SD_IRQHandler+0x2e>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f003 0308 	and.w	r3, r3, #8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d003      	beq.n	8008d9e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 ffef 	bl	8009d7a <SD_Read_IT>
 8008d9c:	e15a      	b.n	8009054 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 808d 	beq.w	8008ec8 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008db6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	4b9a      	ldr	r3, [pc, #616]	; (800902c <HAL_SD_IRQHandler+0x2bc>)
 8008dc4:	400b      	ands	r3, r1
 8008dc6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 0201 	bic.w	r2, r2, #1
 8008dd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f003 0308 	and.w	r3, r3, #8
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d039      	beq.n	8008e56 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f003 0302 	and.w	r3, r3, #2
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d104      	bne.n	8008df6 <HAL_SD_IRQHandler+0x86>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f003 0320 	and.w	r3, r3, #32
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d011      	beq.n	8008e1a <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 ffa8 	bl	800ad50 <SDMMC_CmdStopTransfer>
 8008e00:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d008      	beq.n	8008e1a <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 f921 	bl	800905c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d104      	bne.n	8008e46 <HAL_SD_IRQHandler+0xd6>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f002 ff0c 	bl	800bc64 <HAL_SD_RxCpltCallback>
 8008e4c:	e102      	b.n	8009054 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f002 fefe 	bl	800bc50 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008e54:	e0fe      	b.n	8009054 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 80f9 	beq.w	8009054 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f003 0320 	and.w	r3, r3, #32
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d011      	beq.n	8008e90 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f001 ff6d 	bl	800ad50 <SDMMC_CmdStopTransfer>
 8008e76:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d008      	beq.n	8008e90 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f8e6 	bl	800905c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	f040 80dc 	bne.w	8009054 <HAL_SD_IRQHandler+0x2e4>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f040 80d6 	bne.w	8009054 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f022 0208 	bic.w	r2, r2, #8
 8008eb6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f002 fec5 	bl	800bc50 <HAL_SD_TxCpltCallback>
}
 8008ec6:	e0c5      	b.n	8009054 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d008      	beq.n	8008ee8 <HAL_SD_IRQHandler+0x178>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f003 0308 	and.w	r3, r3, #8
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d003      	beq.n	8008ee8 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 ff9b 	bl	8009e1c <SD_Write_IT>
 8008ee6:	e0b5      	b.n	8009054 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eee:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 80ae 	beq.w	8009054 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008efe:	f003 0302 	and.w	r3, r3, #2
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d005      	beq.n	8008f12 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	f043 0202 	orr.w	r2, r3, #2
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f18:	f003 0308 	and.w	r3, r3, #8
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d005      	beq.n	8008f2c <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f24:	f043 0208 	orr.w	r2, r3, #8
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f32:	f003 0320 	and.w	r3, r3, #32
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d005      	beq.n	8008f46 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	f043 0220 	orr.w	r2, r3, #32
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4c:	f003 0310 	and.w	r3, r3, #16
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d005      	beq.n	8008f60 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f58:	f043 0210 	orr.w	r2, r3, #16
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008f78:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f001 fee6 	bl	800ad50 <SDMMC_CmdStopTransfer>
 8008f84:	4602      	mov	r2, r0
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f003 0308 	and.w	r3, r3, #8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00a      	beq.n	8008fb0 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f857 	bl	800905c <HAL_SD_ErrorCallback>
}
 8008fae:	e051      	b.n	8009054 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d04c      	beq.n	8009054 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f003 0310 	and.w	r3, r3, #16
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d104      	bne.n	8008fce <HAL_SD_IRQHandler+0x25e>
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d011      	beq.n	8008ff2 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd2:	4a17      	ldr	r2, [pc, #92]	; (8009030 <HAL_SD_IRQHandler+0x2c0>)
 8008fd4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7fb fe96 	bl	8004d0c <HAL_DMA_Abort_IT>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d036      	beq.n	8009054 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 fb6a 	bl	80096c4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008ff0:	e030      	b.n	8009054 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d104      	bne.n	8009006 <HAL_SD_IRQHandler+0x296>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d018      	beq.n	8009038 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900a:	4a0a      	ldr	r2, [pc, #40]	; (8009034 <HAL_SD_IRQHandler+0x2c4>)
 800900c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	4618      	mov	r0, r3
 8009014:	f7fb fe7a 	bl	8004d0c <HAL_DMA_Abort_IT>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d01a      	beq.n	8009054 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009022:	4618      	mov	r0, r3
 8009024:	f000 fb85 	bl	8009732 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009028:	e014      	b.n	8009054 <HAL_SD_IRQHandler+0x2e4>
 800902a:	bf00      	nop
 800902c:	ffff3ec5 	.word	0xffff3ec5
 8009030:	080096c5 	.word	0x080096c5
 8009034:	08009733 	.word	0x08009733
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f002 fdf5 	bl	800bc3c <HAL_SD_AbortCallback>
}
 8009052:	e7ff      	b.n	8009054 <HAL_SD_IRQHandler+0x2e4>
 8009054:	bf00      	nop
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009064:	bf00      	nop
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800907e:	0f9b      	lsrs	r3, r3, #30
 8009080:	b2da      	uxtb	r2, r3
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800908a:	0e9b      	lsrs	r3, r3, #26
 800908c:	b2db      	uxtb	r3, r3
 800908e:	f003 030f 	and.w	r3, r3, #15
 8009092:	b2da      	uxtb	r2, r3
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800909c:	0e1b      	lsrs	r3, r3, #24
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	f003 0303 	and.w	r3, r3, #3
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ae:	0c1b      	lsrs	r3, r3, #16
 80090b0:	b2da      	uxtb	r2, r3
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090ba:	0a1b      	lsrs	r3, r3, #8
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090d0:	0d1b      	lsrs	r3, r3, #20
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090dc:	0c1b      	lsrs	r3, r3, #16
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	f003 030f 	and.w	r3, r3, #15
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ee:	0bdb      	lsrs	r3, r3, #15
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	b2da      	uxtb	r2, r3
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009100:	0b9b      	lsrs	r3, r3, #14
 8009102:	b2db      	uxtb	r3, r3
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	b2da      	uxtb	r2, r3
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009112:	0b5b      	lsrs	r3, r3, #13
 8009114:	b2db      	uxtb	r3, r3
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	b2da      	uxtb	r2, r3
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009124:	0b1b      	lsrs	r3, r3, #12
 8009126:	b2db      	uxtb	r3, r3
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	b2da      	uxtb	r2, r3
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	2200      	movs	r2, #0
 8009136:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800913c:	2b00      	cmp	r3, #0
 800913e:	d163      	bne.n	8009208 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009144:	009a      	lsls	r2, r3, #2
 8009146:	f640 73fc 	movw	r3, #4092	; 0xffc
 800914a:	4013      	ands	r3, r2
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009150:	0f92      	lsrs	r2, r2, #30
 8009152:	431a      	orrs	r2, r3
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800915c:	0edb      	lsrs	r3, r3, #27
 800915e:	b2db      	uxtb	r3, r3
 8009160:	f003 0307 	and.w	r3, r3, #7
 8009164:	b2da      	uxtb	r2, r3
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800916e:	0e1b      	lsrs	r3, r3, #24
 8009170:	b2db      	uxtb	r3, r3
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	b2da      	uxtb	r2, r3
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009180:	0d5b      	lsrs	r3, r3, #21
 8009182:	b2db      	uxtb	r3, r3
 8009184:	f003 0307 	and.w	r3, r3, #7
 8009188:	b2da      	uxtb	r2, r3
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009192:	0c9b      	lsrs	r3, r3, #18
 8009194:	b2db      	uxtb	r3, r3
 8009196:	f003 0307 	and.w	r3, r3, #7
 800919a:	b2da      	uxtb	r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a4:	0bdb      	lsrs	r3, r3, #15
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 0307 	and.w	r3, r3, #7
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	7e1b      	ldrb	r3, [r3, #24]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	f003 0307 	and.w	r3, r3, #7
 80091c6:	3302      	adds	r3, #2
 80091c8:	2201      	movs	r2, #1
 80091ca:	fa02 f303 	lsl.w	r3, r2, r3
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80091d2:	fb03 f202 	mul.w	r2, r3, r2
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	7a1b      	ldrb	r3, [r3, #8]
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	f003 030f 	and.w	r3, r3, #15
 80091e4:	2201      	movs	r2, #1
 80091e6:	409a      	lsls	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80091f4:	0a52      	lsrs	r2, r2, #9
 80091f6:	fb03 f202 	mul.w	r2, r3, r2
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009204:	661a      	str	r2, [r3, #96]	; 0x60
 8009206:	e031      	b.n	800926c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800920c:	2b01      	cmp	r3, #1
 800920e:	d11d      	bne.n	800924c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009214:	041b      	lsls	r3, r3, #16
 8009216:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800921e:	0c1b      	lsrs	r3, r3, #16
 8009220:	431a      	orrs	r2, r3
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	3301      	adds	r3, #1
 800922c:	029a      	lsls	r2, r3, #10
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009240:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	661a      	str	r2, [r3, #96]	; 0x60
 800924a:	e00f      	b.n	800926c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a58      	ldr	r2, [pc, #352]	; (80093b4 <HAL_SD_GetCardCSD+0x344>)
 8009252:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009258:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e09d      	b.n	80093a8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009270:	0b9b      	lsrs	r3, r3, #14
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	b2da      	uxtb	r2, r3
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009282:	09db      	lsrs	r3, r3, #7
 8009284:	b2db      	uxtb	r3, r3
 8009286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800928a:	b2da      	uxtb	r2, r3
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009294:	b2db      	uxtb	r3, r3
 8009296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800929a:	b2da      	uxtb	r2, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a4:	0fdb      	lsrs	r3, r3, #31
 80092a6:	b2da      	uxtb	r2, r3
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b0:	0f5b      	lsrs	r3, r3, #29
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	f003 0303 	and.w	r3, r3, #3
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c2:	0e9b      	lsrs	r3, r3, #26
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d4:	0d9b      	lsrs	r3, r3, #22
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	f003 030f 	and.w	r3, r3, #15
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e6:	0d5b      	lsrs	r3, r3, #21
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009302:	0c1b      	lsrs	r3, r3, #16
 8009304:	b2db      	uxtb	r3, r3
 8009306:	f003 0301 	and.w	r3, r3, #1
 800930a:	b2da      	uxtb	r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009316:	0bdb      	lsrs	r3, r3, #15
 8009318:	b2db      	uxtb	r3, r3
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	b2da      	uxtb	r2, r3
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932a:	0b9b      	lsrs	r3, r3, #14
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 0301 	and.w	r3, r3, #1
 8009332:	b2da      	uxtb	r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933e:	0b5b      	lsrs	r3, r3, #13
 8009340:	b2db      	uxtb	r3, r3
 8009342:	f003 0301 	and.w	r3, r3, #1
 8009346:	b2da      	uxtb	r2, r3
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009352:	0b1b      	lsrs	r3, r3, #12
 8009354:	b2db      	uxtb	r3, r3
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	b2da      	uxtb	r2, r3
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009366:	0a9b      	lsrs	r3, r3, #10
 8009368:	b2db      	uxtb	r3, r3
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	b2da      	uxtb	r2, r3
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937a:	0a1b      	lsrs	r3, r3, #8
 800937c:	b2db      	uxtb	r3, r3
 800937e:	f003 0303 	and.w	r3, r3, #3
 8009382:	b2da      	uxtb	r2, r3
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938e:	085b      	lsrs	r3, r3, #1
 8009390:	b2db      	uxtb	r3, r3
 8009392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009396:	b2da      	uxtb	r2, r3
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	004005ff 	.word	0x004005ff

080093b8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009410:	b5b0      	push	{r4, r5, r7, lr}
 8009412:	b08e      	sub	sp, #56	; 0x38
 8009414:	af04      	add	r7, sp, #16
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2203      	movs	r2, #3
 8009424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800942c:	2b03      	cmp	r3, #3
 800942e:	d02e      	beq.n	800948e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009436:	d106      	bne.n	8009446 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	639a      	str	r2, [r3, #56]	; 0x38
 8009444:	e029      	b.n	800949a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800944c:	d10a      	bne.n	8009464 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fb2a 	bl	8009aa8 <SD_WideBus_Enable>
 8009454:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	431a      	orrs	r2, r3
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	639a      	str	r2, [r3, #56]	; 0x38
 8009462:	e01a      	b.n	800949a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10a      	bne.n	8009480 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 fb67 	bl	8009b3e <SD_WideBus_Disable>
 8009470:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009476:	6a3b      	ldr	r3, [r7, #32]
 8009478:	431a      	orrs	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	639a      	str	r2, [r3, #56]	; 0x38
 800947e:	e00c      	b.n	800949a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009484:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	639a      	str	r2, [r3, #56]	; 0x38
 800948c:	e005      	b.n	800949a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009492:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d00b      	beq.n	80094ba <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a26      	ldr	r2, [pc, #152]	; (8009540 <HAL_SD_ConfigWideBusOperation+0x130>)
 80094a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094b8:	e01f      	b.n	80094fa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	68db      	ldr	r3, [r3, #12]
 80094ca:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	699b      	ldr	r3, [r3, #24]
 80094da:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681d      	ldr	r5, [r3, #0]
 80094e0:	466c      	mov	r4, sp
 80094e2:	f107 0314 	add.w	r3, r7, #20
 80094e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80094ee:	f107 0308 	add.w	r3, r7, #8
 80094f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094f4:	4628      	mov	r0, r5
 80094f6:	f001 faa5 	bl	800aa44 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009502:	4618      	mov	r0, r3
 8009504:	f001 fb7a 	bl	800abfc <SDMMC_CmdBlockLength>
 8009508:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d00c      	beq.n	800952a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a0a      	ldr	r2, [pc, #40]	; (8009540 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009516:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	431a      	orrs	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009536:	4618      	mov	r0, r3
 8009538:	3728      	adds	r7, #40	; 0x28
 800953a:	46bd      	mov	sp, r7
 800953c:	bdb0      	pop	{r4, r5, r7, pc}
 800953e:	bf00      	nop
 8009540:	004005ff 	.word	0x004005ff

08009544 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009550:	f107 030c 	add.w	r3, r7, #12
 8009554:	4619      	mov	r1, r3
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fa7e 	bl	8009a58 <SD_SendStatus>
 800955c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d005      	beq.n	8009570 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	0a5b      	lsrs	r3, r3, #9
 8009574:	f003 030f 	and.w	r3, r3, #15
 8009578:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800957a:	693b      	ldr	r3, [r7, #16]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009590:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095a0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80095a2:	bf00      	nop
 80095a4:	3714      	adds	r7, #20
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr

080095ae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095c0:	2b82      	cmp	r3, #130	; 0x82
 80095c2:	d111      	bne.n	80095e8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f001 fbc1 	bl	800ad50 <SDMMC_CmdStopTransfer>
 80095ce:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d008      	beq.n	80095e8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	431a      	orrs	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80095e2:	68f8      	ldr	r0, [r7, #12]
 80095e4:	f7ff fd3a 	bl	800905c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f022 0208 	bic.w	r2, r2, #8
 80095f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f240 523a 	movw	r2, #1338	; 0x53a
 8009600:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f002 fb27 	bl	800bc64 <HAL_SD_RxCpltCallback>
#endif
}
 8009616:	bf00      	nop
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f7fb fd18 	bl	8005064 <HAL_DMA_GetError>
 8009634:	4603      	mov	r3, r0
 8009636:	2b02      	cmp	r3, #2
 8009638:	d03e      	beq.n	80096b8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009640:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009648:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d002      	beq.n	8009656 <SD_DMAError+0x36>
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d12d      	bne.n	80096b2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a19      	ldr	r2, [pc, #100]	; (80096c0 <SD_DMAError+0xa0>)
 800965c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800966c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009672:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800967a:	6978      	ldr	r0, [r7, #20]
 800967c:	f7ff ff62 	bl	8009544 <HAL_SD_GetCardState>
 8009680:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	2b06      	cmp	r3, #6
 8009686:	d002      	beq.n	800968e <SD_DMAError+0x6e>
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	2b05      	cmp	r3, #5
 800968c:	d10a      	bne.n	80096a4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4618      	mov	r0, r3
 8009694:	f001 fb5c 	bl	800ad50 <SDMMC_CmdStopTransfer>
 8009698:	4602      	mov	r2, r0
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969e:	431a      	orrs	r2, r3
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	2200      	movs	r2, #0
 80096b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80096b2:	6978      	ldr	r0, [r7, #20]
 80096b4:	f7ff fcd2 	bl	800905c <HAL_SD_ErrorCallback>
#endif
  }
}
 80096b8:	bf00      	nop
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	004005ff 	.word	0x004005ff

080096c4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f240 523a 	movw	r2, #1338	; 0x53a
 80096da:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f7ff ff31 	bl	8009544 <HAL_SD_GetCardState>
 80096e2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2b06      	cmp	r3, #6
 80096f6:	d002      	beq.n	80096fe <SD_DMATxAbort+0x3a>
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2b05      	cmp	r3, #5
 80096fc:	d10a      	bne.n	8009714 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4618      	mov	r0, r3
 8009704:	f001 fb24 	bl	800ad50 <SDMMC_CmdStopTransfer>
 8009708:	4602      	mov	r2, r0
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970e:	431a      	orrs	r2, r3
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009718:	2b00      	cmp	r3, #0
 800971a:	d103      	bne.n	8009724 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f002 fa8d 	bl	800bc3c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009722:	e002      	b.n	800972a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f7ff fc99 	bl	800905c <HAL_SD_ErrorCallback>
}
 800972a:	bf00      	nop
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f240 523a 	movw	r2, #1338	; 0x53a
 8009748:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f7ff fefa 	bl	8009544 <HAL_SD_GetCardState>
 8009750:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2b06      	cmp	r3, #6
 8009764:	d002      	beq.n	800976c <SD_DMARxAbort+0x3a>
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2b05      	cmp	r3, #5
 800976a:	d10a      	bne.n	8009782 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4618      	mov	r0, r3
 8009772:	f001 faed 	bl	800ad50 <SDMMC_CmdStopTransfer>
 8009776:	4602      	mov	r2, r0
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800977c:	431a      	orrs	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009786:	2b00      	cmp	r3, #0
 8009788:	d103      	bne.n	8009792 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f002 fa56 	bl	800bc3c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009790:	e002      	b.n	8009798 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f7ff fc62 	bl	800905c <HAL_SD_ErrorCallback>
}
 8009798:	bf00      	nop
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80097a0:	b5b0      	push	{r4, r5, r7, lr}
 80097a2:	b094      	sub	sp, #80	; 0x50
 80097a4:	af04      	add	r7, sp, #16
 80097a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80097a8:	2301      	movs	r3, #1
 80097aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f001 f99f 	bl	800aaf4 <SDMMC_GetPowerState>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d102      	bne.n	80097c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80097bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80097c0:	e0b8      	b.n	8009934 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097c6:	2b03      	cmp	r3, #3
 80097c8:	d02f      	beq.n	800982a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f001 fbc9 	bl	800af66 <SDMMC_CmdSendCID>
 80097d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80097d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d001      	beq.n	80097e0 <SD_InitCard+0x40>
    {
      return errorstate;
 80097dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097de:	e0a9      	b.n	8009934 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2100      	movs	r1, #0
 80097e6:	4618      	mov	r0, r3
 80097e8:	f001 f9c9 	bl	800ab7e <SDMMC_GetResponse>
 80097ec:	4602      	mov	r2, r0
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2104      	movs	r1, #4
 80097f8:	4618      	mov	r0, r3
 80097fa:	f001 f9c0 	bl	800ab7e <SDMMC_GetResponse>
 80097fe:	4602      	mov	r2, r0
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2108      	movs	r1, #8
 800980a:	4618      	mov	r0, r3
 800980c:	f001 f9b7 	bl	800ab7e <SDMMC_GetResponse>
 8009810:	4602      	mov	r2, r0
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	210c      	movs	r1, #12
 800981c:	4618      	mov	r0, r3
 800981e:	f001 f9ae 	bl	800ab7e <SDMMC_GetResponse>
 8009822:	4602      	mov	r2, r0
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800982e:	2b03      	cmp	r3, #3
 8009830:	d00d      	beq.n	800984e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f107 020e 	add.w	r2, r7, #14
 800983a:	4611      	mov	r1, r2
 800983c:	4618      	mov	r0, r3
 800983e:	f001 fbcf 	bl	800afe0 <SDMMC_CmdSetRelAdd>
 8009842:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <SD_InitCard+0xae>
    {
      return errorstate;
 800984a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800984c:	e072      	b.n	8009934 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009852:	2b03      	cmp	r3, #3
 8009854:	d036      	beq.n	80098c4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009856:	89fb      	ldrh	r3, [r7, #14]
 8009858:	461a      	mov	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009866:	041b      	lsls	r3, r3, #16
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f001 fb99 	bl	800afa2 <SDMMC_CmdSendCSD>
 8009870:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800987a:	e05b      	b.n	8009934 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	2100      	movs	r1, #0
 8009882:	4618      	mov	r0, r3
 8009884:	f001 f97b 	bl	800ab7e <SDMMC_GetResponse>
 8009888:	4602      	mov	r2, r0
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2104      	movs	r1, #4
 8009894:	4618      	mov	r0, r3
 8009896:	f001 f972 	bl	800ab7e <SDMMC_GetResponse>
 800989a:	4602      	mov	r2, r0
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2108      	movs	r1, #8
 80098a6:	4618      	mov	r0, r3
 80098a8:	f001 f969 	bl	800ab7e <SDMMC_GetResponse>
 80098ac:	4602      	mov	r2, r0
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	210c      	movs	r1, #12
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 f960 	bl	800ab7e <SDMMC_GetResponse>
 80098be:	4602      	mov	r2, r0
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2104      	movs	r1, #4
 80098ca:	4618      	mov	r0, r3
 80098cc:	f001 f957 	bl	800ab7e <SDMMC_GetResponse>
 80098d0:	4603      	mov	r3, r0
 80098d2:	0d1a      	lsrs	r2, r3, #20
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80098d8:	f107 0310 	add.w	r3, r7, #16
 80098dc:	4619      	mov	r1, r3
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7ff fbc6 	bl	8009070 <HAL_SD_GetCardCSD>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80098ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80098ee:	e021      	b.n	8009934 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6819      	ldr	r1, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f8:	041b      	lsls	r3, r3, #16
 80098fa:	2200      	movs	r2, #0
 80098fc:	461c      	mov	r4, r3
 80098fe:	4615      	mov	r5, r2
 8009900:	4622      	mov	r2, r4
 8009902:	462b      	mov	r3, r5
 8009904:	4608      	mov	r0, r1
 8009906:	f001 fa45 	bl	800ad94 <SDMMC_CmdSelDesel>
 800990a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800990c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <SD_InitCard+0x176>
  {
    return errorstate;
 8009912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009914:	e00e      	b.n	8009934 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681d      	ldr	r5, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	466c      	mov	r4, sp
 800991e:	f103 0210 	add.w	r2, r3, #16
 8009922:	ca07      	ldmia	r2, {r0, r1, r2}
 8009924:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009928:	3304      	adds	r3, #4
 800992a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800992c:	4628      	mov	r0, r5
 800992e:	f001 f889 	bl	800aa44 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009932:	2300      	movs	r3, #0
}
 8009934:	4618      	mov	r0, r3
 8009936:	3740      	adds	r7, #64	; 0x40
 8009938:	46bd      	mov	sp, r7
 800993a:	bdb0      	pop	{r4, r5, r7, pc}

0800993c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009944:	2300      	movs	r3, #0
 8009946:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009948:	2300      	movs	r3, #0
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	2300      	movs	r3, #0
 800994e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4618      	mov	r0, r3
 8009956:	f001 fa40 	bl	800adda <SDMMC_CmdGoIdleState>
 800995a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	e072      	b.n	8009a4c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4618      	mov	r0, r3
 800996c:	f001 fa53 	bl	800ae16 <SDMMC_CmdOperCond>
 8009970:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00d      	beq.n	8009994 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4618      	mov	r0, r3
 8009984:	f001 fa29 	bl	800adda <SDMMC_CmdGoIdleState>
 8009988:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d004      	beq.n	800999a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	e05b      	b.n	8009a4c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d137      	bne.n	8009a12 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	2100      	movs	r1, #0
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 fa53 	bl	800ae54 <SDMMC_CmdAppCommand>
 80099ae:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d02d      	beq.n	8009a12 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80099ba:	e047      	b.n	8009a4c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2100      	movs	r1, #0
 80099c2:	4618      	mov	r0, r3
 80099c4:	f001 fa46 	bl	800ae54 <SDMMC_CmdAppCommand>
 80099c8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d001      	beq.n	80099d4 <SD_PowerON+0x98>
    {
      return errorstate;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	e03b      	b.n	8009a4c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	491e      	ldr	r1, [pc, #120]	; (8009a54 <SD_PowerON+0x118>)
 80099da:	4618      	mov	r0, r3
 80099dc:	f001 fa5c 	bl	800ae98 <SDMMC_CmdAppOperCommand>
 80099e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d002      	beq.n	80099ee <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80099ec:	e02e      	b.n	8009a4c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2100      	movs	r1, #0
 80099f4:	4618      	mov	r0, r3
 80099f6:	f001 f8c2 	bl	800ab7e <SDMMC_GetResponse>
 80099fa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	0fdb      	lsrs	r3, r3, #31
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d101      	bne.n	8009a08 <SD_PowerON+0xcc>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e000      	b.n	8009a0a <SD_PowerON+0xce>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	613b      	str	r3, [r7, #16]

    count++;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	3301      	adds	r3, #1
 8009a10:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d802      	bhi.n	8009a22 <SD_PowerON+0xe6>
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d0cc      	beq.n	80099bc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d902      	bls.n	8009a32 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009a2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a30:	e00c      	b.n	8009a4c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	645a      	str	r2, [r3, #68]	; 0x44
 8009a42:	e002      	b.n	8009a4a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	c1100000 	.word	0xc1100000

08009a58 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d102      	bne.n	8009a6e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009a68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a6c:	e018      	b.n	8009aa0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a76:	041b      	lsls	r3, r3, #16
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	f001 fad1 	bl	800b022 <SDMMC_CmdSendStatus>
 8009a80:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d001      	beq.n	8009a8c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	e009      	b.n	8009aa0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2100      	movs	r1, #0
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 f873 	bl	800ab7e <SDMMC_GetResponse>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	60fb      	str	r3, [r7, #12]
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2100      	movs	r1, #0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f001 f85d 	bl	800ab7e <SDMMC_GetResponse>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009aca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ace:	d102      	bne.n	8009ad6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ad0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ad4:	e02f      	b.n	8009b36 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009ad6:	f107 030c 	add.w	r3, r7, #12
 8009ada:	4619      	mov	r1, r3
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 f879 	bl	8009bd4 <SD_FindSCR>
 8009ae2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	e023      	b.n	8009b36 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d01c      	beq.n	8009b32 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b00:	041b      	lsls	r3, r3, #16
 8009b02:	4619      	mov	r1, r3
 8009b04:	4610      	mov	r0, r2
 8009b06:	f001 f9a5 	bl	800ae54 <SDMMC_CmdAppCommand>
 8009b0a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	e00f      	b.n	8009b36 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2102      	movs	r1, #2
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f001 f9df 	bl	800aee0 <SDMMC_CmdBusWidth>
 8009b22:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	e003      	b.n	8009b36 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e001      	b.n	8009b36 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b086      	sub	sp, #24
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009b46:	2300      	movs	r3, #0
 8009b48:	60fb      	str	r3, [r7, #12]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2100      	movs	r1, #0
 8009b54:	4618      	mov	r0, r3
 8009b56:	f001 f812 	bl	800ab7e <SDMMC_GetResponse>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b64:	d102      	bne.n	8009b6c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b6a:	e02f      	b.n	8009bcc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b6c:	f107 030c 	add.w	r3, r7, #12
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f82e 	bl	8009bd4 <SD_FindSCR>
 8009b78:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d001      	beq.n	8009b84 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	e023      	b.n	8009bcc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d01c      	beq.n	8009bc8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b96:	041b      	lsls	r3, r3, #16
 8009b98:	4619      	mov	r1, r3
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	f001 f95a 	bl	800ae54 <SDMMC_CmdAppCommand>
 8009ba0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d001      	beq.n	8009bac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	e00f      	b.n	8009bcc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f001 f994 	bl	800aee0 <SDMMC_CmdBusWidth>
 8009bb8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d001      	beq.n	8009bc4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	e003      	b.n	8009bcc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e001      	b.n	8009bcc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009bd4:	b590      	push	{r4, r7, lr}
 8009bd6:	b08f      	sub	sp, #60	; 0x3c
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009bde:	f7fa f937 	bl	8003e50 <HAL_GetTick>
 8009be2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009be8:	2300      	movs	r3, #0
 8009bea:	60bb      	str	r3, [r7, #8]
 8009bec:	2300      	movs	r3, #0
 8009bee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2108      	movs	r1, #8
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 fffe 	bl	800abfc <SDMMC_CmdBlockLength>
 8009c00:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	e0b2      	b.n	8009d72 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c14:	041b      	lsls	r3, r3, #16
 8009c16:	4619      	mov	r1, r3
 8009c18:	4610      	mov	r0, r2
 8009c1a:	f001 f91b 	bl	800ae54 <SDMMC_CmdAppCommand>
 8009c1e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c28:	e0a3      	b.n	8009d72 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009c2e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009c30:	2308      	movs	r3, #8
 8009c32:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009c34:	2330      	movs	r3, #48	; 0x30
 8009c36:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009c38:	2302      	movs	r3, #2
 8009c3a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009c40:	2301      	movs	r3, #1
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f107 0210 	add.w	r2, r7, #16
 8009c4c:	4611      	mov	r1, r2
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 ffa8 	bl	800aba4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f001 f963 	bl	800af24 <SDMMC_CmdSendSCR>
 8009c5e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d02a      	beq.n	8009cbc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	e083      	b.n	8009d72 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00f      	beq.n	8009c98 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6819      	ldr	r1, [r3, #0]
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	f107 0208 	add.w	r2, r7, #8
 8009c84:	18d4      	adds	r4, r2, r3
 8009c86:	4608      	mov	r0, r1
 8009c88:	f000 ff08 	bl	800aa9c <SDMMC_ReadFIFO>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	6023      	str	r3, [r4, #0]
      index++;
 8009c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c92:	3301      	adds	r3, #1
 8009c94:	637b      	str	r3, [r7, #52]	; 0x34
 8009c96:	e006      	b.n	8009ca6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d012      	beq.n	8009ccc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ca6:	f7fa f8d3 	bl	8003e50 <HAL_GetTick>
 8009caa:	4602      	mov	r2, r0
 8009cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cae:	1ad3      	subs	r3, r2, r3
 8009cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cb4:	d102      	bne.n	8009cbc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009cb6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cba:	e05a      	b.n	8009d72 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cc2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d0cf      	beq.n	8009c6a <SD_FindSCR+0x96>
 8009cca:	e000      	b.n	8009cce <SD_FindSCR+0xfa>
      break;
 8009ccc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd4:	f003 0308 	and.w	r3, r3, #8
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d005      	beq.n	8009ce8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2208      	movs	r2, #8
 8009ce2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009ce4:	2308      	movs	r3, #8
 8009ce6:	e044      	b.n	8009d72 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cee:	f003 0302 	and.w	r3, r3, #2
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d005      	beq.n	8009d02 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cfe:	2302      	movs	r3, #2
 8009d00:	e037      	b.n	8009d72 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d08:	f003 0320 	and.w	r3, r3, #32
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d005      	beq.n	8009d1c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2220      	movs	r2, #32
 8009d16:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009d18:	2320      	movs	r3, #32
 8009d1a:	e02a      	b.n	8009d72 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d24:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	061a      	lsls	r2, r3, #24
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	021b      	lsls	r3, r3, #8
 8009d2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d32:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	0a1b      	lsrs	r3, r3, #8
 8009d38:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d3c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	0e1b      	lsrs	r3, r3, #24
 8009d42:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d46:	601a      	str	r2, [r3, #0]
    scr++;
 8009d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d4a:	3304      	adds	r3, #4
 8009d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	061a      	lsls	r2, r3, #24
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	021b      	lsls	r3, r3, #8
 8009d56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d5a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	0a1b      	lsrs	r3, r3, #8
 8009d60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d64:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	0e1b      	lsrs	r3, r3, #24
 8009d6a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	373c      	adds	r7, #60	; 0x3c
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd90      	pop	{r4, r7, pc}

08009d7a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b086      	sub	sp, #24
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d86:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d03f      	beq.n	8009e14 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009d94:	2300      	movs	r3, #0
 8009d96:	617b      	str	r3, [r7, #20]
 8009d98:	e033      	b.n	8009e02 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 fe7c 	bl	800aa9c <SDMMC_ReadFIFO>
 8009da4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3301      	adds	r3, #1
 8009db2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	3b01      	subs	r3, #1
 8009db8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	0a1b      	lsrs	r3, r3, #8
 8009dbe:	b2da      	uxtb	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	3b01      	subs	r3, #1
 8009dce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	0c1b      	lsrs	r3, r3, #16
 8009dd4:	b2da      	uxtb	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	3301      	adds	r3, #1
 8009dde:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	3b01      	subs	r3, #1
 8009de4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	0e1b      	lsrs	r3, r3, #24
 8009dea:	b2da      	uxtb	r2, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3301      	adds	r3, #1
 8009df4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	3b01      	subs	r3, #1
 8009dfa:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	617b      	str	r3, [r7, #20]
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b07      	cmp	r3, #7
 8009e06:	d9c8      	bls.n	8009d9a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009e14:	bf00      	nop
 8009e16:	3718      	adds	r7, #24
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a1b      	ldr	r3, [r3, #32]
 8009e28:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d043      	beq.n	8009ebe <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009e36:	2300      	movs	r3, #0
 8009e38:	617b      	str	r3, [r7, #20]
 8009e3a:	e037      	b.n	8009eac <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3301      	adds	r3, #1
 8009e46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	021a      	lsls	r2, r3, #8
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3301      	adds	r3, #1
 8009e5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	041a      	lsls	r2, r3, #16
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3301      	adds	r3, #1
 8009e76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	061a      	lsls	r2, r3, #24
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f107 0208 	add.w	r2, r7, #8
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 fe08 	bl	800aab6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	617b      	str	r3, [r7, #20]
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	2b07      	cmp	r3, #7
 8009eb0:	d9c4      	bls.n	8009e3c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009ebe:	bf00      	nop
 8009ec0:	3718      	adds	r7, #24
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}

08009ec6 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b082      	sub	sp, #8
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	e025      	b.n	8009f26 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d106      	bne.n	8009ef4 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009eee:	6878      	ldr	r0, [r7, #4]
 8009ef0:	f7f8 f9c4 	bl	800227c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	3304      	adds	r3, #4
 8009f04:	4619      	mov	r1, r3
 8009f06:	4610      	mov	r0, r2
 8009f08:	f000 fcd6 	bl	800a8b8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6818      	ldr	r0, [r3, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	461a      	mov	r2, r3
 8009f16:	6839      	ldr	r1, [r7, #0]
 8009f18:	f000 fd2a 	bl	800a970 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e04c      	b.n	8009fdc <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d106      	bne.n	8009f5c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7f7 fed8 	bl	8001d0c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2202      	movs	r2, #2
 8009f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0203 	bic.w	r2, r2, #3
 8009f72:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009f7c:	68fa      	ldr	r2, [r7, #12]
 8009f7e:	4b19      	ldr	r3, [pc, #100]	; (8009fe4 <HAL_SPDIFRX_Init+0xb4>)
 8009f80:	4013      	ands	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009f8c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009f92:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009f98:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009f9e:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009fa4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009faa:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009fb0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009fb6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009fbc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	fff88407 	.word	0xfff88407

08009fe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e040      	b.n	800a07c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d106      	bne.n	800a010 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f7f7 fee4 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2224      	movs	r2, #36	; 0x24
 800a014:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0201 	bic.w	r2, r2, #1
 800a024:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 f82c 	bl	800a084 <UART_SetConfig>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d101      	bne.n	800a036 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e022      	b.n	800a07c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d002      	beq.n	800a044 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 fa84 	bl	800a54c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	689a      	ldr	r2, [r3, #8]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f042 0201 	orr.w	r2, r2, #1
 800a072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 fb0b 	bl	800a690 <UART_CheckIdleState>
 800a07a:	4603      	mov	r3, r0
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3708      	adds	r7, #8
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689a      	ldr	r2, [r3, #8]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	431a      	orrs	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	695b      	ldr	r3, [r3, #20]
 800a09e:	431a      	orrs	r2, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	69db      	ldr	r3, [r3, #28]
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	4ba6      	ldr	r3, [pc, #664]	; (800a348 <UART_SetConfig+0x2c4>)
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	6812      	ldr	r2, [r2, #0]
 800a0b6:	6979      	ldr	r1, [r7, #20]
 800a0b8:	430b      	orrs	r3, r1
 800a0ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68da      	ldr	r2, [r3, #12]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	699b      	ldr	r3, [r3, #24]
 800a0d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a94      	ldr	r2, [pc, #592]	; (800a34c <UART_SetConfig+0x2c8>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d120      	bne.n	800a142 <UART_SetConfig+0xbe>
 800a100:	4b93      	ldr	r3, [pc, #588]	; (800a350 <UART_SetConfig+0x2cc>)
 800a102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d816      	bhi.n	800a13c <UART_SetConfig+0xb8>
 800a10e:	a201      	add	r2, pc, #4	; (adr r2, 800a114 <UART_SetConfig+0x90>)
 800a110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a114:	0800a125 	.word	0x0800a125
 800a118:	0800a131 	.word	0x0800a131
 800a11c:	0800a12b 	.word	0x0800a12b
 800a120:	0800a137 	.word	0x0800a137
 800a124:	2301      	movs	r3, #1
 800a126:	77fb      	strb	r3, [r7, #31]
 800a128:	e150      	b.n	800a3cc <UART_SetConfig+0x348>
 800a12a:	2302      	movs	r3, #2
 800a12c:	77fb      	strb	r3, [r7, #31]
 800a12e:	e14d      	b.n	800a3cc <UART_SetConfig+0x348>
 800a130:	2304      	movs	r3, #4
 800a132:	77fb      	strb	r3, [r7, #31]
 800a134:	e14a      	b.n	800a3cc <UART_SetConfig+0x348>
 800a136:	2308      	movs	r3, #8
 800a138:	77fb      	strb	r3, [r7, #31]
 800a13a:	e147      	b.n	800a3cc <UART_SetConfig+0x348>
 800a13c:	2310      	movs	r3, #16
 800a13e:	77fb      	strb	r3, [r7, #31]
 800a140:	e144      	b.n	800a3cc <UART_SetConfig+0x348>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a83      	ldr	r2, [pc, #524]	; (800a354 <UART_SetConfig+0x2d0>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d132      	bne.n	800a1b2 <UART_SetConfig+0x12e>
 800a14c:	4b80      	ldr	r3, [pc, #512]	; (800a350 <UART_SetConfig+0x2cc>)
 800a14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a152:	f003 030c 	and.w	r3, r3, #12
 800a156:	2b0c      	cmp	r3, #12
 800a158:	d828      	bhi.n	800a1ac <UART_SetConfig+0x128>
 800a15a:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <UART_SetConfig+0xdc>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a195 	.word	0x0800a195
 800a164:	0800a1ad 	.word	0x0800a1ad
 800a168:	0800a1ad 	.word	0x0800a1ad
 800a16c:	0800a1ad 	.word	0x0800a1ad
 800a170:	0800a1a1 	.word	0x0800a1a1
 800a174:	0800a1ad 	.word	0x0800a1ad
 800a178:	0800a1ad 	.word	0x0800a1ad
 800a17c:	0800a1ad 	.word	0x0800a1ad
 800a180:	0800a19b 	.word	0x0800a19b
 800a184:	0800a1ad 	.word	0x0800a1ad
 800a188:	0800a1ad 	.word	0x0800a1ad
 800a18c:	0800a1ad 	.word	0x0800a1ad
 800a190:	0800a1a7 	.word	0x0800a1a7
 800a194:	2300      	movs	r3, #0
 800a196:	77fb      	strb	r3, [r7, #31]
 800a198:	e118      	b.n	800a3cc <UART_SetConfig+0x348>
 800a19a:	2302      	movs	r3, #2
 800a19c:	77fb      	strb	r3, [r7, #31]
 800a19e:	e115      	b.n	800a3cc <UART_SetConfig+0x348>
 800a1a0:	2304      	movs	r3, #4
 800a1a2:	77fb      	strb	r3, [r7, #31]
 800a1a4:	e112      	b.n	800a3cc <UART_SetConfig+0x348>
 800a1a6:	2308      	movs	r3, #8
 800a1a8:	77fb      	strb	r3, [r7, #31]
 800a1aa:	e10f      	b.n	800a3cc <UART_SetConfig+0x348>
 800a1ac:	2310      	movs	r3, #16
 800a1ae:	77fb      	strb	r3, [r7, #31]
 800a1b0:	e10c      	b.n	800a3cc <UART_SetConfig+0x348>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a68      	ldr	r2, [pc, #416]	; (800a358 <UART_SetConfig+0x2d4>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d120      	bne.n	800a1fe <UART_SetConfig+0x17a>
 800a1bc:	4b64      	ldr	r3, [pc, #400]	; (800a350 <UART_SetConfig+0x2cc>)
 800a1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a1c6:	2b30      	cmp	r3, #48	; 0x30
 800a1c8:	d013      	beq.n	800a1f2 <UART_SetConfig+0x16e>
 800a1ca:	2b30      	cmp	r3, #48	; 0x30
 800a1cc:	d814      	bhi.n	800a1f8 <UART_SetConfig+0x174>
 800a1ce:	2b20      	cmp	r3, #32
 800a1d0:	d009      	beq.n	800a1e6 <UART_SetConfig+0x162>
 800a1d2:	2b20      	cmp	r3, #32
 800a1d4:	d810      	bhi.n	800a1f8 <UART_SetConfig+0x174>
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d002      	beq.n	800a1e0 <UART_SetConfig+0x15c>
 800a1da:	2b10      	cmp	r3, #16
 800a1dc:	d006      	beq.n	800a1ec <UART_SetConfig+0x168>
 800a1de:	e00b      	b.n	800a1f8 <UART_SetConfig+0x174>
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	77fb      	strb	r3, [r7, #31]
 800a1e4:	e0f2      	b.n	800a3cc <UART_SetConfig+0x348>
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	77fb      	strb	r3, [r7, #31]
 800a1ea:	e0ef      	b.n	800a3cc <UART_SetConfig+0x348>
 800a1ec:	2304      	movs	r3, #4
 800a1ee:	77fb      	strb	r3, [r7, #31]
 800a1f0:	e0ec      	b.n	800a3cc <UART_SetConfig+0x348>
 800a1f2:	2308      	movs	r3, #8
 800a1f4:	77fb      	strb	r3, [r7, #31]
 800a1f6:	e0e9      	b.n	800a3cc <UART_SetConfig+0x348>
 800a1f8:	2310      	movs	r3, #16
 800a1fa:	77fb      	strb	r3, [r7, #31]
 800a1fc:	e0e6      	b.n	800a3cc <UART_SetConfig+0x348>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a56      	ldr	r2, [pc, #344]	; (800a35c <UART_SetConfig+0x2d8>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d120      	bne.n	800a24a <UART_SetConfig+0x1c6>
 800a208:	4b51      	ldr	r3, [pc, #324]	; (800a350 <UART_SetConfig+0x2cc>)
 800a20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a20e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a212:	2bc0      	cmp	r3, #192	; 0xc0
 800a214:	d013      	beq.n	800a23e <UART_SetConfig+0x1ba>
 800a216:	2bc0      	cmp	r3, #192	; 0xc0
 800a218:	d814      	bhi.n	800a244 <UART_SetConfig+0x1c0>
 800a21a:	2b80      	cmp	r3, #128	; 0x80
 800a21c:	d009      	beq.n	800a232 <UART_SetConfig+0x1ae>
 800a21e:	2b80      	cmp	r3, #128	; 0x80
 800a220:	d810      	bhi.n	800a244 <UART_SetConfig+0x1c0>
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <UART_SetConfig+0x1a8>
 800a226:	2b40      	cmp	r3, #64	; 0x40
 800a228:	d006      	beq.n	800a238 <UART_SetConfig+0x1b4>
 800a22a:	e00b      	b.n	800a244 <UART_SetConfig+0x1c0>
 800a22c:	2300      	movs	r3, #0
 800a22e:	77fb      	strb	r3, [r7, #31]
 800a230:	e0cc      	b.n	800a3cc <UART_SetConfig+0x348>
 800a232:	2302      	movs	r3, #2
 800a234:	77fb      	strb	r3, [r7, #31]
 800a236:	e0c9      	b.n	800a3cc <UART_SetConfig+0x348>
 800a238:	2304      	movs	r3, #4
 800a23a:	77fb      	strb	r3, [r7, #31]
 800a23c:	e0c6      	b.n	800a3cc <UART_SetConfig+0x348>
 800a23e:	2308      	movs	r3, #8
 800a240:	77fb      	strb	r3, [r7, #31]
 800a242:	e0c3      	b.n	800a3cc <UART_SetConfig+0x348>
 800a244:	2310      	movs	r3, #16
 800a246:	77fb      	strb	r3, [r7, #31]
 800a248:	e0c0      	b.n	800a3cc <UART_SetConfig+0x348>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a44      	ldr	r2, [pc, #272]	; (800a360 <UART_SetConfig+0x2dc>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d125      	bne.n	800a2a0 <UART_SetConfig+0x21c>
 800a254:	4b3e      	ldr	r3, [pc, #248]	; (800a350 <UART_SetConfig+0x2cc>)
 800a256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a25a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a25e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a262:	d017      	beq.n	800a294 <UART_SetConfig+0x210>
 800a264:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a268:	d817      	bhi.n	800a29a <UART_SetConfig+0x216>
 800a26a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a26e:	d00b      	beq.n	800a288 <UART_SetConfig+0x204>
 800a270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a274:	d811      	bhi.n	800a29a <UART_SetConfig+0x216>
 800a276:	2b00      	cmp	r3, #0
 800a278:	d003      	beq.n	800a282 <UART_SetConfig+0x1fe>
 800a27a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a27e:	d006      	beq.n	800a28e <UART_SetConfig+0x20a>
 800a280:	e00b      	b.n	800a29a <UART_SetConfig+0x216>
 800a282:	2300      	movs	r3, #0
 800a284:	77fb      	strb	r3, [r7, #31]
 800a286:	e0a1      	b.n	800a3cc <UART_SetConfig+0x348>
 800a288:	2302      	movs	r3, #2
 800a28a:	77fb      	strb	r3, [r7, #31]
 800a28c:	e09e      	b.n	800a3cc <UART_SetConfig+0x348>
 800a28e:	2304      	movs	r3, #4
 800a290:	77fb      	strb	r3, [r7, #31]
 800a292:	e09b      	b.n	800a3cc <UART_SetConfig+0x348>
 800a294:	2308      	movs	r3, #8
 800a296:	77fb      	strb	r3, [r7, #31]
 800a298:	e098      	b.n	800a3cc <UART_SetConfig+0x348>
 800a29a:	2310      	movs	r3, #16
 800a29c:	77fb      	strb	r3, [r7, #31]
 800a29e:	e095      	b.n	800a3cc <UART_SetConfig+0x348>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a2f      	ldr	r2, [pc, #188]	; (800a364 <UART_SetConfig+0x2e0>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d125      	bne.n	800a2f6 <UART_SetConfig+0x272>
 800a2aa:	4b29      	ldr	r3, [pc, #164]	; (800a350 <UART_SetConfig+0x2cc>)
 800a2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a2b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2b8:	d017      	beq.n	800a2ea <UART_SetConfig+0x266>
 800a2ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a2be:	d817      	bhi.n	800a2f0 <UART_SetConfig+0x26c>
 800a2c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2c4:	d00b      	beq.n	800a2de <UART_SetConfig+0x25a>
 800a2c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2ca:	d811      	bhi.n	800a2f0 <UART_SetConfig+0x26c>
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d003      	beq.n	800a2d8 <UART_SetConfig+0x254>
 800a2d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2d4:	d006      	beq.n	800a2e4 <UART_SetConfig+0x260>
 800a2d6:	e00b      	b.n	800a2f0 <UART_SetConfig+0x26c>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	77fb      	strb	r3, [r7, #31]
 800a2dc:	e076      	b.n	800a3cc <UART_SetConfig+0x348>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	77fb      	strb	r3, [r7, #31]
 800a2e2:	e073      	b.n	800a3cc <UART_SetConfig+0x348>
 800a2e4:	2304      	movs	r3, #4
 800a2e6:	77fb      	strb	r3, [r7, #31]
 800a2e8:	e070      	b.n	800a3cc <UART_SetConfig+0x348>
 800a2ea:	2308      	movs	r3, #8
 800a2ec:	77fb      	strb	r3, [r7, #31]
 800a2ee:	e06d      	b.n	800a3cc <UART_SetConfig+0x348>
 800a2f0:	2310      	movs	r3, #16
 800a2f2:	77fb      	strb	r3, [r7, #31]
 800a2f4:	e06a      	b.n	800a3cc <UART_SetConfig+0x348>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a1b      	ldr	r2, [pc, #108]	; (800a368 <UART_SetConfig+0x2e4>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d138      	bne.n	800a372 <UART_SetConfig+0x2ee>
 800a300:	4b13      	ldr	r3, [pc, #76]	; (800a350 <UART_SetConfig+0x2cc>)
 800a302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a306:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a30a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a30e:	d017      	beq.n	800a340 <UART_SetConfig+0x2bc>
 800a310:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a314:	d82a      	bhi.n	800a36c <UART_SetConfig+0x2e8>
 800a316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a31a:	d00b      	beq.n	800a334 <UART_SetConfig+0x2b0>
 800a31c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a320:	d824      	bhi.n	800a36c <UART_SetConfig+0x2e8>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d003      	beq.n	800a32e <UART_SetConfig+0x2aa>
 800a326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a32a:	d006      	beq.n	800a33a <UART_SetConfig+0x2b6>
 800a32c:	e01e      	b.n	800a36c <UART_SetConfig+0x2e8>
 800a32e:	2300      	movs	r3, #0
 800a330:	77fb      	strb	r3, [r7, #31]
 800a332:	e04b      	b.n	800a3cc <UART_SetConfig+0x348>
 800a334:	2302      	movs	r3, #2
 800a336:	77fb      	strb	r3, [r7, #31]
 800a338:	e048      	b.n	800a3cc <UART_SetConfig+0x348>
 800a33a:	2304      	movs	r3, #4
 800a33c:	77fb      	strb	r3, [r7, #31]
 800a33e:	e045      	b.n	800a3cc <UART_SetConfig+0x348>
 800a340:	2308      	movs	r3, #8
 800a342:	77fb      	strb	r3, [r7, #31]
 800a344:	e042      	b.n	800a3cc <UART_SetConfig+0x348>
 800a346:	bf00      	nop
 800a348:	efff69f3 	.word	0xefff69f3
 800a34c:	40011000 	.word	0x40011000
 800a350:	40023800 	.word	0x40023800
 800a354:	40004400 	.word	0x40004400
 800a358:	40004800 	.word	0x40004800
 800a35c:	40004c00 	.word	0x40004c00
 800a360:	40005000 	.word	0x40005000
 800a364:	40011400 	.word	0x40011400
 800a368:	40007800 	.word	0x40007800
 800a36c:	2310      	movs	r3, #16
 800a36e:	77fb      	strb	r3, [r7, #31]
 800a370:	e02c      	b.n	800a3cc <UART_SetConfig+0x348>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a72      	ldr	r2, [pc, #456]	; (800a540 <UART_SetConfig+0x4bc>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d125      	bne.n	800a3c8 <UART_SetConfig+0x344>
 800a37c:	4b71      	ldr	r3, [pc, #452]	; (800a544 <UART_SetConfig+0x4c0>)
 800a37e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a382:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a386:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a38a:	d017      	beq.n	800a3bc <UART_SetConfig+0x338>
 800a38c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a390:	d817      	bhi.n	800a3c2 <UART_SetConfig+0x33e>
 800a392:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a396:	d00b      	beq.n	800a3b0 <UART_SetConfig+0x32c>
 800a398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a39c:	d811      	bhi.n	800a3c2 <UART_SetConfig+0x33e>
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <UART_SetConfig+0x326>
 800a3a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3a6:	d006      	beq.n	800a3b6 <UART_SetConfig+0x332>
 800a3a8:	e00b      	b.n	800a3c2 <UART_SetConfig+0x33e>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	77fb      	strb	r3, [r7, #31]
 800a3ae:	e00d      	b.n	800a3cc <UART_SetConfig+0x348>
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	77fb      	strb	r3, [r7, #31]
 800a3b4:	e00a      	b.n	800a3cc <UART_SetConfig+0x348>
 800a3b6:	2304      	movs	r3, #4
 800a3b8:	77fb      	strb	r3, [r7, #31]
 800a3ba:	e007      	b.n	800a3cc <UART_SetConfig+0x348>
 800a3bc:	2308      	movs	r3, #8
 800a3be:	77fb      	strb	r3, [r7, #31]
 800a3c0:	e004      	b.n	800a3cc <UART_SetConfig+0x348>
 800a3c2:	2310      	movs	r3, #16
 800a3c4:	77fb      	strb	r3, [r7, #31]
 800a3c6:	e001      	b.n	800a3cc <UART_SetConfig+0x348>
 800a3c8:	2310      	movs	r3, #16
 800a3ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	69db      	ldr	r3, [r3, #28]
 800a3d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3d4:	d15b      	bne.n	800a48e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a3d6:	7ffb      	ldrb	r3, [r7, #31]
 800a3d8:	2b08      	cmp	r3, #8
 800a3da:	d828      	bhi.n	800a42e <UART_SetConfig+0x3aa>
 800a3dc:	a201      	add	r2, pc, #4	; (adr r2, 800a3e4 <UART_SetConfig+0x360>)
 800a3de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e2:	bf00      	nop
 800a3e4:	0800a409 	.word	0x0800a409
 800a3e8:	0800a411 	.word	0x0800a411
 800a3ec:	0800a419 	.word	0x0800a419
 800a3f0:	0800a42f 	.word	0x0800a42f
 800a3f4:	0800a41f 	.word	0x0800a41f
 800a3f8:	0800a42f 	.word	0x0800a42f
 800a3fc:	0800a42f 	.word	0x0800a42f
 800a400:	0800a42f 	.word	0x0800a42f
 800a404:	0800a427 	.word	0x0800a427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a408:	f7fd f83c 	bl	8007484 <HAL_RCC_GetPCLK1Freq>
 800a40c:	61b8      	str	r0, [r7, #24]
        break;
 800a40e:	e013      	b.n	800a438 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a410:	f7fd f84c 	bl	80074ac <HAL_RCC_GetPCLK2Freq>
 800a414:	61b8      	str	r0, [r7, #24]
        break;
 800a416:	e00f      	b.n	800a438 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a418:	4b4b      	ldr	r3, [pc, #300]	; (800a548 <UART_SetConfig+0x4c4>)
 800a41a:	61bb      	str	r3, [r7, #24]
        break;
 800a41c:	e00c      	b.n	800a438 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a41e:	f7fc ff5f 	bl	80072e0 <HAL_RCC_GetSysClockFreq>
 800a422:	61b8      	str	r0, [r7, #24]
        break;
 800a424:	e008      	b.n	800a438 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a42a:	61bb      	str	r3, [r7, #24]
        break;
 800a42c:	e004      	b.n	800a438 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a42e:	2300      	movs	r3, #0
 800a430:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	77bb      	strb	r3, [r7, #30]
        break;
 800a436:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d074      	beq.n	800a528 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	005a      	lsls	r2, r3, #1
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	085b      	lsrs	r3, r3, #1
 800a448:	441a      	add	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a452:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2b0f      	cmp	r3, #15
 800a458:	d916      	bls.n	800a488 <UART_SetConfig+0x404>
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a460:	d212      	bcs.n	800a488 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	b29b      	uxth	r3, r3
 800a466:	f023 030f 	bic.w	r3, r3, #15
 800a46a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	085b      	lsrs	r3, r3, #1
 800a470:	b29b      	uxth	r3, r3
 800a472:	f003 0307 	and.w	r3, r3, #7
 800a476:	b29a      	uxth	r2, r3
 800a478:	89fb      	ldrh	r3, [r7, #14]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	89fa      	ldrh	r2, [r7, #14]
 800a484:	60da      	str	r2, [r3, #12]
 800a486:	e04f      	b.n	800a528 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	77bb      	strb	r3, [r7, #30]
 800a48c:	e04c      	b.n	800a528 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a48e:	7ffb      	ldrb	r3, [r7, #31]
 800a490:	2b08      	cmp	r3, #8
 800a492:	d828      	bhi.n	800a4e6 <UART_SetConfig+0x462>
 800a494:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <UART_SetConfig+0x418>)
 800a496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49a:	bf00      	nop
 800a49c:	0800a4c1 	.word	0x0800a4c1
 800a4a0:	0800a4c9 	.word	0x0800a4c9
 800a4a4:	0800a4d1 	.word	0x0800a4d1
 800a4a8:	0800a4e7 	.word	0x0800a4e7
 800a4ac:	0800a4d7 	.word	0x0800a4d7
 800a4b0:	0800a4e7 	.word	0x0800a4e7
 800a4b4:	0800a4e7 	.word	0x0800a4e7
 800a4b8:	0800a4e7 	.word	0x0800a4e7
 800a4bc:	0800a4df 	.word	0x0800a4df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4c0:	f7fc ffe0 	bl	8007484 <HAL_RCC_GetPCLK1Freq>
 800a4c4:	61b8      	str	r0, [r7, #24]
        break;
 800a4c6:	e013      	b.n	800a4f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4c8:	f7fc fff0 	bl	80074ac <HAL_RCC_GetPCLK2Freq>
 800a4cc:	61b8      	str	r0, [r7, #24]
        break;
 800a4ce:	e00f      	b.n	800a4f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4d0:	4b1d      	ldr	r3, [pc, #116]	; (800a548 <UART_SetConfig+0x4c4>)
 800a4d2:	61bb      	str	r3, [r7, #24]
        break;
 800a4d4:	e00c      	b.n	800a4f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4d6:	f7fc ff03 	bl	80072e0 <HAL_RCC_GetSysClockFreq>
 800a4da:	61b8      	str	r0, [r7, #24]
        break;
 800a4dc:	e008      	b.n	800a4f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4e2:	61bb      	str	r3, [r7, #24]
        break;
 800a4e4:	e004      	b.n	800a4f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	77bb      	strb	r3, [r7, #30]
        break;
 800a4ee:	bf00      	nop
    }

    if (pclk != 0U)
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d018      	beq.n	800a528 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	085a      	lsrs	r2, r3, #1
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	441a      	add	r2, r3
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	fbb2 f3f3 	udiv	r3, r2, r3
 800a508:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	2b0f      	cmp	r3, #15
 800a50e:	d909      	bls.n	800a524 <UART_SetConfig+0x4a0>
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a516:	d205      	bcs.n	800a524 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	60da      	str	r2, [r3, #12]
 800a522:	e001      	b.n	800a528 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a534:	7fbb      	ldrb	r3, [r7, #30]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3720      	adds	r7, #32
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	40007c00 	.word	0x40007c00
 800a544:	40023800 	.word	0x40023800
 800a548:	00f42400 	.word	0x00f42400

0800a54c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	f003 0301 	and.w	r3, r3, #1
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00a      	beq.n	800a576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	430a      	orrs	r2, r1
 800a574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	685b      	ldr	r3, [r3, #4]
 800a588:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	430a      	orrs	r2, r1
 800a596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59c:	f003 0304 	and.w	r3, r3, #4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d00a      	beq.n	800a5ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	430a      	orrs	r2, r1
 800a5b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	f003 0308 	and.w	r3, r3, #8
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00a      	beq.n	800a5dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e0:	f003 0310 	and.w	r3, r3, #16
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00a      	beq.n	800a5fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a602:	f003 0320 	and.w	r3, r3, #32
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00a      	beq.n	800a620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	430a      	orrs	r2, r1
 800a61e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d01a      	beq.n	800a662 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	430a      	orrs	r2, r1
 800a640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a64a:	d10a      	bne.n	800a662 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	430a      	orrs	r2, r1
 800a660:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d00a      	beq.n	800a684 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	430a      	orrs	r2, r1
 800a682:	605a      	str	r2, [r3, #4]
  }
}
 800a684:	bf00      	nop
 800a686:	370c      	adds	r7, #12
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af02      	add	r7, sp, #8
 800a696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6a0:	f7f9 fbd6 	bl	8003e50 <HAL_GetTick>
 800a6a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f003 0308 	and.w	r3, r3, #8
 800a6b0:	2b08      	cmp	r3, #8
 800a6b2:	d10e      	bne.n	800a6d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 f831 	bl	800a72a <UART_WaitOnFlagUntilTimeout>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	e027      	b.n	800a722 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0304 	and.w	r3, r3, #4
 800a6dc:	2b04      	cmp	r3, #4
 800a6de:	d10e      	bne.n	800a6fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f81b 	bl	800a72a <UART_WaitOnFlagUntilTimeout>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d001      	beq.n	800a6fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e011      	b.n	800a722 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2220      	movs	r2, #32
 800a702:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b09c      	sub	sp, #112	; 0x70
 800a72e:	af00      	add	r7, sp, #0
 800a730:	60f8      	str	r0, [r7, #12]
 800a732:	60b9      	str	r1, [r7, #8]
 800a734:	603b      	str	r3, [r7, #0]
 800a736:	4613      	mov	r3, r2
 800a738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a73a:	e0a7      	b.n	800a88c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a73c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a73e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a742:	f000 80a3 	beq.w	800a88c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a746:	f7f9 fb83 	bl	8003e50 <HAL_GetTick>
 800a74a:	4602      	mov	r2, r0
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	1ad3      	subs	r3, r2, r3
 800a750:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a752:	429a      	cmp	r2, r3
 800a754:	d302      	bcc.n	800a75c <UART_WaitOnFlagUntilTimeout+0x32>
 800a756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d13f      	bne.n	800a7dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a764:	e853 3f00 	ldrex	r3, [r3]
 800a768:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a76c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a770:	667b      	str	r3, [r7, #100]	; 0x64
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a77a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a77c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a780:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a782:	e841 2300 	strex	r3, r2, [r1]
 800a786:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1e6      	bne.n	800a75c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	3308      	adds	r3, #8
 800a794:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a798:	e853 3f00 	ldrex	r3, [r3]
 800a79c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a0:	f023 0301 	bic.w	r3, r3, #1
 800a7a4:	663b      	str	r3, [r7, #96]	; 0x60
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	3308      	adds	r3, #8
 800a7ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a7ae:	64ba      	str	r2, [r7, #72]	; 0x48
 800a7b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7b6:	e841 2300 	strex	r3, r2, [r1]
 800a7ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a7bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1e5      	bne.n	800a78e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2220      	movs	r2, #32
 800a7c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e068      	b.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d050      	beq.n	800a88c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7f8:	d148      	bne.n	800a88c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a802:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80c:	e853 3f00 	ldrex	r3, [r3]
 800a810:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a818:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a822:	637b      	str	r3, [r7, #52]	; 0x34
 800a824:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a826:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a828:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a82a:	e841 2300 	strex	r3, r2, [r1]
 800a82e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1e6      	bne.n	800a804 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3308      	adds	r3, #8
 800a83c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	613b      	str	r3, [r7, #16]
   return(result);
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	f023 0301 	bic.w	r3, r3, #1
 800a84c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3308      	adds	r3, #8
 800a854:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a856:	623a      	str	r2, [r7, #32]
 800a858:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	69f9      	ldr	r1, [r7, #28]
 800a85c:	6a3a      	ldr	r2, [r7, #32]
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	61bb      	str	r3, [r7, #24]
   return(result);
 800a864:	69bb      	ldr	r3, [r7, #24]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e5      	bne.n	800a836 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2220      	movs	r2, #32
 800a86e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2220      	movs	r2, #32
 800a874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2220      	movs	r2, #32
 800a87c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a888:	2303      	movs	r3, #3
 800a88a:	e010      	b.n	800a8ae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	69da      	ldr	r2, [r3, #28]
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	4013      	ands	r3, r2
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	429a      	cmp	r2, r3
 800a89a:	bf0c      	ite	eq
 800a89c:	2301      	moveq	r3, #1
 800a89e:	2300      	movne	r3, #0
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	461a      	mov	r2, r3
 800a8a4:	79fb      	ldrb	r3, [r7, #7]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	f43f af48 	beq.w	800a73c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8ac:	2300      	movs	r3, #0
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3770      	adds	r7, #112	; 0x70
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}
	...

0800a8b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d121      	bne.n	800a90e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	4b27      	ldr	r3, [pc, #156]	; (800a96c <FMC_SDRAM_Init+0xb4>)
 800a8d0:	4013      	ands	r3, r2
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	6851      	ldr	r1, [r2, #4]
 800a8d6:	683a      	ldr	r2, [r7, #0]
 800a8d8:	6892      	ldr	r2, [r2, #8]
 800a8da:	4311      	orrs	r1, r2
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	68d2      	ldr	r2, [r2, #12]
 800a8e0:	4311      	orrs	r1, r2
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	6912      	ldr	r2, [r2, #16]
 800a8e6:	4311      	orrs	r1, r2
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	6952      	ldr	r2, [r2, #20]
 800a8ec:	4311      	orrs	r1, r2
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	6992      	ldr	r2, [r2, #24]
 800a8f2:	4311      	orrs	r1, r2
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	69d2      	ldr	r2, [r2, #28]
 800a8f8:	4311      	orrs	r1, r2
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	6a12      	ldr	r2, [r2, #32]
 800a8fe:	4311      	orrs	r1, r2
 800a900:	683a      	ldr	r2, [r7, #0]
 800a902:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a904:	430a      	orrs	r2, r1
 800a906:	431a      	orrs	r2, r3
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	601a      	str	r2, [r3, #0]
 800a90c:	e026      	b.n	800a95c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	69d9      	ldr	r1, [r3, #28]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	4319      	orrs	r1, r3
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a924:	430b      	orrs	r3, r1
 800a926:	431a      	orrs	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	4b0e      	ldr	r3, [pc, #56]	; (800a96c <FMC_SDRAM_Init+0xb4>)
 800a932:	4013      	ands	r3, r2
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	6851      	ldr	r1, [r2, #4]
 800a938:	683a      	ldr	r2, [r7, #0]
 800a93a:	6892      	ldr	r2, [r2, #8]
 800a93c:	4311      	orrs	r1, r2
 800a93e:	683a      	ldr	r2, [r7, #0]
 800a940:	68d2      	ldr	r2, [r2, #12]
 800a942:	4311      	orrs	r1, r2
 800a944:	683a      	ldr	r2, [r7, #0]
 800a946:	6912      	ldr	r2, [r2, #16]
 800a948:	4311      	orrs	r1, r2
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	6952      	ldr	r2, [r2, #20]
 800a94e:	4311      	orrs	r1, r2
 800a950:	683a      	ldr	r2, [r7, #0]
 800a952:	6992      	ldr	r2, [r2, #24]
 800a954:	430a      	orrs	r2, r1
 800a956:	431a      	orrs	r2, r3
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	ffff8000 	.word	0xffff8000

0800a970 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d128      	bne.n	800a9d4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	1e59      	subs	r1, r3, #1
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	3b01      	subs	r3, #1
 800a996:	011b      	lsls	r3, r3, #4
 800a998:	4319      	orrs	r1, r3
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	021b      	lsls	r3, r3, #8
 800a9a2:	4319      	orrs	r1, r3
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	031b      	lsls	r3, r3, #12
 800a9ac:	4319      	orrs	r1, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	041b      	lsls	r3, r3, #16
 800a9b6:	4319      	orrs	r1, r3
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	051b      	lsls	r3, r3, #20
 800a9c0:	4319      	orrs	r1, r3
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	061b      	lsls	r3, r3, #24
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	431a      	orrs	r2, r3
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	609a      	str	r2, [r3, #8]
 800a9d2:	e02d      	b.n	800aa30 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	689a      	ldr	r2, [r3, #8]
 800a9d8:	4b19      	ldr	r3, [pc, #100]	; (800aa40 <FMC_SDRAM_Timing_Init+0xd0>)
 800a9da:	4013      	ands	r3, r2
 800a9dc:	68ba      	ldr	r2, [r7, #8]
 800a9de:	68d2      	ldr	r2, [r2, #12]
 800a9e0:	3a01      	subs	r2, #1
 800a9e2:	0311      	lsls	r1, r2, #12
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	6952      	ldr	r2, [r2, #20]
 800a9e8:	3a01      	subs	r2, #1
 800a9ea:	0512      	lsls	r2, r2, #20
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	1e59      	subs	r1, r3, #1
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	011b      	lsls	r3, r3, #4
 800aa0a:	4319      	orrs	r1, r3
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	021b      	lsls	r3, r3, #8
 800aa14:	4319      	orrs	r1, r3
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	3b01      	subs	r3, #1
 800aa1c:	041b      	lsls	r3, r3, #16
 800aa1e:	4319      	orrs	r1, r3
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	699b      	ldr	r3, [r3, #24]
 800aa24:	3b01      	subs	r3, #1
 800aa26:	061b      	lsls	r3, r3, #24
 800aa28:	430b      	orrs	r3, r1
 800aa2a:	431a      	orrs	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	ff0f0fff 	.word	0xff0f0fff

0800aa44 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa44:	b084      	sub	sp, #16
 800aa46:	b480      	push	{r7}
 800aa48:	b085      	sub	sp, #20
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	f107 001c 	add.w	r0, r7, #28
 800aa52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa56:	2300      	movs	r3, #0
 800aa58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa5a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa5e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aa62:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aa66:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aa68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aa6a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aa6e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685a      	ldr	r2, [r3, #4]
 800aa7a:	4b07      	ldr	r3, [pc, #28]	; (800aa98 <SDMMC_Init+0x54>)
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	431a      	orrs	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3714      	adds	r7, #20
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	b004      	add	sp, #16
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	ffff8100 	.word	0xffff8100

0800aa9c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800aab6:	b480      	push	{r7}
 800aab8:	b083      	sub	sp, #12
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2203      	movs	r2, #3
 800aae4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	370c      	adds	r7, #12
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0303 	and.w	r3, r3, #3
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	370c      	adds	r7, #12
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b085      	sub	sp, #20
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
 800ab18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab2e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab34:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68da      	ldr	r2, [r3, #12]
 800ab46:	4b06      	ldr	r3, [pc, #24]	; (800ab60 <SDMMC_SendCommand+0x50>)
 800ab48:	4013      	ands	r3, r2
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	431a      	orrs	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ab52:	2300      	movs	r3, #0
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3714      	adds	r7, #20
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5e:	4770      	bx	lr
 800ab60:	fffff000 	.word	0xfffff000

0800ab64 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	b2db      	uxtb	r3, r3
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b085      	sub	sp, #20
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3314      	adds	r3, #20
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	4413      	add	r3, r2
 800ab92:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
}  
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abae:	2300      	movs	r3, #0
 800abb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	685a      	ldr	r2, [r3, #4]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abca:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800abd0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800abd6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	4313      	orrs	r3, r2
 800abdc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	431a      	orrs	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800abee:	2300      	movs	r3, #0

}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac0a:	2310      	movs	r3, #16
 800ac0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac0e:	2340      	movs	r3, #64	; 0x40
 800ac10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac12:	2300      	movs	r3, #0
 800ac14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac1c:	f107 0308 	add.w	r3, r7, #8
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff ff74 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac2c:	2110      	movs	r1, #16
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fa1a 	bl	800b068 <SDMMC_GetCmdResp1>
 800ac34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac36:	69fb      	ldr	r3, [r7, #28]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3720      	adds	r7, #32
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b088      	sub	sp, #32
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac4e:	2311      	movs	r3, #17
 800ac50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac52:	2340      	movs	r3, #64	; 0x40
 800ac54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac56:	2300      	movs	r3, #0
 800ac58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac60:	f107 0308 	add.w	r3, r7, #8
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f7ff ff52 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac70:	2111      	movs	r1, #17
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f9f8 	bl	800b068 <SDMMC_GetCmdResp1>
 800ac78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac7a:	69fb      	ldr	r3, [r7, #28]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3720      	adds	r7, #32
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b088      	sub	sp, #32
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ac92:	2312      	movs	r3, #18
 800ac94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac96:	2340      	movs	r3, #64	; 0x40
 800ac98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aca2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aca4:	f107 0308 	add.w	r3, r7, #8
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff ff30 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800acb4:	2112      	movs	r1, #18
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f000 f9d6 	bl	800b068 <SDMMC_GetCmdResp1>
 800acbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acbe:	69fb      	ldr	r3, [r7, #28]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3720      	adds	r7, #32
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b088      	sub	sp, #32
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800acd6:	2318      	movs	r3, #24
 800acd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acda:	2340      	movs	r3, #64	; 0x40
 800acdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acde:	2300      	movs	r3, #0
 800ace0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ace2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ace6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ace8:	f107 0308 	add.w	r3, r7, #8
 800acec:	4619      	mov	r1, r3
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7ff ff0e 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800acf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800acf8:	2118      	movs	r1, #24
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f9b4 	bl	800b068 <SDMMC_GetCmdResp1>
 800ad00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad02:	69fb      	ldr	r3, [r7, #28]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3720      	adds	r7, #32
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b088      	sub	sp, #32
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad1a:	2319      	movs	r3, #25
 800ad1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad1e:	2340      	movs	r3, #64	; 0x40
 800ad20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad2c:	f107 0308 	add.w	r3, r7, #8
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff feec 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad3c:	2119      	movs	r1, #25
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f992 	bl	800b068 <SDMMC_GetCmdResp1>
 800ad44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad46:	69fb      	ldr	r3, [r7, #28]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3720      	adds	r7, #32
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad5c:	230c      	movs	r3, #12
 800ad5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad60:	2340      	movs	r3, #64	; 0x40
 800ad62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad64:	2300      	movs	r3, #0
 800ad66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad6e:	f107 0308 	add.w	r3, r7, #8
 800ad72:	4619      	mov	r1, r3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f7ff fecb 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ad7a:	4a05      	ldr	r2, [pc, #20]	; (800ad90 <SDMMC_CmdStopTransfer+0x40>)
 800ad7c:	210c      	movs	r1, #12
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 f972 	bl	800b068 <SDMMC_GetCmdResp1>
 800ad84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad86:	69fb      	ldr	r3, [r7, #28]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3720      	adds	r7, #32
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	05f5e100 	.word	0x05f5e100

0800ad94 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08a      	sub	sp, #40	; 0x28
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	60f8      	str	r0, [r7, #12]
 800ad9c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ada4:	2307      	movs	r3, #7
 800ada6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ada8:	2340      	movs	r3, #64	; 0x40
 800adaa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adac:	2300      	movs	r3, #0
 800adae:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adb6:	f107 0310 	add.w	r3, r7, #16
 800adba:	4619      	mov	r1, r3
 800adbc:	68f8      	ldr	r0, [r7, #12]
 800adbe:	f7ff fea7 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800adc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc6:	2107      	movs	r1, #7
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f000 f94d 	bl	800b068 <SDMMC_GetCmdResp1>
 800adce:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800add2:	4618      	mov	r0, r3
 800add4:	3728      	adds	r7, #40	; 0x28
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b088      	sub	sp, #32
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ade2:	2300      	movs	r3, #0
 800ade4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ade6:	2300      	movs	r3, #0
 800ade8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800adea:	2300      	movs	r3, #0
 800adec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adee:	2300      	movs	r3, #0
 800adf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf8:	f107 0308 	add.w	r3, r7, #8
 800adfc:	4619      	mov	r1, r3
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f7ff fe86 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fb67 	bl	800b4d8 <SDMMC_GetCmdError>
 800ae0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3720      	adds	r7, #32
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b088      	sub	sp, #32
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ae1e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ae22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ae24:	2308      	movs	r3, #8
 800ae26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae28:	2340      	movs	r3, #64	; 0x40
 800ae2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae36:	f107 0308 	add.w	r3, r7, #8
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f7ff fe67 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fafa 	bl	800b43c <SDMMC_GetCmdResp7>
 800ae48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae4a:	69fb      	ldr	r3, [r7, #28]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3720      	adds	r7, #32
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ae62:	2337      	movs	r3, #55	; 0x37
 800ae64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae66:	2340      	movs	r3, #64	; 0x40
 800ae68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae74:	f107 0308 	add.w	r3, r7, #8
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fe48 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ae80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae84:	2137      	movs	r1, #55	; 0x37
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f8ee 	bl	800b068 <SDMMC_GetCmdResp1>
 800ae8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	4b0d      	ldr	r3, [pc, #52]	; (800aedc <SDMMC_CmdAppOperCommand+0x44>)
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aeaa:	2329      	movs	r3, #41	; 0x29
 800aeac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeae:	2340      	movs	r3, #64	; 0x40
 800aeb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aebc:	f107 0308 	add.w	r3, r7, #8
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7ff fe24 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fa03 	bl	800b2d4 <SDMMC_GetCmdResp3>
 800aece:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aed0:	69fb      	ldr	r3, [r7, #28]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3720      	adds	r7, #32
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	80100000 	.word	0x80100000

0800aee0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800aeee:	2306      	movs	r3, #6
 800aef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aef2:	2340      	movs	r3, #64	; 0x40
 800aef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aef6:	2300      	movs	r3, #0
 800aef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aefa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aefe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af00:	f107 0308 	add.w	r3, r7, #8
 800af04:	4619      	mov	r1, r3
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f7ff fe02 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af10:	2106      	movs	r1, #6
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f8a8 	bl	800b068 <SDMMC_GetCmdResp1>
 800af18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af1a:	69fb      	ldr	r3, [r7, #28]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3720      	adds	r7, #32
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b088      	sub	sp, #32
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800af30:	2333      	movs	r3, #51	; 0x33
 800af32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af34:	2340      	movs	r3, #64	; 0x40
 800af36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af38:	2300      	movs	r3, #0
 800af3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af42:	f107 0308 	add.w	r3, r7, #8
 800af46:	4619      	mov	r1, r3
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f7ff fde1 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800af4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af52:	2133      	movs	r1, #51	; 0x33
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f887 	bl	800b068 <SDMMC_GetCmdResp1>
 800af5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af5c:	69fb      	ldr	r3, [r7, #28]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3720      	adds	r7, #32
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b088      	sub	sp, #32
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800af72:	2302      	movs	r3, #2
 800af74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800af76:	23c0      	movs	r3, #192	; 0xc0
 800af78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af7a:	2300      	movs	r3, #0
 800af7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af84:	f107 0308 	add.w	r3, r7, #8
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff fdc0 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f957 	bl	800b244 <SDMMC_GetCmdResp2>
 800af96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af98:	69fb      	ldr	r3, [r7, #28]
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3720      	adds	r7, #32
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b088      	sub	sp, #32
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
 800afaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800afb0:	2309      	movs	r3, #9
 800afb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800afb4:	23c0      	movs	r3, #192	; 0xc0
 800afb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afb8:	2300      	movs	r3, #0
 800afba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afc2:	f107 0308 	add.w	r3, r7, #8
 800afc6:	4619      	mov	r1, r3
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7ff fda1 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800afce:	6878      	ldr	r0, [r7, #4]
 800afd0:	f000 f938 	bl	800b244 <SDMMC_GetCmdResp2>
 800afd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afd6:	69fb      	ldr	r3, [r7, #28]
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3720      	adds	r7, #32
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800afee:	2303      	movs	r3, #3
 800aff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aff2:	2340      	movs	r3, #64	; 0x40
 800aff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aff6:	2300      	movs	r3, #0
 800aff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800affa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800affe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b000:	f107 0308 	add.w	r3, r7, #8
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7ff fd82 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	2103      	movs	r1, #3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f99d 	bl	800b350 <SDMMC_GetCmdResp6>
 800b016:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b018:	69fb      	ldr	r3, [r7, #28]
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3720      	adds	r7, #32
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b088      	sub	sp, #32
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
 800b02a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b030:	230d      	movs	r3, #13
 800b032:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b034:	2340      	movs	r3, #64	; 0x40
 800b036:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b038:	2300      	movs	r3, #0
 800b03a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b03c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b040:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b042:	f107 0308 	add.w	r3, r7, #8
 800b046:	4619      	mov	r1, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f7ff fd61 	bl	800ab10 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b04e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b052:	210d      	movs	r1, #13
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 f807 	bl	800b068 <SDMMC_GetCmdResp1>
 800b05a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b05c:	69fb      	ldr	r3, [r7, #28]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
	...

0800b068 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b088      	sub	sp, #32
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	460b      	mov	r3, r1
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b076:	4b70      	ldr	r3, [pc, #448]	; (800b238 <SDMMC_GetCmdResp1+0x1d0>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a70      	ldr	r2, [pc, #448]	; (800b23c <SDMMC_GetCmdResp1+0x1d4>)
 800b07c:	fba2 2303 	umull	r2, r3, r2, r3
 800b080:	0a5a      	lsrs	r2, r3, #9
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	fb02 f303 	mul.w	r3, r2, r3
 800b088:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	1e5a      	subs	r2, r3, #1
 800b08e:	61fa      	str	r2, [r7, #28]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d102      	bne.n	800b09a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b094:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b098:	e0c9      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b09e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d0ef      	beq.n	800b08a <SDMMC_GetCmdResp1+0x22>
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d1ea      	bne.n	800b08a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0b8:	f003 0304 	and.w	r3, r3, #4
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d004      	beq.n	800b0ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	2204      	movs	r2, #4
 800b0c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0c6:	2304      	movs	r3, #4
 800b0c8:	e0b1      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ce:	f003 0301 	and.w	r3, r3, #1
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d004      	beq.n	800b0e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e0a6      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	22c5      	movs	r2, #197	; 0xc5
 800b0e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b0e6:	68f8      	ldr	r0, [r7, #12]
 800b0e8:	f7ff fd3c 	bl	800ab64 <SDMMC_GetCommandResponse>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	7afb      	ldrb	r3, [r7, #11]
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d001      	beq.n	800b0fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e099      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	68f8      	ldr	r0, [r7, #12]
 800b0fe:	f7ff fd3e 	bl	800ab7e <SDMMC_GetResponse>
 800b102:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b104:	697a      	ldr	r2, [r7, #20]
 800b106:	4b4e      	ldr	r3, [pc, #312]	; (800b240 <SDMMC_GetCmdResp1+0x1d8>)
 800b108:	4013      	ands	r3, r2
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d101      	bne.n	800b112 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b10e:	2300      	movs	r3, #0
 800b110:	e08d      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	2b00      	cmp	r3, #0
 800b116:	da02      	bge.n	800b11e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b118:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b11c:	e087      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b128:	2340      	movs	r3, #64	; 0x40
 800b12a:	e080      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d001      	beq.n	800b13a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b136:	2380      	movs	r3, #128	; 0x80
 800b138:	e079      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b144:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b148:	e071      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b154:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b158:	e069      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d002      	beq.n	800b16a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b168:	e061      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b170:	2b00      	cmp	r3, #0
 800b172:	d002      	beq.n	800b17a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b178:	e059      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b188:	e051      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b190:	2b00      	cmp	r3, #0
 800b192:	d002      	beq.n	800b19a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b198:	e049      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d002      	beq.n	800b1aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b1a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b1a8:	e041      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d002      	beq.n	800b1ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b1b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1b8:	e039      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b1c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b1c8:	e031      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b1d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b1d8:	e029      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b1e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b1e8:	e021      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d002      	beq.n	800b1fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b1f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b1f8:	e019      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b204:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b208:	e011      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b210:	2b00      	cmp	r3, #0
 800b212:	d002      	beq.n	800b21a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b214:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b218:	e009      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f003 0308 	and.w	r3, r3, #8
 800b220:	2b00      	cmp	r3, #0
 800b222:	d002      	beq.n	800b22a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b224:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b228:	e001      	b.n	800b22e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b22a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3720      	adds	r7, #32
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	20000000 	.word	0x20000000
 800b23c:	10624dd3 	.word	0x10624dd3
 800b240:	fdffe008 	.word	0xfdffe008

0800b244 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b24c:	4b1f      	ldr	r3, [pc, #124]	; (800b2cc <SDMMC_GetCmdResp2+0x88>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a1f      	ldr	r2, [pc, #124]	; (800b2d0 <SDMMC_GetCmdResp2+0x8c>)
 800b252:	fba2 2303 	umull	r2, r3, r2, r3
 800b256:	0a5b      	lsrs	r3, r3, #9
 800b258:	f241 3288 	movw	r2, #5000	; 0x1388
 800b25c:	fb02 f303 	mul.w	r3, r2, r3
 800b260:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	1e5a      	subs	r2, r3, #1
 800b266:	60fa      	str	r2, [r7, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d102      	bne.n	800b272 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b26c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b270:	e026      	b.n	800b2c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b276:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0ef      	beq.n	800b262 <SDMMC_GetCmdResp2+0x1e>
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d1ea      	bne.n	800b262 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b290:	f003 0304 	and.w	r3, r3, #4
 800b294:	2b00      	cmp	r3, #0
 800b296:	d004      	beq.n	800b2a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2204      	movs	r2, #4
 800b29c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b29e:	2304      	movs	r3, #4
 800b2a0:	e00e      	b.n	800b2c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2a6:	f003 0301 	and.w	r3, r3, #1
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d004      	beq.n	800b2b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	e003      	b.n	800b2c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	22c5      	movs	r2, #197	; 0xc5
 800b2bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	20000000 	.word	0x20000000
 800b2d0:	10624dd3 	.word	0x10624dd3

0800b2d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b2dc:	4b1a      	ldr	r3, [pc, #104]	; (800b348 <SDMMC_GetCmdResp3+0x74>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a1a      	ldr	r2, [pc, #104]	; (800b34c <SDMMC_GetCmdResp3+0x78>)
 800b2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e6:	0a5b      	lsrs	r3, r3, #9
 800b2e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2ec:	fb02 f303 	mul.w	r3, r2, r3
 800b2f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	1e5a      	subs	r2, r3, #1
 800b2f6:	60fa      	str	r2, [r7, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d102      	bne.n	800b302 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b2fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b300:	e01b      	b.n	800b33a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b306:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d0ef      	beq.n	800b2f2 <SDMMC_GetCmdResp3+0x1e>
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1ea      	bne.n	800b2f2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b320:	f003 0304 	and.w	r3, r3, #4
 800b324:	2b00      	cmp	r3, #0
 800b326:	d004      	beq.n	800b332 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2204      	movs	r2, #4
 800b32c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b32e:	2304      	movs	r3, #4
 800b330:	e003      	b.n	800b33a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	22c5      	movs	r2, #197	; 0xc5
 800b336:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr
 800b346:	bf00      	nop
 800b348:	20000000 	.word	0x20000000
 800b34c:	10624dd3 	.word	0x10624dd3

0800b350 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b088      	sub	sp, #32
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	460b      	mov	r3, r1
 800b35a:	607a      	str	r2, [r7, #4]
 800b35c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b35e:	4b35      	ldr	r3, [pc, #212]	; (800b434 <SDMMC_GetCmdResp6+0xe4>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a35      	ldr	r2, [pc, #212]	; (800b438 <SDMMC_GetCmdResp6+0xe8>)
 800b364:	fba2 2303 	umull	r2, r3, r2, r3
 800b368:	0a5b      	lsrs	r3, r3, #9
 800b36a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b36e:	fb02 f303 	mul.w	r3, r2, r3
 800b372:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	1e5a      	subs	r2, r3, #1
 800b378:	61fa      	str	r2, [r7, #28]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d102      	bne.n	800b384 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b37e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b382:	e052      	b.n	800b42a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b388:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b390:	2b00      	cmp	r3, #0
 800b392:	d0ef      	beq.n	800b374 <SDMMC_GetCmdResp6+0x24>
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1ea      	bne.n	800b374 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a2:	f003 0304 	and.w	r3, r3, #4
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d004      	beq.n	800b3b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2204      	movs	r2, #4
 800b3ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3b0:	2304      	movs	r3, #4
 800b3b2:	e03a      	b.n	800b42a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b8:	f003 0301 	and.w	r3, r3, #1
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d004      	beq.n	800b3ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e02f      	b.n	800b42a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f7ff fbca 	bl	800ab64 <SDMMC_GetCommandResponse>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	7afb      	ldrb	r3, [r7, #11]
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d001      	beq.n	800b3de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e025      	b.n	800b42a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	22c5      	movs	r2, #197	; 0xc5
 800b3e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b3e4:	2100      	movs	r1, #0
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f7ff fbc9 	bl	800ab7e <SDMMC_GetResponse>
 800b3ec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d106      	bne.n	800b406 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	0c1b      	lsrs	r3, r3, #16
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b402:	2300      	movs	r3, #0
 800b404:	e011      	b.n	800b42a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d002      	beq.n	800b416 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b414:	e009      	b.n	800b42a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d002      	beq.n	800b426 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b424:	e001      	b.n	800b42a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b426:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3720      	adds	r7, #32
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	20000000 	.word	0x20000000
 800b438:	10624dd3 	.word	0x10624dd3

0800b43c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b444:	4b22      	ldr	r3, [pc, #136]	; (800b4d0 <SDMMC_GetCmdResp7+0x94>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a22      	ldr	r2, [pc, #136]	; (800b4d4 <SDMMC_GetCmdResp7+0x98>)
 800b44a:	fba2 2303 	umull	r2, r3, r2, r3
 800b44e:	0a5b      	lsrs	r3, r3, #9
 800b450:	f241 3288 	movw	r2, #5000	; 0x1388
 800b454:	fb02 f303 	mul.w	r3, r2, r3
 800b458:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	1e5a      	subs	r2, r3, #1
 800b45e:	60fa      	str	r2, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d102      	bne.n	800b46a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b464:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b468:	e02c      	b.n	800b4c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b476:	2b00      	cmp	r3, #0
 800b478:	d0ef      	beq.n	800b45a <SDMMC_GetCmdResp7+0x1e>
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1ea      	bne.n	800b45a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b488:	f003 0304 	and.w	r3, r3, #4
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d004      	beq.n	800b49a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2204      	movs	r2, #4
 800b494:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b496:	2304      	movs	r3, #4
 800b498:	e014      	b.n	800b4c4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b49e:	f003 0301 	and.w	r3, r3, #1
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d004      	beq.n	800b4b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e009      	b.n	800b4c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d002      	beq.n	800b4c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2240      	movs	r2, #64	; 0x40
 800b4c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b4c2:	2300      	movs	r3, #0
  
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3714      	adds	r7, #20
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	20000000 	.word	0x20000000
 800b4d4:	10624dd3 	.word	0x10624dd3

0800b4d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b4e0:	4b11      	ldr	r3, [pc, #68]	; (800b528 <SDMMC_GetCmdError+0x50>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a11      	ldr	r2, [pc, #68]	; (800b52c <SDMMC_GetCmdError+0x54>)
 800b4e6:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ea:	0a5b      	lsrs	r3, r3, #9
 800b4ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f0:	fb02 f303 	mul.w	r3, r2, r3
 800b4f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	1e5a      	subs	r2, r3, #1
 800b4fa:	60fa      	str	r2, [r7, #12]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d102      	bne.n	800b506 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b500:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b504:	e009      	b.n	800b51a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b50a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d0f1      	beq.n	800b4f6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	22c5      	movs	r2, #197	; 0xc5
 800b516:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3714      	adds	r7, #20
 800b51e:	46bd      	mov	sp, r7
 800b520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	20000000 	.word	0x20000000
 800b52c:	10624dd3 	.word	0x10624dd3

0800b530 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b530:	b084      	sub	sp, #16
 800b532:	b580      	push	{r7, lr}
 800b534:	b084      	sub	sp, #16
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	f107 001c 	add.w	r0, r7, #28
 800b53e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	2b01      	cmp	r3, #1
 800b546:	d120      	bne.n	800b58a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68da      	ldr	r2, [r3, #12]
 800b558:	4b20      	ldr	r3, [pc, #128]	; (800b5dc <USB_CoreInit+0xac>)
 800b55a:	4013      	ands	r3, r2
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b56c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d105      	bne.n	800b57e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	68db      	ldr	r3, [r3, #12]
 800b576:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fa96 	bl	800bab0 <USB_CoreReset>
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]
 800b588:	e010      	b.n	800b5ac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 fa8a 	bl	800bab0 <USB_CoreReset>
 800b59c:	4603      	mov	r3, r0
 800b59e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d10b      	bne.n	800b5ca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f043 0206 	orr.w	r2, r3, #6
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	f043 0220 	orr.w	r2, r3, #32
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5d6:	b004      	add	sp, #16
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	ffbdffbf 	.word	0xffbdffbf

0800b5e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	f023 0201 	bic.w	r2, r3, #1
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	370c      	adds	r7, #12
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr

0800b602 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b602:	b580      	push	{r7, lr}
 800b604:	b084      	sub	sp, #16
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
 800b60a:	460b      	mov	r3, r1
 800b60c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b60e:	2300      	movs	r3, #0
 800b610:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b61e:	78fb      	ldrb	r3, [r7, #3]
 800b620:	2b01      	cmp	r3, #1
 800b622:	d115      	bne.n	800b650 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b630:	2001      	movs	r0, #1
 800b632:	f7f8 fc19 	bl	8003e68 <HAL_Delay>
      ms++;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	3301      	adds	r3, #1
 800b63a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 fa29 	bl	800ba94 <USB_GetMode>
 800b642:	4603      	mov	r3, r0
 800b644:	2b01      	cmp	r3, #1
 800b646:	d01e      	beq.n	800b686 <USB_SetCurrentMode+0x84>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2b31      	cmp	r3, #49	; 0x31
 800b64c:	d9f0      	bls.n	800b630 <USB_SetCurrentMode+0x2e>
 800b64e:	e01a      	b.n	800b686 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b650:	78fb      	ldrb	r3, [r7, #3]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d115      	bne.n	800b682 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b662:	2001      	movs	r0, #1
 800b664:	f7f8 fc00 	bl	8003e68 <HAL_Delay>
      ms++;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	3301      	adds	r3, #1
 800b66c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fa10 	bl	800ba94 <USB_GetMode>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d005      	beq.n	800b686 <USB_SetCurrentMode+0x84>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2b31      	cmp	r3, #49	; 0x31
 800b67e:	d9f0      	bls.n	800b662 <USB_SetCurrentMode+0x60>
 800b680:	e001      	b.n	800b686 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	e005      	b.n	800b692 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2b32      	cmp	r3, #50	; 0x32
 800b68a:	d101      	bne.n	800b690 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b68c:	2301      	movs	r3, #1
 800b68e:	e000      	b.n	800b692 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b69c:	b084      	sub	sp, #16
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b086      	sub	sp, #24
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b6aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	613b      	str	r3, [r7, #16]
 800b6ba:	e009      	b.n	800b6d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b6bc:	687a      	ldr	r2, [r7, #4]
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	3340      	adds	r3, #64	; 0x40
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	4413      	add	r3, r2
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	613b      	str	r3, [r7, #16]
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	2b0e      	cmp	r3, #14
 800b6d4:	d9f2      	bls.n	800b6bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b6d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d11c      	bne.n	800b716 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6e2:	685b      	ldr	r3, [r3, #4]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6ea:	f043 0302 	orr.w	r3, r3, #2
 800b6ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	601a      	str	r2, [r3, #0]
 800b714:	e005      	b.n	800b722 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b728:	461a      	mov	r2, r3
 800b72a:	2300      	movs	r3, #0
 800b72c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b734:	4619      	mov	r1, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b73c:	461a      	mov	r2, r3
 800b73e:	680b      	ldr	r3, [r1, #0]
 800b740:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b744:	2b01      	cmp	r3, #1
 800b746:	d10c      	bne.n	800b762 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d104      	bne.n	800b758 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b74e:	2100      	movs	r1, #0
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f965 	bl	800ba20 <USB_SetDevSpeed>
 800b756:	e008      	b.n	800b76a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b758:	2101      	movs	r1, #1
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f960 	bl	800ba20 <USB_SetDevSpeed>
 800b760:	e003      	b.n	800b76a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b762:	2103      	movs	r1, #3
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 f95b 	bl	800ba20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b76a:	2110      	movs	r1, #16
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f8f3 	bl	800b958 <USB_FlushTxFifo>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d001      	beq.n	800b77c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f91f 	bl	800b9c0 <USB_FlushRxFifo>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d001      	beq.n	800b78c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b792:	461a      	mov	r2, r3
 800b794:	2300      	movs	r3, #0
 800b796:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b79e:	461a      	mov	r2, r3
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	613b      	str	r3, [r7, #16]
 800b7b4:	e043      	b.n	800b83e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	015a      	lsls	r2, r3, #5
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	4413      	add	r3, r2
 800b7be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7cc:	d118      	bne.n	800b800 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10a      	bne.n	800b7ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	e013      	b.n	800b812 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	015a      	lsls	r2, r3, #5
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b7fc:	6013      	str	r3, [r2, #0]
 800b7fe:	e008      	b.n	800b812 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	015a      	lsls	r2, r3, #5
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	4413      	add	r3, r2
 800b808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b80c:	461a      	mov	r2, r3
 800b80e:	2300      	movs	r3, #0
 800b810:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	015a      	lsls	r2, r3, #5
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	4413      	add	r3, r2
 800b81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b81e:	461a      	mov	r2, r3
 800b820:	2300      	movs	r3, #0
 800b822:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	015a      	lsls	r2, r3, #5
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	4413      	add	r3, r2
 800b82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b830:	461a      	mov	r2, r3
 800b832:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b836:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	3301      	adds	r3, #1
 800b83c:	613b      	str	r3, [r7, #16]
 800b83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b840:	693a      	ldr	r2, [r7, #16]
 800b842:	429a      	cmp	r2, r3
 800b844:	d3b7      	bcc.n	800b7b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b846:	2300      	movs	r3, #0
 800b848:	613b      	str	r3, [r7, #16]
 800b84a:	e043      	b.n	800b8d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	015a      	lsls	r2, r3, #5
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	4413      	add	r3, r2
 800b854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b85e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b862:	d118      	bne.n	800b896 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10a      	bne.n	800b880 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	015a      	lsls	r2, r3, #5
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	4413      	add	r3, r2
 800b872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b876:	461a      	mov	r2, r3
 800b878:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b87c:	6013      	str	r3, [r2, #0]
 800b87e:	e013      	b.n	800b8a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	015a      	lsls	r2, r3, #5
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4413      	add	r3, r2
 800b888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b88c:	461a      	mov	r2, r3
 800b88e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b892:	6013      	str	r3, [r2, #0]
 800b894:	e008      	b.n	800b8a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	015a      	lsls	r2, r3, #5
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	4413      	add	r3, r2
 800b89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8a2:	461a      	mov	r2, r3
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	015a      	lsls	r2, r3, #5
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	015a      	lsls	r2, r3, #5
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b8cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	613b      	str	r3, [r7, #16]
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d3b7      	bcc.n	800b84c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b8fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b900:	2b00      	cmp	r3, #0
 800b902:	d105      	bne.n	800b910 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	f043 0210 	orr.w	r2, r3, #16
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	699a      	ldr	r2, [r3, #24]
 800b914:	4b0e      	ldr	r3, [pc, #56]	; (800b950 <USB_DevInit+0x2b4>)
 800b916:	4313      	orrs	r3, r2
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d005      	beq.n	800b92e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	f043 0208 	orr.w	r2, r3, #8
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b92e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b930:	2b01      	cmp	r3, #1
 800b932:	d105      	bne.n	800b940 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	699a      	ldr	r2, [r3, #24]
 800b938:	4b06      	ldr	r3, [pc, #24]	; (800b954 <USB_DevInit+0x2b8>)
 800b93a:	4313      	orrs	r3, r2
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b940:	7dfb      	ldrb	r3, [r7, #23]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3718      	adds	r7, #24
 800b946:	46bd      	mov	sp, r7
 800b948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b94c:	b004      	add	sp, #16
 800b94e:	4770      	bx	lr
 800b950:	803c3800 	.word	0x803c3800
 800b954:	40000004 	.word	0x40000004

0800b958 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b962:	2300      	movs	r3, #0
 800b964:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	3301      	adds	r3, #1
 800b96a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	4a13      	ldr	r2, [pc, #76]	; (800b9bc <USB_FlushTxFifo+0x64>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d901      	bls.n	800b978 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b974:	2303      	movs	r3, #3
 800b976:	e01b      	b.n	800b9b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	691b      	ldr	r3, [r3, #16]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	daf2      	bge.n	800b966 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b980:	2300      	movs	r3, #0
 800b982:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	019b      	lsls	r3, r3, #6
 800b988:	f043 0220 	orr.w	r2, r3, #32
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	3301      	adds	r3, #1
 800b994:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	4a08      	ldr	r2, [pc, #32]	; (800b9bc <USB_FlushTxFifo+0x64>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d901      	bls.n	800b9a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	e006      	b.n	800b9b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	f003 0320 	and.w	r3, r3, #32
 800b9aa:	2b20      	cmp	r3, #32
 800b9ac:	d0f0      	beq.n	800b990 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3714      	adds	r7, #20
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr
 800b9bc:	00030d40 	.word	0x00030d40

0800b9c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	4a11      	ldr	r2, [pc, #68]	; (800ba1c <USB_FlushRxFifo+0x5c>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d901      	bls.n	800b9de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	e018      	b.n	800ba10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	daf2      	bge.n	800b9cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2210      	movs	r2, #16
 800b9ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	4a08      	ldr	r2, [pc, #32]	; (800ba1c <USB_FlushRxFifo+0x5c>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d901      	bls.n	800ba02 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b9fe:	2303      	movs	r3, #3
 800ba00:	e006      	b.n	800ba10 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	691b      	ldr	r3, [r3, #16]
 800ba06:	f003 0310 	and.w	r3, r3, #16
 800ba0a:	2b10      	cmp	r3, #16
 800ba0c:	d0f0      	beq.n	800b9f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3714      	adds	r7, #20
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr
 800ba1c:	00030d40 	.word	0x00030d40

0800ba20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	78fb      	ldrb	r3, [r7, #3]
 800ba3a:	68f9      	ldr	r1, [r7, #12]
 800ba3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba40:	4313      	orrs	r3, r2
 800ba42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b085      	sub	sp, #20
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68fa      	ldr	r2, [r7, #12]
 800ba68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba6c:	f023 0303 	bic.w	r3, r3, #3
 800ba70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	68fa      	ldr	r2, [r7, #12]
 800ba7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba80:	f043 0302 	orr.w	r3, r3, #2
 800ba84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3714      	adds	r7, #20
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	695b      	ldr	r3, [r3, #20]
 800baa0:	f003 0301 	and.w	r3, r3, #1
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b085      	sub	sp, #20
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bab8:	2300      	movs	r3, #0
 800baba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	3301      	adds	r3, #1
 800bac0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	4a13      	ldr	r2, [pc, #76]	; (800bb14 <USB_CoreReset+0x64>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d901      	bls.n	800bace <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	e01b      	b.n	800bb06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	daf2      	bge.n	800babc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bad6:	2300      	movs	r3, #0
 800bad8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	f043 0201 	orr.w	r2, r3, #1
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	3301      	adds	r3, #1
 800baea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	4a09      	ldr	r2, [pc, #36]	; (800bb14 <USB_CoreReset+0x64>)
 800baf0:	4293      	cmp	r3, r2
 800baf2:	d901      	bls.n	800baf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800baf4:	2303      	movs	r3, #3
 800baf6:	e006      	b.n	800bb06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	691b      	ldr	r3, [r3, #16]
 800bafc:	f003 0301 	and.w	r3, r3, #1
 800bb00:	2b01      	cmp	r3, #1
 800bb02:	d0f0      	beq.n	800bae6 <USB_CoreReset+0x36>

  return HAL_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	00030d40 	.word	0x00030d40

0800bb18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bb1c:	4904      	ldr	r1, [pc, #16]	; (800bb30 <MX_FATFS_Init+0x18>)
 800bb1e:	4805      	ldr	r0, [pc, #20]	; (800bb34 <MX_FATFS_Init+0x1c>)
 800bb20:	f003 f834 	bl	800eb8c <FATFS_LinkDriver>
 800bb24:	4603      	mov	r3, r0
 800bb26:	461a      	mov	r2, r3
 800bb28:	4b03      	ldr	r3, [pc, #12]	; (800bb38 <MX_FATFS_Init+0x20>)
 800bb2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bb2c:	bf00      	nop
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	2000704c 	.word	0x2000704c
 800bb34:	0800ecc8 	.word	0x0800ecc8
 800bb38:	20007048 	.word	0x20007048

0800bb3c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bb40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bb52:	2300      	movs	r3, #0
 800bb54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bb56:	f000 f896 	bl	800bc86 <BSP_SD_IsDetected>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d001      	beq.n	800bb64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bb60:	2302      	movs	r3, #2
 800bb62:	e012      	b.n	800bb8a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bb64:	480b      	ldr	r0, [pc, #44]	; (800bb94 <BSP_SD_Init+0x48>)
 800bb66:	f7fc fe82 	bl	800886e <HAL_SD_Init>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bb6e:	79fb      	ldrb	r3, [r7, #7]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d109      	bne.n	800bb88 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bb74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bb78:	4806      	ldr	r0, [pc, #24]	; (800bb94 <BSP_SD_Init+0x48>)
 800bb7a:	f7fd fc49 	bl	8009410 <HAL_SD_ConfigWideBusOperation>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d001      	beq.n	800bb88 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bb84:	2301      	movs	r3, #1
 800bb86:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bb88:	79fb      	ldrb	r3, [r7, #7]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}
 800bb92:	bf00      	nop
 800bb94:	20006354 	.word	0x20006354

0800bb98 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	68f9      	ldr	r1, [r7, #12]
 800bbae:	4806      	ldr	r0, [pc, #24]	; (800bbc8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800bbb0:	f7fc ff16 	bl	80089e0 <HAL_SD_ReadBlocks_DMA>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}
 800bbc8:	20006354 	.word	0x20006354

0800bbcc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b086      	sub	sp, #24
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	68f9      	ldr	r1, [r7, #12]
 800bbe2:	4806      	ldr	r0, [pc, #24]	; (800bbfc <BSP_SD_WriteBlocks_DMA+0x30>)
 800bbe4:	f7fc ffde 	bl	8008ba4 <HAL_SD_WriteBlocks_DMA>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d001      	beq.n	800bbf2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bbf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3718      	adds	r7, #24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	20006354 	.word	0x20006354

0800bc00 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bc04:	4805      	ldr	r0, [pc, #20]	; (800bc1c <BSP_SD_GetCardState+0x1c>)
 800bc06:	f7fd fc9d 	bl	8009544 <HAL_SD_GetCardState>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	2b04      	cmp	r3, #4
 800bc0e:	bf14      	ite	ne
 800bc10:	2301      	movne	r3, #1
 800bc12:	2300      	moveq	r3, #0
 800bc14:	b2db      	uxtb	r3, r3
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	bd80      	pop	{r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20006354 	.word	0x20006354

0800bc20 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bc28:	6879      	ldr	r1, [r7, #4]
 800bc2a:	4803      	ldr	r0, [pc, #12]	; (800bc38 <BSP_SD_GetCardInfo+0x18>)
 800bc2c:	f7fd fbc4 	bl	80093b8 <HAL_SD_GetCardInfo>
}
 800bc30:	bf00      	nop
 800bc32:	3708      	adds	r7, #8
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}
 800bc38:	20006354 	.word	0x20006354

0800bc3c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b082      	sub	sp, #8
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800bc44:	f000 f818 	bl	800bc78 <BSP_SD_AbortCallback>
}
 800bc48:	bf00      	nop
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bc58:	f000 f9a8 	bl	800bfac <BSP_SD_WriteCpltCallback>
}
 800bc5c:	bf00      	nop
 800bc5e:	3708      	adds	r7, #8
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b082      	sub	sp, #8
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800bc6c:	f000 f9aa 	bl	800bfc4 <BSP_SD_ReadCpltCallback>
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0

}
 800bc7c:	bf00      	nop
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b082      	sub	sp, #8
 800bc8a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800bc90:	f000 f80c 	bl	800bcac <BSP_PlatformIsDetected>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d101      	bne.n	800bc9e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bc9e:	79fb      	ldrb	r3, [r7, #7]
 800bca0:	b2db      	uxtb	r3, r3
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
	...

0800bcac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800bcb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800bcba:	4806      	ldr	r0, [pc, #24]	; (800bcd4 <BSP_PlatformIsDetected+0x28>)
 800bcbc:	f7fa f828 	bl	8005d10 <HAL_GPIO_ReadPin>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800bcca:	79fb      	ldrb	r3, [r7, #7]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	40020400 	.word	0x40020400

0800bcd8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800bce0:	f7f8 f8b6 	bl	8003e50 <HAL_GetTick>
 800bce4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800bce6:	e006      	b.n	800bcf6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bce8:	f7ff ff8a 	bl	800bc00 <BSP_SD_GetCardState>
 800bcec:	4603      	mov	r3, r0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d101      	bne.n	800bcf6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	e009      	b.n	800bd0a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800bcf6:	f7f8 f8ab 	bl	8003e50 <HAL_GetTick>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	687a      	ldr	r2, [r7, #4]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d8f0      	bhi.n	800bce8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bd06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3710      	adds	r7, #16
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
	...

0800bd14 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bd1e:	4b0b      	ldr	r3, [pc, #44]	; (800bd4c <SD_CheckStatus+0x38>)
 800bd20:	2201      	movs	r2, #1
 800bd22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bd24:	f7ff ff6c 	bl	800bc00 <BSP_SD_GetCardState>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d107      	bne.n	800bd3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bd2e:	4b07      	ldr	r3, [pc, #28]	; (800bd4c <SD_CheckStatus+0x38>)
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	f023 0301 	bic.w	r3, r3, #1
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	4b04      	ldr	r3, [pc, #16]	; (800bd4c <SD_CheckStatus+0x38>)
 800bd3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bd3e:	4b03      	ldr	r3, [pc, #12]	; (800bd4c <SD_CheckStatus+0x38>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	b2db      	uxtb	r3, r3
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3708      	adds	r7, #8
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	2000003d 	.word	0x2000003d

0800bd50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	4603      	mov	r3, r0
 800bd58:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bd5a:	f7ff fef7 	bl	800bb4c <BSP_SD_Init>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d107      	bne.n	800bd74 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bd64:	79fb      	ldrb	r3, [r7, #7]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7ff ffd4 	bl	800bd14 <SD_CheckStatus>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	461a      	mov	r2, r3
 800bd70:	4b04      	ldr	r3, [pc, #16]	; (800bd84 <SD_initialize+0x34>)
 800bd72:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bd74:	4b03      	ldr	r3, [pc, #12]	; (800bd84 <SD_initialize+0x34>)
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	b2db      	uxtb	r3, r3
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3708      	adds	r7, #8
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	2000003d 	.word	0x2000003d

0800bd88 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	4603      	mov	r3, r0
 800bd90:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bd92:	79fb      	ldrb	r3, [r7, #7]
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7ff ffbd 	bl	800bd14 <SD_CheckStatus>
 800bd9a:	4603      	mov	r3, r0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607a      	str	r2, [r7, #4]
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bdb8:	f247 5030 	movw	r0, #30000	; 0x7530
 800bdbc:	f7ff ff8c 	bl	800bcd8 <SD_CheckStatusWithTimeout>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	da01      	bge.n	800bdca <SD_read+0x26>
  {
    return res;
 800bdc6:	7dfb      	ldrb	r3, [r7, #23]
 800bdc8:	e03b      	b.n	800be42 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	6879      	ldr	r1, [r7, #4]
 800bdce:	68b8      	ldr	r0, [r7, #8]
 800bdd0:	f7ff fee2 	bl	800bb98 <BSP_SD_ReadBlocks_DMA>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d132      	bne.n	800be40 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bdda:	4b1c      	ldr	r3, [pc, #112]	; (800be4c <SD_read+0xa8>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bde0:	f7f8 f836 	bl	8003e50 <HAL_GetTick>
 800bde4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bde6:	bf00      	nop
 800bde8:	4b18      	ldr	r3, [pc, #96]	; (800be4c <SD_read+0xa8>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d108      	bne.n	800be02 <SD_read+0x5e>
 800bdf0:	f7f8 f82e 	bl	8003e50 <HAL_GetTick>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	f247 522f 	movw	r2, #29999	; 0x752f
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d9f2      	bls.n	800bde8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800be02:	4b12      	ldr	r3, [pc, #72]	; (800be4c <SD_read+0xa8>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d102      	bne.n	800be10 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	75fb      	strb	r3, [r7, #23]
 800be0e:	e017      	b.n	800be40 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800be10:	4b0e      	ldr	r3, [pc, #56]	; (800be4c <SD_read+0xa8>)
 800be12:	2200      	movs	r2, #0
 800be14:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800be16:	f7f8 f81b 	bl	8003e50 <HAL_GetTick>
 800be1a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800be1c:	e007      	b.n	800be2e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be1e:	f7ff feef 	bl	800bc00 <BSP_SD_GetCardState>
 800be22:	4603      	mov	r3, r0
 800be24:	2b00      	cmp	r3, #0
 800be26:	d102      	bne.n	800be2e <SD_read+0x8a>
          {
            res = RES_OK;
 800be28:	2300      	movs	r3, #0
 800be2a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800be2c:	e008      	b.n	800be40 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800be2e:	f7f8 f80f 	bl	8003e50 <HAL_GetTick>
 800be32:	4602      	mov	r2, r0
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	f247 522f 	movw	r2, #29999	; 0x752f
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d9ee      	bls.n	800be1e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800be40:	7dfb      	ldrb	r3, [r7, #23]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3718      	adds	r7, #24
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	200074b4 	.word	0x200074b4

0800be50 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
 800be56:	60b9      	str	r1, [r7, #8]
 800be58:	607a      	str	r2, [r7, #4]
 800be5a:	603b      	str	r3, [r7, #0]
 800be5c:	4603      	mov	r3, r0
 800be5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800be64:	4b24      	ldr	r3, [pc, #144]	; (800bef8 <SD_write+0xa8>)
 800be66:	2200      	movs	r2, #0
 800be68:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800be6a:	f247 5030 	movw	r0, #30000	; 0x7530
 800be6e:	f7ff ff33 	bl	800bcd8 <SD_CheckStatusWithTimeout>
 800be72:	4603      	mov	r3, r0
 800be74:	2b00      	cmp	r3, #0
 800be76:	da01      	bge.n	800be7c <SD_write+0x2c>
  {
    return res;
 800be78:	7dfb      	ldrb	r3, [r7, #23]
 800be7a:	e038      	b.n	800beee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	6879      	ldr	r1, [r7, #4]
 800be80:	68b8      	ldr	r0, [r7, #8]
 800be82:	f7ff fea3 	bl	800bbcc <BSP_SD_WriteBlocks_DMA>
 800be86:	4603      	mov	r3, r0
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d12f      	bne.n	800beec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800be8c:	f7f7 ffe0 	bl	8003e50 <HAL_GetTick>
 800be90:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800be92:	bf00      	nop
 800be94:	4b18      	ldr	r3, [pc, #96]	; (800bef8 <SD_write+0xa8>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d108      	bne.n	800beae <SD_write+0x5e>
 800be9c:	f7f7 ffd8 	bl	8003e50 <HAL_GetTick>
 800bea0:	4602      	mov	r2, r0
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	1ad3      	subs	r3, r2, r3
 800bea6:	f247 522f 	movw	r2, #29999	; 0x752f
 800beaa:	4293      	cmp	r3, r2
 800beac:	d9f2      	bls.n	800be94 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800beae:	4b12      	ldr	r3, [pc, #72]	; (800bef8 <SD_write+0xa8>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d102      	bne.n	800bebc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800beb6:	2301      	movs	r3, #1
 800beb8:	75fb      	strb	r3, [r7, #23]
 800beba:	e017      	b.n	800beec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800bebc:	4b0e      	ldr	r3, [pc, #56]	; (800bef8 <SD_write+0xa8>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bec2:	f7f7 ffc5 	bl	8003e50 <HAL_GetTick>
 800bec6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bec8:	e007      	b.n	800beda <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800beca:	f7ff fe99 	bl	800bc00 <BSP_SD_GetCardState>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d102      	bne.n	800beda <SD_write+0x8a>
          {
            res = RES_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	75fb      	strb	r3, [r7, #23]
            break;
 800bed8:	e008      	b.n	800beec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800beda:	f7f7 ffb9 	bl	8003e50 <HAL_GetTick>
 800bede:	4602      	mov	r2, r0
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	f247 522f 	movw	r2, #29999	; 0x752f
 800bee8:	4293      	cmp	r3, r2
 800beea:	d9ee      	bls.n	800beca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800beec:	7dfb      	ldrb	r3, [r7, #23]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3718      	adds	r7, #24
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	200074b0 	.word	0x200074b0

0800befc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b08c      	sub	sp, #48	; 0x30
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	4603      	mov	r3, r0
 800bf04:	603a      	str	r2, [r7, #0]
 800bf06:	71fb      	strb	r3, [r7, #7]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bf12:	4b25      	ldr	r3, [pc, #148]	; (800bfa8 <SD_ioctl+0xac>)
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d001      	beq.n	800bf24 <SD_ioctl+0x28>
 800bf20:	2303      	movs	r3, #3
 800bf22:	e03c      	b.n	800bf9e <SD_ioctl+0xa2>

  switch (cmd)
 800bf24:	79bb      	ldrb	r3, [r7, #6]
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d834      	bhi.n	800bf94 <SD_ioctl+0x98>
 800bf2a:	a201      	add	r2, pc, #4	; (adr r2, 800bf30 <SD_ioctl+0x34>)
 800bf2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf30:	0800bf41 	.word	0x0800bf41
 800bf34:	0800bf49 	.word	0x0800bf49
 800bf38:	0800bf61 	.word	0x0800bf61
 800bf3c:	0800bf7b 	.word	0x0800bf7b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bf46:	e028      	b.n	800bf9a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bf48:	f107 030c 	add.w	r3, r7, #12
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7ff fe67 	bl	800bc20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bf52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bf5e:	e01c      	b.n	800bf9a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bf60:	f107 030c 	add.w	r3, r7, #12
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7ff fe5b 	bl	800bc20 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bf72:	2300      	movs	r3, #0
 800bf74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bf78:	e00f      	b.n	800bf9a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bf7a:	f107 030c 	add.w	r3, r7, #12
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7ff fe4e 	bl	800bc20 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bf84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf86:	0a5a      	lsrs	r2, r3, #9
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bf92:	e002      	b.n	800bf9a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bf94:	2304      	movs	r3, #4
 800bf96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bf9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3730      	adds	r7, #48	; 0x30
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	2000003d 	.word	0x2000003d

0800bfac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bfac:	b480      	push	{r7}
 800bfae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800bfb0:	4b03      	ldr	r3, [pc, #12]	; (800bfc0 <BSP_SD_WriteCpltCallback+0x14>)
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	601a      	str	r2, [r3, #0]
}
 800bfb6:	bf00      	nop
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr
 800bfc0:	200074b0 	.word	0x200074b0

0800bfc4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800bfc8:	4b03      	ldr	r3, [pc, #12]	; (800bfd8 <BSP_SD_ReadCpltCallback+0x14>)
 800bfca:	2201      	movs	r2, #1
 800bfcc:	601a      	str	r2, [r3, #0]
}
 800bfce:	bf00      	nop
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	200074b4 	.word	0x200074b4

0800bfdc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bfe6:	79fb      	ldrb	r3, [r7, #7]
 800bfe8:	4a08      	ldr	r2, [pc, #32]	; (800c00c <disk_status+0x30>)
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	79fa      	ldrb	r2, [r7, #7]
 800bff4:	4905      	ldr	r1, [pc, #20]	; (800c00c <disk_status+0x30>)
 800bff6:	440a      	add	r2, r1
 800bff8:	7a12      	ldrb	r2, [r2, #8]
 800bffa:	4610      	mov	r0, r2
 800bffc:	4798      	blx	r3
 800bffe:	4603      	mov	r3, r0
 800c000:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c002:	7bfb      	ldrb	r3, [r7, #15]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	200074e0 	.word	0x200074e0

0800c010 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c01e:	79fb      	ldrb	r3, [r7, #7]
 800c020:	4a0d      	ldr	r2, [pc, #52]	; (800c058 <disk_initialize+0x48>)
 800c022:	5cd3      	ldrb	r3, [r2, r3]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d111      	bne.n	800c04c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c028:	79fb      	ldrb	r3, [r7, #7]
 800c02a:	4a0b      	ldr	r2, [pc, #44]	; (800c058 <disk_initialize+0x48>)
 800c02c:	2101      	movs	r1, #1
 800c02e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c030:	79fb      	ldrb	r3, [r7, #7]
 800c032:	4a09      	ldr	r2, [pc, #36]	; (800c058 <disk_initialize+0x48>)
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4413      	add	r3, r2
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	79fa      	ldrb	r2, [r7, #7]
 800c03e:	4906      	ldr	r1, [pc, #24]	; (800c058 <disk_initialize+0x48>)
 800c040:	440a      	add	r2, r1
 800c042:	7a12      	ldrb	r2, [r2, #8]
 800c044:	4610      	mov	r0, r2
 800c046:	4798      	blx	r3
 800c048:	4603      	mov	r3, r0
 800c04a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	200074e0 	.word	0x200074e0

0800c05c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c05c:	b590      	push	{r4, r7, lr}
 800c05e:	b087      	sub	sp, #28
 800c060:	af00      	add	r7, sp, #0
 800c062:	60b9      	str	r1, [r7, #8]
 800c064:	607a      	str	r2, [r7, #4]
 800c066:	603b      	str	r3, [r7, #0]
 800c068:	4603      	mov	r3, r0
 800c06a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	4a0a      	ldr	r2, [pc, #40]	; (800c098 <disk_read+0x3c>)
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	4413      	add	r3, r2
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	689c      	ldr	r4, [r3, #8]
 800c078:	7bfb      	ldrb	r3, [r7, #15]
 800c07a:	4a07      	ldr	r2, [pc, #28]	; (800c098 <disk_read+0x3c>)
 800c07c:	4413      	add	r3, r2
 800c07e:	7a18      	ldrb	r0, [r3, #8]
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	68b9      	ldr	r1, [r7, #8]
 800c086:	47a0      	blx	r4
 800c088:	4603      	mov	r3, r0
 800c08a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c08e:	4618      	mov	r0, r3
 800c090:	371c      	adds	r7, #28
 800c092:	46bd      	mov	sp, r7
 800c094:	bd90      	pop	{r4, r7, pc}
 800c096:	bf00      	nop
 800c098:	200074e0 	.word	0x200074e0

0800c09c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c09c:	b590      	push	{r4, r7, lr}
 800c09e:	b087      	sub	sp, #28
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60b9      	str	r1, [r7, #8]
 800c0a4:	607a      	str	r2, [r7, #4]
 800c0a6:	603b      	str	r3, [r7, #0]
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c0ac:	7bfb      	ldrb	r3, [r7, #15]
 800c0ae:	4a0a      	ldr	r2, [pc, #40]	; (800c0d8 <disk_write+0x3c>)
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	68dc      	ldr	r4, [r3, #12]
 800c0b8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ba:	4a07      	ldr	r2, [pc, #28]	; (800c0d8 <disk_write+0x3c>)
 800c0bc:	4413      	add	r3, r2
 800c0be:	7a18      	ldrb	r0, [r3, #8]
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	68b9      	ldr	r1, [r7, #8]
 800c0c6:	47a0      	blx	r4
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800c0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	371c      	adds	r7, #28
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd90      	pop	{r4, r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	200074e0 	.word	0x200074e0

0800c0dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	603a      	str	r2, [r7, #0]
 800c0e6:	71fb      	strb	r3, [r7, #7]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c0ec:	79fb      	ldrb	r3, [r7, #7]
 800c0ee:	4a09      	ldr	r2, [pc, #36]	; (800c114 <disk_ioctl+0x38>)
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	4413      	add	r3, r2
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	79fa      	ldrb	r2, [r7, #7]
 800c0fa:	4906      	ldr	r1, [pc, #24]	; (800c114 <disk_ioctl+0x38>)
 800c0fc:	440a      	add	r2, r1
 800c0fe:	7a10      	ldrb	r0, [r2, #8]
 800c100:	79b9      	ldrb	r1, [r7, #6]
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	4798      	blx	r3
 800c106:	4603      	mov	r3, r0
 800c108:	73fb      	strb	r3, [r7, #15]
  return res;
 800c10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	200074e0 	.word	0x200074e0

0800c118 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	3301      	adds	r3, #1
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c128:	89fb      	ldrh	r3, [r7, #14]
 800c12a:	021b      	lsls	r3, r3, #8
 800c12c:	b21a      	sxth	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	b21b      	sxth	r3, r3
 800c134:	4313      	orrs	r3, r2
 800c136:	b21b      	sxth	r3, r3
 800c138:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c13a:	89fb      	ldrh	r3, [r7, #14]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3303      	adds	r3, #3
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	021b      	lsls	r3, r3, #8
 800c15c:	687a      	ldr	r2, [r7, #4]
 800c15e:	3202      	adds	r2, #2
 800c160:	7812      	ldrb	r2, [r2, #0]
 800c162:	4313      	orrs	r3, r2
 800c164:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	021b      	lsls	r3, r3, #8
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	3201      	adds	r2, #1
 800c16e:	7812      	ldrb	r2, [r2, #0]
 800c170:	4313      	orrs	r3, r2
 800c172:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	021b      	lsls	r3, r3, #8
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	7812      	ldrb	r2, [r2, #0]
 800c17c:	4313      	orrs	r3, r2
 800c17e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c180:	68fb      	ldr	r3, [r7, #12]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3714      	adds	r7, #20
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c18e:	b480      	push	{r7}
 800c190:	b083      	sub	sp, #12
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	460b      	mov	r3, r1
 800c198:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	1c5a      	adds	r2, r3, #1
 800c19e:	607a      	str	r2, [r7, #4]
 800c1a0:	887a      	ldrh	r2, [r7, #2]
 800c1a2:	b2d2      	uxtb	r2, r2
 800c1a4:	701a      	strb	r2, [r3, #0]
 800c1a6:	887b      	ldrh	r3, [r7, #2]
 800c1a8:	0a1b      	lsrs	r3, r3, #8
 800c1aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	1c5a      	adds	r2, r3, #1
 800c1b0:	607a      	str	r2, [r7, #4]
 800c1b2:	887a      	ldrh	r2, [r7, #2]
 800c1b4:	b2d2      	uxtb	r2, r2
 800c1b6:	701a      	strb	r2, [r3, #0]
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	1c5a      	adds	r2, r3, #1
 800c1d2:	607a      	str	r2, [r7, #4]
 800c1d4:	683a      	ldr	r2, [r7, #0]
 800c1d6:	b2d2      	uxtb	r2, r2
 800c1d8:	701a      	strb	r2, [r3, #0]
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	0a1b      	lsrs	r3, r3, #8
 800c1de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	1c5a      	adds	r2, r3, #1
 800c1e4:	607a      	str	r2, [r7, #4]
 800c1e6:	683a      	ldr	r2, [r7, #0]
 800c1e8:	b2d2      	uxtb	r2, r2
 800c1ea:	701a      	strb	r2, [r3, #0]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	0a1b      	lsrs	r3, r3, #8
 800c1f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	1c5a      	adds	r2, r3, #1
 800c1f6:	607a      	str	r2, [r7, #4]
 800c1f8:	683a      	ldr	r2, [r7, #0]
 800c1fa:	b2d2      	uxtb	r2, r2
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	0a1b      	lsrs	r3, r3, #8
 800c202:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	1c5a      	adds	r2, r3, #1
 800c208:	607a      	str	r2, [r7, #4]
 800c20a:	683a      	ldr	r2, [r7, #0]
 800c20c:	b2d2      	uxtb	r2, r2
 800c20e:	701a      	strb	r2, [r3, #0]
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c21c:	b480      	push	{r7}
 800c21e:	b087      	sub	sp, #28
 800c220:	af00      	add	r7, sp, #0
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	60b9      	str	r1, [r7, #8]
 800c226:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00d      	beq.n	800c252 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c236:	693a      	ldr	r2, [r7, #16]
 800c238:	1c53      	adds	r3, r2, #1
 800c23a:	613b      	str	r3, [r7, #16]
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	1c59      	adds	r1, r3, #1
 800c240:	6179      	str	r1, [r7, #20]
 800c242:	7812      	ldrb	r2, [r2, #0]
 800c244:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	3b01      	subs	r3, #1
 800c24a:	607b      	str	r3, [r7, #4]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1f1      	bne.n	800c236 <mem_cpy+0x1a>
	}
}
 800c252:	bf00      	nop
 800c254:	371c      	adds	r7, #28
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c25e:	b480      	push	{r7}
 800c260:	b087      	sub	sp, #28
 800c262:	af00      	add	r7, sp, #0
 800c264:	60f8      	str	r0, [r7, #12]
 800c266:	60b9      	str	r1, [r7, #8]
 800c268:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	1c5a      	adds	r2, r3, #1
 800c272:	617a      	str	r2, [r7, #20]
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	b2d2      	uxtb	r2, r2
 800c278:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	3b01      	subs	r3, #1
 800c27e:	607b      	str	r3, [r7, #4]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1f3      	bne.n	800c26e <mem_set+0x10>
}
 800c286:	bf00      	nop
 800c288:	bf00      	nop
 800c28a:	371c      	adds	r7, #28
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr

0800c294 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c294:	b480      	push	{r7}
 800c296:	b089      	sub	sp, #36	; 0x24
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	61fb      	str	r3, [r7, #28]
 800c2a4:	68bb      	ldr	r3, [r7, #8]
 800c2a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	1c5a      	adds	r2, r3, #1
 800c2b0:	61fa      	str	r2, [r7, #28]
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	1c5a      	adds	r2, r3, #1
 800c2ba:	61ba      	str	r2, [r7, #24]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	1acb      	subs	r3, r1, r3
 800c2c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	607b      	str	r3, [r7, #4]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d002      	beq.n	800c2d4 <mem_cmp+0x40>
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d0eb      	beq.n	800c2ac <mem_cmp+0x18>

	return r;
 800c2d4:	697b      	ldr	r3, [r7, #20]
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	3724      	adds	r7, #36	; 0x24
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c2e2:	b480      	push	{r7}
 800c2e4:	b083      	sub	sp, #12
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c2ec:	e002      	b.n	800c2f4 <chk_chr+0x12>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	607b      	str	r3, [r7, #4]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d005      	beq.n	800c308 <chk_chr+0x26>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	461a      	mov	r2, r3
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	4293      	cmp	r3, r2
 800c306:	d1f2      	bne.n	800c2ee <chk_chr+0xc>
	return *str;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	781b      	ldrb	r3, [r3, #0]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	370c      	adds	r7, #12
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c318:	b480      	push	{r7}
 800c31a:	b085      	sub	sp, #20
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c322:	2300      	movs	r3, #0
 800c324:	60bb      	str	r3, [r7, #8]
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	60fb      	str	r3, [r7, #12]
 800c32a:	e029      	b.n	800c380 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c32c:	4a27      	ldr	r2, [pc, #156]	; (800c3cc <chk_lock+0xb4>)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	011b      	lsls	r3, r3, #4
 800c332:	4413      	add	r3, r2
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d01d      	beq.n	800c376 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c33a:	4a24      	ldr	r2, [pc, #144]	; (800c3cc <chk_lock+0xb4>)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	011b      	lsls	r3, r3, #4
 800c340:	4413      	add	r3, r2
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d116      	bne.n	800c37a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c34c:	4a1f      	ldr	r2, [pc, #124]	; (800c3cc <chk_lock+0xb4>)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	011b      	lsls	r3, r3, #4
 800c352:	4413      	add	r3, r2
 800c354:	3304      	adds	r3, #4
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d10c      	bne.n	800c37a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c360:	4a1a      	ldr	r2, [pc, #104]	; (800c3cc <chk_lock+0xb4>)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	011b      	lsls	r3, r3, #4
 800c366:	4413      	add	r3, r2
 800c368:	3308      	adds	r3, #8
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c370:	429a      	cmp	r2, r3
 800c372:	d102      	bne.n	800c37a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c374:	e007      	b.n	800c386 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c376:	2301      	movs	r3, #1
 800c378:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3301      	adds	r3, #1
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d9d2      	bls.n	800c32c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d109      	bne.n	800c3a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d102      	bne.n	800c398 <chk_lock+0x80>
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	2b02      	cmp	r3, #2
 800c396:	d101      	bne.n	800c39c <chk_lock+0x84>
 800c398:	2300      	movs	r3, #0
 800c39a:	e010      	b.n	800c3be <chk_lock+0xa6>
 800c39c:	2312      	movs	r3, #18
 800c39e:	e00e      	b.n	800c3be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d108      	bne.n	800c3b8 <chk_lock+0xa0>
 800c3a6:	4a09      	ldr	r2, [pc, #36]	; (800c3cc <chk_lock+0xb4>)
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	011b      	lsls	r3, r3, #4
 800c3ac:	4413      	add	r3, r2
 800c3ae:	330c      	adds	r3, #12
 800c3b0:	881b      	ldrh	r3, [r3, #0]
 800c3b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3b6:	d101      	bne.n	800c3bc <chk_lock+0xa4>
 800c3b8:	2310      	movs	r3, #16
 800c3ba:	e000      	b.n	800c3be <chk_lock+0xa6>
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	200074c0 	.word	0x200074c0

0800c3d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	607b      	str	r3, [r7, #4]
 800c3da:	e002      	b.n	800c3e2 <enq_lock+0x12>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	607b      	str	r3, [r7, #4]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2b01      	cmp	r3, #1
 800c3e6:	d806      	bhi.n	800c3f6 <enq_lock+0x26>
 800c3e8:	4a09      	ldr	r2, [pc, #36]	; (800c410 <enq_lock+0x40>)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	011b      	lsls	r3, r3, #4
 800c3ee:	4413      	add	r3, r2
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1f2      	bne.n	800c3dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	bf14      	ite	ne
 800c3fc:	2301      	movne	r3, #1
 800c3fe:	2300      	moveq	r3, #0
 800c400:	b2db      	uxtb	r3, r3
}
 800c402:	4618      	mov	r0, r3
 800c404:	370c      	adds	r7, #12
 800c406:	46bd      	mov	sp, r7
 800c408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40c:	4770      	bx	lr
 800c40e:	bf00      	nop
 800c410:	200074c0 	.word	0x200074c0

0800c414 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c414:	b480      	push	{r7}
 800c416:	b085      	sub	sp, #20
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
 800c41c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c41e:	2300      	movs	r3, #0
 800c420:	60fb      	str	r3, [r7, #12]
 800c422:	e01f      	b.n	800c464 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c424:	4a41      	ldr	r2, [pc, #260]	; (800c52c <inc_lock+0x118>)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	011b      	lsls	r3, r3, #4
 800c42a:	4413      	add	r3, r2
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	429a      	cmp	r2, r3
 800c434:	d113      	bne.n	800c45e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c436:	4a3d      	ldr	r2, [pc, #244]	; (800c52c <inc_lock+0x118>)
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	011b      	lsls	r3, r3, #4
 800c43c:	4413      	add	r3, r2
 800c43e:	3304      	adds	r3, #4
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c446:	429a      	cmp	r2, r3
 800c448:	d109      	bne.n	800c45e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c44a:	4a38      	ldr	r2, [pc, #224]	; (800c52c <inc_lock+0x118>)
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	011b      	lsls	r3, r3, #4
 800c450:	4413      	add	r3, r2
 800c452:	3308      	adds	r3, #8
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d006      	beq.n	800c46c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	3301      	adds	r3, #1
 800c462:	60fb      	str	r3, [r7, #12]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2b01      	cmp	r3, #1
 800c468:	d9dc      	bls.n	800c424 <inc_lock+0x10>
 800c46a:	e000      	b.n	800c46e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c46c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2b02      	cmp	r3, #2
 800c472:	d132      	bne.n	800c4da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c474:	2300      	movs	r3, #0
 800c476:	60fb      	str	r3, [r7, #12]
 800c478:	e002      	b.n	800c480 <inc_lock+0x6c>
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	3301      	adds	r3, #1
 800c47e:	60fb      	str	r3, [r7, #12]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d806      	bhi.n	800c494 <inc_lock+0x80>
 800c486:	4a29      	ldr	r2, [pc, #164]	; (800c52c <inc_lock+0x118>)
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	011b      	lsls	r3, r3, #4
 800c48c:	4413      	add	r3, r2
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1f2      	bne.n	800c47a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	2b02      	cmp	r3, #2
 800c498:	d101      	bne.n	800c49e <inc_lock+0x8a>
 800c49a:	2300      	movs	r3, #0
 800c49c:	e040      	b.n	800c520 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	4922      	ldr	r1, [pc, #136]	; (800c52c <inc_lock+0x118>)
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	011b      	lsls	r3, r3, #4
 800c4a8:	440b      	add	r3, r1
 800c4aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	689a      	ldr	r2, [r3, #8]
 800c4b0:	491e      	ldr	r1, [pc, #120]	; (800c52c <inc_lock+0x118>)
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	011b      	lsls	r3, r3, #4
 800c4b6:	440b      	add	r3, r1
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	695a      	ldr	r2, [r3, #20]
 800c4c0:	491a      	ldr	r1, [pc, #104]	; (800c52c <inc_lock+0x118>)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	011b      	lsls	r3, r3, #4
 800c4c6:	440b      	add	r3, r1
 800c4c8:	3308      	adds	r3, #8
 800c4ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c4cc:	4a17      	ldr	r2, [pc, #92]	; (800c52c <inc_lock+0x118>)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	011b      	lsls	r3, r3, #4
 800c4d2:	4413      	add	r3, r2
 800c4d4:	330c      	adds	r3, #12
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d009      	beq.n	800c4f4 <inc_lock+0xe0>
 800c4e0:	4a12      	ldr	r2, [pc, #72]	; (800c52c <inc_lock+0x118>)
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	011b      	lsls	r3, r3, #4
 800c4e6:	4413      	add	r3, r2
 800c4e8:	330c      	adds	r3, #12
 800c4ea:	881b      	ldrh	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d001      	beq.n	800c4f4 <inc_lock+0xe0>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	e015      	b.n	800c520 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d108      	bne.n	800c50c <inc_lock+0xf8>
 800c4fa:	4a0c      	ldr	r2, [pc, #48]	; (800c52c <inc_lock+0x118>)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	011b      	lsls	r3, r3, #4
 800c500:	4413      	add	r3, r2
 800c502:	330c      	adds	r3, #12
 800c504:	881b      	ldrh	r3, [r3, #0]
 800c506:	3301      	adds	r3, #1
 800c508:	b29a      	uxth	r2, r3
 800c50a:	e001      	b.n	800c510 <inc_lock+0xfc>
 800c50c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c510:	4906      	ldr	r1, [pc, #24]	; (800c52c <inc_lock+0x118>)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	011b      	lsls	r3, r3, #4
 800c516:	440b      	add	r3, r1
 800c518:	330c      	adds	r3, #12
 800c51a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	3301      	adds	r3, #1
}
 800c520:	4618      	mov	r0, r3
 800c522:	3714      	adds	r7, #20
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	200074c0 	.word	0x200074c0

0800c530 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3b01      	subs	r3, #1
 800c53c:	607b      	str	r3, [r7, #4]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d825      	bhi.n	800c590 <dec_lock+0x60>
		n = Files[i].ctr;
 800c544:	4a17      	ldr	r2, [pc, #92]	; (800c5a4 <dec_lock+0x74>)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	011b      	lsls	r3, r3, #4
 800c54a:	4413      	add	r3, r2
 800c54c:	330c      	adds	r3, #12
 800c54e:	881b      	ldrh	r3, [r3, #0]
 800c550:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c552:	89fb      	ldrh	r3, [r7, #14]
 800c554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c558:	d101      	bne.n	800c55e <dec_lock+0x2e>
 800c55a:	2300      	movs	r3, #0
 800c55c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c55e:	89fb      	ldrh	r3, [r7, #14]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <dec_lock+0x3a>
 800c564:	89fb      	ldrh	r3, [r7, #14]
 800c566:	3b01      	subs	r3, #1
 800c568:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c56a:	4a0e      	ldr	r2, [pc, #56]	; (800c5a4 <dec_lock+0x74>)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	011b      	lsls	r3, r3, #4
 800c570:	4413      	add	r3, r2
 800c572:	330c      	adds	r3, #12
 800c574:	89fa      	ldrh	r2, [r7, #14]
 800c576:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c578:	89fb      	ldrh	r3, [r7, #14]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d105      	bne.n	800c58a <dec_lock+0x5a>
 800c57e:	4a09      	ldr	r2, [pc, #36]	; (800c5a4 <dec_lock+0x74>)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	011b      	lsls	r3, r3, #4
 800c584:	4413      	add	r3, r2
 800c586:	2200      	movs	r2, #0
 800c588:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c58a:	2300      	movs	r3, #0
 800c58c:	737b      	strb	r3, [r7, #13]
 800c58e:	e001      	b.n	800c594 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c590:	2302      	movs	r3, #2
 800c592:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c594:	7b7b      	ldrb	r3, [r7, #13]
}
 800c596:	4618      	mov	r0, r3
 800c598:	3714      	adds	r7, #20
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	200074c0 	.word	0x200074c0

0800c5a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	e010      	b.n	800c5d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c5b6:	4a0d      	ldr	r2, [pc, #52]	; (800c5ec <clear_lock+0x44>)
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	011b      	lsls	r3, r3, #4
 800c5bc:	4413      	add	r3, r2
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d105      	bne.n	800c5d2 <clear_lock+0x2a>
 800c5c6:	4a09      	ldr	r2, [pc, #36]	; (800c5ec <clear_lock+0x44>)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	011b      	lsls	r3, r3, #4
 800c5cc:	4413      	add	r3, r2
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	3301      	adds	r3, #1
 800c5d6:	60fb      	str	r3, [r7, #12]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d9eb      	bls.n	800c5b6 <clear_lock+0xe>
	}
}
 800c5de:	bf00      	nop
 800c5e0:	bf00      	nop
 800c5e2:	3714      	adds	r7, #20
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ea:	4770      	bx	lr
 800c5ec:	200074c0 	.word	0x200074c0

0800c5f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	78db      	ldrb	r3, [r3, #3]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d034      	beq.n	800c66e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c608:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	7858      	ldrb	r0, [r3, #1]
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c614:	2301      	movs	r3, #1
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	f7ff fd40 	bl	800c09c <disk_write>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d002      	beq.n	800c628 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c622:	2301      	movs	r3, #1
 800c624:	73fb      	strb	r3, [r7, #15]
 800c626:	e022      	b.n	800c66e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	697a      	ldr	r2, [r7, #20]
 800c634:	1ad2      	subs	r2, r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	699b      	ldr	r3, [r3, #24]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d217      	bcs.n	800c66e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	789b      	ldrb	r3, [r3, #2]
 800c642:	613b      	str	r3, [r7, #16]
 800c644:	e010      	b.n	800c668 <sync_window+0x78>
					wsect += fs->fsize;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	4413      	add	r3, r2
 800c64e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	7858      	ldrb	r0, [r3, #1]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c65a:	2301      	movs	r3, #1
 800c65c:	697a      	ldr	r2, [r7, #20]
 800c65e:	f7ff fd1d 	bl	800c09c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	3b01      	subs	r3, #1
 800c666:	613b      	str	r3, [r7, #16]
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	2b01      	cmp	r3, #1
 800c66c:	d8eb      	bhi.n	800c646 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3718      	adds	r7, #24
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c682:	2300      	movs	r3, #0
 800c684:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d01b      	beq.n	800c6c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f7ff ffad 	bl	800c5f0 <sync_window>
 800c696:	4603      	mov	r3, r0
 800c698:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d113      	bne.n	800c6c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	7858      	ldrb	r0, [r3, #1]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	683a      	ldr	r2, [r7, #0]
 800c6ae:	f7ff fcd5 	bl	800c05c <disk_read>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d004      	beq.n	800c6c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	683a      	ldr	r2, [r7, #0]
 800c6c6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
	...

0800c6d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7ff ff87 	bl	800c5f0 <sync_window>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c6e6:	7bfb      	ldrb	r3, [r7, #15]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d158      	bne.n	800c79e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	2b03      	cmp	r3, #3
 800c6f2:	d148      	bne.n	800c786 <sync_fs+0xb2>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	791b      	ldrb	r3, [r3, #4]
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d144      	bne.n	800c786 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	3330      	adds	r3, #48	; 0x30
 800c700:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c704:	2100      	movs	r1, #0
 800c706:	4618      	mov	r0, r3
 800c708:	f7ff fda9 	bl	800c25e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	3330      	adds	r3, #48	; 0x30
 800c710:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c714:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff fd38 	bl	800c18e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	3330      	adds	r3, #48	; 0x30
 800c722:	4921      	ldr	r1, [pc, #132]	; (800c7a8 <sync_fs+0xd4>)
 800c724:	4618      	mov	r0, r3
 800c726:	f7ff fd4d 	bl	800c1c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	3330      	adds	r3, #48	; 0x30
 800c72e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c732:	491e      	ldr	r1, [pc, #120]	; (800c7ac <sync_fs+0xd8>)
 800c734:	4618      	mov	r0, r3
 800c736:	f7ff fd45 	bl	800c1c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	3330      	adds	r3, #48	; 0x30
 800c73e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	691b      	ldr	r3, [r3, #16]
 800c746:	4619      	mov	r1, r3
 800c748:	4610      	mov	r0, r2
 800c74a:	f7ff fd3b 	bl	800c1c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	3330      	adds	r3, #48	; 0x30
 800c752:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	4619      	mov	r1, r3
 800c75c:	4610      	mov	r0, r2
 800c75e:	f7ff fd31 	bl	800c1c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	69db      	ldr	r3, [r3, #28]
 800c766:	1c5a      	adds	r2, r3, #1
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	7858      	ldrb	r0, [r3, #1]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c77a:	2301      	movs	r3, #1
 800c77c:	f7ff fc8e 	bl	800c09c <disk_write>
			fs->fsi_flag = 0;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	785b      	ldrb	r3, [r3, #1]
 800c78a:	2200      	movs	r2, #0
 800c78c:	2100      	movs	r1, #0
 800c78e:	4618      	mov	r0, r3
 800c790:	f7ff fca4 	bl	800c0dc <disk_ioctl>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <sync_fs+0xca>
 800c79a:	2301      	movs	r3, #1
 800c79c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c79e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3710      	adds	r7, #16
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd80      	pop	{r7, pc}
 800c7a8:	41615252 	.word	0x41615252
 800c7ac:	61417272 	.word	0x61417272

0800c7b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	3b02      	subs	r3, #2
 800c7be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	695b      	ldr	r3, [r3, #20]
 800c7c4:	3b02      	subs	r3, #2
 800c7c6:	683a      	ldr	r2, [r7, #0]
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d301      	bcc.n	800c7d0 <clust2sect+0x20>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	e008      	b.n	800c7e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	895b      	ldrh	r3, [r3, #10]
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	fb03 f202 	mul.w	r2, r3, r2
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e0:	4413      	add	r3, r2
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	370c      	adds	r7, #12
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr

0800c7ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b086      	sub	sp, #24
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	2b01      	cmp	r3, #1
 800c802:	d904      	bls.n	800c80e <get_fat+0x20>
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	695b      	ldr	r3, [r3, #20]
 800c808:	683a      	ldr	r2, [r7, #0]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d302      	bcc.n	800c814 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c80e:	2301      	movs	r3, #1
 800c810:	617b      	str	r3, [r7, #20]
 800c812:	e08f      	b.n	800c934 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c818:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	2b03      	cmp	r3, #3
 800c820:	d062      	beq.n	800c8e8 <get_fat+0xfa>
 800c822:	2b03      	cmp	r3, #3
 800c824:	dc7c      	bgt.n	800c920 <get_fat+0x132>
 800c826:	2b01      	cmp	r3, #1
 800c828:	d002      	beq.n	800c830 <get_fat+0x42>
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d042      	beq.n	800c8b4 <get_fat+0xc6>
 800c82e:	e077      	b.n	800c920 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	60fb      	str	r3, [r7, #12]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	085b      	lsrs	r3, r3, #1
 800c838:	68fa      	ldr	r2, [r7, #12]
 800c83a:	4413      	add	r3, r2
 800c83c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	6a1a      	ldr	r2, [r3, #32]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	0a5b      	lsrs	r3, r3, #9
 800c846:	4413      	add	r3, r2
 800c848:	4619      	mov	r1, r3
 800c84a:	6938      	ldr	r0, [r7, #16]
 800c84c:	f7ff ff14 	bl	800c678 <move_window>
 800c850:	4603      	mov	r3, r0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d167      	bne.n	800c926 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	1c5a      	adds	r2, r3, #1
 800c85a:	60fa      	str	r2, [r7, #12]
 800c85c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	4413      	add	r3, r2
 800c864:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c868:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	6a1a      	ldr	r2, [r3, #32]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	0a5b      	lsrs	r3, r3, #9
 800c872:	4413      	add	r3, r2
 800c874:	4619      	mov	r1, r3
 800c876:	6938      	ldr	r0, [r7, #16]
 800c878:	f7ff fefe 	bl	800c678 <move_window>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d153      	bne.n	800c92a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	4413      	add	r3, r2
 800c88c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c890:	021b      	lsls	r3, r3, #8
 800c892:	461a      	mov	r2, r3
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	4313      	orrs	r3, r2
 800c898:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	f003 0301 	and.w	r3, r3, #1
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d002      	beq.n	800c8aa <get_fat+0xbc>
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	091b      	lsrs	r3, r3, #4
 800c8a8:	e002      	b.n	800c8b0 <get_fat+0xc2>
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c8b0:	617b      	str	r3, [r7, #20]
			break;
 800c8b2:	e03f      	b.n	800c934 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	6a1a      	ldr	r2, [r3, #32]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	0a1b      	lsrs	r3, r3, #8
 800c8bc:	4413      	add	r3, r2
 800c8be:	4619      	mov	r1, r3
 800c8c0:	6938      	ldr	r0, [r7, #16]
 800c8c2:	f7ff fed9 	bl	800c678 <move_window>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d130      	bne.n	800c92e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	005b      	lsls	r3, r3, #1
 800c8d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c8da:	4413      	add	r3, r2
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7ff fc1b 	bl	800c118 <ld_word>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	617b      	str	r3, [r7, #20]
			break;
 800c8e6:	e025      	b.n	800c934 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	6a1a      	ldr	r2, [r3, #32]
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	09db      	lsrs	r3, r3, #7
 800c8f0:	4413      	add	r3, r2
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	6938      	ldr	r0, [r7, #16]
 800c8f6:	f7ff febf 	bl	800c678 <move_window>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d118      	bne.n	800c932 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c90e:	4413      	add	r3, r2
 800c910:	4618      	mov	r0, r3
 800c912:	f7ff fc19 	bl	800c148 <ld_dword>
 800c916:	4603      	mov	r3, r0
 800c918:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c91c:	617b      	str	r3, [r7, #20]
			break;
 800c91e:	e009      	b.n	800c934 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c920:	2301      	movs	r3, #1
 800c922:	617b      	str	r3, [r7, #20]
 800c924:	e006      	b.n	800c934 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c926:	bf00      	nop
 800c928:	e004      	b.n	800c934 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c92a:	bf00      	nop
 800c92c:	e002      	b.n	800c934 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c92e:	bf00      	nop
 800c930:	e000      	b.n	800c934 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c932:	bf00      	nop
		}
	}

	return val;
 800c934:	697b      	ldr	r3, [r7, #20]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3718      	adds	r7, #24
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c93e:	b590      	push	{r4, r7, lr}
 800c940:	b089      	sub	sp, #36	; 0x24
 800c942:	af00      	add	r7, sp, #0
 800c944:	60f8      	str	r0, [r7, #12]
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c94a:	2302      	movs	r3, #2
 800c94c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	2b01      	cmp	r3, #1
 800c952:	f240 80d2 	bls.w	800cafa <put_fat+0x1bc>
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	695b      	ldr	r3, [r3, #20]
 800c95a:	68ba      	ldr	r2, [r7, #8]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	f080 80cc 	bcs.w	800cafa <put_fat+0x1bc>
		switch (fs->fs_type) {
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	781b      	ldrb	r3, [r3, #0]
 800c966:	2b03      	cmp	r3, #3
 800c968:	f000 8096 	beq.w	800ca98 <put_fat+0x15a>
 800c96c:	2b03      	cmp	r3, #3
 800c96e:	f300 80cd 	bgt.w	800cb0c <put_fat+0x1ce>
 800c972:	2b01      	cmp	r3, #1
 800c974:	d002      	beq.n	800c97c <put_fat+0x3e>
 800c976:	2b02      	cmp	r3, #2
 800c978:	d06e      	beq.n	800ca58 <put_fat+0x11a>
 800c97a:	e0c7      	b.n	800cb0c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	61bb      	str	r3, [r7, #24]
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	085b      	lsrs	r3, r3, #1
 800c984:	69ba      	ldr	r2, [r7, #24]
 800c986:	4413      	add	r3, r2
 800c988:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	6a1a      	ldr	r2, [r3, #32]
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	0a5b      	lsrs	r3, r3, #9
 800c992:	4413      	add	r3, r2
 800c994:	4619      	mov	r1, r3
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f7ff fe6e 	bl	800c678 <move_window>
 800c99c:	4603      	mov	r3, r0
 800c99e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9a0:	7ffb      	ldrb	r3, [r7, #31]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f040 80ab 	bne.w	800cafe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9ae:	69bb      	ldr	r3, [r7, #24]
 800c9b0:	1c59      	adds	r1, r3, #1
 800c9b2:	61b9      	str	r1, [r7, #24]
 800c9b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b8:	4413      	add	r3, r2
 800c9ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	f003 0301 	and.w	r3, r3, #1
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d00d      	beq.n	800c9e2 <put_fat+0xa4>
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	b25b      	sxtb	r3, r3
 800c9cc:	f003 030f 	and.w	r3, r3, #15
 800c9d0:	b25a      	sxtb	r2, r3
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	011b      	lsls	r3, r3, #4
 800c9d8:	b25b      	sxtb	r3, r3
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	b25b      	sxtb	r3, r3
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	e001      	b.n	800c9e6 <put_fat+0xa8>
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	697a      	ldr	r2, [r7, #20]
 800c9e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6a1a      	ldr	r2, [r3, #32]
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	0a5b      	lsrs	r3, r3, #9
 800c9f8:	4413      	add	r3, r2
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f7ff fe3b 	bl	800c678 <move_window>
 800ca02:	4603      	mov	r3, r0
 800ca04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca06:	7ffb      	ldrb	r3, [r7, #31]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d17a      	bne.n	800cb02 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca18:	4413      	add	r3, r2
 800ca1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	f003 0301 	and.w	r3, r3, #1
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d003      	beq.n	800ca2e <put_fat+0xf0>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	091b      	lsrs	r3, r3, #4
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	e00e      	b.n	800ca4c <put_fat+0x10e>
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	781b      	ldrb	r3, [r3, #0]
 800ca32:	b25b      	sxtb	r3, r3
 800ca34:	f023 030f 	bic.w	r3, r3, #15
 800ca38:	b25a      	sxtb	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	0a1b      	lsrs	r3, r3, #8
 800ca3e:	b25b      	sxtb	r3, r3
 800ca40:	f003 030f 	and.w	r3, r3, #15
 800ca44:	b25b      	sxtb	r3, r3
 800ca46:	4313      	orrs	r3, r2
 800ca48:	b25b      	sxtb	r3, r3
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2201      	movs	r2, #1
 800ca54:	70da      	strb	r2, [r3, #3]
			break;
 800ca56:	e059      	b.n	800cb0c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6a1a      	ldr	r2, [r3, #32]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	0a1b      	lsrs	r3, r3, #8
 800ca60:	4413      	add	r3, r2
 800ca62:	4619      	mov	r1, r3
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7ff fe07 	bl	800c678 <move_window>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ca6e:	7ffb      	ldrb	r3, [r7, #31]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d148      	bne.n	800cb06 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	005b      	lsls	r3, r3, #1
 800ca7e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ca82:	4413      	add	r3, r2
 800ca84:	687a      	ldr	r2, [r7, #4]
 800ca86:	b292      	uxth	r2, r2
 800ca88:	4611      	mov	r1, r2
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7ff fb7f 	bl	800c18e <st_word>
			fs->wflag = 1;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	2201      	movs	r2, #1
 800ca94:	70da      	strb	r2, [r3, #3]
			break;
 800ca96:	e039      	b.n	800cb0c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	6a1a      	ldr	r2, [r3, #32]
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	09db      	lsrs	r3, r3, #7
 800caa0:	4413      	add	r3, r2
 800caa2:	4619      	mov	r1, r3
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	f7ff fde7 	bl	800c678 <move_window>
 800caaa:	4603      	mov	r3, r0
 800caac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800caae:	7ffb      	ldrb	r3, [r7, #31]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d12a      	bne.n	800cb0a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cac8:	4413      	add	r3, r2
 800caca:	4618      	mov	r0, r3
 800cacc:	f7ff fb3c 	bl	800c148 <ld_dword>
 800cad0:	4603      	mov	r3, r0
 800cad2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cad6:	4323      	orrs	r3, r4
 800cad8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	009b      	lsls	r3, r3, #2
 800cae4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cae8:	4413      	add	r3, r2
 800caea:	6879      	ldr	r1, [r7, #4]
 800caec:	4618      	mov	r0, r3
 800caee:	f7ff fb69 	bl	800c1c4 <st_dword>
			fs->wflag = 1;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2201      	movs	r2, #1
 800caf6:	70da      	strb	r2, [r3, #3]
			break;
 800caf8:	e008      	b.n	800cb0c <put_fat+0x1ce>
		}
	}
 800cafa:	bf00      	nop
 800cafc:	e006      	b.n	800cb0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cafe:	bf00      	nop
 800cb00:	e004      	b.n	800cb0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cb02:	bf00      	nop
 800cb04:	e002      	b.n	800cb0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cb06:	bf00      	nop
 800cb08:	e000      	b.n	800cb0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800cb0a:	bf00      	nop
	return res;
 800cb0c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3724      	adds	r7, #36	; 0x24
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd90      	pop	{r4, r7, pc}

0800cb16 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cb16:	b580      	push	{r7, lr}
 800cb18:	b088      	sub	sp, #32
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	60f8      	str	r0, [r7, #12]
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cb22:	2300      	movs	r3, #0
 800cb24:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d904      	bls.n	800cb3c <remove_chain+0x26>
 800cb32:	69bb      	ldr	r3, [r7, #24]
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d301      	bcc.n	800cb40 <remove_chain+0x2a>
 800cb3c:	2302      	movs	r3, #2
 800cb3e:	e04b      	b.n	800cbd8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00c      	beq.n	800cb60 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cb46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb4a:	6879      	ldr	r1, [r7, #4]
 800cb4c:	69b8      	ldr	r0, [r7, #24]
 800cb4e:	f7ff fef6 	bl	800c93e <put_fat>
 800cb52:	4603      	mov	r3, r0
 800cb54:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cb56:	7ffb      	ldrb	r3, [r7, #31]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d001      	beq.n	800cb60 <remove_chain+0x4a>
 800cb5c:	7ffb      	ldrb	r3, [r7, #31]
 800cb5e:	e03b      	b.n	800cbd8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cb60:	68b9      	ldr	r1, [r7, #8]
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f7ff fe43 	bl	800c7ee <get_fat>
 800cb68:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d031      	beq.n	800cbd4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d101      	bne.n	800cb7a <remove_chain+0x64>
 800cb76:	2302      	movs	r3, #2
 800cb78:	e02e      	b.n	800cbd8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb80:	d101      	bne.n	800cb86 <remove_chain+0x70>
 800cb82:	2301      	movs	r3, #1
 800cb84:	e028      	b.n	800cbd8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cb86:	2200      	movs	r2, #0
 800cb88:	68b9      	ldr	r1, [r7, #8]
 800cb8a:	69b8      	ldr	r0, [r7, #24]
 800cb8c:	f7ff fed7 	bl	800c93e <put_fat>
 800cb90:	4603      	mov	r3, r0
 800cb92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cb94:	7ffb      	ldrb	r3, [r7, #31]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <remove_chain+0x88>
 800cb9a:	7ffb      	ldrb	r3, [r7, #31]
 800cb9c:	e01c      	b.n	800cbd8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cb9e:	69bb      	ldr	r3, [r7, #24]
 800cba0:	691a      	ldr	r2, [r3, #16]
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	695b      	ldr	r3, [r3, #20]
 800cba6:	3b02      	subs	r3, #2
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d20b      	bcs.n	800cbc4 <remove_chain+0xae>
			fs->free_clst++;
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	1c5a      	adds	r2, r3, #1
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800cbb6:	69bb      	ldr	r3, [r7, #24]
 800cbb8:	791b      	ldrb	r3, [r3, #4]
 800cbba:	f043 0301 	orr.w	r3, r3, #1
 800cbbe:	b2da      	uxtb	r2, r3
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cbc8:	69bb      	ldr	r3, [r7, #24]
 800cbca:	695b      	ldr	r3, [r3, #20]
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d3c6      	bcc.n	800cb60 <remove_chain+0x4a>
 800cbd2:	e000      	b.n	800cbd6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cbd4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cbd6:	2300      	movs	r3, #0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3720      	adds	r7, #32
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b088      	sub	sp, #32
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
 800cbe8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d10d      	bne.n	800cc12 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	68db      	ldr	r3, [r3, #12]
 800cbfa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d004      	beq.n	800cc0c <create_chain+0x2c>
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	695b      	ldr	r3, [r3, #20]
 800cc06:	69ba      	ldr	r2, [r7, #24]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d31b      	bcc.n	800cc44 <create_chain+0x64>
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	61bb      	str	r3, [r7, #24]
 800cc10:	e018      	b.n	800cc44 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7ff fdea 	bl	800c7ee <get_fat>
 800cc1a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d801      	bhi.n	800cc26 <create_chain+0x46>
 800cc22:	2301      	movs	r3, #1
 800cc24:	e070      	b.n	800cd08 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc2c:	d101      	bne.n	800cc32 <create_chain+0x52>
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	e06a      	b.n	800cd08 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	695b      	ldr	r3, [r3, #20]
 800cc36:	68fa      	ldr	r2, [r7, #12]
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d201      	bcs.n	800cc40 <create_chain+0x60>
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	e063      	b.n	800cd08 <create_chain+0x128>
		scl = clst;
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	695b      	ldr	r3, [r3, #20]
 800cc52:	69fa      	ldr	r2, [r7, #28]
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d307      	bcc.n	800cc68 <create_chain+0x88>
				ncl = 2;
 800cc58:	2302      	movs	r3, #2
 800cc5a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cc5c:	69fa      	ldr	r2, [r7, #28]
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d901      	bls.n	800cc68 <create_chain+0x88>
 800cc64:	2300      	movs	r3, #0
 800cc66:	e04f      	b.n	800cd08 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cc68:	69f9      	ldr	r1, [r7, #28]
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f7ff fdbf 	bl	800c7ee <get_fat>
 800cc70:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00e      	beq.n	800cc96 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d003      	beq.n	800cc86 <create_chain+0xa6>
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cc84:	d101      	bne.n	800cc8a <create_chain+0xaa>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	e03e      	b.n	800cd08 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cc8a:	69fa      	ldr	r2, [r7, #28]
 800cc8c:	69bb      	ldr	r3, [r7, #24]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d1da      	bne.n	800cc48 <create_chain+0x68>
 800cc92:	2300      	movs	r3, #0
 800cc94:	e038      	b.n	800cd08 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cc96:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cc98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc9c:	69f9      	ldr	r1, [r7, #28]
 800cc9e:	6938      	ldr	r0, [r7, #16]
 800cca0:	f7ff fe4d 	bl	800c93e <put_fat>
 800cca4:	4603      	mov	r3, r0
 800cca6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d109      	bne.n	800ccc2 <create_chain+0xe2>
 800ccae:	683b      	ldr	r3, [r7, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d006      	beq.n	800ccc2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ccb4:	69fa      	ldr	r2, [r7, #28]
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6938      	ldr	r0, [r7, #16]
 800ccba:	f7ff fe40 	bl	800c93e <put_fat>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ccc2:	7dfb      	ldrb	r3, [r7, #23]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d116      	bne.n	800ccf6 <create_chain+0x116>
		fs->last_clst = ncl;
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	69fa      	ldr	r2, [r7, #28]
 800cccc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	691a      	ldr	r2, [r3, #16]
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	695b      	ldr	r3, [r3, #20]
 800ccd6:	3b02      	subs	r3, #2
 800ccd8:	429a      	cmp	r2, r3
 800ccda:	d804      	bhi.n	800cce6 <create_chain+0x106>
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	1e5a      	subs	r2, r3, #1
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	791b      	ldrb	r3, [r3, #4]
 800ccea:	f043 0301 	orr.w	r3, r3, #1
 800ccee:	b2da      	uxtb	r2, r3
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	711a      	strb	r2, [r3, #4]
 800ccf4:	e007      	b.n	800cd06 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ccf6:	7dfb      	ldrb	r3, [r7, #23]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d102      	bne.n	800cd02 <create_chain+0x122>
 800ccfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd00:	e000      	b.n	800cd04 <create_chain+0x124>
 800cd02:	2301      	movs	r3, #1
 800cd04:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cd06:	69fb      	ldr	r3, [r7, #28]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3720      	adds	r7, #32
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b087      	sub	sp, #28
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd24:	3304      	adds	r3, #4
 800cd26:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	0a5b      	lsrs	r3, r3, #9
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	8952      	ldrh	r2, [r2, #10]
 800cd30:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd34:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	1d1a      	adds	r2, r3, #4
 800cd3a:	613a      	str	r2, [r7, #16]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <clmt_clust+0x3a>
 800cd46:	2300      	movs	r3, #0
 800cd48:	e010      	b.n	800cd6c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cd4a:	697a      	ldr	r2, [r7, #20]
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d307      	bcc.n	800cd62 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cd52:	697a      	ldr	r2, [r7, #20]
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	1ad3      	subs	r3, r2, r3
 800cd58:	617b      	str	r3, [r7, #20]
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cd60:	e7e9      	b.n	800cd36 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cd62:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	681a      	ldr	r2, [r3, #0]
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	4413      	add	r3, r2
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	371c      	adds	r7, #28
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr

0800cd78 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b086      	sub	sp, #24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd8e:	d204      	bcs.n	800cd9a <dir_sdi+0x22>
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	f003 031f 	and.w	r3, r3, #31
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <dir_sdi+0x26>
		return FR_INT_ERR;
 800cd9a:	2302      	movs	r3, #2
 800cd9c:	e063      	b.n	800ce66 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	689b      	ldr	r3, [r3, #8]
 800cda8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d106      	bne.n	800cdbe <dir_sdi+0x46>
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	2b02      	cmp	r3, #2
 800cdb6:	d902      	bls.n	800cdbe <dir_sdi+0x46>
		clst = fs->dirbase;
 800cdb8:	693b      	ldr	r3, [r7, #16]
 800cdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10c      	bne.n	800cdde <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	095b      	lsrs	r3, r3, #5
 800cdc8:	693a      	ldr	r2, [r7, #16]
 800cdca:	8912      	ldrh	r2, [r2, #8]
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d301      	bcc.n	800cdd4 <dir_sdi+0x5c>
 800cdd0:	2302      	movs	r3, #2
 800cdd2:	e048      	b.n	800ce66 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	61da      	str	r2, [r3, #28]
 800cddc:	e029      	b.n	800ce32 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	895b      	ldrh	r3, [r3, #10]
 800cde2:	025b      	lsls	r3, r3, #9
 800cde4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cde6:	e019      	b.n	800ce1c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6979      	ldr	r1, [r7, #20]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7ff fcfe 	bl	800c7ee <get_fat>
 800cdf2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdfa:	d101      	bne.n	800ce00 <dir_sdi+0x88>
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e032      	b.n	800ce66 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d904      	bls.n	800ce10 <dir_sdi+0x98>
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	695b      	ldr	r3, [r3, #20]
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d301      	bcc.n	800ce14 <dir_sdi+0x9c>
 800ce10:	2302      	movs	r3, #2
 800ce12:	e028      	b.n	800ce66 <dir_sdi+0xee>
			ofs -= csz;
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	429a      	cmp	r2, r3
 800ce22:	d2e1      	bcs.n	800cde8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ce24:	6979      	ldr	r1, [r7, #20]
 800ce26:	6938      	ldr	r0, [r7, #16]
 800ce28:	f7ff fcc2 	bl	800c7b0 <clust2sect>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	697a      	ldr	r2, [r7, #20]
 800ce36:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	69db      	ldr	r3, [r3, #28]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <dir_sdi+0xcc>
 800ce40:	2302      	movs	r3, #2
 800ce42:	e010      	b.n	800ce66 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	69da      	ldr	r2, [r3, #28]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	0a5b      	lsrs	r3, r3, #9
 800ce4c:	441a      	add	r2, r3
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce5e:	441a      	add	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3718      	adds	r7, #24
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b086      	sub	sp, #24
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
 800ce76:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	3320      	adds	r3, #32
 800ce84:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	69db      	ldr	r3, [r3, #28]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d003      	beq.n	800ce96 <dir_next+0x28>
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce94:	d301      	bcc.n	800ce9a <dir_next+0x2c>
 800ce96:	2304      	movs	r3, #4
 800ce98:	e0aa      	b.n	800cff0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f040 8098 	bne.w	800cfd6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	69db      	ldr	r3, [r3, #28]
 800ceaa:	1c5a      	adds	r2, r3, #1
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	699b      	ldr	r3, [r3, #24]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d10b      	bne.n	800ced0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	095b      	lsrs	r3, r3, #5
 800cebc:	68fa      	ldr	r2, [r7, #12]
 800cebe:	8912      	ldrh	r2, [r2, #8]
 800cec0:	4293      	cmp	r3, r2
 800cec2:	f0c0 8088 	bcc.w	800cfd6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	61da      	str	r2, [r3, #28]
 800cecc:	2304      	movs	r3, #4
 800cece:	e08f      	b.n	800cff0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	0a5b      	lsrs	r3, r3, #9
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	8952      	ldrh	r2, [r2, #10]
 800ced8:	3a01      	subs	r2, #1
 800ceda:	4013      	ands	r3, r2
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d17a      	bne.n	800cfd6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	699b      	ldr	r3, [r3, #24]
 800cee6:	4619      	mov	r1, r3
 800cee8:	4610      	mov	r0, r2
 800ceea:	f7ff fc80 	bl	800c7ee <get_fat>
 800ceee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d801      	bhi.n	800cefa <dir_next+0x8c>
 800cef6:	2302      	movs	r3, #2
 800cef8:	e07a      	b.n	800cff0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf00:	d101      	bne.n	800cf06 <dir_next+0x98>
 800cf02:	2301      	movs	r3, #1
 800cf04:	e074      	b.n	800cff0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	695b      	ldr	r3, [r3, #20]
 800cf0a:	697a      	ldr	r2, [r7, #20]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d358      	bcc.n	800cfc2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d104      	bne.n	800cf20 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	61da      	str	r2, [r3, #28]
 800cf1c:	2304      	movs	r3, #4
 800cf1e:	e067      	b.n	800cff0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	699b      	ldr	r3, [r3, #24]
 800cf26:	4619      	mov	r1, r3
 800cf28:	4610      	mov	r0, r2
 800cf2a:	f7ff fe59 	bl	800cbe0 <create_chain>
 800cf2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d101      	bne.n	800cf3a <dir_next+0xcc>
 800cf36:	2307      	movs	r3, #7
 800cf38:	e05a      	b.n	800cff0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	2b01      	cmp	r3, #1
 800cf3e:	d101      	bne.n	800cf44 <dir_next+0xd6>
 800cf40:	2302      	movs	r3, #2
 800cf42:	e055      	b.n	800cff0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf4a:	d101      	bne.n	800cf50 <dir_next+0xe2>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e04f      	b.n	800cff0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f7ff fb4d 	bl	800c5f0 <sync_window>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d001      	beq.n	800cf60 <dir_next+0xf2>
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	e047      	b.n	800cff0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	3330      	adds	r3, #48	; 0x30
 800cf64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cf68:	2100      	movs	r1, #0
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7ff f977 	bl	800c25e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cf70:	2300      	movs	r3, #0
 800cf72:	613b      	str	r3, [r7, #16]
 800cf74:	6979      	ldr	r1, [r7, #20]
 800cf76:	68f8      	ldr	r0, [r7, #12]
 800cf78:	f7ff fc1a 	bl	800c7b0 <clust2sect>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	62da      	str	r2, [r3, #44]	; 0x2c
 800cf82:	e012      	b.n	800cfaa <dir_next+0x13c>
						fs->wflag = 1;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2201      	movs	r2, #1
 800cf88:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f7ff fb30 	bl	800c5f0 <sync_window>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d001      	beq.n	800cf9a <dir_next+0x12c>
 800cf96:	2301      	movs	r3, #1
 800cf98:	e02a      	b.n	800cff0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	613b      	str	r3, [r7, #16]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	62da      	str	r2, [r3, #44]	; 0x2c
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	895b      	ldrh	r3, [r3, #10]
 800cfae:	461a      	mov	r2, r3
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d3e6      	bcc.n	800cf84 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	1ad2      	subs	r2, r2, r3
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cfc8:	6979      	ldr	r1, [r7, #20]
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f7ff fbf0 	bl	800c7b0 <clust2sect>
 800cfd0:	4602      	mov	r2, r0
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68ba      	ldr	r2, [r7, #8]
 800cfda:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe8:	441a      	add	r2, r3
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3718      	adds	r7, #24
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b086      	sub	sp, #24
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
 800d000:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d008:	2100      	movs	r1, #0
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f7ff feb4 	bl	800cd78 <dir_sdi>
 800d010:	4603      	mov	r3, r0
 800d012:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d014:	7dfb      	ldrb	r3, [r7, #23]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d12b      	bne.n	800d072 <dir_alloc+0x7a>
		n = 0;
 800d01a:	2300      	movs	r3, #0
 800d01c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	69db      	ldr	r3, [r3, #28]
 800d022:	4619      	mov	r1, r3
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f7ff fb27 	bl	800c678 <move_window>
 800d02a:	4603      	mov	r3, r0
 800d02c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d02e:	7dfb      	ldrb	r3, [r7, #23]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d11d      	bne.n	800d070 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6a1b      	ldr	r3, [r3, #32]
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	2be5      	cmp	r3, #229	; 0xe5
 800d03c:	d004      	beq.n	800d048 <dir_alloc+0x50>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	6a1b      	ldr	r3, [r3, #32]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d107      	bne.n	800d058 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	3301      	adds	r3, #1
 800d04c:	613b      	str	r3, [r7, #16]
 800d04e:	693a      	ldr	r2, [r7, #16]
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	429a      	cmp	r2, r3
 800d054:	d102      	bne.n	800d05c <dir_alloc+0x64>
 800d056:	e00c      	b.n	800d072 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d058:	2300      	movs	r3, #0
 800d05a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d05c:	2101      	movs	r1, #1
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7ff ff05 	bl	800ce6e <dir_next>
 800d064:	4603      	mov	r3, r0
 800d066:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d068:	7dfb      	ldrb	r3, [r7, #23]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d0d7      	beq.n	800d01e <dir_alloc+0x26>
 800d06e:	e000      	b.n	800d072 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d070:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d072:	7dfb      	ldrb	r3, [r7, #23]
 800d074:	2b04      	cmp	r3, #4
 800d076:	d101      	bne.n	800d07c <dir_alloc+0x84>
 800d078:	2307      	movs	r3, #7
 800d07a:	75fb      	strb	r3, [r7, #23]
	return res;
 800d07c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3718      	adds	r7, #24
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}

0800d086 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d086:	b580      	push	{r7, lr}
 800d088:	b084      	sub	sp, #16
 800d08a:	af00      	add	r7, sp, #0
 800d08c:	6078      	str	r0, [r7, #4]
 800d08e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	331a      	adds	r3, #26
 800d094:	4618      	mov	r0, r3
 800d096:	f7ff f83f 	bl	800c118 <ld_word>
 800d09a:	4603      	mov	r3, r0
 800d09c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	2b03      	cmp	r3, #3
 800d0a4:	d109      	bne.n	800d0ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	3314      	adds	r3, #20
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7ff f834 	bl	800c118 <ld_word>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	041b      	lsls	r3, r3, #16
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	60f8      	str	r0, [r7, #12]
 800d0cc:	60b9      	str	r1, [r7, #8]
 800d0ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	331a      	adds	r3, #26
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	b292      	uxth	r2, r2
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7ff f857 	bl	800c18e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	2b03      	cmp	r3, #3
 800d0e6:	d109      	bne.n	800d0fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	f103 0214 	add.w	r2, r3, #20
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	0c1b      	lsrs	r3, r3, #16
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	4619      	mov	r1, r3
 800d0f6:	4610      	mov	r0, r2
 800d0f8:	f7ff f849 	bl	800c18e <st_word>
	}
}
 800d0fc:	bf00      	nop
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b086      	sub	sp, #24
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d112:	2100      	movs	r1, #0
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7ff fe2f 	bl	800cd78 <dir_sdi>
 800d11a:	4603      	mov	r3, r0
 800d11c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d11e:	7dfb      	ldrb	r3, [r7, #23]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d001      	beq.n	800d128 <dir_find+0x24>
 800d124:	7dfb      	ldrb	r3, [r7, #23]
 800d126:	e03e      	b.n	800d1a6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	69db      	ldr	r3, [r3, #28]
 800d12c:	4619      	mov	r1, r3
 800d12e:	6938      	ldr	r0, [r7, #16]
 800d130:	f7ff faa2 	bl	800c678 <move_window>
 800d134:	4603      	mov	r3, r0
 800d136:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d138:	7dfb      	ldrb	r3, [r7, #23]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d12f      	bne.n	800d19e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6a1b      	ldr	r3, [r3, #32]
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d146:	7bfb      	ldrb	r3, [r7, #15]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d102      	bne.n	800d152 <dir_find+0x4e>
 800d14c:	2304      	movs	r3, #4
 800d14e:	75fb      	strb	r3, [r7, #23]
 800d150:	e028      	b.n	800d1a4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6a1b      	ldr	r3, [r3, #32]
 800d156:	330b      	adds	r3, #11
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d15e:	b2da      	uxtb	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6a1b      	ldr	r3, [r3, #32]
 800d168:	330b      	adds	r3, #11
 800d16a:	781b      	ldrb	r3, [r3, #0]
 800d16c:	f003 0308 	and.w	r3, r3, #8
 800d170:	2b00      	cmp	r3, #0
 800d172:	d10a      	bne.n	800d18a <dir_find+0x86>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6a18      	ldr	r0, [r3, #32]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	3324      	adds	r3, #36	; 0x24
 800d17c:	220b      	movs	r2, #11
 800d17e:	4619      	mov	r1, r3
 800d180:	f7ff f888 	bl	800c294 <mem_cmp>
 800d184:	4603      	mov	r3, r0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d00b      	beq.n	800d1a2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d18a:	2100      	movs	r1, #0
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7ff fe6e 	bl	800ce6e <dir_next>
 800d192:	4603      	mov	r3, r0
 800d194:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d196:	7dfb      	ldrb	r3, [r7, #23]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d0c5      	beq.n	800d128 <dir_find+0x24>
 800d19c:	e002      	b.n	800d1a4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d19e:	bf00      	nop
 800d1a0:	e000      	b.n	800d1a4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d1a2:	bf00      	nop

	return res;
 800d1a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3718      	adds	r7, #24
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}

0800d1ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d1ae:	b580      	push	{r7, lr}
 800d1b0:	b084      	sub	sp, #16
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d1bc:	2101      	movs	r1, #1
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f7ff ff1a 	bl	800cff8 <dir_alloc>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d11c      	bne.n	800d208 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	69db      	ldr	r3, [r3, #28]
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	68b8      	ldr	r0, [r7, #8]
 800d1d6:	f7ff fa4f 	bl	800c678 <move_window>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d1de:	7bfb      	ldrb	r3, [r7, #15]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d111      	bne.n	800d208 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6a1b      	ldr	r3, [r3, #32]
 800d1e8:	2220      	movs	r2, #32
 800d1ea:	2100      	movs	r1, #0
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7ff f836 	bl	800c25e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a18      	ldr	r0, [r3, #32]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	3324      	adds	r3, #36	; 0x24
 800d1fa:	220b      	movs	r2, #11
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	f7ff f80d 	bl	800c21c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2201      	movs	r2, #1
 800d206:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d208:	7bfb      	ldrb	r3, [r7, #15]
}
 800d20a:	4618      	mov	r0, r3
 800d20c:	3710      	adds	r7, #16
 800d20e:	46bd      	mov	sp, r7
 800d210:	bd80      	pop	{r7, pc}
	...

0800d214 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b088      	sub	sp, #32
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	60fb      	str	r3, [r7, #12]
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	3324      	adds	r3, #36	; 0x24
 800d228:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d22a:	220b      	movs	r2, #11
 800d22c:	2120      	movs	r1, #32
 800d22e:	68b8      	ldr	r0, [r7, #8]
 800d230:	f7ff f815 	bl	800c25e <mem_set>
	si = i = 0; ni = 8;
 800d234:	2300      	movs	r3, #0
 800d236:	613b      	str	r3, [r7, #16]
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	61fb      	str	r3, [r7, #28]
 800d23c:	2308      	movs	r3, #8
 800d23e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	1c5a      	adds	r2, r3, #1
 800d244:	61fa      	str	r2, [r7, #28]
 800d246:	68fa      	ldr	r2, [r7, #12]
 800d248:	4413      	add	r3, r2
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d24e:	7efb      	ldrb	r3, [r7, #27]
 800d250:	2b20      	cmp	r3, #32
 800d252:	d94e      	bls.n	800d2f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d254:	7efb      	ldrb	r3, [r7, #27]
 800d256:	2b2f      	cmp	r3, #47	; 0x2f
 800d258:	d006      	beq.n	800d268 <create_name+0x54>
 800d25a:	7efb      	ldrb	r3, [r7, #27]
 800d25c:	2b5c      	cmp	r3, #92	; 0x5c
 800d25e:	d110      	bne.n	800d282 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d260:	e002      	b.n	800d268 <create_name+0x54>
 800d262:	69fb      	ldr	r3, [r7, #28]
 800d264:	3301      	adds	r3, #1
 800d266:	61fb      	str	r3, [r7, #28]
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	4413      	add	r3, r2
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	2b2f      	cmp	r3, #47	; 0x2f
 800d272:	d0f6      	beq.n	800d262 <create_name+0x4e>
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	4413      	add	r3, r2
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	2b5c      	cmp	r3, #92	; 0x5c
 800d27e:	d0f0      	beq.n	800d262 <create_name+0x4e>
			break;
 800d280:	e038      	b.n	800d2f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d282:	7efb      	ldrb	r3, [r7, #27]
 800d284:	2b2e      	cmp	r3, #46	; 0x2e
 800d286:	d003      	beq.n	800d290 <create_name+0x7c>
 800d288:	693a      	ldr	r2, [r7, #16]
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d30c      	bcc.n	800d2aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	2b0b      	cmp	r3, #11
 800d294:	d002      	beq.n	800d29c <create_name+0x88>
 800d296:	7efb      	ldrb	r3, [r7, #27]
 800d298:	2b2e      	cmp	r3, #46	; 0x2e
 800d29a:	d001      	beq.n	800d2a0 <create_name+0x8c>
 800d29c:	2306      	movs	r3, #6
 800d29e:	e044      	b.n	800d32a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d2a0:	2308      	movs	r3, #8
 800d2a2:	613b      	str	r3, [r7, #16]
 800d2a4:	230b      	movs	r3, #11
 800d2a6:	617b      	str	r3, [r7, #20]
			continue;
 800d2a8:	e022      	b.n	800d2f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d2aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	da04      	bge.n	800d2bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d2b2:	7efb      	ldrb	r3, [r7, #27]
 800d2b4:	3b80      	subs	r3, #128	; 0x80
 800d2b6:	4a1f      	ldr	r2, [pc, #124]	; (800d334 <create_name+0x120>)
 800d2b8:	5cd3      	ldrb	r3, [r2, r3]
 800d2ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d2bc:	7efb      	ldrb	r3, [r7, #27]
 800d2be:	4619      	mov	r1, r3
 800d2c0:	481d      	ldr	r0, [pc, #116]	; (800d338 <create_name+0x124>)
 800d2c2:	f7ff f80e 	bl	800c2e2 <chk_chr>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d001      	beq.n	800d2d0 <create_name+0xbc>
 800d2cc:	2306      	movs	r3, #6
 800d2ce:	e02c      	b.n	800d32a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d2d0:	7efb      	ldrb	r3, [r7, #27]
 800d2d2:	2b60      	cmp	r3, #96	; 0x60
 800d2d4:	d905      	bls.n	800d2e2 <create_name+0xce>
 800d2d6:	7efb      	ldrb	r3, [r7, #27]
 800d2d8:	2b7a      	cmp	r3, #122	; 0x7a
 800d2da:	d802      	bhi.n	800d2e2 <create_name+0xce>
 800d2dc:	7efb      	ldrb	r3, [r7, #27]
 800d2de:	3b20      	subs	r3, #32
 800d2e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	1c5a      	adds	r2, r3, #1
 800d2e6:	613a      	str	r2, [r7, #16]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	4413      	add	r3, r2
 800d2ec:	7efa      	ldrb	r2, [r7, #27]
 800d2ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d2f0:	e7a6      	b.n	800d240 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d2f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	441a      	add	r2, r3
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d101      	bne.n	800d308 <create_name+0xf4>
 800d304:	2306      	movs	r3, #6
 800d306:	e010      	b.n	800d32a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	2be5      	cmp	r3, #229	; 0xe5
 800d30e:	d102      	bne.n	800d316 <create_name+0x102>
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	2205      	movs	r2, #5
 800d314:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d316:	7efb      	ldrb	r3, [r7, #27]
 800d318:	2b20      	cmp	r3, #32
 800d31a:	d801      	bhi.n	800d320 <create_name+0x10c>
 800d31c:	2204      	movs	r2, #4
 800d31e:	e000      	b.n	800d322 <create_name+0x10e>
 800d320:	2200      	movs	r2, #0
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	330b      	adds	r3, #11
 800d326:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d328:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3720      	adds	r7, #32
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	0800ecdc 	.word	0x0800ecdc
 800d338:	0800ec64 	.word	0x0800ec64

0800d33c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b086      	sub	sp, #24
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
 800d344:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d350:	e002      	b.n	800d358 <follow_path+0x1c>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	3301      	adds	r3, #1
 800d356:	603b      	str	r3, [r7, #0]
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	2b2f      	cmp	r3, #47	; 0x2f
 800d35e:	d0f8      	beq.n	800d352 <follow_path+0x16>
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b5c      	cmp	r3, #92	; 0x5c
 800d366:	d0f4      	beq.n	800d352 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	2200      	movs	r2, #0
 800d36c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	2b1f      	cmp	r3, #31
 800d374:	d80a      	bhi.n	800d38c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2280      	movs	r2, #128	; 0x80
 800d37a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d37e:	2100      	movs	r1, #0
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f7ff fcf9 	bl	800cd78 <dir_sdi>
 800d386:	4603      	mov	r3, r0
 800d388:	75fb      	strb	r3, [r7, #23]
 800d38a:	e043      	b.n	800d414 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d38c:	463b      	mov	r3, r7
 800d38e:	4619      	mov	r1, r3
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f7ff ff3f 	bl	800d214 <create_name>
 800d396:	4603      	mov	r3, r0
 800d398:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d39a:	7dfb      	ldrb	r3, [r7, #23]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d134      	bne.n	800d40a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f7ff feaf 	bl	800d104 <dir_find>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d3b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d3b2:	7dfb      	ldrb	r3, [r7, #23]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00a      	beq.n	800d3ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d3b8:	7dfb      	ldrb	r3, [r7, #23]
 800d3ba:	2b04      	cmp	r3, #4
 800d3bc:	d127      	bne.n	800d40e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d3be:	7afb      	ldrb	r3, [r7, #11]
 800d3c0:	f003 0304 	and.w	r3, r3, #4
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d122      	bne.n	800d40e <follow_path+0xd2>
 800d3c8:	2305      	movs	r3, #5
 800d3ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d3cc:	e01f      	b.n	800d40e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d3ce:	7afb      	ldrb	r3, [r7, #11]
 800d3d0:	f003 0304 	and.w	r3, r3, #4
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d11c      	bne.n	800d412 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	799b      	ldrb	r3, [r3, #6]
 800d3dc:	f003 0310 	and.w	r3, r3, #16
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d102      	bne.n	800d3ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d3e4:	2305      	movs	r3, #5
 800d3e6:	75fb      	strb	r3, [r7, #23]
 800d3e8:	e014      	b.n	800d414 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	695b      	ldr	r3, [r3, #20]
 800d3f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3f8:	4413      	add	r3, r2
 800d3fa:	4619      	mov	r1, r3
 800d3fc:	68f8      	ldr	r0, [r7, #12]
 800d3fe:	f7ff fe42 	bl	800d086 <ld_clust>
 800d402:	4602      	mov	r2, r0
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d408:	e7c0      	b.n	800d38c <follow_path+0x50>
			if (res != FR_OK) break;
 800d40a:	bf00      	nop
 800d40c:	e002      	b.n	800d414 <follow_path+0xd8>
				break;
 800d40e:	bf00      	nop
 800d410:	e000      	b.n	800d414 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d412:	bf00      	nop
			}
		}
	}

	return res;
 800d414:	7dfb      	ldrb	r3, [r7, #23]
}
 800d416:	4618      	mov	r0, r3
 800d418:	3718      	adds	r7, #24
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d41e:	b480      	push	{r7}
 800d420:	b087      	sub	sp, #28
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d42a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d031      	beq.n	800d498 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	617b      	str	r3, [r7, #20]
 800d43a:	e002      	b.n	800d442 <get_ldnumber+0x24>
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	3301      	adds	r3, #1
 800d440:	617b      	str	r3, [r7, #20]
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	2b20      	cmp	r3, #32
 800d448:	d903      	bls.n	800d452 <get_ldnumber+0x34>
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	781b      	ldrb	r3, [r3, #0]
 800d44e:	2b3a      	cmp	r3, #58	; 0x3a
 800d450:	d1f4      	bne.n	800d43c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	781b      	ldrb	r3, [r3, #0]
 800d456:	2b3a      	cmp	r3, #58	; 0x3a
 800d458:	d11c      	bne.n	800d494 <get_ldnumber+0x76>
			tp = *path;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	1c5a      	adds	r2, r3, #1
 800d464:	60fa      	str	r2, [r7, #12]
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	3b30      	subs	r3, #48	; 0x30
 800d46a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	2b09      	cmp	r3, #9
 800d470:	d80e      	bhi.n	800d490 <get_ldnumber+0x72>
 800d472:	68fa      	ldr	r2, [r7, #12]
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	429a      	cmp	r2, r3
 800d478:	d10a      	bne.n	800d490 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d107      	bne.n	800d490 <get_ldnumber+0x72>
					vol = (int)i;
 800d480:	68bb      	ldr	r3, [r7, #8]
 800d482:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	3301      	adds	r3, #1
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	697a      	ldr	r2, [r7, #20]
 800d48e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	e002      	b.n	800d49a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d494:	2300      	movs	r3, #0
 800d496:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d498:	693b      	ldr	r3, [r7, #16]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	371c      	adds	r7, #28
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
	...

0800d4a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	70da      	strb	r2, [r3, #3]
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7ff f8d8 	bl	800c678 <move_window>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d001      	beq.n	800d4d2 <check_fs+0x2a>
 800d4ce:	2304      	movs	r3, #4
 800d4d0:	e038      	b.n	800d544 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	3330      	adds	r3, #48	; 0x30
 800d4d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fe fe1c 	bl	800c118 <ld_word>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d001      	beq.n	800d4f0 <check_fs+0x48>
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	e029      	b.n	800d544 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4f6:	2be9      	cmp	r3, #233	; 0xe9
 800d4f8:	d009      	beq.n	800d50e <check_fs+0x66>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d500:	2beb      	cmp	r3, #235	; 0xeb
 800d502:	d11e      	bne.n	800d542 <check_fs+0x9a>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d50a:	2b90      	cmp	r3, #144	; 0x90
 800d50c:	d119      	bne.n	800d542 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	3330      	adds	r3, #48	; 0x30
 800d512:	3336      	adds	r3, #54	; 0x36
 800d514:	4618      	mov	r0, r3
 800d516:	f7fe fe17 	bl	800c148 <ld_dword>
 800d51a:	4603      	mov	r3, r0
 800d51c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d520:	4a0a      	ldr	r2, [pc, #40]	; (800d54c <check_fs+0xa4>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d101      	bne.n	800d52a <check_fs+0x82>
 800d526:	2300      	movs	r3, #0
 800d528:	e00c      	b.n	800d544 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	3330      	adds	r3, #48	; 0x30
 800d52e:	3352      	adds	r3, #82	; 0x52
 800d530:	4618      	mov	r0, r3
 800d532:	f7fe fe09 	bl	800c148 <ld_dword>
 800d536:	4603      	mov	r3, r0
 800d538:	4a05      	ldr	r2, [pc, #20]	; (800d550 <check_fs+0xa8>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d101      	bne.n	800d542 <check_fs+0x9a>
 800d53e:	2300      	movs	r3, #0
 800d540:	e000      	b.n	800d544 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d542:	2302      	movs	r3, #2
}
 800d544:	4618      	mov	r0, r3
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	00544146 	.word	0x00544146
 800d550:	33544146 	.word	0x33544146

0800d554 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b096      	sub	sp, #88	; 0x58
 800d558:	af00      	add	r7, sp, #0
 800d55a:	60f8      	str	r0, [r7, #12]
 800d55c:	60b9      	str	r1, [r7, #8]
 800d55e:	4613      	mov	r3, r2
 800d560:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	2200      	movs	r2, #0
 800d566:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f7ff ff58 	bl	800d41e <get_ldnumber>
 800d56e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d572:	2b00      	cmp	r3, #0
 800d574:	da01      	bge.n	800d57a <find_volume+0x26>
 800d576:	230b      	movs	r3, #11
 800d578:	e22d      	b.n	800d9d6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d57a:	4aa1      	ldr	r2, [pc, #644]	; (800d800 <find_volume+0x2ac>)
 800d57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d582:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <find_volume+0x3a>
 800d58a:	230c      	movs	r3, #12
 800d58c:	e223      	b.n	800d9d6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d592:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d594:	79fb      	ldrb	r3, [r7, #7]
 800d596:	f023 0301 	bic.w	r3, r3, #1
 800d59a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d01a      	beq.n	800d5da <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a6:	785b      	ldrb	r3, [r3, #1]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7fe fd17 	bl	800bfdc <disk_status>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d5b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5b8:	f003 0301 	and.w	r3, r3, #1
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10c      	bne.n	800d5da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d5c0:	79fb      	ldrb	r3, [r7, #7]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d007      	beq.n	800d5d6 <find_volume+0x82>
 800d5c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5ca:	f003 0304 	and.w	r3, r3, #4
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d001      	beq.n	800d5d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d5d2:	230a      	movs	r3, #10
 800d5d4:	e1ff      	b.n	800d9d6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	e1fd      	b.n	800d9d6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5dc:	2200      	movs	r2, #0
 800d5de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ea:	785b      	ldrb	r3, [r3, #1]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fe fd0f 	bl	800c010 <disk_initialize>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d5f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d5fc:	f003 0301 	and.w	r3, r3, #1
 800d600:	2b00      	cmp	r3, #0
 800d602:	d001      	beq.n	800d608 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d604:	2303      	movs	r3, #3
 800d606:	e1e6      	b.n	800d9d6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d608:	79fb      	ldrb	r3, [r7, #7]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d007      	beq.n	800d61e <find_volume+0xca>
 800d60e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d612:	f003 0304 	and.w	r3, r3, #4
 800d616:	2b00      	cmp	r3, #0
 800d618:	d001      	beq.n	800d61e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d61a:	230a      	movs	r3, #10
 800d61c:	e1db      	b.n	800d9d6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d61e:	2300      	movs	r3, #0
 800d620:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d622:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d624:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d626:	f7ff ff3f 	bl	800d4a8 <check_fs>
 800d62a:	4603      	mov	r3, r0
 800d62c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d634:	2b02      	cmp	r3, #2
 800d636:	d149      	bne.n	800d6cc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d638:	2300      	movs	r3, #0
 800d63a:	643b      	str	r3, [r7, #64]	; 0x40
 800d63c:	e01e      	b.n	800d67c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d640:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d646:	011b      	lsls	r3, r3, #4
 800d648:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d64c:	4413      	add	r3, r2
 800d64e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d652:	3304      	adds	r3, #4
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d006      	beq.n	800d668 <find_volume+0x114>
 800d65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d65c:	3308      	adds	r3, #8
 800d65e:	4618      	mov	r0, r3
 800d660:	f7fe fd72 	bl	800c148 <ld_dword>
 800d664:	4602      	mov	r2, r0
 800d666:	e000      	b.n	800d66a <find_volume+0x116>
 800d668:	2200      	movs	r2, #0
 800d66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d66c:	009b      	lsls	r3, r3, #2
 800d66e:	3358      	adds	r3, #88	; 0x58
 800d670:	443b      	add	r3, r7
 800d672:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d678:	3301      	adds	r3, #1
 800d67a:	643b      	str	r3, [r7, #64]	; 0x40
 800d67c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d67e:	2b03      	cmp	r3, #3
 800d680:	d9dd      	bls.n	800d63e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d682:	2300      	movs	r3, #0
 800d684:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <find_volume+0x13e>
 800d68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d68e:	3b01      	subs	r3, #1
 800d690:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d694:	009b      	lsls	r3, r3, #2
 800d696:	3358      	adds	r3, #88	; 0x58
 800d698:	443b      	add	r3, r7
 800d69a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d69e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d6a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d005      	beq.n	800d6b2 <find_volume+0x15e>
 800d6a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d6aa:	f7ff fefd 	bl	800d4a8 <check_fs>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	e000      	b.n	800d6b4 <find_volume+0x160>
 800d6b2:	2303      	movs	r3, #3
 800d6b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d6b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d905      	bls.n	800d6cc <find_volume+0x178>
 800d6c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	643b      	str	r3, [r7, #64]	; 0x40
 800d6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c8:	2b03      	cmp	r3, #3
 800d6ca:	d9e2      	bls.n	800d692 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d6cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6d0:	2b04      	cmp	r3, #4
 800d6d2:	d101      	bne.n	800d6d8 <find_volume+0x184>
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e17e      	b.n	800d9d6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d6d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d901      	bls.n	800d6e4 <find_volume+0x190>
 800d6e0:	230d      	movs	r3, #13
 800d6e2:	e178      	b.n	800d9d6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e6:	3330      	adds	r3, #48	; 0x30
 800d6e8:	330b      	adds	r3, #11
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe fd14 	bl	800c118 <ld_word>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6f6:	d001      	beq.n	800d6fc <find_volume+0x1a8>
 800d6f8:	230d      	movs	r3, #13
 800d6fa:	e16c      	b.n	800d9d6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6fe:	3330      	adds	r3, #48	; 0x30
 800d700:	3316      	adds	r3, #22
 800d702:	4618      	mov	r0, r3
 800d704:	f7fe fd08 	bl	800c118 <ld_word>
 800d708:	4603      	mov	r3, r0
 800d70a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d106      	bne.n	800d720 <find_volume+0x1cc>
 800d712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d714:	3330      	adds	r3, #48	; 0x30
 800d716:	3324      	adds	r3, #36	; 0x24
 800d718:	4618      	mov	r0, r3
 800d71a:	f7fe fd15 	bl	800c148 <ld_dword>
 800d71e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d722:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d724:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d728:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d72c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d732:	789b      	ldrb	r3, [r3, #2]
 800d734:	2b01      	cmp	r3, #1
 800d736:	d005      	beq.n	800d744 <find_volume+0x1f0>
 800d738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73a:	789b      	ldrb	r3, [r3, #2]
 800d73c:	2b02      	cmp	r3, #2
 800d73e:	d001      	beq.n	800d744 <find_volume+0x1f0>
 800d740:	230d      	movs	r3, #13
 800d742:	e148      	b.n	800d9d6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d746:	789b      	ldrb	r3, [r3, #2]
 800d748:	461a      	mov	r2, r3
 800d74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d74c:	fb02 f303 	mul.w	r3, r2, r3
 800d750:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d758:	b29a      	uxth	r2, r3
 800d75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d760:	895b      	ldrh	r3, [r3, #10]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d008      	beq.n	800d778 <find_volume+0x224>
 800d766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d768:	895b      	ldrh	r3, [r3, #10]
 800d76a:	461a      	mov	r2, r3
 800d76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76e:	895b      	ldrh	r3, [r3, #10]
 800d770:	3b01      	subs	r3, #1
 800d772:	4013      	ands	r3, r2
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <find_volume+0x228>
 800d778:	230d      	movs	r3, #13
 800d77a:	e12c      	b.n	800d9d6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d77e:	3330      	adds	r3, #48	; 0x30
 800d780:	3311      	adds	r3, #17
 800d782:	4618      	mov	r0, r3
 800d784:	f7fe fcc8 	bl	800c118 <ld_word>
 800d788:	4603      	mov	r3, r0
 800d78a:	461a      	mov	r2, r3
 800d78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d792:	891b      	ldrh	r3, [r3, #8]
 800d794:	f003 030f 	and.w	r3, r3, #15
 800d798:	b29b      	uxth	r3, r3
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d001      	beq.n	800d7a2 <find_volume+0x24e>
 800d79e:	230d      	movs	r3, #13
 800d7a0:	e119      	b.n	800d9d6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a4:	3330      	adds	r3, #48	; 0x30
 800d7a6:	3313      	adds	r3, #19
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7fe fcb5 	bl	800c118 <ld_word>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d7b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d106      	bne.n	800d7c6 <find_volume+0x272>
 800d7b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ba:	3330      	adds	r3, #48	; 0x30
 800d7bc:	3320      	adds	r3, #32
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7fe fcc2 	bl	800c148 <ld_dword>
 800d7c4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c8:	3330      	adds	r3, #48	; 0x30
 800d7ca:	330e      	adds	r3, #14
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fe fca3 	bl	800c118 <ld_word>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d7d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d101      	bne.n	800d7e0 <find_volume+0x28c>
 800d7dc:	230d      	movs	r3, #13
 800d7de:	e0fa      	b.n	800d9d6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d7e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d7e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7e4:	4413      	add	r3, r2
 800d7e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7e8:	8912      	ldrh	r2, [r2, #8]
 800d7ea:	0912      	lsrs	r2, r2, #4
 800d7ec:	b292      	uxth	r2, r2
 800d7ee:	4413      	add	r3, r2
 800d7f0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d7f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d204      	bcs.n	800d804 <find_volume+0x2b0>
 800d7fa:	230d      	movs	r3, #13
 800d7fc:	e0eb      	b.n	800d9d6 <find_volume+0x482>
 800d7fe:	bf00      	nop
 800d800:	200074b8 	.word	0x200074b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d804:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d808:	1ad3      	subs	r3, r2, r3
 800d80a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d80c:	8952      	ldrh	r2, [r2, #10]
 800d80e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d812:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d816:	2b00      	cmp	r3, #0
 800d818:	d101      	bne.n	800d81e <find_volume+0x2ca>
 800d81a:	230d      	movs	r3, #13
 800d81c:	e0db      	b.n	800d9d6 <find_volume+0x482>
		fmt = FS_FAT32;
 800d81e:	2303      	movs	r3, #3
 800d820:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d826:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d802      	bhi.n	800d834 <find_volume+0x2e0>
 800d82e:	2302      	movs	r3, #2
 800d830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d836:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d802      	bhi.n	800d844 <find_volume+0x2f0>
 800d83e:	2301      	movs	r3, #1
 800d840:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d846:	1c9a      	adds	r2, r3, #2
 800d848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d850:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d852:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d856:	441a      	add	r2, r3
 800d858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d85a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d85c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d860:	441a      	add	r2, r3
 800d862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d864:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d866:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d11e      	bne.n	800d8ac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d870:	3330      	adds	r3, #48	; 0x30
 800d872:	332a      	adds	r3, #42	; 0x2a
 800d874:	4618      	mov	r0, r3
 800d876:	f7fe fc4f 	bl	800c118 <ld_word>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <find_volume+0x330>
 800d880:	230d      	movs	r3, #13
 800d882:	e0a8      	b.n	800d9d6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d886:	891b      	ldrh	r3, [r3, #8]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <find_volume+0x33c>
 800d88c:	230d      	movs	r3, #13
 800d88e:	e0a2      	b.n	800d9d6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d892:	3330      	adds	r3, #48	; 0x30
 800d894:	332c      	adds	r3, #44	; 0x2c
 800d896:	4618      	mov	r0, r3
 800d898:	f7fe fc56 	bl	800c148 <ld_dword>
 800d89c:	4602      	mov	r2, r0
 800d89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	009b      	lsls	r3, r3, #2
 800d8a8:	647b      	str	r3, [r7, #68]	; 0x44
 800d8aa:	e01f      	b.n	800d8ec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ae:	891b      	ldrh	r3, [r3, #8]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <find_volume+0x364>
 800d8b4:	230d      	movs	r3, #13
 800d8b6:	e08e      	b.n	800d9d6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ba:	6a1a      	ldr	r2, [r3, #32]
 800d8bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8be:	441a      	add	r2, r3
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d8c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d103      	bne.n	800d8d4 <find_volume+0x380>
 800d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	005b      	lsls	r3, r3, #1
 800d8d2:	e00a      	b.n	800d8ea <find_volume+0x396>
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d6:	695a      	ldr	r2, [r3, #20]
 800d8d8:	4613      	mov	r3, r2
 800d8da:	005b      	lsls	r3, r3, #1
 800d8dc:	4413      	add	r3, r2
 800d8de:	085a      	lsrs	r2, r3, #1
 800d8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e2:	695b      	ldr	r3, [r3, #20]
 800d8e4:	f003 0301 	and.w	r3, r3, #1
 800d8e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d8ea:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8ee:	699a      	ldr	r2, [r3, #24]
 800d8f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d8f6:	0a5b      	lsrs	r3, r3, #9
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d201      	bcs.n	800d900 <find_volume+0x3ac>
 800d8fc:	230d      	movs	r3, #13
 800d8fe:	e06a      	b.n	800d9d6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d906:	611a      	str	r2, [r3, #16]
 800d908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90a:	691a      	ldr	r2, [r3, #16]
 800d90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d90e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d912:	2280      	movs	r2, #128	; 0x80
 800d914:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d916:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d91a:	2b03      	cmp	r3, #3
 800d91c:	d149      	bne.n	800d9b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d91e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d920:	3330      	adds	r3, #48	; 0x30
 800d922:	3330      	adds	r3, #48	; 0x30
 800d924:	4618      	mov	r0, r3
 800d926:	f7fe fbf7 	bl	800c118 <ld_word>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b01      	cmp	r3, #1
 800d92e:	d140      	bne.n	800d9b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d932:	3301      	adds	r3, #1
 800d934:	4619      	mov	r1, r3
 800d936:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d938:	f7fe fe9e 	bl	800c678 <move_window>
 800d93c:	4603      	mov	r3, r0
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d137      	bne.n	800d9b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d944:	2200      	movs	r2, #0
 800d946:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94a:	3330      	adds	r3, #48	; 0x30
 800d94c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d950:	4618      	mov	r0, r3
 800d952:	f7fe fbe1 	bl	800c118 <ld_word>
 800d956:	4603      	mov	r3, r0
 800d958:	461a      	mov	r2, r3
 800d95a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d95e:	429a      	cmp	r2, r3
 800d960:	d127      	bne.n	800d9b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d964:	3330      	adds	r3, #48	; 0x30
 800d966:	4618      	mov	r0, r3
 800d968:	f7fe fbee 	bl	800c148 <ld_dword>
 800d96c:	4603      	mov	r3, r0
 800d96e:	4a1c      	ldr	r2, [pc, #112]	; (800d9e0 <find_volume+0x48c>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d11e      	bne.n	800d9b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d976:	3330      	adds	r3, #48	; 0x30
 800d978:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7fe fbe3 	bl	800c148 <ld_dword>
 800d982:	4603      	mov	r3, r0
 800d984:	4a17      	ldr	r2, [pc, #92]	; (800d9e4 <find_volume+0x490>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d113      	bne.n	800d9b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98c:	3330      	adds	r3, #48	; 0x30
 800d98e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d992:	4618      	mov	r0, r3
 800d994:	f7fe fbd8 	bl	800c148 <ld_dword>
 800d998:	4602      	mov	r2, r0
 800d99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a0:	3330      	adds	r3, #48	; 0x30
 800d9a2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	f7fe fbce 	bl	800c148 <ld_dword>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d9b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d9ba:	4b0b      	ldr	r3, [pc, #44]	; (800d9e8 <find_volume+0x494>)
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	4b09      	ldr	r3, [pc, #36]	; (800d9e8 <find_volume+0x494>)
 800d9c4:	801a      	strh	r2, [r3, #0]
 800d9c6:	4b08      	ldr	r3, [pc, #32]	; (800d9e8 <find_volume+0x494>)
 800d9c8:	881a      	ldrh	r2, [r3, #0]
 800d9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d9ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d9d0:	f7fe fdea 	bl	800c5a8 <clear_lock>
#endif
	return FR_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3758      	adds	r7, #88	; 0x58
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	41615252 	.word	0x41615252
 800d9e4:	61417272 	.word	0x61417272
 800d9e8:	200074bc 	.word	0x200074bc

0800d9ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d9f6:	2309      	movs	r3, #9
 800d9f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d01c      	beq.n	800da3a <validate+0x4e>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d018      	beq.n	800da3a <validate+0x4e>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d013      	beq.n	800da3a <validate+0x4e>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	889a      	ldrh	r2, [r3, #4]
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	88db      	ldrh	r3, [r3, #6]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d10c      	bne.n	800da3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	785b      	ldrb	r3, [r3, #1]
 800da26:	4618      	mov	r0, r3
 800da28:	f7fe fad8 	bl	800bfdc <disk_status>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f003 0301 	and.w	r3, r3, #1
 800da32:	2b00      	cmp	r3, #0
 800da34:	d101      	bne.n	800da3a <validate+0x4e>
			res = FR_OK;
 800da36:	2300      	movs	r3, #0
 800da38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800da3a:	7bfb      	ldrb	r3, [r7, #15]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d102      	bne.n	800da46 <validate+0x5a>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	e000      	b.n	800da48 <validate+0x5c>
 800da46:	2300      	movs	r3, #0
 800da48:	683a      	ldr	r2, [r7, #0]
 800da4a:	6013      	str	r3, [r2, #0]
	return res;
 800da4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}
	...

0800da58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b088      	sub	sp, #32
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	4613      	mov	r3, r2
 800da64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800da6a:	f107 0310 	add.w	r3, r7, #16
 800da6e:	4618      	mov	r0, r3
 800da70:	f7ff fcd5 	bl	800d41e <get_ldnumber>
 800da74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	da01      	bge.n	800da80 <f_mount+0x28>
 800da7c:	230b      	movs	r3, #11
 800da7e:	e02b      	b.n	800dad8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800da80:	4a17      	ldr	r2, [pc, #92]	; (800dae0 <f_mount+0x88>)
 800da82:	69fb      	ldr	r3, [r7, #28]
 800da84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d005      	beq.n	800da9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800da90:	69b8      	ldr	r0, [r7, #24]
 800da92:	f7fe fd89 	bl	800c5a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	2200      	movs	r2, #0
 800da9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d002      	beq.n	800daa8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2200      	movs	r2, #0
 800daa6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800daa8:	68fa      	ldr	r2, [r7, #12]
 800daaa:	490d      	ldr	r1, [pc, #52]	; (800dae0 <f_mount+0x88>)
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <f_mount+0x66>
 800dab8:	79fb      	ldrb	r3, [r7, #7]
 800daba:	2b01      	cmp	r3, #1
 800dabc:	d001      	beq.n	800dac2 <f_mount+0x6a>
 800dabe:	2300      	movs	r3, #0
 800dac0:	e00a      	b.n	800dad8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dac2:	f107 010c 	add.w	r1, r7, #12
 800dac6:	f107 0308 	add.w	r3, r7, #8
 800daca:	2200      	movs	r2, #0
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff fd41 	bl	800d554 <find_volume>
 800dad2:	4603      	mov	r3, r0
 800dad4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3720      	adds	r7, #32
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	200074b8 	.word	0x200074b8

0800dae4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b098      	sub	sp, #96	; 0x60
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	4613      	mov	r3, r2
 800daf0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d101      	bne.n	800dafc <f_open+0x18>
 800daf8:	2309      	movs	r3, #9
 800dafa:	e1ad      	b.n	800de58 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800dafc:	79fb      	ldrb	r3, [r7, #7]
 800dafe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800db04:	79fa      	ldrb	r2, [r7, #7]
 800db06:	f107 0110 	add.w	r1, r7, #16
 800db0a:	f107 0308 	add.w	r3, r7, #8
 800db0e:	4618      	mov	r0, r3
 800db10:	f7ff fd20 	bl	800d554 <find_volume>
 800db14:	4603      	mov	r3, r0
 800db16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800db1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db1e:	2b00      	cmp	r3, #0
 800db20:	f040 8191 	bne.w	800de46 <f_open+0x362>
		dj.obj.fs = fs;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800db28:	68ba      	ldr	r2, [r7, #8]
 800db2a:	f107 0314 	add.w	r3, r7, #20
 800db2e:	4611      	mov	r1, r2
 800db30:	4618      	mov	r0, r3
 800db32:	f7ff fc03 	bl	800d33c <follow_path>
 800db36:	4603      	mov	r3, r0
 800db38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800db3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db40:	2b00      	cmp	r3, #0
 800db42:	d11a      	bne.n	800db7a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800db44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800db48:	b25b      	sxtb	r3, r3
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	da03      	bge.n	800db56 <f_open+0x72>
				res = FR_INVALID_NAME;
 800db4e:	2306      	movs	r3, #6
 800db50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800db54:	e011      	b.n	800db7a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800db56:	79fb      	ldrb	r3, [r7, #7]
 800db58:	f023 0301 	bic.w	r3, r3, #1
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	bf14      	ite	ne
 800db60:	2301      	movne	r3, #1
 800db62:	2300      	moveq	r3, #0
 800db64:	b2db      	uxtb	r3, r3
 800db66:	461a      	mov	r2, r3
 800db68:	f107 0314 	add.w	r3, r7, #20
 800db6c:	4611      	mov	r1, r2
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fe fbd2 	bl	800c318 <chk_lock>
 800db74:	4603      	mov	r3, r0
 800db76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800db7a:	79fb      	ldrb	r3, [r7, #7]
 800db7c:	f003 031c 	and.w	r3, r3, #28
 800db80:	2b00      	cmp	r3, #0
 800db82:	d07f      	beq.n	800dc84 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800db84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d017      	beq.n	800dbbc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800db8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db90:	2b04      	cmp	r3, #4
 800db92:	d10e      	bne.n	800dbb2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800db94:	f7fe fc1c 	bl	800c3d0 <enq_lock>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d006      	beq.n	800dbac <f_open+0xc8>
 800db9e:	f107 0314 	add.w	r3, r7, #20
 800dba2:	4618      	mov	r0, r3
 800dba4:	f7ff fb03 	bl	800d1ae <dir_register>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	e000      	b.n	800dbae <f_open+0xca>
 800dbac:	2312      	movs	r3, #18
 800dbae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dbb2:	79fb      	ldrb	r3, [r7, #7]
 800dbb4:	f043 0308 	orr.w	r3, r3, #8
 800dbb8:	71fb      	strb	r3, [r7, #7]
 800dbba:	e010      	b.n	800dbde <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dbbc:	7ebb      	ldrb	r3, [r7, #26]
 800dbbe:	f003 0311 	and.w	r3, r3, #17
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d003      	beq.n	800dbce <f_open+0xea>
					res = FR_DENIED;
 800dbc6:	2307      	movs	r3, #7
 800dbc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dbcc:	e007      	b.n	800dbde <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dbce:	79fb      	ldrb	r3, [r7, #7]
 800dbd0:	f003 0304 	and.w	r3, r3, #4
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d002      	beq.n	800dbde <f_open+0xfa>
 800dbd8:	2308      	movs	r3, #8
 800dbda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800dbde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d168      	bne.n	800dcb8 <f_open+0x1d4>
 800dbe6:	79fb      	ldrb	r3, [r7, #7]
 800dbe8:	f003 0308 	and.w	r3, r3, #8
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d063      	beq.n	800dcb8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800dbf0:	f7fd ffa4 	bl	800bb3c <get_fattime>
 800dbf4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800dbf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbf8:	330e      	adds	r3, #14
 800dbfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7fe fae1 	bl	800c1c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800dc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc04:	3316      	adds	r3, #22
 800dc06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7fe fadb 	bl	800c1c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800dc0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc10:	330b      	adds	r3, #11
 800dc12:	2220      	movs	r2, #32
 800dc14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7ff fa32 	bl	800d086 <ld_clust>
 800dc22:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dc24:	693b      	ldr	r3, [r7, #16]
 800dc26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc28:	2200      	movs	r2, #0
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f7ff fa4a 	bl	800d0c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dc30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc32:	331c      	adds	r3, #28
 800dc34:	2100      	movs	r1, #0
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fe fac4 	bl	800c1c4 <st_dword>
					fs->wflag = 1;
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dc42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d037      	beq.n	800dcb8 <f_open+0x1d4>
						dw = fs->winsect;
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800dc4e:	f107 0314 	add.w	r3, r7, #20
 800dc52:	2200      	movs	r2, #0
 800dc54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fe ff5d 	bl	800cb16 <remove_chain>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800dc62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d126      	bne.n	800dcb8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7fe fd02 	bl	800c678 <move_window>
 800dc74:	4603      	mov	r3, r0
 800dc76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dc7e:	3a01      	subs	r2, #1
 800dc80:	60da      	str	r2, [r3, #12]
 800dc82:	e019      	b.n	800dcb8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dc84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d115      	bne.n	800dcb8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dc8c:	7ebb      	ldrb	r3, [r7, #26]
 800dc8e:	f003 0310 	and.w	r3, r3, #16
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d003      	beq.n	800dc9e <f_open+0x1ba>
					res = FR_NO_FILE;
 800dc96:	2304      	movs	r3, #4
 800dc98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dc9c:	e00c      	b.n	800dcb8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dc9e:	79fb      	ldrb	r3, [r7, #7]
 800dca0:	f003 0302 	and.w	r3, r3, #2
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d007      	beq.n	800dcb8 <f_open+0x1d4>
 800dca8:	7ebb      	ldrb	r3, [r7, #26]
 800dcaa:	f003 0301 	and.w	r3, r3, #1
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d002      	beq.n	800dcb8 <f_open+0x1d4>
						res = FR_DENIED;
 800dcb2:	2307      	movs	r3, #7
 800dcb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dcb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d128      	bne.n	800dd12 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dcc0:	79fb      	ldrb	r3, [r7, #7]
 800dcc2:	f003 0308 	and.w	r3, r3, #8
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d003      	beq.n	800dcd2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dcca:	79fb      	ldrb	r3, [r7, #7]
 800dccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dcda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dce0:	79fb      	ldrb	r3, [r7, #7]
 800dce2:	f023 0301 	bic.w	r3, r3, #1
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	bf14      	ite	ne
 800dcea:	2301      	movne	r3, #1
 800dcec:	2300      	moveq	r3, #0
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	f107 0314 	add.w	r3, r7, #20
 800dcf6:	4611      	mov	r1, r2
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f7fe fb8b 	bl	800c414 <inc_lock>
 800dcfe:	4602      	mov	r2, r0
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	691b      	ldr	r3, [r3, #16]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d102      	bne.n	800dd12 <f_open+0x22e>
 800dd0c:	2302      	movs	r3, #2
 800dd0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dd12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f040 8095 	bne.w	800de46 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd20:	4611      	mov	r1, r2
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7ff f9af 	bl	800d086 <ld_clust>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd30:	331c      	adds	r3, #28
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fe fa08 	bl	800c148 <ld_dword>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	2200      	movs	r2, #0
 800dd42:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dd44:	693a      	ldr	r2, [r7, #16]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	88da      	ldrh	r2, [r3, #6]
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	79fa      	ldrb	r2, [r7, #7]
 800dd56:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2200      	movs	r2, #0
 800dd68:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3330      	adds	r3, #48	; 0x30
 800dd6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd72:	2100      	movs	r1, #0
 800dd74:	4618      	mov	r0, r3
 800dd76:	f7fe fa72 	bl	800c25e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dd7a:	79fb      	ldrb	r3, [r7, #7]
 800dd7c:	f003 0320 	and.w	r3, r3, #32
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d060      	beq.n	800de46 <f_open+0x362>
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d05c      	beq.n	800de46 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	68da      	ldr	r2, [r3, #12]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	895b      	ldrh	r3, [r3, #10]
 800dd98:	025b      	lsls	r3, r3, #9
 800dd9a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	689b      	ldr	r3, [r3, #8]
 800dda0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	657b      	str	r3, [r7, #84]	; 0x54
 800dda8:	e016      	b.n	800ddd8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe fd1d 	bl	800c7ee <get_fat>
 800ddb4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ddb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	d802      	bhi.n	800ddc2 <f_open+0x2de>
 800ddbc:	2302      	movs	r3, #2
 800ddbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ddc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddc8:	d102      	bne.n	800ddd0 <f_open+0x2ec>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ddd0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddd4:	1ad3      	subs	r3, r2, r3
 800ddd6:	657b      	str	r3, [r7, #84]	; 0x54
 800ddd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d103      	bne.n	800dde8 <f_open+0x304>
 800dde0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dde2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d8e0      	bhi.n	800ddaa <f_open+0x2c6>
				}
				fp->clust = clst;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ddec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ddee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d127      	bne.n	800de46 <f_open+0x362>
 800ddf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d022      	beq.n	800de46 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800de04:	4618      	mov	r0, r3
 800de06:	f7fe fcd3 	bl	800c7b0 <clust2sect>
 800de0a:	6478      	str	r0, [r7, #68]	; 0x44
 800de0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d103      	bne.n	800de1a <f_open+0x336>
						res = FR_INT_ERR;
 800de12:	2302      	movs	r3, #2
 800de14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800de18:	e015      	b.n	800de46 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800de1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de1c:	0a5a      	lsrs	r2, r3, #9
 800de1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de20:	441a      	add	r2, r3
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	7858      	ldrb	r0, [r3, #1]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	6a1a      	ldr	r2, [r3, #32]
 800de34:	2301      	movs	r3, #1
 800de36:	f7fe f911 	bl	800c05c <disk_read>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d002      	beq.n	800de46 <f_open+0x362>
 800de40:	2301      	movs	r3, #1
 800de42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800de46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d002      	beq.n	800de54 <f_open+0x370>
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2200      	movs	r2, #0
 800de52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800de54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3760      	adds	r7, #96	; 0x60
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}

0800de60 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b08c      	sub	sp, #48	; 0x30
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	2200      	movs	r2, #0
 800de76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f107 0210 	add.w	r2, r7, #16
 800de7e:	4611      	mov	r1, r2
 800de80:	4618      	mov	r0, r3
 800de82:	f7ff fdb3 	bl	800d9ec <validate>
 800de86:	4603      	mov	r3, r0
 800de88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800de8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de90:	2b00      	cmp	r3, #0
 800de92:	d107      	bne.n	800dea4 <f_write+0x44>
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	7d5b      	ldrb	r3, [r3, #21]
 800de98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800de9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d002      	beq.n	800deaa <f_write+0x4a>
 800dea4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dea8:	e14b      	b.n	800e142 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	7d1b      	ldrb	r3, [r3, #20]
 800deae:	f003 0302 	and.w	r3, r3, #2
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d101      	bne.n	800deba <f_write+0x5a>
 800deb6:	2307      	movs	r3, #7
 800deb8:	e143      	b.n	800e142 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	699a      	ldr	r2, [r3, #24]
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	441a      	add	r2, r3
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	699b      	ldr	r3, [r3, #24]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	f080 812d 	bcs.w	800e126 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	699b      	ldr	r3, [r3, #24]
 800ded0:	43db      	mvns	r3, r3
 800ded2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ded4:	e127      	b.n	800e126 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	699b      	ldr	r3, [r3, #24]
 800deda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dede:	2b00      	cmp	r3, #0
 800dee0:	f040 80e3 	bne.w	800e0aa <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	699b      	ldr	r3, [r3, #24]
 800dee8:	0a5b      	lsrs	r3, r3, #9
 800deea:	693a      	ldr	r2, [r7, #16]
 800deec:	8952      	ldrh	r2, [r2, #10]
 800deee:	3a01      	subs	r2, #1
 800def0:	4013      	ands	r3, r2
 800def2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d143      	bne.n	800df82 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	699b      	ldr	r3, [r3, #24]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d10c      	bne.n	800df1c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	689b      	ldr	r3, [r3, #8]
 800df06:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800df08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d11a      	bne.n	800df44 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2100      	movs	r1, #0
 800df12:	4618      	mov	r0, r3
 800df14:	f7fe fe64 	bl	800cbe0 <create_chain>
 800df18:	62b8      	str	r0, [r7, #40]	; 0x28
 800df1a:	e013      	b.n	800df44 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df20:	2b00      	cmp	r3, #0
 800df22:	d007      	beq.n	800df34 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	699b      	ldr	r3, [r3, #24]
 800df28:	4619      	mov	r1, r3
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7fe fef0 	bl	800cd10 <clmt_clust>
 800df30:	62b8      	str	r0, [r7, #40]	; 0x28
 800df32:	e007      	b.n	800df44 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	69db      	ldr	r3, [r3, #28]
 800df3a:	4619      	mov	r1, r3
 800df3c:	4610      	mov	r0, r2
 800df3e:	f7fe fe4f 	bl	800cbe0 <create_chain>
 800df42:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800df44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df46:	2b00      	cmp	r3, #0
 800df48:	f000 80f2 	beq.w	800e130 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800df4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d104      	bne.n	800df5c <f_write+0xfc>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	2202      	movs	r2, #2
 800df56:	755a      	strb	r2, [r3, #21]
 800df58:	2302      	movs	r3, #2
 800df5a:	e0f2      	b.n	800e142 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df62:	d104      	bne.n	800df6e <f_write+0x10e>
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2201      	movs	r2, #1
 800df68:	755a      	strb	r2, [r3, #21]
 800df6a:	2301      	movs	r3, #1
 800df6c:	e0e9      	b.n	800e142 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df72:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	689b      	ldr	r3, [r3, #8]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d102      	bne.n	800df82 <f_write+0x122>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df80:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	7d1b      	ldrb	r3, [r3, #20]
 800df86:	b25b      	sxtb	r3, r3
 800df88:	2b00      	cmp	r3, #0
 800df8a:	da18      	bge.n	800dfbe <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	7858      	ldrb	r0, [r3, #1]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6a1a      	ldr	r2, [r3, #32]
 800df9a:	2301      	movs	r3, #1
 800df9c:	f7fe f87e 	bl	800c09c <disk_write>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d004      	beq.n	800dfb0 <f_write+0x150>
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	755a      	strb	r2, [r3, #21]
 800dfac:	2301      	movs	r3, #1
 800dfae:	e0c8      	b.n	800e142 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	7d1b      	ldrb	r3, [r3, #20]
 800dfb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfb8:	b2da      	uxtb	r2, r3
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	69db      	ldr	r3, [r3, #28]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	4610      	mov	r0, r2
 800dfc8:	f7fe fbf2 	bl	800c7b0 <clust2sect>
 800dfcc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d104      	bne.n	800dfde <f_write+0x17e>
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2202      	movs	r2, #2
 800dfd8:	755a      	strb	r2, [r3, #21]
 800dfda:	2302      	movs	r3, #2
 800dfdc:	e0b1      	b.n	800e142 <f_write+0x2e2>
			sect += csect;
 800dfde:	697a      	ldr	r2, [r7, #20]
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	4413      	add	r3, r2
 800dfe4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	0a5b      	lsrs	r3, r3, #9
 800dfea:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d03c      	beq.n	800e06c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dff2:	69ba      	ldr	r2, [r7, #24]
 800dff4:	6a3b      	ldr	r3, [r7, #32]
 800dff6:	4413      	add	r3, r2
 800dff8:	693a      	ldr	r2, [r7, #16]
 800dffa:	8952      	ldrh	r2, [r2, #10]
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d905      	bls.n	800e00c <f_write+0x1ac>
					cc = fs->csize - csect;
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	895b      	ldrh	r3, [r3, #10]
 800e004:	461a      	mov	r2, r3
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	1ad3      	subs	r3, r2, r3
 800e00a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	7858      	ldrb	r0, [r3, #1]
 800e010:	6a3b      	ldr	r3, [r7, #32]
 800e012:	697a      	ldr	r2, [r7, #20]
 800e014:	69f9      	ldr	r1, [r7, #28]
 800e016:	f7fe f841 	bl	800c09c <disk_write>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d004      	beq.n	800e02a <f_write+0x1ca>
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2201      	movs	r2, #1
 800e024:	755a      	strb	r2, [r3, #21]
 800e026:	2301      	movs	r3, #1
 800e028:	e08b      	b.n	800e142 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6a1a      	ldr	r2, [r3, #32]
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	1ad3      	subs	r3, r2, r3
 800e032:	6a3a      	ldr	r2, [r7, #32]
 800e034:	429a      	cmp	r2, r3
 800e036:	d915      	bls.n	800e064 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6a1a      	ldr	r2, [r3, #32]
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	1ad3      	subs	r3, r2, r3
 800e046:	025b      	lsls	r3, r3, #9
 800e048:	69fa      	ldr	r2, [r7, #28]
 800e04a:	4413      	add	r3, r2
 800e04c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e050:	4619      	mov	r1, r3
 800e052:	f7fe f8e3 	bl	800c21c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	7d1b      	ldrb	r3, [r3, #20]
 800e05a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e05e:	b2da      	uxtb	r2, r3
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e064:	6a3b      	ldr	r3, [r7, #32]
 800e066:	025b      	lsls	r3, r3, #9
 800e068:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e06a:	e03f      	b.n	800e0ec <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	6a1b      	ldr	r3, [r3, #32]
 800e070:	697a      	ldr	r2, [r7, #20]
 800e072:	429a      	cmp	r2, r3
 800e074:	d016      	beq.n	800e0a4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	699a      	ldr	r2, [r3, #24]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e07e:	429a      	cmp	r2, r3
 800e080:	d210      	bcs.n	800e0a4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	7858      	ldrb	r0, [r3, #1]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e08c:	2301      	movs	r3, #1
 800e08e:	697a      	ldr	r2, [r7, #20]
 800e090:	f7fd ffe4 	bl	800c05c <disk_read>
 800e094:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e096:	2b00      	cmp	r3, #0
 800e098:	d004      	beq.n	800e0a4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2201      	movs	r2, #1
 800e09e:	755a      	strb	r2, [r3, #21]
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e04e      	b.n	800e142 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	697a      	ldr	r2, [r7, #20]
 800e0a8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	699b      	ldr	r3, [r3, #24]
 800e0ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0b2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e0b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d901      	bls.n	800e0c4 <f_write+0x264>
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	699b      	ldr	r3, [r3, #24]
 800e0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0d2:	4413      	add	r3, r2
 800e0d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0d6:	69f9      	ldr	r1, [r7, #28]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7fe f89f 	bl	800c21c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	7d1b      	ldrb	r3, [r3, #20]
 800e0e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e0e6:	b2da      	uxtb	r2, r3
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e0ec:	69fa      	ldr	r2, [r7, #28]
 800e0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f0:	4413      	add	r3, r2
 800e0f2:	61fb      	str	r3, [r7, #28]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	699a      	ldr	r2, [r3, #24]
 800e0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fa:	441a      	add	r2, r3
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	619a      	str	r2, [r3, #24]
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	68da      	ldr	r2, [r3, #12]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	429a      	cmp	r2, r3
 800e10a:	bf38      	it	cc
 800e10c:	461a      	movcc	r2, r3
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	60da      	str	r2, [r3, #12]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e118:	441a      	add	r2, r3
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	601a      	str	r2, [r3, #0]
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	1ad3      	subs	r3, r2, r3
 800e124:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	f47f aed4 	bne.w	800ded6 <f_write+0x76>
 800e12e:	e000      	b.n	800e132 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e130:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	7d1b      	ldrb	r3, [r3, #20]
 800e136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e13a:	b2da      	uxtb	r2, r3
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e140:	2300      	movs	r3, #0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3730      	adds	r7, #48	; 0x30
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b086      	sub	sp, #24
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f107 0208 	add.w	r2, r7, #8
 800e158:	4611      	mov	r1, r2
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7ff fc46 	bl	800d9ec <validate>
 800e160:	4603      	mov	r3, r0
 800e162:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e164:	7dfb      	ldrb	r3, [r7, #23]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d168      	bne.n	800e23c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	7d1b      	ldrb	r3, [r3, #20]
 800e16e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e172:	2b00      	cmp	r3, #0
 800e174:	d062      	beq.n	800e23c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	7d1b      	ldrb	r3, [r3, #20]
 800e17a:	b25b      	sxtb	r3, r3
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	da15      	bge.n	800e1ac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	7858      	ldrb	r0, [r3, #1]
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	6a1a      	ldr	r2, [r3, #32]
 800e18e:	2301      	movs	r3, #1
 800e190:	f7fd ff84 	bl	800c09c <disk_write>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <f_sync+0x54>
 800e19a:	2301      	movs	r3, #1
 800e19c:	e04f      	b.n	800e23e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	7d1b      	ldrb	r3, [r3, #20]
 800e1a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1a6:	b2da      	uxtb	r2, r3
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e1ac:	f7fd fcc6 	bl	800bb3c <get_fattime>
 800e1b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e1b2:	68ba      	ldr	r2, [r7, #8]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	4610      	mov	r0, r2
 800e1bc:	f7fe fa5c 	bl	800c678 <move_window>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e1c4:	7dfb      	ldrb	r3, [r7, #23]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d138      	bne.n	800e23c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	330b      	adds	r3, #11
 800e1d4:	781a      	ldrb	r2, [r3, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	330b      	adds	r3, #11
 800e1da:	f042 0220 	orr.w	r2, r2, #32
 800e1de:	b2d2      	uxtb	r2, r2
 800e1e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6818      	ldr	r0, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	689b      	ldr	r3, [r3, #8]
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	68f9      	ldr	r1, [r7, #12]
 800e1ee:	f7fe ff69 	bl	800d0c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f103 021c 	add.w	r2, r3, #28
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	68db      	ldr	r3, [r3, #12]
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	4610      	mov	r0, r2
 800e200:	f7fd ffe0 	bl	800c1c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	3316      	adds	r3, #22
 800e208:	6939      	ldr	r1, [r7, #16]
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fd ffda 	bl	800c1c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	3312      	adds	r3, #18
 800e214:	2100      	movs	r1, #0
 800e216:	4618      	mov	r0, r3
 800e218:	f7fd ffb9 	bl	800c18e <st_word>
					fs->wflag = 1;
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	2201      	movs	r2, #1
 800e220:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	4618      	mov	r0, r3
 800e226:	f7fe fa55 	bl	800c6d4 <sync_fs>
 800e22a:	4603      	mov	r3, r0
 800e22c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	7d1b      	ldrb	r3, [r3, #20]
 800e232:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e236:	b2da      	uxtb	r2, r3
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3718      	adds	r7, #24
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b084      	sub	sp, #16
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7ff ff7b 	bl	800e14a <f_sync>
 800e254:	4603      	mov	r3, r0
 800e256:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e258:	7bfb      	ldrb	r3, [r7, #15]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d118      	bne.n	800e290 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f107 0208 	add.w	r2, r7, #8
 800e264:	4611      	mov	r1, r2
 800e266:	4618      	mov	r0, r3
 800e268:	f7ff fbc0 	bl	800d9ec <validate>
 800e26c:	4603      	mov	r3, r0
 800e26e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e270:	7bfb      	ldrb	r3, [r7, #15]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10c      	bne.n	800e290 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	691b      	ldr	r3, [r3, #16]
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fe f958 	bl	800c530 <dec_lock>
 800e280:	4603      	mov	r3, r0
 800e282:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e284:	7bfb      	ldrb	r3, [r7, #15]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d102      	bne.n	800e290 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	2200      	movs	r2, #0
 800e28e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e290:	7bfb      	ldrb	r3, [r7, #15]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3710      	adds	r7, #16
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
	...

0800e29c <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800e29c:	b590      	push	{r4, r7, lr}
 800e29e:	b09d      	sub	sp, #116	; 0x74
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	607a      	str	r2, [r7, #4]
 800e2a6:	603b      	str	r3, [r7, #0]
 800e2a8:	460b      	mov	r3, r1
 800e2aa:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800e2b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e2b4:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800e2b6:	f107 030c 	add.w	r3, r7, #12
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7ff f8af 	bl	800d41e <get_ldnumber>
 800e2c0:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	da02      	bge.n	800e2ce <f_mkfs+0x32>
 800e2c8:	230b      	movs	r3, #11
 800e2ca:	f000 bc0d 	b.w	800eae8 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800e2ce:	4a94      	ldr	r2, [pc, #592]	; (800e520 <f_mkfs+0x284>)
 800e2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d005      	beq.n	800e2e6 <f_mkfs+0x4a>
 800e2da:	4a91      	ldr	r2, [pc, #580]	; (800e520 <f_mkfs+0x284>)
 800e2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800e2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2e8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800e2f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7fd fe8a 	bl	800c010 <disk_initialize>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800e302:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e306:	f003 0301 	and.w	r3, r3, #1
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d001      	beq.n	800e312 <f_mkfs+0x76>
 800e30e:	2303      	movs	r3, #3
 800e310:	e3ea      	b.n	800eae8 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800e312:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800e316:	f003 0304 	and.w	r3, r3, #4
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d001      	beq.n	800e322 <f_mkfs+0x86>
 800e31e:	230a      	movs	r3, #10
 800e320:	e3e2      	b.n	800eae8 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800e322:	f107 0214 	add.w	r2, r7, #20
 800e326:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e32a:	2103      	movs	r1, #3
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fd fed5 	bl	800c0dc <disk_ioctl>
 800e332:	4603      	mov	r3, r0
 800e334:	2b00      	cmp	r3, #0
 800e336:	d10c      	bne.n	800e352 <f_mkfs+0xb6>
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d009      	beq.n	800e352 <f_mkfs+0xb6>
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e344:	d805      	bhi.n	800e352 <f_mkfs+0xb6>
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	1e5a      	subs	r2, r3, #1
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	4013      	ands	r3, r2
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d001      	beq.n	800e356 <f_mkfs+0xba>
 800e352:	2301      	movs	r3, #1
 800e354:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800e356:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e35a:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <f_mkfs+0xce>
 800e362:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	429a      	cmp	r2, r3
 800e368:	d309      	bcc.n	800e37e <f_mkfs+0xe2>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e370:	d805      	bhi.n	800e37e <f_mkfs+0xe2>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	1e5a      	subs	r2, r3, #1
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4013      	ands	r3, r2
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d001      	beq.n	800e382 <f_mkfs+0xe6>
 800e37e:	2313      	movs	r3, #19
 800e380:	e3b2      	b.n	800eae8 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800e382:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	fbb2 f3f3 	udiv	r3, r2, r3
 800e38a:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800e390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e392:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e396:	fbb2 f3f3 	udiv	r3, r2, r3
 800e39a:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800e39c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a0:	fb02 f303 	mul.w	r3, r2, r3
 800e3a4:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800e3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d101      	bne.n	800e3b0 <f_mkfs+0x114>
 800e3ac:	230e      	movs	r3, #14
 800e3ae:	e39b      	b.n	800eae8 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800e3b0:	f107 0210 	add.w	r2, r7, #16
 800e3b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e3b8:	2101      	movs	r1, #1
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7fd fe8e 	bl	800c0dc <disk_ioctl>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d001      	beq.n	800e3ca <f_mkfs+0x12e>
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e38e      	b.n	800eae8 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800e3ca:	7afb      	ldrb	r3, [r7, #11]
 800e3cc:	f003 0308 	and.w	r3, r3, #8
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d001      	beq.n	800e3d8 <f_mkfs+0x13c>
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	e000      	b.n	800e3da <f_mkfs+0x13e>
 800e3d8:	233f      	movs	r3, #63	; 0x3f
 800e3da:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d901      	bls.n	800e3e8 <f_mkfs+0x14c>
 800e3e4:	230e      	movs	r3, #14
 800e3e6:	e37f      	b.n	800eae8 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ec:	1ad3      	subs	r3, r2, r3
 800e3ee:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	2b7f      	cmp	r3, #127	; 0x7f
 800e3f4:	d801      	bhi.n	800e3fa <f_mkfs+0x15e>
 800e3f6:	230e      	movs	r3, #14
 800e3f8:	e376      	b.n	800eae8 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2b80      	cmp	r3, #128	; 0x80
 800e3fe:	d901      	bls.n	800e404 <f_mkfs+0x168>
 800e400:	2313      	movs	r3, #19
 800e402:	e371      	b.n	800eae8 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800e404:	7afb      	ldrb	r3, [r7, #11]
 800e406:	f003 0302 	and.w	r3, r3, #2
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00d      	beq.n	800e42a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800e40e:	7afb      	ldrb	r3, [r7, #11]
 800e410:	f003 0307 	and.w	r3, r3, #7
 800e414:	2b02      	cmp	r3, #2
 800e416:	d004      	beq.n	800e422 <f_mkfs+0x186>
 800e418:	7afb      	ldrb	r3, [r7, #11]
 800e41a:	f003 0301 	and.w	r3, r3, #1
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d103      	bne.n	800e42a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800e422:	2303      	movs	r3, #3
 800e424:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e428:	e009      	b.n	800e43e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800e42a:	7afb      	ldrb	r3, [r7, #11]
 800e42c:	f003 0301 	and.w	r3, r3, #1
 800e430:	2b00      	cmp	r3, #0
 800e432:	d101      	bne.n	800e438 <f_mkfs+0x19c>
 800e434:	2313      	movs	r3, #19
 800e436:	e357      	b.n	800eae8 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800e438:	2302      	movs	r3, #2
 800e43a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800e442:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e446:	2b03      	cmp	r3, #3
 800e448:	d13c      	bne.n	800e4c4 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800e44a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d11b      	bne.n	800e488 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	0c5b      	lsrs	r3, r3, #17
 800e454:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e456:	2300      	movs	r3, #0
 800e458:	64bb      	str	r3, [r7, #72]	; 0x48
 800e45a:	2301      	movs	r3, #1
 800e45c:	653b      	str	r3, [r7, #80]	; 0x50
 800e45e:	e005      	b.n	800e46c <f_mkfs+0x1d0>
 800e460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e462:	3301      	adds	r3, #1
 800e464:	64bb      	str	r3, [r7, #72]	; 0x48
 800e466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e468:	005b      	lsls	r3, r3, #1
 800e46a:	653b      	str	r3, [r7, #80]	; 0x50
 800e46c:	4a2d      	ldr	r2, [pc, #180]	; (800e524 <f_mkfs+0x288>)
 800e46e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e470:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d007      	beq.n	800e488 <f_mkfs+0x1ec>
 800e478:	4a2a      	ldr	r2, [pc, #168]	; (800e524 <f_mkfs+0x288>)
 800e47a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e47c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e480:	461a      	mov	r2, r3
 800e482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e484:	4293      	cmp	r3, r2
 800e486:	d2eb      	bcs.n	800e460 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800e488:	693a      	ldr	r2, [r7, #16]
 800e48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e490:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800e492:	6a3b      	ldr	r3, [r7, #32]
 800e494:	3302      	adds	r3, #2
 800e496:	009a      	lsls	r2, r3, #2
 800e498:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e49a:	4413      	add	r3, r2
 800e49c:	1e5a      	subs	r2, r3, #1
 800e49e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e4a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4a4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800e4a6:	2320      	movs	r3, #32
 800e4a8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800e4ae:	6a3b      	ldr	r3, [r7, #32]
 800e4b0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d903      	bls.n	800e4c0 <f_mkfs+0x224>
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
 800e4ba:	4a1b      	ldr	r2, [pc, #108]	; (800e528 <f_mkfs+0x28c>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d952      	bls.n	800e566 <f_mkfs+0x2ca>
 800e4c0:	230e      	movs	r3, #14
 800e4c2:	e311      	b.n	800eae8 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800e4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d11b      	bne.n	800e502 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800e4ca:	693b      	ldr	r3, [r7, #16]
 800e4cc:	0b1b      	lsrs	r3, r3, #12
 800e4ce:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	653b      	str	r3, [r7, #80]	; 0x50
 800e4d8:	e005      	b.n	800e4e6 <f_mkfs+0x24a>
 800e4da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4dc:	3301      	adds	r3, #1
 800e4de:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4e2:	005b      	lsls	r3, r3, #1
 800e4e4:	653b      	str	r3, [r7, #80]	; 0x50
 800e4e6:	4a11      	ldr	r2, [pc, #68]	; (800e52c <f_mkfs+0x290>)
 800e4e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d007      	beq.n	800e502 <f_mkfs+0x266>
 800e4f2:	4a0e      	ldr	r2, [pc, #56]	; (800e52c <f_mkfs+0x290>)
 800e4f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e4fa:	461a      	mov	r2, r3
 800e4fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d2eb      	bcs.n	800e4da <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800e502:	693a      	ldr	r2, [r7, #16]
 800e504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e506:	fbb2 f3f3 	udiv	r3, r2, r3
 800e50a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800e50c:	6a3b      	ldr	r3, [r7, #32]
 800e50e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e512:	4293      	cmp	r3, r2
 800e514:	d90c      	bls.n	800e530 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800e516:	6a3b      	ldr	r3, [r7, #32]
 800e518:	3302      	adds	r3, #2
 800e51a:	005b      	lsls	r3, r3, #1
 800e51c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e51e:	e012      	b.n	800e546 <f_mkfs+0x2aa>
 800e520:	200074b8 	.word	0x200074b8
 800e524:	0800ed5c 	.word	0x0800ed5c
 800e528:	0ffffff5 	.word	0x0ffffff5
 800e52c:	0800ed6c 	.word	0x0800ed6c
				} else {
					fmt = FS_FAT12;
 800e530:	2301      	movs	r3, #1
 800e532:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800e536:	6a3a      	ldr	r2, [r7, #32]
 800e538:	4613      	mov	r3, r2
 800e53a:	005b      	lsls	r3, r3, #1
 800e53c:	4413      	add	r3, r2
 800e53e:	3301      	adds	r3, #1
 800e540:	085b      	lsrs	r3, r3, #1
 800e542:	3303      	adds	r3, #3
 800e544:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800e546:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e54a:	4413      	add	r3, r2
 800e54c:	1e5a      	subs	r2, r3, #1
 800e54e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e550:	fbb2 f3f3 	udiv	r3, r2, r3
 800e554:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800e556:	2301      	movs	r3, #1
 800e558:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800e55a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e55c:	015a      	lsls	r2, r3, #5
 800e55e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e560:	fbb2 f3f3 	udiv	r3, r2, r3
 800e564:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800e566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e56a:	4413      	add	r3, r2
 800e56c:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800e56e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e572:	fb03 f202 	mul.w	r2, r3, r2
 800e576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e578:	4413      	add	r3, r2
 800e57a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e57c:	4413      	add	r3, r2
 800e57e:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800e580:	697a      	ldr	r2, [r7, #20]
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	4413      	add	r3, r2
 800e586:	1e5a      	subs	r2, r3, #1
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	425b      	negs	r3, r3
 800e58c:	401a      	ands	r2, r3
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800e594:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e598:	2b03      	cmp	r3, #3
 800e59a:	d108      	bne.n	800e5ae <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800e59c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e59e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5a0:	4413      	add	r3, r2
 800e5a2:	657b      	str	r3, [r7, #84]	; 0x54
 800e5a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e5a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e5a8:	4413      	add	r3, r2
 800e5aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800e5ac:	e006      	b.n	800e5bc <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800e5ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e5b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e5b8:	4413      	add	r3, r2
 800e5ba:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800e5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5be:	011a      	lsls	r2, r3, #4
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	441a      	add	r2, r3
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	1ad2      	subs	r2, r2, r3
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d901      	bls.n	800e5d2 <f_mkfs+0x336>
 800e5ce:	230e      	movs	r3, #14
 800e5d0:	e28a      	b.n	800eae8 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800e5d2:	693a      	ldr	r2, [r7, #16]
 800e5d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5d6:	1ad2      	subs	r2, r2, r3
 800e5d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e5da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5dc:	fb01 f303 	mul.w	r3, r1, r3
 800e5e0:	1ad2      	subs	r2, r2, r3
 800e5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5e4:	1ad2      	subs	r2, r2, r3
 800e5e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5ec:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800e5ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e5f2:	2b03      	cmp	r3, #3
 800e5f4:	d10f      	bne.n	800e616 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800e5f6:	6a3b      	ldr	r3, [r7, #32]
 800e5f8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d80a      	bhi.n	800e616 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d105      	bne.n	800e612 <f_mkfs+0x376>
 800e606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e608:	085b      	lsrs	r3, r3, #1
 800e60a:	607b      	str	r3, [r7, #4]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d144      	bne.n	800e69c <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800e612:	230e      	movs	r3, #14
 800e614:	e268      	b.n	800eae8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800e616:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e61a:	2b02      	cmp	r3, #2
 800e61c:	d133      	bne.n	800e686 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800e61e:	6a3b      	ldr	r3, [r7, #32]
 800e620:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e624:	4293      	cmp	r3, r2
 800e626:	d91e      	bls.n	800e666 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d107      	bne.n	800e63e <f_mkfs+0x3a2>
 800e62e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e630:	005b      	lsls	r3, r3, #1
 800e632:	2b40      	cmp	r3, #64	; 0x40
 800e634:	d803      	bhi.n	800e63e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800e636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e638:	005b      	lsls	r3, r3, #1
 800e63a:	607b      	str	r3, [r7, #4]
 800e63c:	e033      	b.n	800e6a6 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800e63e:	7afb      	ldrb	r3, [r7, #11]
 800e640:	f003 0302 	and.w	r3, r3, #2
 800e644:	2b00      	cmp	r3, #0
 800e646:	d003      	beq.n	800e650 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800e648:	2303      	movs	r3, #3
 800e64a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e64e:	e02a      	b.n	800e6a6 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d105      	bne.n	800e662 <f_mkfs+0x3c6>
 800e656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e658:	005b      	lsls	r3, r3, #1
 800e65a:	607b      	str	r3, [r7, #4]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2b80      	cmp	r3, #128	; 0x80
 800e660:	d91e      	bls.n	800e6a0 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800e662:	230e      	movs	r3, #14
 800e664:	e240      	b.n	800eae8 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800e666:	6a3b      	ldr	r3, [r7, #32]
 800e668:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e66c:	4293      	cmp	r3, r2
 800e66e:	d80a      	bhi.n	800e686 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d105      	bne.n	800e682 <f_mkfs+0x3e6>
 800e676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e678:	005b      	lsls	r3, r3, #1
 800e67a:	607b      	str	r3, [r7, #4]
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2b80      	cmp	r3, #128	; 0x80
 800e680:	d910      	bls.n	800e6a4 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800e682:	230e      	movs	r3, #14
 800e684:	e230      	b.n	800eae8 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800e686:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d10c      	bne.n	800e6a8 <f_mkfs+0x40c>
 800e68e:	6a3b      	ldr	r3, [r7, #32]
 800e690:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e694:	4293      	cmp	r3, r2
 800e696:	d907      	bls.n	800e6a8 <f_mkfs+0x40c>
 800e698:	230e      	movs	r3, #14
 800e69a:	e225      	b.n	800eae8 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800e69c:	bf00      	nop
 800e69e:	e6ce      	b.n	800e43e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e6a0:	bf00      	nop
 800e6a2:	e6cc      	b.n	800e43e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800e6a4:	bf00      	nop
			pau = au;
 800e6a6:	e6ca      	b.n	800e43e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800e6a8:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800e6aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	2100      	movs	r1, #0
 800e6b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6b2:	f7fd fdd4 	bl	800c25e <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800e6b6:	220b      	movs	r2, #11
 800e6b8:	49b2      	ldr	r1, [pc, #712]	; (800e984 <f_mkfs+0x6e8>)
 800e6ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6bc:	f7fd fdae 	bl	800c21c <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c2:	330b      	adds	r3, #11
 800e6c4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e6c6:	4611      	mov	r1, r2
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f7fd fd60 	bl	800c18e <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800e6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6d0:	330d      	adds	r3, #13
 800e6d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e6d4:	b2d2      	uxtb	r2, r2
 800e6d6:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800e6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6da:	330e      	adds	r3, #14
 800e6dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e6de:	b292      	uxth	r2, r2
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7fd fd53 	bl	800c18e <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800e6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ea:	3310      	adds	r3, #16
 800e6ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6ee:	b2d2      	uxtb	r2, r2
 800e6f0:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800e6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f4:	f103 0211 	add.w	r2, r3, #17
 800e6f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e6fc:	2b03      	cmp	r3, #3
 800e6fe:	d002      	beq.n	800e706 <f_mkfs+0x46a>
 800e700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e702:	b29b      	uxth	r3, r3
 800e704:	e000      	b.n	800e708 <f_mkfs+0x46c>
 800e706:	2300      	movs	r3, #0
 800e708:	4619      	mov	r1, r3
 800e70a:	4610      	mov	r0, r2
 800e70c:	f7fd fd3f 	bl	800c18e <st_word>
		if (sz_vol < 0x10000) {
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e716:	d208      	bcs.n	800e72a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800e718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71a:	3313      	adds	r3, #19
 800e71c:	693a      	ldr	r2, [r7, #16]
 800e71e:	b292      	uxth	r2, r2
 800e720:	4611      	mov	r1, r2
 800e722:	4618      	mov	r0, r3
 800e724:	f7fd fd33 	bl	800c18e <st_word>
 800e728:	e006      	b.n	800e738 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800e72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e72c:	3320      	adds	r3, #32
 800e72e:	693a      	ldr	r2, [r7, #16]
 800e730:	4611      	mov	r1, r2
 800e732:	4618      	mov	r0, r3
 800e734:	f7fd fd46 	bl	800c1c4 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800e738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e73a:	3315      	adds	r3, #21
 800e73c:	22f8      	movs	r2, #248	; 0xf8
 800e73e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800e740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e742:	3318      	adds	r3, #24
 800e744:	213f      	movs	r1, #63	; 0x3f
 800e746:	4618      	mov	r0, r3
 800e748:	f7fd fd21 	bl	800c18e <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800e74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74e:	331a      	adds	r3, #26
 800e750:	21ff      	movs	r1, #255	; 0xff
 800e752:	4618      	mov	r0, r3
 800e754:	f7fd fd1b 	bl	800c18e <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800e758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e75a:	331c      	adds	r3, #28
 800e75c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e75e:	4618      	mov	r0, r3
 800e760:	f7fd fd30 	bl	800c1c4 <st_dword>
		if (fmt == FS_FAT32) {
 800e764:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e768:	2b03      	cmp	r3, #3
 800e76a:	d131      	bne.n	800e7d0 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800e76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76e:	f103 0443 	add.w	r4, r3, #67	; 0x43
 800e772:	f7fd f9e3 	bl	800bb3c <get_fattime>
 800e776:	4603      	mov	r3, r0
 800e778:	4619      	mov	r1, r3
 800e77a:	4620      	mov	r0, r4
 800e77c:	f7fd fd22 	bl	800c1c4 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800e780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e782:	3324      	adds	r3, #36	; 0x24
 800e784:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e786:	4618      	mov	r0, r3
 800e788:	f7fd fd1c 	bl	800c1c4 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800e78c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e78e:	332c      	adds	r3, #44	; 0x2c
 800e790:	2102      	movs	r1, #2
 800e792:	4618      	mov	r0, r3
 800e794:	f7fd fd16 	bl	800c1c4 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800e798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79a:	3330      	adds	r3, #48	; 0x30
 800e79c:	2101      	movs	r1, #1
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f7fd fcf5 	bl	800c18e <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800e7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a6:	3332      	adds	r3, #50	; 0x32
 800e7a8:	2106      	movs	r1, #6
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fd fcef 	bl	800c18e <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800e7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7b2:	3340      	adds	r3, #64	; 0x40
 800e7b4:	2280      	movs	r2, #128	; 0x80
 800e7b6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800e7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ba:	3342      	adds	r3, #66	; 0x42
 800e7bc:	2229      	movs	r2, #41	; 0x29
 800e7be:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800e7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c2:	3347      	adds	r3, #71	; 0x47
 800e7c4:	2213      	movs	r2, #19
 800e7c6:	4970      	ldr	r1, [pc, #448]	; (800e988 <f_mkfs+0x6ec>)
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7fd fd27 	bl	800c21c <mem_cpy>
 800e7ce:	e020      	b.n	800e812 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800e7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d2:	f103 0427 	add.w	r4, r3, #39	; 0x27
 800e7d6:	f7fd f9b1 	bl	800bb3c <get_fattime>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	4619      	mov	r1, r3
 800e7de:	4620      	mov	r0, r4
 800e7e0:	f7fd fcf0 	bl	800c1c4 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	3316      	adds	r3, #22
 800e7e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e7ea:	b292      	uxth	r2, r2
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fd fccd 	bl	800c18e <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f6:	3324      	adds	r3, #36	; 0x24
 800e7f8:	2280      	movs	r2, #128	; 0x80
 800e7fa:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800e7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fe:	3326      	adds	r3, #38	; 0x26
 800e800:	2229      	movs	r2, #41	; 0x29
 800e802:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800e804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e806:	332b      	adds	r3, #43	; 0x2b
 800e808:	2213      	movs	r2, #19
 800e80a:	4960      	ldr	r1, [pc, #384]	; (800e98c <f_mkfs+0x6f0>)
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7fd fd05 	bl	800c21c <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800e812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e814:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e818:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7fd fcb6 	bl	800c18e <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800e822:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e826:	2301      	movs	r3, #1
 800e828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e82a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e82c:	f7fd fc36 	bl	800c09c <disk_write>
 800e830:	4603      	mov	r3, r0
 800e832:	2b00      	cmp	r3, #0
 800e834:	d001      	beq.n	800e83a <f_mkfs+0x59e>
 800e836:	2301      	movs	r3, #1
 800e838:	e156      	b.n	800eae8 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800e83a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e83e:	2b03      	cmp	r3, #3
 800e840:	d140      	bne.n	800e8c4 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	1d9a      	adds	r2, r3, #6
 800e846:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e84a:	2301      	movs	r3, #1
 800e84c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e84e:	f7fd fc25 	bl	800c09c <disk_write>
			mem_set(buf, 0, ss);
 800e852:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e854:	461a      	mov	r2, r3
 800e856:	2100      	movs	r1, #0
 800e858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e85a:	f7fd fd00 	bl	800c25e <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800e85e:	494c      	ldr	r1, [pc, #304]	; (800e990 <f_mkfs+0x6f4>)
 800e860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e862:	f7fd fcaf 	bl	800c1c4 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800e866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e868:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e86c:	4949      	ldr	r1, [pc, #292]	; (800e994 <f_mkfs+0x6f8>)
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fd fca8 	bl	800c1c4 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800e874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e876:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e87a:	6a3b      	ldr	r3, [r7, #32]
 800e87c:	3b01      	subs	r3, #1
 800e87e:	4619      	mov	r1, r3
 800e880:	4610      	mov	r0, r2
 800e882:	f7fd fc9f 	bl	800c1c4 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800e886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e888:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e88c:	2102      	movs	r1, #2
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fd fc98 	bl	800c1c4 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800e894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e896:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e89a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fd fc75 	bl	800c18e <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	1dda      	adds	r2, r3, #7
 800e8a8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8b0:	f7fd fbf4 	bl	800c09c <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	1c5a      	adds	r2, r3, #1
 800e8b8:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e8bc:	2301      	movs	r3, #1
 800e8be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e8c0:	f7fd fbec 	bl	800c09c <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800e8c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8ca:	f7fd fcc8 	bl	800c25e <mem_set>
		sect = b_fat;		/* FAT start sector */
 800e8ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e8d0:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8d6:	e04b      	b.n	800e970 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800e8d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e8dc:	2b03      	cmp	r3, #3
 800e8de:	d113      	bne.n	800e908 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800e8e0:	f06f 0107 	mvn.w	r1, #7
 800e8e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e8e6:	f7fd fc6d 	bl	800c1c4 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800e8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8ec:	3304      	adds	r3, #4
 800e8ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fd fc66 	bl	800c1c4 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800e8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fa:	3308      	adds	r3, #8
 800e8fc:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800e900:	4618      	mov	r0, r3
 800e902:	f7fd fc5f 	bl	800c1c4 <st_dword>
 800e906:	e00b      	b.n	800e920 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800e908:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d101      	bne.n	800e914 <f_mkfs+0x678>
 800e910:	4b21      	ldr	r3, [pc, #132]	; (800e998 <f_mkfs+0x6fc>)
 800e912:	e001      	b.n	800e918 <f_mkfs+0x67c>
 800e914:	f06f 0307 	mvn.w	r3, #7
 800e918:	4619      	mov	r1, r3
 800e91a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e91c:	f7fd fc52 	bl	800c1c4 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800e920:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e922:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800e924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e928:	4293      	cmp	r3, r2
 800e92a:	bf28      	it	cs
 800e92c:	4613      	movcs	r3, r2
 800e92e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e930:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e936:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e938:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e93a:	f7fd fbaf 	bl	800c09c <disk_write>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d001      	beq.n	800e948 <f_mkfs+0x6ac>
 800e944:	2301      	movs	r3, #1
 800e946:	e0cf      	b.n	800eae8 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800e948:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e94a:	461a      	mov	r2, r3
 800e94c:	2100      	movs	r1, #0
 800e94e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e950:	f7fd fc85 	bl	800c25e <mem_set>
				sect += n; nsect -= n;
 800e954:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e958:	4413      	add	r3, r2
 800e95a:	667b      	str	r3, [r7, #100]	; 0x64
 800e95c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e95e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 800e964:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e966:	2b00      	cmp	r3, #0
 800e968:	d1dc      	bne.n	800e924 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800e96a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e96c:	3301      	adds	r3, #1
 800e96e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e974:	429a      	cmp	r2, r3
 800e976:	d3af      	bcc.n	800e8d8 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800e978:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e97c:	2b03      	cmp	r3, #3
 800e97e:	d10d      	bne.n	800e99c <f_mkfs+0x700>
 800e980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e982:	e00c      	b.n	800e99e <f_mkfs+0x702>
 800e984:	0800ec74 	.word	0x0800ec74
 800e988:	0800ec80 	.word	0x0800ec80
 800e98c:	0800ec94 	.word	0x0800ec94
 800e990:	41615252 	.word	0x41615252
 800e994:	61417272 	.word	0x61417272
 800e998:	00fffff8 	.word	0x00fffff8
 800e99c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e99e:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800e9a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a4:	4293      	cmp	r3, r2
 800e9a6:	bf28      	it	cs
 800e9a8:	4613      	movcs	r3, r2
 800e9aa:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800e9ac:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800e9b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e9b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e9b6:	f7fd fb71 	bl	800c09c <disk_write>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <f_mkfs+0x728>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	e091      	b.n	800eae8 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800e9c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e9c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9c8:	4413      	add	r3, r2
 800e9ca:	667b      	str	r3, [r7, #100]	; 0x64
 800e9cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e9ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e9d0:	1ad3      	subs	r3, r2, r3
 800e9d2:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 800e9d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d1e2      	bne.n	800e9a0 <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800e9da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e9de:	2b03      	cmp	r3, #3
 800e9e0:	d103      	bne.n	800e9ea <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800e9e2:	230c      	movs	r3, #12
 800e9e4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800e9e8:	e010      	b.n	800ea0c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9f0:	d303      	bcc.n	800e9fa <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800e9f2:	2306      	movs	r3, #6
 800e9f4:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800e9f8:	e008      	b.n	800ea0c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800e9fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	d101      	bne.n	800ea06 <f_mkfs+0x76a>
 800ea02:	2304      	movs	r3, #4
 800ea04:	e000      	b.n	800ea08 <f_mkfs+0x76c>
 800ea06:	2301      	movs	r3, #1
 800ea08:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800ea0c:	7afb      	ldrb	r3, [r7, #11]
 800ea0e:	f003 0308 	and.w	r3, r3, #8
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d15b      	bne.n	800eace <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800ea16:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ea18:	461a      	mov	r2, r3
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea1e:	f7fd fc1e 	bl	800c25e <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800ea22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea24:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea28:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fd fbae 	bl	800c18e <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ea32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea34:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ea38:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ea40:	69bb      	ldr	r3, [r7, #24]
 800ea42:	3301      	adds	r3, #1
 800ea44:	2201      	movs	r2, #1
 800ea46:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ea48:	69bb      	ldr	r3, [r7, #24]
 800ea4a:	3302      	adds	r3, #2
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	3303      	adds	r3, #3
 800ea54:	2200      	movs	r2, #0
 800ea56:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	3304      	adds	r3, #4
 800ea5c:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800ea60:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ea62:	693a      	ldr	r2, [r7, #16]
 800ea64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea66:	441a      	add	r2, r3
 800ea68:	4b21      	ldr	r3, [pc, #132]	; (800eaf0 <f_mkfs+0x854>)
 800ea6a:	fba3 1302 	umull	r1, r3, r3, r2
 800ea6e:	1ad2      	subs	r2, r2, r3
 800ea70:	0852      	lsrs	r2, r2, #1
 800ea72:	4413      	add	r3, r2
 800ea74:	0b5b      	lsrs	r3, r3, #13
 800ea76:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	3305      	adds	r3, #5
 800ea7c:	22fe      	movs	r2, #254	; 0xfe
 800ea7e:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ea80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea82:	089b      	lsrs	r3, r3, #2
 800ea84:	b2da      	uxtb	r2, r3
 800ea86:	69bb      	ldr	r3, [r7, #24]
 800ea88:	3306      	adds	r3, #6
 800ea8a:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 800ea8e:	b2d2      	uxtb	r2, r2
 800ea90:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	3307      	adds	r3, #7
 800ea96:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ea98:	b2d2      	uxtb	r2, r2
 800ea9a:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	3308      	adds	r3, #8
 800eaa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f7fd fb8e 	bl	800c1c4 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	330c      	adds	r3, #12
 800eaac:	693a      	ldr	r2, [r7, #16]
 800eaae:	4611      	mov	r1, r2
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fd fb87 	bl	800c1c4 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800eab6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 800eaba:	2301      	movs	r3, #1
 800eabc:	2200      	movs	r2, #0
 800eabe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eac0:	f7fd faec 	bl	800c09c <disk_write>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d001      	beq.n	800eace <f_mkfs+0x832>
 800eaca:	2301      	movs	r3, #1
 800eacc:	e00c      	b.n	800eae8 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800eace:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ead2:	2200      	movs	r2, #0
 800ead4:	2100      	movs	r1, #0
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7fd fb00 	bl	800c0dc <disk_ioctl>
 800eadc:	4603      	mov	r3, r0
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d001      	beq.n	800eae6 <f_mkfs+0x84a>
 800eae2:	2301      	movs	r3, #1
 800eae4:	e000      	b.n	800eae8 <f_mkfs+0x84c>

	return FR_OK;
 800eae6:	2300      	movs	r3, #0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3774      	adds	r7, #116	; 0x74
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd90      	pop	{r4, r7, pc}
 800eaf0:	0515565b 	.word	0x0515565b

0800eaf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800eaf4:	b480      	push	{r7}
 800eaf6:	b087      	sub	sp, #28
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	60f8      	str	r0, [r7, #12]
 800eafc:	60b9      	str	r1, [r7, #8]
 800eafe:	4613      	mov	r3, r2
 800eb00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eb02:	2301      	movs	r3, #1
 800eb04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eb06:	2300      	movs	r3, #0
 800eb08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800eb0a:	4b1f      	ldr	r3, [pc, #124]	; (800eb88 <FATFS_LinkDriverEx+0x94>)
 800eb0c:	7a5b      	ldrb	r3, [r3, #9]
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d131      	bne.n	800eb78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800eb14:	4b1c      	ldr	r3, [pc, #112]	; (800eb88 <FATFS_LinkDriverEx+0x94>)
 800eb16:	7a5b      	ldrb	r3, [r3, #9]
 800eb18:	b2db      	uxtb	r3, r3
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	4b1a      	ldr	r3, [pc, #104]	; (800eb88 <FATFS_LinkDriverEx+0x94>)
 800eb1e:	2100      	movs	r1, #0
 800eb20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800eb22:	4b19      	ldr	r3, [pc, #100]	; (800eb88 <FATFS_LinkDriverEx+0x94>)
 800eb24:	7a5b      	ldrb	r3, [r3, #9]
 800eb26:	b2db      	uxtb	r3, r3
 800eb28:	4a17      	ldr	r2, [pc, #92]	; (800eb88 <FATFS_LinkDriverEx+0x94>)
 800eb2a:	009b      	lsls	r3, r3, #2
 800eb2c:	4413      	add	r3, r2
 800eb2e:	68fa      	ldr	r2, [r7, #12]
 800eb30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800eb32:	4b15      	ldr	r3, [pc, #84]	; (800eb88 <FATFS_LinkDriverEx+0x94>)
 800eb34:	7a5b      	ldrb	r3, [r3, #9]
 800eb36:	b2db      	uxtb	r3, r3
 800eb38:	461a      	mov	r2, r3
 800eb3a:	4b13      	ldr	r3, [pc, #76]	; (800eb88 <FATFS_LinkDriverEx+0x94>)
 800eb3c:	4413      	add	r3, r2
 800eb3e:	79fa      	ldrb	r2, [r7, #7]
 800eb40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800eb42:	4b11      	ldr	r3, [pc, #68]	; (800eb88 <FATFS_LinkDriverEx+0x94>)
 800eb44:	7a5b      	ldrb	r3, [r3, #9]
 800eb46:	b2db      	uxtb	r3, r3
 800eb48:	1c5a      	adds	r2, r3, #1
 800eb4a:	b2d1      	uxtb	r1, r2
 800eb4c:	4a0e      	ldr	r2, [pc, #56]	; (800eb88 <FATFS_LinkDriverEx+0x94>)
 800eb4e:	7251      	strb	r1, [r2, #9]
 800eb50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eb52:	7dbb      	ldrb	r3, [r7, #22]
 800eb54:	3330      	adds	r3, #48	; 0x30
 800eb56:	b2da      	uxtb	r2, r3
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	223a      	movs	r2, #58	; 0x3a
 800eb62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	3302      	adds	r3, #2
 800eb68:	222f      	movs	r2, #47	; 0x2f
 800eb6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	3303      	adds	r3, #3
 800eb70:	2200      	movs	r2, #0
 800eb72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eb74:	2300      	movs	r3, #0
 800eb76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eb78:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	371c      	adds	r7, #28
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb84:	4770      	bx	lr
 800eb86:	bf00      	nop
 800eb88:	200074e0 	.word	0x200074e0

0800eb8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
 800eb94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eb96:	2200      	movs	r2, #0
 800eb98:	6839      	ldr	r1, [r7, #0]
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7ff ffaa 	bl	800eaf4 <FATFS_LinkDriverEx>
 800eba0:	4603      	mov	r3, r0
}
 800eba2:	4618      	mov	r0, r3
 800eba4:	3708      	adds	r7, #8
 800eba6:	46bd      	mov	sp, r7
 800eba8:	bd80      	pop	{r7, pc}
	...

0800ebac <__libc_init_array>:
 800ebac:	b570      	push	{r4, r5, r6, lr}
 800ebae:	4d0d      	ldr	r5, [pc, #52]	; (800ebe4 <__libc_init_array+0x38>)
 800ebb0:	4c0d      	ldr	r4, [pc, #52]	; (800ebe8 <__libc_init_array+0x3c>)
 800ebb2:	1b64      	subs	r4, r4, r5
 800ebb4:	10a4      	asrs	r4, r4, #2
 800ebb6:	2600      	movs	r6, #0
 800ebb8:	42a6      	cmp	r6, r4
 800ebba:	d109      	bne.n	800ebd0 <__libc_init_array+0x24>
 800ebbc:	4d0b      	ldr	r5, [pc, #44]	; (800ebec <__libc_init_array+0x40>)
 800ebbe:	4c0c      	ldr	r4, [pc, #48]	; (800ebf0 <__libc_init_array+0x44>)
 800ebc0:	f000 f820 	bl	800ec04 <_init>
 800ebc4:	1b64      	subs	r4, r4, r5
 800ebc6:	10a4      	asrs	r4, r4, #2
 800ebc8:	2600      	movs	r6, #0
 800ebca:	42a6      	cmp	r6, r4
 800ebcc:	d105      	bne.n	800ebda <__libc_init_array+0x2e>
 800ebce:	bd70      	pop	{r4, r5, r6, pc}
 800ebd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebd4:	4798      	blx	r3
 800ebd6:	3601      	adds	r6, #1
 800ebd8:	e7ee      	b.n	800ebb8 <__libc_init_array+0xc>
 800ebda:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebde:	4798      	blx	r3
 800ebe0:	3601      	adds	r6, #1
 800ebe2:	e7f2      	b.n	800ebca <__libc_init_array+0x1e>
 800ebe4:	0800ed84 	.word	0x0800ed84
 800ebe8:	0800ed84 	.word	0x0800ed84
 800ebec:	0800ed84 	.word	0x0800ed84
 800ebf0:	0800ed88 	.word	0x0800ed88

0800ebf4 <memset>:
 800ebf4:	4402      	add	r2, r0
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	d100      	bne.n	800ebfe <memset+0xa>
 800ebfc:	4770      	bx	lr
 800ebfe:	f803 1b01 	strb.w	r1, [r3], #1
 800ec02:	e7f9      	b.n	800ebf8 <memset+0x4>

0800ec04 <_init>:
 800ec04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec06:	bf00      	nop
 800ec08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec0a:	bc08      	pop	{r3}
 800ec0c:	469e      	mov	lr, r3
 800ec0e:	4770      	bx	lr

0800ec10 <_fini>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	bf00      	nop
 800ec14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec16:	bc08      	pop	{r3}
 800ec18:	469e      	mov	lr, r3
 800ec1a:	4770      	bx	lr
