
Microphone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b198  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800b390  0800b390  0001b390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3c4  0800b3c4  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3c4  0800b3c4  0001b3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3cc  0800b3cc  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3cc  0800b3cc  0001b3cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3d0  0800b3d0  0001b3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  0800b3d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000065b8  20000040  0800b414  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200065f8  0800b414  000265f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   000208ab  00000000  00000000  0002006e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d96  00000000  00000000  00040919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  000446b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  00045fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003391e  00000000  00000000  00047790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020e4b  00000000  00000000  0007b0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00132855  00000000  00000000  0009bef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ce74e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069fc  00000000  00000000  001ce7a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000040 	.word	0x20000040
 8000214:	00000000 	.word	0x00000000
 8000218:	0800b378 	.word	0x0800b378

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000044 	.word	0x20000044
 8000234:	0800b378 	.word	0x0800b378

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b974 	b.w	8000538 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468e      	mov	lr, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14d      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d969      	bls.n	8000350 <__udivmoddi4+0xe8>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b152      	cbz	r2, 8000298 <__udivmoddi4+0x30>
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	f1c2 0120 	rsb	r1, r2, #32
 800028a:	fa20 f101 	lsr.w	r1, r0, r1
 800028e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000292:	ea41 0e03 	orr.w	lr, r1, r3
 8000296:	4094      	lsls	r4, r2
 8000298:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029c:	0c21      	lsrs	r1, r4, #16
 800029e:	fbbe f6f8 	udiv	r6, lr, r8
 80002a2:	fa1f f78c 	uxth.w	r7, ip
 80002a6:	fb08 e316 	mls	r3, r8, r6, lr
 80002aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ae:	fb06 f107 	mul.w	r1, r6, r7
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002be:	f080 811f 	bcs.w	8000500 <__udivmoddi4+0x298>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 811c 	bls.w	8000500 <__udivmoddi4+0x298>
 80002c8:	3e02      	subs	r6, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a5b      	subs	r3, r3, r1
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d4:	fb08 3310 	mls	r3, r8, r0, r3
 80002d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002dc:	fb00 f707 	mul.w	r7, r0, r7
 80002e0:	42a7      	cmp	r7, r4
 80002e2:	d90a      	bls.n	80002fa <__udivmoddi4+0x92>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ec:	f080 810a 	bcs.w	8000504 <__udivmoddi4+0x29c>
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	f240 8107 	bls.w	8000504 <__udivmoddi4+0x29c>
 80002f6:	4464      	add	r4, ip
 80002f8:	3802      	subs	r0, #2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	1be4      	subs	r4, r4, r7
 8000300:	2600      	movs	r6, #0
 8000302:	b11d      	cbz	r5, 800030c <__udivmoddi4+0xa4>
 8000304:	40d4      	lsrs	r4, r2
 8000306:	2300      	movs	r3, #0
 8000308:	e9c5 4300 	strd	r4, r3, [r5]
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0xc2>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80ef 	beq.w	80004fa <__udivmoddi4+0x292>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x160>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xd4>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80f9 	bhi.w	800052e <__udivmoddi4+0x2c6>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0303 	sbc.w	r3, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	469e      	mov	lr, r3
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0e0      	beq.n	800030c <__udivmoddi4+0xa4>
 800034a:	e9c5 4e00 	strd	r4, lr, [r5]
 800034e:	e7dd      	b.n	800030c <__udivmoddi4+0xa4>
 8000350:	b902      	cbnz	r2, 8000354 <__udivmoddi4+0xec>
 8000352:	deff      	udf	#255	; 0xff
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	2a00      	cmp	r2, #0
 800035a:	f040 8092 	bne.w	8000482 <__udivmoddi4+0x21a>
 800035e:	eba1 010c 	sub.w	r1, r1, ip
 8000362:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000366:	fa1f fe8c 	uxth.w	lr, ip
 800036a:	2601      	movs	r6, #1
 800036c:	0c20      	lsrs	r0, r4, #16
 800036e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000372:	fb07 1113 	mls	r1, r7, r3, r1
 8000376:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037a:	fb0e f003 	mul.w	r0, lr, r3
 800037e:	4288      	cmp	r0, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x12c>
 8000382:	eb1c 0101 	adds.w	r1, ip, r1
 8000386:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x12a>
 800038c:	4288      	cmp	r0, r1
 800038e:	f200 80cb 	bhi.w	8000528 <__udivmoddi4+0x2c0>
 8000392:	4643      	mov	r3, r8
 8000394:	1a09      	subs	r1, r1, r0
 8000396:	b2a4      	uxth	r4, r4
 8000398:	fbb1 f0f7 	udiv	r0, r1, r7
 800039c:	fb07 1110 	mls	r1, r7, r0, r1
 80003a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a4:	fb0e fe00 	mul.w	lr, lr, r0
 80003a8:	45a6      	cmp	lr, r4
 80003aa:	d908      	bls.n	80003be <__udivmoddi4+0x156>
 80003ac:	eb1c 0404 	adds.w	r4, ip, r4
 80003b0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x154>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f200 80bb 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003bc:	4608      	mov	r0, r1
 80003be:	eba4 040e 	sub.w	r4, r4, lr
 80003c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003c6:	e79c      	b.n	8000302 <__udivmoddi4+0x9a>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f407 	lsr.w	r4, r0, r7
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	431c      	orrs	r4, r3
 80003e0:	40f9      	lsrs	r1, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	0c20      	lsrs	r0, r4, #16
 80003f0:	fa1f fe8c 	uxth.w	lr, ip
 80003f4:	fb09 1118 	mls	r1, r9, r8, r1
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000400:	4288      	cmp	r0, r1
 8000402:	fa02 f206 	lsl.w	r2, r2, r6
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b8>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000410:	f080 8088 	bcs.w	8000524 <__udivmoddi4+0x2bc>
 8000414:	4288      	cmp	r0, r1
 8000416:	f240 8085 	bls.w	8000524 <__udivmoddi4+0x2bc>
 800041a:	f1a8 0802 	sub.w	r8, r8, #2
 800041e:	4461      	add	r1, ip
 8000420:	1a09      	subs	r1, r1, r0
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb1 f0f9 	udiv	r0, r1, r9
 8000428:	fb09 1110 	mls	r1, r9, r0, r1
 800042c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	458e      	cmp	lr, r1
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1e2>
 8000438:	eb1c 0101 	adds.w	r1, ip, r1
 800043c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000440:	d26c      	bcs.n	800051c <__udivmoddi4+0x2b4>
 8000442:	458e      	cmp	lr, r1
 8000444:	d96a      	bls.n	800051c <__udivmoddi4+0x2b4>
 8000446:	3802      	subs	r0, #2
 8000448:	4461      	add	r1, ip
 800044a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044e:	fba0 9402 	umull	r9, r4, r0, r2
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	42a1      	cmp	r1, r4
 8000458:	46c8      	mov	r8, r9
 800045a:	46a6      	mov	lr, r4
 800045c:	d356      	bcc.n	800050c <__udivmoddi4+0x2a4>
 800045e:	d053      	beq.n	8000508 <__udivmoddi4+0x2a0>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x212>
 8000462:	ebb3 0208 	subs.w	r2, r3, r8
 8000466:	eb61 010e 	sbc.w	r1, r1, lr
 800046a:	fa01 f707 	lsl.w	r7, r1, r7
 800046e:	fa22 f306 	lsr.w	r3, r2, r6
 8000472:	40f1      	lsrs	r1, r6
 8000474:	431f      	orrs	r7, r3
 8000476:	e9c5 7100 	strd	r7, r1, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	f1c2 0320 	rsb	r3, r2, #32
 8000486:	40d8      	lsrs	r0, r3
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	fa21 f303 	lsr.w	r3, r1, r3
 8000490:	4091      	lsls	r1, r2
 8000492:	4301      	orrs	r1, r0
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a0:	fb07 3610 	mls	r6, r7, r0, r3
 80004a4:	0c0b      	lsrs	r3, r1, #16
 80004a6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004aa:	fb00 f60e 	mul.w	r6, r0, lr
 80004ae:	429e      	cmp	r6, r3
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d908      	bls.n	80004c8 <__udivmoddi4+0x260>
 80004b6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	d22f      	bcs.n	8000520 <__udivmoddi4+0x2b8>
 80004c0:	429e      	cmp	r6, r3
 80004c2:	d92d      	bls.n	8000520 <__udivmoddi4+0x2b8>
 80004c4:	3802      	subs	r0, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	1b9b      	subs	r3, r3, r6
 80004ca:	b289      	uxth	r1, r1
 80004cc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d0:	fb07 3316 	mls	r3, r7, r6, r3
 80004d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d8:	fb06 f30e 	mul.w	r3, r6, lr
 80004dc:	428b      	cmp	r3, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x28a>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004e8:	d216      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004ea:	428b      	cmp	r3, r1
 80004ec:	d914      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004ee:	3e02      	subs	r6, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	1ac9      	subs	r1, r1, r3
 80004f4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f8:	e738      	b.n	800036c <__udivmoddi4+0x104>
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e705      	b.n	800030c <__udivmoddi4+0xa4>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e3      	b.n	80002cc <__udivmoddi4+0x64>
 8000504:	4618      	mov	r0, r3
 8000506:	e6f8      	b.n	80002fa <__udivmoddi4+0x92>
 8000508:	454b      	cmp	r3, r9
 800050a:	d2a9      	bcs.n	8000460 <__udivmoddi4+0x1f8>
 800050c:	ebb9 0802 	subs.w	r8, r9, r2
 8000510:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000514:	3801      	subs	r0, #1
 8000516:	e7a3      	b.n	8000460 <__udivmoddi4+0x1f8>
 8000518:	4646      	mov	r6, r8
 800051a:	e7ea      	b.n	80004f2 <__udivmoddi4+0x28a>
 800051c:	4620      	mov	r0, r4
 800051e:	e794      	b.n	800044a <__udivmoddi4+0x1e2>
 8000520:	4640      	mov	r0, r8
 8000522:	e7d1      	b.n	80004c8 <__udivmoddi4+0x260>
 8000524:	46d0      	mov	r8, sl
 8000526:	e77b      	b.n	8000420 <__udivmoddi4+0x1b8>
 8000528:	3b02      	subs	r3, #2
 800052a:	4461      	add	r1, ip
 800052c:	e732      	b.n	8000394 <__udivmoddi4+0x12c>
 800052e:	4630      	mov	r0, r6
 8000530:	e709      	b.n	8000346 <__udivmoddi4+0xde>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e742      	b.n	80003be <__udivmoddi4+0x156>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000540:	f3bf 8f4f 	dsb	sy
}
 8000544:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000546:	f3bf 8f6f 	isb	sy
}
 800054a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <SCB_EnableICache+0x48>)
 800054e:	2200      	movs	r2, #0
 8000550:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000554:	f3bf 8f4f 	dsb	sy
}
 8000558:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
}
 800055e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <SCB_EnableICache+0x48>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a07      	ldr	r2, [pc, #28]	; (8000584 <SCB_EnableICache+0x48>)
 8000566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800056a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800056c:	f3bf 8f4f 	dsb	sy
}
 8000570:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000572:	f3bf 8f6f 	isb	sy
}
 8000576:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800058e:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SCB_EnableDCache+0x84>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000596:	f3bf 8f4f 	dsb	sy
}
 800059a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <SCB_EnableDCache+0x84>)
 800059e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005a2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	0b5b      	lsrs	r3, r3, #13
 80005a8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005ac:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	08db      	lsrs	r3, r3, #3
 80005b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005b6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	015a      	lsls	r2, r3, #5
 80005bc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c0:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c6:	4911      	ldr	r1, [pc, #68]	; (800060c <SCB_EnableDCache+0x84>)
 80005c8:	4313      	orrs	r3, r2
 80005ca:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	1e5a      	subs	r2, r3, #1
 80005d2:	60ba      	str	r2, [r7, #8]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1ef      	bne.n	80005b8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	1e5a      	subs	r2, r3, #1
 80005dc:	60fa      	str	r2, [r7, #12]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1e5      	bne.n	80005ae <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005e2:	f3bf 8f4f 	dsb	sy
}
 80005e6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <SCB_EnableDCache+0x84>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a07      	ldr	r2, [pc, #28]	; (800060c <SCB_EnableDCache+0x84>)
 80005ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005f4:	f3bf 8f4f 	dsb	sy
}
 80005f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005fa:	f3bf 8f6f 	isb	sy
}
 80005fe:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000600:	bf00      	nop
 8000602:	3714      	adds	r7, #20
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <MPU_Config>:
    HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0x01, 0);
    HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
  }
}
static void MPU_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;

  /* Disable the MPU */
  HAL_MPU_Disable();
 8000616:	f003 fdbf 	bl	8004198 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800061a:	2301      	movs	r3, #1
 800061c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000622:	231f      	movs	r3, #31
 8000624:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000626:	2300      	movs	r3, #0
 8000628:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800062e:	2300      	movs	r3, #0
 8000630:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000632:	2301      	movs	r3, #1
 8000634:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000636:	2300      	movs	r3, #0
 8000638:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800063a:	2300      	movs	r3, #0
 800063c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800063e:	2387      	movs	r3, #135	; 0x87
 8000640:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000642:	2301      	movs	r3, #1
 8000644:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000646:	463b      	mov	r3, r7
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fddd 	bl	8004208 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800064e:	2004      	movs	r0, #4
 8000650:	f003 fdba 	bl	80041c8 <HAL_MPU_Enable>
}
 8000654:	bf00      	nop
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
    }
  }
}

void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  if(hdfsdm_filter == &hdfsdm1_filter0)
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x2c>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d103      	bne.n	8000674 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x18>
  {
    DmaLeftRecHalfBuffCplt = 1;
 800066c:	4b07      	ldr	r3, [pc, #28]	; (800068c <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x30>)
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
  }
  else
  {
    DmaRightRecHalfBuffCplt = 1;
  }
}
 8000672:	e002      	b.n	800067a <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x1e>
    DmaRightRecHalfBuffCplt = 1;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_DFSDM_FilterRegConvHalfCpltCallback+0x34>)
 8000676:	2201      	movs	r2, #1
 8000678:	601a      	str	r2, [r3, #0]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	200060bc 	.word	0x200060bc
 800068c:	2000605c 	.word	0x2000605c
 8000690:	20006064 	.word	0x20006064

08000694 <CPU_CACHE_Enable>:

static void CPU_CACHE_Enable(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* Enable I-Cache */
  SCB_EnableICache();
 8000698:	f7ff ff50 	bl	800053c <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 800069c:	f7ff ff74 	bl	8000588 <SCB_EnableDCache>
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f003 f94f 	bl	800394a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f854 	bl	8000758 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006b0:	f000 f8be 	bl	8000830 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MPU_Config();
 80006b4:	f7ff ffac 	bl	8000610 <MPU_Config>
  CPU_CACHE_Enable();
 80006b8:	f7ff ffec 	bl	8000694 <CPU_CACHE_Enable>
  MX_GPIO_Init();
 80006bc:	f000 fc1e 	bl	8000efc <MX_GPIO_Init>
  MX_DSIHOST_DSI_Init();
 80006c0:	f000 fa2c 	bl	8000b1c <MX_DSIHOST_DSI_Init>
  //MX_FMC_Init();
  MX_SAI1_Init();
 80006c4:	f000 fae2 	bl	8000c8c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 80006c8:	f000 fb60 	bl	8000d8c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80006cc:	f000 fb7e 	bl	8000dcc <MX_SPDIFRX_Init>
  MX_USART1_UART_Init();
 80006d0:	f000 fbae 	bl	8000e30 <MX_USART1_UART_Init>
  MX_DFSDM1_Init();
 80006d4:	f000 f92c 	bl	8000930 <MX_DFSDM1_Init>
  MX_DMA_Init();
 80006d8:	f000 fbda 	bl	8000e90 <MX_DMA_Init>
  MX_FATFS_Init();
 80006dc:	f00a fb6a 	bl	800adb4 <MX_FATFS_Init>
 // MX_RTC_Init();
  MX_ADC3_Init();
 80006e0:	f000 f8d4 	bl	800088c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ea:	4815      	ldr	r0, [pc, #84]	; (8000740 <main+0x9c>)
 80006ec:	f005 fa8e 	bl	8005c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2101      	movs	r1, #1
 80006f4:	4813      	ldr	r0, [pc, #76]	; (8000744 <main+0xa0>)
 80006f6:	f005 fa89 	bl	8005c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	2102      	movs	r1, #2
 80006fe:	4811      	ldr	r0, [pc, #68]	; (8000744 <main+0xa0>)
 8000700:	f005 fa84 	bl	8005c0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2108      	movs	r1, #8
 8000708:	480e      	ldr	r0, [pc, #56]	; (8000744 <main+0xa0>)
 800070a:	f005 fa7f 	bl	8005c0c <HAL_GPIO_WritePin>

  if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, RightRecBuff, 2048))
 800070e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000712:	490d      	ldr	r1, [pc, #52]	; (8000748 <main+0xa4>)
 8000714:	480d      	ldr	r0, [pc, #52]	; (800074c <main+0xa8>)
 8000716:	f003 ffcb 	bl	80046b0 <HAL_DFSDM_FilterRegularStart_DMA>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <main+0x80>
  {
    Error_Handler();
 8000720:	f000 fee2 	bl	80014e8 <Error_Handler>
  }
  if(HAL_OK != HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter1, LeftRecBuff, 2048))
 8000724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000728:	4909      	ldr	r1, [pc, #36]	; (8000750 <main+0xac>)
 800072a:	480a      	ldr	r0, [pc, #40]	; (8000754 <main+0xb0>)
 800072c:	f003 ffc0 	bl	80046b0 <HAL_DFSDM_FilterRegularStart_DMA>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <main+0x96>
  {
    Error_Handler();
 8000736:	f000 fed7 	bl	80014e8 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  checkMicrophone();
 800073a:	f001 fb7d 	bl	8001e38 <checkMicrophone>
 800073e:	e7fc      	b.n	800073a <main+0x96>
 8000740:	40022000 	.word	0x40022000
 8000744:	40022400 	.word	0x40022400
 8000748:	2000205c 	.word	0x2000205c
 800074c:	200060bc 	.word	0x200060bc
 8000750:	2000005c 	.word	0x2000005c
 8000754:	20006110 	.word	0x20006110

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b096      	sub	sp, #88	; 0x58
 800075c:	af00      	add	r7, sp, #0
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  HAL_StatusTypeDef  ret = HAL_OK;
 800075e:	2300      	movs	r3, #0
 8000760:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	  /* Enable Power Control clock */
	  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	4b30      	ldr	r3, [pc, #192]	; (8000828 <SystemClock_Config+0xd0>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a2f      	ldr	r2, [pc, #188]	; (8000828 <SystemClock_Config+0xd0>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <SystemClock_Config+0xd0>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]

	  /* The voltage scaling allows optimizing the power consumption when the device is
	     clocked below the maximum system frequency, to update the voltage scaling value
	     regarding system frequency refer to product datasheet.  */
	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	4b2b      	ldr	r3, [pc, #172]	; (800082c <SystemClock_Config+0xd4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a2a      	ldr	r2, [pc, #168]	; (800082c <SystemClock_Config+0xd4>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b28      	ldr	r3, [pc, #160]	; (800082c <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]

	  /* Enable HSE Oscillator and activate PLL with HSE as source */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000794:	2301      	movs	r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
	  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000798:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800079c:	613b      	str	r3, [r7, #16]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079e:	2302      	movs	r3, #2
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLM = 25;
 80007a8:	2319      	movs	r3, #25
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PLLN = 432;
 80007ac:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
	  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
	  RCC_OscInitStruct.PLL.PLLQ = 9;
 80007b6:	2309      	movs	r3, #9
 80007b8:	63bb      	str	r3, [r7, #56]	; 0x38
	  RCC_OscInitStruct.PLL.PLLR = 7;
 80007ba:	2307      	movs	r3, #7
 80007bc:	63fb      	str	r3, [r7, #60]	; 0x3c

	  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4618      	mov	r0, r3
 80007c4:	f006 f836 	bl	8006834 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  if(ret != HAL_OK)
 80007ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d000      	beq.n	80007d8 <SystemClock_Config+0x80>
	  {
	    while(1) { ; }
 80007d6:	e7fe      	b.n	80007d6 <SystemClock_Config+0x7e>
	  }

	  /* Activate the OverDrive to reach the 216 MHz Frequency */
	  ret = HAL_PWREx_EnableOverDrive();
 80007d8:	f005 ffdc 	bl	8006794 <HAL_PWREx_EnableOverDrive>
 80007dc:	4603      	mov	r3, r0
 80007de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  if(ret != HAL_OK)
 80007e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d000      	beq.n	80007ec <SystemClock_Config+0x94>
	  {
	    while(1) { ; }
 80007ea:	e7fe      	b.n	80007ea <SystemClock_Config+0x92>
	  }

	  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80007ec:	230f      	movs	r3, #15
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f0:	2302      	movs	r3, #2
 80007f2:	647b      	str	r3, [r7, #68]	; 0x44
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fc:	64fb      	str	r3, [r7, #76]	; 0x4c
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000802:	653b      	str	r3, [r7, #80]	; 0x50

	  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8000804:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000808:	2107      	movs	r1, #7
 800080a:	4618      	mov	r0, r3
 800080c:	f006 fac0 	bl	8006d90 <HAL_RCC_ClockConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	  if(ret != HAL_OK)
 8000816:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800081a:	2b00      	cmp	r3, #0
 800081c:	d000      	beq.n	8000820 <SystemClock_Config+0xc8>
	  {
	    while(1) { ; }
 800081e:	e7fe      	b.n	800081e <SystemClock_Config+0xc6>
	  }
}
 8000820:	bf00      	nop
 8000822:	3758      	adds	r7, #88	; 0x58
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b0a4      	sub	sp, #144	; 0x90
 8000834:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000836:	463b      	mov	r3, r7
 8000838:	2290      	movs	r2, #144	; 0x90
 800083a:	2100      	movs	r1, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f00a fd93 	bl	800b368 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1|RCC_PERIPHCLK_DFSDM1_AUDIO
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <PeriphCommonClock_Config+0x58>)
 8000844:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000846:	23c0      	movs	r3, #192	; 0xc0
 8000848:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 800084e:	2303      	movs	r3, #3
 8000850:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000856:	2301      	movs	r3, #1
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 800085e:	2300      	movs	r3, #0
 8000860:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Dfsdm1AudioClockSelection = RCC_DFSDM1AUDIOCLKSOURCE_SAI1;
 8000862:	2300      	movs	r3, #0
 8000864:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000868:	2300      	movs	r3, #0
 800086a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	4618      	mov	r0, r3
 8000872:	f006 fc73 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800087c:	f000 fe34 	bl	80014e8 <Error_Handler>
  }
}
 8000880:	bf00      	nop
 8000882:	3790      	adds	r7, #144	; 0x90
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	18280000 	.word	0x18280000

0800088c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_ADC3_Init+0x98>)
 80008a0:	4a21      	ldr	r2, [pc, #132]	; (8000928 <MX_ADC3_Init+0x9c>)
 80008a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_ADC3_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_ADC3_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b0:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_ADC3_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_ADC3_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_ADC3_Init+0x98>)
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_ADC3_Init+0x98>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_ADC3_Init+0x98>)
 80008cc:	4a17      	ldr	r2, [pc, #92]	; (800092c <MX_ADC3_Init+0xa0>)
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_ADC3_Init+0x98>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_ADC3_Init+0x98>)
 80008d8:	2201      	movs	r2, #1
 80008da:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_ADC3_Init+0x98>)
 80008de:	2200      	movs	r2, #0
 80008e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_ADC3_Init+0x98>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008ea:	480e      	ldr	r0, [pc, #56]	; (8000924 <MX_ADC3_Init+0x98>)
 80008ec:	f003 f8ae 	bl	8003a4c <HAL_ADC_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f000 fdf7 	bl	80014e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008fa:	2308      	movs	r3, #8
 80008fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fe:	2301      	movs	r3, #1
 8000900:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000906:	463b      	mov	r3, r7
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <MX_ADC3_Init+0x98>)
 800090c:	f003 f8e2 	bl	8003ad4 <HAL_ADC_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8000916:	f000 fde7 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20006074 	.word	0x20006074
 8000928:	40012200 	.word	0x40012200
 800092c:	0f000001 	.word	0x0f000001

08000930 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */

  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hdfsdm1_channel0);
 8000934:	4b70      	ldr	r3, [pc, #448]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000936:	2200      	movs	r2, #0
 8000938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  __HAL_DFSDM_CHANNEL_RESET_HANDLE_STATE(&hdfsdm1_channel1);
 800093c:	4b6f      	ldr	r3, [pc, #444]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 800093e:	2200      	movs	r2, #0
 8000940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hdfsdm1_filter0);
 8000944:	4b6e      	ldr	r3, [pc, #440]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 8000946:	2200      	movs	r2, #0
 8000948:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  __HAL_DFSDM_FILTER_RESET_HANDLE_STATE(&hdfsdm1_filter1);
 800094c:	4b6d      	ldr	r3, [pc, #436]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 800094e:	2200      	movs	r2, #0
 8000950:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8000954:	4b6a      	ldr	r3, [pc, #424]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 8000956:	4a6c      	ldr	r2, [pc, #432]	; (8000b08 <MX_DFSDM1_Init+0x1d8>)
 8000958:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800095a:	4b69      	ldr	r3, [pc, #420]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8000960:	4b67      	ldr	r3, [pc, #412]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 8000962:	2201      	movs	r2, #1
 8000964:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8000966:	4b66      	ldr	r3, [pc, #408]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 8000968:	2201      	movs	r2, #1
 800096a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800096c:	4b64      	ldr	r3, [pc, #400]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter0.Init.InjectedParam.ScanMode = ENABLE;
 8000972:	4b63      	ldr	r3, [pc, #396]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 8000974:	2201      	movs	r2, #1
 8000976:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter0.Init.InjectedParam.DmaMode = DISABLE;
 8000978:	4b61      	ldr	r3, [pc, #388]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 800097a:	2200      	movs	r2, #0
 800097c:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter0.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 800097e:	4b60      	ldr	r3, [pc, #384]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter0.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 8000984:	4b5e      	ldr	r3, [pc, #376]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 8000986:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800098a:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800098c:	4b5c      	ldr	r3, [pc, #368]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 800098e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000992:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 64;
 8000994:	4b5a      	ldr	r3, [pc, #360]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 8000996:	2240      	movs	r2, #64	; 0x40
 8000998:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800099a:	4b59      	ldr	r3, [pc, #356]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 800099c:	2201      	movs	r2, #1
 800099e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80009a0:	4857      	ldr	r0, [pc, #348]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 80009a2:	f003 fd35 	bl	8004410 <HAL_DFSDM_FilterInit>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_DFSDM1_Init+0x80>
  {
	    Error_Handler();
 80009ac:	f000 fd9c 	bl	80014e8 <Error_Handler>
  }
  hdfsdm1_filter1.Instance = DFSDM1_Filter1;
 80009b0:	4b54      	ldr	r3, [pc, #336]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009b2:	4a56      	ldr	r2, [pc, #344]	; (8000b0c <MX_DFSDM1_Init+0x1dc>)
 80009b4:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter1.Init.RegularParam.Trigger = DFSDM_FILTER_SYNC_TRIGGER;
 80009b6:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter1.Init.RegularParam.FastMode = ENABLE;
 80009bc:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009be:	2201      	movs	r2, #1
 80009c0:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter1.Init.RegularParam.DmaMode = ENABLE;
 80009c2:	4b50      	ldr	r3, [pc, #320]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter1.Init.InjectedParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 80009c8:	4b4e      	ldr	r3, [pc, #312]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  hdfsdm1_filter1.Init.InjectedParam.ScanMode = ENABLE;
 80009ce:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	741a      	strb	r2, [r3, #16]
  hdfsdm1_filter1.Init.InjectedParam.DmaMode = DISABLE;
 80009d4:	4b4b      	ldr	r3, [pc, #300]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	745a      	strb	r2, [r3, #17]
  hdfsdm1_filter1.Init.InjectedParam.ExtTrigger = DFSDM_FILTER_EXT_TRIG_TIM1_TRGO;
 80009da:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hdfsdm1_filter1.Init.InjectedParam.ExtTriggerEdge = DFSDM_FILTER_EXT_TRIG_RISING_EDGE;
 80009e0:	4b48      	ldr	r3, [pc, #288]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e6:	619a      	str	r2, [r3, #24]
  hdfsdm1_filter1.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 80009e8:	4b46      	ldr	r3, [pc, #280]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009ea:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80009ee:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter1.Init.FilterParam.Oversampling = 64;
 80009f0:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009f2:	2240      	movs	r2, #64	; 0x40
 80009f4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter1.Init.FilterParam.IntOversampling = 1;
 80009f6:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter1) != HAL_OK)
 80009fc:	4841      	ldr	r0, [pc, #260]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 80009fe:	f003 fd07 	bl	8004410 <HAL_DFSDM_FilterInit>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_DFSDM1_Init+0xdc>
  {
	    Error_Handler();
 8000a08:	f000 fd6e 	bl	80014e8 <Error_Handler>
  }
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a0e:	4a40      	ldr	r2, [pc, #256]	; (8000b10 <MX_DFSDM1_Init+0x1e0>)
 8000a10:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8000a12:	4b39      	ldr	r3, [pc, #228]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000a18:	4b37      	ldr	r3, [pc, #220]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1e:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 4;
 8000a20:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a22:	2204      	movs	r2, #4
 8000a24:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a26:	4b34      	ldr	r3, [pc, #208]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a2c:	4b32      	ldr	r3, [pc, #200]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a38:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_FALLING;
 8000a3a:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a42:	2204      	movs	r2, #4
 8000a44:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 10;
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a4e:	220a      	movs	r2, #10
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0;
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x02;
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8000a5e:	4826      	ldr	r0, [pc, #152]	; (8000af8 <MX_DFSDM1_Init+0x1c8>)
 8000a60:	f003 fc16 	bl	8004290 <HAL_DFSDM_ChannelInit>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_DFSDM1_Init+0x13e>
  {
    Error_Handler();
 8000a6a:	f000 fd3d 	bl	80014e8 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a6e:	4b23      	ldr	r3, [pc, #140]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000a70:	4a28      	ldr	r2, [pc, #160]	; (8000b14 <MX_DFSDM1_Init+0x1e4>)
 8000a72:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a74:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_AUDIO;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000a7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a80:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 4;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a88:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a9a:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 10;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000aae:	220a      	movs	r2, #10
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x02;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000aba:	2202      	movs	r2, #2
 8000abc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000abe:	480f      	ldr	r0, [pc, #60]	; (8000afc <MX_DFSDM1_Init+0x1cc>)
 8000ac0:	f003 fbe6 	bl	8004290 <HAL_DFSDM_ChannelInit>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_DFSDM1_Init+0x19e>
  {
    Error_Handler();
 8000aca:	f000 fd0d 	bl	80014e8 <Error_Handler>
  }
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_OFF);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4911      	ldr	r1, [pc, #68]	; (8000b18 <MX_DFSDM1_Init+0x1e8>)
 8000ad2:	480b      	ldr	r0, [pc, #44]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 8000ad4:	f003 fd76 	bl	80045c4 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_1);
 8000ad8:	490f      	ldr	r1, [pc, #60]	; (8000b18 <MX_DFSDM1_Init+0x1e8>)
 8000ada:	4809      	ldr	r0, [pc, #36]	; (8000b00 <MX_DFSDM1_Init+0x1d0>)
 8000adc:	f003 fdb8 	bl	8004650 <HAL_DFSDM_FilterConfigInjChannel>
  HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_1, DFSDM_CONTINUOUS_CONV_OFF);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	490d      	ldr	r1, [pc, #52]	; (8000b18 <MX_DFSDM1_Init+0x1e8>)
 8000ae4:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 8000ae6:	f003 fd6d 	bl	80045c4 <HAL_DFSDM_FilterConfigRegChannel>
  HAL_DFSDM_FilterConfigInjChannel(&hdfsdm1_filter1, DFSDM_CHANNEL_0);
 8000aea:	2101      	movs	r1, #1
 8000aec:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_DFSDM1_Init+0x1d4>)
 8000aee:	f003 fdaf 	bl	8004650 <HAL_DFSDM_FilterConfigInjChannel>
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20006164 	.word	0x20006164
 8000afc:	2000619c 	.word	0x2000619c
 8000b00:	200060bc 	.word	0x200060bc
 8000b04:	20006110 	.word	0x20006110
 8000b08:	40017500 	.word	0x40017500
 8000b0c:	40017580 	.word	0x40017580
 8000b10:	40017400 	.word	0x40017400
 8000b14:	40017420 	.word	0x40017420
 8000b18:	00010002 	.word	0x00010002

08000b1c <MX_DSIHOST_DSI_Init>:
  * @brief DSIHOST Initialization Function
  * @param None
  * @retval None
  */
static void MX_DSIHOST_DSI_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0a0      	sub	sp, #128	; 0x80
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DSIHOST_Init 0 */

  /* USER CODE END DSIHOST_Init 0 */

  DSI_PLLInitTypeDef PLLInit = {0};
 8000b22:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000b2e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b32:	2224      	movs	r2, #36	; 0x24
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f00a fc16 	bl	800b368 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000b3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
 8000b4c:	615a      	str	r2, [r3, #20]
  DSI_LPCmdTypeDef LPCmd = {0};
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2234      	movs	r2, #52	; 0x34
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f00a fc07 	bl	800b368 <memset>

  /* USER CODE BEGIN DSIHOST_Init 1 */

  /* USER CODE END DSIHOST_Init 1 */
  hdsi.Instance = DSI;
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <MX_DSIHOST_DSI_Init+0x168>)
 8000b5c:	4a4a      	ldr	r2, [pc, #296]	; (8000c88 <MX_DSIHOST_DSI_Init+0x16c>)
 8000b5e:	601a      	str	r2, [r3, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000b60:	4b48      	ldr	r3, [pc, #288]	; (8000c84 <MX_DSIHOST_DSI_Init+0x168>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 8000b66:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <MX_DSIHOST_DSI_Init+0x168>)
 8000b68:	2204      	movs	r2, #4
 8000b6a:	609a      	str	r2, [r3, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8000b6c:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <MX_DSIHOST_DSI_Init+0x168>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 20;
 8000b72:	2314      	movs	r3, #20
 8000b74:	677b      	str	r3, [r7, #116]	; 0x74
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	67bb      	str	r3, [r7, #120]	; 0x78
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000b7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b82:	4619      	mov	r1, r3
 8000b84:	483f      	ldr	r0, [pc, #252]	; (8000c84 <MX_DSIHOST_DSI_Init+0x168>)
 8000b86:	f004 fabf 	bl	8005108 <HAL_DSI_Init>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_DSIHOST_DSI_Init+0x78>
  {
    Error_Handler();
 8000b90:	f000 fcaa 	bl	80014e8 <Error_Handler>
  }
  HostTimeouts.TimeoutCkdiv = 1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	653b      	str	r3, [r7, #80]	; 0x50
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	657b      	str	r3, [r7, #84]	; 0x54
  HostTimeouts.LowPowerReceptionTimeout = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	65bb      	str	r3, [r7, #88]	; 0x58
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
  HostTimeouts.LowPowerReadTimeout = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	663b      	str	r3, [r7, #96]	; 0x60
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	667b      	str	r3, [r7, #100]	; 0x64
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	66bb      	str	r3, [r7, #104]	; 0x68
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  HostTimeouts.BTATimeout = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000bb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4831      	ldr	r0, [pc, #196]	; (8000c84 <MX_DSIHOST_DSI_Init+0x168>)
 8000bc0:	f004 fd6a 	bl	8005698 <HAL_DSI_ConfigHostTimeouts>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_DSIHOST_DSI_Init+0xb2>
  {
    Error_Handler();
 8000bca:	f000 fc8d 	bl	80014e8 <Error_Handler>
  }
  PhyTimings.ClockLaneHS2LPTime = 28;
 8000bce:	231c      	movs	r3, #28
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000bd2:	2321      	movs	r3, #33	; 0x21
 8000bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PhyTimings.DataLaneHS2LPTime = 15;
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	643b      	str	r3, [r7, #64]	; 0x40
  PhyTimings.DataLaneLP2HSTime = 25;
 8000bda:	2319      	movs	r3, #25
 8000bdc:	647b      	str	r3, [r7, #68]	; 0x44
  PhyTimings.DataLaneMaxReadTime = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	64bb      	str	r3, [r7, #72]	; 0x48
  PhyTimings.StopWaitTime = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000be6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bea:	4619      	mov	r1, r3
 8000bec:	4825      	ldr	r0, [pc, #148]	; (8000c84 <MX_DSIHOST_DSI_Init+0x168>)
 8000bee:	f004 fce9 	bl	80055c4 <HAL_DSI_ConfigPhyTimer>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_DSIHOST_DSI_Init+0xe0>
  {
    Error_Handler();
 8000bf8:	f000 fc76 	bl	80014e8 <Error_Handler>
  }
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	4821      	ldr	r0, [pc, #132]	; (8000c84 <MX_DSIHOST_DSI_Init+0x168>)
 8000c00:	f004 fcb8 	bl	8005574 <HAL_DSI_ConfigFlowControl>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_DSIHOST_DSI_Init+0xf2>
  {
    Error_Handler();
 8000c0a:	f000 fc6d 	bl	80014e8 <Error_Handler>
  }
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000c0e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000c12:	481c      	ldr	r0, [pc, #112]	; (8000c84 <MX_DSIHOST_DSI_Init+0x168>)
 8000c14:	f004 fe08 	bl	8005828 <HAL_DSI_SetLowPowerRXFilter>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_DSIHOST_DSI_Init+0x106>
  {
    Error_Handler();
 8000c1e:	f000 fc63 	bl	80014e8 <Error_Handler>
  }
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000c22:	2100      	movs	r1, #0
 8000c24:	4817      	ldr	r0, [pc, #92]	; (8000c84 <MX_DSIHOST_DSI_Init+0x168>)
 8000c26:	f004 fb8b 	bl	8005340 <HAL_DSI_ConfigErrorMonitor>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_DSIHOST_DSI_Init+0x118>
  {
    Error_Handler();
 8000c30:	f000 fc5a 	bl	80014e8 <Error_Handler>
  }
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60bb      	str	r3, [r7, #8]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61bb      	str	r3, [r7, #24]
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	; 0x24
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_DSIHOST_DSI_Init+0x168>)
 8000c6e:	f004 fc23 	bl	80054b8 <HAL_DSI_ConfigCommand>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_DSIHOST_DSI_Init+0x160>
  {
    Error_Handler();
 8000c78:	f000 fc36 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN DSIHOST_Init 2 */

  /* USER CODE END DSIHOST_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3780      	adds	r7, #128	; 0x80
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20006294 	.word	0x20006294
 8000c88:	40016c00 	.word	0x40016c00

08000c8c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000c8c:	b598      	push	{r3, r4, r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000c90:	4b3a      	ldr	r3, [pc, #232]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000c92:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <MX_SAI1_Init+0xf4>)
 8000c94:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000c96:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c9c:	4b37      	ldr	r3, [pc, #220]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_16;
 8000ca2:	4b36      	ldr	r3, [pc, #216]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000ca4:	2280      	movs	r2, #128	; 0x80
 8000ca6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000ca8:	4b34      	ldr	r3, [pc, #208]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000cae:	4b33      	ldr	r3, [pc, #204]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000cb4:	4b31      	ldr	r3, [pc, #196]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cba:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000cc0:	4b2e      	ldr	r3, [pc, #184]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cc6:	4b2d      	ldr	r3, [pc, #180]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_44K;
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000cce:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000cd2:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cd4:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000cda:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ce0:	4b26      	ldr	r3, [pc, #152]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 32;
 8000cec:	4b23      	ldr	r3, [pc, #140]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000cee:	2220      	movs	r2, #32
 8000cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 16;
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000cf4:	2210      	movs	r2, #16
 8000cf6:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8000cf8:	4b20      	ldr	r3, [pc, #128]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000cfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cfe:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000d08:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d0c:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 2;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000003;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000d22:	2203      	movs	r2, #3
 8000d24:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000d26:	4815      	ldr	r0, [pc, #84]	; (8000d7c <MX_SAI1_Init+0xf0>)
 8000d28:	f006 ffb2 	bl	8007c90 <HAL_SAI_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_SAI1_Init+0xaa>
  {
    Error_Handler();
 8000d32:	f000 fbd9 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */
  if(WM8994_ID != wm8994_drv.ReadID(AUDIO_I2C_ADDRESS))
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_SAI1_Init+0xf8>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	2034      	movs	r0, #52	; 0x34
 8000d3c:	4798      	blx	r3
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f648 1294 	movw	r2, #35220	; 0x8994
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d001      	beq.n	8000d4c <MX_SAI1_Init+0xc0>
      {
        Error_Handler();
 8000d48:	f000 fbce 	bl	80014e8 <Error_Handler>
      }

      audio_drv = &wm8994_drv;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_SAI1_Init+0xfc>)
 8000d4e:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <MX_SAI1_Init+0xf8>)
 8000d50:	601a      	str	r2, [r3, #0]
      audio_drv->Reset(AUDIO_I2C_ADDRESS);
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <MX_SAI1_Init+0xfc>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d58:	2034      	movs	r0, #52	; 0x34
 8000d5a:	4798      	blx	r3
      if(0 != audio_drv->Init(AUDIO_I2C_ADDRESS, OUTPUT_DEVICE_HEADPHONE, 100, AUDIO_FREQUENCY_22K))
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_SAI1_Init+0xfc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681c      	ldr	r4, [r3, #0]
 8000d62:	f245 6322 	movw	r3, #22050	; 0x5622
 8000d66:	2264      	movs	r2, #100	; 0x64
 8000d68:	2102      	movs	r1, #2
 8000d6a:	2034      	movs	r0, #52	; 0x34
 8000d6c:	47a0      	blx	r4
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_SAI1_Init+0xec>
      {
        Error_Handler();
 8000d74:	f000 fbb8 	bl	80014e8 <Error_Handler>
      }

  /* USER CODE END SAI1_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd98      	pop	{r3, r4, r7, pc}
 8000d7c:	200062b0 	.word	0x200062b0
 8000d80:	40015804 	.word	0x40015804
 8000d84:	20000004 	.word	0x20000004
 8000d88:	20006070 	.word	0x20006070

08000d8c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_SDMMC1_SD_Init+0x38>)
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <MX_SDMMC1_SD_Init+0x3c>)
 8000d94:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_SDMMC1_SD_Init+0x38>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_SDMMC1_SD_Init+0x38>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_SDMMC1_SD_Init+0x38>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_SDMMC1_SD_Init+0x38>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000dae:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <MX_SDMMC1_SD_Init+0x38>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <MX_SDMMC1_SD_Init+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20006334 	.word	0x20006334
 8000dc8:	40012c00 	.word	0x40012c00

08000dcc <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000dd2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000dd6:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN1;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000dda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dde:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_SPDIFRX_Init+0x60>)
 8000e18:	f008 fd92 	bl	8009940 <HAL_SPDIFRX_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_SPDIFRX_Init+0x5a>
  {
    Error_Handler();
 8000e22:	f000 fb61 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20006478 	.word	0x20006478

08000e30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e36:	4a15      	ldr	r2, [pc, #84]	; (8000e8c <MX_USART1_UART_Init+0x5c>)
 8000e38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e56:	220c      	movs	r2, #12
 8000e58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USART1_UART_Init+0x58>)
 8000e74:	f008 fdc0 	bl	80099f8 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e7e:	f000 fb33 	bl	80014e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200064c4 	.word	0x200064c4
 8000e8c:	40011000 	.word	0x40011000

08000e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_DMA_Init+0x68>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <MX_DMA_Init+0x68>)
 8000e9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_DMA_Init+0x68>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	2038      	movs	r0, #56	; 0x38
 8000eb4:	f003 f939 	bl	800412a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000eb8:	2038      	movs	r0, #56	; 0x38
 8000eba:	f003 f952 	bl	8004162 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	2039      	movs	r0, #57	; 0x39
 8000ec4:	f003 f931 	bl	800412a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000ec8:	2039      	movs	r0, #57	; 0x39
 8000eca:	f003 f94a 	bl	8004162 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	203b      	movs	r0, #59	; 0x3b
 8000ed4:	f003 f929 	bl	800412a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ed8:	203b      	movs	r0, #59	; 0x3b
 8000eda:	f003 f942 	bl	8004162 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2045      	movs	r0, #69	; 0x45
 8000ee4:	f003 f921 	bl	800412a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ee8:	2045      	movs	r0, #69	; 0x45
 8000eea:	f003 f93a 	bl	8004162 <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b090      	sub	sp, #64	; 0x40
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f12:	4bad      	ldr	r3, [pc, #692]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4aac      	ldr	r2, [pc, #688]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f18:	f043 0310 	orr.w	r3, r3, #16
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4baa      	ldr	r3, [pc, #680]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0310 	and.w	r3, r3, #16
 8000f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2a:	4ba7      	ldr	r3, [pc, #668]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4aa6      	ldr	r2, [pc, #664]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4ba4      	ldr	r3, [pc, #656]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4ba1      	ldr	r3, [pc, #644]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4aa0      	ldr	r2, [pc, #640]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b9e      	ldr	r3, [pc, #632]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	623b      	str	r3, [r7, #32]
 8000f58:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	4b9b      	ldr	r3, [pc, #620]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a9a      	ldr	r2, [pc, #616]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b98      	ldr	r3, [pc, #608]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	61fb      	str	r3, [r7, #28]
 8000f70:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b95      	ldr	r3, [pc, #596]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a94      	ldr	r2, [pc, #592]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b92      	ldr	r3, [pc, #584]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	61bb      	str	r3, [r7, #24]
 8000f88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b8f      	ldr	r3, [pc, #572]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a8e      	ldr	r2, [pc, #568]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b8c      	ldr	r3, [pc, #560]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000fa2:	4b89      	ldr	r3, [pc, #548]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a88      	ldr	r2, [pc, #544]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000fa8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b86      	ldr	r3, [pc, #536]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fba:	4b83      	ldr	r3, [pc, #524]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a82      	ldr	r2, [pc, #520]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b80      	ldr	r3, [pc, #512]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000fd2:	4b7d      	ldr	r3, [pc, #500]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a7c      	ldr	r2, [pc, #496]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000fd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b7a      	ldr	r3, [pc, #488]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fe6:	60bb      	str	r3, [r7, #8]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fea:	4b77      	ldr	r3, [pc, #476]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a76      	ldr	r2, [pc, #472]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000ff0:	f043 0320 	orr.w	r3, r3, #32
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b74      	ldr	r3, [pc, #464]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001002:	4b71      	ldr	r3, [pc, #452]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a70      	ldr	r2, [pc, #448]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b6e      	ldr	r3, [pc, #440]	; (80011c8 <MX_GPIO_Init+0x2cc>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 800101a:	2200      	movs	r2, #0
 800101c:	f243 010b 	movw	r1, #12299	; 0x300b
 8001020:	486a      	ldr	r0, [pc, #424]	; (80011cc <MX_GPIO_Init+0x2d0>)
 8001022:	f004 fdf3 	bl	8005c0c <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102c:	4868      	ldr	r0, [pc, #416]	; (80011d0 <MX_GPIO_Init+0x2d4>)
 800102e:	f004 fded 	bl	8005c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001032:	2304      	movs	r3, #4
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103e:	2303      	movs	r3, #3
 8001040:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001042:	230b      	movs	r3, #11
 8001044:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001046:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104a:	4619      	mov	r1, r3
 800104c:	4861      	ldr	r0, [pc, #388]	; (80011d4 <MX_GPIO_Init+0x2d8>)
 800104e:	f004 fc19 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TXD1_Pin MII_TXD0_Pin MII_TX_EN_Pin */
  GPIO_InitStruct.Pin = MII_TXD1_Pin|MII_TXD0_Pin|MII_TX_EN_Pin;
 8001052:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001064:	230b      	movs	r3, #11
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001068:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106c:	4619      	mov	r1, r3
 800106e:	485a      	ldr	r0, [pc, #360]	; (80011d8 <MX_GPIO_Init+0x2dc>)
 8001070:	f004 fc08 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_Pin I2C1_SDA_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001074:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107a:	2312      	movs	r3, #18
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001086:	2304      	movs	r3, #4
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108e:	4619      	mov	r1, r3
 8001090:	4852      	ldr	r0, [pc, #328]	; (80011dc <MX_GPIO_Init+0x2e0>)
 8001092:	f004 fbf7 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001096:	f643 4323 	movw	r3, #15395	; 0x3c23
 800109a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80010a8:	230a      	movs	r3, #10
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b0:	4619      	mov	r1, r3
 80010b2:	484a      	ldr	r0, [pc, #296]	; (80011dc <MX_GPIO_Init+0x2e0>)
 80010b4:	f004 fbe6 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD2_D3_Pin SD2_D2_Pin */
  GPIO_InitStruct.Pin = SD2_D3_Pin|SD2_D2_Pin;
 80010b8:	2318      	movs	r3, #24
 80010ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80010c8:	230a      	movs	r3, #10
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d0:	4619      	mov	r1, r3
 80010d2:	4842      	ldr	r0, [pc, #264]	; (80011dc <MX_GPIO_Init+0x2e0>)
 80010d4:	f004 fbd6 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD2_CMD_Pin */
  GPIO_InitStruct.Pin = SD2_CMD_Pin;
 80010d8:	2380      	movs	r3, #128	; 0x80
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010dc:	2302      	movs	r3, #2
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e0:	2300      	movs	r3, #0
 80010e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80010e8:	230b      	movs	r3, #11
 80010ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SD2_CMD_GPIO_Port, &GPIO_InitStruct);
 80010ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f0:	4619      	mov	r1, r3
 80010f2:	483b      	ldr	r0, [pc, #236]	; (80011e0 <MX_GPIO_Init+0x2e4>)
 80010f4:	f004 fbc6 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_MCLKB_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKB_Pin;
 80010f8:	2340      	movs	r3, #64	; 0x40
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001108:	230a      	movs	r3, #10
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_MCLKB_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001110:	4619      	mov	r1, r3
 8001112:	4830      	ldr	r0, [pc, #192]	; (80011d4 <MX_GPIO_Init+0x2d8>)
 8001114:	f004 fbb6 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PAR_VSYNC_Pin */
  GPIO_InitStruct.Pin = PAR_VSYNC_Pin;
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001128:	230d      	movs	r3, #13
 800112a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(PAR_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001130:	4619      	mov	r1, r3
 8001132:	482a      	ldr	r0, [pc, #168]	; (80011dc <MX_GPIO_Init+0x2e0>)
 8001134:	f004 fba6 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001138:	2340      	movs	r3, #64	; 0x40
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001148:	230a      	movs	r3, #10
 800114a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 800114c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001150:	4619      	mov	r1, r3
 8001152:	4822      	ldr	r0, [pc, #136]	; (80011dc <MX_GPIO_Init+0x2e0>)
 8001154:	f004 fb96 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_GPIO_Pin MII_MDIO_GPIO_Pin LED3_Pin LED1_Pin
                           LED2_Pin */
  GPIO_InitStruct.Pin = MII_MDC_GPIO_Pin|MII_MDIO_GPIO_Pin|LED3_Pin|LED1_Pin
 8001158:	f243 030b 	movw	r3, #12299	; 0x300b
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800116a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800116e:	4619      	mov	r1, r3
 8001170:	4816      	ldr	r0, [pc, #88]	; (80011cc <MX_GPIO_Init+0x2d0>)
 8001172:	f004 fb87 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS1_DP_Pin USB_FS1_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 8001176:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001188:	230a      	movs	r3, #10
 800118a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001190:	4619      	mov	r1, r3
 8001192:	4814      	ldr	r0, [pc, #80]	; (80011e4 <MX_GPIO_Init+0x2e8>)
 8001194:	f004 fb76 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXPANDER_INT_Pin */
  GPIO_InitStruct.Pin = EXPANDER_INT_Pin;
 8001198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EXPANDER_INT_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ac:	4619      	mov	r1, r3
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <MX_GPIO_Init+0x2d4>)
 80011b0:	f004 fb68 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DE_Pin LCD_B7_Pin LCD_B6_Pin LCD_B5_Pin
                           LCD_B4_Pin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80011b4:	23f8      	movs	r3, #248	; 0xf8
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_B4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b8:	2302      	movs	r3, #2
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80011c4:	e010      	b.n	80011e8 <MX_GPIO_Init+0x2ec>
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40022400 	.word	0x40022400
 80011d0:	40022000 	.word	0x40022000
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40021800 	.word	0x40021800
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40020000 	.word	0x40020000
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011e8:	230e      	movs	r3, #14
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80011ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f0:	4619      	mov	r1, r3
 80011f2:	48b4      	ldr	r0, [pc, #720]	; (80014c4 <MX_GPIO_Init+0x5c8>)
 80011f4:	f004 fb46 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD2_D1_Pin */
  GPIO_InitStruct.Pin = SD2_D1_Pin;
 80011f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800120a:	230b      	movs	r3, #11
 800120c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SD2_D1_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001212:	4619      	mov	r1, r3
 8001214:	48ac      	ldr	r0, [pc, #688]	; (80014c8 <MX_GPIO_Init+0x5cc>)
 8001216:	f004 fb35 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_B2_Pin LCD_B3_Pin LCD_R5_Pin LCD_R6_Pin */
  GPIO_InitStruct.Pin = LCD_B2_Pin|LCD_B3_Pin|LCD_R5_Pin|LCD_R6_Pin;
 800121a:	f24c 0330 	movw	r3, #49200	; 0xc030
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800122c:	230e      	movs	r3, #14
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001234:	4619      	mov	r1, r3
 8001236:	48a5      	ldr	r0, [pc, #660]	; (80014cc <MX_GPIO_Init+0x5d0>)
 8001238:	f004 fb24 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : TAMPER_WKUP_KEY_Pin */
  GPIO_InitStruct.Pin = TAMPER_WKUP_KEY_Pin;
 800123c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001242:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(TAMPER_WKUP_KEY_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001250:	4619      	mov	r1, r3
 8001252:	489f      	ldr	r0, [pc, #636]	; (80014d0 <MX_GPIO_Init+0x5d4>)
 8001254:	f004 fb16 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_FSB_Pin */
  GPIO_InitStruct.Pin = SAI2_FSB_Pin;
 8001258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800126a:	230a      	movs	r3, #10
 800126c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_FSB_GPIO_Port, &GPIO_InitStruct);
 800126e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001272:	4619      	mov	r1, r3
 8001274:	4894      	ldr	r0, [pc, #592]	; (80014c8 <MX_GPIO_Init+0x5cc>)
 8001276:	f004 fb05 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_HSYNC_Pin LCD_VSYNC_Pin LCD_CLK_Pin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_CLK_Pin;
 800127a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001288:	2300      	movs	r3, #0
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800128c:	230e      	movs	r3, #14
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001294:	4619      	mov	r1, r3
 8001296:	488f      	ldr	r0, [pc, #572]	; (80014d4 <MX_GPIO_Init+0x5d8>)
 8001298:	f004 faf4 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 800129c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a2:	2302      	movs	r3, #2
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012aa:	2303      	movs	r3, #3
 80012ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80012ae:	230a      	movs	r3, #10
 80012b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 80012b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012b6:	4619      	mov	r1, r3
 80012b8:	4886      	ldr	r0, [pc, #536]	; (80014d4 <MX_GPIO_Init+0x5d8>)
 80012ba:	f004 fae3 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_MCO_Pin */
  GPIO_InitStruct.Pin = MII_MCO_Pin;
 80012be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	2300      	movs	r3, #0
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80012d0:	2300      	movs	r3, #0
 80012d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_MCO_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d8:	4619      	mov	r1, r3
 80012da:	487f      	ldr	r0, [pc, #508]	; (80014d8 <MX_GPIO_Init+0x5dc>)
 80012dc:	f004 fad2 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80012e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f6:	4619      	mov	r1, r3
 80012f8:	4876      	ldr	r0, [pc, #472]	; (80014d4 <MX_GPIO_Init+0x5d8>)
 80012fa:	f004 fac3 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80012fe:	2310      	movs	r3, #16
 8001300:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800130e:	230a      	movs	r3, #10
 8001310:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001316:	4619      	mov	r1, r3
 8001318:	4870      	ldr	r0, [pc, #448]	; (80014dc <MX_GPIO_Init+0x5e0>)
 800131a:	f004 fab3 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_BK1_IO2_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 800131e:	2380      	movs	r3, #128	; 0x80
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800132e:	2309      	movs	r3, #9
 8001330:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001336:	4619      	mov	r1, r3
 8001338:	4869      	ldr	r0, [pc, #420]	; (80014e0 <MX_GPIO_Init+0x5e4>)
 800133a:	f004 faa3 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_BK1_IO1_Pin QSPI_BK1_IO0_Pin */
  GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 800133e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001350:	230a      	movs	r3, #10
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001358:	4619      	mov	r1, r3
 800135a:	4861      	ldr	r0, [pc, #388]	; (80014e0 <MX_GPIO_Init+0x5e4>)
 800135c:	f004 fa92 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_CLK_Pin MII_TXD2_Pin MII_RXD0_Pin MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_TX_CLK_Pin|MII_TXD2_Pin|MII_RXD0_Pin|MII_RXD1_Pin;
 8001360:	233c      	movs	r3, #60	; 0x3c
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	2302      	movs	r3, #2
 8001366:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001370:	230b      	movs	r3, #11
 8001372:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001378:	4619      	mov	r1, r3
 800137a:	4855      	ldr	r0, [pc, #340]	; (80014d0 <MX_GPIO_Init+0x5d4>)
 800137c:	f004 fa82 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_STP_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8001380:	2301      	movs	r3, #1
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001384:	2302      	movs	r3, #2
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138c:	2303      	movs	r3, #3
 800138e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001390:	230a      	movs	r3, #10
 8001392:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001398:	4619      	mov	r1, r3
 800139a:	484d      	ldr	r0, [pc, #308]	; (80014d0 <MX_GPIO_Init+0x5d4>)
 800139c:	f004 fa72 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_CLK_Pin */
  GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80013a0:	2304      	movs	r3, #4
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80013b0:	2309      	movs	r3, #9
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013b8:	4619      	mov	r1, r3
 80013ba:	484a      	ldr	r0, [pc, #296]	; (80014e4 <MX_GPIO_Init+0x5e8>)
 80013bc:	f004 fa62 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_RX_CLK_Pin|MII_RX_DV_Pin;
 80013c0:	2382      	movs	r3, #130	; 0x82
 80013c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c4:	2302      	movs	r3, #2
 80013c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013d0:	230b      	movs	r3, #11
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d8:	4619      	mov	r1, r3
 80013da:	483f      	ldr	r0, [pc, #252]	; (80014d8 <MX_GPIO_Init+0x5dc>)
 80013dc:	f004 fa52 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80013e0:	2301      	movs	r3, #1
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e4:	2302      	movs	r3, #2
 80013e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013f0:	230a      	movs	r3, #10
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013f8:	4619      	mov	r1, r3
 80013fa:	4837      	ldr	r0, [pc, #220]	; (80014d8 <MX_GPIO_Init+0x5dc>)
 80013fc:	f004 fa42 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAR_HSYNC_Pin PAR_PCLK_Pin */
  GPIO_InitStruct.Pin = PAR_HSYNC_Pin|PAR_PCLK_Pin;
 8001400:	2350      	movs	r3, #80	; 0x50
 8001402:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001410:	230d      	movs	r3, #13
 8001412:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001418:	4619      	mov	r1, r3
 800141a:	482f      	ldr	r0, [pc, #188]	; (80014d8 <MX_GPIO_Init+0x5dc>)
 800141c:	f004 fa32 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RXD3_Pin MII_RXD2_Pin */
  GPIO_InitStruct.Pin = MII_RXD3_Pin|MII_RXD2_Pin;
 8001420:	23c0      	movs	r3, #192	; 0xc0
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001430:	230b      	movs	r3, #11
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001434:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001438:	4619      	mov	r1, r3
 800143a:	4828      	ldr	r0, [pc, #160]	; (80014dc <MX_GPIO_Init+0x5e0>)
 800143c:	f004 fa22 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SCKB_Pin */
  GPIO_InitStruct.Pin = SAI2_SCKB_Pin;
 8001440:	2304      	movs	r3, #4
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8001450:	2308      	movs	r3, #8
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SCKB_GPIO_Port, &GPIO_InitStruct);
 8001454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001458:	4619      	mov	r1, r3
 800145a:	481f      	ldr	r0, [pc, #124]	; (80014d8 <MX_GPIO_Init+0x5dc>)
 800145c:	f004 fa12 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8001460:	2328      	movs	r3, #40	; 0x28
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001464:	2302      	movs	r3, #2
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001470:	230a      	movs	r3, #10
 8001472:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001478:	4619      	mov	r1, r3
 800147a:	4817      	ldr	r0, [pc, #92]	; (80014d8 <MX_GPIO_Init+0x5dc>)
 800147c:	f004 fa02 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS2_DM_Pin */
  GPIO_InitStruct.Pin = USB_FS2_DM_Pin;
 8001480:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001492:	230c      	movs	r3, #12
 8001494:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(USB_FS2_DM_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149a:	4619      	mov	r1, r3
 800149c:	4811      	ldr	r0, [pc, #68]	; (80014e4 <MX_GPIO_Init+0x5e8>)
 800149e:	f004 f9f1 	bl	8005884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014b4:	4619      	mov	r1, r3
 80014b6:	480b      	ldr	r0, [pc, #44]	; (80014e4 <MX_GPIO_Init+0x5e8>)
 80014b8:	f004 f9e4 	bl	8005884 <HAL_GPIO_Init>

}
 80014bc:	bf00      	nop
 80014be:	3740      	adds	r7, #64	; 0x40
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40022800 	.word	0x40022800
 80014c8:	40021800 	.word	0x40021800
 80014cc:	40022400 	.word	0x40022400
 80014d0:	40020800 	.word	0x40020800
 80014d4:	40022000 	.word	0x40022000
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40021c00 	.word	0x40021c00
 80014e0:	40021400 	.word	0x40021400
 80014e4:	40020400 	.word	0x40020400

080014e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80014ec:	b672      	cpsid	i
}
 80014ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <Error_Handler+0x8>
	...

080014f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <HAL_MspInit+0x44>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <HAL_MspInit+0x44>)
 8001500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001504:	6413      	str	r3, [r2, #64]	; 0x40
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <HAL_MspInit+0x44>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150e:	607b      	str	r3, [r7, #4]
 8001510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <HAL_MspInit+0x44>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a08      	ldr	r2, [pc, #32]	; (8001538 <HAL_MspInit+0x44>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_MspInit+0x44>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	603b      	str	r3, [r7, #0]
 8001528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	; 0x28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <HAL_ADC_MspInit+0x74>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d124      	bne.n	80015a8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_ADC_MspInit+0x78>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <HAL_ADC_MspInit+0x78>)
 8001564:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001568:	6453      	str	r3, [r2, #68]	; 0x44
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_ADC_MspInit+0x78>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_ADC_MspInit+0x78>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a0e      	ldr	r2, [pc, #56]	; (80015b4 <HAL_ADC_MspInit+0x78>)
 800157c:	f043 0320 	orr.w	r3, r3, #32
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <HAL_ADC_MspInit+0x78>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0320 	and.w	r3, r3, #32
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF10     ------> ADC3_IN8
    */
    GPIO_InitStruct.Pin = Potentiometer_Pin;
 800158e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001594:	2303      	movs	r3, #3
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Potentiometer_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <HAL_ADC_MspInit+0x7c>)
 80015a4:	f004 f96e 	bl	8005884 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40012200 	.word	0x40012200
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40021400 	.word	0x40021400

080015bc <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	; 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80015d4:	4b63      	ldr	r3, [pc, #396]	; (8001764 <HAL_DFSDM_FilterMspInit+0x1a8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d145      	bne.n	8001668 <HAL_DFSDM_FilterMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80015dc:	4b62      	ldr	r3, [pc, #392]	; (8001768 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	3301      	adds	r3, #1
 80015e2:	4a61      	ldr	r2, [pc, #388]	; (8001768 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80015e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80015e6:	4b60      	ldr	r3, [pc, #384]	; (8001768 <HAL_DFSDM_FilterMspInit+0x1ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d10b      	bne.n	8001606 <HAL_DFSDM_FilterMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80015ee:	4b5f      	ldr	r3, [pc, #380]	; (800176c <HAL_DFSDM_FilterMspInit+0x1b0>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a5e      	ldr	r2, [pc, #376]	; (800176c <HAL_DFSDM_FilterMspInit+0x1b0>)
 80015f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b5c      	ldr	r3, [pc, #368]	; (800176c <HAL_DFSDM_FilterMspInit+0x1b0>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001606:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_DFSDM_FilterMspInit+0x1b0>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a58      	ldr	r2, [pc, #352]	; (800176c <HAL_DFSDM_FilterMspInit+0x1b0>)
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b56      	ldr	r3, [pc, #344]	; (800176c <HAL_DFSDM_FilterMspInit+0x1b0>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800161e:	2340      	movs	r3, #64	; 0x40
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 800162e:	230a      	movs	r3, #10
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	484d      	ldr	r0, [pc, #308]	; (8001770 <HAL_DFSDM_FilterMspInit+0x1b4>)
 800163a:	f004 f923 	bl	8005884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800163e:	2308      	movs	r3, #8
 8001640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800164e:	2303      	movs	r3, #3
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	4845      	ldr	r0, [pc, #276]	; (8001770 <HAL_DFSDM_FilterMspInit+0x1b4>)
 800165a:	f004 f913 	bl	8005884 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	4a3f      	ldr	r2, [pc, #252]	; (8001764 <HAL_DFSDM_FilterMspInit+0x1a8>)
 8001666:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a41      	ldr	r2, [pc, #260]	; (8001774 <HAL_DFSDM_FilterMspInit+0x1b8>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d136      	bne.n	80016e0 <HAL_DFSDM_FilterMspInit+0x124>
    hdma_dfsdm1_flt0.Instance = DMA2_Stream0;
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001674:	4a41      	ldr	r2, [pc, #260]	; (800177c <HAL_DFSDM_FilterMspInit+0x1c0>)
 8001676:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Channel = DMA_CHANNEL_8;
 8001678:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 800167a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800167e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001680:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8001686:	4b3c      	ldr	r3, [pc, #240]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800168c:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 800168e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001692:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 8001696:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800169a:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800169c:	4b36      	ldr	r3, [pc, #216]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 800169e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016a2:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80016a4:	4b34      	ldr	r3, [pc, #208]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_HIGH;
 80016aa:	4b33      	ldr	r3, [pc, #204]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80016ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016b0:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt0.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b2:	4b31      	ldr	r3, [pc, #196]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80016b8:	482f      	ldr	r0, [pc, #188]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80016ba:	f003 f97f 	bl	80049bc <HAL_DMA_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <HAL_DFSDM_FilterMspInit+0x10c>
    {
      Error_Handler();
 80016c4:	f7ff ff10 	bl	80014e8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a2b      	ldr	r2, [pc, #172]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80016cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ce:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	4a28      	ldr	r2, [pc, #160]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80016d8:	629a      	str	r2, [r3, #40]	; 0x28
 80016da:	4a27      	ldr	r2, [pc, #156]	; (8001778 <HAL_DFSDM_FilterMspInit+0x1bc>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6393      	str	r3, [r2, #56]	; 0x38
  }

    /* DFSDM1_FLT1 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter1){
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a26      	ldr	r2, [pc, #152]	; (8001780 <HAL_DFSDM_FilterMspInit+0x1c4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d137      	bne.n	800175a <HAL_DFSDM_FilterMspInit+0x19e>
    hdma_dfsdm1_flt1.Instance = DMA2_Stream1;
 80016ea:	4b26      	ldr	r3, [pc, #152]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80016ec:	4a26      	ldr	r2, [pc, #152]	; (8001788 <HAL_DFSDM_FilterMspInit+0x1cc>)
 80016ee:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt1.Init.Channel = DMA_CHANNEL_8;
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80016f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016f6:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fe:	4b21      	ldr	r3, [pc, #132]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt1.Init.MemInc = DMA_MINC_ENABLE;
 8001704:	4b1f      	ldr	r3, [pc, #124]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800170a:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800170c:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800170e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001712:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001714:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001716:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800171a:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt1.Init.Mode = DMA_CIRCULAR;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800171e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001722:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt1.Init.Priority = DMA_PRIORITY_HIGH;
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001726:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800172a:	621a      	str	r2, [r3, #32]
    hdma_dfsdm1_flt1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dfsdm1_flt1) != HAL_OK)
 8001732:	4814      	ldr	r0, [pc, #80]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001734:	f003 f942 	bl	80049bc <HAL_DMA_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_DFSDM_FilterMspInit+0x186>
    {
      Error_Handler();
 800173e:	f7ff fed3 	bl	80014e8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt1);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001752:	629a      	str	r2, [r3, #40]	; 0x28
 8001754:	4a0b      	ldr	r2, [pc, #44]	; (8001784 <HAL_DFSDM_FilterMspInit+0x1c8>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6393      	str	r3, [r2, #56]	; 0x38
  }

}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20006550 	.word	0x20006550
 8001768:	2000654c 	.word	0x2000654c
 800176c:	40023800 	.word	0x40023800
 8001770:	40020c00 	.word	0x40020c00
 8001774:	40017500 	.word	0x40017500
 8001778:	200061d4 	.word	0x200061d4
 800177c:	40026410 	.word	0x40026410
 8001780:	40017580 	.word	0x40017580
 8001784:	20006234 	.word	0x20006234
 8001788:	40026428 	.word	0x40026428

0800178c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	; 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 80017a4:	4b26      	ldr	r3, [pc, #152]	; (8001840 <HAL_DFSDM_ChannelMspInit+0xb4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d145      	bne.n	8001838 <HAL_DFSDM_ChannelMspInit+0xac>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80017ac:	4b25      	ldr	r3, [pc, #148]	; (8001844 <HAL_DFSDM_ChannelMspInit+0xb8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	3301      	adds	r3, #1
 80017b2:	4a24      	ldr	r2, [pc, #144]	; (8001844 <HAL_DFSDM_ChannelMspInit+0xb8>)
 80017b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80017b6:	4b23      	ldr	r3, [pc, #140]	; (8001844 <HAL_DFSDM_ChannelMspInit+0xb8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d10b      	bne.n	80017d6 <HAL_DFSDM_ChannelMspInit+0x4a>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80017be:	4b22      	ldr	r3, [pc, #136]	; (8001848 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a21      	ldr	r2, [pc, #132]	; (8001848 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017dc:	f043 0308 	orr.w	r3, r3, #8
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PD6     ------> DFSDM1_DATIN1
    PD3     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ee:	2340      	movs	r3, #64	; 0x40
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_DFSDM1;
 80017fe:	230a      	movs	r3, #10
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4810      	ldr	r0, [pc, #64]	; (800184c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800180a:	f004 f83b 	bl	8005884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800180e:	2308      	movs	r3, #8
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 800181e:	2303      	movs	r3, #3
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	4808      	ldr	r0, [pc, #32]	; (800184c <HAL_DFSDM_ChannelMspInit+0xc0>)
 800182a:	f004 f82b 	bl	8005884 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	4a02      	ldr	r2, [pc, #8]	; (8001840 <HAL_DFSDM_ChannelMspInit+0xb4>)
 8001836:	6013      	str	r3, [r2, #0]
  }

}
 8001838:	bf00      	nop
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20006550 	.word	0x20006550
 8001844:	2000654c 	.word	0x2000654c
 8001848:	40023800 	.word	0x40023800
 800184c:	40020c00 	.word	0x40020c00

08001850 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_DSI_MspInit+0x7c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d127      	bne.n	80018c2 <HAL_DSI_MspInit+0x72>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_DSI_MspInit+0x80>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_DSI_MspInit+0x80>)
 8001878:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800187c:	6453      	str	r3, [r2, #68]	; 0x44
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_DSI_MspInit+0x80>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001882:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_DSI_MspInit+0x80>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <HAL_DSI_MspInit+0x80>)
 8001890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_DSI_MspInit+0x80>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 80018a2:	2304      	movs	r3, #4
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80018b2:	230d      	movs	r3, #13
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <HAL_DSI_MspInit+0x84>)
 80018be:	f003 ffe1 	bl	8005884 <HAL_GPIO_Init>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40016c00 	.word	0x40016c00
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40022400 	.word	0x40022400

080018d8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0ae      	sub	sp, #184	; 0xb8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2290      	movs	r2, #144	; 0x90
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f009 fd35 	bl	800b368 <memset>
  if(hsd->Instance==SDMMC1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a74      	ldr	r2, [pc, #464]	; (8001ad4 <HAL_SD_MspInit+0x1fc>)
 8001904:	4293      	cmp	r3, r2
 8001906:	f040 80e0 	bne.w	8001aca <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800190a:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 800190e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001910:	2300      	movs	r3, #0
 8001912:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001916:	2300      	movs	r3, #0
 8001918:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4618      	mov	r0, r3
 8001922:	f005 fc1b 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 800192c:	f7ff fddc 	bl	80014e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001930:	4b69      	ldr	r3, [pc, #420]	; (8001ad8 <HAL_SD_MspInit+0x200>)
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	4a68      	ldr	r2, [pc, #416]	; (8001ad8 <HAL_SD_MspInit+0x200>)
 8001936:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800193a:	6453      	str	r3, [r2, #68]	; 0x44
 800193c:	4b66      	ldr	r3, [pc, #408]	; (8001ad8 <HAL_SD_MspInit+0x200>)
 800193e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001948:	4b63      	ldr	r3, [pc, #396]	; (8001ad8 <HAL_SD_MspInit+0x200>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	4a62      	ldr	r2, [pc, #392]	; (8001ad8 <HAL_SD_MspInit+0x200>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	6313      	str	r3, [r2, #48]	; 0x30
 8001954:	4b60      	ldr	r3, [pc, #384]	; (8001ad8 <HAL_SD_MspInit+0x200>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001960:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <HAL_SD_MspInit+0x200>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4a5c      	ldr	r2, [pc, #368]	; (8001ad8 <HAL_SD_MspInit+0x200>)
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	6313      	str	r3, [r2, #48]	; 0x30
 800196c:	4b5a      	ldr	r3, [pc, #360]	; (8001ad8 <HAL_SD_MspInit+0x200>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SD1_CLK_Pin|SD1_D3_Pin|SD1_D2_Pin|SD1_D1_Pin
 8001978:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800197c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |SD1_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001992:	230c      	movs	r3, #12
 8001994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001998:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800199c:	4619      	mov	r1, r3
 800199e:	484f      	ldr	r0, [pc, #316]	; (8001adc <HAL_SD_MspInit+0x204>)
 80019a0:	f003 ff70 	bl	8005884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD1_CMD_Pin;
 80019a4:	2304      	movs	r3, #4
 80019a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019bc:	230c      	movs	r3, #12
 80019be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SD1_CMD_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4845      	ldr	r0, [pc, #276]	; (8001ae0 <HAL_SD_MspInit+0x208>)
 80019ca:	f003 ff5b 	bl	8005884 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80019ce:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 80019d0:	4a45      	ldr	r2, [pc, #276]	; (8001ae8 <HAL_SD_MspInit+0x210>)
 80019d2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80019d4:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 80019d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019da:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019dc:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e2:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019e8:	4b3e      	ldr	r3, [pc, #248]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 80019ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ee:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019f0:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 80019f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019f6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019f8:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 80019fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019fe:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001a00:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 8001a02:	2220      	movs	r2, #32
 8001a04:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a0c:	4b35      	ldr	r3, [pc, #212]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 8001a0e:	2204      	movs	r2, #4
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 8001a14:	2203      	movs	r2, #3
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 8001a1a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 8001a22:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001a28:	482e      	ldr	r0, [pc, #184]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 8001a2a:	f002 ffc7 	bl	80049bc <HAL_DMA_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001a34:	f7ff fd58 	bl	80014e8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a3e:	4a29      	ldr	r2, [pc, #164]	; (8001ae4 <HAL_SD_MspInit+0x20c>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a46:	4a2a      	ldr	r2, [pc, #168]	; (8001af0 <HAL_SD_MspInit+0x218>)
 8001a48:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001a4a:	4b28      	ldr	r3, [pc, #160]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a4c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a50:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a52:	4b26      	ldr	r3, [pc, #152]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a54:	2240      	movs	r2, #64	; 0x40
 8001a56:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a64:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a66:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a6c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a74:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a78:	2220      	movs	r2, #32
 8001a7a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a84:	2204      	movs	r2, #4
 8001a86:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a94:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001a98:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a9c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001a9e:	4813      	ldr	r0, [pc, #76]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001aa0:	f002 ff8c 	bl	80049bc <HAL_DMA_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001aaa:	f7ff fd1d 	bl	80014e8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a0e      	ldr	r2, [pc, #56]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001ab2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ab4:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_SD_MspInit+0x214>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	2031      	movs	r0, #49	; 0x31
 8001ac0:	f002 fb33 	bl	800412a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001ac4:	2031      	movs	r0, #49	; 0x31
 8001ac6:	f002 fb4c 	bl	8004162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001aca:	bf00      	nop
 8001acc:	37b8      	adds	r7, #184	; 0xb8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020c00 	.word	0x40020c00
 8001ae4:	200063b8 	.word	0x200063b8
 8001ae8:	40026458 	.word	0x40026458
 8001aec:	20006418 	.word	0x20006418
 8001af0:	400264a0 	.word	0x400264a0

08001af4 <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b0ae      	sub	sp, #184	; 0xb8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2290      	movs	r2, #144	; 0x90
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f009 fc27 	bl	800b368 <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8001b22:	d144      	bne.n	8001bae <HAL_SPDIFRX_MspInit+0xba>

  /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8001b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001b2a:	23c0      	movs	r3, #192	; 0xc0
 8001b2c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001b32:	2302      	movs	r3, #2
 8001b34:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2SDivQ = 1;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4618      	mov	r0, r3
 8001b44:	f005 fb0a 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_SPDIFRX_MspInit+0x5e>
    {
      Error_Handler();
 8001b4e:	f7ff fccb 	bl	80014e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <HAL_SPDIFRX_MspInit+0xc4>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PG12     ------> SPDIFRX_IN1
    */
    GPIO_InitStruct.Pin = SPDIF_RX1_Pin;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(SPDIF_RX1_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <HAL_SPDIFRX_MspInit+0xc8>)
 8001baa:	f003 fe6b 	bl	8005884 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8001bae:	bf00      	nop
 8001bb0:	37b8      	adds	r7, #184	; 0xb8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40021800 	.word	0x40021800

08001bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0ae      	sub	sp, #184	; 0xb8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2290      	movs	r2, #144	; 0x90
 8001bde:	2100      	movs	r1, #0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f009 fbc1 	bl	800b368 <memset>
  if(huart->Instance==USART1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <HAL_UART_MspInit+0xb0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d13b      	bne.n	8001c68 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001bf0:	2340      	movs	r3, #64	; 0x40
 8001bf2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f005 faad 	bl	800715c <HAL_RCCEx_PeriphCLKConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c08:	f7ff fc6e 	bl	80014e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <HAL_UART_MspInit+0xb4>)
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <HAL_UART_MspInit+0xb4>)
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	6453      	str	r3, [r2, #68]	; 0x44
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_UART_MspInit+0xb4>)
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <HAL_UART_MspInit+0xb4>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	4a12      	ldr	r2, [pc, #72]	; (8001c74 <HAL_UART_MspInit+0xb4>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <HAL_UART_MspInit+0xb4>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = RS232_IrDA_RX_Pin|RS2320IrDA0T_Pin;
 8001c3c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c50:	2303      	movs	r3, #3
 8001c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c56:	2307      	movs	r3, #7
 8001c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4805      	ldr	r0, [pc, #20]	; (8001c78 <HAL_UART_MspInit+0xb8>)
 8001c64:	f003 fe0e 	bl	8005884 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c68:	bf00      	nop
 8001c6a:	37b8      	adds	r7, #184	; 0xb8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40011000 	.word	0x40011000
 8001c74:	40023800 	.word	0x40023800
 8001c78:	40020000 	.word	0x40020000

08001c7c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a2d      	ldr	r2, [pc, #180]	; (8001d40 <HAL_SAI_MspInit+0xc4>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d154      	bne.n	8001d38 <HAL_SAI_MspInit+0xbc>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001c8e:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_SAI_MspInit+0xc8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10b      	bne.n	8001cae <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001c96:	4b2c      	ldr	r3, [pc, #176]	; (8001d48 <HAL_SAI_MspInit+0xcc>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4a2b      	ldr	r2, [pc, #172]	; (8001d48 <HAL_SAI_MspInit+0xcc>)
 8001c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca2:	4b29      	ldr	r3, [pc, #164]	; (8001d48 <HAL_SAI_MspInit+0xcc>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001cae:	4b25      	ldr	r3, [pc, #148]	; (8001d44 <HAL_SAI_MspInit+0xc8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <HAL_SAI_MspInit+0xc8>)
 8001cb6:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PG7     ------> SAI1_MCLK_A
    PF6     ------> SAI1_SD_B
    PC1     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001cb8:	2330      	movs	r3, #48	; 0x30
 8001cba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001cc8:	2306      	movs	r3, #6
 8001cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	481e      	ldr	r0, [pc, #120]	; (8001d4c <HAL_SAI_MspInit+0xd0>)
 8001cd4:	f003 fdd6 	bl	8005884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001ce8:	2306      	movs	r3, #6
 8001cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4817      	ldr	r0, [pc, #92]	; (8001d50 <HAL_SAI_MspInit+0xd4>)
 8001cf4:	f003 fdc6 	bl	8005884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cf8:	2340      	movs	r3, #64	; 0x40
 8001cfa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d08:	2306      	movs	r3, #6
 8001d0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	4619      	mov	r1, r3
 8001d12:	4810      	ldr	r0, [pc, #64]	; (8001d54 <HAL_SAI_MspInit+0xd8>)
 8001d14:	f003 fdb6 	bl	8005884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8001d28:	2306      	movs	r3, #6
 8001d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	4619      	mov	r1, r3
 8001d32:	4809      	ldr	r0, [pc, #36]	; (8001d58 <HAL_SAI_MspInit+0xdc>)
 8001d34:	f003 fda6 	bl	8005884 <HAL_GPIO_Init>

    }
}
 8001d38:	bf00      	nop
 8001d3a:	3720      	adds	r7, #32
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40015804 	.word	0x40015804
 8001d44:	20006554 	.word	0x20006554
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40021800 	.word	0x40021800
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40020800 	.word	0x40020800

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <NMI_Handler+0x4>

08001d62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d66:	e7fe      	b.n	8001d66 <HardFault_Handler+0x4>

08001d68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d6c:	e7fe      	b.n	8001d6c <MemManage_Handler+0x4>

08001d6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d72:	e7fe      	b.n	8001d72 <BusFault_Handler+0x4>

08001d74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <UsageFault_Handler+0x4>

08001d7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da8:	f001 fe0c 	bl	80039c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <SDMMC1_IRQHandler+0x10>)
 8001db6:	f006 fd17 	bl	80087e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20006334 	.word	0x20006334

08001dc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <DMA2_Stream0_IRQHandler+0x10>)
 8001dca:	f002 ff27 	bl	8004c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200061d4 	.word	0x200061d4

08001dd8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt1);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <DMA2_Stream1_IRQHandler+0x10>)
 8001dde:	f002 ff1d 	bl	8004c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20006234 	.word	0x20006234

08001dec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <DMA2_Stream3_IRQHandler+0x10>)
 8001df2:	f002 ff13 	bl	8004c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200063b8 	.word	0x200063b8

08001e00 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <DMA2_Stream6_IRQHandler+0x10>)
 8001e06:	f002 ff09 	bl	8004c1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20006418 	.word	0x20006418

08001e14 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <SystemInit+0x20>)
 8001e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1e:	4a05      	ldr	r2, [pc, #20]	; (8001e34 <SystemInit+0x20>)
 8001e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <checkMicrophone>:

extern SAI_HandleTypeDef hsai_BlockA1;

//verifies if thhe microphone input buffer has data and plays it back
void checkMicrophone()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
	//check if the input buffer is full
	if((DmaLeftRecHalfBuffCplt == 1) && (DmaRightRecHalfBuffCplt == 1))
 8001e3e:	4b5f      	ldr	r3, [pc, #380]	; (8001fbc <checkMicrophone+0x184>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d167      	bne.n	8001f16 <checkMicrophone+0xde>
 8001e46:	4b5e      	ldr	r3, [pc, #376]	; (8001fc0 <checkMicrophone+0x188>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d163      	bne.n	8001f16 <checkMicrophone+0xde>
	{
		//takes the data from the receiving buffer and sends to the playing buffer
		for(int i = 0; i < 1024; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
 8001e52:	e037      	b.n	8001ec4 <checkMicrophone+0x8c>
		{
			PlayBuff[2*i]     = SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 8001e54:	4a5b      	ldr	r2, [pc, #364]	; (8001fc4 <checkMicrophone+0x18c>)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5c:	121b      	asrs	r3, r3, #8
 8001e5e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001e62:	db0b      	blt.n	8001e7c <checkMicrophone+0x44>
 8001e64:	4a57      	ldr	r2, [pc, #348]	; (8001fc4 <checkMicrophone+0x18c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	121b      	asrs	r3, r3, #8
 8001e6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001e72:	4293      	cmp	r3, r2
 8001e74:	bfa8      	it	ge
 8001e76:	4613      	movge	r3, r2
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	e000      	b.n	8001e7e <checkMicrophone+0x46>
 8001e7c:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <checkMicrophone+0x190>)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4952      	ldr	r1, [pc, #328]	; (8001fcc <checkMicrophone+0x194>)
 8001e84:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PlayBuff[(2*i)+1] = SaturaLH((RightRecBuff[i] >> 8), -32768, 32767);
 8001e88:	4a51      	ldr	r2, [pc, #324]	; (8001fd0 <checkMicrophone+0x198>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e90:	121b      	asrs	r3, r3, #8
 8001e92:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001e96:	db0b      	blt.n	8001eb0 <checkMicrophone+0x78>
 8001e98:	4a4d      	ldr	r2, [pc, #308]	; (8001fd0 <checkMicrophone+0x198>)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ea0:	121b      	asrs	r3, r3, #8
 8001ea2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	bfa8      	it	ge
 8001eaa:	4613      	movge	r3, r2
 8001eac:	b21a      	sxth	r2, r3
 8001eae:	e000      	b.n	8001eb2 <checkMicrophone+0x7a>
 8001eb0:	4a45      	ldr	r2, [pc, #276]	; (8001fc8 <checkMicrophone+0x190>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	4944      	ldr	r1, [pc, #272]	; (8001fcc <checkMicrophone+0x194>)
 8001eba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 0; i < 1024; i++)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eca:	dbc3      	blt.n	8001e54 <checkMicrophone+0x1c>
		}
		//configures playback
		if(PlaybackStarted == 0)
 8001ecc:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <checkMicrophone+0x19c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d11a      	bne.n	8001f0a <checkMicrophone+0xd2>
		{
			if(0 != audio_drv->Play(AUDIO_I2C_ADDRESS, (uint16_t *) &PlayBuff[0], 4096))
 8001ed4:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <checkMicrophone+0x1a0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ede:	493b      	ldr	r1, [pc, #236]	; (8001fcc <checkMicrophone+0x194>)
 8001ee0:	2034      	movs	r0, #52	; 0x34
 8001ee2:	4798      	blx	r3
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <checkMicrophone+0xb6>
			{
				Error_Handler();
 8001eea:	f7ff fafd 	bl	80014e8 <Error_Handler>
			}
			if(HAL_OK != HAL_SAI_Transmit_DMA(&hsai_BlockA1, (uint8_t *) &PlayBuff[0], 4096))
 8001eee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ef2:	4936      	ldr	r1, [pc, #216]	; (8001fcc <checkMicrophone+0x194>)
 8001ef4:	4839      	ldr	r0, [pc, #228]	; (8001fdc <checkMicrophone+0x1a4>)
 8001ef6:	f006 f849 	bl	8007f8c <HAL_SAI_Transmit_DMA>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <checkMicrophone+0xcc>
			{
				Error_Handler();
 8001f00:	f7ff faf2 	bl	80014e8 <Error_Handler>
			}
			PlaybackStarted = 1;
 8001f04:	4b33      	ldr	r3, [pc, #204]	; (8001fd4 <checkMicrophone+0x19c>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
		}
		//frees
		DmaLeftRecHalfBuffCplt  = 0;
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <checkMicrophone+0x184>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
		DmaRightRecHalfBuffCplt = 0;
 8001f10:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <checkMicrophone+0x188>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
	}
	if((DmaLeftRecBuffCplt == 1) && (DmaRightRecBuffCplt == 1))
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <checkMicrophone+0x1a8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d149      	bne.n	8001fb2 <checkMicrophone+0x17a>
 8001f1e:	4b31      	ldr	r3, [pc, #196]	; (8001fe4 <checkMicrophone+0x1ac>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d145      	bne.n	8001fb2 <checkMicrophone+0x17a>
	{
		for(int i = 1024; i < 2048; i++)
 8001f26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	e037      	b.n	8001f9e <checkMicrophone+0x166>
		{
			PlayBuff[2*i]     = SaturaLH((LeftRecBuff[i] >> 8), -32768, 32767);
 8001f2e:	4a25      	ldr	r2, [pc, #148]	; (8001fc4 <checkMicrophone+0x18c>)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	121b      	asrs	r3, r3, #8
 8001f38:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001f3c:	db0b      	blt.n	8001f56 <checkMicrophone+0x11e>
 8001f3e:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <checkMicrophone+0x18c>)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f46:	121b      	asrs	r3, r3, #8
 8001f48:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	bfa8      	it	ge
 8001f50:	4613      	movge	r3, r2
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	e000      	b.n	8001f58 <checkMicrophone+0x120>
 8001f56:	4a1c      	ldr	r2, [pc, #112]	; (8001fc8 <checkMicrophone+0x190>)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	491b      	ldr	r1, [pc, #108]	; (8001fcc <checkMicrophone+0x194>)
 8001f5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			PlayBuff[(2*i)+1] = SaturaLH((RightRecBuff[i] >> 8), -32768, 32767);
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <checkMicrophone+0x198>)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6a:	121b      	asrs	r3, r3, #8
 8001f6c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001f70:	db0b      	blt.n	8001f8a <checkMicrophone+0x152>
 8001f72:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <checkMicrophone+0x198>)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	121b      	asrs	r3, r3, #8
 8001f7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001f80:	4293      	cmp	r3, r2
 8001f82:	bfa8      	it	ge
 8001f84:	4613      	movge	r3, r2
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	e000      	b.n	8001f8c <checkMicrophone+0x154>
 8001f8a:	4a0f      	ldr	r2, [pc, #60]	; (8001fc8 <checkMicrophone+0x190>)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	3301      	adds	r3, #1
 8001f92:	490e      	ldr	r1, [pc, #56]	; (8001fcc <checkMicrophone+0x194>)
 8001f94:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int i = 1024; i < 2048; i++)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001fa4:	dbc3      	blt.n	8001f2e <checkMicrophone+0xf6>
		}
		DmaLeftRecBuffCplt  = 0;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <checkMicrophone+0x1a8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
		DmaRightRecBuffCplt = 0;
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <checkMicrophone+0x1ac>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
	}
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	2000605c 	.word	0x2000605c
 8001fc0:	20006064 	.word	0x20006064
 8001fc4:	2000005c 	.word	0x2000005c
 8001fc8:	ffff8000 	.word	0xffff8000
 8001fcc:	2000405c 	.word	0x2000405c
 8001fd0:	2000205c 	.word	0x2000205c
 8001fd4:	2000606c 	.word	0x2000606c
 8001fd8:	20006070 	.word	0x20006070
 8001fdc:	200062b0 	.word	0x200062b0
 8001fe0:	20006060 	.word	0x20006060
 8001fe4:	20006068 	.word	0x20006068

08001fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002020 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fec:	480d      	ldr	r0, [pc, #52]	; (8002024 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fee:	490e      	ldr	r1, [pc, #56]	; (8002028 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	; (800202c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff4:	e002      	b.n	8001ffc <LoopCopyDataInit>

08001ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffa:	3304      	adds	r3, #4

08001ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002000:	d3f9      	bcc.n	8001ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002004:	4c0b      	ldr	r4, [pc, #44]	; (8002034 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002008:	e001      	b.n	800200e <LoopFillZerobss>

0800200a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800200c:	3204      	adds	r2, #4

0800200e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800200e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002010:	d3fb      	bcc.n	800200a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002012:	f7ff feff 	bl	8001e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002016:	f009 f983 	bl	800b320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201a:	f7fe fb43 	bl	80006a4 <main>
  bx  lr    
 800201e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002020:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002028:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800202c:	0800b3d4 	.word	0x0800b3d4
  ldr r2, =_sbss
 8002030:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8002034:	200065f8 	.word	0x200065f8

08002038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC_IRQHandler>
	...

0800203c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af00      	add	r7, sp, #0
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	4603      	mov	r3, r0
 8002046:	81fb      	strh	r3, [r7, #14]
 8002048:	460b      	mov	r3, r1
 800204a:	81bb      	strh	r3, [r7, #12]
 800204c:	4613      	mov	r3, r2
 800204e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8002054:	89bb      	ldrh	r3, [r7, #12]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800205a:	89bb      	ldrh	r3, [r7, #12]
 800205c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002060:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002066:	f001 fc0b 	bl	8003880 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800206a:	89fb      	ldrh	r3, [r7, #14]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2203      	movs	r2, #3
 8002070:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002074:	4618      	mov	r0, r3
 8002076:	f001 fafb 	bl	8003670 <CODEC_IO_Write>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4413      	add	r3, r2
 8002082:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8002084:	89fb      	ldrh	r3, [r7, #14]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2200      	movs	r2, #0
 800208a:	f640 0117 	movw	r1, #2071	; 0x817
 800208e:	4618      	mov	r0, r3
 8002090:	f001 faee 	bl	8003670 <CODEC_IO_Write>
 8002094:	4603      	mov	r3, r0
 8002096:	461a      	mov	r2, r3
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	4413      	add	r3, r2
 800209c:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 800209e:	89fb      	ldrh	r3, [r7, #14]
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80020a8:	4618      	mov	r0, r3
 80020aa:	f001 fae1 	bl	8003670 <CODEC_IO_Write>
 80020ae:	4603      	mov	r3, r0
 80020b0:	461a      	mov	r2, r3
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	4413      	add	r3, r2
 80020b6:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80020b8:	89fb      	ldrh	r3, [r7, #14]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	226c      	movs	r2, #108	; 0x6c
 80020be:	2139      	movs	r1, #57	; 0x39
 80020c0:	4618      	mov	r0, r3
 80020c2:	f001 fad5 	bl	8003670 <CODEC_IO_Write>
 80020c6:	4603      	mov	r3, r0
 80020c8:	461a      	mov	r2, r3
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80020d0:	8afb      	ldrh	r3, [r7, #22]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80020d6:	89fb      	ldrh	r3, [r7, #14]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2213      	movs	r2, #19
 80020dc:	2101      	movs	r1, #1
 80020de:	4618      	mov	r0, r3
 80020e0:	f001 fac6 	bl	8003670 <CODEC_IO_Write>
 80020e4:	4603      	mov	r3, r0
 80020e6:	461a      	mov	r2, r3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	4413      	add	r3, r2
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	e00b      	b.n	8002108 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80020f0:	89fb      	ldrh	r3, [r7, #14]
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2203      	movs	r2, #3
 80020f6:	2101      	movs	r1, #1
 80020f8:	4618      	mov	r0, r3
 80020fa:	f001 fab9 	bl	8003670 <CODEC_IO_Write>
 80020fe:	4603      	mov	r3, r0
 8002100:	461a      	mov	r2, r3
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	4413      	add	r3, r2
 8002106:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8002108:	2032      	movs	r0, #50	; 0x32
 800210a:	f001 fc13 	bl	8003934 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800210e:	8b3b      	ldrh	r3, [r7, #24]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 815f 	beq.w	80023d4 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8002116:	4bae      	ldr	r3, [pc, #696]	; (80023d0 <wm8994_Init+0x394>)
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 800211c:	8b3b      	ldrh	r3, [r7, #24]
 800211e:	2b03      	cmp	r3, #3
 8002120:	f000 808c 	beq.w	800223c <wm8994_Init+0x200>
 8002124:	2b03      	cmp	r3, #3
 8002126:	f300 8111 	bgt.w	800234c <wm8994_Init+0x310>
 800212a:	2b01      	cmp	r3, #1
 800212c:	d002      	beq.n	8002134 <wm8994_Init+0xf8>
 800212e:	2b02      	cmp	r3, #2
 8002130:	d042      	beq.n	80021b8 <wm8994_Init+0x17c>
 8002132:	e10b      	b.n	800234c <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	f640 420c 	movw	r2, #3084	; 0xc0c
 800213c:	2105      	movs	r1, #5
 800213e:	4618      	mov	r0, r3
 8002140:	f001 fa96 	bl	8003670 <CODEC_IO_Write>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	4413      	add	r3, r2
 800214c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800214e:	89fb      	ldrh	r3, [r7, #14]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2200      	movs	r2, #0
 8002154:	f240 6101 	movw	r1, #1537	; 0x601
 8002158:	4618      	mov	r0, r3
 800215a:	f001 fa89 	bl	8003670 <CODEC_IO_Write>
 800215e:	4603      	mov	r3, r0
 8002160:	461a      	mov	r2, r3
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	4413      	add	r3, r2
 8002166:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002168:	89fb      	ldrh	r3, [r7, #14]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2200      	movs	r2, #0
 800216e:	f240 6102 	movw	r1, #1538	; 0x602
 8002172:	4618      	mov	r0, r3
 8002174:	f001 fa7c 	bl	8003670 <CODEC_IO_Write>
 8002178:	4603      	mov	r3, r0
 800217a:	461a      	mov	r2, r3
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	4413      	add	r3, r2
 8002180:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002182:	89fb      	ldrh	r3, [r7, #14]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2202      	movs	r2, #2
 8002188:	f240 6104 	movw	r1, #1540	; 0x604
 800218c:	4618      	mov	r0, r3
 800218e:	f001 fa6f 	bl	8003670 <CODEC_IO_Write>
 8002192:	4603      	mov	r3, r0
 8002194:	461a      	mov	r2, r3
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	4413      	add	r3, r2
 800219a:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800219c:	89fb      	ldrh	r3, [r7, #14]
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2202      	movs	r2, #2
 80021a2:	f240 6105 	movw	r1, #1541	; 0x605
 80021a6:	4618      	mov	r0, r3
 80021a8:	f001 fa62 	bl	8003670 <CODEC_IO_Write>
 80021ac:	4603      	mov	r3, r0
 80021ae:	461a      	mov	r2, r3
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4413      	add	r3, r2
 80021b4:	61fb      	str	r3, [r7, #28]
      break;
 80021b6:	e110      	b.n	80023da <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80021b8:	89fb      	ldrh	r3, [r7, #14]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f240 3203 	movw	r2, #771	; 0x303
 80021c0:	2105      	movs	r1, #5
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 fa54 	bl	8003670 <CODEC_IO_Write>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4413      	add	r3, r2
 80021d0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80021d2:	89fb      	ldrh	r3, [r7, #14]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2201      	movs	r2, #1
 80021d8:	f240 6101 	movw	r1, #1537	; 0x601
 80021dc:	4618      	mov	r0, r3
 80021de:	f001 fa47 	bl	8003670 <CODEC_IO_Write>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	4413      	add	r3, r2
 80021ea:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80021ec:	89fb      	ldrh	r3, [r7, #14]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2201      	movs	r2, #1
 80021f2:	f240 6102 	movw	r1, #1538	; 0x602
 80021f6:	4618      	mov	r0, r3
 80021f8:	f001 fa3a 	bl	8003670 <CODEC_IO_Write>
 80021fc:	4603      	mov	r3, r0
 80021fe:	461a      	mov	r2, r3
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	4413      	add	r3, r2
 8002204:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8002206:	89fb      	ldrh	r3, [r7, #14]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2200      	movs	r2, #0
 800220c:	f240 6104 	movw	r1, #1540	; 0x604
 8002210:	4618      	mov	r0, r3
 8002212:	f001 fa2d 	bl	8003670 <CODEC_IO_Write>
 8002216:	4603      	mov	r3, r0
 8002218:	461a      	mov	r2, r3
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	4413      	add	r3, r2
 800221e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8002220:	89fb      	ldrh	r3, [r7, #14]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2200      	movs	r2, #0
 8002226:	f240 6105 	movw	r1, #1541	; 0x605
 800222a:	4618      	mov	r0, r3
 800222c:	f001 fa20 	bl	8003670 <CODEC_IO_Write>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	4413      	add	r3, r2
 8002238:	61fb      	str	r3, [r7, #28]
      break;
 800223a:	e0ce      	b.n	80023da <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800223c:	8afb      	ldrh	r3, [r7, #22]
 800223e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002242:	d141      	bne.n	80022c8 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8002244:	89fb      	ldrh	r3, [r7, #14]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f640 720f 	movw	r2, #3855	; 0xf0f
 800224c:	2105      	movs	r1, #5
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fa0e 	bl	8003670 <CODEC_IO_Write>
 8002254:	4603      	mov	r3, r0
 8002256:	461a      	mov	r2, r3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	4413      	add	r3, r2
 800225c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2203      	movs	r2, #3
 8002264:	f240 6101 	movw	r1, #1537	; 0x601
 8002268:	4618      	mov	r0, r3
 800226a:	f001 fa01 	bl	8003670 <CODEC_IO_Write>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	4413      	add	r3, r2
 8002276:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2203      	movs	r2, #3
 800227e:	f240 6102 	movw	r1, #1538	; 0x602
 8002282:	4618      	mov	r0, r3
 8002284:	f001 f9f4 	bl	8003670 <CODEC_IO_Write>
 8002288:	4603      	mov	r3, r0
 800228a:	461a      	mov	r2, r3
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8002292:	89fb      	ldrh	r3, [r7, #14]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2203      	movs	r2, #3
 8002298:	f240 6104 	movw	r1, #1540	; 0x604
 800229c:	4618      	mov	r0, r3
 800229e:	f001 f9e7 	bl	8003670 <CODEC_IO_Write>
 80022a2:	4603      	mov	r3, r0
 80022a4:	461a      	mov	r2, r3
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	4413      	add	r3, r2
 80022aa:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80022ac:	89fb      	ldrh	r3, [r7, #14]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2203      	movs	r2, #3
 80022b2:	f240 6105 	movw	r1, #1541	; 0x605
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 f9da 	bl	8003670 <CODEC_IO_Write>
 80022bc:	4603      	mov	r3, r0
 80022be:	461a      	mov	r2, r3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80022c6:	e088      	b.n	80023da <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80022c8:	89fb      	ldrh	r3, [r7, #14]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	f640 720f 	movw	r2, #3855	; 0xf0f
 80022d0:	2105      	movs	r1, #5
 80022d2:	4618      	mov	r0, r3
 80022d4:	f001 f9cc 	bl	8003670 <CODEC_IO_Write>
 80022d8:	4603      	mov	r3, r0
 80022da:	461a      	mov	r2, r3
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	4413      	add	r3, r2
 80022e0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80022e2:	89fb      	ldrh	r3, [r7, #14]
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2201      	movs	r2, #1
 80022e8:	f240 6101 	movw	r1, #1537	; 0x601
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 f9bf 	bl	8003670 <CODEC_IO_Write>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	4413      	add	r3, r2
 80022fa:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80022fc:	89fb      	ldrh	r3, [r7, #14]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2201      	movs	r2, #1
 8002302:	f240 6102 	movw	r1, #1538	; 0x602
 8002306:	4618      	mov	r0, r3
 8002308:	f001 f9b2 	bl	8003670 <CODEC_IO_Write>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	4413      	add	r3, r2
 8002314:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002316:	89fb      	ldrh	r3, [r7, #14]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2202      	movs	r2, #2
 800231c:	f240 6104 	movw	r1, #1540	; 0x604
 8002320:	4618      	mov	r0, r3
 8002322:	f001 f9a5 	bl	8003670 <CODEC_IO_Write>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	4413      	add	r3, r2
 800232e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8002330:	89fb      	ldrh	r3, [r7, #14]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2202      	movs	r2, #2
 8002336:	f240 6105 	movw	r1, #1541	; 0x605
 800233a:	4618      	mov	r0, r3
 800233c:	f001 f998 	bl	8003670 <CODEC_IO_Write>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	61fb      	str	r3, [r7, #28]
      break;
 800234a:	e046      	b.n	80023da <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800234c:	89fb      	ldrh	r3, [r7, #14]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f240 3203 	movw	r2, #771	; 0x303
 8002354:	2105      	movs	r1, #5
 8002356:	4618      	mov	r0, r3
 8002358:	f001 f98a 	bl	8003670 <CODEC_IO_Write>
 800235c:	4603      	mov	r3, r0
 800235e:	461a      	mov	r2, r3
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	4413      	add	r3, r2
 8002364:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002366:	89fb      	ldrh	r3, [r7, #14]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2201      	movs	r2, #1
 800236c:	f240 6101 	movw	r1, #1537	; 0x601
 8002370:	4618      	mov	r0, r3
 8002372:	f001 f97d 	bl	8003670 <CODEC_IO_Write>
 8002376:	4603      	mov	r3, r0
 8002378:	461a      	mov	r2, r3
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4413      	add	r3, r2
 800237e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002380:	89fb      	ldrh	r3, [r7, #14]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2201      	movs	r2, #1
 8002386:	f240 6102 	movw	r1, #1538	; 0x602
 800238a:	4618      	mov	r0, r3
 800238c:	f001 f970 	bl	8003670 <CODEC_IO_Write>
 8002390:	4603      	mov	r3, r0
 8002392:	461a      	mov	r2, r3
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	4413      	add	r3, r2
 8002398:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800239a:	89fb      	ldrh	r3, [r7, #14]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2200      	movs	r2, #0
 80023a0:	f240 6104 	movw	r1, #1540	; 0x604
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 f963 	bl	8003670 <CODEC_IO_Write>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	4413      	add	r3, r2
 80023b2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80023b4:	89fb      	ldrh	r3, [r7, #14]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2200      	movs	r2, #0
 80023ba:	f240 6105 	movw	r1, #1541	; 0x605
 80023be:	4618      	mov	r0, r3
 80023c0:	f001 f956 	bl	8003670 <CODEC_IO_Write>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	4413      	add	r3, r2
 80023cc:	61fb      	str	r3, [r7, #28]
      break;
 80023ce:	e004      	b.n	80023da <wm8994_Init+0x39e>
 80023d0:	20006558 	.word	0x20006558
    }
  }
  else
  {
    outputEnabled = 0;
 80023d4:	4b99      	ldr	r3, [pc, #612]	; (800263c <wm8994_Init+0x600>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80023da:	8afb      	ldrh	r3, [r7, #22]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 81ab 	beq.w	8002738 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80023e2:	4b97      	ldr	r3, [pc, #604]	; (8002640 <wm8994_Init+0x604>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80023e8:	8afb      	ldrh	r3, [r7, #22]
 80023ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ee:	f000 8129 	beq.w	8002644 <wm8994_Init+0x608>
 80023f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023f6:	f300 819b 	bgt.w	8002730 <wm8994_Init+0x6f4>
 80023fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023fe:	d05a      	beq.n	80024b6 <wm8994_Init+0x47a>
 8002400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002404:	f300 8194 	bgt.w	8002730 <wm8994_Init+0x6f4>
 8002408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800240c:	f000 80c6 	beq.w	800259c <wm8994_Init+0x560>
 8002410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002414:	f040 818c 	bne.w	8002730 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8002418:	89fb      	ldrh	r3, [r7, #14]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8002420:	2104      	movs	r1, #4
 8002422:	4618      	mov	r0, r3
 8002424:	f001 f924 	bl	8003670 <CODEC_IO_Write>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8002432:	89fb      	ldrh	r3, [r7, #14]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	22db      	movs	r2, #219	; 0xdb
 8002438:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800243c:	4618      	mov	r0, r3
 800243e:	f001 f917 	bl	8003670 <CODEC_IO_Write>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	4413      	add	r3, r2
 800244a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 800244c:	89fb      	ldrh	r3, [r7, #14]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8002454:	2102      	movs	r1, #2
 8002456:	4618      	mov	r0, r3
 8002458:	f001 f90a 	bl	8003670 <CODEC_IO_Write>
 800245c:	4603      	mov	r3, r0
 800245e:	461a      	mov	r2, r3
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8002466:	89fb      	ldrh	r3, [r7, #14]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2202      	movs	r2, #2
 800246c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8002470:	4618      	mov	r0, r3
 8002472:	f001 f8fd 	bl	8003670 <CODEC_IO_Write>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2202      	movs	r2, #2
 8002486:	f240 6109 	movw	r1, #1545	; 0x609
 800248a:	4618      	mov	r0, r3
 800248c:	f001 f8f0 	bl	8003670 <CODEC_IO_Write>
 8002490:	4603      	mov	r3, r0
 8002492:	461a      	mov	r2, r3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	220e      	movs	r2, #14
 80024a0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80024a4:	4618      	mov	r0, r3
 80024a6:	f001 f8e3 	bl	8003670 <CODEC_IO_Write>
 80024aa:	4603      	mov	r3, r0
 80024ac:	461a      	mov	r2, r3
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	61fb      	str	r3, [r7, #28]
      break;
 80024b4:	e143      	b.n	800273e <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80024b6:	89fb      	ldrh	r3, [r7, #14]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2211      	movs	r2, #17
 80024bc:	2128      	movs	r1, #40	; 0x28
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 f8d6 	bl	8003670 <CODEC_IO_Write>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 80024ce:	89fb      	ldrh	r3, [r7, #14]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2235      	movs	r2, #53	; 0x35
 80024d4:	2129      	movs	r1, #41	; 0x29
 80024d6:	4618      	mov	r0, r3
 80024d8:	f001 f8ca 	bl	8003670 <CODEC_IO_Write>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4413      	add	r3, r2
 80024e4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80024e6:	89fb      	ldrh	r3, [r7, #14]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2235      	movs	r2, #53	; 0x35
 80024ec:	212a      	movs	r1, #42	; 0x2a
 80024ee:	4618      	mov	r0, r3
 80024f0:	f001 f8be 	bl	8003670 <CODEC_IO_Write>
 80024f4:	4603      	mov	r3, r0
 80024f6:	461a      	mov	r2, r3
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	4413      	add	r3, r2
 80024fc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80024fe:	89fb      	ldrh	r3, [r7, #14]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f240 3203 	movw	r2, #771	; 0x303
 8002506:	2104      	movs	r1, #4
 8002508:	4618      	mov	r0, r3
 800250a:	f001 f8b1 	bl	8003670 <CODEC_IO_Write>
 800250e:	4603      	mov	r3, r0
 8002510:	461a      	mov	r2, r3
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002518:	89fb      	ldrh	r3, [r7, #14]
 800251a:	b2db      	uxtb	r3, r3
 800251c:	22db      	movs	r2, #219	; 0xdb
 800251e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002522:	4618      	mov	r0, r3
 8002524:	f001 f8a4 	bl	8003670 <CODEC_IO_Write>
 8002528:	4603      	mov	r3, r0
 800252a:	461a      	mov	r2, r3
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	4413      	add	r3, r2
 8002530:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8002532:	89fb      	ldrh	r3, [r7, #14]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f246 3250 	movw	r2, #25424	; 0x6350
 800253a:	2102      	movs	r1, #2
 800253c:	4618      	mov	r0, r3
 800253e:	f001 f897 	bl	8003670 <CODEC_IO_Write>
 8002542:	4603      	mov	r3, r0
 8002544:	461a      	mov	r2, r3
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	4413      	add	r3, r2
 800254a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800254c:	89fb      	ldrh	r3, [r7, #14]
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2202      	movs	r2, #2
 8002552:	f240 6106 	movw	r1, #1542	; 0x606
 8002556:	4618      	mov	r0, r3
 8002558:	f001 f88a 	bl	8003670 <CODEC_IO_Write>
 800255c:	4603      	mov	r3, r0
 800255e:	461a      	mov	r2, r3
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	4413      	add	r3, r2
 8002564:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2202      	movs	r2, #2
 800256c:	f240 6107 	movw	r1, #1543	; 0x607
 8002570:	4618      	mov	r0, r3
 8002572:	f001 f87d 	bl	8003670 <CODEC_IO_Write>
 8002576:	4603      	mov	r3, r0
 8002578:	461a      	mov	r2, r3
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002580:	89fb      	ldrh	r3, [r7, #14]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	220d      	movs	r2, #13
 8002586:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800258a:	4618      	mov	r0, r3
 800258c:	f001 f870 	bl	8003670 <CODEC_IO_Write>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	4413      	add	r3, r2
 8002598:	61fb      	str	r3, [r7, #28]
      break;
 800259a:	e0d0      	b.n	800273e <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 800259c:	89fb      	ldrh	r3, [r7, #14]
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80025a4:	2104      	movs	r1, #4
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 f862 	bl	8003670 <CODEC_IO_Write>
 80025ac:	4603      	mov	r3, r0
 80025ae:	461a      	mov	r2, r3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	4413      	add	r3, r2
 80025b4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80025b6:	89fb      	ldrh	r3, [r7, #14]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	22db      	movs	r2, #219	; 0xdb
 80025bc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 f855 	bl	8003670 <CODEC_IO_Write>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	4413      	add	r3, r2
 80025ce:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80025d0:	89fb      	ldrh	r3, [r7, #14]
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f246 3250 	movw	r2, #25424	; 0x6350
 80025d8:	2102      	movs	r1, #2
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 f848 	bl	8003670 <CODEC_IO_Write>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80025ea:	89fb      	ldrh	r3, [r7, #14]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2202      	movs	r2, #2
 80025f0:	f240 6106 	movw	r1, #1542	; 0x606
 80025f4:	4618      	mov	r0, r3
 80025f6:	f001 f83b 	bl	8003670 <CODEC_IO_Write>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	4413      	add	r3, r2
 8002602:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8002604:	89fb      	ldrh	r3, [r7, #14]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2202      	movs	r2, #2
 800260a:	f240 6107 	movw	r1, #1543	; 0x607
 800260e:	4618      	mov	r0, r3
 8002610:	f001 f82e 	bl	8003670 <CODEC_IO_Write>
 8002614:	4603      	mov	r3, r0
 8002616:	461a      	mov	r2, r3
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	4413      	add	r3, r2
 800261c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800261e:	89fb      	ldrh	r3, [r7, #14]
 8002620:	b2db      	uxtb	r3, r3
 8002622:	220d      	movs	r2, #13
 8002624:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002628:	4618      	mov	r0, r3
 800262a:	f001 f821 	bl	8003670 <CODEC_IO_Write>
 800262e:	4603      	mov	r3, r0
 8002630:	461a      	mov	r2, r3
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	4413      	add	r3, r2
 8002636:	61fb      	str	r3, [r7, #28]
      break; 
 8002638:	e081      	b.n	800273e <wm8994_Init+0x702>
 800263a:	bf00      	nop
 800263c:	20006558 	.word	0x20006558
 8002640:	2000655c 	.word	0x2000655c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	b2db      	uxtb	r3, r3
 8002648:	f640 723c 	movw	r2, #3900	; 0xf3c
 800264c:	2104      	movs	r1, #4
 800264e:	4618      	mov	r0, r3
 8002650:	f001 f80e 	bl	8003670 <CODEC_IO_Write>
 8002654:	4603      	mov	r3, r0
 8002656:	461a      	mov	r2, r3
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 800265e:	89fb      	ldrh	r3, [r7, #14]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	22db      	movs	r2, #219	; 0xdb
 8002664:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8002668:	4618      	mov	r0, r3
 800266a:	f001 f801 	bl	8003670 <CODEC_IO_Write>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8002678:	89fb      	ldrh	r3, [r7, #14]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	22db      	movs	r2, #219	; 0xdb
 800267e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fff4 	bl	8003670 <CODEC_IO_Write>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8002692:	89fb      	ldrh	r3, [r7, #14]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f246 32a0 	movw	r2, #25504	; 0x63a0
 800269a:	2102      	movs	r1, #2
 800269c:	4618      	mov	r0, r3
 800269e:	f000 ffe7 	bl	8003670 <CODEC_IO_Write>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	4413      	add	r3, r2
 80026aa:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80026ac:	89fb      	ldrh	r3, [r7, #14]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2202      	movs	r2, #2
 80026b2:	f240 6106 	movw	r1, #1542	; 0x606
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 ffda 	bl	8003670 <CODEC_IO_Write>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	4413      	add	r3, r2
 80026c4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2202      	movs	r2, #2
 80026cc:	f240 6107 	movw	r1, #1543	; 0x607
 80026d0:	4618      	mov	r0, r3
 80026d2:	f000 ffcd 	bl	8003670 <CODEC_IO_Write>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	4413      	add	r3, r2
 80026de:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80026e0:	89fb      	ldrh	r3, [r7, #14]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2202      	movs	r2, #2
 80026e6:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 ffc0 	bl	8003670 <CODEC_IO_Write>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2202      	movs	r2, #2
 8002700:	f240 6109 	movw	r1, #1545	; 0x609
 8002704:	4618      	mov	r0, r3
 8002706:	f000 ffb3 	bl	8003670 <CODEC_IO_Write>
 800270a:	4603      	mov	r3, r0
 800270c:	461a      	mov	r2, r3
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8002714:	89fb      	ldrh	r3, [r7, #14]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	220d      	movs	r2, #13
 800271a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800271e:	4618      	mov	r0, r3
 8002720:	f000 ffa6 	bl	8003670 <CODEC_IO_Write>
 8002724:	4603      	mov	r3, r0
 8002726:	461a      	mov	r2, r3
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	61fb      	str	r3, [r7, #28]
      break;    
 800272e:	e006      	b.n	800273e <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	3301      	adds	r3, #1
 8002734:	61fb      	str	r3, [r7, #28]
      break;
 8002736:	e002      	b.n	800273e <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8002738:	4ba4      	ldr	r3, [pc, #656]	; (80029cc <wm8994_Init+0x990>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4aa3      	ldr	r2, [pc, #652]	; (80029d0 <wm8994_Init+0x994>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d079      	beq.n	800283a <wm8994_Init+0x7fe>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4aa1      	ldr	r2, [pc, #644]	; (80029d0 <wm8994_Init+0x994>)
 800274a:	4293      	cmp	r3, r2
 800274c:	f200 80ad 	bhi.w	80028aa <wm8994_Init+0x86e>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002756:	4293      	cmp	r3, r2
 8002758:	d061      	beq.n	800281e <wm8994_Init+0x7e2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002760:	4293      	cmp	r3, r2
 8002762:	f200 80a2 	bhi.w	80028aa <wm8994_Init+0x86e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f64a 4244 	movw	r2, #44100	; 0xac44
 800276c:	4293      	cmp	r3, r2
 800276e:	f000 808e 	beq.w	800288e <wm8994_Init+0x852>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002778:	4293      	cmp	r3, r2
 800277a:	f200 8096 	bhi.w	80028aa <wm8994_Init+0x86e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002784:	d03d      	beq.n	8002802 <wm8994_Init+0x7c6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800278c:	f200 808d 	bhi.w	80028aa <wm8994_Init+0x86e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f245 6222 	movw	r2, #22050	; 0x5622
 8002796:	4293      	cmp	r3, r2
 8002798:	d06b      	beq.n	8002872 <wm8994_Init+0x836>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f245 6222 	movw	r2, #22050	; 0x5622
 80027a0:	4293      	cmp	r3, r2
 80027a2:	f200 8082 	bhi.w	80028aa <wm8994_Init+0x86e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80027ac:	d01b      	beq.n	80027e6 <wm8994_Init+0x7aa>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80027b4:	d879      	bhi.n	80028aa <wm8994_Init+0x86e>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80027bc:	d005      	beq.n	80027ca <wm8994_Init+0x78e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f642 3211 	movw	r2, #11025	; 0x2b11
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d046      	beq.n	8002856 <wm8994_Init+0x81a>
 80027c8:	e06f      	b.n	80028aa <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80027ca:	89fb      	ldrh	r3, [r7, #14]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2203      	movs	r2, #3
 80027d0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 ff4b 	bl	8003670 <CODEC_IO_Write>
 80027da:	4603      	mov	r3, r0
 80027dc:	461a      	mov	r2, r3
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	4413      	add	r3, r2
 80027e2:	61fb      	str	r3, [r7, #28]
    break;
 80027e4:	e06f      	b.n	80028c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80027e6:	89fb      	ldrh	r3, [r7, #14]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2233      	movs	r2, #51	; 0x33
 80027ec:	f44f 7104 	mov.w	r1, #528	; 0x210
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 ff3d 	bl	8003670 <CODEC_IO_Write>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461a      	mov	r2, r3
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	4413      	add	r3, r2
 80027fe:	61fb      	str	r3, [r7, #28]
    break;
 8002800:	e061      	b.n	80028c6 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8002802:	89fb      	ldrh	r3, [r7, #14]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2263      	movs	r2, #99	; 0x63
 8002808:	f44f 7104 	mov.w	r1, #528	; 0x210
 800280c:	4618      	mov	r0, r3
 800280e:	f000 ff2f 	bl	8003670 <CODEC_IO_Write>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	61fb      	str	r3, [r7, #28]
    break;
 800281c:	e053      	b.n	80028c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800281e:	89fb      	ldrh	r3, [r7, #14]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2283      	movs	r2, #131	; 0x83
 8002824:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002828:	4618      	mov	r0, r3
 800282a:	f000 ff21 	bl	8003670 <CODEC_IO_Write>
 800282e:	4603      	mov	r3, r0
 8002830:	461a      	mov	r2, r3
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	4413      	add	r3, r2
 8002836:	61fb      	str	r3, [r7, #28]
    break;
 8002838:	e045      	b.n	80028c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800283a:	89fb      	ldrh	r3, [r7, #14]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	22a3      	movs	r2, #163	; 0xa3
 8002840:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002844:	4618      	mov	r0, r3
 8002846:	f000 ff13 	bl	8003670 <CODEC_IO_Write>
 800284a:	4603      	mov	r3, r0
 800284c:	461a      	mov	r2, r3
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	4413      	add	r3, r2
 8002852:	61fb      	str	r3, [r7, #28]
    break;
 8002854:	e037      	b.n	80028c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2213      	movs	r2, #19
 800285c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002860:	4618      	mov	r0, r3
 8002862:	f000 ff05 	bl	8003670 <CODEC_IO_Write>
 8002866:	4603      	mov	r3, r0
 8002868:	461a      	mov	r2, r3
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4413      	add	r3, r2
 800286e:	61fb      	str	r3, [r7, #28]
    break;
 8002870:	e029      	b.n	80028c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8002872:	89fb      	ldrh	r3, [r7, #14]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2243      	movs	r2, #67	; 0x43
 8002878:	f44f 7104 	mov.w	r1, #528	; 0x210
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fef7 	bl	8003670 <CODEC_IO_Write>
 8002882:	4603      	mov	r3, r0
 8002884:	461a      	mov	r2, r3
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	4413      	add	r3, r2
 800288a:	61fb      	str	r3, [r7, #28]
    break;
 800288c:	e01b      	b.n	80028c6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 800288e:	89fb      	ldrh	r3, [r7, #14]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2273      	movs	r2, #115	; 0x73
 8002894:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002898:	4618      	mov	r0, r3
 800289a:	f000 fee9 	bl	8003670 <CODEC_IO_Write>
 800289e:	4603      	mov	r3, r0
 80028a0:	461a      	mov	r2, r3
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4413      	add	r3, r2
 80028a6:	61fb      	str	r3, [r7, #28]
    break; 
 80028a8:	e00d      	b.n	80028c6 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80028aa:	89fb      	ldrh	r3, [r7, #14]
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2283      	movs	r2, #131	; 0x83
 80028b0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fedb 	bl	8003670 <CODEC_IO_Write>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461a      	mov	r2, r3
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	4413      	add	r3, r2
 80028c2:	61fb      	str	r3, [r7, #28]
    break; 
 80028c4:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80028c6:	8afb      	ldrh	r3, [r7, #22]
 80028c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028cc:	d10e      	bne.n	80028ec <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 80028ce:	89fb      	ldrh	r3, [r7, #14]
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	f244 0218 	movw	r2, #16408	; 0x4018
 80028d6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80028da:	4618      	mov	r0, r3
 80028dc:	f000 fec8 	bl	8003670 <CODEC_IO_Write>
 80028e0:	4603      	mov	r3, r0
 80028e2:	461a      	mov	r2, r3
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	4413      	add	r3, r2
 80028e8:	61fb      	str	r3, [r7, #28]
 80028ea:	e00d      	b.n	8002908 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 80028ec:	89fb      	ldrh	r3, [r7, #14]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f244 0210 	movw	r2, #16400	; 0x4010
 80028f4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 feb9 	bl	8003670 <CODEC_IO_Write>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	4413      	add	r3, r2
 8002906:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8002908:	89fb      	ldrh	r3, [r7, #14]
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2200      	movs	r2, #0
 800290e:	f240 3102 	movw	r1, #770	; 0x302
 8002912:	4618      	mov	r0, r3
 8002914:	f000 feac 	bl	8003670 <CODEC_IO_Write>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8002922:	89fb      	ldrh	r3, [r7, #14]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	220a      	movs	r2, #10
 8002928:	f44f 7102 	mov.w	r1, #520	; 0x208
 800292c:	4618      	mov	r0, r3
 800292e:	f000 fe9f 	bl	8003670 <CODEC_IO_Write>
 8002932:	4603      	mov	r3, r0
 8002934:	461a      	mov	r2, r3
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 800293c:	89fb      	ldrh	r3, [r7, #14]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2201      	movs	r2, #1
 8002942:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002946:	4618      	mov	r0, r3
 8002948:	f000 fe92 	bl	8003670 <CODEC_IO_Write>
 800294c:	4603      	mov	r3, r0
 800294e:	461a      	mov	r2, r3
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8002956:	8b3b      	ldrh	r3, [r7, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 817b 	beq.w	8002c54 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 800295e:	8b3b      	ldrh	r3, [r7, #24]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d157      	bne.n	8002a14 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8002964:	89fb      	ldrh	r3, [r7, #14]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800296c:	212d      	movs	r1, #45	; 0x2d
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fe7e 	bl	8003670 <CODEC_IO_Write>
 8002974:	4603      	mov	r3, r0
 8002976:	461a      	mov	r2, r3
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	4413      	add	r3, r2
 800297c:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 800297e:	89fb      	ldrh	r3, [r7, #14]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002986:	212e      	movs	r1, #46	; 0x2e
 8002988:	4618      	mov	r0, r3
 800298a:	f000 fe71 	bl	8003670 <CODEC_IO_Write>
 800298e:	4603      	mov	r3, r0
 8002990:	461a      	mov	r2, r3
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8002998:	4b0e      	ldr	r3, [pc, #56]	; (80029d4 <wm8994_Init+0x998>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 80029a0:	89fb      	ldrh	r3, [r7, #14]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 80029a8:	f44f 7188 	mov.w	r1, #272	; 0x110
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fe5f 	bl	8003670 <CODEC_IO_Write>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461a      	mov	r2, r3
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	4413      	add	r3, r2
 80029ba:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 80029bc:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <wm8994_Init+0x998>)
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 80029c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80029c6:	f000 ffb5 	bl	8003934 <AUDIO_IO_Delay>
 80029ca:	e016      	b.n	80029fa <wm8994_Init+0x9be>
 80029cc:	2000655c 	.word	0x2000655c
 80029d0:	00017700 	.word	0x00017700
 80029d4:	20000034 	.word	0x20000034
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 80029d8:	89fb      	ldrh	r3, [r7, #14]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f248 1208 	movw	r2, #33032	; 0x8108
 80029e0:	f44f 7188 	mov.w	r1, #272	; 0x110
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fe43 	bl	8003670 <CODEC_IO_Write>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	4413      	add	r3, r2
 80029f2:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 80029f4:	2032      	movs	r0, #50	; 0x32
 80029f6:	f000 ff9d 	bl	8003934 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 80029fa:	89fb      	ldrh	r3, [r7, #14]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2200      	movs	r2, #0
 8002a00:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fe33 	bl	8003670 <CODEC_IO_Write>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	4413      	add	r3, r2
 8002a12:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8002a14:	89fb      	ldrh	r3, [r7, #14]
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fe26 	bl	8003670 <CODEC_IO_Write>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8002a2e:	89fb      	ldrh	r3, [r7, #14]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2200      	movs	r2, #0
 8002a34:	2122      	movs	r1, #34	; 0x22
 8002a36:	4618      	mov	r0, r3
 8002a38:	f000 fe1a 	bl	8003670 <CODEC_IO_Write>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461a      	mov	r2, r3
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8002a46:	89fb      	ldrh	r3, [r7, #14]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2123      	movs	r1, #35	; 0x23
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fe0e 	bl	8003670 <CODEC_IO_Write>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461a      	mov	r2, r3
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8002a5e:	89fb      	ldrh	r3, [r7, #14]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002a66:	2136      	movs	r1, #54	; 0x36
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fe01 	bl	8003670 <CODEC_IO_Write>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	4413      	add	r3, r2
 8002a76:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8002a78:	89fb      	ldrh	r3, [r7, #14]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f243 0203 	movw	r2, #12291	; 0x3003
 8002a80:	2101      	movs	r1, #1
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fdf4 	bl	8003670 <CODEC_IO_Write>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	4413      	add	r3, r2
 8002a90:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002a92:	8afb      	ldrh	r3, [r7, #22]
 8002a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a98:	d10d      	bne.n	8002ab6 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8002a9a:	89fb      	ldrh	r3, [r7, #14]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	f240 2205 	movw	r2, #517	; 0x205
 8002aa2:	2151      	movs	r1, #81	; 0x51
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 fde3 	bl	8003670 <CODEC_IO_Write>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	461a      	mov	r2, r3
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	e00b      	b.n	8002ace <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8002ab6:	89fb      	ldrh	r3, [r7, #14]
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2205      	movs	r2, #5
 8002abc:	2151      	movs	r1, #81	; 0x51
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fdd6 	bl	8003670 <CODEC_IO_Write>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	4413      	add	r3, r2
 8002acc:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8002ace:	8b7b      	ldrh	r3, [r7, #26]
 8002ad0:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8002ad4:	f043 0303 	orr.w	r3, r3, #3
 8002ad8:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002ada:	89fb      	ldrh	r3, [r7, #14]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	8b7a      	ldrh	r2, [r7, #26]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fdc4 	bl	8003670 <CODEC_IO_Write>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	461a      	mov	r2, r3
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	4413      	add	r3, r2
 8002af0:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8002af2:	89fb      	ldrh	r3, [r7, #14]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2222      	movs	r2, #34	; 0x22
 8002af8:	2160      	movs	r1, #96	; 0x60
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fdb8 	bl	8003670 <CODEC_IO_Write>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	4413      	add	r3, r2
 8002b08:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8002b0a:	89fb      	ldrh	r3, [r7, #14]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f649 7225 	movw	r2, #40741	; 0x9f25
 8002b12:	214c      	movs	r1, #76	; 0x4c
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fdab 	bl	8003670 <CODEC_IO_Write>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	4413      	add	r3, r2
 8002b22:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8002b24:	200f      	movs	r0, #15
 8002b26:	f000 ff05 	bl	8003934 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8002b2a:	89fb      	ldrh	r3, [r7, #14]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2201      	movs	r2, #1
 8002b30:	212d      	movs	r1, #45	; 0x2d
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 fd9c 	bl	8003670 <CODEC_IO_Write>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	4413      	add	r3, r2
 8002b40:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8002b42:	89fb      	ldrh	r3, [r7, #14]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2201      	movs	r2, #1
 8002b48:	212e      	movs	r1, #46	; 0x2e
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fd90 	bl	8003670 <CODEC_IO_Write>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	4413      	add	r3, r2
 8002b58:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8002b5a:	89fb      	ldrh	r3, [r7, #14]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	f44f 724c 	mov.w	r2, #816	; 0x330
 8002b62:	2103      	movs	r1, #3
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fd83 	bl	8003670 <CODEC_IO_Write>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4413      	add	r3, r2
 8002b72:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8002b74:	89fb      	ldrh	r3, [r7, #14]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2233      	movs	r2, #51	; 0x33
 8002b7a:	2154      	movs	r1, #84	; 0x54
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f000 fd77 	bl	8003670 <CODEC_IO_Write>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	4413      	add	r3, r2
 8002b8a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8002b8c:	f240 1001 	movw	r0, #257	; 0x101
 8002b90:	f000 fed0 	bl	8003934 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8002b94:	89fb      	ldrh	r3, [r7, #14]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	22ee      	movs	r2, #238	; 0xee
 8002b9a:	2160      	movs	r1, #96	; 0x60
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fd67 	bl	8003670 <CODEC_IO_Write>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	4413      	add	r3, r2
 8002baa:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8002bac:	89fb      	ldrh	r3, [r7, #14]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	22c0      	movs	r2, #192	; 0xc0
 8002bb2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fd5a 	bl	8003670 <CODEC_IO_Write>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8002bc6:	89fb      	ldrh	r3, [r7, #14]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	22c0      	movs	r2, #192	; 0xc0
 8002bcc:	f240 6111 	movw	r1, #1553	; 0x611
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fd4d 	bl	8003670 <CODEC_IO_Write>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	4413      	add	r3, r2
 8002bde:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8002be0:	89fb      	ldrh	r3, [r7, #14]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2210      	movs	r2, #16
 8002be6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fd40 	bl	8003670 <CODEC_IO_Write>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8002bfa:	89fb      	ldrh	r3, [r7, #14]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	22c0      	movs	r2, #192	; 0xc0
 8002c00:	f240 6112 	movw	r1, #1554	; 0x612
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fd33 	bl	8003670 <CODEC_IO_Write>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8002c14:	89fb      	ldrh	r3, [r7, #14]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	22c0      	movs	r2, #192	; 0xc0
 8002c1a:	f240 6113 	movw	r1, #1555	; 0x613
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fd26 	bl	8003670 <CODEC_IO_Write>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002c2e:	89fb      	ldrh	r3, [r7, #14]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2210      	movs	r2, #16
 8002c34:	f240 4122 	movw	r1, #1058	; 0x422
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fd19 	bl	8003670 <CODEC_IO_Write>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461a      	mov	r2, r3
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	4413      	add	r3, r2
 8002c46:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002c48:	7afa      	ldrb	r2, [r7, #11]
 8002c4a:	89fb      	ldrh	r3, [r7, #14]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f984 	bl	8002f5c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8002c54:	8afb      	ldrh	r3, [r7, #22]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80a6 	beq.w	8002da8 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8002c5c:	8afb      	ldrh	r3, [r7, #22]
 8002c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c62:	d003      	beq.n	8002c6c <wm8994_Init+0xc30>
 8002c64:	8afb      	ldrh	r3, [r7, #22]
 8002c66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6a:	d12b      	bne.n	8002cc4 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002c6c:	8b7b      	ldrh	r3, [r7, #26]
 8002c6e:	f043 0313 	orr.w	r3, r3, #19
 8002c72:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002c74:	89fb      	ldrh	r3, [r7, #14]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	8b7a      	ldrh	r2, [r7, #26]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fcf7 	bl	8003670 <CODEC_IO_Write>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	4413      	add	r3, r2
 8002c8a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002c8c:	89fb      	ldrh	r3, [r7, #14]
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2202      	movs	r2, #2
 8002c92:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 fcea 	bl	8003670 <CODEC_IO_Write>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8002ca6:	89fb      	ldrh	r3, [r7, #14]
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cae:	f240 4111 	movw	r1, #1041	; 0x411
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fcdc 	bl	8003670 <CODEC_IO_Write>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	461a      	mov	r2, r3
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	61fb      	str	r3, [r7, #28]
 8002cc2:	e06b      	b.n	8002d9c <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8002cc4:	8afb      	ldrh	r3, [r7, #22]
 8002cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cca:	d139      	bne.n	8002d40 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8002ccc:	8b7b      	ldrh	r3, [r7, #26]
 8002cce:	f043 0313 	orr.w	r3, r3, #19
 8002cd2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8002cd4:	89fb      	ldrh	r3, [r7, #14]
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	8b7a      	ldrh	r2, [r7, #26]
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f000 fcc7 	bl	8003670 <CODEC_IO_Write>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	4413      	add	r3, r2
 8002cea:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8002cec:	89fb      	ldrh	r3, [r7, #14]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fcba 	bl	8003670 <CODEC_IO_Write>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	461a      	mov	r2, r3
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	4413      	add	r3, r2
 8002d04:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002d06:	89fb      	ldrh	r3, [r7, #14]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002d0e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fcac 	bl	8003670 <CODEC_IO_Write>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8002d22:	89fb      	ldrh	r3, [r7, #14]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002d2a:	f240 4111 	movw	r1, #1041	; 0x411
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fc9e 	bl	8003670 <CODEC_IO_Write>
 8002d34:	4603      	mov	r3, r0
 8002d36:	461a      	mov	r2, r3
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e02d      	b.n	8002d9c <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8002d40:	8afb      	ldrh	r3, [r7, #22]
 8002d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d46:	d003      	beq.n	8002d50 <wm8994_Init+0xd14>
 8002d48:	8afb      	ldrh	r3, [r7, #22]
 8002d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d4e:	d125      	bne.n	8002d9c <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8002d50:	89fb      	ldrh	r3, [r7, #14]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	220b      	movs	r2, #11
 8002d56:	2118      	movs	r1, #24
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fc89 	bl	8003670 <CODEC_IO_Write>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461a      	mov	r2, r3
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4413      	add	r3, r2
 8002d66:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8002d68:	89fb      	ldrh	r3, [r7, #14]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	220b      	movs	r2, #11
 8002d6e:	211a      	movs	r1, #26
 8002d70:	4618      	mov	r0, r3
 8002d72:	f000 fc7d 	bl	8003670 <CODEC_IO_Write>
 8002d76:	4603      	mov	r3, r0
 8002d78:	461a      	mov	r2, r3
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8002d80:	89fb      	ldrh	r3, [r7, #14]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8002d88:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fc6f 	bl	8003670 <CODEC_IO_Write>
 8002d92:	4603      	mov	r3, r0
 8002d94:	461a      	mov	r2, r3
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	4413      	add	r3, r2
 8002d9a:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8002d9c:	7afa      	ldrb	r2, [r7, #11]
 8002d9e:	89fb      	ldrh	r3, [r7, #14]
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f8da 	bl	8002f5c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8002da8:	69fb      	ldr	r3, [r7, #28]
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3720      	adds	r7, #32
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop

08002db4 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8002db8:	f000 fd68 	bl	800388c <AUDIO_IO_DeInit>
}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8002dca:	f000 fd59 	bl	8003880 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fd85 	bl	80038e4 <AUDIO_IO_Read>
 8002dda:	4603      	mov	r3, r0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	80fb      	strh	r3, [r7, #6]
 8002df0:	4613      	mov	r3, r2
 8002df2:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f9d1 	bl	80031a4 <wm8994_SetMute>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	2101      	movs	r1, #1
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f9bc 	bl	80031a4 <wm8994_SetMute>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4413      	add	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2201      	movs	r2, #1
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fc17 	bl	8003670 <CODEC_IO_Write>
 8002e42:	4603      	mov	r3, r0
 8002e44:	461a      	mov	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4413      	add	r3, r2
 8002e4a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002e64:	88fb      	ldrh	r3, [r7, #6]
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 f99b 	bl	80031a4 <wm8994_SetMute>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8002e76:	68fb      	ldr	r3, [r7, #12]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	6039      	str	r1, [r7, #0]
 8002e8a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8002e90:	4b31      	ldr	r3, [pc, #196]	; (8002f58 <wm8994_Stop+0xd8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d05a      	beq.n	8002f4e <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 f981 	bl	80031a4 <wm8994_SetMute>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d04e      	beq.n	8002f4e <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eb8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fbd7 	bl	8003670 <CODEC_IO_Write>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4413      	add	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8002ecc:	88fb      	ldrh	r3, [r7, #6]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ed4:	f240 4122 	movw	r1, #1058	; 0x422
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fbc9 	bl	8003670 <CODEC_IO_Write>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8002ee8:	88fb      	ldrh	r3, [r7, #6]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2200      	movs	r2, #0
 8002eee:	212d      	movs	r1, #45	; 0x2d
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 fbbd 	bl	8003670 <CODEC_IO_Write>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4413      	add	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	212e      	movs	r1, #46	; 0x2e
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fbb1 	bl	8003670 <CODEC_IO_Write>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	461a      	mov	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	4413      	add	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2105      	movs	r1, #5
 8002f20:	4618      	mov	r0, r3
 8002f22:	f000 fba5 	bl	8003670 <CODEC_IO_Write>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8002f30:	88fb      	ldrh	r3, [r7, #6]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2200      	movs	r2, #0
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fb99 	bl	8003670 <CODEC_IO_Write>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	461a      	mov	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4413      	add	r3, r2
 8002f46:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <wm8994_Stop+0xd8>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20006558 	.word	0x20006558

08002f5c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	460a      	mov	r2, r1
 8002f66:	80fb      	strh	r3, [r7, #6]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8002f70:	797b      	ldrb	r3, [r7, #5]
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d80b      	bhi.n	8002f8e <wm8994_SetVolume+0x32>
 8002f76:	797a      	ldrb	r2, [r7, #5]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	019b      	lsls	r3, r3, #6
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	4a86      	ldr	r2, [pc, #536]	; (8003198 <wm8994_SetVolume+0x23c>)
 8002f80:	fb82 1203 	smull	r1, r2, r2, r3
 8002f84:	1152      	asrs	r2, r2, #5
 8002f86:	17db      	asrs	r3, r3, #31
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	e000      	b.n	8002f90 <wm8994_SetVolume+0x34>
 8002f8e:	2364      	movs	r3, #100	; 0x64
 8002f90:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8002f92:	4b82      	ldr	r3, [pc, #520]	; (800319c <wm8994_SetVolume+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 809b 	beq.w	80030d2 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
 8002f9e:	2b3e      	cmp	r3, #62	; 0x3e
 8002fa0:	d93d      	bls.n	800301e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f8fc 	bl	80031a4 <wm8994_SetMute>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f240 127f 	movw	r2, #383	; 0x17f
 8002fbc:	211c      	movs	r1, #28
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fb56 	bl	8003670 <CODEC_IO_Write>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f240 127f 	movw	r2, #383	; 0x17f
 8002fd6:	211d      	movs	r1, #29
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fb49 	bl	8003670 <CODEC_IO_Write>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f240 127f 	movw	r2, #383	; 0x17f
 8002ff0:	2126      	movs	r1, #38	; 0x26
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fb3c 	bl	8003670 <CODEC_IO_Write>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4413      	add	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f240 127f 	movw	r2, #383	; 0x17f
 800300a:	2127      	movs	r1, #39	; 0x27
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fb2f 	bl	8003670 <CODEC_IO_Write>
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4413      	add	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]
 800301c:	e059      	b.n	80030d2 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800301e:	797b      	ldrb	r3, [r7, #5]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d109      	bne.n	8003038 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	2101      	movs	r1, #1
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f8bb 	bl	80031a4 <wm8994_SetMute>
 800302e:	4602      	mov	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e04c      	b.n	80030d2 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8003038:	88fb      	ldrh	r3, [r7, #6]
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f000 f8b1 	bl	80031a4 <wm8994_SetMute>
 8003042:	4602      	mov	r2, r0
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4413      	add	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	b2d8      	uxtb	r0, r3
 800304e:	7afb      	ldrb	r3, [r7, #11]
 8003050:	b21b      	sxth	r3, r3
 8003052:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003056:	b21b      	sxth	r3, r3
 8003058:	b29b      	uxth	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	211c      	movs	r1, #28
 800305e:	f000 fb07 	bl	8003670 <CODEC_IO_Write>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	4413      	add	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	b2d8      	uxtb	r0, r3
 8003070:	7afb      	ldrb	r3, [r7, #11]
 8003072:	b21b      	sxth	r3, r3
 8003074:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8003078:	b21b      	sxth	r3, r3
 800307a:	b29b      	uxth	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	211d      	movs	r1, #29
 8003080:	f000 faf6 	bl	8003670 <CODEC_IO_Write>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	b2d8      	uxtb	r0, r3
 8003092:	7afb      	ldrb	r3, [r7, #11]
 8003094:	b21b      	sxth	r3, r3
 8003096:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800309a:	b21b      	sxth	r3, r3
 800309c:	b29b      	uxth	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	2126      	movs	r1, #38	; 0x26
 80030a2:	f000 fae5 	bl	8003670 <CODEC_IO_Write>
 80030a6:	4603      	mov	r3, r0
 80030a8:	461a      	mov	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80030b0:	88fb      	ldrh	r3, [r7, #6]
 80030b2:	b2d8      	uxtb	r0, r3
 80030b4:	7afb      	ldrb	r3, [r7, #11]
 80030b6:	b21b      	sxth	r3, r3
 80030b8:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80030bc:	b21b      	sxth	r3, r3
 80030be:	b29b      	uxth	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	2127      	movs	r1, #39	; 0x27
 80030c4:	f000 fad4 	bl	8003670 <CODEC_IO_Write>
 80030c8:	4603      	mov	r3, r0
 80030ca:	461a      	mov	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80030d2:	4b33      	ldr	r3, [pc, #204]	; (80031a0 <wm8994_SetVolume+0x244>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d059      	beq.n	800318e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80030da:	797b      	ldrb	r3, [r7, #5]
 80030dc:	2b63      	cmp	r3, #99	; 0x63
 80030de:	d80c      	bhi.n	80030fa <wm8994_SetVolume+0x19e>
 80030e0:	797a      	ldrb	r2, [r7, #5]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	4a2b      	ldr	r2, [pc, #172]	; (8003198 <wm8994_SetVolume+0x23c>)
 80030ec:	fb82 1203 	smull	r1, r2, r2, r3
 80030f0:	1152      	asrs	r2, r2, #5
 80030f2:	17db      	asrs	r3, r3, #31
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	e000      	b.n	80030fc <wm8994_SetVolume+0x1a0>
 80030fa:	23ef      	movs	r3, #239	; 0xef
 80030fc:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	b2d8      	uxtb	r0, r3
 8003102:	7afb      	ldrb	r3, [r7, #11]
 8003104:	b21b      	sxth	r3, r3
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	b21b      	sxth	r3, r3
 800310c:	b29b      	uxth	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003114:	f000 faac 	bl	8003670 <CODEC_IO_Write>
 8003118:	4603      	mov	r3, r0
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4413      	add	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	b2d8      	uxtb	r0, r3
 8003126:	7afb      	ldrb	r3, [r7, #11]
 8003128:	b21b      	sxth	r3, r3
 800312a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312e:	b21b      	sxth	r3, r3
 8003130:	b29b      	uxth	r3, r3
 8003132:	461a      	mov	r2, r3
 8003134:	f240 4101 	movw	r1, #1025	; 0x401
 8003138:	f000 fa9a 	bl	8003670 <CODEC_IO_Write>
 800313c:	4603      	mov	r3, r0
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	b2d8      	uxtb	r0, r3
 800314a:	7afb      	ldrb	r3, [r7, #11]
 800314c:	b21b      	sxth	r3, r3
 800314e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003152:	b21b      	sxth	r3, r3
 8003154:	b29b      	uxth	r3, r3
 8003156:	461a      	mov	r2, r3
 8003158:	f240 4104 	movw	r1, #1028	; 0x404
 800315c:	f000 fa88 	bl	8003670 <CODEC_IO_Write>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	b2d8      	uxtb	r0, r3
 800316e:	7afb      	ldrb	r3, [r7, #11]
 8003170:	b21b      	sxth	r3, r3
 8003172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003176:	b21b      	sxth	r3, r3
 8003178:	b29b      	uxth	r3, r3
 800317a:	461a      	mov	r2, r3
 800317c:	f240 4105 	movw	r1, #1029	; 0x405
 8003180:	f000 fa76 	bl	8003670 <CODEC_IO_Write>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	51eb851f 	.word	0x51eb851f
 800319c:	20006558 	.word	0x20006558
 80031a0:	2000655c 	.word	0x2000655c

080031a4 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	6039      	str	r1, [r7, #0]
 80031ae:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80031b4:	4b21      	ldr	r3, [pc, #132]	; (800323c <wm8994_SetMute+0x98>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d039      	beq.n	8003230 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d11c      	bne.n	80031fc <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ca:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fa4e 	bl	8003670 <CODEC_IO_Write>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031e6:	f240 4122 	movw	r1, #1058	; 0x422
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fa40 	bl	8003670 <CODEC_IO_Write>
 80031f0:	4603      	mov	r3, r0
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4413      	add	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]
 80031fa:	e019      	b.n	8003230 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2210      	movs	r2, #16
 8003202:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fa32 	bl	8003670 <CODEC_IO_Write>
 800320c:	4603      	mov	r3, r0
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4413      	add	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2210      	movs	r2, #16
 800321c:	f240 4122 	movw	r1, #1058	; 0x422
 8003220:	4618      	mov	r0, r3
 8003222:	f000 fa25 	bl	8003670 <CODEC_IO_Write>
 8003226:	4603      	mov	r3, r0
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8003230:	68fb      	ldr	r3, [r7, #12]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20006558 	.word	0x20006558

08003240 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	460a      	mov	r2, r1
 800324a:	80fb      	strh	r3, [r7, #6]
 800324c:	4613      	mov	r3, r2
 800324e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8003254:	797b      	ldrb	r3, [r7, #5]
 8003256:	2b03      	cmp	r3, #3
 8003258:	f000 808c 	beq.w	8003374 <wm8994_SetOutputMode+0x134>
 800325c:	2b03      	cmp	r3, #3
 800325e:	f300 80cb 	bgt.w	80033f8 <wm8994_SetOutputMode+0x1b8>
 8003262:	2b01      	cmp	r3, #1
 8003264:	d002      	beq.n	800326c <wm8994_SetOutputMode+0x2c>
 8003266:	2b02      	cmp	r3, #2
 8003268:	d042      	beq.n	80032f0 <wm8994_SetOutputMode+0xb0>
 800326a:	e0c5      	b.n	80033f8 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800326c:	88fb      	ldrh	r3, [r7, #6]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	f640 420c 	movw	r2, #3084	; 0xc0c
 8003274:	2105      	movs	r1, #5
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f9fa 	bl	8003670 <CODEC_IO_Write>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4413      	add	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2200      	movs	r2, #0
 800328c:	f240 6101 	movw	r1, #1537	; 0x601
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f9ed 	bl	8003670 <CODEC_IO_Write>
 8003296:	4603      	mov	r3, r0
 8003298:	461a      	mov	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2200      	movs	r2, #0
 80032a6:	f240 6102 	movw	r1, #1538	; 0x602
 80032aa:	4618      	mov	r0, r3
 80032ac:	f000 f9e0 	bl	8003670 <CODEC_IO_Write>
 80032b0:	4603      	mov	r3, r0
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2202      	movs	r2, #2
 80032c0:	f240 6104 	movw	r1, #1540	; 0x604
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 f9d3 	bl	8003670 <CODEC_IO_Write>
 80032ca:	4603      	mov	r3, r0
 80032cc:	461a      	mov	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4413      	add	r3, r2
 80032d2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2202      	movs	r2, #2
 80032da:	f240 6105 	movw	r1, #1541	; 0x605
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f9c6 	bl	8003670 <CODEC_IO_Write>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461a      	mov	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
    break;
 80032ee:	e0c5      	b.n	800347c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80032f0:	88fb      	ldrh	r3, [r7, #6]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	f240 3203 	movw	r2, #771	; 0x303
 80032f8:	2105      	movs	r1, #5
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f9b8 	bl	8003670 <CODEC_IO_Write>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800330a:	88fb      	ldrh	r3, [r7, #6]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2201      	movs	r2, #1
 8003310:	f240 6101 	movw	r1, #1537	; 0x601
 8003314:	4618      	mov	r0, r3
 8003316:	f000 f9ab 	bl	8003670 <CODEC_IO_Write>
 800331a:	4603      	mov	r3, r0
 800331c:	461a      	mov	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4413      	add	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2201      	movs	r2, #1
 800332a:	f240 6102 	movw	r1, #1538	; 0x602
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f99e 	bl	8003670 <CODEC_IO_Write>
 8003334:	4603      	mov	r3, r0
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2200      	movs	r2, #0
 8003344:	f240 6104 	movw	r1, #1540	; 0x604
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f991 	bl	8003670 <CODEC_IO_Write>
 800334e:	4603      	mov	r3, r0
 8003350:	461a      	mov	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4413      	add	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003358:	88fb      	ldrh	r3, [r7, #6]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2200      	movs	r2, #0
 800335e:	f240 6105 	movw	r1, #1541	; 0x605
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f984 	bl	8003670 <CODEC_IO_Write>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	60fb      	str	r3, [r7, #12]
    break;
 8003372:	e083      	b.n	800347c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f640 720f 	movw	r2, #3855	; 0xf0f
 800337c:	2105      	movs	r1, #5
 800337e:	4618      	mov	r0, r3
 8003380:	f000 f976 	bl	8003670 <CODEC_IO_Write>
 8003384:	4603      	mov	r3, r0
 8003386:	461a      	mov	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2201      	movs	r2, #1
 8003394:	f240 6101 	movw	r1, #1537	; 0x601
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f969 	bl	8003670 <CODEC_IO_Write>
 800339e:	4603      	mov	r3, r0
 80033a0:	461a      	mov	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4413      	add	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2201      	movs	r2, #1
 80033ae:	f240 6102 	movw	r1, #1538	; 0x602
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f95c 	bl	8003670 <CODEC_IO_Write>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2202      	movs	r2, #2
 80033c8:	f240 6104 	movw	r1, #1540	; 0x604
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 f94f 	bl	8003670 <CODEC_IO_Write>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4413      	add	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80033dc:	88fb      	ldrh	r3, [r7, #6]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2202      	movs	r2, #2
 80033e2:	f240 6105 	movw	r1, #1541	; 0x605
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f942 	bl	8003670 <CODEC_IO_Write>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
    break;
 80033f6:	e041      	b.n	800347c <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f240 3203 	movw	r2, #771	; 0x303
 8003400:	2105      	movs	r1, #5
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f934 	bl	8003670 <CODEC_IO_Write>
 8003408:	4603      	mov	r3, r0
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2201      	movs	r2, #1
 8003418:	f240 6101 	movw	r1, #1537	; 0x601
 800341c:	4618      	mov	r0, r3
 800341e:	f000 f927 	bl	8003670 <CODEC_IO_Write>
 8003422:	4603      	mov	r3, r0
 8003424:	461a      	mov	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4413      	add	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2201      	movs	r2, #1
 8003432:	f240 6102 	movw	r1, #1538	; 0x602
 8003436:	4618      	mov	r0, r3
 8003438:	f000 f91a 	bl	8003670 <CODEC_IO_Write>
 800343c:	4603      	mov	r3, r0
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2200      	movs	r2, #0
 800344c:	f240 6104 	movw	r1, #1540	; 0x604
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f90d 	bl	8003670 <CODEC_IO_Write>
 8003456:	4603      	mov	r3, r0
 8003458:	461a      	mov	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2200      	movs	r2, #0
 8003466:	f240 6105 	movw	r1, #1541	; 0x605
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f900 	bl	8003670 <CODEC_IO_Write>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
    break;    
 800347a:	bf00      	nop
  }  
  return counter;
 800347c:	68fb      	ldr	r3, [r7, #12]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	6039      	str	r1, [r7, #0]
 8003492:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4a64      	ldr	r2, [pc, #400]	; (800362c <wm8994_SetFrequency+0x1a4>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d079      	beq.n	8003594 <wm8994_SetFrequency+0x10c>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	4a62      	ldr	r2, [pc, #392]	; (800362c <wm8994_SetFrequency+0x1a4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	f200 80ad 	bhi.w	8003604 <wm8994_SetFrequency+0x17c>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d061      	beq.n	8003578 <wm8994_SetFrequency+0xf0>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80034ba:	4293      	cmp	r3, r2
 80034bc:	f200 80a2 	bhi.w	8003604 <wm8994_SetFrequency+0x17c>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80034c6:	4293      	cmp	r3, r2
 80034c8:	f000 808e 	beq.w	80035e8 <wm8994_SetFrequency+0x160>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	f64a 4244 	movw	r2, #44100	; 0xac44
 80034d2:	4293      	cmp	r3, r2
 80034d4:	f200 8096 	bhi.w	8003604 <wm8994_SetFrequency+0x17c>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80034de:	d03d      	beq.n	800355c <wm8994_SetFrequency+0xd4>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80034e6:	f200 808d 	bhi.w	8003604 <wm8994_SetFrequency+0x17c>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	f245 6222 	movw	r2, #22050	; 0x5622
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d06b      	beq.n	80035cc <wm8994_SetFrequency+0x144>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f245 6222 	movw	r2, #22050	; 0x5622
 80034fa:	4293      	cmp	r3, r2
 80034fc:	f200 8082 	bhi.w	8003604 <wm8994_SetFrequency+0x17c>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8003506:	d01b      	beq.n	8003540 <wm8994_SetFrequency+0xb8>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800350e:	d879      	bhi.n	8003604 <wm8994_SetFrequency+0x17c>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8003516:	d005      	beq.n	8003524 <wm8994_SetFrequency+0x9c>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800351e:	4293      	cmp	r3, r2
 8003520:	d046      	beq.n	80035b0 <wm8994_SetFrequency+0x128>
 8003522:	e06f      	b.n	8003604 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2203      	movs	r2, #3
 800352a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f89e 	bl	8003670 <CODEC_IO_Write>
 8003534:	4603      	mov	r3, r0
 8003536:	461a      	mov	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
    break;
 800353e:	e06f      	b.n	8003620 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8003540:	88fb      	ldrh	r3, [r7, #6]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2233      	movs	r2, #51	; 0x33
 8003546:	f44f 7104 	mov.w	r1, #528	; 0x210
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f890 	bl	8003670 <CODEC_IO_Write>
 8003550:	4603      	mov	r3, r0
 8003552:	461a      	mov	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4413      	add	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
    break;
 800355a:	e061      	b.n	8003620 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2263      	movs	r2, #99	; 0x63
 8003562:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f882 	bl	8003670 <CODEC_IO_Write>
 800356c:	4603      	mov	r3, r0
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
    break;
 8003576:	e053      	b.n	8003620 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2283      	movs	r2, #131	; 0x83
 800357e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f874 	bl	8003670 <CODEC_IO_Write>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4413      	add	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]
    break;
 8003592:	e045      	b.n	8003620 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8003594:	88fb      	ldrh	r3, [r7, #6]
 8003596:	b2db      	uxtb	r3, r3
 8003598:	22a3      	movs	r2, #163	; 0xa3
 800359a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f866 	bl	8003670 <CODEC_IO_Write>
 80035a4:	4603      	mov	r3, r0
 80035a6:	461a      	mov	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4413      	add	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]
    break;
 80035ae:	e037      	b.n	8003620 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80035b0:	88fb      	ldrh	r3, [r7, #6]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2213      	movs	r2, #19
 80035b6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f858 	bl	8003670 <CODEC_IO_Write>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4413      	add	r3, r2
 80035c8:	60fb      	str	r3, [r7, #12]
    break;
 80035ca:	e029      	b.n	8003620 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80035cc:	88fb      	ldrh	r3, [r7, #6]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2243      	movs	r2, #67	; 0x43
 80035d2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f84a 	bl	8003670 <CODEC_IO_Write>
 80035dc:	4603      	mov	r3, r0
 80035de:	461a      	mov	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4413      	add	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]
    break;
 80035e6:	e01b      	b.n	8003620 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2273      	movs	r2, #115	; 0x73
 80035ee:	f44f 7104 	mov.w	r1, #528	; 0x210
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 f83c 	bl	8003670 <CODEC_IO_Write>
 80035f8:	4603      	mov	r3, r0
 80035fa:	461a      	mov	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4413      	add	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
    break; 
 8003602:	e00d      	b.n	8003620 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8003604:	88fb      	ldrh	r3, [r7, #6]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2283      	movs	r2, #131	; 0x83
 800360a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f82e 	bl	8003670 <CODEC_IO_Write>
 8003614:	4603      	mov	r3, r0
 8003616:	461a      	mov	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
    break; 
 800361e:	bf00      	nop
  }
  return counter;
 8003620:	68fb      	ldr	r3, [r7, #12]
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	00017700 	.word	0x00017700

08003630 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	4603      	mov	r3, r0
 8003638:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2200      	movs	r2, #0
 8003644:	2100      	movs	r1, #0
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f812 	bl	8003670 <CODEC_IO_Write>
 800364c:	4603      	mov	r3, r0
 800364e:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <wm8994_Reset+0x38>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8003656:	4b05      	ldr	r3, [pc, #20]	; (800366c <wm8994_Reset+0x3c>)
 8003658:	2200      	movs	r2, #0
 800365a:	601a      	str	r2, [r3, #0]

  return counter;
 800365c:	68fb      	ldr	r3, [r7, #12]
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20006558 	.word	0x20006558
 800366c:	2000655c 	.word	0x2000655c

08003670 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
 800367a:	460b      	mov	r3, r1
 800367c:	80bb      	strh	r3, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	88b9      	ldrh	r1, [r7, #4]
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 f904 	bl	800389a <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	b2db      	uxtb	r3, r3
}
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
	...

080036a0 <I2Cx_MspInit>:
/**
  * @brief  Initializes I2C MSP.
  * @retval None
  */
static void I2Cx_MspInit(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  EVAL_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80036a6:	4b29      	ldr	r3, [pc, #164]	; (800374c <I2Cx_MspInit+0xac>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	4a28      	ldr	r2, [pc, #160]	; (800374c <I2Cx_MspInit+0xac>)
 80036ac:	f043 0302 	orr.w	r3, r3, #2
 80036b0:	6313      	str	r3, [r2, #48]	; 0x30
 80036b2:	4b26      	ldr	r3, [pc, #152]	; (800374c <I2Cx_MspInit+0xac>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = EVAL_I2Cx_SCL_PIN;
 80036be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036c2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80036c4:	2312      	movs	r3, #18
 80036c6:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80036cc:	2302      	movs	r3, #2
 80036ce:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = EVAL_I2Cx_SCL_SDA_AF;
 80036d0:	2304      	movs	r3, #4
 80036d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	4619      	mov	r1, r3
 80036da:	481d      	ldr	r0, [pc, #116]	; (8003750 <I2Cx_MspInit+0xb0>)
 80036dc:	f002 f8d2 	bl	8005884 <HAL_GPIO_Init>
  
  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = EVAL_I2Cx_SDA_PIN;
 80036e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EVAL_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80036e6:	f107 030c 	add.w	r3, r7, #12
 80036ea:	4619      	mov	r1, r3
 80036ec:	4818      	ldr	r0, [pc, #96]	; (8003750 <I2Cx_MspInit+0xb0>)
 80036ee:	f002 f8c9 	bl	8005884 <HAL_GPIO_Init>
  
  /*** Configure the I2C peripheral ***/ 
  /* Enable I2C clock */
  EVAL_I2Cx_CLK_ENABLE();
 80036f2:	4b16      	ldr	r3, [pc, #88]	; (800374c <I2Cx_MspInit+0xac>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	4a15      	ldr	r2, [pc, #84]	; (800374c <I2Cx_MspInit+0xac>)
 80036f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036fc:	6413      	str	r3, [r2, #64]	; 0x40
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <I2Cx_MspInit+0xac>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003706:	607b      	str	r3, [r7, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
  
  /* Force the I2C peripheral clock reset */  
  EVAL_I2Cx_FORCE_RESET(); 
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <I2Cx_MspInit+0xac>)
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4a0f      	ldr	r2, [pc, #60]	; (800374c <I2Cx_MspInit+0xac>)
 8003710:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003714:	6213      	str	r3, [r2, #32]
  
  /* Release the I2C peripheral clock reset */  
  EVAL_I2Cx_RELEASE_RESET(); 
 8003716:	4b0d      	ldr	r3, [pc, #52]	; (800374c <I2Cx_MspInit+0xac>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a0c      	ldr	r2, [pc, #48]	; (800374c <I2Cx_MspInit+0xac>)
 800371c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003720:	6213      	str	r3, [r2, #32]
  
  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(EVAL_I2Cx_EV_IRQn, 0x0F, 0);
 8003722:	2200      	movs	r2, #0
 8003724:	210f      	movs	r1, #15
 8003726:	201f      	movs	r0, #31
 8003728:	f000 fcff 	bl	800412a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EVAL_I2Cx_EV_IRQn);
 800372c:	201f      	movs	r0, #31
 800372e:	f000 fd18 	bl	8004162 <HAL_NVIC_EnableIRQ>
  
  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(EVAL_I2Cx_ER_IRQn, 0x0F, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	210f      	movs	r1, #15
 8003736:	2020      	movs	r0, #32
 8003738:	f000 fcf7 	bl	800412a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EVAL_I2Cx_ER_IRQn);
 800373c:	2020      	movs	r0, #32
 800373e:	f000 fd10 	bl	8004162 <HAL_NVIC_EnableIRQ>
}
 8003742:	bf00      	nop
 8003744:	3720      	adds	r7, #32
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023800 	.word	0x40023800
 8003750:	40020400 	.word	0x40020400

08003754 <I2Cx_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval None
  */
static void I2Cx_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&hEvalI2c) == HAL_I2C_STATE_RESET)
 8003758:	4812      	ldr	r0, [pc, #72]	; (80037a4 <I2Cx_Init+0x50>)
 800375a:	f002 fd73 	bl	8006244 <HAL_I2C_GetState>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d11c      	bne.n	800379e <I2Cx_Init+0x4a>
  {
    hEvalI2c.Instance              = EVAL_I2Cx;
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <I2Cx_Init+0x50>)
 8003766:	4a10      	ldr	r2, [pc, #64]	; (80037a8 <I2Cx_Init+0x54>)
 8003768:	601a      	str	r2, [r3, #0]
    hEvalI2c.Init.Timing           = EVAL_I2Cx_TIMING;
 800376a:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <I2Cx_Init+0x50>)
 800376c:	4a0f      	ldr	r2, [pc, #60]	; (80037ac <I2Cx_Init+0x58>)
 800376e:	605a      	str	r2, [r3, #4]
    hEvalI2c.Init.OwnAddress1      = 0;
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <I2Cx_Init+0x50>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
    hEvalI2c.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <I2Cx_Init+0x50>)
 8003778:	2201      	movs	r2, #1
 800377a:	60da      	str	r2, [r3, #12]
    hEvalI2c.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <I2Cx_Init+0x50>)
 800377e:	2200      	movs	r2, #0
 8003780:	611a      	str	r2, [r3, #16]
    hEvalI2c.Init.OwnAddress2      = 0;
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <I2Cx_Init+0x50>)
 8003784:	2200      	movs	r2, #0
 8003786:	615a      	str	r2, [r3, #20]
    hEvalI2c.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <I2Cx_Init+0x50>)
 800378a:	2200      	movs	r2, #0
 800378c:	61da      	str	r2, [r3, #28]
    hEvalI2c.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <I2Cx_Init+0x50>)
 8003790:	2200      	movs	r2, #0
 8003792:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit();
 8003794:	f7ff ff84 	bl	80036a0 <I2Cx_MspInit>
    HAL_I2C_Init(&hEvalI2c);    
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <I2Cx_Init+0x50>)
 800379a:	f002 fa51 	bl	8005c40 <HAL_I2C_Init>
  }
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20006560 	.word	0x20006560
 80037a8:	40005400 	.word	0x40005400
 80037ac:	40912732 	.word	0x40912732

080037b0 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b08a      	sub	sp, #40	; 0x28
 80037b4:	af04      	add	r7, sp, #16
 80037b6:	607b      	str	r3, [r7, #4]
 80037b8:	4603      	mov	r3, r0
 80037ba:	73fb      	strb	r3, [r7, #15]
 80037bc:	460b      	mov	r3, r1
 80037be:	81bb      	strh	r3, [r7, #12]
 80037c0:	4613      	mov	r3, r2
 80037c2:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Read(&hEvalI2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	b299      	uxth	r1, r3
 80037cc:	8978      	ldrh	r0, [r7, #10]
 80037ce:	89ba      	ldrh	r2, [r7, #12]
 80037d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037d4:	9302      	str	r3, [sp, #8]
 80037d6:	8c3b      	ldrh	r3, [r7, #32]
 80037d8:	9301      	str	r3, [sp, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	4603      	mov	r3, r0
 80037e0:	4808      	ldr	r0, [pc, #32]	; (8003804 <I2Cx_ReadMultiple+0x54>)
 80037e2:	f002 fc15 	bl	8006010 <HAL_I2C_Mem_Read>
 80037e6:	4603      	mov	r3, r0
 80037e8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <I2Cx_ReadMultiple+0x48>
  {
    /* I2C error occurred */
    I2Cx_Error(Addr);
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f000 f834 	bl	8003860 <I2Cx_Error>
  }
  return status;    
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20006560 	.word	0x20006560

08003808 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written 
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af04      	add	r7, sp, #16
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
 8003814:	460b      	mov	r3, r1
 8003816:	81bb      	strh	r3, [r7, #12]
 8003818:	4613      	mov	r3, r2
 800381a:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(&hEvalI2c, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003820:	7bfb      	ldrb	r3, [r7, #15]
 8003822:	b299      	uxth	r1, r3
 8003824:	8978      	ldrh	r0, [r7, #10]
 8003826:	89ba      	ldrh	r2, [r7, #12]
 8003828:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800382c:	9302      	str	r3, [sp, #8]
 800382e:	8c3b      	ldrh	r3, [r7, #32]
 8003830:	9301      	str	r3, [sp, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	4603      	mov	r3, r0
 8003838:	4808      	ldr	r0, [pc, #32]	; (800385c <I2Cx_WriteMultiple+0x54>)
 800383a:	f002 fad5 	bl	8005de8 <HAL_I2C_Mem_Write>
 800383e:	4603      	mov	r3, r0
 8003840:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <I2Cx_WriteMultiple+0x48>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(Addr);
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	4618      	mov	r0, r3
 800384c:	f000 f808 	bl	8003860 <I2Cx_Error>
  }
  return status;
 8003850:	7dfb      	ldrb	r3, [r7, #23]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20006560 	.word	0x20006560

08003860 <I2Cx_Error>:
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(uint8_t Addr)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(&hEvalI2c);
 800386a:	4804      	ldr	r0, [pc, #16]	; (800387c <I2Cx_Error+0x1c>)
 800386c:	f002 fa78 	bl	8005d60 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init();
 8003870:	f7ff ff70 	bl	8003754 <I2Cx_Init>
}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20006560 	.word	0x20006560

08003880 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8003884:	f7ff ff66 	bl	8003754 <I2Cx_Init>
}
 8003888:	bf00      	nop
 800388a:	bd80      	pop	{r7, pc}

0800388c <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b086      	sub	sp, #24
 800389e:	af02      	add	r7, sp, #8
 80038a0:	4603      	mov	r3, r0
 80038a2:	71fb      	strb	r3, [r7, #7]
 80038a4:	460b      	mov	r3, r1
 80038a6:	80bb      	strh	r3, [r7, #4]
 80038a8:	4613      	mov	r3, r2
 80038aa:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80038ac:	887b      	ldrh	r3, [r7, #2]
 80038ae:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80038b0:	89fb      	ldrh	r3, [r7, #14]
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80038b8:	89fb      	ldrh	r3, [r7, #14]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	b29b      	uxth	r3, r3
 80038be:	b21a      	sxth	r2, r3
 80038c0:	887b      	ldrh	r3, [r7, #2]
 80038c2:	b21b      	sxth	r3, r3
 80038c4:	4313      	orrs	r3, r2
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80038cc:	1cbb      	adds	r3, r7, #2
 80038ce:	88b9      	ldrh	r1, [r7, #4]
 80038d0:	79f8      	ldrb	r0, [r7, #7]
 80038d2:	2202      	movs	r2, #2
 80038d4:	9200      	str	r2, [sp, #0]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f7ff ff96 	bl	8003808 <I2Cx_WriteMultiple>
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	4603      	mov	r3, r0
 80038ec:	460a      	mov	r2, r1
 80038ee:	71fb      	strb	r3, [r7, #7]
 80038f0:	4613      	mov	r3, r2
 80038f2:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	81bb      	strh	r3, [r7, #12]
 80038f8:	2300      	movs	r3, #0
 80038fa:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2); 
 80038fc:	f107 030c 	add.w	r3, r7, #12
 8003900:	88b9      	ldrh	r1, [r7, #4]
 8003902:	79f8      	ldrb	r0, [r7, #7]
 8003904:	2202      	movs	r2, #2
 8003906:	9200      	str	r2, [sp, #0]
 8003908:	2202      	movs	r2, #2
 800390a:	f7ff ff51 	bl	80037b0 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 800390e:	89bb      	ldrh	r3, [r7, #12]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8003914:	89bb      	ldrh	r3, [r7, #12]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	b29b      	uxth	r3, r3
 800391a:	b21a      	sxth	r2, r3
 800391c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003920:	4313      	orrs	r3, r2
 8003922:	b21b      	sxth	r3, r3
 8003924:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8003926:	89fb      	ldrh	r3, [r7, #14]
 8003928:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800392a:	89bb      	ldrh	r3, [r7, #12]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f861 	bl	8003a04 <HAL_Delay>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800394e:	2003      	movs	r0, #3
 8003950:	f000 fbe0 	bl	8004114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003954:	2000      	movs	r0, #0
 8003956:	f000 f805 	bl	8003964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800395a:	f7fd fdcb 	bl	80014f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800396c:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_InitTick+0x54>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b12      	ldr	r3, [pc, #72]	; (80039bc <HAL_InitTick+0x58>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	4619      	mov	r1, r3
 8003976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800397a:	fbb3 f3f1 	udiv	r3, r3, r1
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fbfb 	bl	800417e <HAL_SYSTICK_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e00e      	b.n	80039b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b0f      	cmp	r3, #15
 8003996:	d80a      	bhi.n	80039ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003998:	2200      	movs	r2, #0
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039a0:	f000 fbc3 	bl	800412a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80039a4:	4a06      	ldr	r2, [pc, #24]	; (80039c0 <HAL_InitTick+0x5c>)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e000      	b.n	80039b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	20000000 	.word	0x20000000
 80039bc:	2000003c 	.word	0x2000003c
 80039c0:	20000038 	.word	0x20000038

080039c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c4:	b480      	push	{r7}
 80039c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_IncTick+0x20>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_IncTick+0x24>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4413      	add	r3, r2
 80039d4:	4a04      	ldr	r2, [pc, #16]	; (80039e8 <HAL_IncTick+0x24>)
 80039d6:	6013      	str	r3, [r2, #0]
}
 80039d8:	bf00      	nop
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	2000003c 	.word	0x2000003c
 80039e8:	200065b4 	.word	0x200065b4

080039ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
  return uwTick;
 80039f0:	4b03      	ldr	r3, [pc, #12]	; (8003a00 <HAL_GetTick+0x14>)
 80039f2:	681b      	ldr	r3, [r3, #0]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	200065b4 	.word	0x200065b4

08003a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a0c:	f7ff ffee 	bl	80039ec <HAL_GetTick>
 8003a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a1c:	d005      	beq.n	8003a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_Delay+0x44>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4413      	add	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a2a:	bf00      	nop
 8003a2c:	f7ff ffde 	bl	80039ec <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d8f7      	bhi.n	8003a2c <HAL_Delay+0x28>
  {
  }
}
 8003a3c:	bf00      	nop
 8003a3e:	bf00      	nop
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	2000003c 	.word	0x2000003c

08003a4c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e031      	b.n	8003ac6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fd fd66 	bl	800153c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d116      	bne.n	8003ab8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a8e:	4b10      	ldr	r3, [pc, #64]	; (8003ad0 <HAL_ADC_Init+0x84>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	f043 0202 	orr.w	r2, r3, #2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f970 	bl	8003d80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	f043 0201 	orr.w	r2, r3, #1
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab6:	e001      	b.n	8003abc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	ffffeefd 	.word	0xffffeefd

08003ad4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x1c>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e136      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x28a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b09      	cmp	r3, #9
 8003afe:	d93a      	bls.n	8003b76 <HAL_ADC_ConfigChannel+0xa2>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b08:	d035      	beq.n	8003b76 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68d9      	ldr	r1, [r3, #12]
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	4613      	mov	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3b1e      	subs	r3, #30
 8003b20:	2207      	movs	r2, #7
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43da      	mvns	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	400a      	ands	r2, r1
 8003b2e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a8d      	ldr	r2, [pc, #564]	; (8003d6c <HAL_ADC_ConfigChannel+0x298>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d10a      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68d9      	ldr	r1, [r3, #12]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	061a      	lsls	r2, r3, #24
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b4e:	e035      	b.n	8003bbc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68d9      	ldr	r1, [r3, #12]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	4618      	mov	r0, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	4403      	add	r3, r0
 8003b68:	3b1e      	subs	r3, #30
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b74:	e022      	b.n	8003bbc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6919      	ldr	r1, [r3, #16]
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	461a      	mov	r2, r3
 8003b84:	4613      	mov	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4413      	add	r3, r2
 8003b8a:	2207      	movs	r2, #7
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43da      	mvns	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	400a      	ands	r2, r1
 8003b98:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6919      	ldr	r1, [r3, #16]
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	4618      	mov	r0, r3
 8003bac:	4603      	mov	r3, r0
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	4403      	add	r3, r0
 8003bb2:	409a      	lsls	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d824      	bhi.n	8003c0e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3b05      	subs	r3, #5
 8003bd6:	221f      	movs	r2, #31
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	400a      	ands	r2, r1
 8003be4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3b05      	subs	r3, #5
 8003c00:	fa00 f203 	lsl.w	r2, r0, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	635a      	str	r2, [r3, #52]	; 0x34
 8003c0c:	e04c      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b0c      	cmp	r3, #12
 8003c14:	d824      	bhi.n	8003c60 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	3b23      	subs	r3, #35	; 0x23
 8003c28:	221f      	movs	r2, #31
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43da      	mvns	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	400a      	ands	r2, r1
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4618      	mov	r0, r3
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	3b23      	subs	r3, #35	; 0x23
 8003c52:	fa00 f203 	lsl.w	r2, r0, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c5e:	e023      	b.n	8003ca8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	3b41      	subs	r3, #65	; 0x41
 8003c72:	221f      	movs	r2, #31
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43da      	mvns	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	400a      	ands	r2, r1
 8003c80:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	4618      	mov	r0, r3
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	4413      	add	r3, r2
 8003c9a:	3b41      	subs	r3, #65	; 0x41
 8003c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a30      	ldr	r2, [pc, #192]	; (8003d70 <HAL_ADC_ConfigChannel+0x29c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10a      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x1f4>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cba:	d105      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003cbc:	4b2d      	ldr	r3, [pc, #180]	; (8003d74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4a2c      	ldr	r2, [pc, #176]	; (8003d74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003cc2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003cc6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a28      	ldr	r2, [pc, #160]	; (8003d70 <HAL_ADC_ConfigChannel+0x29c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10f      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x21e>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b12      	cmp	r3, #18
 8003cd8:	d10b      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003cda:	4b26      	ldr	r3, [pc, #152]	; (8003d74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4a25      	ldr	r2, [pc, #148]	; (8003d74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ce0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ce4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003ce6:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003cec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cf0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1e      	ldr	r2, [pc, #120]	; (8003d70 <HAL_ADC_ConfigChannel+0x29c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d12b      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x280>
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <HAL_ADC_ConfigChannel+0x298>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d003      	beq.n	8003d0e <HAL_ADC_ConfigChannel+0x23a>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b11      	cmp	r3, #17
 8003d0c:	d122      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003d0e:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003d14:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003d18:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003d1a:	4b16      	ldr	r3, [pc, #88]	; (8003d74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4a15      	ldr	r2, [pc, #84]	; (8003d74 <HAL_ADC_ConfigChannel+0x2a0>)
 8003d20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d24:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a10      	ldr	r2, [pc, #64]	; (8003d6c <HAL_ADC_ConfigChannel+0x298>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d111      	bne.n	8003d54 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_ADC_ConfigChannel+0x2a4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <HAL_ADC_ConfigChannel+0x2a8>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	0c9a      	lsrs	r2, r3, #18
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d46:	e002      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f9      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	10000012 	.word	0x10000012
 8003d70:	40012000 	.word	0x40012000
 8003d74:	40012300 	.word	0x40012300
 8003d78:	20000000 	.word	0x20000000
 8003d7c:	431bde83 	.word	0x431bde83

08003d80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003d88:	4b78      	ldr	r3, [pc, #480]	; (8003f6c <ADC_Init+0x1ec>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a77      	ldr	r2, [pc, #476]	; (8003f6c <ADC_Init+0x1ec>)
 8003d8e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003d92:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003d94:	4b75      	ldr	r3, [pc, #468]	; (8003f6c <ADC_Init+0x1ec>)
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4973      	ldr	r1, [pc, #460]	; (8003f6c <ADC_Init+0x1ec>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003db0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	021a      	lsls	r2, r3, #8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003dd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	430a      	orrs	r2, r1
 8003de6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6899      	ldr	r1, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68da      	ldr	r2, [r3, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	430a      	orrs	r2, r1
 8003e08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	4a58      	ldr	r2, [pc, #352]	; (8003f70 <ADC_Init+0x1f0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d022      	beq.n	8003e5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6899      	ldr	r1, [r3, #8]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6899      	ldr	r1, [r3, #8]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	609a      	str	r2, [r3, #8]
 8003e58:	e00f      	b.n	8003e7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0202 	bic.w	r2, r2, #2
 8003e88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6899      	ldr	r1, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	005a      	lsls	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01b      	beq.n	8003ee0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ec6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	035a      	lsls	r2, r3, #13
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	e007      	b.n	8003ef0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	051a      	lsls	r2, r3, #20
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	6899      	ldr	r1, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f32:	025a      	lsls	r2, r3, #9
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689a      	ldr	r2, [r3, #8]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6899      	ldr	r1, [r3, #8]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	029a      	lsls	r2, r3, #10
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	609a      	str	r2, [r3, #8]
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	40012300 	.word	0x40012300
 8003f70:	0f000001 	.word	0x0f000001

08003f74 <__NVIC_SetPriorityGrouping>:
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f84:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f90:	4013      	ands	r3, r2
 8003f92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f9c:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fa2:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <__NVIC_SetPriorityGrouping+0x40>)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	60d3      	str	r3, [r2, #12]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	e000ed00 	.word	0xe000ed00
 8003fb8:	05fa0000 	.word	0x05fa0000

08003fbc <__NVIC_GetPriorityGrouping>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	f003 0307 	and.w	r3, r3, #7
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000ed00 	.word	0xe000ed00

08003fd8 <__NVIC_EnableIRQ>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	db0b      	blt.n	8004002 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fea:	79fb      	ldrb	r3, [r7, #7]
 8003fec:	f003 021f 	and.w	r2, r3, #31
 8003ff0:	4907      	ldr	r1, [pc, #28]	; (8004010 <__NVIC_EnableIRQ+0x38>)
 8003ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff6:	095b      	lsrs	r3, r3, #5
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8003ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	e000e100 	.word	0xe000e100

08004014 <__NVIC_SetPriority>:
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	6039      	str	r1, [r7, #0]
 800401e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004024:	2b00      	cmp	r3, #0
 8004026:	db0a      	blt.n	800403e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	b2da      	uxtb	r2, r3
 800402c:	490c      	ldr	r1, [pc, #48]	; (8004060 <__NVIC_SetPriority+0x4c>)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	0112      	lsls	r2, r2, #4
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	440b      	add	r3, r1
 8004038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800403c:	e00a      	b.n	8004054 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	b2da      	uxtb	r2, r3
 8004042:	4908      	ldr	r1, [pc, #32]	; (8004064 <__NVIC_SetPriority+0x50>)
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	3b04      	subs	r3, #4
 800404c:	0112      	lsls	r2, r2, #4
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	440b      	add	r3, r1
 8004052:	761a      	strb	r2, [r3, #24]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	e000e100 	.word	0xe000e100
 8004064:	e000ed00 	.word	0xe000ed00

08004068 <NVIC_EncodePriority>:
{
 8004068:	b480      	push	{r7}
 800406a:	b089      	sub	sp, #36	; 0x24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	f1c3 0307 	rsb	r3, r3, #7
 8004082:	2b04      	cmp	r3, #4
 8004084:	bf28      	it	cs
 8004086:	2304      	movcs	r3, #4
 8004088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3304      	adds	r3, #4
 800408e:	2b06      	cmp	r3, #6
 8004090:	d902      	bls.n	8004098 <NVIC_EncodePriority+0x30>
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3b03      	subs	r3, #3
 8004096:	e000      	b.n	800409a <NVIC_EncodePriority+0x32>
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800409c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43da      	mvns	r2, r3
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	401a      	ands	r2, r3
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ba:	43d9      	mvns	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040c0:	4313      	orrs	r3, r2
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3724      	adds	r7, #36	; 0x24
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
	...

080040d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3b01      	subs	r3, #1
 80040dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040e0:	d301      	bcc.n	80040e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040e2:	2301      	movs	r3, #1
 80040e4:	e00f      	b.n	8004106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <SysTick_Config+0x40>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040ee:	210f      	movs	r1, #15
 80040f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040f4:	f7ff ff8e 	bl	8004014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040f8:	4b05      	ldr	r3, [pc, #20]	; (8004110 <SysTick_Config+0x40>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <SysTick_Config+0x40>)
 8004100:	2207      	movs	r2, #7
 8004102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	e000e010 	.word	0xe000e010

08004114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7ff ff29 	bl	8003f74 <__NVIC_SetPriorityGrouping>
}
 8004122:	bf00      	nop
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800412a:	b580      	push	{r7, lr}
 800412c:	b086      	sub	sp, #24
 800412e:	af00      	add	r7, sp, #0
 8004130:	4603      	mov	r3, r0
 8004132:	60b9      	str	r1, [r7, #8]
 8004134:	607a      	str	r2, [r7, #4]
 8004136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800413c:	f7ff ff3e 	bl	8003fbc <__NVIC_GetPriorityGrouping>
 8004140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	6978      	ldr	r0, [r7, #20]
 8004148:	f7ff ff8e 	bl	8004068 <NVIC_EncodePriority>
 800414c:	4602      	mov	r2, r0
 800414e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004152:	4611      	mov	r1, r2
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff5d 	bl	8004014 <__NVIC_SetPriority>
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	4603      	mov	r3, r0
 800416a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800416c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff ff31 	bl	8003fd8 <__NVIC_EnableIRQ>
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b082      	sub	sp, #8
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff ffa2 	bl	80040d0 <SysTick_Config>
 800418c:	4603      	mov	r3, r0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004198:	b480      	push	{r7}
 800419a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800419c:	f3bf 8f5f 	dmb	sy
}
 80041a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <HAL_MPU_Disable+0x28>)
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	4a06      	ldr	r2, [pc, #24]	; (80041c0 <HAL_MPU_Disable+0x28>)
 80041a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ac:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80041ae:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_MPU_Disable+0x2c>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	605a      	str	r2, [r3, #4]
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	e000ed00 	.word	0xe000ed00
 80041c4:	e000ed90 	.word	0xe000ed90

080041c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80041d0:	4a0b      	ldr	r2, [pc, #44]	; (8004200 <HAL_MPU_Enable+0x38>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80041da:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <HAL_MPU_Enable+0x3c>)
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	4a09      	ldr	r2, [pc, #36]	; (8004204 <HAL_MPU_Enable+0x3c>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80041e6:	f3bf 8f4f 	dsb	sy
}
 80041ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041ec:	f3bf 8f6f 	isb	sy
}
 80041f0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000ed90 	.word	0xe000ed90
 8004204:	e000ed00 	.word	0xe000ed00

08004208 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	785a      	ldrb	r2, [r3, #1]
 8004214:	4b1d      	ldr	r3, [pc, #116]	; (800428c <HAL_MPU_ConfigRegion+0x84>)
 8004216:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d029      	beq.n	8004274 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8004220:	4a1a      	ldr	r2, [pc, #104]	; (800428c <HAL_MPU_ConfigRegion+0x84>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7b1b      	ldrb	r3, [r3, #12]
 800422c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	7adb      	ldrb	r3, [r3, #11]
 8004232:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004234:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	7a9b      	ldrb	r3, [r3, #10]
 800423a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800423c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	7b5b      	ldrb	r3, [r3, #13]
 8004242:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004244:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	7b9b      	ldrb	r3, [r3, #14]
 800424a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800424c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	7bdb      	ldrb	r3, [r3, #15]
 8004252:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004254:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	7a5b      	ldrb	r3, [r3, #9]
 800425a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800425c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	7a1b      	ldrb	r3, [r3, #8]
 8004262:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004264:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	7812      	ldrb	r2, [r2, #0]
 800426a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800426c:	4a07      	ldr	r2, [pc, #28]	; (800428c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800426e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004270:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004272:	e005      	b.n	8004280 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_MPU_ConfigRegion+0x84>)
 8004276:	2200      	movs	r2, #0
 8004278:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800427a:	4b04      	ldr	r3, [pc, #16]	; (800428c <HAL_MPU_ConfigRegion+0x84>)
 800427c:	2200      	movs	r2, #0
 800427e:	611a      	str	r2, [r3, #16]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	e000ed90 	.word	0xe000ed90

08004290 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e0ac      	b.n	80043fc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if(a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fae6 	bl	8004878 <DFSDM_GetChannelFromInstance>
 80042ac:	4603      	mov	r3, r0
 80042ae:	4a55      	ldr	r2, [pc, #340]	; (8004404 <HAL_DFSDM_ChannelInit+0x174>)
 80042b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e09f      	b.n	80043fc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7fd fa65 	bl	800178c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80042c2:	4b51      	ldr	r3, [pc, #324]	; (8004408 <HAL_DFSDM_ChannelInit+0x178>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3301      	adds	r3, #1
 80042c8:	4a4f      	ldr	r2, [pc, #316]	; (8004408 <HAL_DFSDM_ChannelInit+0x178>)
 80042ca:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(v_dfsdm1ChannelCounter == 1)
 80042cc:	4b4e      	ldr	r3, [pc, #312]	; (8004408 <HAL_DFSDM_ChannelInit+0x178>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d125      	bne.n	8004320 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80042d4:	4b4d      	ldr	r3, [pc, #308]	; (800440c <HAL_DFSDM_ChannelInit+0x17c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a4c      	ldr	r2, [pc, #304]	; (800440c <HAL_DFSDM_ChannelInit+0x17c>)
 80042da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042de:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80042e0:	4b4a      	ldr	r3, [pc, #296]	; (800440c <HAL_DFSDM_ChannelInit+0x17c>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4948      	ldr	r1, [pc, #288]	; (800440c <HAL_DFSDM_ChannelInit+0x17c>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80042ee:	4b47      	ldr	r3, [pc, #284]	; (800440c <HAL_DFSDM_ChannelInit+0x17c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a46      	ldr	r2, [pc, #280]	; (800440c <HAL_DFSDM_ChannelInit+0x17c>)
 80042f4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80042f8:	6013      	str	r3, [r2, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	791b      	ldrb	r3, [r3, #4]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d108      	bne.n	8004314 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1) <<
 8004302:	4b42      	ldr	r3, [pc, #264]	; (800440c <HAL_DFSDM_ChannelInit+0x17c>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	3b01      	subs	r3, #1
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	493f      	ldr	r1, [pc, #252]	; (800440c <HAL_DFSDM_ChannelInit+0x17c>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8004314:	4b3d      	ldr	r3, [pc, #244]	; (800440c <HAL_DFSDM_ChannelInit+0x17c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a3c      	ldr	r2, [pc, #240]	; (800440c <HAL_DFSDM_ChannelInit+0x17c>)
 800431a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800431e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800432e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6819      	ldr	r1, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800433e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004344:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 020f 	bic.w	r2, r2, #15
 800435c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6819      	ldr	r1, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	430a      	orrs	r2, r1
 8004374:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004384:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	3b01      	subs	r3, #1
 8004396:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f002 0207 	and.w	r2, r2, #7
 80043b0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043bc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043dc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fa44 	bl	8004878 <DFSDM_GetChannelFromInstance>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4904      	ldr	r1, [pc, #16]	; (8004404 <HAL_DFSDM_ChannelInit+0x174>)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	200065bc 	.word	0x200065bc
 8004408:	200065b8 	.word	0x200065b8
 800440c:	40017400 	.word	0x40017400

08004410 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if(hdfsdm_filter == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e0c6      	b.n	80045b0 <HAL_DFSDM_FilterInit+0x1a0>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a64      	ldr	r2, [pc, #400]	; (80045b8 <HAL_DFSDM_FilterInit+0x1a8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d109      	bne.n	8004440 <HAL_DFSDM_FilterInit+0x30>
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
  if((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8004430:	2b01      	cmp	r3, #1
 8004432:	d003      	beq.n	800443c <HAL_DFSDM_FilterInit+0x2c>
     (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
    ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0b7      	b.n	80045b0 <HAL_DFSDM_FilterInit+0x1a0>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f7fd f8af 	bl	80015bc <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800446c:	601a      	str	r2, [r3, #0]
  if(hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7a1b      	ldrb	r3, [r3, #8]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d108      	bne.n	8004488 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e007      	b.n	8004498 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004496:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	7a5b      	ldrb	r3, [r3, #9]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d108      	bne.n	80044b2 <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	e007      	b.n	80044c2 <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80044c0:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6819      	ldr	r1, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b3b      	ldr	r3, [pc, #236]	; (80045bc <HAL_DFSDM_FilterInit+0x1ac>)
 80044ce:	400b      	ands	r3, r1
 80044d0:	6013      	str	r3, [r2, #0]
  if(hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d108      	bne.n	80044ec <HAL_DFSDM_FilterInit+0xdc>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	7c1b      	ldrb	r3, [r3, #16]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d108      	bne.n	8004506 <HAL_DFSDM_FilterInit+0xf6>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0210 	orr.w	r2, r2, #16
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e007      	b.n	8004516 <HAL_DFSDM_FilterInit+0x106>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0210 	bic.w	r2, r2, #16
 8004514:	601a      	str	r2, [r3, #0]
  }

  if(hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	7c5b      	ldrb	r3, [r3, #17]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d108      	bne.n	8004530 <HAL_DFSDM_FilterInit+0x120>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0220 	orr.w	r2, r2, #32
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e007      	b.n	8004540 <HAL_DFSDM_FilterInit+0x130>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0220 	bic.w	r2, r2, #32
 800453e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6959      	ldr	r1, [r3, #20]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <HAL_DFSDM_FilterInit+0x1b0>)
 800454c:	400b      	ands	r3, r1
 800454e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6959      	ldr	r1, [r3, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	69da      	ldr	r2, [r3, #28]
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	3b01      	subs	r3, #1
 8004560:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8004562:	431a      	orrs	r2, r3
                                  (hdfsdm_filter->Init.FilterParam.IntOversampling - 1));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	3b01      	subs	r3, #1
                                    ((hdfsdm_filter->Init.FilterParam.Oversampling - 1) << DFSDM_FLTFCR_FOSR_Pos) |
 800456a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685a      	ldr	r2, [r3, #4]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	68da      	ldr	r2, [r3, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	7c1a      	ldrb	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	40017500 	.word	0x40017500
 80045bc:	ffff80f7 	.word	0xffff80f7
 80045c0:	1c00ff00 	.word	0x1c00ff00

080045c4 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b087      	sub	sp, #28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d0:	2300      	movs	r3, #0
 80045d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d02c      	beq.n	8004638 <HAL_DFSDM_FilterConfigRegChannel+0x74>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80045e4:	2bff      	cmp	r3, #255	; 0xff
 80045e6:	d027      	beq.n	8004638 <HAL_DFSDM_FilterConfigRegChannel+0x74>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6819      	ldr	r1, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b16      	ldr	r3, [pc, #88]	; (800464c <HAL_DFSDM_FilterConfigRegChannel+0x88>)
 80045f4:	400b      	ands	r3, r1
 80045f6:	6013      	str	r3, [r2, #0]
    if(ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d10d      	bne.n	800461a <HAL_DFSDM_FilterConfigRegChannel+0x56>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) (((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800460c:	431a      	orrs	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	e00a      	b.n	8004630 <HAL_DFSDM_FilterConfigRegChannel+0x6c>
                                                     DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t) ((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6819      	ldr	r1, [r3, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	021b      	lsls	r3, r3, #8
 8004624:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
 8004636:	e001      	b.n	800463c <HAL_DFSDM_FilterConfigRegChannel+0x78>
  }
  else
  {
    status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800463c:	7dfb      	ldrb	r3, [r7, #23]
}
 800463e:	4618      	mov	r0, r3
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	f8fbffff 	.word	0xf8fbffff

08004650 <HAL_DFSDM_FilterConfigInjChannel>:
  *         This parameter can be a values combination of @ref DFSDM_Channel_Selection.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigInjChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_INJECTED_CHANNEL(Channel));

  /* Check DFSDM filter state */
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01b      	beq.n	80046a0 <HAL_DFSDM_FilterConfigInjChannel+0x50>
     (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 800466e:	2bff      	cmp	r3, #255	; 0xff
 8004670:	d016      	beq.n	80046a0 <HAL_DFSDM_FilterConfigInjChannel+0x50>
  {
    /* Configure channel for injected conversion */
    hdfsdm_filter->Instance->FLTJCHGR = (uint32_t) (Channel & DFSDM_LSB_MASK);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	b292      	uxth	r2, r2
 800467a:	611a      	str	r2, [r3, #16]
    /* Store number of injected channels */
    hdfsdm_filter->InjectedChannelsNbr = DFSDM_GetInjChannelsNbr(Channel);
 800467c:	6838      	ldr	r0, [r7, #0]
 800467e:	f000 f8dc 	bl	800483a <DFSDM_GetInjChannelsNbr>
 8004682:	4602      	mov	r2, r0
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
    /* Update number of injected channels remaining */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1;
 800468e:	2b01      	cmp	r3, #1
 8004690:	d102      	bne.n	8004698 <HAL_DFSDM_FilterConfigInjChannel+0x48>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	e000      	b.n	800469a <HAL_DFSDM_FilterConfigInjChannel+0x4a>
 8004698:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6493      	str	r3, [r2, #72]	; 0x48
 800469e:	e001      	b.n	80046a4 <HAL_DFSDM_FilterConfigInjChannel+0x54>
  }
  else
  {
    status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return function status */
  return status;
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if((pData == NULL) || (Length == 0))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d102      	bne.n	80046d2 <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	75fb      	strb	r3, [r7, #23]
 80046d0:	e066      	b.n	80047a0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check that DMA is enabled for regular conversion */
  else if((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80046e0:	d002      	beq.n	80046e8 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	75fb      	strb	r3, [r7, #23]
 80046e6:	e05b      	b.n	80047a0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check parameters compatibility */
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10e      	bne.n	800470e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fc:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d105      	bne.n	800470e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d002      	beq.n	800470e <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
          (Length != 1))
  {
    status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	75fb      	strb	r3, [r7, #23]
 800470c:	e048      	b.n	80047a0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10c      	bne.n	8004730 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800471a:	2b00      	cmp	r3, #0
 800471c:	d108      	bne.n	8004730 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
          (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004722:	69db      	ldr	r3, [r3, #28]
          (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8004724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004728:	d102      	bne.n	8004730 <HAL_DFSDM_FilterRegularStart_DMA+0x80>
  {
    status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	75fb      	strb	r3, [r7, #23]
 800472e:	e037      	b.n	80047a0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
  }
  /* Check DFSDM filter state */
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004736:	2b01      	cmp	r3, #1
 8004738:	d004      	beq.n	8004744 <HAL_DFSDM_FilterRegularStart_DMA+0x94>
          (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8004740:	2b03      	cmp	r3, #3
 8004742:	d12b      	bne.n	800479c <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004748:	4a18      	ldr	r2, [pc, #96]	; (80047ac <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800474a:	63da      	str	r2, [r3, #60]	; 0x3c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8004752:	64da      	str	r2, [r3, #76]	; 0x4c
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004758:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 800475a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800475e:	d101      	bne.n	8004764 <HAL_DFSDM_FilterRegularStart_DMA+0xb4>
 8004760:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <HAL_DFSDM_FilterRegularStart_DMA+0x104>)
 8004762:	e000      	b.n	8004766 <HAL_DFSDM_FilterRegularStart_DMA+0xb6>
 8004764:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ?\
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Start DMA in interrupt mode */
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	331c      	adds	r3, #28
 8004776:	4619      	mov	r1, r3
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f000 f9cc 	bl	8004b18 <HAL_DMA_Start_IT>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d006      	beq.n	8004794 <HAL_DFSDM_FilterRegularStart_DMA+0xe4>
                        (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	22ff      	movs	r2, #255	; 0xff
 800478a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	75fb      	strb	r3, [r7, #23]
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8004792:	e005      	b.n	80047a0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f8bb 	bl	8004910 <DFSDM_RegConvStart>
    if(HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800479a:	e001      	b.n	80047a0 <HAL_DFSDM_FilterRegularStart_DMA+0xf0>
    }
  }
  else
  {
    status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80047a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	080047fd 	.word	0x080047fd
 80047b0:	08004819 	.word	0x08004819
 80047b4:	080047e1 	.word	0x080047e1

080047b8 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f7fb ff34 	bl	800065c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80047f4:	bf00      	nop
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004808:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ffd4 	bl	80047b8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8004810:	bf00      	nop
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef* hdfsdm_filter = (DFSDM_Filter_HandleTypeDef*) ((DMA_HandleTypeDef*)hdma)->Parent;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2203      	movs	r2, #3
 800482a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff ffcd 	bl	80047cc <HAL_DFSDM_FilterErrorCallback>
#endif
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <DFSDM_GetInjChannelsNbr>:
  * @brief  This function allows to get the number of injected channels.
  * @param  Channels bitfield of injected channels.
  * @retval Number of injected channels.
  */
static uint32_t DFSDM_GetInjChannelsNbr(uint32_t Channels)
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  uint32_t nbChannels = 0;
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
  uint32_t tmp;

  /* Get the number of channels from bitfield */
  tmp = (uint32_t) (Channels & DFSDM_LSB_MASK);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	b29b      	uxth	r3, r3
 800484a:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 800484c:	e00a      	b.n	8004864 <DFSDM_GetInjChannelsNbr+0x2a>
  {
    if((tmp & 1) != 0)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <DFSDM_GetInjChannelsNbr+0x24>
    {
      nbChannels++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]
    }
    tmp = (uint32_t) (tmp >> 1);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	60bb      	str	r3, [r7, #8]
  while(tmp != 0)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f1      	bne.n	800484e <DFSDM_GetInjChannelsNbr+0x14>
  }
  return nbChannels;
 800486a:	68fb      	ldr	r3, [r7, #12]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr

08004878 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a1c      	ldr	r2, [pc, #112]	; (80048f4 <DFSDM_GetChannelFromInstance+0x7c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d102      	bne.n	800488e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	e02b      	b.n	80048e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel1)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <DFSDM_GetChannelFromInstance+0x80>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d102      	bne.n	800489c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8004896:	2301      	movs	r3, #1
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	e024      	b.n	80048e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a17      	ldr	r2, [pc, #92]	; (80048fc <DFSDM_GetChannelFromInstance+0x84>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d102      	bne.n	80048aa <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80048a4:	2302      	movs	r3, #2
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e01d      	b.n	80048e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a14      	ldr	r2, [pc, #80]	; (8004900 <DFSDM_GetChannelFromInstance+0x88>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d102      	bne.n	80048b8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 80048b2:	2303      	movs	r3, #3
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e016      	b.n	80048e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a12      	ldr	r2, [pc, #72]	; (8004904 <DFSDM_GetChannelFromInstance+0x8c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d102      	bne.n	80048c6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 80048c0:	2304      	movs	r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e00f      	b.n	80048e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a0f      	ldr	r2, [pc, #60]	; (8004908 <DFSDM_GetChannelFromInstance+0x90>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d102      	bne.n	80048d4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 80048ce:	2305      	movs	r3, #5
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e008      	b.n	80048e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a0d      	ldr	r2, [pc, #52]	; (800490c <DFSDM_GetChannelFromInstance+0x94>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d102      	bne.n	80048e2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 80048dc:	2306      	movs	r3, #6
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e001      	b.n	80048e6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 80048e2:	2307      	movs	r3, #7
 80048e4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80048e6:	68fb      	ldr	r3, [r7, #12]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	40017400 	.word	0x40017400
 80048f8:	40017420 	.word	0x40017420
 80048fc:	40017440 	.word	0x40017440
 8004900:	40017460 	.word	0x40017460
 8004904:	40017480 	.word	0x40017480
 8004908:	400174a0 	.word	0x400174a0
 800490c:	400174c0 	.word	0x400174c0

08004910 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if(hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	2b00      	cmp	r3, #0
 800491e:	d108      	bne.n	8004932 <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	e033      	b.n	800499a <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004950:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0201 	orr.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if(hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004968:	2b03      	cmp	r3, #3
 800496a:	d116      	bne.n	800499a <DFSDM_RegConvStart+0x8a>
    {
      if(hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	2b00      	cmp	r3, #0
 8004972:	d107      	bne.n	8004984 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0202 	orr.w	r2, r2, #2
 8004982:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                         hdfsdm_filter->InjectedChannelsNbr : 1;
 800498a:	2b01      	cmp	r3, #1
 800498c:	d102      	bne.n	8004994 <DFSDM_RegConvStart+0x84>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	e000      	b.n	8004996 <DFSDM_RegConvStart+0x86>
 8004994:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                          HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <DFSDM_RegConvStart+0x98>
 80049a4:	2202      	movs	r2, #2
 80049a6:	e000      	b.n	80049aa <DFSDM_RegConvStart+0x9a>
 80049a8:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049c8:	f7ff f810 	bl	80039ec <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e099      	b.n	8004b0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0201 	bic.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049f8:	e00f      	b.n	8004a1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049fa:	f7fe fff7 	bl	80039ec <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b05      	cmp	r3, #5
 8004a06:	d908      	bls.n	8004a1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2203      	movs	r2, #3
 8004a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e078      	b.n	8004b0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e8      	bne.n	80049fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	4b38      	ldr	r3, [pc, #224]	; (8004b14 <HAL_DMA_Init+0x158>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d107      	bne.n	8004a84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f023 0307 	bic.w	r3, r3, #7
 8004a9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d117      	bne.n	8004ade <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00e      	beq.n	8004ade <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 faa5 	bl	8005010 <DMA_CheckFifoParam>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2240      	movs	r2, #64	; 0x40
 8004ad0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ada:	2301      	movs	r3, #1
 8004adc:	e016      	b.n	8004b0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa5c 	bl	8004fa4 <DMA_CalcBaseAndBitshift>
 8004aec:	4603      	mov	r3, r0
 8004aee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004af4:	223f      	movs	r2, #63	; 0x3f
 8004af6:	409a      	lsls	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3718      	adds	r7, #24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	e010803f 	.word	0xe010803f

08004b18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_DMA_Start_IT+0x26>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e048      	b.n	8004bd0 <HAL_DMA_Start_IT+0xb8>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d137      	bne.n	8004bc2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 f9ee 	bl	8004f48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b70:	223f      	movs	r2, #63	; 0x3f
 8004b72:	409a      	lsls	r2, r3
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0216 	orr.w	r2, r2, #22
 8004b86:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695a      	ldr	r2, [r3, #20]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b96:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0208 	orr.w	r2, r2, #8
 8004bae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	e005      	b.n	8004bce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004bca:	2302      	movs	r3, #2
 8004bcc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d004      	beq.n	8004bf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2280      	movs	r2, #128	; 0x80
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e00c      	b.n	8004c10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2205      	movs	r2, #5
 8004bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004c28:	4b8e      	ldr	r3, [pc, #568]	; (8004e64 <HAL_DMA_IRQHandler+0x248>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a8e      	ldr	r2, [pc, #568]	; (8004e68 <HAL_DMA_IRQHandler+0x24c>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	0a9b      	lsrs	r3, r3, #10
 8004c34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c46:	2208      	movs	r2, #8
 8004c48:	409a      	lsls	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d01a      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d013      	beq.n	8004c88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0204 	bic.w	r2, r2, #4
 8004c6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c74:	2208      	movs	r2, #8
 8004c76:	409a      	lsls	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c80:	f043 0201 	orr.w	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d012      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004caa:	2201      	movs	r2, #1
 8004cac:	409a      	lsls	r2, r3
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb6:	f043 0202 	orr.w	r2, r3, #2
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	409a      	lsls	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d012      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00b      	beq.n	8004cf4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	409a      	lsls	r2, r3
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	f043 0204 	orr.w	r2, r3, #4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cf8:	2210      	movs	r2, #16
 8004cfa:	409a      	lsls	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d043      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d03c      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d16:	2210      	movs	r2, #16
 8004d18:	409a      	lsls	r2, r3
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d018      	beq.n	8004d5e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d108      	bne.n	8004d4c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d024      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
 8004d4a:	e01f      	b.n	8004d8c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01b      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	4798      	blx	r3
 8004d5c:	e016      	b.n	8004d8c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d107      	bne.n	8004d7c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0208 	bic.w	r2, r2, #8
 8004d7a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d90:	2220      	movs	r2, #32
 8004d92:	409a      	lsls	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 808f 	beq.w	8004ebc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8087 	beq.w	8004ebc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db2:	2220      	movs	r2, #32
 8004db4:	409a      	lsls	r2, r3
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d136      	bne.n	8004e34 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0216 	bic.w	r2, r2, #22
 8004dd4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004de4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d103      	bne.n	8004df6 <HAL_DMA_IRQHandler+0x1da>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0208 	bic.w	r2, r2, #8
 8004e04:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0a:	223f      	movs	r2, #63	; 0x3f
 8004e0c:	409a      	lsls	r2, r3
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d07e      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
        }
        return;
 8004e32:	e079      	b.n	8004f28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d01d      	beq.n	8004e7e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10d      	bne.n	8004e6c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d031      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
 8004e60:	e02c      	b.n	8004ebc <HAL_DMA_IRQHandler+0x2a0>
 8004e62:	bf00      	nop
 8004e64:	20000000 	.word	0x20000000
 8004e68:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d023      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
 8004e7c:	e01e      	b.n	8004ebc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10f      	bne.n	8004eac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0210 	bic.w	r2, r2, #16
 8004e9a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d032      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d022      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2205      	movs	r2, #5
 8004ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0201 	bic.w	r2, r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	3301      	adds	r3, #1
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d307      	bcc.n	8004f04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1f2      	bne.n	8004ee8 <HAL_DMA_IRQHandler+0x2cc>
 8004f02:	e000      	b.n	8004f06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004f04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
 8004f26:	e000      	b.n	8004f2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004f28:	bf00      	nop
    }
  }
}
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004f64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	2b40      	cmp	r3, #64	; 0x40
 8004f74:	d108      	bne.n	8004f88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f86:	e007      	b.n	8004f98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	60da      	str	r2, [r3, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	3b10      	subs	r3, #16
 8004fb4:	4a13      	ldr	r2, [pc, #76]	; (8005004 <DMA_CalcBaseAndBitshift+0x60>)
 8004fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004fbe:	4a12      	ldr	r2, [pc, #72]	; (8005008 <DMA_CalcBaseAndBitshift+0x64>)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d908      	bls.n	8004fe4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4b0c      	ldr	r3, [pc, #48]	; (800500c <DMA_CalcBaseAndBitshift+0x68>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	1d1a      	adds	r2, r3, #4
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	659a      	str	r2, [r3, #88]	; 0x58
 8004fe2:	e006      	b.n	8004ff2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4b08      	ldr	r3, [pc, #32]	; (800500c <DMA_CalcBaseAndBitshift+0x68>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	aaaaaaab 	.word	0xaaaaaaab
 8005008:	0800b3a8 	.word	0x0800b3a8
 800500c:	fffffc00 	.word	0xfffffc00

08005010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d11f      	bne.n	800506a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d856      	bhi.n	80050de <DMA_CheckFifoParam+0xce>
 8005030:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <DMA_CheckFifoParam+0x28>)
 8005032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005036:	bf00      	nop
 8005038:	08005049 	.word	0x08005049
 800503c:	0800505b 	.word	0x0800505b
 8005040:	08005049 	.word	0x08005049
 8005044:	080050df 	.word	0x080050df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005050:	2b00      	cmp	r3, #0
 8005052:	d046      	beq.n	80050e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005058:	e043      	b.n	80050e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005062:	d140      	bne.n	80050e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005068:	e03d      	b.n	80050e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005072:	d121      	bne.n	80050b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b03      	cmp	r3, #3
 8005078:	d837      	bhi.n	80050ea <DMA_CheckFifoParam+0xda>
 800507a:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <DMA_CheckFifoParam+0x70>)
 800507c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005080:	08005091 	.word	0x08005091
 8005084:	08005097 	.word	0x08005097
 8005088:	08005091 	.word	0x08005091
 800508c:	080050a9 	.word	0x080050a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
      break;
 8005094:	e030      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d025      	beq.n	80050ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050a6:	e022      	b.n	80050ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050b0:	d11f      	bne.n	80050f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80050b6:	e01c      	b.n	80050f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d903      	bls.n	80050c6 <DMA_CheckFifoParam+0xb6>
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d003      	beq.n	80050cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80050c4:	e018      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	73fb      	strb	r3, [r7, #15]
      break;
 80050ca:	e015      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00e      	beq.n	80050f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
      break;
 80050dc:	e00b      	b.n	80050f6 <DMA_CheckFifoParam+0xe6>
      break;
 80050de:	bf00      	nop
 80050e0:	e00a      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;
 80050e2:	bf00      	nop
 80050e4:	e008      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;
 80050e6:	bf00      	nop
 80050e8:	e006      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;
 80050ea:	bf00      	nop
 80050ec:	e004      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <DMA_CheckFifoParam+0xe8>
      break;
 80050f6:	bf00      	nop
    }
  } 
  
  return status; 
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop

08005108 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e109      	b.n	8005330 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	7c5b      	ldrb	r3, [r3, #17]
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d102      	bne.n	800512c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7fc fb92 	bl	8001850 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2203      	movs	r2, #3
 8005130:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005146:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005152:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800515a:	f7fe fc47 	bl	80039ec <HAL_GetTick>
 800515e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005160:	e009      	b.n	8005176 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005162:	f7fe fc43 	bl	80039ec <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005170:	d901      	bls.n	8005176 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e0dc      	b.n	8005330 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800517e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d0ed      	beq.n	8005162 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	4b69      	ldr	r3, [pc, #420]	; (8005338 <HAL_DSI_Init+0x230>)
 8005194:	400b      	ands	r3, r1
 8005196:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80051ae:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80051b6:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
 80051e8:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80051ea:	2001      	movs	r0, #1
 80051ec:	f7fe fc0a 	bl	8003a04 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80051f0:	f7fe fbfc 	bl	80039ec <HAL_GetTick>
 80051f4:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80051f6:	e009      	b.n	800520c <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80051f8:	f7fe fbf8 	bl	80039ec <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005206:	d901      	bls.n	800520c <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e091      	b.n	8005330 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0ed      	beq.n	80051f8 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f042 0206 	orr.w	r2, r2, #6
 800522c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0203 	bic.w	r2, r2, #3
 8005240:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	431a      	orrs	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0203 	bic.w	r2, r2, #3
 800526e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68da      	ldr	r2, [r3, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005296:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6899      	ldr	r1, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_DSI_Init+0x1b0>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	e000      	b.n	80052ba <HAL_DSI_Init+0x1b2>
 80052b8:	2301      	movs	r3, #1
 80052ba:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	4a1f      	ldr	r2, [pc, #124]	; (800533c <HAL_DSI_Init+0x234>)
 80052c0:	fb03 f202 	mul.w	r2, r3, r2
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	409a      	lsls	r2, r3
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f246 11a8 	movw	r1, #25000	; 0x61a8
 80052d6:	fb01 f303 	mul.w	r3, r1, r3
 80052da:	fbb2 f3f3 	udiv	r3, r2, r3
 80052de:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80052f0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	430a      	orrs	r2, r1
 8005304:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2200      	movs	r2, #0
 800530e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2200      	movs	r2, #0
 8005318:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	fffc8603 	.word	0xfffc8603
 800533c:	003d0900 	.word	0x003d0900

08005340 <HAL_DSI_ConfigErrorMonitor>:
  * @param  ActiveErrors  indicates which error interrupts will be enabled.
  *                      This parameter can be any combination of @arg DSI_Error_Data_Type.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7c1b      	ldrb	r3, [r3, #16]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d101      	bne.n	8005356 <HAL_DSI_ConfigErrorMonitor+0x16>
 8005352:	2302      	movs	r3, #2
 8005354:	e0aa      	b.n	80054ac <HAL_DSI_ConfigErrorMonitor+0x16c>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	741a      	strb	r2, [r3, #16]

  hdsi->Instance->IER[0U] = 0U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2200      	movs	r2, #0
 8005362:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	683a      	ldr	r2, [r7, #0]
 8005374:	619a      	str	r2, [r3, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_DSI_ConfigErrorMonitor+0x56>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005390:	430b      	orrs	r3, r1
 8005392:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d009      	beq.n	80053b4 <HAL_DSI_ConfigErrorMonitor+0x74>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 12f8 	orr.w	r2, r2, #2031616	; 0x1f0000
 80053b0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <HAL_DSI_ConfigErrorMonitor+0x92>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <HAL_DSI_ConfigErrorMonitor+0xb0>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0202 	orr.w	r2, r2, #2
 80053ec:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_DSI_ConfigErrorMonitor+0xce>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 020c 	orr.w	r2, r2, #12
 800540a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d009      	beq.n	800542c <HAL_DSI_ConfigErrorMonitor+0xec>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0210 	orr.w	r2, r2, #16
 8005428:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d009      	beq.n	800544a <HAL_DSI_ConfigErrorMonitor+0x10a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0220 	orr.w	r2, r2, #32
 8005446:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <HAL_DSI_ConfigErrorMonitor+0x128>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005464:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_DSI_ConfigErrorMonitor+0x146>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005482:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800548c:	2b00      	cmp	r3, #0
 800548e:	d009      	beq.n	80054a4 <HAL_DSI_ConfigErrorMonitor+0x164>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 52f8 	orr.w	r2, r2, #7936	; 0x1f00
 80054a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	7c1b      	ldrb	r3, [r3, #16]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d101      	bne.n	80054ce <HAL_DSI_ConfigCommand+0x16>
 80054ca:	2302      	movs	r3, #2
 80054cc:	e049      	b.n	8005562 <HAL_DSI_ConfigCommand+0xaa>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b24      	ldr	r3, [pc, #144]	; (8005570 <HAL_DSI_ConfigCommand+0xb8>)
 80054e0:	400b      	ands	r3, r1
 80054e2:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80054f2:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80054f8:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80054fe:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8005504:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 800550a:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 8005510:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8005516:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 800551c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8005522:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8005528:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800552e:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0202 	bic.w	r2, r2, #2
 8005546:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6e99      	ldr	r1, [r3, #104]	; 0x68
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	fef080ff 	.word	0xfef080ff

08005574 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	7c1b      	ldrb	r3, [r3, #16]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d101      	bne.n	800558a <HAL_DSI_ConfigFlowControl+0x16>
 8005586:	2302      	movs	r3, #2
 8005588:	e016      	b.n	80055b8 <HAL_DSI_ConfigFlowControl+0x44>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2201      	movs	r2, #1
 800558e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 021f 	bic.w	r2, r2, #31
 800559e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	683a      	ldr	r2, [r7, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	7c1b      	ldrb	r3, [r3, #16]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_DSI_ConfigPhyTimer+0x16>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e058      	b.n	800568c <HAL_DSI_ConfigPhyTimer+0xc8>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4293      	cmp	r3, r2
 80055ea:	bf38      	it	cc
 80055ec:	4613      	movcc	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8005600:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	041a      	lsls	r2, r3, #16
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800562e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	041b      	lsls	r3, r3, #16
 8005644:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800564c:	431a      	orrs	r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	430a      	orrs	r2, r1
 8005654:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005668:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	021a      	lsls	r2, r3, #8
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	7c1b      	ldrb	r3, [r3, #16]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_DSI_ConfigHostTimeouts+0x16>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e0b4      	b.n	8005818 <HAL_DSI_ConfigHostTimeouts+0x180>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	741a      	strb	r2, [r3, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689a      	ldr	r2, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80056c2:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6899      	ldr	r1, [r3, #8]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	021a      	lsls	r2, r3, #8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	609a      	str	r2, [r3, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	b292      	uxth	r2, r2
 80056e4:	679a      	str	r2, [r3, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	041a      	lsls	r2, r3, #16
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	430a      	orrs	r2, r1
 80056f8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	4b47      	ldr	r3, [pc, #284]	; (8005824 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005706:	400b      	ands	r3, r1
 8005708:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	679a      	str	r2, [r3, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	4b3f      	ldr	r3, [pc, #252]	; (8005824 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005728:	400b      	ands	r3, r1
 800572a:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4b36      	ldr	r3, [pc, #216]	; (8005824 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 800574c:	400b      	ands	r3, r1
 800574e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4b2b      	ldr	r3, [pc, #172]	; (8005824 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 8005776:	400b      	ands	r3, r1
 8005778:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	695a      	ldr	r2, [r3, #20]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80057a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	430a      	orrs	r2, r1
 80057b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80057ca:	400b      	ands	r3, r1
 80057cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	4b0c      	ldr	r3, [pc, #48]	; (8005824 <HAL_DSI_ConfigHostTimeouts+0x18c>)
 80057f4:	400b      	ands	r3, r1
 80057f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	6a1a      	ldr	r2, [r3, #32]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	ffff0000 	.word	0xffff0000

08005828 <HAL_DSI_SetLowPowerRXFilter>:
  *               the configuration information for the DSI.
  * @param  Frequency  cutoff frequency of low-pass filter at the input of LPRX
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	7c1b      	ldrb	r3, [r3, #16]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d101      	bne.n	800583e <HAL_DSI_SetLowPowerRXFilter+0x16>
 800583a:	2302      	movs	r3, #2
 800583c:	e01b      	b.n	8005876 <HAL_DSI_SetLowPowerRXFilter+0x4e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	741a      	strb	r2, [r3, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 8005854:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	065a      	lsls	r2, r3, #25
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005884:	b480      	push	{r7}
 8005886:	b089      	sub	sp, #36	; 0x24
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800588e:	2300      	movs	r3, #0
 8005890:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005896:	2300      	movs	r3, #0
 8005898:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800589a:	2300      	movs	r3, #0
 800589c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	e175      	b.n	8005b90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80058a4:	2201      	movs	r2, #1
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	4013      	ands	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	429a      	cmp	r2, r3
 80058be:	f040 8164 	bne.w	8005b8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d005      	beq.n	80058da <HAL_GPIO_Init+0x56>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d130      	bne.n	800593c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	2203      	movs	r2, #3
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	43db      	mvns	r3, r3
 80058ec:	69ba      	ldr	r2, [r7, #24]
 80058ee:	4013      	ands	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	fa02 f303 	lsl.w	r3, r2, r3
 80058fe:	69ba      	ldr	r2, [r7, #24]
 8005900:	4313      	orrs	r3, r2
 8005902:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005910:	2201      	movs	r2, #1
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	43db      	mvns	r3, r3
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	4013      	ands	r3, r2
 800591e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f003 0201 	and.w	r2, r3, #1
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	69ba      	ldr	r2, [r7, #24]
 8005932:	4313      	orrs	r3, r2
 8005934:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	2b03      	cmp	r3, #3
 8005946:	d017      	beq.n	8005978 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	2203      	movs	r2, #3
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	4013      	ands	r3, r2
 800595e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	69ba      	ldr	r2, [r7, #24]
 800596e:	4313      	orrs	r3, r2
 8005970:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d123      	bne.n	80059cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	08da      	lsrs	r2, r3, #3
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3208      	adds	r2, #8
 800598c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	220f      	movs	r2, #15
 800599c:	fa02 f303 	lsl.w	r3, r2, r3
 80059a0:	43db      	mvns	r3, r3
 80059a2:	69ba      	ldr	r2, [r7, #24]
 80059a4:	4013      	ands	r3, r2
 80059a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f003 0307 	and.w	r3, r3, #7
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	fa02 f303 	lsl.w	r3, r2, r3
 80059b8:	69ba      	ldr	r2, [r7, #24]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	08da      	lsrs	r2, r3, #3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	3208      	adds	r2, #8
 80059c6:	69b9      	ldr	r1, [r7, #24]
 80059c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	2203      	movs	r2, #3
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	43db      	mvns	r3, r3
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4013      	ands	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f003 0203 	and.w	r2, r3, #3
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	005b      	lsls	r3, r3, #1
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f000 80be 	beq.w	8005b8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a0e:	4b66      	ldr	r3, [pc, #408]	; (8005ba8 <HAL_GPIO_Init+0x324>)
 8005a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a12:	4a65      	ldr	r2, [pc, #404]	; (8005ba8 <HAL_GPIO_Init+0x324>)
 8005a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a18:	6453      	str	r3, [r2, #68]	; 0x44
 8005a1a:	4b63      	ldr	r3, [pc, #396]	; (8005ba8 <HAL_GPIO_Init+0x324>)
 8005a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a22:	60fb      	str	r3, [r7, #12]
 8005a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005a26:	4a61      	ldr	r2, [pc, #388]	; (8005bac <HAL_GPIO_Init+0x328>)
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	089b      	lsrs	r3, r3, #2
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	220f      	movs	r2, #15
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	43db      	mvns	r3, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4013      	ands	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a58      	ldr	r2, [pc, #352]	; (8005bb0 <HAL_GPIO_Init+0x32c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d037      	beq.n	8005ac2 <HAL_GPIO_Init+0x23e>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a57      	ldr	r2, [pc, #348]	; (8005bb4 <HAL_GPIO_Init+0x330>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d031      	beq.n	8005abe <HAL_GPIO_Init+0x23a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a56      	ldr	r2, [pc, #344]	; (8005bb8 <HAL_GPIO_Init+0x334>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d02b      	beq.n	8005aba <HAL_GPIO_Init+0x236>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a55      	ldr	r2, [pc, #340]	; (8005bbc <HAL_GPIO_Init+0x338>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d025      	beq.n	8005ab6 <HAL_GPIO_Init+0x232>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a54      	ldr	r2, [pc, #336]	; (8005bc0 <HAL_GPIO_Init+0x33c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01f      	beq.n	8005ab2 <HAL_GPIO_Init+0x22e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a53      	ldr	r2, [pc, #332]	; (8005bc4 <HAL_GPIO_Init+0x340>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d019      	beq.n	8005aae <HAL_GPIO_Init+0x22a>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a52      	ldr	r2, [pc, #328]	; (8005bc8 <HAL_GPIO_Init+0x344>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_GPIO_Init+0x226>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a51      	ldr	r2, [pc, #324]	; (8005bcc <HAL_GPIO_Init+0x348>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00d      	beq.n	8005aa6 <HAL_GPIO_Init+0x222>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a50      	ldr	r2, [pc, #320]	; (8005bd0 <HAL_GPIO_Init+0x34c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <HAL_GPIO_Init+0x21e>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a4f      	ldr	r2, [pc, #316]	; (8005bd4 <HAL_GPIO_Init+0x350>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d101      	bne.n	8005a9e <HAL_GPIO_Init+0x21a>
 8005a9a:	2309      	movs	r3, #9
 8005a9c:	e012      	b.n	8005ac4 <HAL_GPIO_Init+0x240>
 8005a9e:	230a      	movs	r3, #10
 8005aa0:	e010      	b.n	8005ac4 <HAL_GPIO_Init+0x240>
 8005aa2:	2308      	movs	r3, #8
 8005aa4:	e00e      	b.n	8005ac4 <HAL_GPIO_Init+0x240>
 8005aa6:	2307      	movs	r3, #7
 8005aa8:	e00c      	b.n	8005ac4 <HAL_GPIO_Init+0x240>
 8005aaa:	2306      	movs	r3, #6
 8005aac:	e00a      	b.n	8005ac4 <HAL_GPIO_Init+0x240>
 8005aae:	2305      	movs	r3, #5
 8005ab0:	e008      	b.n	8005ac4 <HAL_GPIO_Init+0x240>
 8005ab2:	2304      	movs	r3, #4
 8005ab4:	e006      	b.n	8005ac4 <HAL_GPIO_Init+0x240>
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e004      	b.n	8005ac4 <HAL_GPIO_Init+0x240>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e002      	b.n	8005ac4 <HAL_GPIO_Init+0x240>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <HAL_GPIO_Init+0x240>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	f002 0203 	and.w	r2, r2, #3
 8005aca:	0092      	lsls	r2, r2, #2
 8005acc:	4093      	lsls	r3, r2
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005ad4:	4935      	ldr	r1, [pc, #212]	; (8005bac <HAL_GPIO_Init+0x328>)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	089b      	lsrs	r3, r3, #2
 8005ada:	3302      	adds	r3, #2
 8005adc:	69ba      	ldr	r2, [r7, #24]
 8005ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ae2:	4b3d      	ldr	r3, [pc, #244]	; (8005bd8 <HAL_GPIO_Init+0x354>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	43db      	mvns	r3, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4013      	ands	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005b06:	4a34      	ldr	r2, [pc, #208]	; (8005bd8 <HAL_GPIO_Init+0x354>)
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005b0c:	4b32      	ldr	r3, [pc, #200]	; (8005bd8 <HAL_GPIO_Init+0x354>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005b30:	4a29      	ldr	r2, [pc, #164]	; (8005bd8 <HAL_GPIO_Init+0x354>)
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005b36:	4b28      	ldr	r3, [pc, #160]	; (8005bd8 <HAL_GPIO_Init+0x354>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	43db      	mvns	r3, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4013      	ands	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b5a:	4a1f      	ldr	r2, [pc, #124]	; (8005bd8 <HAL_GPIO_Init+0x354>)
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b60:	4b1d      	ldr	r3, [pc, #116]	; (8005bd8 <HAL_GPIO_Init+0x354>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	69ba      	ldr	r2, [r7, #24]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b84:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <HAL_GPIO_Init+0x354>)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	2b0f      	cmp	r3, #15
 8005b94:	f67f ae86 	bls.w	80058a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005b98:	bf00      	nop
 8005b9a:	bf00      	nop
 8005b9c:	3724      	adds	r7, #36	; 0x24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	40013800 	.word	0x40013800
 8005bb0:	40020000 	.word	0x40020000
 8005bb4:	40020400 	.word	0x40020400
 8005bb8:	40020800 	.word	0x40020800
 8005bbc:	40020c00 	.word	0x40020c00
 8005bc0:	40021000 	.word	0x40021000
 8005bc4:	40021400 	.word	0x40021400
 8005bc8:	40021800 	.word	0x40021800
 8005bcc:	40021c00 	.word	0x40021c00
 8005bd0:	40022000 	.word	0x40022000
 8005bd4:	40022400 	.word	0x40022400
 8005bd8:	40013c00 	.word	0x40013c00

08005bdc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	887b      	ldrh	r3, [r7, #2]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d002      	beq.n	8005bfa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	73fb      	strb	r3, [r7, #15]
 8005bf8:	e001      	b.n	8005bfe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	460b      	mov	r3, r1
 8005c16:	807b      	strh	r3, [r7, #2]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c1c:	787b      	ldrb	r3, [r7, #1]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c22:	887a      	ldrh	r2, [r7, #2]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005c28:	e003      	b.n	8005c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005c2a:	887b      	ldrh	r3, [r7, #2]
 8005c2c:	041a      	lsls	r2, r3, #16
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	619a      	str	r2, [r3, #24]
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
	...

08005c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e07f      	b.n	8005d52 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f8a9 	bl	8005dbe <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	; 0x24
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d107      	bne.n	8005cba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	e006      	b.n	8005cc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005cc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d104      	bne.n	8005cda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6859      	ldr	r1, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	4b1d      	ldr	r3, [pc, #116]	; (8005d5c <HAL_I2C_Init+0x11c>)
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69d9      	ldr	r1, [r3, #28]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1a      	ldr	r2, [r3, #32]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2220      	movs	r2, #32
 8005d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	02008000 	.word	0x02008000

08005d60 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e021      	b.n	8005db6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2224      	movs	r2, #36	; 0x24
 8005d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f022 0201 	bic.w	r2, r2, #1
 8005d88:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f821 	bl	8005dd2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
	...

08005de8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	4608      	mov	r0, r1
 8005df2:	4611      	mov	r1, r2
 8005df4:	461a      	mov	r2, r3
 8005df6:	4603      	mov	r3, r0
 8005df8:	817b      	strh	r3, [r7, #10]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	813b      	strh	r3, [r7, #8]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b20      	cmp	r3, #32
 8005e0c:	f040 80f9 	bne.w	8006002 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d002      	beq.n	8005e1c <HAL_I2C_Mem_Write+0x34>
 8005e16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d105      	bne.n	8005e28 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e22:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e0ed      	b.n	8006004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_I2C_Mem_Write+0x4e>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e0e6      	b.n	8006004 <HAL_I2C_Mem_Write+0x21c>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e3e:	f7fd fdd5 	bl	80039ec <HAL_GetTick>
 8005e42:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	2319      	movs	r3, #25
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 fad1 	bl	80063f8 <I2C_WaitOnFlagUntilTimeout>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e0d1      	b.n	8006004 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2221      	movs	r2, #33	; 0x21
 8005e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2240      	movs	r2, #64	; 0x40
 8005e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a3a      	ldr	r2, [r7, #32]
 8005e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e88:	88f8      	ldrh	r0, [r7, #6]
 8005e8a:	893a      	ldrh	r2, [r7, #8]
 8005e8c:	8979      	ldrh	r1, [r7, #10]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	9301      	str	r3, [sp, #4]
 8005e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	4603      	mov	r3, r0
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f9e1 	bl	8006260 <I2C_RequestMemoryWrite>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d005      	beq.n	8005eb0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0a9      	b.n	8006004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2bff      	cmp	r3, #255	; 0xff
 8005eb8:	d90e      	bls.n	8005ed8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	22ff      	movs	r2, #255	; 0xff
 8005ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ec4:	b2da      	uxtb	r2, r3
 8005ec6:	8979      	ldrh	r1, [r7, #10]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 fc2d 	bl	8006730 <I2C_TransferConfig>
 8005ed6:	e00f      	b.n	8005ef8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	8979      	ldrh	r1, [r7, #10]
 8005eea:	2300      	movs	r3, #0
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fc1c 	bl	8006730 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 fabb 	bl	8006478 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e07b      	b.n	8006004 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	781a      	ldrb	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d034      	beq.n	8005fb0 <HAL_I2C_Mem_Write+0x1c8>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d130      	bne.n	8005fb0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f54:	2200      	movs	r2, #0
 8005f56:	2180      	movs	r1, #128	; 0x80
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fa4d 	bl	80063f8 <I2C_WaitOnFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e04d      	b.n	8006004 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2bff      	cmp	r3, #255	; 0xff
 8005f70:	d90e      	bls.n	8005f90 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	22ff      	movs	r2, #255	; 0xff
 8005f76:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	8979      	ldrh	r1, [r7, #10]
 8005f80:	2300      	movs	r3, #0
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 fbd1 	bl	8006730 <I2C_TransferConfig>
 8005f8e:	e00f      	b.n	8005fb0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	8979      	ldrh	r1, [r7, #10]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 fbc0 	bl	8006730 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d19e      	bne.n	8005ef8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f000 fa9a 	bl	80064f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d001      	beq.n	8005fce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e01a      	b.n	8006004 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	4b0a      	ldr	r3, [pc, #40]	; (800600c <HAL_I2C_Mem_Write+0x224>)
 8005fe2:	400b      	ands	r3, r1
 8005fe4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e000      	b.n	8006004 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006002:	2302      	movs	r3, #2
  }
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	fe00e800 	.word	0xfe00e800

08006010 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b088      	sub	sp, #32
 8006014:	af02      	add	r7, sp, #8
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	4608      	mov	r0, r1
 800601a:	4611      	mov	r1, r2
 800601c:	461a      	mov	r2, r3
 800601e:	4603      	mov	r3, r0
 8006020:	817b      	strh	r3, [r7, #10]
 8006022:	460b      	mov	r3, r1
 8006024:	813b      	strh	r3, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b20      	cmp	r3, #32
 8006034:	f040 80fd 	bne.w	8006232 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006038:	6a3b      	ldr	r3, [r7, #32]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <HAL_I2C_Mem_Read+0x34>
 800603e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800604a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0f1      	b.n	8006234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_I2C_Mem_Read+0x4e>
 800605a:	2302      	movs	r3, #2
 800605c:	e0ea      	b.n	8006234 <HAL_I2C_Mem_Read+0x224>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006066:	f7fd fcc1 	bl	80039ec <HAL_GetTick>
 800606a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2319      	movs	r3, #25
 8006072:	2201      	movs	r2, #1
 8006074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f9bd 	bl	80063f8 <I2C_WaitOnFlagUntilTimeout>
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e0d5      	b.n	8006234 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2222      	movs	r2, #34	; 0x22
 800608c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2240      	movs	r2, #64	; 0x40
 8006094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a3a      	ldr	r2, [r7, #32]
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060b0:	88f8      	ldrh	r0, [r7, #6]
 80060b2:	893a      	ldrh	r2, [r7, #8]
 80060b4:	8979      	ldrh	r1, [r7, #10]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	4603      	mov	r3, r0
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f921 	bl	8006308 <I2C_RequestMemoryRead>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e0ad      	b.n	8006234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2bff      	cmp	r3, #255	; 0xff
 80060e0:	d90e      	bls.n	8006100 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	22ff      	movs	r2, #255	; 0xff
 80060e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	8979      	ldrh	r1, [r7, #10]
 80060f0:	4b52      	ldr	r3, [pc, #328]	; (800623c <HAL_I2C_Mem_Read+0x22c>)
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fb19 	bl	8006730 <I2C_TransferConfig>
 80060fe:	e00f      	b.n	8006120 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610e:	b2da      	uxtb	r2, r3
 8006110:	8979      	ldrh	r1, [r7, #10]
 8006112:	4b4a      	ldr	r3, [pc, #296]	; (800623c <HAL_I2C_Mem_Read+0x22c>)
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fb08 	bl	8006730 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006126:	2200      	movs	r2, #0
 8006128:	2104      	movs	r1, #4
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 f964 	bl	80063f8 <I2C_WaitOnFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e07c      	b.n	8006234 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d034      	beq.n	80061e0 <HAL_I2C_Mem_Read+0x1d0>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617a:	2b00      	cmp	r3, #0
 800617c:	d130      	bne.n	80061e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	2200      	movs	r2, #0
 8006186:	2180      	movs	r1, #128	; 0x80
 8006188:	68f8      	ldr	r0, [r7, #12]
 800618a:	f000 f935 	bl	80063f8 <I2C_WaitOnFlagUntilTimeout>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e04d      	b.n	8006234 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	2bff      	cmp	r3, #255	; 0xff
 80061a0:	d90e      	bls.n	80061c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	22ff      	movs	r2, #255	; 0xff
 80061a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	8979      	ldrh	r1, [r7, #10]
 80061b0:	2300      	movs	r3, #0
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 fab9 	bl	8006730 <I2C_TransferConfig>
 80061be:	e00f      	b.n	80061e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	8979      	ldrh	r1, [r7, #10]
 80061d2:	2300      	movs	r3, #0
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 faa8 	bl	8006730 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d19a      	bne.n	8006120 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f982 	bl	80064f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e01a      	b.n	8006234 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2220      	movs	r2, #32
 8006204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6859      	ldr	r1, [r3, #4]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <HAL_I2C_Mem_Read+0x230>)
 8006212:	400b      	ands	r3, r1
 8006214:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2220      	movs	r2, #32
 800621a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	e000      	b.n	8006234 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006232:	2302      	movs	r3, #2
  }
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	80002400 	.word	0x80002400
 8006240:	fe00e800 	.word	0xfe00e800

08006244 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006252:	b2db      	uxtb	r3, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af02      	add	r7, sp, #8
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	4608      	mov	r0, r1
 800626a:	4611      	mov	r1, r2
 800626c:	461a      	mov	r2, r3
 800626e:	4603      	mov	r3, r0
 8006270:	817b      	strh	r3, [r7, #10]
 8006272:	460b      	mov	r3, r1
 8006274:	813b      	strh	r3, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	b2da      	uxtb	r2, r3
 800627e:	8979      	ldrh	r1, [r7, #10]
 8006280:	4b20      	ldr	r3, [pc, #128]	; (8006304 <I2C_RequestMemoryWrite+0xa4>)
 8006282:	9300      	str	r3, [sp, #0]
 8006284:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fa51 	bl	8006730 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800628e:	69fa      	ldr	r2, [r7, #28]
 8006290:	69b9      	ldr	r1, [r7, #24]
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f000 f8f0 	bl	8006478 <I2C_WaitOnTXISFlagUntilTimeout>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d001      	beq.n	80062a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e02c      	b.n	80062fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d105      	bne.n	80062b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062a8:	893b      	ldrh	r3, [r7, #8]
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	629a      	str	r2, [r3, #40]	; 0x28
 80062b2:	e015      	b.n	80062e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80062b4:	893b      	ldrh	r3, [r7, #8]
 80062b6:	0a1b      	lsrs	r3, r3, #8
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	69b9      	ldr	r1, [r7, #24]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f8d6 	bl	8006478 <I2C_WaitOnTXISFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e012      	b.n	80062fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80062d6:	893b      	ldrh	r3, [r7, #8]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	2200      	movs	r2, #0
 80062e8:	2180      	movs	r1, #128	; 0x80
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f884 	bl	80063f8 <I2C_WaitOnFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	80002000 	.word	0x80002000

08006308 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af02      	add	r7, sp, #8
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	4608      	mov	r0, r1
 8006312:	4611      	mov	r1, r2
 8006314:	461a      	mov	r2, r3
 8006316:	4603      	mov	r3, r0
 8006318:	817b      	strh	r3, [r7, #10]
 800631a:	460b      	mov	r3, r1
 800631c:	813b      	strh	r3, [r7, #8]
 800631e:	4613      	mov	r3, r2
 8006320:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006322:	88fb      	ldrh	r3, [r7, #6]
 8006324:	b2da      	uxtb	r2, r3
 8006326:	8979      	ldrh	r1, [r7, #10]
 8006328:	4b20      	ldr	r3, [pc, #128]	; (80063ac <I2C_RequestMemoryRead+0xa4>)
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	2300      	movs	r3, #0
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 f9fe 	bl	8006730 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	69b9      	ldr	r1, [r7, #24]
 8006338:	68f8      	ldr	r0, [r7, #12]
 800633a:	f000 f89d 	bl	8006478 <I2C_WaitOnTXISFlagUntilTimeout>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e02c      	b.n	80063a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d105      	bne.n	800635a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800634e:	893b      	ldrh	r3, [r7, #8]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	629a      	str	r2, [r3, #40]	; 0x28
 8006358:	e015      	b.n	8006386 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800635a:	893b      	ldrh	r3, [r7, #8]
 800635c:	0a1b      	lsrs	r3, r3, #8
 800635e:	b29b      	uxth	r3, r3
 8006360:	b2da      	uxtb	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006368:	69fa      	ldr	r2, [r7, #28]
 800636a:	69b9      	ldr	r1, [r7, #24]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f883 	bl	8006478 <I2C_WaitOnTXISFlagUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e012      	b.n	80063a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800637c:	893b      	ldrh	r3, [r7, #8]
 800637e:	b2da      	uxtb	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2200      	movs	r2, #0
 800638e:	2140      	movs	r1, #64	; 0x40
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 f831 	bl	80063f8 <I2C_WaitOnFlagUntilTimeout>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	80002000 	.word	0x80002000

080063b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d103      	bne.n	80063ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2200      	movs	r2, #0
 80063cc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d007      	beq.n	80063ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	619a      	str	r2, [r3, #24]
  }
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	4613      	mov	r3, r2
 8006406:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006408:	e022      	b.n	8006450 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006410:	d01e      	beq.n	8006450 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006412:	f7fd faeb 	bl	80039ec <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	429a      	cmp	r2, r3
 8006420:	d302      	bcc.n	8006428 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d113      	bne.n	8006450 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642c:	f043 0220 	orr.w	r2, r3, #32
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e00f      	b.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	4013      	ands	r3, r2
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	429a      	cmp	r2, r3
 800645e:	bf0c      	ite	eq
 8006460:	2301      	moveq	r3, #1
 8006462:	2300      	movne	r3, #0
 8006464:	b2db      	uxtb	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	429a      	cmp	r2, r3
 800646c:	d0cd      	beq.n	800640a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b084      	sub	sp, #16
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006484:	e02c      	b.n	80064e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	68b9      	ldr	r1, [r7, #8]
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 f870 	bl	8006570 <I2C_IsErrorOccurred>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e02a      	b.n	80064f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064a0:	d01e      	beq.n	80064e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a2:	f7fd faa3 	bl	80039ec <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	68ba      	ldr	r2, [r7, #8]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d302      	bcc.n	80064b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d113      	bne.n	80064e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064bc:	f043 0220 	orr.w	r2, r3, #32
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2220      	movs	r2, #32
 80064c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e007      	b.n	80064f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	699b      	ldr	r3, [r3, #24]
 80064e6:	f003 0302 	and.w	r3, r3, #2
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d1cb      	bne.n	8006486 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006504:	e028      	b.n	8006558 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 f830 	bl	8006570 <I2C_IsErrorOccurred>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e026      	b.n	8006568 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800651a:	f7fd fa67 	bl	80039ec <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	429a      	cmp	r2, r3
 8006528:	d302      	bcc.n	8006530 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d113      	bne.n	8006558 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006534:	f043 0220 	orr.w	r2, r3, #32
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2220      	movs	r2, #32
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e007      	b.n	8006568 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b20      	cmp	r3, #32
 8006564:	d1cf      	bne.n	8006506 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006566:	2300      	movs	r3, #0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	; 0x28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800657c:	2300      	movs	r3, #0
 800657e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800658a:	2300      	movs	r3, #0
 800658c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	f003 0310 	and.w	r3, r3, #16
 8006598:	2b00      	cmp	r3, #0
 800659a:	d068      	beq.n	800666e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2210      	movs	r2, #16
 80065a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80065a4:	e049      	b.n	800663a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065ac:	d045      	beq.n	800663a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80065ae:	f7fd fa1d 	bl	80039ec <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d302      	bcc.n	80065c4 <I2C_IsErrorOccurred+0x54>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d13a      	bne.n	800663a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065e6:	d121      	bne.n	800662c <I2C_IsErrorOccurred+0xbc>
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065ee:	d01d      	beq.n	800662c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80065f0:	7cfb      	ldrb	r3, [r7, #19]
 80065f2:	2b20      	cmp	r3, #32
 80065f4:	d01a      	beq.n	800662c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006604:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006606:	f7fd f9f1 	bl	80039ec <HAL_GetTick>
 800660a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800660c:	e00e      	b.n	800662c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800660e:	f7fd f9ed 	bl	80039ec <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b19      	cmp	r3, #25
 800661a:	d907      	bls.n	800662c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	f043 0320 	orr.w	r3, r3, #32
 8006622:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800662a:	e006      	b.n	800663a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b20      	cmp	r3, #32
 8006638:	d1e9      	bne.n	800660e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b20      	cmp	r3, #32
 8006646:	d003      	beq.n	8006650 <I2C_IsErrorOccurred+0xe0>
 8006648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800664c:	2b00      	cmp	r3, #0
 800664e:	d0aa      	beq.n	80065a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006654:	2b00      	cmp	r3, #0
 8006656:	d103      	bne.n	8006660 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2220      	movs	r2, #32
 800665e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	f043 0304 	orr.w	r3, r3, #4
 8006666:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	f043 0301 	orr.w	r3, r3, #1
 8006686:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006690:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00b      	beq.n	80066ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	f043 0308 	orr.w	r3, r3, #8
 80066a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	f043 0302 	orr.w	r3, r3, #2
 80066ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80066dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01c      	beq.n	800671e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f7ff fe63 	bl	80063b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6859      	ldr	r1, [r3, #4]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	4b0d      	ldr	r3, [pc, #52]	; (800672c <I2C_IsErrorOccurred+0x1bc>)
 80066f6:	400b      	ands	r3, r1
 80066f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fe:	6a3b      	ldr	r3, [r7, #32]
 8006700:	431a      	orrs	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2220      	movs	r2, #32
 800670a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800671e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006722:	4618      	mov	r0, r3
 8006724:	3728      	adds	r7, #40	; 0x28
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	fe00e800 	.word	0xfe00e800

08006730 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	460b      	mov	r3, r1
 800673c:	817b      	strh	r3, [r7, #10]
 800673e:	4613      	mov	r3, r2
 8006740:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006742:	897b      	ldrh	r3, [r7, #10]
 8006744:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006748:	7a7b      	ldrb	r3, [r7, #9]
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006750:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	4313      	orrs	r3, r2
 800675a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800675e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	0d5b      	lsrs	r3, r3, #21
 800676a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800676e:	4b08      	ldr	r3, [pc, #32]	; (8006790 <I2C_TransferConfig+0x60>)
 8006770:	430b      	orrs	r3, r1
 8006772:	43db      	mvns	r3, r3
 8006774:	ea02 0103 	and.w	r1, r2, r3
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006782:	bf00      	nop
 8006784:	371c      	adds	r7, #28
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	03ff63ff 	.word	0x03ff63ff

08006794 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800679e:	4b23      	ldr	r3, [pc, #140]	; (800682c <HAL_PWREx_EnableOverDrive+0x98>)
 80067a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a2:	4a22      	ldr	r2, [pc, #136]	; (800682c <HAL_PWREx_EnableOverDrive+0x98>)
 80067a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067a8:	6413      	str	r3, [r2, #64]	; 0x40
 80067aa:	4b20      	ldr	r3, [pc, #128]	; (800682c <HAL_PWREx_EnableOverDrive+0x98>)
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80067b6:	4b1e      	ldr	r3, [pc, #120]	; (8006830 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067c2:	f7fd f913 	bl	80039ec <HAL_GetTick>
 80067c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067c8:	e009      	b.n	80067de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80067ca:	f7fd f90f 	bl	80039ec <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067d8:	d901      	bls.n	80067de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e022      	b.n	8006824 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80067de:	4b14      	ldr	r3, [pc, #80]	; (8006830 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ea:	d1ee      	bne.n	80067ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80067ec:	4b10      	ldr	r3, [pc, #64]	; (8006830 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a0f      	ldr	r2, [pc, #60]	; (8006830 <HAL_PWREx_EnableOverDrive+0x9c>)
 80067f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067f8:	f7fd f8f8 	bl	80039ec <HAL_GetTick>
 80067fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80067fe:	e009      	b.n	8006814 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006800:	f7fd f8f4 	bl	80039ec <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800680e:	d901      	bls.n	8006814 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e007      	b.n	8006824 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006814:	4b06      	ldr	r3, [pc, #24]	; (8006830 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800681c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006820:	d1ee      	bne.n	8006800 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	40023800 	.word	0x40023800
 8006830:	40007000 	.word	0x40007000

08006834 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800683c:	2300      	movs	r3, #0
 800683e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006846:	2301      	movs	r3, #1
 8006848:	e29b      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 8087 	beq.w	8006966 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006858:	4b96      	ldr	r3, [pc, #600]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f003 030c 	and.w	r3, r3, #12
 8006860:	2b04      	cmp	r3, #4
 8006862:	d00c      	beq.n	800687e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006864:	4b93      	ldr	r3, [pc, #588]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f003 030c 	and.w	r3, r3, #12
 800686c:	2b08      	cmp	r3, #8
 800686e:	d112      	bne.n	8006896 <HAL_RCC_OscConfig+0x62>
 8006870:	4b90      	ldr	r3, [pc, #576]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800687c:	d10b      	bne.n	8006896 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800687e:	4b8d      	ldr	r3, [pc, #564]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d06c      	beq.n	8006964 <HAL_RCC_OscConfig+0x130>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d168      	bne.n	8006964 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	e275      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800689e:	d106      	bne.n	80068ae <HAL_RCC_OscConfig+0x7a>
 80068a0:	4b84      	ldr	r3, [pc, #528]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a83      	ldr	r2, [pc, #524]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068aa:	6013      	str	r3, [r2, #0]
 80068ac:	e02e      	b.n	800690c <HAL_RCC_OscConfig+0xd8>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10c      	bne.n	80068d0 <HAL_RCC_OscConfig+0x9c>
 80068b6:	4b7f      	ldr	r3, [pc, #508]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a7e      	ldr	r2, [pc, #504]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068c0:	6013      	str	r3, [r2, #0]
 80068c2:	4b7c      	ldr	r3, [pc, #496]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a7b      	ldr	r2, [pc, #492]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	e01d      	b.n	800690c <HAL_RCC_OscConfig+0xd8>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068d8:	d10c      	bne.n	80068f4 <HAL_RCC_OscConfig+0xc0>
 80068da:	4b76      	ldr	r3, [pc, #472]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a75      	ldr	r2, [pc, #468]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068e4:	6013      	str	r3, [r2, #0]
 80068e6:	4b73      	ldr	r3, [pc, #460]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a72      	ldr	r2, [pc, #456]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	e00b      	b.n	800690c <HAL_RCC_OscConfig+0xd8>
 80068f4:	4b6f      	ldr	r3, [pc, #444]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a6e      	ldr	r2, [pc, #440]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80068fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	4b6c      	ldr	r3, [pc, #432]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a6b      	ldr	r2, [pc, #428]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800690a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d013      	beq.n	800693c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006914:	f7fd f86a 	bl	80039ec <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800691a:	e008      	b.n	800692e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800691c:	f7fd f866 	bl	80039ec <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b64      	cmp	r3, #100	; 0x64
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e229      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692e:	4b61      	ldr	r3, [pc, #388]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0f0      	beq.n	800691c <HAL_RCC_OscConfig+0xe8>
 800693a:	e014      	b.n	8006966 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693c:	f7fd f856 	bl	80039ec <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006944:	f7fd f852 	bl	80039ec <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b64      	cmp	r3, #100	; 0x64
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e215      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006956:	4b57      	ldr	r3, [pc, #348]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f0      	bne.n	8006944 <HAL_RCC_OscConfig+0x110>
 8006962:	e000      	b.n	8006966 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	2b00      	cmp	r3, #0
 8006970:	d069      	beq.n	8006a46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006972:	4b50      	ldr	r3, [pc, #320]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 030c 	and.w	r3, r3, #12
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00b      	beq.n	8006996 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800697e:	4b4d      	ldr	r3, [pc, #308]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 030c 	and.w	r3, r3, #12
 8006986:	2b08      	cmp	r3, #8
 8006988:	d11c      	bne.n	80069c4 <HAL_RCC_OscConfig+0x190>
 800698a:	4b4a      	ldr	r3, [pc, #296]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d116      	bne.n	80069c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006996:	4b47      	ldr	r3, [pc, #284]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0302 	and.w	r3, r3, #2
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <HAL_RCC_OscConfig+0x17a>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d001      	beq.n	80069ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e1e9      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ae:	4b41      	ldr	r3, [pc, #260]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	00db      	lsls	r3, r3, #3
 80069bc:	493d      	ldr	r1, [pc, #244]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069c2:	e040      	b.n	8006a46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d023      	beq.n	8006a14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069cc:	4b39      	ldr	r3, [pc, #228]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a38      	ldr	r2, [pc, #224]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80069d2:	f043 0301 	orr.w	r3, r3, #1
 80069d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d8:	f7fd f808 	bl	80039ec <HAL_GetTick>
 80069dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069de:	e008      	b.n	80069f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069e0:	f7fd f804 	bl	80039ec <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e1c7      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069f2:	4b30      	ldr	r3, [pc, #192]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0f0      	beq.n	80069e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069fe:	4b2d      	ldr	r3, [pc, #180]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	4929      	ldr	r1, [pc, #164]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	600b      	str	r3, [r1, #0]
 8006a12:	e018      	b.n	8006a46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a14:	4b27      	ldr	r3, [pc, #156]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a26      	ldr	r2, [pc, #152]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006a1a:	f023 0301 	bic.w	r3, r3, #1
 8006a1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a20:	f7fc ffe4 	bl	80039ec <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a28:	f7fc ffe0 	bl	80039ec <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e1a3      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a3a:	4b1e      	ldr	r3, [pc, #120]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d038      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d019      	beq.n	8006a8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a5a:	4b16      	ldr	r3, [pc, #88]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006a60:	f043 0301 	orr.w	r3, r3, #1
 8006a64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a66:	f7fc ffc1 	bl	80039ec <HAL_GetTick>
 8006a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a6e:	f7fc ffbd 	bl	80039ec <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e180      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a80:	4b0c      	ldr	r3, [pc, #48]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f0      	beq.n	8006a6e <HAL_RCC_OscConfig+0x23a>
 8006a8c:	e01a      	b.n	8006ac4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a8e:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a92:	4a08      	ldr	r2, [pc, #32]	; (8006ab4 <HAL_RCC_OscConfig+0x280>)
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9a:	f7fc ffa7 	bl	80039ec <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aa0:	e00a      	b.n	8006ab8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aa2:	f7fc ffa3 	bl	80039ec <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d903      	bls.n	8006ab8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e166      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
 8006ab4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab8:	4b92      	ldr	r3, [pc, #584]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1ee      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 80a4 	beq.w	8006c1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ad2:	4b8c      	ldr	r3, [pc, #560]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10d      	bne.n	8006afa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ade:	4b89      	ldr	r3, [pc, #548]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	4a88      	ldr	r2, [pc, #544]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8006aea:	4b86      	ldr	r3, [pc, #536]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af2:	60bb      	str	r3, [r7, #8]
 8006af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006af6:	2301      	movs	r3, #1
 8006af8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006afa:	4b83      	ldr	r3, [pc, #524]	; (8006d08 <HAL_RCC_OscConfig+0x4d4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d118      	bne.n	8006b38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006b06:	4b80      	ldr	r3, [pc, #512]	; (8006d08 <HAL_RCC_OscConfig+0x4d4>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a7f      	ldr	r2, [pc, #508]	; (8006d08 <HAL_RCC_OscConfig+0x4d4>)
 8006b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b12:	f7fc ff6b 	bl	80039ec <HAL_GetTick>
 8006b16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b18:	e008      	b.n	8006b2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b1a:	f7fc ff67 	bl	80039ec <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	2b64      	cmp	r3, #100	; 0x64
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e12a      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b2c:	4b76      	ldr	r3, [pc, #472]	; (8006d08 <HAL_RCC_OscConfig+0x4d4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0f0      	beq.n	8006b1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d106      	bne.n	8006b4e <HAL_RCC_OscConfig+0x31a>
 8006b40:	4b70      	ldr	r3, [pc, #448]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b44:	4a6f      	ldr	r2, [pc, #444]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b46:	f043 0301 	orr.w	r3, r3, #1
 8006b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b4c:	e02d      	b.n	8006baa <HAL_RCC_OscConfig+0x376>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10c      	bne.n	8006b70 <HAL_RCC_OscConfig+0x33c>
 8006b56:	4b6b      	ldr	r3, [pc, #428]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	4a6a      	ldr	r2, [pc, #424]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b5c:	f023 0301 	bic.w	r3, r3, #1
 8006b60:	6713      	str	r3, [r2, #112]	; 0x70
 8006b62:	4b68      	ldr	r3, [pc, #416]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b66:	4a67      	ldr	r2, [pc, #412]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b68:	f023 0304 	bic.w	r3, r3, #4
 8006b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b6e:	e01c      	b.n	8006baa <HAL_RCC_OscConfig+0x376>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	2b05      	cmp	r3, #5
 8006b76:	d10c      	bne.n	8006b92 <HAL_RCC_OscConfig+0x35e>
 8006b78:	4b62      	ldr	r3, [pc, #392]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7c:	4a61      	ldr	r2, [pc, #388]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b7e:	f043 0304 	orr.w	r3, r3, #4
 8006b82:	6713      	str	r3, [r2, #112]	; 0x70
 8006b84:	4b5f      	ldr	r3, [pc, #380]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b88:	4a5e      	ldr	r2, [pc, #376]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b8a:	f043 0301 	orr.w	r3, r3, #1
 8006b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b90:	e00b      	b.n	8006baa <HAL_RCC_OscConfig+0x376>
 8006b92:	4b5c      	ldr	r3, [pc, #368]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b96:	4a5b      	ldr	r2, [pc, #364]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006b98:	f023 0301 	bic.w	r3, r3, #1
 8006b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b9e:	4b59      	ldr	r3, [pc, #356]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba2:	4a58      	ldr	r2, [pc, #352]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006ba4:	f023 0304 	bic.w	r3, r3, #4
 8006ba8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d015      	beq.n	8006bde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb2:	f7fc ff1b 	bl	80039ec <HAL_GetTick>
 8006bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bb8:	e00a      	b.n	8006bd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bba:	f7fc ff17 	bl	80039ec <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d901      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e0d8      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bd0:	4b4c      	ldr	r3, [pc, #304]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd4:	f003 0302 	and.w	r3, r3, #2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0ee      	beq.n	8006bba <HAL_RCC_OscConfig+0x386>
 8006bdc:	e014      	b.n	8006c08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bde:	f7fc ff05 	bl	80039ec <HAL_GetTick>
 8006be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006be4:	e00a      	b.n	8006bfc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006be6:	f7fc ff01 	bl	80039ec <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d901      	bls.n	8006bfc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e0c2      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bfc:	4b41      	ldr	r3, [pc, #260]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1ee      	bne.n	8006be6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d105      	bne.n	8006c1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c0e:	4b3d      	ldr	r3, [pc, #244]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	4a3c      	ldr	r2, [pc, #240]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 80ae 	beq.w	8006d80 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c24:	4b37      	ldr	r3, [pc, #220]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f003 030c 	and.w	r3, r3, #12
 8006c2c:	2b08      	cmp	r3, #8
 8006c2e:	d06d      	beq.n	8006d0c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d14b      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c38:	4b32      	ldr	r3, [pc, #200]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a31      	ldr	r2, [pc, #196]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006c3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c44:	f7fc fed2 	bl	80039ec <HAL_GetTick>
 8006c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c4c:	f7fc fece 	bl	80039ec <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e091      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5e:	4b29      	ldr	r3, [pc, #164]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1f0      	bne.n	8006c4c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	69da      	ldr	r2, [r3, #28]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	019b      	lsls	r3, r3, #6
 8006c7a:	431a      	orrs	r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c80:	085b      	lsrs	r3, r3, #1
 8006c82:	3b01      	subs	r3, #1
 8006c84:	041b      	lsls	r3, r3, #16
 8006c86:	431a      	orrs	r2, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	061b      	lsls	r3, r3, #24
 8006c8e:	431a      	orrs	r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	071b      	lsls	r3, r3, #28
 8006c96:	491b      	ldr	r1, [pc, #108]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c9c:	4b19      	ldr	r3, [pc, #100]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a18      	ldr	r2, [pc, #96]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ca8:	f7fc fea0 	bl	80039ec <HAL_GetTick>
 8006cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cb0:	f7fc fe9c 	bl	80039ec <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e05f      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cc2:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0f0      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x47c>
 8006cce:	e057      	b.n	8006d80 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a0b      	ldr	r2, [pc, #44]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cdc:	f7fc fe86 	bl	80039ec <HAL_GetTick>
 8006ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ce4:	f7fc fe82 	bl	80039ec <HAL_GetTick>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d901      	bls.n	8006cf6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e045      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cf6:	4b03      	ldr	r3, [pc, #12]	; (8006d04 <HAL_RCC_OscConfig+0x4d0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1f0      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x4b0>
 8006d02:	e03d      	b.n	8006d80 <HAL_RCC_OscConfig+0x54c>
 8006d04:	40023800 	.word	0x40023800
 8006d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006d0c:	4b1f      	ldr	r3, [pc, #124]	; (8006d8c <HAL_RCC_OscConfig+0x558>)
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d030      	beq.n	8006d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d129      	bne.n	8006d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d122      	bne.n	8006d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d119      	bne.n	8006d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	3b01      	subs	r3, #1
 8006d56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d10f      	bne.n	8006d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d107      	bne.n	8006d7c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d001      	beq.n	8006d80 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e000      	b.n	8006d82 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40023800 	.word	0x40023800

08006d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0d0      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006da8:	4b6a      	ldr	r3, [pc, #424]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 030f 	and.w	r3, r3, #15
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d910      	bls.n	8006dd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db6:	4b67      	ldr	r3, [pc, #412]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f023 020f 	bic.w	r2, r3, #15
 8006dbe:	4965      	ldr	r1, [pc, #404]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dc6:	4b63      	ldr	r3, [pc, #396]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 030f 	and.w	r3, r3, #15
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d001      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e0b8      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d020      	beq.n	8006e26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006df0:	4b59      	ldr	r3, [pc, #356]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	4a58      	ldr	r2, [pc, #352]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d005      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e08:	4b53      	ldr	r3, [pc, #332]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	4a52      	ldr	r2, [pc, #328]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e14:	4b50      	ldr	r3, [pc, #320]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	494d      	ldr	r1, [pc, #308]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d040      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d107      	bne.n	8006e4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e3a:	4b47      	ldr	r3, [pc, #284]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d115      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e07f      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d107      	bne.n	8006e62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e52:	4b41      	ldr	r3, [pc, #260]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e073      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e62:	4b3d      	ldr	r3, [pc, #244]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d101      	bne.n	8006e72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e06b      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e72:	4b39      	ldr	r3, [pc, #228]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f023 0203 	bic.w	r2, r3, #3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4936      	ldr	r1, [pc, #216]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e84:	f7fc fdb2 	bl	80039ec <HAL_GetTick>
 8006e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e8a:	e00a      	b.n	8006ea2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e8c:	f7fc fdae 	bl	80039ec <HAL_GetTick>
 8006e90:	4602      	mov	r2, r0
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e053      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ea2:	4b2d      	ldr	r3, [pc, #180]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 020c 	and.w	r2, r3, #12
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d1eb      	bne.n	8006e8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006eb4:	4b27      	ldr	r3, [pc, #156]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 030f 	and.w	r3, r3, #15
 8006ebc:	683a      	ldr	r2, [r7, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d210      	bcs.n	8006ee4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ec2:	4b24      	ldr	r3, [pc, #144]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f023 020f 	bic.w	r2, r3, #15
 8006eca:	4922      	ldr	r1, [pc, #136]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed2:	4b20      	ldr	r3, [pc, #128]	; (8006f54 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	683a      	ldr	r2, [r7, #0]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d001      	beq.n	8006ee4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e032      	b.n	8006f4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ef0:	4b19      	ldr	r3, [pc, #100]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	4916      	ldr	r1, [pc, #88]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0308 	and.w	r3, r3, #8
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d009      	beq.n	8006f22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006f0e:	4b12      	ldr	r3, [pc, #72]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	490e      	ldr	r1, [pc, #56]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006f22:	f000 f821 	bl	8006f68 <HAL_RCC_GetSysClockFreq>
 8006f26:	4602      	mov	r2, r0
 8006f28:	4b0b      	ldr	r3, [pc, #44]	; (8006f58 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	091b      	lsrs	r3, r3, #4
 8006f2e:	f003 030f 	and.w	r3, r3, #15
 8006f32:	490a      	ldr	r1, [pc, #40]	; (8006f5c <HAL_RCC_ClockConfig+0x1cc>)
 8006f34:	5ccb      	ldrb	r3, [r1, r3]
 8006f36:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3a:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <HAL_RCC_ClockConfig+0x1d0>)
 8006f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006f3e:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <HAL_RCC_ClockConfig+0x1d4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fc fd0e 	bl	8003964 <HAL_InitTick>

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	40023c00 	.word	0x40023c00
 8006f58:	40023800 	.word	0x40023800
 8006f5c:	0800b390 	.word	0x0800b390
 8006f60:	20000000 	.word	0x20000000
 8006f64:	20000038 	.word	0x20000038

08006f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f6c:	b090      	sub	sp, #64	; 0x40
 8006f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	637b      	str	r3, [r7, #52]	; 0x34
 8006f74:	2300      	movs	r3, #0
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f78:	2300      	movs	r3, #0
 8006f7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f80:	4b59      	ldr	r3, [pc, #356]	; (80070e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	f003 030c 	and.w	r3, r3, #12
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d00d      	beq.n	8006fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	f200 80a1 	bhi.w	80070d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <HAL_RCC_GetSysClockFreq+0x34>
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d003      	beq.n	8006fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f9a:	e09b      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f9c:	4b53      	ldr	r3, [pc, #332]	; (80070ec <HAL_RCC_GetSysClockFreq+0x184>)
 8006f9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006fa0:	e09b      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fa2:	4b53      	ldr	r3, [pc, #332]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006fa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006fa6:	e098      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fa8:	4b4f      	ldr	r3, [pc, #316]	; (80070e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fb0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006fb2:	4b4d      	ldr	r3, [pc, #308]	; (80070e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d028      	beq.n	8007010 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fbe:	4b4a      	ldr	r3, [pc, #296]	; (80070e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	099b      	lsrs	r3, r3, #6
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	623b      	str	r3, [r7, #32]
 8006fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006fd0:	2100      	movs	r1, #0
 8006fd2:	4b47      	ldr	r3, [pc, #284]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006fd4:	fb03 f201 	mul.w	r2, r3, r1
 8006fd8:	2300      	movs	r3, #0
 8006fda:	fb00 f303 	mul.w	r3, r0, r3
 8006fde:	4413      	add	r3, r2
 8006fe0:	4a43      	ldr	r2, [pc, #268]	; (80070f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006fe2:	fba0 1202 	umull	r1, r2, r0, r2
 8006fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fe8:	460a      	mov	r2, r1
 8006fea:	62ba      	str	r2, [r7, #40]	; 0x28
 8006fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fee:	4413      	add	r3, r2
 8006ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	61bb      	str	r3, [r7, #24]
 8006ff8:	61fa      	str	r2, [r7, #28]
 8006ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ffe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007002:	f7f9 f919 	bl	8000238 <__aeabi_uldivmod>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	4613      	mov	r3, r2
 800700c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800700e:	e053      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007010:	4b35      	ldr	r3, [pc, #212]	; (80070e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	099b      	lsrs	r3, r3, #6
 8007016:	2200      	movs	r2, #0
 8007018:	613b      	str	r3, [r7, #16]
 800701a:	617a      	str	r2, [r7, #20]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007022:	f04f 0b00 	mov.w	fp, #0
 8007026:	4652      	mov	r2, sl
 8007028:	465b      	mov	r3, fp
 800702a:	f04f 0000 	mov.w	r0, #0
 800702e:	f04f 0100 	mov.w	r1, #0
 8007032:	0159      	lsls	r1, r3, #5
 8007034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007038:	0150      	lsls	r0, r2, #5
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	ebb2 080a 	subs.w	r8, r2, sl
 8007042:	eb63 090b 	sbc.w	r9, r3, fp
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	f04f 0300 	mov.w	r3, #0
 800704e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007052:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007056:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800705a:	ebb2 0408 	subs.w	r4, r2, r8
 800705e:	eb63 0509 	sbc.w	r5, r3, r9
 8007062:	f04f 0200 	mov.w	r2, #0
 8007066:	f04f 0300 	mov.w	r3, #0
 800706a:	00eb      	lsls	r3, r5, #3
 800706c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007070:	00e2      	lsls	r2, r4, #3
 8007072:	4614      	mov	r4, r2
 8007074:	461d      	mov	r5, r3
 8007076:	eb14 030a 	adds.w	r3, r4, sl
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	eb45 030b 	adc.w	r3, r5, fp
 8007080:	607b      	str	r3, [r7, #4]
 8007082:	f04f 0200 	mov.w	r2, #0
 8007086:	f04f 0300 	mov.w	r3, #0
 800708a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800708e:	4629      	mov	r1, r5
 8007090:	028b      	lsls	r3, r1, #10
 8007092:	4621      	mov	r1, r4
 8007094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007098:	4621      	mov	r1, r4
 800709a:	028a      	lsls	r2, r1, #10
 800709c:	4610      	mov	r0, r2
 800709e:	4619      	mov	r1, r3
 80070a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a2:	2200      	movs	r2, #0
 80070a4:	60bb      	str	r3, [r7, #8]
 80070a6:	60fa      	str	r2, [r7, #12]
 80070a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070ac:	f7f9 f8c4 	bl	8000238 <__aeabi_uldivmod>
 80070b0:	4602      	mov	r2, r0
 80070b2:	460b      	mov	r3, r1
 80070b4:	4613      	mov	r3, r2
 80070b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80070b8:	4b0b      	ldr	r3, [pc, #44]	; (80070e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	0c1b      	lsrs	r3, r3, #16
 80070be:	f003 0303 	and.w	r3, r3, #3
 80070c2:	3301      	adds	r3, #1
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80070c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80070d2:	e002      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <HAL_RCC_GetSysClockFreq+0x184>)
 80070d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80070d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3740      	adds	r7, #64	; 0x40
 80070e0:	46bd      	mov	sp, r7
 80070e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e6:	bf00      	nop
 80070e8:	40023800 	.word	0x40023800
 80070ec:	00f42400 	.word	0x00f42400
 80070f0:	017d7840 	.word	0x017d7840

080070f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070f8:	4b03      	ldr	r3, [pc, #12]	; (8007108 <HAL_RCC_GetHCLKFreq+0x14>)
 80070fa:	681b      	ldr	r3, [r3, #0]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	20000000 	.word	0x20000000

0800710c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007110:	f7ff fff0 	bl	80070f4 <HAL_RCC_GetHCLKFreq>
 8007114:	4602      	mov	r2, r0
 8007116:	4b05      	ldr	r3, [pc, #20]	; (800712c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	0a9b      	lsrs	r3, r3, #10
 800711c:	f003 0307 	and.w	r3, r3, #7
 8007120:	4903      	ldr	r1, [pc, #12]	; (8007130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007122:	5ccb      	ldrb	r3, [r1, r3]
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007128:	4618      	mov	r0, r3
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40023800 	.word	0x40023800
 8007130:	0800b3a0 	.word	0x0800b3a0

08007134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007138:	f7ff ffdc 	bl	80070f4 <HAL_RCC_GetHCLKFreq>
 800713c:	4602      	mov	r2, r0
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	0b5b      	lsrs	r3, r3, #13
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	4903      	ldr	r1, [pc, #12]	; (8007158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800714a:	5ccb      	ldrb	r3, [r1, r3]
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007150:	4618      	mov	r0, r3
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40023800 	.word	0x40023800
 8007158:	0800b3a0 	.word	0x0800b3a0

0800715c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800716c:	2300      	movs	r3, #0
 800716e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007174:	2300      	movs	r3, #0
 8007176:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d012      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007184:	4b69      	ldr	r3, [pc, #420]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	4a68      	ldr	r2, [pc, #416]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800718a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800718e:	6093      	str	r3, [r2, #8]
 8007190:	4b66      	ldr	r3, [pc, #408]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	4964      	ldr	r1, [pc, #400]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719a:	4313      	orrs	r3, r2
 800719c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80071a6:	2301      	movs	r3, #1
 80071a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d017      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071b6:	4b5d      	ldr	r3, [pc, #372]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c4:	4959      	ldr	r1, [pc, #356]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071d4:	d101      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80071d6:	2301      	movs	r3, #1
 80071d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80071e2:	2301      	movs	r3, #1
 80071e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d017      	beq.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071f2:	4b4e      	ldr	r3, [pc, #312]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	494a      	ldr	r1, [pc, #296]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007202:	4313      	orrs	r3, r2
 8007204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007210:	d101      	bne.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007212:	2301      	movs	r3, #1
 8007214:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800721e:	2301      	movs	r3, #1
 8007220:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800722e:	2301      	movs	r3, #1
 8007230:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0320 	and.w	r3, r3, #32
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 808b 	beq.w	8007356 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007240:	4b3a      	ldr	r3, [pc, #232]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007244:	4a39      	ldr	r2, [pc, #228]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800724a:	6413      	str	r3, [r2, #64]	; 0x40
 800724c:	4b37      	ldr	r3, [pc, #220]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800724e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007254:	60bb      	str	r3, [r7, #8]
 8007256:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007258:	4b35      	ldr	r3, [pc, #212]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a34      	ldr	r2, [pc, #208]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800725e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007262:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007264:	f7fc fbc2 	bl	80039ec <HAL_GetTick>
 8007268:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800726a:	e008      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800726c:	f7fc fbbe 	bl	80039ec <HAL_GetTick>
 8007270:	4602      	mov	r2, r0
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b64      	cmp	r3, #100	; 0x64
 8007278:	d901      	bls.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e38f      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800727e:	4b2c      	ldr	r3, [pc, #176]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007286:	2b00      	cmp	r3, #0
 8007288:	d0f0      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800728a:	4b28      	ldr	r3, [pc, #160]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800728c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007292:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d035      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d02e      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072a8:	4b20      	ldr	r3, [pc, #128]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072b2:	4b1e      	ldr	r3, [pc, #120]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b6:	4a1d      	ldr	r2, [pc, #116]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072be:	4b1b      	ldr	r3, [pc, #108]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c2:	4a1a      	ldr	r2, [pc, #104]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80072ca:	4a18      	ldr	r2, [pc, #96]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80072d0:	4b16      	ldr	r3, [pc, #88]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d114      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072dc:	f7fc fb86 	bl	80039ec <HAL_GetTick>
 80072e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072e2:	e00a      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072e4:	f7fc fb82 	bl	80039ec <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d901      	bls.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e351      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072fa:	4b0c      	ldr	r3, [pc, #48]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80072fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0ee      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007312:	d111      	bne.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007314:	4b05      	ldr	r3, [pc, #20]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007320:	4b04      	ldr	r3, [pc, #16]	; (8007334 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007322:	400b      	ands	r3, r1
 8007324:	4901      	ldr	r1, [pc, #4]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007326:	4313      	orrs	r3, r2
 8007328:	608b      	str	r3, [r1, #8]
 800732a:	e00b      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800732c:	40023800 	.word	0x40023800
 8007330:	40007000 	.word	0x40007000
 8007334:	0ffffcff 	.word	0x0ffffcff
 8007338:	4bac      	ldr	r3, [pc, #688]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	4aab      	ldr	r2, [pc, #684]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800733e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007342:	6093      	str	r3, [r2, #8]
 8007344:	4ba9      	ldr	r3, [pc, #676]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007346:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007350:	49a6      	ldr	r1, [pc, #664]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007352:	4313      	orrs	r3, r2
 8007354:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 0310 	and.w	r3, r3, #16
 800735e:	2b00      	cmp	r3, #0
 8007360:	d010      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007362:	4ba2      	ldr	r3, [pc, #648]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007368:	4aa0      	ldr	r2, [pc, #640]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800736a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800736e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007372:	4b9e      	ldr	r3, [pc, #632]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007374:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	499b      	ldr	r1, [pc, #620]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800737e:	4313      	orrs	r3, r2
 8007380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007390:	4b96      	ldr	r3, [pc, #600]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007396:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800739e:	4993      	ldr	r1, [pc, #588]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073a0:	4313      	orrs	r3, r2
 80073a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80073b2:	4b8e      	ldr	r3, [pc, #568]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073c0:	498a      	ldr	r1, [pc, #552]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073c2:	4313      	orrs	r3, r2
 80073c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073d4:	4b85      	ldr	r3, [pc, #532]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e2:	4982      	ldr	r1, [pc, #520]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073f6:	4b7d      	ldr	r3, [pc, #500]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80073f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007404:	4979      	ldr	r1, [pc, #484]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007406:	4313      	orrs	r3, r2
 8007408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00a      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007418:	4b74      	ldr	r3, [pc, #464]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741e:	f023 0203 	bic.w	r2, r3, #3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	4971      	ldr	r1, [pc, #452]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007428:	4313      	orrs	r3, r2
 800742a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800743a:	4b6c      	ldr	r3, [pc, #432]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800743c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007440:	f023 020c 	bic.w	r2, r3, #12
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007448:	4968      	ldr	r1, [pc, #416]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00a      	beq.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800745c:	4b63      	ldr	r3, [pc, #396]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007462:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800746a:	4960      	ldr	r1, [pc, #384]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800746c:	4313      	orrs	r3, r2
 800746e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800747e:	4b5b      	ldr	r3, [pc, #364]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007484:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748c:	4957      	ldr	r1, [pc, #348]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800748e:	4313      	orrs	r3, r2
 8007490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074a0:	4b52      	ldr	r3, [pc, #328]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ae:	494f      	ldr	r1, [pc, #316]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80074c2:	4b4a      	ldr	r3, [pc, #296]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d0:	4946      	ldr	r1, [pc, #280]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074d2:	4313      	orrs	r3, r2
 80074d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80074e4:	4b41      	ldr	r3, [pc, #260]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f2:	493e      	ldr	r1, [pc, #248]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80074f4:	4313      	orrs	r3, r2
 80074f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007506:	4b39      	ldr	r3, [pc, #228]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800750c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007514:	4935      	ldr	r1, [pc, #212]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007516:	4313      	orrs	r3, r2
 8007518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007528:	4b30      	ldr	r3, [pc, #192]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007536:	492d      	ldr	r1, [pc, #180]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007538:	4313      	orrs	r3, r2
 800753a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d011      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800754a:	4b28      	ldr	r3, [pc, #160]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800754c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007550:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007558:	4924      	ldr	r1, [pc, #144]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007564:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007568:	d101      	bne.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800756a:	2301      	movs	r3, #1
 800756c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0308 	and.w	r3, r3, #8
 8007576:	2b00      	cmp	r3, #0
 8007578:	d001      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800757a:	2301      	movs	r3, #1
 800757c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800758a:	4b18      	ldr	r3, [pc, #96]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800758c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007590:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007598:	4914      	ldr	r1, [pc, #80]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00b      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80075ac:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075bc:	490b      	ldr	r1, [pc, #44]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00f      	beq.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80075d0:	4b06      	ldr	r3, [pc, #24]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e0:	4902      	ldr	r1, [pc, #8]	; (80075ec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80075e8:	e002      	b.n	80075f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80075ea:	bf00      	nop
 80075ec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80075fc:	4b8a      	ldr	r3, [pc, #552]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80075fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007602:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760c:	4986      	ldr	r1, [pc, #536]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007620:	4b81      	ldr	r3, [pc, #516]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007626:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007630:	497d      	ldr	r1, [pc, #500]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007632:	4313      	orrs	r3, r2
 8007634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d006      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80d6 	beq.w	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800764c:	4b76      	ldr	r3, [pc, #472]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a75      	ldr	r2, [pc, #468]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007658:	f7fc f9c8 	bl	80039ec <HAL_GetTick>
 800765c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800765e:	e008      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007660:	f7fc f9c4 	bl	80039ec <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	2b64      	cmp	r3, #100	; 0x64
 800766c:	d901      	bls.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e195      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007672:	4b6d      	ldr	r3, [pc, #436]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f0      	bne.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b00      	cmp	r3, #0
 8007688:	d021      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x572>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768e:	2b00      	cmp	r3, #0
 8007690:	d11d      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007692:	4b65      	ldr	r3, [pc, #404]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007698:	0c1b      	lsrs	r3, r3, #16
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80076a0:	4b61      	ldr	r3, [pc, #388]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076a6:	0e1b      	lsrs	r3, r3, #24
 80076a8:	f003 030f 	and.w	r3, r3, #15
 80076ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	019a      	lsls	r2, r3, #6
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	041b      	lsls	r3, r3, #16
 80076b8:	431a      	orrs	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	061b      	lsls	r3, r3, #24
 80076be:	431a      	orrs	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	071b      	lsls	r3, r3, #28
 80076c6:	4958      	ldr	r1, [pc, #352]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076e2:	d00a      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d02e      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076f8:	d129      	bne.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80076fa:	4b4b      	ldr	r3, [pc, #300]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80076fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007700:	0c1b      	lsrs	r3, r3, #16
 8007702:	f003 0303 	and.w	r3, r3, #3
 8007706:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007708:	4b47      	ldr	r3, [pc, #284]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800770a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800770e:	0f1b      	lsrs	r3, r3, #28
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	019a      	lsls	r2, r3, #6
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	041b      	lsls	r3, r3, #16
 8007720:	431a      	orrs	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	061b      	lsls	r3, r3, #24
 8007728:	431a      	orrs	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	071b      	lsls	r3, r3, #28
 800772e:	493e      	ldr	r1, [pc, #248]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007736:	4b3c      	ldr	r3, [pc, #240]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800773c:	f023 021f 	bic.w	r2, r3, #31
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007744:	3b01      	subs	r3, #1
 8007746:	4938      	ldr	r1, [pc, #224]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d01d      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800775a:	4b33      	ldr	r3, [pc, #204]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800775c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007760:	0e1b      	lsrs	r3, r3, #24
 8007762:	f003 030f 	and.w	r3, r3, #15
 8007766:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007768:	4b2f      	ldr	r3, [pc, #188]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800776a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800776e:	0f1b      	lsrs	r3, r3, #28
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	019a      	lsls	r2, r3, #6
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	041b      	lsls	r3, r3, #16
 8007782:	431a      	orrs	r2, r3
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	061b      	lsls	r3, r3, #24
 8007788:	431a      	orrs	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	071b      	lsls	r3, r3, #28
 800778e:	4926      	ldr	r1, [pc, #152]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007790:	4313      	orrs	r3, r2
 8007792:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d011      	beq.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	019a      	lsls	r2, r3, #6
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	041b      	lsls	r3, r3, #16
 80077ae:	431a      	orrs	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	061b      	lsls	r3, r3, #24
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	071b      	lsls	r3, r3, #28
 80077be:	491a      	ldr	r1, [pc, #104]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077c0:	4313      	orrs	r3, r2
 80077c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80077c6:	4b18      	ldr	r3, [pc, #96]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a17      	ldr	r2, [pc, #92]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d2:	f7fc f90b 	bl	80039ec <HAL_GetTick>
 80077d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077d8:	e008      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077da:	f7fc f907 	bl	80039ec <HAL_GetTick>
 80077de:	4602      	mov	r2, r0
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	1ad3      	subs	r3, r2, r3
 80077e4:	2b64      	cmp	r3, #100	; 0x64
 80077e6:	d901      	bls.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e0d8      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077ec:	4b0e      	ldr	r3, [pc, #56]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d0f0      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	f040 80ce 	bne.w	800799c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007800:	4b09      	ldr	r3, [pc, #36]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a08      	ldr	r2, [pc, #32]	; (8007828 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800780a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800780c:	f7fc f8ee 	bl	80039ec <HAL_GetTick>
 8007810:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007812:	e00b      	b.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007814:	f7fc f8ea 	bl	80039ec <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	2b64      	cmp	r3, #100	; 0x64
 8007820:	d904      	bls.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	e0bb      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007826:	bf00      	nop
 8007828:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800782c:	4b5e      	ldr	r3, [pc, #376]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007838:	d0ec      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007856:	2b00      	cmp	r3, #0
 8007858:	d02e      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	2b00      	cmp	r3, #0
 8007860:	d12a      	bne.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007862:	4b51      	ldr	r3, [pc, #324]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007868:	0c1b      	lsrs	r3, r3, #16
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007870:	4b4d      	ldr	r3, [pc, #308]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007876:	0f1b      	lsrs	r3, r3, #28
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	019a      	lsls	r2, r3, #6
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	041b      	lsls	r3, r3, #16
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	699b      	ldr	r3, [r3, #24]
 800788e:	061b      	lsls	r3, r3, #24
 8007890:	431a      	orrs	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	071b      	lsls	r3, r3, #28
 8007896:	4944      	ldr	r1, [pc, #272]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007898:	4313      	orrs	r3, r2
 800789a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800789e:	4b42      	ldr	r3, [pc, #264]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	3b01      	subs	r3, #1
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	493d      	ldr	r1, [pc, #244]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d022      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078cc:	d11d      	bne.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80078ce:	4b36      	ldr	r3, [pc, #216]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d4:	0e1b      	lsrs	r3, r3, #24
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078dc:	4b32      	ldr	r3, [pc, #200]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80078de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e2:	0f1b      	lsrs	r3, r3, #28
 80078e4:	f003 0307 	and.w	r3, r3, #7
 80078e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	019a      	lsls	r2, r3, #6
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	041b      	lsls	r3, r3, #16
 80078f6:	431a      	orrs	r2, r3
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	061b      	lsls	r3, r3, #24
 80078fc:	431a      	orrs	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	071b      	lsls	r3, r3, #28
 8007902:	4929      	ldr	r1, [pc, #164]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0308 	and.w	r3, r3, #8
 8007912:	2b00      	cmp	r3, #0
 8007914:	d028      	beq.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007916:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791c:	0e1b      	lsrs	r3, r3, #24
 800791e:	f003 030f 	and.w	r3, r3, #15
 8007922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007924:	4b20      	ldr	r3, [pc, #128]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792a:	0c1b      	lsrs	r3, r3, #16
 800792c:	f003 0303 	and.w	r3, r3, #3
 8007930:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	019a      	lsls	r2, r3, #6
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	041b      	lsls	r3, r3, #16
 800793c:	431a      	orrs	r2, r3
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	061b      	lsls	r3, r3, #24
 8007942:	431a      	orrs	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	69db      	ldr	r3, [r3, #28]
 8007948:	071b      	lsls	r3, r3, #28
 800794a:	4917      	ldr	r1, [pc, #92]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800794c:	4313      	orrs	r3, r2
 800794e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007952:	4b15      	ldr	r3, [pc, #84]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007958:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007960:	4911      	ldr	r1, [pc, #68]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007968:	4b0f      	ldr	r3, [pc, #60]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a0e      	ldr	r2, [pc, #56]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800796e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007972:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007974:	f7fc f83a 	bl	80039ec <HAL_GetTick>
 8007978:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800797a:	e008      	b.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800797c:	f7fc f836 	bl	80039ec <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b64      	cmp	r3, #100	; 0x64
 8007988:	d901      	bls.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e007      	b.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800798e:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007996:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800799a:	d1ef      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	40023800 	.word	0x40023800

080079ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b087      	sub	sp, #28
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80079ca:	f040 80a3 	bne.w	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
  {
    saiclocksource = RCC->DCKCFGR1;
 80079ce:	4ba8      	ldr	r3, [pc, #672]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80079d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80079dc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079e4:	f000 808a 	beq.w	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80079ee:	f200 8093 	bhi.w	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079f8:	d07d      	beq.n	8007af6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a00:	f200 808a 	bhi.w	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d004      	beq.n	8007a14 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a10:	d039      	beq.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007a12:	e081      	b.n	8007b18 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007a14:	4b96      	ldr	r3, [pc, #600]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d108      	bne.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a20:	4b93      	ldr	r3, [pc, #588]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a28:	4a92      	ldr	r2, [pc, #584]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a2e:	613b      	str	r3, [r7, #16]
 8007a30:	e007      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007a32:	4b8f      	ldr	r3, [pc, #572]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a3a:	4a8f      	ldr	r2, [pc, #572]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a40:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007a42:	4b8b      	ldr	r3, [pc, #556]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a48:	0e1b      	lsrs	r3, r3, #24
 8007a4a:	f003 030f 	and.w	r3, r3, #15
 8007a4e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007a50:	4b87      	ldr	r3, [pc, #540]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a56:	099b      	lsrs	r3, r3, #6
 8007a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	fb03 f202 	mul.w	r2, r3, r2
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a68:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007a6a:	4b81      	ldr	r3, [pc, #516]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a70:	0a1b      	lsrs	r3, r3, #8
 8007a72:	f003 031f 	and.w	r3, r3, #31
 8007a76:	3301      	adds	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a82:	617b      	str	r3, [r7, #20]
        break;
 8007a84:	e049      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007a86:	4b7a      	ldr	r3, [pc, #488]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d108      	bne.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007a92:	4b77      	ldr	r3, [pc, #476]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a9a:	4a76      	ldr	r2, [pc, #472]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa0:	613b      	str	r3, [r7, #16]
 8007aa2:	e007      	b.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007aa4:	4b72      	ldr	r3, [pc, #456]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aac:	4a72      	ldr	r2, [pc, #456]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007ab4:	4b6e      	ldr	r3, [pc, #440]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aba:	0e1b      	lsrs	r3, r3, #24
 8007abc:	f003 030f 	and.w	r3, r3, #15
 8007ac0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007ac2:	4b6b      	ldr	r3, [pc, #428]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ac8:	099b      	lsrs	r3, r3, #6
 8007aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	fb03 f202 	mul.w	r2, r3, r2
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ada:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007adc:	4b64      	ldr	r3, [pc, #400]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae2:	f003 031f 	and.w	r3, r3, #31
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007aea:	697a      	ldr	r2, [r7, #20]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af2:	617b      	str	r3, [r7, #20]
        break;
 8007af4:	e011      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007af6:	4b61      	ldr	r3, [pc, #388]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007af8:	617b      	str	r3, [r7, #20]
        break;
 8007afa:	e00e      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007afc:	4b5c      	ldr	r3, [pc, #368]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d102      	bne.n	8007b0e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 8007b08:	4b5a      	ldr	r3, [pc, #360]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007b0a:	617b      	str	r3, [r7, #20]
        break;
 8007b0c:	e005      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          frequency = HSE_VALUE;
 8007b0e:	4b5a      	ldr	r3, [pc, #360]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007b10:	617b      	str	r3, [r7, #20]
        break;
 8007b12:	e002      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
      }
    }
  }
 8007b14:	bf00      	nop
 8007b16:	e000      	b.n	8007b1a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
        break;
 8007b18:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b20:	f040 80a3 	bne.w	8007c6a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007b24:	4b52      	ldr	r3, [pc, #328]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007b26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b2a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007b32:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b3a:	f000 808a 	beq.w	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007b44:	f200 809c 	bhi.w	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b4e:	d07d      	beq.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007b56:	f200 8093 	bhi.w	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d004      	beq.n	8007b6a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b66:	d039      	beq.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x230>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007b68:	e08a      	b.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007b6a:	4b41      	ldr	r3, [pc, #260]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d108      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007b76:	4b3e      	ldr	r3, [pc, #248]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b7e:	4a3d      	ldr	r2, [pc, #244]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	e007      	b.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007b88:	4b39      	ldr	r3, [pc, #228]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b90:	4a39      	ldr	r2, [pc, #228]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b96:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007b98:	4b35      	ldr	r3, [pc, #212]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9e:	0e1b      	lsrs	r3, r3, #24
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007ba6:	4b32      	ldr	r3, [pc, #200]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bac:	099b      	lsrs	r3, r3, #6
 8007bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	fb03 f202 	mul.w	r2, r3, r2
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bbe:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007bc0:	4b2b      	ldr	r3, [pc, #172]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007bc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bc6:	0a1b      	lsrs	r3, r3, #8
 8007bc8:	f003 031f 	and.w	r3, r3, #31
 8007bcc:	3301      	adds	r3, #1
 8007bce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd8:	617b      	str	r3, [r7, #20]
        break;
 8007bda:	e052      	b.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007bdc:	4b24      	ldr	r3, [pc, #144]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d108      	bne.n	8007bfa <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007be8:	4b21      	ldr	r3, [pc, #132]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf0:	4a20      	ldr	r2, [pc, #128]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf6:	613b      	str	r3, [r7, #16]
 8007bf8:	e007      	b.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x25e>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007bfa:	4b1d      	ldr	r3, [pc, #116]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c02:	4a1d      	ldr	r2, [pc, #116]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c08:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007c0a:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c10:	0e1b      	lsrs	r3, r3, #24
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007c18:	4b15      	ldr	r3, [pc, #84]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c1e:	099b      	lsrs	r3, r3, #6
 8007c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c24:	693a      	ldr	r2, [r7, #16]
 8007c26:	fb03 f202 	mul.w	r2, r3, r2
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c30:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007c32:	4b0f      	ldr	r3, [pc, #60]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c38:	f003 031f 	and.w	r3, r3, #31
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c48:	617b      	str	r3, [r7, #20]
        break;
 8007c4a:	e01a      	b.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c4c:	4b0b      	ldr	r3, [pc, #44]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007c4e:	617b      	str	r3, [r7, #20]
        break;
 8007c50:	e017      	b.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007c52:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d102      	bne.n	8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
          frequency = HSI_VALUE;
 8007c5e:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8007c60:	617b      	str	r3, [r7, #20]
        break;
 8007c62:	e00e      	b.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
          frequency = HSE_VALUE;
 8007c64:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007c66:	617b      	str	r3, [r7, #20]
        break;
 8007c68:	e00b      	b.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
      }
    }
  }
 8007c6a:	bf00      	nop
 8007c6c:	e009      	b.n	8007c82 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007c6e:	bf00      	nop
 8007c70:	40023800 	.word	0x40023800
 8007c74:	00f42400 	.word	0x00f42400
 8007c78:	017d7840 	.word	0x017d7840
 8007c7c:	00bb8000 	.word	0x00bb8000
        break;
 8007c80:	bf00      	nop

  return frequency;
 8007c82:	697b      	ldr	r3, [r7, #20]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e156      	b.n	8007f5c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d106      	bne.n	8007cc8 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7f9 ffda 	bl	8001c7c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 fa5f 	bl	8008194 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	d00c      	beq.n	8007cf8 <HAL_SAI_Init+0x68>
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d80d      	bhi.n	8007cfe <HAL_SAI_Init+0x6e>
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <HAL_SAI_Init+0x5c>
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d003      	beq.n	8007cf2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 8007cea:	e008      	b.n	8007cfe <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	61fb      	str	r3, [r7, #28]
      break;
 8007cf0:	e006      	b.n	8007d00 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007cf2:	2310      	movs	r3, #16
 8007cf4:	61fb      	str	r3, [r7, #28]
      break;
 8007cf6:	e003      	b.n	8007d00 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007cf8:	2320      	movs	r3, #32
 8007cfa:	61fb      	str	r3, [r7, #28]
      break;
 8007cfc:	e000      	b.n	8007d00 <HAL_SAI_Init+0x70>
      break;
 8007cfe:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d81e      	bhi.n	8007d46 <HAL_SAI_Init+0xb6>
 8007d08:	a201      	add	r2, pc, #4	; (adr r2, 8007d10 <HAL_SAI_Init+0x80>)
 8007d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0e:	bf00      	nop
 8007d10:	08007d21 	.word	0x08007d21
 8007d14:	08007d27 	.word	0x08007d27
 8007d18:	08007d2f 	.word	0x08007d2f
 8007d1c:	08007d37 	.word	0x08007d37
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8007d20:	2300      	movs	r3, #0
 8007d22:	617b      	str	r3, [r7, #20]
    }
    break;
 8007d24:	e010      	b.n	8007d48 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d2a:	617b      	str	r3, [r7, #20]
    }
    break;
 8007d2c:	e00c      	b.n	8007d48 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007d2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d32:	617b      	str	r3, [r7, #20]
    }
    break;
 8007d34:	e008      	b.n	8007d48 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007d36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d3a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f043 0301 	orr.w	r3, r3, #1
 8007d42:	61fb      	str	r3, [r7, #28]
    }
    break;
 8007d44:	e000      	b.n	8007d48 <HAL_SAI_Init+0xb8>
    default:
      break;
 8007d46:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a85      	ldr	r2, [pc, #532]	; (8007f64 <HAL_SAI_Init+0x2d4>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d004      	beq.n	8007d5c <HAL_SAI_Init+0xcc>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a84      	ldr	r2, [pc, #528]	; (8007f68 <HAL_SAI_Init+0x2d8>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d103      	bne.n	8007d64 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007d5c:	4a83      	ldr	r2, [pc, #524]	; (8007f6c <HAL_SAI_Init+0x2dc>)
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	e002      	b.n	8007d6a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007d64:	4a82      	ldr	r2, [pc, #520]	; (8007f70 <HAL_SAI_Init+0x2e0>)
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d04c      	beq.n	8007e0c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8007d72:	2300      	movs	r3, #0
 8007d74:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a7a      	ldr	r2, [pc, #488]	; (8007f64 <HAL_SAI_Init+0x2d4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d004      	beq.n	8007d8a <HAL_SAI_Init+0xfa>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a78      	ldr	r2, [pc, #480]	; (8007f68 <HAL_SAI_Init+0x2d8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d104      	bne.n	8007d94 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007d8a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007d8e:	f7ff fe0d 	bl	80079ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007d92:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a76      	ldr	r2, [pc, #472]	; (8007f74 <HAL_SAI_Init+0x2e4>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d004      	beq.n	8007da8 <HAL_SAI_Init+0x118>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a75      	ldr	r2, [pc, #468]	; (8007f78 <HAL_SAI_Init+0x2e8>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d104      	bne.n	8007db2 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007da8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007dac:	f7ff fdfe 	bl	80079ac <HAL_RCCEx_GetPeriphCLKFreq>
 8007db0:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8007db2:	693a      	ldr	r2, [r7, #16]
 8007db4:	4613      	mov	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	005b      	lsls	r3, r3, #1
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	025b      	lsls	r3, r3, #9
 8007dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc8:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	4a6b      	ldr	r2, [pc, #428]	; (8007f7c <HAL_SAI_Init+0x2ec>)
 8007dce:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd2:	08da      	lsrs	r2, r3, #3
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8007dd8:	68f9      	ldr	r1, [r7, #12]
 8007dda:	4b68      	ldr	r3, [pc, #416]	; (8007f7c <HAL_SAI_Init+0x2ec>)
 8007ddc:	fba3 2301 	umull	r2, r3, r3, r1
 8007de0:	08da      	lsrs	r2, r3, #3
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	005b      	lsls	r3, r3, #1
 8007dea:	1aca      	subs	r2, r1, r3
 8007dec:	2a08      	cmp	r2, #8
 8007dee:	d904      	bls.n	8007dfa <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d104      	bne.n	8007e0c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	085a      	lsrs	r2, r3, #1
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d003      	beq.n	8007e1c <HAL_SAI_Init+0x18c>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d109      	bne.n	8007e30 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d101      	bne.n	8007e28 <HAL_SAI_Init+0x198>
 8007e24:	2300      	movs	r3, #0
 8007e26:	e001      	b.n	8007e2c <HAL_SAI_Init+0x19c>
 8007e28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e2c:	61bb      	str	r3, [r7, #24]
 8007e2e:	e008      	b.n	8007e42 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d102      	bne.n	8007e3e <HAL_SAI_Init+0x1ae>
 8007e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e3c:	e000      	b.n	8007e40 <HAL_SAI_Init+0x1b0>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6819      	ldr	r1, [r3, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	4b4c      	ldr	r3, [pc, #304]	; (8007f80 <HAL_SAI_Init+0x2f0>)
 8007e4e:	400b      	ands	r3, r1
 8007e50:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6819      	ldr	r1, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e60:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e66:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8007e7a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007e86:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	051b      	lsls	r3, r3, #20
 8007e8e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	6859      	ldr	r1, [r3, #4]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b38      	ldr	r3, [pc, #224]	; (8007f84 <HAL_SAI_Init+0x2f4>)
 8007ea4:	400b      	ands	r3, r1
 8007ea6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6859      	ldr	r1, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	699a      	ldr	r2, [r3, #24]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6899      	ldr	r1, [r3, #8]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	4b2d      	ldr	r3, [pc, #180]	; (8007f88 <HAL_SAI_Init+0x2f8>)
 8007ed2:	400b      	ands	r3, r1
 8007ed4:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6899      	ldr	r1, [r3, #8]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007ee6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8007eec:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8007ef2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007efc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	68d9      	ldr	r1, [r3, #12]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007f14:	400b      	ands	r3, r1
 8007f16:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68d9      	ldr	r1, [r3, #12]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f26:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f2c:	041b      	lsls	r3, r3, #16
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f34:	3b01      	subs	r3, #1
 8007f36:	021b      	lsls	r3, r3, #8
 8007f38:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	430a      	orrs	r2, r1
 8007f40:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3720      	adds	r7, #32
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40015804 	.word	0x40015804
 8007f68:	40015824 	.word	0x40015824
 8007f6c:	40015800 	.word	0x40015800
 8007f70:	40015c00 	.word	0x40015c00
 8007f74:	40015c04 	.word	0x40015c04
 8007f78:	40015c24 	.word	0x40015c24
 8007f7c:	cccccccd 	.word	0xcccccccd
 8007f80:	ff05c010 	.word	0xff05c010
 8007f84:	ffff1ff0 	.word	0xffff1ff0
 8007f88:	fff88000 	.word	0xfff88000

08007f8c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	4613      	mov	r3, r2
 8007f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8007f9a:	f7fb fd27 	bl	80039ec <HAL_GetTick>
 8007f9e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <HAL_SAI_Transmit_DMA+0x20>
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d101      	bne.n	8007fb0 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e093      	b.n	80080d8 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	f040 808c 	bne.w	80080d6 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d101      	bne.n	8007fcc <HAL_SAI_Transmit_DMA+0x40>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	e085      	b.n	80080d8 <HAL_SAI_Transmit_DMA+0x14c>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	88fa      	ldrh	r2, [r7, #6]
 8007fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	88fa      	ldrh	r2, [r7, #6]
 8007fe6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2212      	movs	r2, #18
 8007ff6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ffe:	4a38      	ldr	r2, [pc, #224]	; (80080e0 <HAL_SAI_Transmit_DMA+0x154>)
 8008000:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008006:	4a37      	ldr	r2, [pc, #220]	; (80080e4 <HAL_SAI_Transmit_DMA+0x158>)
 8008008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800800e:	4a36      	ldr	r2, [pc, #216]	; (80080e8 <HAL_SAI_Transmit_DMA+0x15c>)
 8008010:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008016:	2200      	movs	r2, #0
 8008018:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008022:	4619      	mov	r1, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	331c      	adds	r3, #28
 800802a:	461a      	mov	r2, r3
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008032:	f7fc fd71 	bl	8004b18 <HAL_DMA_Start_IT>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d005      	beq.n	8008048 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e047      	b.n	80080d8 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008048:	2100      	movs	r1, #0
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	f000 f86c 	bl	8008128 <SAI_InterruptFlag>
 8008050:	4601      	mov	r1, r0
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	430a      	orrs	r2, r1
 800805e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800806e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8008070:	e015      	b.n	800809e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8008072:	f7fb fcbb 	bl	80039ec <HAL_GetTick>
 8008076:	4602      	mov	r2, r0
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	1ad3      	subs	r3, r2, r3
 800807c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008080:	d90d      	bls.n	800809e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008088:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e01c      	b.n	80080d8 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d0e2      	beq.n	8008072 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d107      	bne.n	80080ca <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80080c8:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	e000      	b.n	80080d8 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 80080d6:	2302      	movs	r3, #2
  }
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	08008265 	.word	0x08008265
 80080e4:	08008205 	.word	0x08008205
 80080e8:	08008281 	.word	0x08008281

080080ec <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008132:	2301      	movs	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d103      	bne.n	8008144 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f043 0308 	orr.w	r3, r3, #8
 8008142:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008148:	2b08      	cmp	r3, #8
 800814a:	d10b      	bne.n	8008164 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008150:	2b03      	cmp	r3, #3
 8008152:	d003      	beq.n	800815c <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d103      	bne.n	8008164 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f043 0310 	orr.w	r3, r3, #16
 8008162:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	2b03      	cmp	r3, #3
 800816a:	d003      	beq.n	8008174 <SAI_InterruptFlag+0x4c>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	2b02      	cmp	r3, #2
 8008172:	d104      	bne.n	800817e <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800817a:	60fb      	str	r3, [r7, #12]
 800817c:	e003      	b.n	8008186 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f043 0304 	orr.w	r3, r3, #4
 8008184:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8008186:	68fb      	ldr	r3, [r7, #12]
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 800819c:	4b17      	ldr	r3, [pc, #92]	; (80081fc <SAI_Disable+0x68>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a17      	ldr	r2, [pc, #92]	; (8008200 <SAI_Disable+0x6c>)
 80081a2:	fba2 2303 	umull	r2, r3, r2, r3
 80081a6:	0b1b      	lsrs	r3, r3, #12
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80081be:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	1e5a      	subs	r2, r3, #1
 80081c4:	60fa      	str	r2, [r7, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10a      	bne.n	80081e0 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80081da:	2303      	movs	r3, #3
 80081dc:	72fb      	strb	r3, [r7, #11]
      break;
 80081de:	e006      	b.n	80081ee <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1e8      	bne.n	80081c0 <SAI_Disable+0x2c>

  return status;
 80081ee:	7afb      	ldrb	r3, [r7, #11]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	20000000 	.word	0x20000000
 8008200:	95cbec1b 	.word	0x95cbec1b

08008204 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800821a:	d01c      	beq.n	8008256 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008232:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008234:	2100      	movs	r1, #0
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f7ff ff76 	bl	8008128 <SAI_InterruptFlag>
 800823c:	4603      	mov	r3, r0
 800823e:	43d9      	mvns	r1, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	400a      	ands	r2, r1
 800824c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8008256:	68f8      	ldr	r0, [r7, #12]
 8008258:	f7ff ff48 	bl	80080ec <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800825c:	bf00      	nop
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008270:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8008272:	68f8      	ldr	r0, [r7, #12]
 8008274:	f7ff ff44 	bl	8008100 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8008278:	bf00      	nop
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008294:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d004      	beq.n	80082b2 <SAI_DMAError+0x32>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d112      	bne.n	80082d8 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681a      	ldr	r2, [r3, #0]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80082c0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff ff66 	bl	8008194 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff ff1b 	bl	8008114 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e022      	b.n	800833e <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d105      	bne.n	8008310 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7f9 fae4 	bl	80018d8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2203      	movs	r2, #3
 8008314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f815 	bl	8008348 <HAL_SD_InitCard>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e00a      	b.n	800833e <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
	...

08008348 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008348:	b5b0      	push	{r4, r5, r7, lr}
 800834a:	b08e      	sub	sp, #56	; 0x38
 800834c:	af04      	add	r7, sp, #16
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008350:	2300      	movs	r3, #0
 8008352:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008354:	2300      	movs	r3, #0
 8008356:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008358:	2300      	movs	r3, #0
 800835a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008360:	2300      	movs	r3, #0
 8008362:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008364:	2376      	movs	r3, #118	; 0x76
 8008366:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681d      	ldr	r5, [r3, #0]
 800836c:	466c      	mov	r4, sp
 800836e:	f107 0314 	add.w	r3, r7, #20
 8008372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008376:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800837a:	f107 0308 	add.w	r3, r7, #8
 800837e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008380:	4628      	mov	r0, r5
 8008382:	f001 ffa1 	bl	800a2c8 <SDMMC_Init>
 8008386:	4603      	mov	r3, r0
 8008388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800838c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e059      	b.n	800844c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083a6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f001 ffd5 	bl	800a35c <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083c0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80083c2:	2002      	movs	r0, #2
 80083c4:	f7fb fb1e 	bl	8003a04 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fff3 	bl	80093b4 <SD_PowerON>
 80083ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d00b      	beq.n	80083ee <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	431a      	orrs	r2, r3
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e02e      	b.n	800844c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 ff12 	bl	8009218 <SD_InitCard>
 80083f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00b      	beq.n	8008414 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e01b      	b.n	800844c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f44f 7100 	mov.w	r1, #512	; 0x200
 800841c:	4618      	mov	r0, r3
 800841e:	f002 f82f 	bl	800a480 <SDMMC_CmdBlockLength>
 8008422:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00f      	beq.n	800844a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a09      	ldr	r2, [pc, #36]	; (8008454 <HAL_SD_InitCard+0x10c>)
 8008430:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e000      	b.n	800844c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3728      	adds	r7, #40	; 0x28
 8008450:	46bd      	mov	sp, r7
 8008452:	bdb0      	pop	{r4, r5, r7, pc}
 8008454:	004005ff 	.word	0x004005ff

08008458 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b08c      	sub	sp, #48	; 0x30
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
 8008464:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d107      	bne.n	8008480 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e0c3      	b.n	8008608 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b01      	cmp	r3, #1
 800848a:	f040 80bc 	bne.w	8008606 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	441a      	add	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800849e:	429a      	cmp	r2, r3
 80084a0:	d907      	bls.n	80084b2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e0aa      	b.n	8008608 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2203      	movs	r2, #3
 80084b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	2200      	movs	r2, #0
 80084c0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80084d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d6:	4a4e      	ldr	r2, [pc, #312]	; (8008610 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80084d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	4a4d      	ldr	r2, [pc, #308]	; (8008614 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80084e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	2200      	movs	r2, #0
 80084e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	2200      	movs	r2, #0
 80084f0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3380      	adds	r3, #128	; 0x80
 8008518:	4619      	mov	r1, r3
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	025b      	lsls	r3, r3, #9
 8008520:	089b      	lsrs	r3, r3, #2
 8008522:	f7fc faf9 	bl	8004b18 <HAL_DMA_Start_IT>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d017      	beq.n	800855c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800853a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a35      	ldr	r2, [pc, #212]	; (8008618 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008542:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008548:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e055      	b.n	8008608 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0208 	orr.w	r2, r2, #8
 800856a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008570:	2b01      	cmp	r3, #1
 8008572:	d002      	beq.n	800857a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	025b      	lsls	r3, r3, #9
 8008578:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800857a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800857e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	025b      	lsls	r3, r3, #9
 8008584:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008586:	2390      	movs	r3, #144	; 0x90
 8008588:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800858a:	2302      	movs	r3, #2
 800858c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800858e:	2300      	movs	r3, #0
 8008590:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008592:	2301      	movs	r3, #1
 8008594:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f107 0210 	add.w	r2, r7, #16
 800859e:	4611      	mov	r1, r2
 80085a0:	4618      	mov	r0, r3
 80085a2:	f001 ff41 	bl	800a428 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d90a      	bls.n	80085c2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2282      	movs	r2, #130	; 0x82
 80085b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085b8:	4618      	mov	r0, r3
 80085ba:	f001 ffa5 	bl	800a508 <SDMMC_CmdReadMultiBlock>
 80085be:	62f8      	str	r0, [r7, #44]	; 0x2c
 80085c0:	e009      	b.n	80085d6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2281      	movs	r2, #129	; 0x81
 80085c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 ff78 	bl	800a4c4 <SDMMC_CmdReadSingleBlock>
 80085d4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80085d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d012      	beq.n	8008602 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a0d      	ldr	r2, [pc, #52]	; (8008618 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80085e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	431a      	orrs	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e002      	b.n	8008608 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	e000      	b.n	8008608 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8008606:	2302      	movs	r3, #2
  }
}
 8008608:	4618      	mov	r0, r3
 800860a:	3730      	adds	r7, #48	; 0x30
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	08009027 	.word	0x08009027
 8008614:	08009099 	.word	0x08009099
 8008618:	004005ff 	.word	0x004005ff

0800861c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08c      	sub	sp, #48	; 0x30
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d107      	bne.n	8008644 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	e0c6      	b.n	80087d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b01      	cmp	r3, #1
 800864e:	f040 80bf 	bne.w	80087d0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	441a      	add	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008662:	429a      	cmp	r2, r3
 8008664:	d907      	bls.n	8008676 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e0ad      	b.n	80087d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2203      	movs	r2, #3
 800867a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2200      	movs	r2, #0
 8008684:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f042 021a 	orr.w	r2, r2, #26
 8008694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869a:	4a50      	ldr	r2, [pc, #320]	; (80087dc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800869c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a2:	4a4f      	ldr	r2, [pc, #316]	; (80087e0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80086a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086aa:	2200      	movs	r2, #0
 80086ac:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d002      	beq.n	80086bc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80086b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b8:	025b      	lsls	r3, r3, #9
 80086ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d90a      	bls.n	80086d8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	22a0      	movs	r2, #160	; 0xa0
 80086c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 ff5e 	bl	800a590 <SDMMC_CmdWriteMultiBlock>
 80086d4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80086d6:	e009      	b.n	80086ec <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2290      	movs	r2, #144	; 0x90
 80086dc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086e4:	4618      	mov	r0, r3
 80086e6:	f001 ff31 	bl	800a54c <SDMMC_CmdWriteSingleBlock>
 80086ea:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80086ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d012      	beq.n	8008718 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a3b      	ldr	r2, [pc, #236]	; (80087e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80086f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008700:	431a      	orrs	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	e05c      	b.n	80087d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f042 0208 	orr.w	r2, r2, #8
 8008726:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872c:	2240      	movs	r2, #64	; 0x40
 800872e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	430a      	orrs	r2, r1
 800874a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008750:	68b9      	ldr	r1, [r7, #8]
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3380      	adds	r3, #128	; 0x80
 8008758:	461a      	mov	r2, r3
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	025b      	lsls	r3, r3, #9
 800875e:	089b      	lsrs	r3, r3, #2
 8008760:	f7fc f9da 	bl	8004b18 <HAL_DMA_Start_IT>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01a      	beq.n	80087a0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 021a 	bic.w	r2, r2, #26
 8008778:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a19      	ldr	r2, [pc, #100]	; (80087e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008780:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e018      	b.n	80087d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087a4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	025b      	lsls	r3, r3, #9
 80087aa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80087ac:	2390      	movs	r3, #144	; 0x90
 80087ae:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80087b0:	2300      	movs	r3, #0
 80087b2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80087b8:	2301      	movs	r3, #1
 80087ba:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f107 0210 	add.w	r2, r7, #16
 80087c4:	4611      	mov	r1, r2
 80087c6:	4618      	mov	r0, r3
 80087c8:	f001 fe2e 	bl	800a428 <SDMMC_ConfigData>

      return HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	e000      	b.n	80087d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80087d0:	2302      	movs	r3, #2
  }
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3730      	adds	r7, #48	; 0x30
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	08008ffd 	.word	0x08008ffd
 80087e0:	08009099 	.word	0x08009099
 80087e4:	004005ff 	.word	0x004005ff

080087e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d008      	beq.n	8008816 <HAL_SD_IRQHandler+0x2e>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f003 0308 	and.w	r3, r3, #8
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 ffef 	bl	80097f2 <SD_Read_IT>
 8008814:	e15a      	b.n	8008acc <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 808d 	beq.w	8008940 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800882e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	4b9a      	ldr	r3, [pc, #616]	; (8008aa4 <HAL_SD_IRQHandler+0x2bc>)
 800883c:	400b      	ands	r3, r1
 800883e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f022 0201 	bic.w	r2, r2, #1
 800884e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f003 0308 	and.w	r3, r3, #8
 8008856:	2b00      	cmp	r3, #0
 8008858:	d039      	beq.n	80088ce <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d104      	bne.n	800886e <HAL_SD_IRQHandler+0x86>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f003 0320 	and.w	r3, r3, #32
 800886a:	2b00      	cmp	r3, #0
 800886c:	d011      	beq.n	8008892 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4618      	mov	r0, r3
 8008874:	f001 feae 	bl	800a5d4 <SDMMC_CmdStopTransfer>
 8008878:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d008      	beq.n	8008892 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	431a      	orrs	r2, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f921 	bl	8008ad4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f240 523a 	movw	r2, #1338	; 0x53a
 800889a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f003 0301 	and.w	r3, r3, #1
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d104      	bne.n	80088be <HAL_SD_IRQHandler+0xd6>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f003 0302 	and.w	r3, r3, #2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f002 fb16 	bl	800aef0 <HAL_SD_RxCpltCallback>
 80088c4:	e102      	b.n	8008acc <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f002 fb08 	bl	800aedc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80088cc:	e0fe      	b.n	8008acc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f000 80f9 	beq.w	8008acc <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	f003 0320 	and.w	r3, r3, #32
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d011      	beq.n	8008908 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 fe73 	bl	800a5d4 <SDMMC_CmdStopTransfer>
 80088ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d008      	beq.n	8008908 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f000 f8e6 	bl	8008ad4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	f040 80dc 	bne.w	8008acc <HAL_SD_IRQHandler+0x2e4>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	f040 80d6 	bne.w	8008acc <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f022 0208 	bic.w	r2, r2, #8
 800892e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f002 facf 	bl	800aedc <HAL_SD_TxCpltCallback>
}
 800893e:	e0c5      	b.n	8008acc <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800894a:	2b00      	cmp	r3, #0
 800894c:	d008      	beq.n	8008960 <HAL_SD_IRQHandler+0x178>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f003 0308 	and.w	r3, r3, #8
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 ff9b 	bl	8009894 <SD_Write_IT>
 800895e:	e0b5      	b.n	8008acc <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008966:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 80ae 	beq.w	8008acc <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008982:	f043 0202 	orr.w	r2, r3, #2
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008990:	f003 0308 	and.w	r3, r3, #8
 8008994:	2b00      	cmp	r3, #0
 8008996:	d005      	beq.n	80089a4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899c:	f043 0208 	orr.w	r2, r3, #8
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089aa:	f003 0320 	and.w	r3, r3, #32
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d005      	beq.n	80089be <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b6:	f043 0220 	orr.w	r2, r3, #32
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c4:	f003 0310 	and.w	r3, r3, #16
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	f043 0210 	orr.w	r2, r3, #16
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80089e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80089f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 fdec 	bl	800a5d4 <SDMMC_CmdStopTransfer>
 80089fc:	4602      	mov	r2, r0
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a02:	431a      	orrs	r2, r3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00a      	beq.n	8008a28 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f857 	bl	8008ad4 <HAL_SD_ErrorCallback>
}
 8008a26:	e051      	b.n	8008acc <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d04c      	beq.n	8008acc <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f003 0310 	and.w	r3, r3, #16
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d104      	bne.n	8008a46 <HAL_SD_IRQHandler+0x25e>
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f003 0320 	and.w	r3, r3, #32
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d011      	beq.n	8008a6a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a4a:	4a17      	ldr	r2, [pc, #92]	; (8008aa8 <HAL_SD_IRQHandler+0x2c0>)
 8008a4c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fc f8c0 	bl	8004bd8 <HAL_DMA_Abort_IT>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d036      	beq.n	8008acc <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a62:	4618      	mov	r0, r3
 8008a64:	f000 fb6a 	bl	800913c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008a68:	e030      	b.n	8008acc <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f003 0301 	and.w	r3, r3, #1
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d104      	bne.n	8008a7e <HAL_SD_IRQHandler+0x296>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d018      	beq.n	8008ab0 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	4a0a      	ldr	r2, [pc, #40]	; (8008aac <HAL_SD_IRQHandler+0x2c4>)
 8008a84:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fc f8a4 	bl	8004bd8 <HAL_DMA_Abort_IT>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d01a      	beq.n	8008acc <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fb85 	bl	80091aa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008aa0:	e014      	b.n	8008acc <HAL_SD_IRQHandler+0x2e4>
 8008aa2:	bf00      	nop
 8008aa4:	ffff3ec5 	.word	0xffff3ec5
 8008aa8:	0800913d 	.word	0x0800913d
 8008aac:	080091ab 	.word	0x080091ab
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f002 f9ff 	bl	800aec8 <HAL_SD_AbortCallback>
}
 8008aca:	e7ff      	b.n	8008acc <HAL_SD_IRQHandler+0x2e4>
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008af6:	0f9b      	lsrs	r3, r3, #30
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b02:	0e9b      	lsrs	r3, r3, #26
 8008b04:	b2db      	uxtb	r3, r3
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	b2da      	uxtb	r2, r3
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b14:	0e1b      	lsrs	r3, r3, #24
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	f003 0303 	and.w	r3, r3, #3
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b26:	0c1b      	lsrs	r3, r3, #16
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b48:	0d1b      	lsrs	r3, r3, #20
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b54:	0c1b      	lsrs	r3, r3, #16
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	f003 030f 	and.w	r3, r3, #15
 8008b5c:	b2da      	uxtb	r2, r3
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b66:	0bdb      	lsrs	r3, r3, #15
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b78:	0b9b      	lsrs	r3, r3, #14
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	f003 0301 	and.w	r3, r3, #1
 8008b80:	b2da      	uxtb	r2, r3
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b8a:	0b5b      	lsrs	r3, r3, #13
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	b2da      	uxtb	r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b9c:	0b1b      	lsrs	r3, r3, #12
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	2200      	movs	r2, #0
 8008bae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d163      	bne.n	8008c80 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bbc:	009a      	lsls	r2, r3, #2
 8008bbe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008bc8:	0f92      	lsrs	r2, r2, #30
 8008bca:	431a      	orrs	r2, r3
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd4:	0edb      	lsrs	r3, r3, #27
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	f003 0307 	and.w	r3, r3, #7
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008be6:	0e1b      	lsrs	r3, r3, #24
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 0307 	and.w	r3, r3, #7
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf8:	0d5b      	lsrs	r3, r3, #21
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c0a:	0c9b      	lsrs	r3, r3, #18
 8008c0c:	b2db      	uxtb	r3, r3
 8008c0e:	f003 0307 	and.w	r3, r3, #7
 8008c12:	b2da      	uxtb	r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c1c:	0bdb      	lsrs	r3, r3, #15
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	7e1b      	ldrb	r3, [r3, #24]
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	f003 0307 	and.w	r3, r3, #7
 8008c3e:	3302      	adds	r3, #2
 8008c40:	2201      	movs	r2, #1
 8008c42:	fa02 f303 	lsl.w	r3, r2, r3
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008c4a:	fb03 f202 	mul.w	r2, r3, r2
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	7a1b      	ldrb	r3, [r3, #8]
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	f003 030f 	and.w	r3, r3, #15
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	409a      	lsls	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008c6c:	0a52      	lsrs	r2, r2, #9
 8008c6e:	fb03 f202 	mul.w	r2, r3, r2
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c7c:	661a      	str	r2, [r3, #96]	; 0x60
 8008c7e:	e031      	b.n	8008ce4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d11d      	bne.n	8008cc4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c8c:	041b      	lsls	r3, r3, #16
 8008c8e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c96:	0c1b      	lsrs	r3, r3, #16
 8008c98:	431a      	orrs	r2, r3
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	029a      	lsls	r2, r3, #10
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cb8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	661a      	str	r2, [r3, #96]	; 0x60
 8008cc2:	e00f      	b.n	8008ce4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a58      	ldr	r2, [pc, #352]	; (8008e2c <HAL_SD_GetCardCSD+0x344>)
 8008cca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e09d      	b.n	8008e20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ce8:	0b9b      	lsrs	r3, r3, #14
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cfa:	09db      	lsrs	r3, r3, #7
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d1c:	0fdb      	lsrs	r3, r3, #31
 8008d1e:	b2da      	uxtb	r2, r3
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d28:	0f5b      	lsrs	r3, r3, #29
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	f003 0303 	and.w	r3, r3, #3
 8008d30:	b2da      	uxtb	r2, r3
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d3a:	0e9b      	lsrs	r3, r3, #26
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	f003 0307 	and.w	r3, r3, #7
 8008d42:	b2da      	uxtb	r2, r3
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4c:	0d9b      	lsrs	r3, r3, #22
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f003 030f 	and.w	r3, r3, #15
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5e:	0d5b      	lsrs	r3, r3, #21
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	f003 0301 	and.w	r3, r3, #1
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7a:	0c1b      	lsrs	r3, r3, #16
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	f003 0301 	and.w	r3, r3, #1
 8008d82:	b2da      	uxtb	r2, r3
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d8e:	0bdb      	lsrs	r3, r3, #15
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da2:	0b9b      	lsrs	r3, r3, #14
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db6:	0b5b      	lsrs	r3, r3, #13
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dca:	0b1b      	lsrs	r3, r3, #12
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dde:	0a9b      	lsrs	r3, r3, #10
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	f003 0303 	and.w	r3, r3, #3
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df2:	0a1b      	lsrs	r3, r3, #8
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	f003 0303 	and.w	r3, r3, #3
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e06:	085b      	lsrs	r3, r3, #1
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	004005ff 	.word	0x004005ff

08008e30 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008e88:	b5b0      	push	{r4, r5, r7, lr}
 8008e8a:	b08e      	sub	sp, #56	; 0x38
 8008e8c:	af04      	add	r7, sp, #16
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008e92:	2300      	movs	r3, #0
 8008e94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2203      	movs	r2, #3
 8008e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d02e      	beq.n	8008f06 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eae:	d106      	bne.n	8008ebe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	639a      	str	r2, [r3, #56]	; 0x38
 8008ebc:	e029      	b.n	8008f12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ec4:	d10a      	bne.n	8008edc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fb2a 	bl	8009520 <SD_WideBus_Enable>
 8008ecc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ed2:	6a3b      	ldr	r3, [r7, #32]
 8008ed4:	431a      	orrs	r2, r3
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8008eda:	e01a      	b.n	8008f12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10a      	bne.n	8008ef8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fb67 	bl	80095b6 <SD_WideBus_Disable>
 8008ee8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008eee:	6a3b      	ldr	r3, [r7, #32]
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38
 8008ef6:	e00c      	b.n	8008f12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	639a      	str	r2, [r3, #56]	; 0x38
 8008f04:	e005      	b.n	8008f12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00b      	beq.n	8008f32 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a26      	ldr	r2, [pc, #152]	; (8008fb8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008f20:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008f30:	e01f      	b.n	8008f72 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	699b      	ldr	r3, [r3, #24]
 8008f52:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681d      	ldr	r5, [r3, #0]
 8008f58:	466c      	mov	r4, sp
 8008f5a:	f107 0314 	add.w	r3, r7, #20
 8008f5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008f62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f001 f9ab 	bl	800a2c8 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f001 fa80 	bl	800a480 <SDMMC_CmdBlockLength>
 8008f80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00c      	beq.n	8008fa2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a0a      	ldr	r2, [pc, #40]	; (8008fb8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8008f8e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f94:	6a3b      	ldr	r3, [r7, #32]
 8008f96:	431a      	orrs	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008faa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3728      	adds	r7, #40	; 0x28
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	004005ff 	.word	0x004005ff

08008fbc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008fc8:	f107 030c 	add.w	r3, r7, #12
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 fa7e 	bl	80094d0 <SD_SendStatus>
 8008fd4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d005      	beq.n	8008fe8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	431a      	orrs	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	0a5b      	lsrs	r3, r3, #9
 8008fec:	f003 030f 	and.w	r3, r3, #15
 8008ff0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008ff2:	693b      	ldr	r3, [r7, #16]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009008:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009018:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800901a:	bf00      	nop
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009038:	2b82      	cmp	r3, #130	; 0x82
 800903a:	d111      	bne.n	8009060 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4618      	mov	r0, r3
 8009042:	f001 fac7 	bl	800a5d4 <SDMMC_CmdStopTransfer>
 8009046:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d008      	beq.n	8009060 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	431a      	orrs	r2, r3
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f7ff fd3a 	bl	8008ad4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0208 	bic.w	r2, r2, #8
 800906e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f240 523a 	movw	r2, #1338	; 0x53a
 8009078:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2201      	movs	r2, #1
 800907e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2200      	movs	r2, #0
 8009086:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	f001 ff31 	bl	800aef0 <HAL_SD_RxCpltCallback>
#endif
}
 800908e:	bf00      	nop
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
	...

08009098 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f7fb ff42 	bl	8004f30 <HAL_DMA_GetError>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b02      	cmp	r3, #2
 80090b0:	d03e      	beq.n	8009130 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d002      	beq.n	80090ce <SD_DMAError+0x36>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d12d      	bne.n	800912a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a19      	ldr	r2, [pc, #100]	; (8009138 <SD_DMAError+0xa0>)
 80090d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80090e4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80090f2:	6978      	ldr	r0, [r7, #20]
 80090f4:	f7ff ff62 	bl	8008fbc <HAL_SD_GetCardState>
 80090f8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	2b06      	cmp	r3, #6
 80090fe:	d002      	beq.n	8009106 <SD_DMAError+0x6e>
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b05      	cmp	r3, #5
 8009104:	d10a      	bne.n	800911c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4618      	mov	r0, r3
 800910c:	f001 fa62 	bl	800a5d4 <SDMMC_CmdStopTransfer>
 8009110:	4602      	mov	r2, r0
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009116:	431a      	orrs	r2, r3
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	2200      	movs	r2, #0
 8009128:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800912a:	6978      	ldr	r0, [r7, #20]
 800912c:	f7ff fcd2 	bl	8008ad4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009130:	bf00      	nop
 8009132:	3718      	adds	r7, #24
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}
 8009138:	004005ff 	.word	0x004005ff

0800913c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009148:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009152:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff ff31 	bl	8008fbc <HAL_SD_GetCardState>
 800915a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b06      	cmp	r3, #6
 800916e:	d002      	beq.n	8009176 <SD_DMATxAbort+0x3a>
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b05      	cmp	r3, #5
 8009174:	d10a      	bne.n	800918c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4618      	mov	r0, r3
 800917c:	f001 fa2a 	bl	800a5d4 <SDMMC_CmdStopTransfer>
 8009180:	4602      	mov	r2, r0
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009186:	431a      	orrs	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f001 fe97 	bl	800aec8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800919a:	e002      	b.n	80091a2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f7ff fc99 	bl	8008ad4 <HAL_SD_ErrorCallback>
}
 80091a2:	bf00      	nop
 80091a4:	3710      	adds	r7, #16
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}

080091aa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f240 523a 	movw	r2, #1338	; 0x53a
 80091c0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f7ff fefa 	bl	8008fbc <HAL_SD_GetCardState>
 80091c8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2200      	movs	r2, #0
 80091d6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2b06      	cmp	r3, #6
 80091dc:	d002      	beq.n	80091e4 <SD_DMARxAbort+0x3a>
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	2b05      	cmp	r3, #5
 80091e2:	d10a      	bne.n	80091fa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f001 f9f3 	bl	800a5d4 <SDMMC_CmdStopTransfer>
 80091ee:	4602      	mov	r2, r0
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f4:	431a      	orrs	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d103      	bne.n	800920a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f001 fe60 	bl	800aec8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009208:	e002      	b.n	8009210 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f7ff fc62 	bl	8008ad4 <HAL_SD_ErrorCallback>
}
 8009210:	bf00      	nop
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009218:	b5b0      	push	{r4, r5, r7, lr}
 800921a:	b094      	sub	sp, #80	; 0x50
 800921c:	af04      	add	r7, sp, #16
 800921e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009220:	2301      	movs	r3, #1
 8009222:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4618      	mov	r0, r3
 800922a:	f001 f8a5 	bl	800a378 <SDMMC_GetPowerState>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d102      	bne.n	800923a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009234:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009238:	e0b8      	b.n	80093ac <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923e:	2b03      	cmp	r3, #3
 8009240:	d02f      	beq.n	80092a2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4618      	mov	r0, r3
 8009248:	f001 facf 	bl	800a7ea <SDMMC_CmdSendCID>
 800924c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800924e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <SD_InitCard+0x40>
    {
      return errorstate;
 8009254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009256:	e0a9      	b.n	80093ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2100      	movs	r1, #0
 800925e:	4618      	mov	r0, r3
 8009260:	f001 f8cf 	bl	800a402 <SDMMC_GetResponse>
 8009264:	4602      	mov	r2, r0
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2104      	movs	r1, #4
 8009270:	4618      	mov	r0, r3
 8009272:	f001 f8c6 	bl	800a402 <SDMMC_GetResponse>
 8009276:	4602      	mov	r2, r0
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2108      	movs	r1, #8
 8009282:	4618      	mov	r0, r3
 8009284:	f001 f8bd 	bl	800a402 <SDMMC_GetResponse>
 8009288:	4602      	mov	r2, r0
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	210c      	movs	r1, #12
 8009294:	4618      	mov	r0, r3
 8009296:	f001 f8b4 	bl	800a402 <SDMMC_GetResponse>
 800929a:	4602      	mov	r2, r0
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d00d      	beq.n	80092c6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f107 020e 	add.w	r2, r7, #14
 80092b2:	4611      	mov	r1, r2
 80092b4:	4618      	mov	r0, r3
 80092b6:	f001 fad5 	bl	800a864 <SDMMC_CmdSetRelAdd>
 80092ba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80092bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <SD_InitCard+0xae>
    {
      return errorstate;
 80092c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c4:	e072      	b.n	80093ac <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ca:	2b03      	cmp	r3, #3
 80092cc:	d036      	beq.n	800933c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80092ce:	89fb      	ldrh	r3, [r7, #14]
 80092d0:	461a      	mov	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092de:	041b      	lsls	r3, r3, #16
 80092e0:	4619      	mov	r1, r3
 80092e2:	4610      	mov	r0, r2
 80092e4:	f001 fa9f 	bl	800a826 <SDMMC_CmdSendCSD>
 80092e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80092ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80092f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092f2:	e05b      	b.n	80093ac <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2100      	movs	r1, #0
 80092fa:	4618      	mov	r0, r3
 80092fc:	f001 f881 	bl	800a402 <SDMMC_GetResponse>
 8009300:	4602      	mov	r2, r0
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2104      	movs	r1, #4
 800930c:	4618      	mov	r0, r3
 800930e:	f001 f878 	bl	800a402 <SDMMC_GetResponse>
 8009312:	4602      	mov	r2, r0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2108      	movs	r1, #8
 800931e:	4618      	mov	r0, r3
 8009320:	f001 f86f 	bl	800a402 <SDMMC_GetResponse>
 8009324:	4602      	mov	r2, r0
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	210c      	movs	r1, #12
 8009330:	4618      	mov	r0, r3
 8009332:	f001 f866 	bl	800a402 <SDMMC_GetResponse>
 8009336:	4602      	mov	r2, r0
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2104      	movs	r1, #4
 8009342:	4618      	mov	r0, r3
 8009344:	f001 f85d 	bl	800a402 <SDMMC_GetResponse>
 8009348:	4603      	mov	r3, r0
 800934a:	0d1a      	lsrs	r2, r3, #20
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009350:	f107 0310 	add.w	r3, r7, #16
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff fbc6 	bl	8008ae8 <HAL_SD_GetCardCSD>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d002      	beq.n	8009368 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009362:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009366:	e021      	b.n	80093ac <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6819      	ldr	r1, [r3, #0]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009370:	041b      	lsls	r3, r3, #16
 8009372:	2200      	movs	r2, #0
 8009374:	461c      	mov	r4, r3
 8009376:	4615      	mov	r5, r2
 8009378:	4622      	mov	r2, r4
 800937a:	462b      	mov	r3, r5
 800937c:	4608      	mov	r0, r1
 800937e:	f001 f94b 	bl	800a618 <SDMMC_CmdSelDesel>
 8009382:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009386:	2b00      	cmp	r3, #0
 8009388:	d001      	beq.n	800938e <SD_InitCard+0x176>
  {
    return errorstate;
 800938a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938c:	e00e      	b.n	80093ac <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681d      	ldr	r5, [r3, #0]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	466c      	mov	r4, sp
 8009396:	f103 0210 	add.w	r2, r3, #16
 800939a:	ca07      	ldmia	r2, {r0, r1, r2}
 800939c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093a0:	3304      	adds	r3, #4
 80093a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093a4:	4628      	mov	r0, r5
 80093a6:	f000 ff8f 	bl	800a2c8 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3740      	adds	r7, #64	; 0x40
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bdb0      	pop	{r4, r5, r7, pc}

080093b4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b086      	sub	sp, #24
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093bc:	2300      	movs	r3, #0
 80093be:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	2300      	movs	r3, #0
 80093c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4618      	mov	r0, r3
 80093ce:	f001 f946 	bl	800a65e <SDMMC_CmdGoIdleState>
 80093d2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d001      	beq.n	80093de <SD_PowerON+0x2a>
  {
    return errorstate;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	e072      	b.n	80094c4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 f959 	bl	800a69a <SDMMC_CmdOperCond>
 80093e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00d      	beq.n	800940c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 f92f 	bl	800a65e <SDMMC_CmdGoIdleState>
 8009400:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d004      	beq.n	8009412 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	e05b      	b.n	80094c4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009416:	2b01      	cmp	r3, #1
 8009418:	d137      	bne.n	800948a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2100      	movs	r1, #0
 8009420:	4618      	mov	r0, r3
 8009422:	f001 f959 	bl	800a6d8 <SDMMC_CmdAppCommand>
 8009426:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d02d      	beq.n	800948a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800942e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009432:	e047      	b.n	80094c4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	2100      	movs	r1, #0
 800943a:	4618      	mov	r0, r3
 800943c:	f001 f94c 	bl	800a6d8 <SDMMC_CmdAppCommand>
 8009440:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d001      	beq.n	800944c <SD_PowerON+0x98>
    {
      return errorstate;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	e03b      	b.n	80094c4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	491e      	ldr	r1, [pc, #120]	; (80094cc <SD_PowerON+0x118>)
 8009452:	4618      	mov	r0, r3
 8009454:	f001 f962 	bl	800a71c <SDMMC_CmdAppOperCommand>
 8009458:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009460:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009464:	e02e      	b.n	80094c4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2100      	movs	r1, #0
 800946c:	4618      	mov	r0, r3
 800946e:	f000 ffc8 	bl	800a402 <SDMMC_GetResponse>
 8009472:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	0fdb      	lsrs	r3, r3, #31
 8009478:	2b01      	cmp	r3, #1
 800947a:	d101      	bne.n	8009480 <SD_PowerON+0xcc>
 800947c:	2301      	movs	r3, #1
 800947e:	e000      	b.n	8009482 <SD_PowerON+0xce>
 8009480:	2300      	movs	r3, #0
 8009482:	613b      	str	r3, [r7, #16]

    count++;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	3301      	adds	r3, #1
 8009488:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009490:	4293      	cmp	r3, r2
 8009492:	d802      	bhi.n	800949a <SD_PowerON+0xe6>
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0cc      	beq.n	8009434 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d902      	bls.n	80094aa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80094a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094a8:	e00c      	b.n	80094c4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d003      	beq.n	80094bc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2201      	movs	r2, #1
 80094b8:	645a      	str	r2, [r3, #68]	; 0x44
 80094ba:	e002      	b.n	80094c2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3718      	adds	r7, #24
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	c1100000 	.word	0xc1100000

080094d0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d102      	bne.n	80094e6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80094e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80094e4:	e018      	b.n	8009518 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ee:	041b      	lsls	r3, r3, #16
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f001 f9d7 	bl	800a8a6 <SDMMC_CmdSendStatus>
 80094f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	e009      	b.n	8009518 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	2100      	movs	r1, #0
 800950a:	4618      	mov	r0, r3
 800950c:	f000 ff79 	bl	800a402 <SDMMC_GetResponse>
 8009510:	4602      	mov	r2, r0
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009528:	2300      	movs	r3, #0
 800952a:	60fb      	str	r3, [r7, #12]
 800952c:	2300      	movs	r3, #0
 800952e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2100      	movs	r1, #0
 8009536:	4618      	mov	r0, r3
 8009538:	f000 ff63 	bl	800a402 <SDMMC_GetResponse>
 800953c:	4603      	mov	r3, r0
 800953e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009546:	d102      	bne.n	800954e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009548:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800954c:	e02f      	b.n	80095ae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800954e:	f107 030c 	add.w	r3, r7, #12
 8009552:	4619      	mov	r1, r3
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f879 	bl	800964c <SD_FindSCR>
 800955a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d001      	beq.n	8009566 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	e023      	b.n	80095ae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01c      	beq.n	80095aa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009578:	041b      	lsls	r3, r3, #16
 800957a:	4619      	mov	r1, r3
 800957c:	4610      	mov	r0, r2
 800957e:	f001 f8ab 	bl	800a6d8 <SDMMC_CmdAppCommand>
 8009582:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	e00f      	b.n	80095ae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2102      	movs	r1, #2
 8009594:	4618      	mov	r0, r3
 8009596:	f001 f8e5 	bl	800a764 <SDMMC_CmdBusWidth>
 800959a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	e003      	b.n	80095ae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	e001      	b.n	80095ae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095aa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3718      	adds	r7, #24
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b086      	sub	sp, #24
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	2300      	movs	r3, #0
 80095c4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2100      	movs	r1, #0
 80095cc:	4618      	mov	r0, r3
 80095ce:	f000 ff18 	bl	800a402 <SDMMC_GetResponse>
 80095d2:	4603      	mov	r3, r0
 80095d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095dc:	d102      	bne.n	80095e4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80095de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095e2:	e02f      	b.n	8009644 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80095e4:	f107 030c 	add.w	r3, r7, #12
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f82e 	bl	800964c <SD_FindSCR>
 80095f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	e023      	b.n	8009644 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d01c      	beq.n	8009640 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800960e:	041b      	lsls	r3, r3, #16
 8009610:	4619      	mov	r1, r3
 8009612:	4610      	mov	r0, r2
 8009614:	f001 f860 	bl	800a6d8 <SDMMC_CmdAppCommand>
 8009618:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d001      	beq.n	8009624 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	e00f      	b.n	8009644 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	2100      	movs	r1, #0
 800962a:	4618      	mov	r0, r3
 800962c:	f001 f89a 	bl	800a764 <SDMMC_CmdBusWidth>
 8009630:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d001      	beq.n	800963c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	e003      	b.n	8009644 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800963c:	2300      	movs	r3, #0
 800963e:	e001      	b.n	8009644 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009640:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009644:	4618      	mov	r0, r3
 8009646:	3718      	adds	r7, #24
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800964c:	b590      	push	{r4, r7, lr}
 800964e:	b08f      	sub	sp, #60	; 0x3c
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009656:	f7fa f9c9 	bl	80039ec <HAL_GetTick>
 800965a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800965c:	2300      	movs	r3, #0
 800965e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009660:	2300      	movs	r3, #0
 8009662:	60bb      	str	r3, [r7, #8]
 8009664:	2300      	movs	r3, #0
 8009666:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2108      	movs	r1, #8
 8009672:	4618      	mov	r0, r3
 8009674:	f000 ff04 	bl	800a480 <SDMMC_CmdBlockLength>
 8009678:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009682:	e0b2      	b.n	80097ea <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800968c:	041b      	lsls	r3, r3, #16
 800968e:	4619      	mov	r1, r3
 8009690:	4610      	mov	r0, r2
 8009692:	f001 f821 	bl	800a6d8 <SDMMC_CmdAppCommand>
 8009696:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800969e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a0:	e0a3      	b.n	80097ea <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80096a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80096a6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80096a8:	2308      	movs	r3, #8
 80096aa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80096ac:	2330      	movs	r3, #48	; 0x30
 80096ae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80096b0:	2302      	movs	r3, #2
 80096b2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80096b8:	2301      	movs	r3, #1
 80096ba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f107 0210 	add.w	r2, r7, #16
 80096c4:	4611      	mov	r1, r2
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 feae 	bl	800a428 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f001 f869 	bl	800a7a8 <SDMMC_CmdSendSCR>
 80096d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80096d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d02a      	beq.n	8009734 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	e083      	b.n	80097ea <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00f      	beq.n	8009710 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6819      	ldr	r1, [r3, #0]
 80096f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	f107 0208 	add.w	r2, r7, #8
 80096fc:	18d4      	adds	r4, r2, r3
 80096fe:	4608      	mov	r0, r1
 8009700:	f000 fe0e 	bl	800a320 <SDMMC_ReadFIFO>
 8009704:	4603      	mov	r3, r0
 8009706:	6023      	str	r3, [r4, #0]
      index++;
 8009708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800970a:	3301      	adds	r3, #1
 800970c:	637b      	str	r3, [r7, #52]	; 0x34
 800970e:	e006      	b.n	800971e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009716:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d012      	beq.n	8009744 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800971e:	f7fa f965 	bl	80039ec <HAL_GetTick>
 8009722:	4602      	mov	r2, r0
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800972c:	d102      	bne.n	8009734 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800972e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009732:	e05a      	b.n	80097ea <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800973a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800973e:	2b00      	cmp	r3, #0
 8009740:	d0cf      	beq.n	80096e2 <SD_FindSCR+0x96>
 8009742:	e000      	b.n	8009746 <SD_FindSCR+0xfa>
      break;
 8009744:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974c:	f003 0308 	and.w	r3, r3, #8
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	2208      	movs	r2, #8
 800975a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800975c:	2308      	movs	r3, #8
 800975e:	e044      	b.n	80097ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d005      	beq.n	800977a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2202      	movs	r2, #2
 8009774:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009776:	2302      	movs	r3, #2
 8009778:	e037      	b.n	80097ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	2b00      	cmp	r3, #0
 8009786:	d005      	beq.n	8009794 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2220      	movs	r2, #32
 800978e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009790:	2320      	movs	r3, #32
 8009792:	e02a      	b.n	80097ea <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f240 523a 	movw	r2, #1338	; 0x53a
 800979c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	061a      	lsls	r2, r3, #24
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	021b      	lsls	r3, r3, #8
 80097a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	0a1b      	lsrs	r3, r3, #8
 80097b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80097b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	0e1b      	lsrs	r3, r3, #24
 80097ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80097bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097be:	601a      	str	r2, [r3, #0]
    scr++;
 80097c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c2:	3304      	adds	r3, #4
 80097c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	061a      	lsls	r2, r3, #24
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	021b      	lsls	r3, r3, #8
 80097ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	0a1b      	lsrs	r3, r3, #8
 80097d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80097dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	0e1b      	lsrs	r3, r3, #24
 80097e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80097e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	373c      	adds	r7, #60	; 0x3c
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd90      	pop	{r4, r7, pc}

080097f2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b086      	sub	sp, #24
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097fe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009804:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d03f      	beq.n	800988c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800980c:	2300      	movs	r3, #0
 800980e:	617b      	str	r3, [r7, #20]
 8009810:	e033      	b.n	800987a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4618      	mov	r0, r3
 8009818:	f000 fd82 	bl	800a320 <SDMMC_ReadFIFO>
 800981c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	b2da      	uxtb	r2, r3
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	3b01      	subs	r3, #1
 8009830:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	0a1b      	lsrs	r3, r3, #8
 8009836:	b2da      	uxtb	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	3301      	adds	r3, #1
 8009840:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	3b01      	subs	r3, #1
 8009846:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	0c1b      	lsrs	r3, r3, #16
 800984c:	b2da      	uxtb	r2, r3
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3301      	adds	r3, #1
 8009856:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	3b01      	subs	r3, #1
 800985c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	0e1b      	lsrs	r3, r3, #24
 8009862:	b2da      	uxtb	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	3301      	adds	r3, #1
 800986c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	3b01      	subs	r3, #1
 8009872:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	3301      	adds	r3, #1
 8009878:	617b      	str	r3, [r7, #20]
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b07      	cmp	r3, #7
 800987e:	d9c8      	bls.n	8009812 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	693a      	ldr	r2, [r7, #16]
 800988a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800988c:	bf00      	nop
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a1b      	ldr	r3, [r3, #32]
 80098a0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d043      	beq.n	8009936 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80098ae:	2300      	movs	r3, #0
 80098b0:	617b      	str	r3, [r7, #20]
 80098b2:	e037      	b.n	8009924 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3301      	adds	r3, #1
 80098be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	3b01      	subs	r3, #1
 80098c4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	021a      	lsls	r2, r3, #8
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	3301      	adds	r3, #1
 80098d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	3b01      	subs	r3, #1
 80098dc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	041a      	lsls	r2, r3, #16
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	4313      	orrs	r3, r2
 80098e8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3301      	adds	r3, #1
 80098ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	3b01      	subs	r3, #1
 80098f4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	061a      	lsls	r2, r3, #24
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3301      	adds	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	3b01      	subs	r3, #1
 800990c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f107 0208 	add.w	r2, r7, #8
 8009916:	4611      	mov	r1, r2
 8009918:	4618      	mov	r0, r3
 800991a:	f000 fd0e 	bl	800a33a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	3301      	adds	r3, #1
 8009922:	617b      	str	r3, [r7, #20]
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2b07      	cmp	r3, #7
 8009928:	d9c4      	bls.n	80098b4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	693a      	ldr	r2, [r7, #16]
 8009934:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009936:	bf00      	nop
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d101      	bne.n	8009952 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e04c      	b.n	80099ec <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009958:	b2db      	uxtb	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d106      	bne.n	800996c <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7f8 f8c4 	bl	8001af4 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 0203 	bic.w	r2, r2, #3
 8009982:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 800998c:	68fa      	ldr	r2, [r7, #12]
 800998e:	4b19      	ldr	r3, [pc, #100]	; (80099f4 <HAL_SPDIFRX_Init+0xb4>)
 8009990:	4013      	ands	r3, r2
 8009992:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 800999c:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 80099a2:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 80099a8:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 80099ae:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 80099b4:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 80099ba:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 80099c0:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 80099c6:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 80099cc:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	60fb      	str	r3, [r7, #12]
            );


  hspdif->Instance->CR = tmpreg;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3710      	adds	r7, #16
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	fff88407 	.word	0xfff88407

080099f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e040      	b.n	8009a8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d106      	bne.n	8009a20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f7f8 f8d0 	bl	8001bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2224      	movs	r2, #36	; 0x24
 8009a24:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f022 0201 	bic.w	r2, r2, #1
 8009a34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f82c 	bl	8009a94 <UART_SetConfig>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d101      	bne.n	8009a46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e022      	b.n	8009a8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d002      	beq.n	8009a54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fa84 	bl	8009f5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689a      	ldr	r2, [r3, #8]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f042 0201 	orr.w	r2, r2, #1
 8009a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fb0b 	bl	800a0a0 <UART_CheckIdleState>
 8009a8a:	4603      	mov	r3, r0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b088      	sub	sp, #32
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	691b      	ldr	r3, [r3, #16]
 8009aa8:	431a      	orrs	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	695b      	ldr	r3, [r3, #20]
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	69db      	ldr	r3, [r3, #28]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	4ba6      	ldr	r3, [pc, #664]	; (8009d58 <UART_SetConfig+0x2c4>)
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	6812      	ldr	r2, [r2, #0]
 8009ac6:	6979      	ldr	r1, [r7, #20]
 8009ac8:	430b      	orrs	r3, r1
 8009aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	68da      	ldr	r2, [r3, #12]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a1b      	ldr	r3, [r3, #32]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a94      	ldr	r2, [pc, #592]	; (8009d5c <UART_SetConfig+0x2c8>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d120      	bne.n	8009b52 <UART_SetConfig+0xbe>
 8009b10:	4b93      	ldr	r3, [pc, #588]	; (8009d60 <UART_SetConfig+0x2cc>)
 8009b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b16:	f003 0303 	and.w	r3, r3, #3
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d816      	bhi.n	8009b4c <UART_SetConfig+0xb8>
 8009b1e:	a201      	add	r2, pc, #4	; (adr r2, 8009b24 <UART_SetConfig+0x90>)
 8009b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b24:	08009b35 	.word	0x08009b35
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b3b 	.word	0x08009b3b
 8009b30:	08009b47 	.word	0x08009b47
 8009b34:	2301      	movs	r3, #1
 8009b36:	77fb      	strb	r3, [r7, #31]
 8009b38:	e150      	b.n	8009ddc <UART_SetConfig+0x348>
 8009b3a:	2302      	movs	r3, #2
 8009b3c:	77fb      	strb	r3, [r7, #31]
 8009b3e:	e14d      	b.n	8009ddc <UART_SetConfig+0x348>
 8009b40:	2304      	movs	r3, #4
 8009b42:	77fb      	strb	r3, [r7, #31]
 8009b44:	e14a      	b.n	8009ddc <UART_SetConfig+0x348>
 8009b46:	2308      	movs	r3, #8
 8009b48:	77fb      	strb	r3, [r7, #31]
 8009b4a:	e147      	b.n	8009ddc <UART_SetConfig+0x348>
 8009b4c:	2310      	movs	r3, #16
 8009b4e:	77fb      	strb	r3, [r7, #31]
 8009b50:	e144      	b.n	8009ddc <UART_SetConfig+0x348>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a83      	ldr	r2, [pc, #524]	; (8009d64 <UART_SetConfig+0x2d0>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d132      	bne.n	8009bc2 <UART_SetConfig+0x12e>
 8009b5c:	4b80      	ldr	r3, [pc, #512]	; (8009d60 <UART_SetConfig+0x2cc>)
 8009b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b62:	f003 030c 	and.w	r3, r3, #12
 8009b66:	2b0c      	cmp	r3, #12
 8009b68:	d828      	bhi.n	8009bbc <UART_SetConfig+0x128>
 8009b6a:	a201      	add	r2, pc, #4	; (adr r2, 8009b70 <UART_SetConfig+0xdc>)
 8009b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b70:	08009ba5 	.word	0x08009ba5
 8009b74:	08009bbd 	.word	0x08009bbd
 8009b78:	08009bbd 	.word	0x08009bbd
 8009b7c:	08009bbd 	.word	0x08009bbd
 8009b80:	08009bb1 	.word	0x08009bb1
 8009b84:	08009bbd 	.word	0x08009bbd
 8009b88:	08009bbd 	.word	0x08009bbd
 8009b8c:	08009bbd 	.word	0x08009bbd
 8009b90:	08009bab 	.word	0x08009bab
 8009b94:	08009bbd 	.word	0x08009bbd
 8009b98:	08009bbd 	.word	0x08009bbd
 8009b9c:	08009bbd 	.word	0x08009bbd
 8009ba0:	08009bb7 	.word	0x08009bb7
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	77fb      	strb	r3, [r7, #31]
 8009ba8:	e118      	b.n	8009ddc <UART_SetConfig+0x348>
 8009baa:	2302      	movs	r3, #2
 8009bac:	77fb      	strb	r3, [r7, #31]
 8009bae:	e115      	b.n	8009ddc <UART_SetConfig+0x348>
 8009bb0:	2304      	movs	r3, #4
 8009bb2:	77fb      	strb	r3, [r7, #31]
 8009bb4:	e112      	b.n	8009ddc <UART_SetConfig+0x348>
 8009bb6:	2308      	movs	r3, #8
 8009bb8:	77fb      	strb	r3, [r7, #31]
 8009bba:	e10f      	b.n	8009ddc <UART_SetConfig+0x348>
 8009bbc:	2310      	movs	r3, #16
 8009bbe:	77fb      	strb	r3, [r7, #31]
 8009bc0:	e10c      	b.n	8009ddc <UART_SetConfig+0x348>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a68      	ldr	r2, [pc, #416]	; (8009d68 <UART_SetConfig+0x2d4>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d120      	bne.n	8009c0e <UART_SetConfig+0x17a>
 8009bcc:	4b64      	ldr	r3, [pc, #400]	; (8009d60 <UART_SetConfig+0x2cc>)
 8009bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bd2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009bd6:	2b30      	cmp	r3, #48	; 0x30
 8009bd8:	d013      	beq.n	8009c02 <UART_SetConfig+0x16e>
 8009bda:	2b30      	cmp	r3, #48	; 0x30
 8009bdc:	d814      	bhi.n	8009c08 <UART_SetConfig+0x174>
 8009bde:	2b20      	cmp	r3, #32
 8009be0:	d009      	beq.n	8009bf6 <UART_SetConfig+0x162>
 8009be2:	2b20      	cmp	r3, #32
 8009be4:	d810      	bhi.n	8009c08 <UART_SetConfig+0x174>
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d002      	beq.n	8009bf0 <UART_SetConfig+0x15c>
 8009bea:	2b10      	cmp	r3, #16
 8009bec:	d006      	beq.n	8009bfc <UART_SetConfig+0x168>
 8009bee:	e00b      	b.n	8009c08 <UART_SetConfig+0x174>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	77fb      	strb	r3, [r7, #31]
 8009bf4:	e0f2      	b.n	8009ddc <UART_SetConfig+0x348>
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	77fb      	strb	r3, [r7, #31]
 8009bfa:	e0ef      	b.n	8009ddc <UART_SetConfig+0x348>
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	77fb      	strb	r3, [r7, #31]
 8009c00:	e0ec      	b.n	8009ddc <UART_SetConfig+0x348>
 8009c02:	2308      	movs	r3, #8
 8009c04:	77fb      	strb	r3, [r7, #31]
 8009c06:	e0e9      	b.n	8009ddc <UART_SetConfig+0x348>
 8009c08:	2310      	movs	r3, #16
 8009c0a:	77fb      	strb	r3, [r7, #31]
 8009c0c:	e0e6      	b.n	8009ddc <UART_SetConfig+0x348>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a56      	ldr	r2, [pc, #344]	; (8009d6c <UART_SetConfig+0x2d8>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d120      	bne.n	8009c5a <UART_SetConfig+0x1c6>
 8009c18:	4b51      	ldr	r3, [pc, #324]	; (8009d60 <UART_SetConfig+0x2cc>)
 8009c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009c22:	2bc0      	cmp	r3, #192	; 0xc0
 8009c24:	d013      	beq.n	8009c4e <UART_SetConfig+0x1ba>
 8009c26:	2bc0      	cmp	r3, #192	; 0xc0
 8009c28:	d814      	bhi.n	8009c54 <UART_SetConfig+0x1c0>
 8009c2a:	2b80      	cmp	r3, #128	; 0x80
 8009c2c:	d009      	beq.n	8009c42 <UART_SetConfig+0x1ae>
 8009c2e:	2b80      	cmp	r3, #128	; 0x80
 8009c30:	d810      	bhi.n	8009c54 <UART_SetConfig+0x1c0>
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <UART_SetConfig+0x1a8>
 8009c36:	2b40      	cmp	r3, #64	; 0x40
 8009c38:	d006      	beq.n	8009c48 <UART_SetConfig+0x1b4>
 8009c3a:	e00b      	b.n	8009c54 <UART_SetConfig+0x1c0>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	77fb      	strb	r3, [r7, #31]
 8009c40:	e0cc      	b.n	8009ddc <UART_SetConfig+0x348>
 8009c42:	2302      	movs	r3, #2
 8009c44:	77fb      	strb	r3, [r7, #31]
 8009c46:	e0c9      	b.n	8009ddc <UART_SetConfig+0x348>
 8009c48:	2304      	movs	r3, #4
 8009c4a:	77fb      	strb	r3, [r7, #31]
 8009c4c:	e0c6      	b.n	8009ddc <UART_SetConfig+0x348>
 8009c4e:	2308      	movs	r3, #8
 8009c50:	77fb      	strb	r3, [r7, #31]
 8009c52:	e0c3      	b.n	8009ddc <UART_SetConfig+0x348>
 8009c54:	2310      	movs	r3, #16
 8009c56:	77fb      	strb	r3, [r7, #31]
 8009c58:	e0c0      	b.n	8009ddc <UART_SetConfig+0x348>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4a44      	ldr	r2, [pc, #272]	; (8009d70 <UART_SetConfig+0x2dc>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d125      	bne.n	8009cb0 <UART_SetConfig+0x21c>
 8009c64:	4b3e      	ldr	r3, [pc, #248]	; (8009d60 <UART_SetConfig+0x2cc>)
 8009c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c72:	d017      	beq.n	8009ca4 <UART_SetConfig+0x210>
 8009c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c78:	d817      	bhi.n	8009caa <UART_SetConfig+0x216>
 8009c7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c7e:	d00b      	beq.n	8009c98 <UART_SetConfig+0x204>
 8009c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c84:	d811      	bhi.n	8009caa <UART_SetConfig+0x216>
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <UART_SetConfig+0x1fe>
 8009c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c8e:	d006      	beq.n	8009c9e <UART_SetConfig+0x20a>
 8009c90:	e00b      	b.n	8009caa <UART_SetConfig+0x216>
 8009c92:	2300      	movs	r3, #0
 8009c94:	77fb      	strb	r3, [r7, #31]
 8009c96:	e0a1      	b.n	8009ddc <UART_SetConfig+0x348>
 8009c98:	2302      	movs	r3, #2
 8009c9a:	77fb      	strb	r3, [r7, #31]
 8009c9c:	e09e      	b.n	8009ddc <UART_SetConfig+0x348>
 8009c9e:	2304      	movs	r3, #4
 8009ca0:	77fb      	strb	r3, [r7, #31]
 8009ca2:	e09b      	b.n	8009ddc <UART_SetConfig+0x348>
 8009ca4:	2308      	movs	r3, #8
 8009ca6:	77fb      	strb	r3, [r7, #31]
 8009ca8:	e098      	b.n	8009ddc <UART_SetConfig+0x348>
 8009caa:	2310      	movs	r3, #16
 8009cac:	77fb      	strb	r3, [r7, #31]
 8009cae:	e095      	b.n	8009ddc <UART_SetConfig+0x348>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a2f      	ldr	r2, [pc, #188]	; (8009d74 <UART_SetConfig+0x2e0>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d125      	bne.n	8009d06 <UART_SetConfig+0x272>
 8009cba:	4b29      	ldr	r3, [pc, #164]	; (8009d60 <UART_SetConfig+0x2cc>)
 8009cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cc8:	d017      	beq.n	8009cfa <UART_SetConfig+0x266>
 8009cca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009cce:	d817      	bhi.n	8009d00 <UART_SetConfig+0x26c>
 8009cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cd4:	d00b      	beq.n	8009cee <UART_SetConfig+0x25a>
 8009cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cda:	d811      	bhi.n	8009d00 <UART_SetConfig+0x26c>
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d003      	beq.n	8009ce8 <UART_SetConfig+0x254>
 8009ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ce4:	d006      	beq.n	8009cf4 <UART_SetConfig+0x260>
 8009ce6:	e00b      	b.n	8009d00 <UART_SetConfig+0x26c>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	77fb      	strb	r3, [r7, #31]
 8009cec:	e076      	b.n	8009ddc <UART_SetConfig+0x348>
 8009cee:	2302      	movs	r3, #2
 8009cf0:	77fb      	strb	r3, [r7, #31]
 8009cf2:	e073      	b.n	8009ddc <UART_SetConfig+0x348>
 8009cf4:	2304      	movs	r3, #4
 8009cf6:	77fb      	strb	r3, [r7, #31]
 8009cf8:	e070      	b.n	8009ddc <UART_SetConfig+0x348>
 8009cfa:	2308      	movs	r3, #8
 8009cfc:	77fb      	strb	r3, [r7, #31]
 8009cfe:	e06d      	b.n	8009ddc <UART_SetConfig+0x348>
 8009d00:	2310      	movs	r3, #16
 8009d02:	77fb      	strb	r3, [r7, #31]
 8009d04:	e06a      	b.n	8009ddc <UART_SetConfig+0x348>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a1b      	ldr	r2, [pc, #108]	; (8009d78 <UART_SetConfig+0x2e4>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d138      	bne.n	8009d82 <UART_SetConfig+0x2ee>
 8009d10:	4b13      	ldr	r3, [pc, #76]	; (8009d60 <UART_SetConfig+0x2cc>)
 8009d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009d1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d1e:	d017      	beq.n	8009d50 <UART_SetConfig+0x2bc>
 8009d20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d24:	d82a      	bhi.n	8009d7c <UART_SetConfig+0x2e8>
 8009d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d2a:	d00b      	beq.n	8009d44 <UART_SetConfig+0x2b0>
 8009d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d30:	d824      	bhi.n	8009d7c <UART_SetConfig+0x2e8>
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <UART_SetConfig+0x2aa>
 8009d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d3a:	d006      	beq.n	8009d4a <UART_SetConfig+0x2b6>
 8009d3c:	e01e      	b.n	8009d7c <UART_SetConfig+0x2e8>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	77fb      	strb	r3, [r7, #31]
 8009d42:	e04b      	b.n	8009ddc <UART_SetConfig+0x348>
 8009d44:	2302      	movs	r3, #2
 8009d46:	77fb      	strb	r3, [r7, #31]
 8009d48:	e048      	b.n	8009ddc <UART_SetConfig+0x348>
 8009d4a:	2304      	movs	r3, #4
 8009d4c:	77fb      	strb	r3, [r7, #31]
 8009d4e:	e045      	b.n	8009ddc <UART_SetConfig+0x348>
 8009d50:	2308      	movs	r3, #8
 8009d52:	77fb      	strb	r3, [r7, #31]
 8009d54:	e042      	b.n	8009ddc <UART_SetConfig+0x348>
 8009d56:	bf00      	nop
 8009d58:	efff69f3 	.word	0xefff69f3
 8009d5c:	40011000 	.word	0x40011000
 8009d60:	40023800 	.word	0x40023800
 8009d64:	40004400 	.word	0x40004400
 8009d68:	40004800 	.word	0x40004800
 8009d6c:	40004c00 	.word	0x40004c00
 8009d70:	40005000 	.word	0x40005000
 8009d74:	40011400 	.word	0x40011400
 8009d78:	40007800 	.word	0x40007800
 8009d7c:	2310      	movs	r3, #16
 8009d7e:	77fb      	strb	r3, [r7, #31]
 8009d80:	e02c      	b.n	8009ddc <UART_SetConfig+0x348>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a72      	ldr	r2, [pc, #456]	; (8009f50 <UART_SetConfig+0x4bc>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d125      	bne.n	8009dd8 <UART_SetConfig+0x344>
 8009d8c:	4b71      	ldr	r3, [pc, #452]	; (8009f54 <UART_SetConfig+0x4c0>)
 8009d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009d96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d9a:	d017      	beq.n	8009dcc <UART_SetConfig+0x338>
 8009d9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009da0:	d817      	bhi.n	8009dd2 <UART_SetConfig+0x33e>
 8009da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da6:	d00b      	beq.n	8009dc0 <UART_SetConfig+0x32c>
 8009da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dac:	d811      	bhi.n	8009dd2 <UART_SetConfig+0x33e>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d003      	beq.n	8009dba <UART_SetConfig+0x326>
 8009db2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009db6:	d006      	beq.n	8009dc6 <UART_SetConfig+0x332>
 8009db8:	e00b      	b.n	8009dd2 <UART_SetConfig+0x33e>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	77fb      	strb	r3, [r7, #31]
 8009dbe:	e00d      	b.n	8009ddc <UART_SetConfig+0x348>
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	77fb      	strb	r3, [r7, #31]
 8009dc4:	e00a      	b.n	8009ddc <UART_SetConfig+0x348>
 8009dc6:	2304      	movs	r3, #4
 8009dc8:	77fb      	strb	r3, [r7, #31]
 8009dca:	e007      	b.n	8009ddc <UART_SetConfig+0x348>
 8009dcc:	2308      	movs	r3, #8
 8009dce:	77fb      	strb	r3, [r7, #31]
 8009dd0:	e004      	b.n	8009ddc <UART_SetConfig+0x348>
 8009dd2:	2310      	movs	r3, #16
 8009dd4:	77fb      	strb	r3, [r7, #31]
 8009dd6:	e001      	b.n	8009ddc <UART_SetConfig+0x348>
 8009dd8:	2310      	movs	r3, #16
 8009dda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	69db      	ldr	r3, [r3, #28]
 8009de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009de4:	d15b      	bne.n	8009e9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009de6:	7ffb      	ldrb	r3, [r7, #31]
 8009de8:	2b08      	cmp	r3, #8
 8009dea:	d828      	bhi.n	8009e3e <UART_SetConfig+0x3aa>
 8009dec:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <UART_SetConfig+0x360>)
 8009dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df2:	bf00      	nop
 8009df4:	08009e19 	.word	0x08009e19
 8009df8:	08009e21 	.word	0x08009e21
 8009dfc:	08009e29 	.word	0x08009e29
 8009e00:	08009e3f 	.word	0x08009e3f
 8009e04:	08009e2f 	.word	0x08009e2f
 8009e08:	08009e3f 	.word	0x08009e3f
 8009e0c:	08009e3f 	.word	0x08009e3f
 8009e10:	08009e3f 	.word	0x08009e3f
 8009e14:	08009e37 	.word	0x08009e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e18:	f7fd f978 	bl	800710c <HAL_RCC_GetPCLK1Freq>
 8009e1c:	61b8      	str	r0, [r7, #24]
        break;
 8009e1e:	e013      	b.n	8009e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e20:	f7fd f988 	bl	8007134 <HAL_RCC_GetPCLK2Freq>
 8009e24:	61b8      	str	r0, [r7, #24]
        break;
 8009e26:	e00f      	b.n	8009e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e28:	4b4b      	ldr	r3, [pc, #300]	; (8009f58 <UART_SetConfig+0x4c4>)
 8009e2a:	61bb      	str	r3, [r7, #24]
        break;
 8009e2c:	e00c      	b.n	8009e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e2e:	f7fd f89b 	bl	8006f68 <HAL_RCC_GetSysClockFreq>
 8009e32:	61b8      	str	r0, [r7, #24]
        break;
 8009e34:	e008      	b.n	8009e48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e3a:	61bb      	str	r3, [r7, #24]
        break;
 8009e3c:	e004      	b.n	8009e48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	77bb      	strb	r3, [r7, #30]
        break;
 8009e46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d074      	beq.n	8009f38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009e4e:	69bb      	ldr	r3, [r7, #24]
 8009e50:	005a      	lsls	r2, r3, #1
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	085b      	lsrs	r3, r3, #1
 8009e58:	441a      	add	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	2b0f      	cmp	r3, #15
 8009e68:	d916      	bls.n	8009e98 <UART_SetConfig+0x404>
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e70:	d212      	bcs.n	8009e98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	f023 030f 	bic.w	r3, r3, #15
 8009e7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	085b      	lsrs	r3, r3, #1
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	f003 0307 	and.w	r3, r3, #7
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	89fb      	ldrh	r3, [r7, #14]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	89fa      	ldrh	r2, [r7, #14]
 8009e94:	60da      	str	r2, [r3, #12]
 8009e96:	e04f      	b.n	8009f38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	77bb      	strb	r3, [r7, #30]
 8009e9c:	e04c      	b.n	8009f38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e9e:	7ffb      	ldrb	r3, [r7, #31]
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d828      	bhi.n	8009ef6 <UART_SetConfig+0x462>
 8009ea4:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <UART_SetConfig+0x418>)
 8009ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eaa:	bf00      	nop
 8009eac:	08009ed1 	.word	0x08009ed1
 8009eb0:	08009ed9 	.word	0x08009ed9
 8009eb4:	08009ee1 	.word	0x08009ee1
 8009eb8:	08009ef7 	.word	0x08009ef7
 8009ebc:	08009ee7 	.word	0x08009ee7
 8009ec0:	08009ef7 	.word	0x08009ef7
 8009ec4:	08009ef7 	.word	0x08009ef7
 8009ec8:	08009ef7 	.word	0x08009ef7
 8009ecc:	08009eef 	.word	0x08009eef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ed0:	f7fd f91c 	bl	800710c <HAL_RCC_GetPCLK1Freq>
 8009ed4:	61b8      	str	r0, [r7, #24]
        break;
 8009ed6:	e013      	b.n	8009f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ed8:	f7fd f92c 	bl	8007134 <HAL_RCC_GetPCLK2Freq>
 8009edc:	61b8      	str	r0, [r7, #24]
        break;
 8009ede:	e00f      	b.n	8009f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ee0:	4b1d      	ldr	r3, [pc, #116]	; (8009f58 <UART_SetConfig+0x4c4>)
 8009ee2:	61bb      	str	r3, [r7, #24]
        break;
 8009ee4:	e00c      	b.n	8009f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ee6:	f7fd f83f 	bl	8006f68 <HAL_RCC_GetSysClockFreq>
 8009eea:	61b8      	str	r0, [r7, #24]
        break;
 8009eec:	e008      	b.n	8009f00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ef2:	61bb      	str	r3, [r7, #24]
        break;
 8009ef4:	e004      	b.n	8009f00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009efa:	2301      	movs	r3, #1
 8009efc:	77bb      	strb	r3, [r7, #30]
        break;
 8009efe:	bf00      	nop
    }

    if (pclk != 0U)
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d018      	beq.n	8009f38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	085a      	lsrs	r2, r3, #1
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	441a      	add	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	2b0f      	cmp	r3, #15
 8009f1e:	d909      	bls.n	8009f34 <UART_SetConfig+0x4a0>
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f26:	d205      	bcs.n	8009f34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	60da      	str	r2, [r3, #12]
 8009f32:	e001      	b.n	8009f38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009f44:	7fbb      	ldrb	r3, [r7, #30]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3720      	adds	r7, #32
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	40007c00 	.word	0x40007c00
 8009f54:	40023800 	.word	0x40023800
 8009f58:	00f42400 	.word	0x00f42400

08009f5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00a      	beq.n	8009f86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f8a:	f003 0302 	and.w	r3, r3, #2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00a      	beq.n	8009fa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	430a      	orrs	r2, r1
 8009fa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00a      	beq.n	8009fca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	f003 0308 	and.w	r3, r3, #8
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00a      	beq.n	8009fec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	f003 0310 	and.w	r3, r3, #16
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00a      	beq.n	800a00e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	430a      	orrs	r2, r1
 800a00c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a012:	f003 0320 	and.w	r3, r3, #32
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00a      	beq.n	800a030 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	430a      	orrs	r2, r1
 800a02e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d01a      	beq.n	800a072 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a056:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a05a:	d10a      	bne.n	800a072 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	430a      	orrs	r2, r1
 800a070:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00a      	beq.n	800a094 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	430a      	orrs	r2, r1
 800a092:	605a      	str	r2, [r3, #4]
  }
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b086      	sub	sp, #24
 800a0a4:	af02      	add	r7, sp, #8
 800a0a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0b0:	f7f9 fc9c 	bl	80039ec <HAL_GetTick>
 800a0b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f003 0308 	and.w	r3, r3, #8
 800a0c0:	2b08      	cmp	r3, #8
 800a0c2:	d10e      	bne.n	800a0e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f831 	bl	800a13a <UART_WaitOnFlagUntilTimeout>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d001      	beq.n	800a0e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	e027      	b.n	800a132 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0304 	and.w	r3, r3, #4
 800a0ec:	2b04      	cmp	r3, #4
 800a0ee:	d10e      	bne.n	800a10e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f81b 	bl	800a13a <UART_WaitOnFlagUntilTimeout>
 800a104:	4603      	mov	r3, r0
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e011      	b.n	800a132 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2220      	movs	r2, #32
 800a112:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2220      	movs	r2, #32
 800a118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b09c      	sub	sp, #112	; 0x70
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	603b      	str	r3, [r7, #0]
 800a146:	4613      	mov	r3, r2
 800a148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a14a:	e0a7      	b.n	800a29c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a14c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a14e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a152:	f000 80a3 	beq.w	800a29c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a156:	f7f9 fc49 	bl	80039ec <HAL_GetTick>
 800a15a:	4602      	mov	r2, r0
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a162:	429a      	cmp	r2, r3
 800a164:	d302      	bcc.n	800a16c <UART_WaitOnFlagUntilTimeout+0x32>
 800a166:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d13f      	bne.n	800a1ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a174:	e853 3f00 	ldrex	r3, [r3]
 800a178:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a17a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a17c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a180:	667b      	str	r3, [r7, #100]	; 0x64
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a18a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a18c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a190:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a192:	e841 2300 	strex	r3, r2, [r1]
 800a196:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1e6      	bne.n	800a16c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a8:	e853 3f00 	ldrex	r3, [r3]
 800a1ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1b0:	f023 0301 	bic.w	r3, r3, #1
 800a1b4:	663b      	str	r3, [r7, #96]	; 0x60
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1be:	64ba      	str	r2, [r7, #72]	; 0x48
 800a1c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a1cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e5      	bne.n	800a19e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e068      	b.n	800a2be <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0304 	and.w	r3, r3, #4
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d050      	beq.n	800a29c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a208:	d148      	bne.n	800a29c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a212:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a228:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a232:	637b      	str	r3, [r7, #52]	; 0x34
 800a234:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a238:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e6      	bne.n	800a214 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3308      	adds	r3, #8
 800a24c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	e853 3f00 	ldrex	r3, [r3]
 800a254:	613b      	str	r3, [r7, #16]
   return(result);
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f023 0301 	bic.w	r3, r3, #1
 800a25c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3308      	adds	r3, #8
 800a264:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a266:	623a      	str	r2, [r7, #32]
 800a268:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26a:	69f9      	ldr	r1, [r7, #28]
 800a26c:	6a3a      	ldr	r2, [r7, #32]
 800a26e:	e841 2300 	strex	r3, r2, [r1]
 800a272:	61bb      	str	r3, [r7, #24]
   return(result);
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1e5      	bne.n	800a246 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2220      	movs	r2, #32
 800a27e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2220      	movs	r2, #32
 800a284:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2220      	movs	r2, #32
 800a28c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e010      	b.n	800a2be <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	69da      	ldr	r2, [r3, #28]
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	bf0c      	ite	eq
 800a2ac:	2301      	moveq	r3, #1
 800a2ae:	2300      	movne	r3, #0
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	79fb      	ldrb	r3, [r7, #7]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	f43f af48 	beq.w	800a14c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3770      	adds	r7, #112	; 0x70
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
	...

0800a2c8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a2c8:	b084      	sub	sp, #16
 800a2ca:	b480      	push	{r7}
 800a2cc:	b085      	sub	sp, #20
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	f107 001c 	add.w	r0, r7, #28
 800a2d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a2de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a2e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a2e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a2e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a2ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a2ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a2f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a2f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	4b07      	ldr	r3, [pc, #28]	; (800a31c <SDMMC_Init+0x54>)
 800a300:	4013      	ands	r3, r2
 800a302:	68fa      	ldr	r2, [r7, #12]
 800a304:	431a      	orrs	r2, r3
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	b004      	add	sp, #16
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	ffff8100 	.word	0xffff8100

0800a320 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a32e:	4618      	mov	r0, r3
 800a330:	370c      	adds	r7, #12
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a33a:	b480      	push	{r7}
 800a33c:	b083      	sub	sp, #12
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681a      	ldr	r2, [r3, #0]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2203      	movs	r2, #3
 800a368:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0303 	and.w	r3, r3, #3
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	681a      	ldr	r2, [r3, #0]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a3b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a3b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a3be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	68da      	ldr	r2, [r3, #12]
 800a3ca:	4b06      	ldr	r3, [pc, #24]	; (800a3e4 <SDMMC_SendCommand+0x50>)
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	fffff000 	.word	0xfffff000

0800a3e8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b083      	sub	sp, #12
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	b2db      	uxtb	r3, r3
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	370c      	adds	r7, #12
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr

0800a402 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a402:	b480      	push	{r7}
 800a404:	b085      	sub	sp, #20
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	3314      	adds	r3, #20
 800a410:	461a      	mov	r2, r3
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	4413      	add	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
}  
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a44e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a454:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a45a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4313      	orrs	r3, r2
 800a460:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a466:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	431a      	orrs	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a472:	2300      	movs	r3, #0

}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr

0800a480 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b088      	sub	sp, #32
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a48e:	2310      	movs	r3, #16
 800a490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a492:	2340      	movs	r3, #64	; 0x40
 800a494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a496:	2300      	movs	r3, #0
 800a498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a49a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a49e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4a0:	f107 0308 	add.w	r3, r7, #8
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f7ff ff74 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a4ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4b0:	2110      	movs	r1, #16
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fa1a 	bl	800a8ec <SDMMC_GetCmdResp1>
 800a4b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4ba:	69fb      	ldr	r3, [r7, #28]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3720      	adds	r7, #32
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b088      	sub	sp, #32
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a4d2:	2311      	movs	r3, #17
 800a4d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4d6:	2340      	movs	r3, #64	; 0x40
 800a4d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4e4:	f107 0308 	add.w	r3, r7, #8
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff ff52 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a4f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4f4:	2111      	movs	r1, #17
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f000 f9f8 	bl	800a8ec <SDMMC_GetCmdResp1>
 800a4fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4fe:	69fb      	ldr	r3, [r7, #28]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3720      	adds	r7, #32
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b088      	sub	sp, #32
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a516:	2312      	movs	r3, #18
 800a518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a51a:	2340      	movs	r3, #64	; 0x40
 800a51c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a51e:	2300      	movs	r3, #0
 800a520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a526:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a528:	f107 0308 	add.w	r3, r7, #8
 800a52c:	4619      	mov	r1, r3
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f7ff ff30 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a534:	f241 3288 	movw	r2, #5000	; 0x1388
 800a538:	2112      	movs	r1, #18
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 f9d6 	bl	800a8ec <SDMMC_GetCmdResp1>
 800a540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a542:	69fb      	ldr	r3, [r7, #28]
}
 800a544:	4618      	mov	r0, r3
 800a546:	3720      	adds	r7, #32
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b088      	sub	sp, #32
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
 800a554:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a55a:	2318      	movs	r3, #24
 800a55c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a55e:	2340      	movs	r3, #64	; 0x40
 800a560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a562:	2300      	movs	r3, #0
 800a564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a56a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a56c:	f107 0308 	add.w	r3, r7, #8
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7ff ff0e 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a578:	f241 3288 	movw	r2, #5000	; 0x1388
 800a57c:	2118      	movs	r1, #24
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 f9b4 	bl	800a8ec <SDMMC_GetCmdResp1>
 800a584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a586:	69fb      	ldr	r3, [r7, #28]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3720      	adds	r7, #32
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b088      	sub	sp, #32
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a59e:	2319      	movs	r3, #25
 800a5a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5a2:	2340      	movs	r3, #64	; 0x40
 800a5a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5b0:	f107 0308 	add.w	r3, r7, #8
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7ff feec 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a5bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5c0:	2119      	movs	r1, #25
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f992 	bl	800a8ec <SDMMC_GetCmdResp1>
 800a5c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5ca:	69fb      	ldr	r3, [r7, #28]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3720      	adds	r7, #32
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b088      	sub	sp, #32
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a5e0:	230c      	movs	r3, #12
 800a5e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5e4:	2340      	movs	r3, #64	; 0x40
 800a5e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5f2:	f107 0308 	add.w	r3, r7, #8
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f7ff fecb 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a5fe:	4a05      	ldr	r2, [pc, #20]	; (800a614 <SDMMC_CmdStopTransfer+0x40>)
 800a600:	210c      	movs	r1, #12
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f972 	bl	800a8ec <SDMMC_GetCmdResp1>
 800a608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a60a:	69fb      	ldr	r3, [r7, #28]
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3720      	adds	r7, #32
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	05f5e100 	.word	0x05f5e100

0800a618 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08a      	sub	sp, #40	; 0x28
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a628:	2307      	movs	r3, #7
 800a62a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a62c:	2340      	movs	r3, #64	; 0x40
 800a62e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a630:	2300      	movs	r3, #0
 800a632:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a638:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a63a:	f107 0310 	add.w	r3, r7, #16
 800a63e:	4619      	mov	r1, r3
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	f7ff fea7 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a646:	f241 3288 	movw	r2, #5000	; 0x1388
 800a64a:	2107      	movs	r1, #7
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 f94d 	bl	800a8ec <SDMMC_GetCmdResp1>
 800a652:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a656:	4618      	mov	r0, r3
 800a658:	3728      	adds	r7, #40	; 0x28
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b088      	sub	sp, #32
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a66e:	2300      	movs	r3, #0
 800a670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a672:	2300      	movs	r3, #0
 800a674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a67a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a67c:	f107 0308 	add.w	r3, r7, #8
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f7ff fe86 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fb67 	bl	800ad5c <SDMMC_GetCmdError>
 800a68e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a690:	69fb      	ldr	r3, [r7, #28]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3720      	adds	r7, #32
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b088      	sub	sp, #32
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a6a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a6a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a6a8:	2308      	movs	r3, #8
 800a6aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ac:	2340      	movs	r3, #64	; 0x40
 800a6ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6ba:	f107 0308 	add.w	r3, r7, #8
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f7ff fe67 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 fafa 	bl	800acc0 <SDMMC_GetCmdResp7>
 800a6cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6ce:	69fb      	ldr	r3, [r7, #28]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3720      	adds	r7, #32
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a6e6:	2337      	movs	r3, #55	; 0x37
 800a6e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ea:	2340      	movs	r3, #64	; 0x40
 800a6ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6f8:	f107 0308 	add.w	r3, r7, #8
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7ff fe48 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a704:	f241 3288 	movw	r2, #5000	; 0x1388
 800a708:	2137      	movs	r1, #55	; 0x37
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f000 f8ee 	bl	800a8ec <SDMMC_GetCmdResp1>
 800a710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a712:	69fb      	ldr	r3, [r7, #28]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3720      	adds	r7, #32
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b088      	sub	sp, #32
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	4b0d      	ldr	r3, [pc, #52]	; (800a760 <SDMMC_CmdAppOperCommand+0x44>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a72e:	2329      	movs	r3, #41	; 0x29
 800a730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a732:	2340      	movs	r3, #64	; 0x40
 800a734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a736:	2300      	movs	r3, #0
 800a738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a73a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a73e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a740:	f107 0308 	add.w	r3, r7, #8
 800a744:	4619      	mov	r1, r3
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7ff fe24 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fa03 	bl	800ab58 <SDMMC_GetCmdResp3>
 800a752:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a754:	69fb      	ldr	r3, [r7, #28]
}
 800a756:	4618      	mov	r0, r3
 800a758:	3720      	adds	r7, #32
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	80100000 	.word	0x80100000

0800a764 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b088      	sub	sp, #32
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a772:	2306      	movs	r3, #6
 800a774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a776:	2340      	movs	r3, #64	; 0x40
 800a778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a77a:	2300      	movs	r3, #0
 800a77c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a77e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a782:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a784:	f107 0308 	add.w	r3, r7, #8
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff fe02 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a790:	f241 3288 	movw	r2, #5000	; 0x1388
 800a794:	2106      	movs	r1, #6
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f8a8 	bl	800a8ec <SDMMC_GetCmdResp1>
 800a79c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a79e:	69fb      	ldr	r3, [r7, #28]
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3720      	adds	r7, #32
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a7b4:	2333      	movs	r3, #51	; 0x33
 800a7b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a7b8:	2340      	movs	r3, #64	; 0x40
 800a7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a7c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a7c6:	f107 0308 	add.w	r3, r7, #8
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff fde1 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a7d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d6:	2133      	movs	r1, #51	; 0x33
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f887 	bl	800a8ec <SDMMC_GetCmdResp1>
 800a7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7e0:	69fb      	ldr	r3, [r7, #28]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3720      	adds	r7, #32
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}

0800a7ea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a7ea:	b580      	push	{r7, lr}
 800a7ec:	b088      	sub	sp, #32
 800a7ee:	af00      	add	r7, sp, #0
 800a7f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a7fa:	23c0      	movs	r3, #192	; 0xc0
 800a7fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a7fe:	2300      	movs	r3, #0
 800a800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a806:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a808:	f107 0308 	add.w	r3, r7, #8
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7ff fdc0 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f000 f957 	bl	800aac8 <SDMMC_GetCmdResp2>
 800a81a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a81c:	69fb      	ldr	r3, [r7, #28]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3720      	adds	r7, #32
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b088      	sub	sp, #32
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a834:	2309      	movs	r3, #9
 800a836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a838:	23c0      	movs	r3, #192	; 0xc0
 800a83a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a83c:	2300      	movs	r3, #0
 800a83e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a844:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a846:	f107 0308 	add.w	r3, r7, #8
 800a84a:	4619      	mov	r1, r3
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff fda1 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f938 	bl	800aac8 <SDMMC_GetCmdResp2>
 800a858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a85a:	69fb      	ldr	r3, [r7, #28]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3720      	adds	r7, #32
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}

0800a864 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b088      	sub	sp, #32
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a872:	2303      	movs	r3, #3
 800a874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a876:	2340      	movs	r3, #64	; 0x40
 800a878:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a87a:	2300      	movs	r3, #0
 800a87c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a87e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a882:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a884:	f107 0308 	add.w	r3, r7, #8
 800a888:	4619      	mov	r1, r3
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f7ff fd82 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a890:	683a      	ldr	r2, [r7, #0]
 800a892:	2103      	movs	r1, #3
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f99d 	bl	800abd4 <SDMMC_GetCmdResp6>
 800a89a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a89c:	69fb      	ldr	r3, [r7, #28]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b088      	sub	sp, #32
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a8b4:	230d      	movs	r3, #13
 800a8b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a8b8:	2340      	movs	r3, #64	; 0x40
 800a8ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a8c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a8c6:	f107 0308 	add.w	r3, r7, #8
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f7ff fd61 	bl	800a394 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a8d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8d6:	210d      	movs	r1, #13
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f807 	bl	800a8ec <SDMMC_GetCmdResp1>
 800a8de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a8e0:	69fb      	ldr	r3, [r7, #28]
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3720      	adds	r7, #32
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
	...

0800a8ec <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b088      	sub	sp, #32
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a8fa:	4b70      	ldr	r3, [pc, #448]	; (800aabc <SDMMC_GetCmdResp1+0x1d0>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a70      	ldr	r2, [pc, #448]	; (800aac0 <SDMMC_GetCmdResp1+0x1d4>)
 800a900:	fba2 2303 	umull	r2, r3, r2, r3
 800a904:	0a5a      	lsrs	r2, r3, #9
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	fb02 f303 	mul.w	r3, r2, r3
 800a90c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	1e5a      	subs	r2, r3, #1
 800a912:	61fa      	str	r2, [r7, #28]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d102      	bne.n	800a91e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a918:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a91c:	e0c9      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a922:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d0ef      	beq.n	800a90e <SDMMC_GetCmdResp1+0x22>
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1ea      	bne.n	800a90e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93c:	f003 0304 	and.w	r3, r3, #4
 800a940:	2b00      	cmp	r3, #0
 800a942:	d004      	beq.n	800a94e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2204      	movs	r2, #4
 800a948:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a94a:	2304      	movs	r3, #4
 800a94c:	e0b1      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d004      	beq.n	800a964 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2201      	movs	r2, #1
 800a95e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a960:	2301      	movs	r3, #1
 800a962:	e0a6      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	22c5      	movs	r2, #197	; 0xc5
 800a968:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f7ff fd3c 	bl	800a3e8 <SDMMC_GetCommandResponse>
 800a970:	4603      	mov	r3, r0
 800a972:	461a      	mov	r2, r3
 800a974:	7afb      	ldrb	r3, [r7, #11]
 800a976:	4293      	cmp	r3, r2
 800a978:	d001      	beq.n	800a97e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e099      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a97e:	2100      	movs	r1, #0
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f7ff fd3e 	bl	800a402 <SDMMC_GetResponse>
 800a986:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a988:	697a      	ldr	r2, [r7, #20]
 800a98a:	4b4e      	ldr	r3, [pc, #312]	; (800aac4 <SDMMC_GetCmdResp1+0x1d8>)
 800a98c:	4013      	ands	r3, r2
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a992:	2300      	movs	r3, #0
 800a994:	e08d      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	da02      	bge.n	800a9a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a99c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a9a0:	e087      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a9ac:	2340      	movs	r3, #64	; 0x40
 800a9ae:	e080      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d001      	beq.n	800a9be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a9ba:	2380      	movs	r3, #128	; 0x80
 800a9bc:	e079      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d002      	beq.n	800a9ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a9c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9cc:	e071      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a9d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9dc:	e069      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a9e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ec:	e061      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a9f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a9fc:	e059      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aa08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa0c:	e051      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d002      	beq.n	800aa1e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aa18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa1c:	e049      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d002      	beq.n	800aa2e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800aa28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aa2c:	e041      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800aa38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa3c:	e039      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aa48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aa4c:	e031      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d002      	beq.n	800aa5e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800aa58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa5c:	e029      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d002      	beq.n	800aa6e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800aa68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa6c:	e021      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800aa78:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aa7c:	e019      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800aa88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa8c:	e011      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800aa98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa9c:	e009      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f003 0308 	and.w	r3, r3, #8
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800aaa8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aaac:	e001      	b.n	800aab2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aaae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3720      	adds	r7, #32
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20000000 	.word	0x20000000
 800aac0:	10624dd3 	.word	0x10624dd3
 800aac4:	fdffe008 	.word	0xfdffe008

0800aac8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aad0:	4b1f      	ldr	r3, [pc, #124]	; (800ab50 <SDMMC_GetCmdResp2+0x88>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a1f      	ldr	r2, [pc, #124]	; (800ab54 <SDMMC_GetCmdResp2+0x8c>)
 800aad6:	fba2 2303 	umull	r2, r3, r2, r3
 800aada:	0a5b      	lsrs	r3, r3, #9
 800aadc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae0:	fb02 f303 	mul.w	r3, r2, r3
 800aae4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	1e5a      	subs	r2, r3, #1
 800aaea:	60fa      	str	r2, [r7, #12]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d102      	bne.n	800aaf6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aaf0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aaf4:	e026      	b.n	800ab44 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d0ef      	beq.n	800aae6 <SDMMC_GetCmdResp2+0x1e>
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1ea      	bne.n	800aae6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab14:	f003 0304 	and.w	r3, r3, #4
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d004      	beq.n	800ab26 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2204      	movs	r2, #4
 800ab20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab22:	2304      	movs	r3, #4
 800ab24:	e00e      	b.n	800ab44 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab2a:	f003 0301 	and.w	r3, r3, #1
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d004      	beq.n	800ab3c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2201      	movs	r2, #1
 800ab36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e003      	b.n	800ab44 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	22c5      	movs	r2, #197	; 0xc5
 800ab40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr
 800ab50:	20000000 	.word	0x20000000
 800ab54:	10624dd3 	.word	0x10624dd3

0800ab58 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab60:	4b1a      	ldr	r3, [pc, #104]	; (800abcc <SDMMC_GetCmdResp3+0x74>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a1a      	ldr	r2, [pc, #104]	; (800abd0 <SDMMC_GetCmdResp3+0x78>)
 800ab66:	fba2 2303 	umull	r2, r3, r2, r3
 800ab6a:	0a5b      	lsrs	r3, r3, #9
 800ab6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab70:	fb02 f303 	mul.w	r3, r2, r3
 800ab74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	1e5a      	subs	r2, r3, #1
 800ab7a:	60fa      	str	r2, [r7, #12]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d102      	bne.n	800ab86 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab84:	e01b      	b.n	800abbe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d0ef      	beq.n	800ab76 <SDMMC_GetCmdResp3+0x1e>
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1ea      	bne.n	800ab76 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aba4:	f003 0304 	and.w	r3, r3, #4
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d004      	beq.n	800abb6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2204      	movs	r2, #4
 800abb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abb2:	2304      	movs	r3, #4
 800abb4:	e003      	b.n	800abbe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	22c5      	movs	r2, #197	; 0xc5
 800abba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	20000000 	.word	0x20000000
 800abd0:	10624dd3 	.word	0x10624dd3

0800abd4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b088      	sub	sp, #32
 800abd8:	af00      	add	r7, sp, #0
 800abda:	60f8      	str	r0, [r7, #12]
 800abdc:	460b      	mov	r3, r1
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abe2:	4b35      	ldr	r3, [pc, #212]	; (800acb8 <SDMMC_GetCmdResp6+0xe4>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a35      	ldr	r2, [pc, #212]	; (800acbc <SDMMC_GetCmdResp6+0xe8>)
 800abe8:	fba2 2303 	umull	r2, r3, r2, r3
 800abec:	0a5b      	lsrs	r3, r3, #9
 800abee:	f241 3288 	movw	r2, #5000	; 0x1388
 800abf2:	fb02 f303 	mul.w	r3, r2, r3
 800abf6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	1e5a      	subs	r2, r3, #1
 800abfc:	61fa      	str	r2, [r7, #28]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d102      	bne.n	800ac08 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac02:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac06:	e052      	b.n	800acae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac0c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d0ef      	beq.n	800abf8 <SDMMC_GetCmdResp6+0x24>
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1ea      	bne.n	800abf8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac26:	f003 0304 	and.w	r3, r3, #4
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d004      	beq.n	800ac38 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2204      	movs	r2, #4
 800ac32:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac34:	2304      	movs	r3, #4
 800ac36:	e03a      	b.n	800acae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d004      	beq.n	800ac4e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2201      	movs	r2, #1
 800ac48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e02f      	b.n	800acae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7ff fbca 	bl	800a3e8 <SDMMC_GetCommandResponse>
 800ac54:	4603      	mov	r3, r0
 800ac56:	461a      	mov	r2, r3
 800ac58:	7afb      	ldrb	r3, [r7, #11]
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d001      	beq.n	800ac62 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	e025      	b.n	800acae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	22c5      	movs	r2, #197	; 0xc5
 800ac66:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ac68:	2100      	movs	r1, #0
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f7ff fbc9 	bl	800a402 <SDMMC_GetResponse>
 800ac70:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d106      	bne.n	800ac8a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	0c1b      	lsrs	r3, r3, #16
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ac86:	2300      	movs	r3, #0
 800ac88:	e011      	b.n	800acae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ac94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ac98:	e009      	b.n	800acae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aca8:	e001      	b.n	800acae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800acaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3720      	adds	r7, #32
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20000000 	.word	0x20000000
 800acbc:	10624dd3 	.word	0x10624dd3

0800acc0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800acc8:	4b22      	ldr	r3, [pc, #136]	; (800ad54 <SDMMC_GetCmdResp7+0x94>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a22      	ldr	r2, [pc, #136]	; (800ad58 <SDMMC_GetCmdResp7+0x98>)
 800acce:	fba2 2303 	umull	r2, r3, r2, r3
 800acd2:	0a5b      	lsrs	r3, r3, #9
 800acd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800acd8:	fb02 f303 	mul.w	r3, r2, r3
 800acdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	1e5a      	subs	r2, r3, #1
 800ace2:	60fa      	str	r2, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d102      	bne.n	800acee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ace8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acec:	e02c      	b.n	800ad48 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acf2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0ef      	beq.n	800acde <SDMMC_GetCmdResp7+0x1e>
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1ea      	bne.n	800acde <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d004      	beq.n	800ad1e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2204      	movs	r2, #4
 800ad18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad1a:	2304      	movs	r3, #4
 800ad1c:	e014      	b.n	800ad48 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d004      	beq.n	800ad34 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e009      	b.n	800ad48 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2240      	movs	r2, #64	; 0x40
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ad46:	2300      	movs	r3, #0
  
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	20000000 	.word	0x20000000
 800ad58:	10624dd3 	.word	0x10624dd3

0800ad5c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ad64:	4b11      	ldr	r3, [pc, #68]	; (800adac <SDMMC_GetCmdError+0x50>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a11      	ldr	r2, [pc, #68]	; (800adb0 <SDMMC_GetCmdError+0x54>)
 800ad6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad6e:	0a5b      	lsrs	r3, r3, #9
 800ad70:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad74:	fb02 f303 	mul.w	r3, r2, r3
 800ad78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	1e5a      	subs	r2, r3, #1
 800ad7e:	60fa      	str	r2, [r7, #12]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d102      	bne.n	800ad8a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ad84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad88:	e009      	b.n	800ad9e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d0f1      	beq.n	800ad7a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	22c5      	movs	r2, #197	; 0xc5
 800ad9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	20000000 	.word	0x20000000
 800adb0:	10624dd3 	.word	0x10624dd3

0800adb4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800adb8:	4904      	ldr	r1, [pc, #16]	; (800adcc <MX_FATFS_Init+0x18>)
 800adba:	4805      	ldr	r0, [pc, #20]	; (800add0 <MX_FATFS_Init+0x1c>)
 800adbc:	f000 faa0 	bl	800b300 <FATFS_LinkDriver>
 800adc0:	4603      	mov	r3, r0
 800adc2:	461a      	mov	r2, r3
 800adc4:	4b03      	ldr	r3, [pc, #12]	; (800add4 <MX_FATFS_Init+0x20>)
 800adc6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800adc8:	bf00      	nop
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	200065e0 	.word	0x200065e0
 800add0:	0800b3b0 	.word	0x0800b3b0
 800add4:	200065dc 	.word	0x200065dc

0800add8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ade2:	f000 f896 	bl	800af12 <BSP_SD_IsDetected>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d001      	beq.n	800adf0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800adec:	2302      	movs	r3, #2
 800adee:	e012      	b.n	800ae16 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800adf0:	480b      	ldr	r0, [pc, #44]	; (800ae20 <BSP_SD_Init+0x48>)
 800adf2:	f7fd fa78 	bl	80082e6 <HAL_SD_Init>
 800adf6:	4603      	mov	r3, r0
 800adf8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800adfa:	79fb      	ldrb	r3, [r7, #7]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d109      	bne.n	800ae14 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ae00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae04:	4806      	ldr	r0, [pc, #24]	; (800ae20 <BSP_SD_Init+0x48>)
 800ae06:	f7fe f83f 	bl	8008e88 <HAL_SD_ConfigWideBusOperation>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d001      	beq.n	800ae14 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ae10:	2301      	movs	r3, #1
 800ae12:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ae14:	79fb      	ldrb	r3, [r7, #7]
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	20006334 	.word	0x20006334

0800ae24 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ae30:	2300      	movs	r3, #0
 800ae32:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	68f9      	ldr	r1, [r7, #12]
 800ae3a:	4806      	ldr	r0, [pc, #24]	; (800ae54 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ae3c:	f7fd fb0c 	bl	8008458 <HAL_SD_ReadBlocks_DMA>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3718      	adds	r7, #24
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}
 800ae54:	20006334 	.word	0x20006334

0800ae58 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b086      	sub	sp, #24
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ae64:	2300      	movs	r3, #0
 800ae66:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	68ba      	ldr	r2, [r7, #8]
 800ae6c:	68f9      	ldr	r1, [r7, #12]
 800ae6e:	4806      	ldr	r0, [pc, #24]	; (800ae88 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ae70:	f7fd fbd4 	bl	800861c <HAL_SD_WriteBlocks_DMA>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ae7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	3718      	adds	r7, #24
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	20006334 	.word	0x20006334

0800ae8c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ae90:	4805      	ldr	r0, [pc, #20]	; (800aea8 <BSP_SD_GetCardState+0x1c>)
 800ae92:	f7fe f893 	bl	8008fbc <HAL_SD_GetCardState>
 800ae96:	4603      	mov	r3, r0
 800ae98:	2b04      	cmp	r3, #4
 800ae9a:	bf14      	ite	ne
 800ae9c:	2301      	movne	r3, #1
 800ae9e:	2300      	moveq	r3, #0
 800aea0:	b2db      	uxtb	r3, r3
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	bd80      	pop	{r7, pc}
 800aea6:	bf00      	nop
 800aea8:	20006334 	.word	0x20006334

0800aeac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800aeb4:	6879      	ldr	r1, [r7, #4]
 800aeb6:	4803      	ldr	r0, [pc, #12]	; (800aec4 <BSP_SD_GetCardInfo+0x18>)
 800aeb8:	f7fd ffba 	bl	8008e30 <HAL_SD_GetCardInfo>
}
 800aebc:	bf00      	nop
 800aebe:	3708      	adds	r7, #8
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	20006334 	.word	0x20006334

0800aec8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800aed0:	f000 f818 	bl	800af04 <BSP_SD_AbortCallback>
}
 800aed4:	bf00      	nop
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800aee4:	f000 f9a8 	bl	800b238 <BSP_SD_WriteCpltCallback>
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800aef8:	f000 f9aa 	bl	800b250 <BSP_SD_ReadCpltCallback>
}
 800aefc:	bf00      	nop
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800af04:	b480      	push	{r7}
 800af06:	af00      	add	r7, sp, #0

}
 800af08:	bf00      	nop
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b082      	sub	sp, #8
 800af16:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800af18:	2301      	movs	r3, #1
 800af1a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800af1c:	f000 f80c 	bl	800af38 <BSP_PlatformIsDetected>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d101      	bne.n	800af2a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800af26:	2300      	movs	r3, #0
 800af28:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800af2a:	79fb      	ldrb	r3, [r7, #7]
 800af2c:	b2db      	uxtb	r3, r3
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3708      	adds	r7, #8
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}
	...

0800af38 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800af3e:	2301      	movs	r3, #1
 800af40:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800af42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800af46:	4806      	ldr	r0, [pc, #24]	; (800af60 <BSP_PlatformIsDetected+0x28>)
 800af48:	f7fa fe48 	bl	8005bdc <HAL_GPIO_ReadPin>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d001      	beq.n	800af56 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800af52:	2300      	movs	r3, #0
 800af54:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800af56:	79fb      	ldrb	r3, [r7, #7]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	40020400 	.word	0x40020400

0800af64 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800af6c:	f7f8 fd3e 	bl	80039ec <HAL_GetTick>
 800af70:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800af72:	e006      	b.n	800af82 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af74:	f7ff ff8a 	bl	800ae8c <BSP_SD_GetCardState>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	e009      	b.n	800af96 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800af82:	f7f8 fd33 	bl	80039ec <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d8f0      	bhi.n	800af74 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800af92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800af96:	4618      	mov	r0, r3
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
	...

0800afa0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b082      	sub	sp, #8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	4603      	mov	r3, r0
 800afa8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800afaa:	4b0b      	ldr	r3, [pc, #44]	; (800afd8 <SD_CheckStatus+0x38>)
 800afac:	2201      	movs	r2, #1
 800afae:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800afb0:	f7ff ff6c 	bl	800ae8c <BSP_SD_GetCardState>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d107      	bne.n	800afca <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800afba:	4b07      	ldr	r3, [pc, #28]	; (800afd8 <SD_CheckStatus+0x38>)
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	f023 0301 	bic.w	r3, r3, #1
 800afc4:	b2da      	uxtb	r2, r3
 800afc6:	4b04      	ldr	r3, [pc, #16]	; (800afd8 <SD_CheckStatus+0x38>)
 800afc8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800afca:	4b03      	ldr	r3, [pc, #12]	; (800afd8 <SD_CheckStatus+0x38>)
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	b2db      	uxtb	r3, r3
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	2000003d 	.word	0x2000003d

0800afdc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800afe6:	f7ff fef7 	bl	800add8 <BSP_SD_Init>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d107      	bne.n	800b000 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800aff0:	79fb      	ldrb	r3, [r7, #7]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7ff ffd4 	bl	800afa0 <SD_CheckStatus>
 800aff8:	4603      	mov	r3, r0
 800affa:	461a      	mov	r2, r3
 800affc:	4b04      	ldr	r3, [pc, #16]	; (800b010 <SD_initialize+0x34>)
 800affe:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b000:	4b03      	ldr	r3, [pc, #12]	; (800b010 <SD_initialize+0x34>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	b2db      	uxtb	r3, r3
}
 800b006:	4618      	mov	r0, r3
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	2000003d 	.word	0x2000003d

0800b014 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	4603      	mov	r3, r0
 800b01c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b01e:	79fb      	ldrb	r3, [r7, #7]
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff ffbd 	bl	800afa0 <SD_CheckStatus>
 800b026:	4603      	mov	r3, r0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	60b9      	str	r1, [r7, #8]
 800b038:	607a      	str	r2, [r7, #4]
 800b03a:	603b      	str	r3, [r7, #0]
 800b03c:	4603      	mov	r3, r0
 800b03e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b044:	f247 5030 	movw	r0, #30000	; 0x7530
 800b048:	f7ff ff8c 	bl	800af64 <SD_CheckStatusWithTimeout>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	da01      	bge.n	800b056 <SD_read+0x26>
  {
    return res;
 800b052:	7dfb      	ldrb	r3, [r7, #23]
 800b054:	e03b      	b.n	800b0ce <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b056:	683a      	ldr	r2, [r7, #0]
 800b058:	6879      	ldr	r1, [r7, #4]
 800b05a:	68b8      	ldr	r0, [r7, #8]
 800b05c:	f7ff fee2 	bl	800ae24 <BSP_SD_ReadBlocks_DMA>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d132      	bne.n	800b0cc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b066:	4b1c      	ldr	r3, [pc, #112]	; (800b0d8 <SD_read+0xa8>)
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b06c:	f7f8 fcbe 	bl	80039ec <HAL_GetTick>
 800b070:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b072:	bf00      	nop
 800b074:	4b18      	ldr	r3, [pc, #96]	; (800b0d8 <SD_read+0xa8>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d108      	bne.n	800b08e <SD_read+0x5e>
 800b07c:	f7f8 fcb6 	bl	80039ec <HAL_GetTick>
 800b080:	4602      	mov	r2, r0
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	f247 522f 	movw	r2, #29999	; 0x752f
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d9f2      	bls.n	800b074 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b08e:	4b12      	ldr	r3, [pc, #72]	; (800b0d8 <SD_read+0xa8>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d102      	bne.n	800b09c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	75fb      	strb	r3, [r7, #23]
 800b09a:	e017      	b.n	800b0cc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b09c:	4b0e      	ldr	r3, [pc, #56]	; (800b0d8 <SD_read+0xa8>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b0a2:	f7f8 fca3 	bl	80039ec <HAL_GetTick>
 800b0a6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b0a8:	e007      	b.n	800b0ba <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b0aa:	f7ff feef 	bl	800ae8c <BSP_SD_GetCardState>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d102      	bne.n	800b0ba <SD_read+0x8a>
          {
            res = RES_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b0b8:	e008      	b.n	800b0cc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b0ba:	f7f8 fc97 	bl	80039ec <HAL_GetTick>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	1ad3      	subs	r3, r2, r3
 800b0c4:	f247 522f 	movw	r2, #29999	; 0x752f
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d9ee      	bls.n	800b0aa <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b0cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3718      	adds	r7, #24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	200065e8 	.word	0x200065e8

0800b0dc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b086      	sub	sp, #24
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60b9      	str	r1, [r7, #8]
 800b0e4:	607a      	str	r2, [r7, #4]
 800b0e6:	603b      	str	r3, [r7, #0]
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b0f0:	4b24      	ldr	r3, [pc, #144]	; (800b184 <SD_write+0xa8>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b0f6:	f247 5030 	movw	r0, #30000	; 0x7530
 800b0fa:	f7ff ff33 	bl	800af64 <SD_CheckStatusWithTimeout>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	da01      	bge.n	800b108 <SD_write+0x2c>
  {
    return res;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	e038      	b.n	800b17a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b108:	683a      	ldr	r2, [r7, #0]
 800b10a:	6879      	ldr	r1, [r7, #4]
 800b10c:	68b8      	ldr	r0, [r7, #8]
 800b10e:	f7ff fea3 	bl	800ae58 <BSP_SD_WriteBlocks_DMA>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d12f      	bne.n	800b178 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b118:	f7f8 fc68 	bl	80039ec <HAL_GetTick>
 800b11c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b11e:	bf00      	nop
 800b120:	4b18      	ldr	r3, [pc, #96]	; (800b184 <SD_write+0xa8>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d108      	bne.n	800b13a <SD_write+0x5e>
 800b128:	f7f8 fc60 	bl	80039ec <HAL_GetTick>
 800b12c:	4602      	mov	r2, r0
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	f247 522f 	movw	r2, #29999	; 0x752f
 800b136:	4293      	cmp	r3, r2
 800b138:	d9f2      	bls.n	800b120 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b13a:	4b12      	ldr	r3, [pc, #72]	; (800b184 <SD_write+0xa8>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d102      	bne.n	800b148 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	75fb      	strb	r3, [r7, #23]
 800b146:	e017      	b.n	800b178 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b148:	4b0e      	ldr	r3, [pc, #56]	; (800b184 <SD_write+0xa8>)
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b14e:	f7f8 fc4d 	bl	80039ec <HAL_GetTick>
 800b152:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b154:	e007      	b.n	800b166 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b156:	f7ff fe99 	bl	800ae8c <BSP_SD_GetCardState>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d102      	bne.n	800b166 <SD_write+0x8a>
          {
            res = RES_OK;
 800b160:	2300      	movs	r3, #0
 800b162:	75fb      	strb	r3, [r7, #23]
            break;
 800b164:	e008      	b.n	800b178 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b166:	f7f8 fc41 	bl	80039ec <HAL_GetTick>
 800b16a:	4602      	mov	r2, r0
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	f247 522f 	movw	r2, #29999	; 0x752f
 800b174:	4293      	cmp	r3, r2
 800b176:	d9ee      	bls.n	800b156 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b178:	7dfb      	ldrb	r3, [r7, #23]
}
 800b17a:	4618      	mov	r0, r3
 800b17c:	3718      	adds	r7, #24
 800b17e:	46bd      	mov	sp, r7
 800b180:	bd80      	pop	{r7, pc}
 800b182:	bf00      	nop
 800b184:	200065e4 	.word	0x200065e4

0800b188 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08c      	sub	sp, #48	; 0x30
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	4603      	mov	r3, r0
 800b190:	603a      	str	r2, [r7, #0]
 800b192:	71fb      	strb	r3, [r7, #7]
 800b194:	460b      	mov	r3, r1
 800b196:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b19e:	4b25      	ldr	r3, [pc, #148]	; (800b234 <SD_ioctl+0xac>)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	f003 0301 	and.w	r3, r3, #1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <SD_ioctl+0x28>
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	e03c      	b.n	800b22a <SD_ioctl+0xa2>

  switch (cmd)
 800b1b0:	79bb      	ldrb	r3, [r7, #6]
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	d834      	bhi.n	800b220 <SD_ioctl+0x98>
 800b1b6:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <SD_ioctl+0x34>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b1cd 	.word	0x0800b1cd
 800b1c0:	0800b1d5 	.word	0x0800b1d5
 800b1c4:	0800b1ed 	.word	0x0800b1ed
 800b1c8:	0800b207 	.word	0x0800b207
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1d2:	e028      	b.n	800b226 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1d4:	f107 030c 	add.w	r3, r7, #12
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff fe67 	bl	800aeac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b1ea:	e01c      	b.n	800b226 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b1ec:	f107 030c 	add.w	r3, r7, #12
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fe5b 	bl	800aeac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b1fe:	2300      	movs	r3, #0
 800b200:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b204:	e00f      	b.n	800b226 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b206:	f107 030c 	add.w	r3, r7, #12
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7ff fe4e 	bl	800aeac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b212:	0a5a      	lsrs	r2, r3, #9
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b218:	2300      	movs	r3, #0
 800b21a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b21e:	e002      	b.n	800b226 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b220:	2304      	movs	r3, #4
 800b222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b226:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3730      	adds	r7, #48	; 0x30
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	2000003d 	.word	0x2000003d

0800b238 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b238:	b480      	push	{r7}
 800b23a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b23c:	4b03      	ldr	r3, [pc, #12]	; (800b24c <BSP_SD_WriteCpltCallback+0x14>)
 800b23e:	2201      	movs	r2, #1
 800b240:	601a      	str	r2, [r3, #0]
}
 800b242:	bf00      	nop
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	200065e4 	.word	0x200065e4

0800b250 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b250:	b480      	push	{r7}
 800b252:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b254:	4b03      	ldr	r3, [pc, #12]	; (800b264 <BSP_SD_ReadCpltCallback+0x14>)
 800b256:	2201      	movs	r2, #1
 800b258:	601a      	str	r2, [r3, #0]
}
 800b25a:	bf00      	nop
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr
 800b264:	200065e8 	.word	0x200065e8

0800b268 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b268:	b480      	push	{r7}
 800b26a:	b087      	sub	sp, #28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	60f8      	str	r0, [r7, #12]
 800b270:	60b9      	str	r1, [r7, #8]
 800b272:	4613      	mov	r3, r2
 800b274:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b276:	2301      	movs	r3, #1
 800b278:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b27e:	4b1f      	ldr	r3, [pc, #124]	; (800b2fc <FATFS_LinkDriverEx+0x94>)
 800b280:	7a5b      	ldrb	r3, [r3, #9]
 800b282:	b2db      	uxtb	r3, r3
 800b284:	2b00      	cmp	r3, #0
 800b286:	d131      	bne.n	800b2ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b288:	4b1c      	ldr	r3, [pc, #112]	; (800b2fc <FATFS_LinkDriverEx+0x94>)
 800b28a:	7a5b      	ldrb	r3, [r3, #9]
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	461a      	mov	r2, r3
 800b290:	4b1a      	ldr	r3, [pc, #104]	; (800b2fc <FATFS_LinkDriverEx+0x94>)
 800b292:	2100      	movs	r1, #0
 800b294:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b296:	4b19      	ldr	r3, [pc, #100]	; (800b2fc <FATFS_LinkDriverEx+0x94>)
 800b298:	7a5b      	ldrb	r3, [r3, #9]
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	4a17      	ldr	r2, [pc, #92]	; (800b2fc <FATFS_LinkDriverEx+0x94>)
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b2a6:	4b15      	ldr	r3, [pc, #84]	; (800b2fc <FATFS_LinkDriverEx+0x94>)
 800b2a8:	7a5b      	ldrb	r3, [r3, #9]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	4b13      	ldr	r3, [pc, #76]	; (800b2fc <FATFS_LinkDriverEx+0x94>)
 800b2b0:	4413      	add	r3, r2
 800b2b2:	79fa      	ldrb	r2, [r7, #7]
 800b2b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b2b6:	4b11      	ldr	r3, [pc, #68]	; (800b2fc <FATFS_LinkDriverEx+0x94>)
 800b2b8:	7a5b      	ldrb	r3, [r3, #9]
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	b2d1      	uxtb	r1, r2
 800b2c0:	4a0e      	ldr	r2, [pc, #56]	; (800b2fc <FATFS_LinkDriverEx+0x94>)
 800b2c2:	7251      	strb	r1, [r2, #9]
 800b2c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b2c6:	7dbb      	ldrb	r3, [r7, #22]
 800b2c8:	3330      	adds	r3, #48	; 0x30
 800b2ca:	b2da      	uxtb	r2, r3
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	223a      	movs	r2, #58	; 0x3a
 800b2d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	3302      	adds	r3, #2
 800b2dc:	222f      	movs	r2, #47	; 0x2f
 800b2de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	3303      	adds	r3, #3
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	371c      	adds	r7, #28
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	200065ec 	.word	0x200065ec

0800b300 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b082      	sub	sp, #8
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b30a:	2200      	movs	r2, #0
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7ff ffaa 	bl	800b268 <FATFS_LinkDriverEx>
 800b314:	4603      	mov	r3, r0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
	...

0800b320 <__libc_init_array>:
 800b320:	b570      	push	{r4, r5, r6, lr}
 800b322:	4d0d      	ldr	r5, [pc, #52]	; (800b358 <__libc_init_array+0x38>)
 800b324:	4c0d      	ldr	r4, [pc, #52]	; (800b35c <__libc_init_array+0x3c>)
 800b326:	1b64      	subs	r4, r4, r5
 800b328:	10a4      	asrs	r4, r4, #2
 800b32a:	2600      	movs	r6, #0
 800b32c:	42a6      	cmp	r6, r4
 800b32e:	d109      	bne.n	800b344 <__libc_init_array+0x24>
 800b330:	4d0b      	ldr	r5, [pc, #44]	; (800b360 <__libc_init_array+0x40>)
 800b332:	4c0c      	ldr	r4, [pc, #48]	; (800b364 <__libc_init_array+0x44>)
 800b334:	f000 f820 	bl	800b378 <_init>
 800b338:	1b64      	subs	r4, r4, r5
 800b33a:	10a4      	asrs	r4, r4, #2
 800b33c:	2600      	movs	r6, #0
 800b33e:	42a6      	cmp	r6, r4
 800b340:	d105      	bne.n	800b34e <__libc_init_array+0x2e>
 800b342:	bd70      	pop	{r4, r5, r6, pc}
 800b344:	f855 3b04 	ldr.w	r3, [r5], #4
 800b348:	4798      	blx	r3
 800b34a:	3601      	adds	r6, #1
 800b34c:	e7ee      	b.n	800b32c <__libc_init_array+0xc>
 800b34e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b352:	4798      	blx	r3
 800b354:	3601      	adds	r6, #1
 800b356:	e7f2      	b.n	800b33e <__libc_init_array+0x1e>
 800b358:	0800b3cc 	.word	0x0800b3cc
 800b35c:	0800b3cc 	.word	0x0800b3cc
 800b360:	0800b3cc 	.word	0x0800b3cc
 800b364:	0800b3d0 	.word	0x0800b3d0

0800b368 <memset>:
 800b368:	4402      	add	r2, r0
 800b36a:	4603      	mov	r3, r0
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d100      	bne.n	800b372 <memset+0xa>
 800b370:	4770      	bx	lr
 800b372:	f803 1b01 	strb.w	r1, [r3], #1
 800b376:	e7f9      	b.n	800b36c <memset+0x4>

0800b378 <_init>:
 800b378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37a:	bf00      	nop
 800b37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b37e:	bc08      	pop	{r3}
 800b380:	469e      	mov	lr, r3
 800b382:	4770      	bx	lr

0800b384 <_fini>:
 800b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b386:	bf00      	nop
 800b388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b38a:	bc08      	pop	{r3}
 800b38c:	469e      	mov	lr, r3
 800b38e:	4770      	bx	lr
